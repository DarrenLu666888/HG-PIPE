/* verilator lint_off PINMISSING */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="PATCH_EMBED_PATCH_EMBED,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-2MP-e-S,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.397500,HLS_SYN_LAT=56463,HLS_SYN_TPT=56460,HLS_SYN_MEM=59,HLS_SYN_DSP=0,HLS_SYN_FF=11683,HLS_SYN_LUT=11038,HLS_VERSION=2023_2}" *)

module PATCH_EMBED (
        i_stream_TDATA,
        o_stream_TDATA,
        ap_clk,
        ap_rst_n,
        i_stream_TVALID,
        i_stream_TREADY,
        o_stream_TVALID,
        o_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_TDATA;
output  [31:0] o_stream_TDATA;
input   ap_clk;
input   ap_rst_n;
input   i_stream_TVALID;
output   i_stream_TREADY;
output   o_stream_TVALID;
input   o_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [31:0] do_patch_embed_U0_o_stream_TDATA;
 reg    ap_rst_n_inv;
wire    do_patch_embed_U0_i_stream_TREADY;
wire    do_patch_embed_U0_ap_start;
wire    do_patch_embed_U0_o_stream_TVALID;
wire    do_patch_embed_U0_ap_done;
wire    do_patch_embed_U0_ap_ready;
wire    do_patch_embed_U0_ap_idle;
wire    do_patch_embed_U0_ap_continue;

PATCH_EMBED_do_patch_embed do_patch_embed_U0(
    .i_stream_TDATA(i_stream_TDATA),
    .o_stream_TDATA(do_patch_embed_U0_o_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .i_stream_TVALID(i_stream_TVALID),
    .i_stream_TREADY(do_patch_embed_U0_i_stream_TREADY),
    .ap_start(do_patch_embed_U0_ap_start),
    .o_stream_TVALID(do_patch_embed_U0_o_stream_TVALID),
    .o_stream_TREADY(o_stream_TREADY),
    .ap_done(do_patch_embed_U0_ap_done),
    .ap_ready(do_patch_embed_U0_ap_ready),
    .ap_idle(do_patch_embed_U0_ap_idle),
    .ap_continue(do_patch_embed_U0_ap_continue)
);

assign ap_done = do_patch_embed_U0_ap_done;

assign ap_idle = do_patch_embed_U0_ap_idle;

assign ap_ready = do_patch_embed_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign do_patch_embed_U0_ap_continue = ap_continue;

assign do_patch_embed_U0_ap_start = ap_start;

assign i_stream_TREADY = do_patch_embed_U0_i_stream_TREADY;

assign o_stream_TDATA = do_patch_embed_U0_o_stream_TDATA;

assign o_stream_TVALID = do_patch_embed_U0_o_stream_TVALID;

endmodule //PATCH_EMBED
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module PATCH_EMBED_do_adapt (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        i_stream_TVALID,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write,
        i_stream_TDATA,
        i_stream_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   i_stream_TVALID;
output  [255:0] adpt_sm_din;
input  [6:0] adpt_sm_num_data_valid;
input  [6:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;
input  [31:0] i_stream_TDATA;
output   i_stream_TREADY;

reg ap_idle;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_601_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_1_reg_1922;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    i_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln79_fu_607_p2;
reg   [0:0] icmp_ln79_reg_1829;
wire   [7:0] trunc_ln86_fu_615_p1;
reg   [7:0] trunc_ln86_reg_1835;
reg   [7:0] tmp_77_reg_1841;
reg   [7:0] tmp_s_reg_1847;
reg   [7:0] tmp_320_reg_1853;
reg   [15:0] tmp_reg_1859;
reg   [15:0] tmp_reg_1859_pp0_iter1_reg;
wire   [15:0] trunc_ln100_fu_659_p1;
reg   [15:0] trunc_ln100_reg_1864;
reg   [15:0] trunc_ln100_reg_1864_pp0_iter1_reg;
reg   [7:0] p_0_0_0_0_0_0193_load_reg_1869;
reg   [7:0] p_0_0_1_0_0_0195_load_reg_1874;
reg   [7:0] p_0_0_2_0_0_0221_load_reg_1879;
wire   [0:0] or_ln79_fu_748_p2;
reg   [0:0] or_ln79_reg_1884;
wire   [7:0] select_ln79_fu_753_p3;
reg   [7:0] select_ln79_reg_1915;
wire   [0:0] icmp_ln83_1_fu_775_p2;
reg   [3:0] t_fu_74;
wire   [3:0] t_2_fu_767_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [3:0] ap_sig_allocacmp_t_load;
reg   [7:0] p_0_0_01_2169_fu_78;
wire   [7:0] select_ln79_25_fu_1142_p3;
reg    ap_loop_init_pp0_iter2_reg;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_2169_load;
reg   [7:0] p_0_0_01_3171_fu_82;
wire   [7:0] select_ln79_24_fu_1135_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_3171_load;
reg   [7:0] p_0_0_01_4173_fu_86;
wire   [7:0] select_ln79_23_fu_1128_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_4173_load;
reg   [7:0] p_0_0_01_5175_fu_90;
wire   [7:0] select_ln79_22_fu_1121_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_5175_load;
reg   [7:0] p_0_0_01_6177_fu_94;
wire   [7:0] select_ln79_21_fu_1114_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_6177_load;
reg   [7:0] p_0_0_01_7179_fu_98;
wire   [7:0] select_ln79_20_fu_1107_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_7179_load;
reg   [7:0] p_0_0_01_8181_fu_102;
wire   [7:0] select_ln79_19_fu_1100_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_8181_load;
reg   [7:0] p_0_0_01_9183_fu_106;
wire   [7:0] select_ln79_18_fu_1093_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_9183_load;
reg   [7:0] p_0_0_01_10185_fu_110;
wire   [7:0] select_ln79_17_fu_1086_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_10185_load;
reg   [7:0] p_0_0_01_11187_fu_114;
wire   [7:0] select_ln79_16_fu_1079_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_11187_load;
reg   [7:0] p_0_0_01_12189_fu_118;
wire   [7:0] select_ln79_15_fu_1073_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_12189_load;
reg   [7:0] p_0_0_01_13191_fu_122;
wire   [7:0] select_ln79_14_fu_1067_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_13191_load;
reg   [7:0] p_0_0_0_0_0_0193_fu_126;
reg   [7:0] ap_sig_allocacmp_p_0_0_0_0_0_0193_load;
reg   [7:0] p_0_0_1_0_0_0195_fu_130;
reg   [7:0] ap_sig_allocacmp_p_0_0_1_0_0_0195_load;
reg   [7:0] p_0_0_01_1_2197_fu_134;
wire   [7:0] select_ln79_11_fu_1046_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_2197_load;
reg   [7:0] p_0_0_01_1_3199_fu_138;
wire   [7:0] select_ln79_10_fu_1039_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_3199_load;
reg   [7:0] p_0_0_01_1_4201_fu_142;
wire   [7:0] select_ln79_9_fu_1032_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_4201_load;
reg   [7:0] p_0_0_01_1_5203_fu_146;
wire   [7:0] select_ln79_8_fu_1025_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_5203_load;
reg   [7:0] p_0_0_01_1_6205_fu_150;
wire   [7:0] select_ln79_7_fu_1018_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_6205_load;
reg   [7:0] p_0_0_01_1_7207_fu_154;
wire   [7:0] select_ln79_6_fu_1011_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_7207_load;
reg   [7:0] p_0_0_01_1_8209_fu_158;
wire   [7:0] select_ln79_5_fu_1004_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_8209_load;
reg   [7:0] p_0_0_01_1_9211_fu_162;
wire   [7:0] select_ln79_4_fu_997_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_9211_load;
reg   [7:0] p_0_0_01_1_10213_fu_166;
wire   [7:0] select_ln79_3_fu_990_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_10213_load;
reg   [7:0] p_0_0_01_1_11215_fu_170;
wire   [7:0] select_ln79_2_fu_983_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_11215_load;
reg   [7:0] p_0_0_01_1_12217_fu_174;
wire   [7:0] select_ln79_1_fu_977_p3;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_12217_load;
reg   [7:0] p_0_0_01_1_13219_fu_178;
reg   [7:0] ap_sig_allocacmp_p_0_0_01_1_13219_load;
reg   [7:0] p_0_0_2_0_0_0221_fu_182;
reg   [7:0] ap_sig_allocacmp_p_0_0_2_0_0_0221_load;
reg   [7:0] p_0_0_3_0_0_0223_fu_186;
reg   [7:0] ap_sig_allocacmp_p_0_0_3_0_0_0223_load;
reg   [9:0] indvar_flatten_fu_190;
wire   [9:0] select_ln79_28_fu_669_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten42_fu_194;
wire   [15:0] add_ln78_fu_595_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten42_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln79_fu_663_p2;
wire   [0:0] icmp_ln83_fu_736_p2;
wire   [0:0] xor_ln78_fu_731_p2;
wire   [0:0] and_ln78_fu_742_p2;
wire   [3:0] add_ln83_fu_761_p2;
wire   [7:0] select_ln79_12_fu_1053_p3;
wire   [7:0] select_ln79_13_fu_1060_p3;
wire   [7:0] select_ln79_26_fu_1149_p3;
wire   [7:0] select_ln79_27_fu_1156_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_i_stream_U_apdone_blk;
wire   [31:0] i_stream_TDATA_int_regslice;
wire    i_stream_TVALID_int_regslice;
reg    i_stream_TREADY_int_regslice;
wire    regslice_both_i_stream_U_ack_in;
reg    ap_condition_346;
reg    ap_condition_221;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_74 = 4'd0;
//#0 p_0_0_01_2169_fu_78 = 8'd0;
//#0 p_0_0_01_3171_fu_82 = 8'd0;
//#0 p_0_0_01_4173_fu_86 = 8'd0;
//#0 p_0_0_01_5175_fu_90 = 8'd0;
//#0 p_0_0_01_6177_fu_94 = 8'd0;
//#0 p_0_0_01_7179_fu_98 = 8'd0;
//#0 p_0_0_01_8181_fu_102 = 8'd0;
//#0 p_0_0_01_9183_fu_106 = 8'd0;
//#0 p_0_0_01_10185_fu_110 = 8'd0;
//#0 p_0_0_01_11187_fu_114 = 8'd0;
//#0 p_0_0_01_12189_fu_118 = 8'd0;
//#0 p_0_0_01_13191_fu_122 = 8'd0;
//#0 p_0_0_0_0_0_0193_fu_126 = 8'd0;
//#0 p_0_0_1_0_0_0195_fu_130 = 8'd0;
//#0 p_0_0_01_1_2197_fu_134 = 8'd0;
//#0 p_0_0_01_1_3199_fu_138 = 8'd0;
//#0 p_0_0_01_1_4201_fu_142 = 8'd0;
//#0 p_0_0_01_1_5203_fu_146 = 8'd0;
//#0 p_0_0_01_1_6205_fu_150 = 8'd0;
//#0 p_0_0_01_1_7207_fu_154 = 8'd0;
//#0 p_0_0_01_1_8209_fu_158 = 8'd0;
//#0 p_0_0_01_1_9211_fu_162 = 8'd0;
//#0 p_0_0_01_1_10213_fu_166 = 8'd0;
//#0 p_0_0_01_1_11215_fu_170 = 8'd0;
//#0 p_0_0_01_1_12217_fu_174 = 8'd0;
//#0 p_0_0_01_1_13219_fu_178 = 8'd0;
//#0 p_0_0_2_0_0_0221_fu_182 = 8'd0;
//#0 p_0_0_3_0_0_0223_fu_186 = 8'd0;
//#0 indvar_flatten_fu_190 = 10'd0;
//#0 indvar_flatten42_fu_194 = 16'd0;
end

PATCH_EMBED_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

PATCH_EMBED_regslice_both #(
    .DataWidth( 32 ))
regslice_both_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(i_stream_TDATA),
    .vld_in(i_stream_TVALID),
    .ack_in(regslice_both_i_stream_U_ack_in),
    .data_out(i_stream_TDATA_int_regslice),
    .vld_out(i_stream_TVALID_int_regslice),
    .ack_out(i_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_i_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_346)) begin
        if ((icmp_ln78_fu_601_p2 == 1'd0)) begin
            indvar_flatten42_fu_194 <= add_ln78_fu_595_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten42_fu_194 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_346)) begin
        if ((icmp_ln78_fu_601_p2 == 1'd0)) begin
            indvar_flatten_fu_190 <= select_ln79_28_fu_669_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_190 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_01_10185_fu_110 <= select_ln79_17_fu_1086_p3;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_11187_fu_114 <= select_ln79_16_fu_1079_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_12189_fu_118 <= select_ln79_15_fu_1073_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_13191_fu_122 <= select_ln79_14_fu_1067_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_10213_fu_166 <= select_ln79_3_fu_990_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_11215_fu_170 <= select_ln79_2_fu_983_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_12217_fu_174 <= select_ln79_1_fu_977_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_13219_fu_178 <= select_ln79_reg_1915;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_2197_fu_134 <= select_ln79_11_fu_1046_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_3199_fu_138 <= select_ln79_10_fu_1039_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_4201_fu_142 <= select_ln79_9_fu_1032_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_5203_fu_146 <= select_ln79_8_fu_1025_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_6205_fu_150 <= select_ln79_7_fu_1018_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_7207_fu_154 <= select_ln79_6_fu_1011_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_8209_fu_158 <= select_ln79_5_fu_1004_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_9211_fu_162 <= select_ln79_4_fu_997_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_2169_fu_78 <= select_ln79_25_fu_1142_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_3171_fu_82 <= select_ln79_24_fu_1135_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_4173_fu_86 <= select_ln79_23_fu_1128_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_5175_fu_90 <= select_ln79_22_fu_1121_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_6177_fu_94 <= select_ln79_21_fu_1114_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_7179_fu_98 <= select_ln79_20_fu_1107_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_8181_fu_102 <= select_ln79_19_fu_1100_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_9183_fu_106 <= select_ln79_18_fu_1093_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_221)) begin
    p_0_0_0_0_0_0193_fu_126 <= trunc_ln86_reg_1835;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_221)) begin
    p_0_0_1_0_0_0195_fu_130 <= tmp_77_reg_1841;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_221)) begin
    p_0_0_2_0_0_0221_fu_182 <= tmp_s_reg_1847;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_221)) begin
    p_0_0_3_0_0_0223_fu_186 <= tmp_320_reg_1853;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_221)) begin
    t_fu_74 <= t_2_fu_767_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln79_reg_1829 <= icmp_ln79_fu_607_p2;
        icmp_ln83_1_reg_1922 <= icmp_ln83_1_fu_775_p2;
        or_ln79_reg_1884 <= or_ln79_fu_748_p2;
        p_0_0_0_0_0_0193_load_reg_1869 <= ap_sig_allocacmp_p_0_0_0_0_0_0193_load;
        p_0_0_1_0_0_0195_load_reg_1874 <= ap_sig_allocacmp_p_0_0_1_0_0_0195_load;
        p_0_0_2_0_0_0221_load_reg_1879 <= ap_sig_allocacmp_p_0_0_2_0_0_0221_load;
        select_ln79_reg_1915 <= select_ln79_fu_753_p3;
        tmp_320_reg_1853 <= {{i_stream_TDATA_int_regslice[31:24]}};
        tmp_77_reg_1841 <= {{i_stream_TDATA_int_regslice[15:8]}};
        tmp_reg_1859 <= {{i_stream_TDATA_int_regslice[31:16]}};
        tmp_reg_1859_pp0_iter1_reg <= tmp_reg_1859;
        tmp_s_reg_1847 <= {{i_stream_TDATA_int_regslice[23:16]}};
        trunc_ln100_reg_1864 <= trunc_ln100_fu_659_p1;
        trunc_ln100_reg_1864_pp0_iter1_reg <= trunc_ln100_reg_1864;
        trunc_ln86_reg_1835 <= trunc_ln86_fu_615_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_1_reg_1922 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_1_reg_1922 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_601_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten42_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten42_load = indvar_flatten42_fu_194;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_190;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_10185_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_10185_load = p_0_0_01_10185_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_11187_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_11187_load = p_0_0_01_11187_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12189_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12189_load = p_0_0_01_12189_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_13191_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_13191_load = p_0_0_01_13191_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_10213_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_10213_load = p_0_0_01_1_10213_fu_166;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_11215_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_11215_load = p_0_0_01_1_11215_fu_170;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_12217_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_12217_load = p_0_0_01_1_12217_fu_174;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_13219_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_13219_load = p_0_0_01_1_13219_fu_178;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_2197_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_2197_load = p_0_0_01_1_2197_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_3199_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_3199_load = p_0_0_01_1_3199_fu_138;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_4201_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_4201_load = p_0_0_01_1_4201_fu_142;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_5203_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_5203_load = p_0_0_01_1_5203_fu_146;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_6205_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_6205_load = p_0_0_01_1_6205_fu_150;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_7207_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_7207_load = p_0_0_01_1_7207_fu_154;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_8209_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_8209_load = p_0_0_01_1_8209_fu_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_9211_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_9211_load = p_0_0_01_1_9211_fu_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_2169_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_2169_load = p_0_0_01_2169_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_3171_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_3171_load = p_0_0_01_3171_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_4173_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_4173_load = p_0_0_01_4173_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_5175_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_5175_load = p_0_0_01_5175_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_6177_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_6177_load = p_0_0_01_6177_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_7179_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_7179_load = p_0_0_01_7179_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_8181_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_8181_load = p_0_0_01_8181_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_9183_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_9183_load = p_0_0_01_9183_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_0193_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_0193_load = p_0_0_0_0_0_0193_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_0195_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_0195_load = p_0_0_1_0_0_0195_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_p_0_0_2_0_0_0221_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_2_0_0_0221_load = p_0_0_2_0_0_0221_fu_182;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_p_0_0_3_0_0_0223_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_3_0_0_0223_load = p_0_0_3_0_0_0223_fu_186;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 4'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_601_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_TDATA_blk_n = i_stream_TVALID_int_regslice;
    end else begin
        i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_601_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_TREADY_int_regslice = 1'b1;
    end else begin
        i_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_595_p2 = (ap_sig_allocacmp_indvar_flatten42_load + 16'd1);

assign add_ln79_fu_663_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln83_fu_761_p2 = (ap_sig_allocacmp_t_load + 4'd1);

assign adpt_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_reg_1859_pp0_iter1_reg}, {select_ln79_reg_1915}}, {select_ln79_1_fu_977_p3}}, {select_ln79_2_fu_983_p3}}, {select_ln79_3_fu_990_p3}}, {select_ln79_4_fu_997_p3}}, {select_ln79_5_fu_1004_p3}}, {select_ln79_6_fu_1011_p3}}, {select_ln79_7_fu_1018_p3}}, {select_ln79_8_fu_1025_p3}}, {select_ln79_9_fu_1032_p3}}, {select_ln79_10_fu_1039_p3}}, {select_ln79_11_fu_1046_p3}}, {select_ln79_12_fu_1053_p3}}, {select_ln79_13_fu_1060_p3}}, {trunc_ln100_reg_1864_pp0_iter1_reg}}, {select_ln79_14_fu_1067_p3}}, {select_ln79_15_fu_1073_p3}}, {select_ln79_16_fu_1079_p3}}, {select_ln79_17_fu_1086_p3}}, {select_ln79_18_fu_1093_p3}}, {select_ln79_19_fu_1100_p3}}, {select_ln79_20_fu_1107_p3}}, {select_ln79_21_fu_1114_p3}}, {select_ln79_22_fu_1121_p3}}, {select_ln79_23_fu_1128_p3}}, {select_ln79_24_fu_1135_p3}}, {select_ln79_25_fu_1142_p3}}, {select_ln79_26_fu_1149_p3}}, {select_ln79_27_fu_1156_p3}};

assign and_ln78_fu_742_p2 = (xor_ln78_fu_731_p2 & icmp_ln83_fu_736_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((i_stream_TVALID_int_regslice == 1'b0) & (icmp_ln78_fu_601_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln83_1_reg_1922 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_221 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_346 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_stream_TREADY = regslice_both_i_stream_U_ack_in;

assign icmp_ln78_fu_601_p2 = ((ap_sig_allocacmp_indvar_flatten42_load == 16'd37632) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_607_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd384) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_775_p2 = ((t_2_fu_767_p3 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_736_p2 = ((ap_sig_allocacmp_t_load == 4'd8) ? 1'b1 : 1'b0);

assign or_ln79_fu_748_p2 = (icmp_ln79_reg_1829 | and_ln78_fu_742_p2);

assign select_ln79_10_fu_1039_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_5203_load);

assign select_ln79_11_fu_1046_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_4201_load);

assign select_ln79_12_fu_1053_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_3199_load);

assign select_ln79_13_fu_1060_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_2197_load);

assign select_ln79_14_fu_1067_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : p_0_0_1_0_0_0195_load_reg_1874);

assign select_ln79_15_fu_1073_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : p_0_0_0_0_0_0193_load_reg_1869);

assign select_ln79_16_fu_1079_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_13191_load);

assign select_ln79_17_fu_1086_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_12189_load);

assign select_ln79_18_fu_1093_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_11187_load);

assign select_ln79_19_fu_1100_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_10185_load);

assign select_ln79_1_fu_977_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : p_0_0_2_0_0_0221_load_reg_1879);

assign select_ln79_20_fu_1107_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_9183_load);

assign select_ln79_21_fu_1114_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_8181_load);

assign select_ln79_22_fu_1121_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_7179_load);

assign select_ln79_23_fu_1128_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_6177_load);

assign select_ln79_24_fu_1135_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_5175_load);

assign select_ln79_25_fu_1142_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_4173_load);

assign select_ln79_26_fu_1149_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_3171_load);

assign select_ln79_27_fu_1156_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_2169_load);

assign select_ln79_28_fu_669_p3 = ((icmp_ln79_fu_607_p2[0:0] == 1'b1) ? 10'd1 : add_ln79_fu_663_p2);

assign select_ln79_2_fu_983_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_13219_load);

assign select_ln79_3_fu_990_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_12217_load);

assign select_ln79_4_fu_997_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_11215_load);

assign select_ln79_5_fu_1004_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_10213_load);

assign select_ln79_6_fu_1011_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_9211_load);

assign select_ln79_7_fu_1018_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_8209_load);

assign select_ln79_8_fu_1025_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_7207_load);

assign select_ln79_9_fu_1032_p3 = ((or_ln79_reg_1884[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_01_1_6205_load);

assign select_ln79_fu_753_p3 = ((or_ln79_fu_748_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_p_0_0_3_0_0_0223_load);

assign start_out = real_start;

assign t_2_fu_767_p3 = ((or_ln79_fu_748_p2[0:0] == 1'b1) ? 4'd1 : add_ln83_fu_761_p2);

assign trunc_ln100_fu_659_p1 = i_stream_TDATA_int_regslice[15:0];

assign trunc_ln86_fu_615_p1 = i_stream_TDATA_int_regslice[7:0];

assign xor_ln78_fu_731_p2 = (icmp_ln79_reg_1829 ^ 1'd1);

endmodule //PATCH_EMBED_do_adapt
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module PATCH_EMBED_do_adapt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        o_stream_TREADY,
        o_stream_TDATA,
        o_stream_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [415:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
input   o_stream_TREADY;
output  [31:0] o_stream_TDATA;
output   o_stream_TVALID;

reg ap_idle;
reg mac_sm_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_1970;
reg   [0:0] icmp_ln45_reg_1970_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1980;
reg    ap_predicate_op83_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln45_reg_1970_pp0_iter2_reg;
wire    regslice_both_o_stream_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_685_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    o_stream_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_691_p2;
reg   [0:0] icmp_ln46_reg_1974;
wire   [0:0] icmp_ln50_fu_771_p2;
reg   [0:0] icmp_ln50_reg_1980_pp0_iter2_reg;
wire   [12:0] trunc_ln50_fu_797_p1;
reg    ap_condition_exit_pp0_iter3_stage0;
reg   [12:0] ap_phi_mux_empty_phi_fu_344_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_empty_reg_341;
reg   [12:0] ap_phi_reg_pp0_iter1_empty_reg_341;
reg   [12:0] ap_phi_reg_pp0_iter2_empty_reg_341;
reg   [12:0] ap_phi_reg_pp0_iter3_empty_reg_341;
reg   [12:0] ap_phi_mux_p_0_0_0_1_14225_phi_fu_354_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_14225_reg_351;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_14225_reg_351;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_14225_reg_351;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_14225_reg_351;
reg   [12:0] ap_phi_mux_p_0_0_0_1_13223_phi_fu_363_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_13223_reg_360;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_13223_reg_360;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_13223_reg_360;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_13223_reg_360;
reg   [12:0] ap_phi_mux_p_0_0_0_1_12221_phi_fu_372_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_12221_reg_369;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_12221_reg_369;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_12221_reg_369;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_12221_reg_369;
reg   [12:0] ap_phi_mux_p_0_0_0_1_11219_phi_fu_381_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_11219_reg_378;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_11219_reg_378;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_11219_reg_378;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_11219_reg_378;
reg   [12:0] ap_phi_mux_p_0_0_0_1_10217_phi_fu_390_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_10217_reg_387;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_10217_reg_387;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_10217_reg_387;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_10217_reg_387;
reg   [12:0] ap_phi_mux_p_0_0_0_1_9215_phi_fu_399_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_9215_reg_396;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_9215_reg_396;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_9215_reg_396;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_9215_reg_396;
reg   [12:0] ap_phi_mux_p_0_0_0_1_8213_phi_fu_408_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_8213_reg_405;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_8213_reg_405;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_8213_reg_405;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_8213_reg_405;
reg   [12:0] ap_phi_mux_p_0_0_0_1_7211_phi_fu_417_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_7211_reg_414;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_7211_reg_414;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_7211_reg_414;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_7211_reg_414;
reg   [12:0] ap_phi_mux_p_0_0_0_1_6209_phi_fu_426_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_6209_reg_423;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_6209_reg_423;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_6209_reg_423;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_6209_reg_423;
reg   [12:0] ap_phi_mux_p_0_0_0_1_5207_phi_fu_435_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_5207_reg_432;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_5207_reg_432;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_5207_reg_432;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_5207_reg_432;
reg   [12:0] ap_phi_mux_p_0_0_0_1_4205_phi_fu_444_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_4205_reg_441;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_4205_reg_441;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4205_reg_441;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_4205_reg_441;
reg   [12:0] ap_phi_mux_p_0_0_0_1_3203_phi_fu_453_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_3203_reg_450;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_3203_reg_450;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3203_reg_450;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_3203_reg_450;
reg   [12:0] ap_phi_mux_p_0_0_0_1_2201_phi_fu_462_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_2201_reg_459;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_2201_reg_459;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2201_reg_459;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_2201_reg_459;
reg   [12:0] ap_phi_mux_p_0_0_0_1_1199_phi_fu_471_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1_1199_reg_468;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1_1199_reg_468;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_1199_reg_468;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1_1199_reg_468;
reg   [12:0] ap_phi_mux_p_0_0_0_1197_phi_fu_480_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_1197_reg_477;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_1197_reg_477;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_1197_reg_477;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_1197_reg_477;
reg   [12:0] ap_phi_mux_empty_605_phi_fu_489_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_empty_605_reg_486;
reg   [12:0] ap_phi_reg_pp0_iter1_empty_605_reg_486;
reg   [12:0] ap_phi_reg_pp0_iter2_empty_605_reg_486;
reg   [12:0] ap_phi_reg_pp0_iter3_empty_605_reg_486;
reg   [12:0] ap_phi_mux_p_0_0_0_14195_phi_fu_499_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_14195_reg_496;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_14195_reg_496;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_14195_reg_496;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_14195_reg_496;
reg   [12:0] ap_phi_mux_p_0_0_0_13193_phi_fu_508_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_13193_reg_505;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_13193_reg_505;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_13193_reg_505;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_13193_reg_505;
reg   [12:0] ap_phi_mux_p_0_0_0_12191_phi_fu_517_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_12191_reg_514;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_12191_reg_514;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_12191_reg_514;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_12191_reg_514;
reg   [12:0] ap_phi_mux_p_0_0_0_11189_phi_fu_526_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_11189_reg_523;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_11189_reg_523;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_11189_reg_523;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_11189_reg_523;
reg   [12:0] ap_phi_mux_p_0_0_0_10187_phi_fu_535_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_10187_reg_532;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_10187_reg_532;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_10187_reg_532;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_10187_reg_532;
reg   [12:0] ap_phi_mux_p_0_0_0_9185_phi_fu_544_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_9185_reg_541;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_9185_reg_541;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_9185_reg_541;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_9185_reg_541;
reg   [12:0] ap_phi_mux_p_0_0_0_8183_phi_fu_553_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_8183_reg_550;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_8183_reg_550;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_8183_reg_550;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_8183_reg_550;
reg   [12:0] ap_phi_mux_p_0_0_0_7181_phi_fu_562_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_7181_reg_559;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_7181_reg_559;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_7181_reg_559;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_7181_reg_559;
reg   [12:0] ap_phi_mux_p_0_0_0_6179_phi_fu_571_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_6179_reg_568;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_6179_reg_568;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_6179_reg_568;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_6179_reg_568;
reg   [12:0] ap_phi_mux_p_0_0_0_5177_phi_fu_580_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_5177_reg_577;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_5177_reg_577;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_5177_reg_577;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_5177_reg_577;
reg   [12:0] ap_phi_mux_p_0_0_0_4175_phi_fu_589_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_4175_reg_586;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_4175_reg_586;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_4175_reg_586;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_4175_reg_586;
reg   [12:0] ap_phi_mux_p_0_0_0_3173_phi_fu_598_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_3173_reg_595;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_3173_reg_595;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_3173_reg_595;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_3173_reg_595;
reg   [12:0] ap_phi_mux_p_0_0_0_2171_phi_fu_607_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_2171_reg_604;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_2171_reg_604;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_2171_reg_604;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_2171_reg_604;
reg   [12:0] ap_phi_mux_p_0_0_0_126169_phi_fu_616_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_126169_reg_613;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_126169_reg_613;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_126169_reg_613;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_126169_reg_613;
reg   [12:0] ap_phi_mux_p_0_0_0167_phi_fu_625_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0167_reg_622;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0167_reg_622;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0167_reg_622;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0167_reg_622;
reg   [4:0] t_fu_196;
wire   [4:0] t_1_fu_777_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_t_load;
reg   [8:0] indvar_flatten_fu_200;
wire   [8:0] select_ln46_1_fu_703_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten70_fu_204;
wire   [14:0] add_ln45_fu_679_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten70_load;
reg   [12:0] p_0_0_0166_fu_208;
reg   [12:0] p_0_0_0_126168_fu_212;
reg   [12:0] p_0_0_0_2170_fu_216;
reg   [12:0] p_0_0_0_3172_fu_220;
reg   [12:0] p_0_0_0_4174_fu_224;
reg   [12:0] p_0_0_0_5176_fu_228;
reg   [12:0] p_0_0_0_6178_fu_232;
reg   [12:0] p_0_0_0_7180_fu_236;
reg   [12:0] p_0_0_0_8182_fu_240;
reg   [12:0] p_0_0_0_9184_fu_244;
reg   [12:0] p_0_0_0_10186_fu_248;
reg   [12:0] p_0_0_0_11188_fu_252;
reg   [12:0] p_0_0_0_12190_fu_256;
reg   [12:0] p_0_0_0_13192_fu_260;
reg   [12:0] p_0_0_0_14194_fu_264;
reg   [12:0] p_0_0_0_1196_fu_268;
reg   [12:0] p_0_0_0_1_1198_fu_272;
reg   [12:0] p_0_0_0_1_2200_fu_276;
reg   [12:0] p_0_0_0_1_3202_fu_280;
reg   [12:0] p_0_0_0_1_4204_fu_284;
reg   [12:0] p_0_0_0_1_5206_fu_288;
reg   [12:0] p_0_0_0_1_6208_fu_292;
reg   [12:0] p_0_0_0_1_7210_fu_296;
reg   [12:0] p_0_0_0_1_8212_fu_300;
reg   [12:0] p_0_0_0_1_9214_fu_304;
reg   [12:0] p_0_0_0_1_10216_fu_308;
reg   [12:0] p_0_0_0_1_11218_fu_312;
reg   [12:0] p_0_0_0_1_12220_fu_316;
reg   [12:0] p_0_0_0_1_13222_fu_320;
reg   [12:0] p_0_0_0_1_14224_fu_324;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln46_fu_697_p2;
wire   [0:0] icmp_ln47_fu_746_p2;
wire   [0:0] xor_ln45_fu_741_p2;
wire   [0:0] and_ln45_fu_752_p2;
wire   [0:0] or_ln46_fu_758_p2;
wire   [4:0] select_ln46_fu_763_p3;
wire   [28:0] tmp_fu_1321_p4;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] o_stream_TDATA_int_regslice;
reg    o_stream_TVALID_int_regslice;
wire    o_stream_TREADY_int_regslice;
wire    regslice_both_o_stream_U_vld_out;
reg    ap_condition_393;
reg    ap_condition_397;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_196 = 5'd0;
//#0 indvar_flatten_fu_200 = 9'd0;
//#0 indvar_flatten70_fu_204 = 15'd0;
//#0 p_0_0_0166_fu_208 = 13'd0;
//#0 p_0_0_0_126168_fu_212 = 13'd0;
//#0 p_0_0_0_2170_fu_216 = 13'd0;
//#0 p_0_0_0_3172_fu_220 = 13'd0;
//#0 p_0_0_0_4174_fu_224 = 13'd0;
//#0 p_0_0_0_5176_fu_228 = 13'd0;
//#0 p_0_0_0_6178_fu_232 = 13'd0;
//#0 p_0_0_0_7180_fu_236 = 13'd0;
//#0 p_0_0_0_8182_fu_240 = 13'd0;
//#0 p_0_0_0_9184_fu_244 = 13'd0;
//#0 p_0_0_0_10186_fu_248 = 13'd0;
//#0 p_0_0_0_11188_fu_252 = 13'd0;
//#0 p_0_0_0_12190_fu_256 = 13'd0;
//#0 p_0_0_0_13192_fu_260 = 13'd0;
//#0 p_0_0_0_14194_fu_264 = 13'd0;
//#0 p_0_0_0_1196_fu_268 = 13'd0;
//#0 p_0_0_0_1_1198_fu_272 = 13'd0;
//#0 p_0_0_0_1_2200_fu_276 = 13'd0;
//#0 p_0_0_0_1_3202_fu_280 = 13'd0;
//#0 p_0_0_0_1_4204_fu_284 = 13'd0;
//#0 p_0_0_0_1_5206_fu_288 = 13'd0;
//#0 p_0_0_0_1_6208_fu_292 = 13'd0;
//#0 p_0_0_0_1_7210_fu_296 = 13'd0;
//#0 p_0_0_0_1_8212_fu_300 = 13'd0;
//#0 p_0_0_0_1_9214_fu_304 = 13'd0;
//#0 p_0_0_0_1_10216_fu_308 = 13'd0;
//#0 p_0_0_0_1_11218_fu_312 = 13'd0;
//#0 p_0_0_0_1_12220_fu_316 = 13'd0;
//#0 p_0_0_0_1_13222_fu_320 = 13'd0;
//#0 p_0_0_0_1_14224_fu_324 = 13'd0;
end

PATCH_EMBED_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

PATCH_EMBED_regslice_both #(
    .DataWidth( 32 ))
regslice_both_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(o_stream_TDATA_int_regslice),
    .vld_in(o_stream_TVALID_int_regslice),
    .ack_in(o_stream_TREADY_int_regslice),
    .data_out(o_stream_TDATA),
    .vld_out(regslice_both_o_stream_U_vld_out),
    .ack_out(o_stream_TREADY),
    .apdone_blk(regslice_both_o_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_605_reg_486 <= {{mac_sm_dout[207:195]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_empty_605_reg_486 <= ap_phi_reg_pp0_iter2_empty_605_reg_486;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_341 <= {{mac_sm_dout[415:403]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_empty_reg_341 <= ap_phi_reg_pp0_iter2_empty_reg_341;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0167_reg_622 <= trunc_ln50_fu_797_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0167_reg_622 <= ap_phi_reg_pp0_iter2_p_0_0_0167_reg_622;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_10187_reg_532 <= {{mac_sm_dout[142:130]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_10187_reg_532 <= ap_phi_reg_pp0_iter2_p_0_0_0_10187_reg_532;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_11189_reg_523 <= {{mac_sm_dout[155:143]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_11189_reg_523 <= ap_phi_reg_pp0_iter2_p_0_0_0_11189_reg_523;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1197_reg_477 <= {{mac_sm_dout[220:208]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1197_reg_477 <= ap_phi_reg_pp0_iter2_p_0_0_0_1197_reg_477;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_12191_reg_514 <= {{mac_sm_dout[168:156]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_12191_reg_514 <= ap_phi_reg_pp0_iter2_p_0_0_0_12191_reg_514;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_126169_reg_613 <= {{mac_sm_dout[25:13]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_126169_reg_613 <= ap_phi_reg_pp0_iter2_p_0_0_0_126169_reg_613;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_13193_reg_505 <= {{mac_sm_dout[181:169]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_13193_reg_505 <= ap_phi_reg_pp0_iter2_p_0_0_0_13193_reg_505;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_14195_reg_496 <= {{mac_sm_dout[194:182]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_14195_reg_496 <= ap_phi_reg_pp0_iter2_p_0_0_0_14195_reg_496;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_10217_reg_387 <= {{mac_sm_dout[350:338]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_10217_reg_387 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_10217_reg_387;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_11219_reg_378 <= {{mac_sm_dout[363:351]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_11219_reg_378 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_11219_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_1199_reg_468 <= {{mac_sm_dout[233:221]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_1199_reg_468 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_1199_reg_468;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_12221_reg_369 <= {{mac_sm_dout[376:364]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_12221_reg_369 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_12221_reg_369;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_13223_reg_360 <= {{mac_sm_dout[389:377]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_13223_reg_360 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_13223_reg_360;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_14225_reg_351 <= {{mac_sm_dout[402:390]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_14225_reg_351 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_14225_reg_351;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_2201_reg_459 <= {{mac_sm_dout[246:234]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_2201_reg_459 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_2201_reg_459;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_3203_reg_450 <= {{mac_sm_dout[259:247]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_3203_reg_450 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_3203_reg_450;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_4205_reg_441 <= {{mac_sm_dout[272:260]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_4205_reg_441 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_4205_reg_441;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_5207_reg_432 <= {{mac_sm_dout[285:273]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_5207_reg_432 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_5207_reg_432;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_6209_reg_423 <= {{mac_sm_dout[298:286]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_6209_reg_423 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_6209_reg_423;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_7211_reg_414 <= {{mac_sm_dout[311:299]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_7211_reg_414 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_7211_reg_414;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_8213_reg_405 <= {{mac_sm_dout[324:312]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_8213_reg_405 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_8213_reg_405;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_9215_reg_396 <= {{mac_sm_dout[337:325]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1_9215_reg_396 <= ap_phi_reg_pp0_iter2_p_0_0_0_1_9215_reg_396;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_2171_reg_604 <= {{mac_sm_dout[38:26]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_2171_reg_604 <= ap_phi_reg_pp0_iter2_p_0_0_0_2171_reg_604;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_3173_reg_595 <= {{mac_sm_dout[51:39]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_3173_reg_595 <= ap_phi_reg_pp0_iter2_p_0_0_0_3173_reg_595;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_4175_reg_586 <= {{mac_sm_dout[64:52]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_4175_reg_586 <= ap_phi_reg_pp0_iter2_p_0_0_0_4175_reg_586;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_5177_reg_577 <= {{mac_sm_dout[77:65]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_5177_reg_577 <= ap_phi_reg_pp0_iter2_p_0_0_0_5177_reg_577;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_6179_reg_568 <= {{mac_sm_dout[90:78]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_6179_reg_568 <= ap_phi_reg_pp0_iter2_p_0_0_0_6179_reg_568;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_7181_reg_559 <= {{mac_sm_dout[103:91]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_7181_reg_559 <= ap_phi_reg_pp0_iter2_p_0_0_0_7181_reg_559;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_8183_reg_550 <= {{mac_sm_dout[116:104]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_8183_reg_550 <= ap_phi_reg_pp0_iter2_p_0_0_0_8183_reg_550;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_9185_reg_541 <= {{mac_sm_dout[129:117]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_9185_reg_541 <= ap_phi_reg_pp0_iter2_p_0_0_0_9185_reg_541;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_393)) begin
        if ((icmp_ln45_fu_685_p2 == 1'd0)) begin
            indvar_flatten70_fu_204 <= add_ln45_fu_679_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten70_fu_204 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_393)) begin
        if ((icmp_ln45_fu_685_p2 == 1'd0)) begin
            indvar_flatten_fu_200 <= select_ln46_1_fu_703_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_200 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_397)) begin
        if ((icmp_ln45_reg_1970 == 1'd0)) begin
            t_fu_196 <= t_1_fu_777_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_196 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_1970 <= icmp_ln45_fu_685_p2;
        icmp_ln45_reg_1970_pp0_iter1_reg <= icmp_ln45_reg_1970;
        icmp_ln46_reg_1974 <= icmp_ln46_fu_691_p2;
        icmp_ln50_reg_1980 <= icmp_ln50_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln45_reg_1970_pp0_iter2_reg <= icmp_ln45_reg_1970_pp0_iter1_reg;
        icmp_ln50_reg_1980_pp0_iter2_reg <= icmp_ln50_reg_1980;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_605_reg_486 <= ap_phi_reg_pp0_iter0_empty_605_reg_486;
        ap_phi_reg_pp0_iter1_empty_reg_341 <= ap_phi_reg_pp0_iter0_empty_reg_341;
        ap_phi_reg_pp0_iter1_p_0_0_0167_reg_622 <= ap_phi_reg_pp0_iter0_p_0_0_0167_reg_622;
        ap_phi_reg_pp0_iter1_p_0_0_0_10187_reg_532 <= ap_phi_reg_pp0_iter0_p_0_0_0_10187_reg_532;
        ap_phi_reg_pp0_iter1_p_0_0_0_11189_reg_523 <= ap_phi_reg_pp0_iter0_p_0_0_0_11189_reg_523;
        ap_phi_reg_pp0_iter1_p_0_0_0_1197_reg_477 <= ap_phi_reg_pp0_iter0_p_0_0_0_1197_reg_477;
        ap_phi_reg_pp0_iter1_p_0_0_0_12191_reg_514 <= ap_phi_reg_pp0_iter0_p_0_0_0_12191_reg_514;
        ap_phi_reg_pp0_iter1_p_0_0_0_126169_reg_613 <= ap_phi_reg_pp0_iter0_p_0_0_0_126169_reg_613;
        ap_phi_reg_pp0_iter1_p_0_0_0_13193_reg_505 <= ap_phi_reg_pp0_iter0_p_0_0_0_13193_reg_505;
        ap_phi_reg_pp0_iter1_p_0_0_0_14195_reg_496 <= ap_phi_reg_pp0_iter0_p_0_0_0_14195_reg_496;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_10217_reg_387 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_10217_reg_387;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_11219_reg_378 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_11219_reg_378;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_1199_reg_468 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_1199_reg_468;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_12221_reg_369 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_12221_reg_369;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_13223_reg_360 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_13223_reg_360;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_14225_reg_351 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_14225_reg_351;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_2201_reg_459 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_2201_reg_459;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_3203_reg_450 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_3203_reg_450;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_4205_reg_441 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_4205_reg_441;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_5207_reg_432 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_5207_reg_432;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_6209_reg_423 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_6209_reg_423;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_7211_reg_414 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_7211_reg_414;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_8213_reg_405 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_8213_reg_405;
        ap_phi_reg_pp0_iter1_p_0_0_0_1_9215_reg_396 <= ap_phi_reg_pp0_iter0_p_0_0_0_1_9215_reg_396;
        ap_phi_reg_pp0_iter1_p_0_0_0_2171_reg_604 <= ap_phi_reg_pp0_iter0_p_0_0_0_2171_reg_604;
        ap_phi_reg_pp0_iter1_p_0_0_0_3173_reg_595 <= ap_phi_reg_pp0_iter0_p_0_0_0_3173_reg_595;
        ap_phi_reg_pp0_iter1_p_0_0_0_4175_reg_586 <= ap_phi_reg_pp0_iter0_p_0_0_0_4175_reg_586;
        ap_phi_reg_pp0_iter1_p_0_0_0_5177_reg_577 <= ap_phi_reg_pp0_iter0_p_0_0_0_5177_reg_577;
        ap_phi_reg_pp0_iter1_p_0_0_0_6179_reg_568 <= ap_phi_reg_pp0_iter0_p_0_0_0_6179_reg_568;
        ap_phi_reg_pp0_iter1_p_0_0_0_7181_reg_559 <= ap_phi_reg_pp0_iter0_p_0_0_0_7181_reg_559;
        ap_phi_reg_pp0_iter1_p_0_0_0_8183_reg_550 <= ap_phi_reg_pp0_iter0_p_0_0_0_8183_reg_550;
        ap_phi_reg_pp0_iter1_p_0_0_0_9185_reg_541 <= ap_phi_reg_pp0_iter0_p_0_0_0_9185_reg_541;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_empty_605_reg_486 <= ap_phi_reg_pp0_iter1_empty_605_reg_486;
        ap_phi_reg_pp0_iter2_empty_reg_341 <= ap_phi_reg_pp0_iter1_empty_reg_341;
        ap_phi_reg_pp0_iter2_p_0_0_0167_reg_622 <= ap_phi_reg_pp0_iter1_p_0_0_0167_reg_622;
        ap_phi_reg_pp0_iter2_p_0_0_0_10187_reg_532 <= ap_phi_reg_pp0_iter1_p_0_0_0_10187_reg_532;
        ap_phi_reg_pp0_iter2_p_0_0_0_11189_reg_523 <= ap_phi_reg_pp0_iter1_p_0_0_0_11189_reg_523;
        ap_phi_reg_pp0_iter2_p_0_0_0_1197_reg_477 <= ap_phi_reg_pp0_iter1_p_0_0_0_1197_reg_477;
        ap_phi_reg_pp0_iter2_p_0_0_0_12191_reg_514 <= ap_phi_reg_pp0_iter1_p_0_0_0_12191_reg_514;
        ap_phi_reg_pp0_iter2_p_0_0_0_126169_reg_613 <= ap_phi_reg_pp0_iter1_p_0_0_0_126169_reg_613;
        ap_phi_reg_pp0_iter2_p_0_0_0_13193_reg_505 <= ap_phi_reg_pp0_iter1_p_0_0_0_13193_reg_505;
        ap_phi_reg_pp0_iter2_p_0_0_0_14195_reg_496 <= ap_phi_reg_pp0_iter1_p_0_0_0_14195_reg_496;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_10217_reg_387 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_10217_reg_387;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_11219_reg_378 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_11219_reg_378;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_1199_reg_468 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_1199_reg_468;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_12221_reg_369 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_12221_reg_369;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_13223_reg_360 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_13223_reg_360;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_14225_reg_351 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_14225_reg_351;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_2201_reg_459 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_2201_reg_459;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_3203_reg_450 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_3203_reg_450;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_4205_reg_441 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_4205_reg_441;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_5207_reg_432 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_5207_reg_432;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_6209_reg_423 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_6209_reg_423;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_7211_reg_414 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_7211_reg_414;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_8213_reg_405 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_8213_reg_405;
        ap_phi_reg_pp0_iter2_p_0_0_0_1_9215_reg_396 <= ap_phi_reg_pp0_iter1_p_0_0_0_1_9215_reg_396;
        ap_phi_reg_pp0_iter2_p_0_0_0_2171_reg_604 <= ap_phi_reg_pp0_iter1_p_0_0_0_2171_reg_604;
        ap_phi_reg_pp0_iter2_p_0_0_0_3173_reg_595 <= ap_phi_reg_pp0_iter1_p_0_0_0_3173_reg_595;
        ap_phi_reg_pp0_iter2_p_0_0_0_4175_reg_586 <= ap_phi_reg_pp0_iter1_p_0_0_0_4175_reg_586;
        ap_phi_reg_pp0_iter2_p_0_0_0_5177_reg_577 <= ap_phi_reg_pp0_iter1_p_0_0_0_5177_reg_577;
        ap_phi_reg_pp0_iter2_p_0_0_0_6179_reg_568 <= ap_phi_reg_pp0_iter1_p_0_0_0_6179_reg_568;
        ap_phi_reg_pp0_iter2_p_0_0_0_7181_reg_559 <= ap_phi_reg_pp0_iter1_p_0_0_0_7181_reg_559;
        ap_phi_reg_pp0_iter2_p_0_0_0_8183_reg_550 <= ap_phi_reg_pp0_iter1_p_0_0_0_8183_reg_550;
        ap_phi_reg_pp0_iter2_p_0_0_0_9185_reg_541 <= ap_phi_reg_pp0_iter1_p_0_0_0_9185_reg_541;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_0_0_0166_fu_208 <= ap_phi_mux_p_0_0_0_126169_phi_fu_616_p4;
        p_0_0_0_10186_fu_248 <= ap_phi_mux_p_0_0_0_11189_phi_fu_526_p4;
        p_0_0_0_11188_fu_252 <= ap_phi_mux_p_0_0_0_12191_phi_fu_517_p4;
        p_0_0_0_1196_fu_268 <= ap_phi_mux_p_0_0_0_1_1199_phi_fu_471_p4;
        p_0_0_0_12190_fu_256 <= ap_phi_mux_p_0_0_0_13193_phi_fu_508_p4;
        p_0_0_0_126168_fu_212 <= ap_phi_mux_p_0_0_0_2171_phi_fu_607_p4;
        p_0_0_0_13192_fu_260 <= ap_phi_mux_p_0_0_0_14195_phi_fu_499_p4;
        p_0_0_0_14194_fu_264 <= ap_phi_mux_empty_605_phi_fu_489_p4;
        p_0_0_0_1_10216_fu_308 <= ap_phi_mux_p_0_0_0_1_11219_phi_fu_381_p4;
        p_0_0_0_1_11218_fu_312 <= ap_phi_mux_p_0_0_0_1_12221_phi_fu_372_p4;
        p_0_0_0_1_1198_fu_272 <= ap_phi_mux_p_0_0_0_1_2201_phi_fu_462_p4;
        p_0_0_0_1_12220_fu_316 <= ap_phi_mux_p_0_0_0_1_13223_phi_fu_363_p4;
        p_0_0_0_1_13222_fu_320 <= ap_phi_mux_p_0_0_0_1_14225_phi_fu_354_p4;
        p_0_0_0_1_14224_fu_324 <= ap_phi_mux_empty_phi_fu_344_p4;
        p_0_0_0_1_2200_fu_276 <= ap_phi_mux_p_0_0_0_1_3203_phi_fu_453_p4;
        p_0_0_0_1_3202_fu_280 <= ap_phi_mux_p_0_0_0_1_4205_phi_fu_444_p4;
        p_0_0_0_1_4204_fu_284 <= ap_phi_mux_p_0_0_0_1_5207_phi_fu_435_p4;
        p_0_0_0_1_5206_fu_288 <= ap_phi_mux_p_0_0_0_1_6209_phi_fu_426_p4;
        p_0_0_0_1_6208_fu_292 <= ap_phi_mux_p_0_0_0_1_7211_phi_fu_417_p4;
        p_0_0_0_1_7210_fu_296 <= ap_phi_mux_p_0_0_0_1_8213_phi_fu_408_p4;
        p_0_0_0_1_8212_fu_300 <= ap_phi_mux_p_0_0_0_1_9215_phi_fu_399_p4;
        p_0_0_0_1_9214_fu_304 <= ap_phi_mux_p_0_0_0_1_10217_phi_fu_390_p4;
        p_0_0_0_2170_fu_216 <= ap_phi_mux_p_0_0_0_3173_phi_fu_598_p4;
        p_0_0_0_3172_fu_220 <= ap_phi_mux_p_0_0_0_4175_phi_fu_589_p4;
        p_0_0_0_4174_fu_224 <= ap_phi_mux_p_0_0_0_5177_phi_fu_580_p4;
        p_0_0_0_5176_fu_228 <= ap_phi_mux_p_0_0_0_6179_phi_fu_571_p4;
        p_0_0_0_6178_fu_232 <= ap_phi_mux_p_0_0_0_7181_phi_fu_562_p4;
        p_0_0_0_7180_fu_236 <= ap_phi_mux_p_0_0_0_8183_phi_fu_553_p4;
        p_0_0_0_8182_fu_240 <= ap_phi_mux_p_0_0_0_9185_phi_fu_544_p4;
        p_0_0_0_9184_fu_244 <= ap_phi_mux_p_0_0_0_10187_phi_fu_535_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_685_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_605_phi_fu_489_p4 = 13'd0;
    end else begin
        ap_phi_mux_empty_605_phi_fu_489_p4 = ap_phi_reg_pp0_iter3_empty_605_reg_486;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_phi_fu_344_p4 = 13'd0;
    end else begin
        ap_phi_mux_empty_phi_fu_344_p4 = ap_phi_reg_pp0_iter3_empty_reg_341;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0167_phi_fu_625_p4 = p_0_0_0166_fu_208;
    end else begin
        ap_phi_mux_p_0_0_0167_phi_fu_625_p4 = ap_phi_reg_pp0_iter3_p_0_0_0167_reg_622;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_10187_phi_fu_535_p4 = p_0_0_0_10186_fu_248;
    end else begin
        ap_phi_mux_p_0_0_0_10187_phi_fu_535_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_10187_reg_532;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_11189_phi_fu_526_p4 = p_0_0_0_11188_fu_252;
    end else begin
        ap_phi_mux_p_0_0_0_11189_phi_fu_526_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_11189_reg_523;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1197_phi_fu_480_p4 = p_0_0_0_1196_fu_268;
    end else begin
        ap_phi_mux_p_0_0_0_1197_phi_fu_480_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1197_reg_477;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_12191_phi_fu_517_p4 = p_0_0_0_12190_fu_256;
    end else begin
        ap_phi_mux_p_0_0_0_12191_phi_fu_517_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_12191_reg_514;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_126169_phi_fu_616_p4 = p_0_0_0_126168_fu_212;
    end else begin
        ap_phi_mux_p_0_0_0_126169_phi_fu_616_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_126169_reg_613;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_13193_phi_fu_508_p4 = p_0_0_0_13192_fu_260;
    end else begin
        ap_phi_mux_p_0_0_0_13193_phi_fu_508_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_13193_reg_505;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_14195_phi_fu_499_p4 = p_0_0_0_14194_fu_264;
    end else begin
        ap_phi_mux_p_0_0_0_14195_phi_fu_499_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_14195_reg_496;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_10217_phi_fu_390_p4 = p_0_0_0_1_10216_fu_308;
    end else begin
        ap_phi_mux_p_0_0_0_1_10217_phi_fu_390_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_10217_reg_387;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_11219_phi_fu_381_p4 = p_0_0_0_1_11218_fu_312;
    end else begin
        ap_phi_mux_p_0_0_0_1_11219_phi_fu_381_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_11219_reg_378;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_1199_phi_fu_471_p4 = p_0_0_0_1_1198_fu_272;
    end else begin
        ap_phi_mux_p_0_0_0_1_1199_phi_fu_471_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_1199_reg_468;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_12221_phi_fu_372_p4 = p_0_0_0_1_12220_fu_316;
    end else begin
        ap_phi_mux_p_0_0_0_1_12221_phi_fu_372_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_12221_reg_369;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_13223_phi_fu_363_p4 = p_0_0_0_1_13222_fu_320;
    end else begin
        ap_phi_mux_p_0_0_0_1_13223_phi_fu_363_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_13223_reg_360;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_14225_phi_fu_354_p4 = p_0_0_0_1_14224_fu_324;
    end else begin
        ap_phi_mux_p_0_0_0_1_14225_phi_fu_354_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_14225_reg_351;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_2201_phi_fu_462_p4 = p_0_0_0_1_2200_fu_276;
    end else begin
        ap_phi_mux_p_0_0_0_1_2201_phi_fu_462_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_2201_reg_459;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_3203_phi_fu_453_p4 = p_0_0_0_1_3202_fu_280;
    end else begin
        ap_phi_mux_p_0_0_0_1_3203_phi_fu_453_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_3203_reg_450;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_4205_phi_fu_444_p4 = p_0_0_0_1_4204_fu_284;
    end else begin
        ap_phi_mux_p_0_0_0_1_4205_phi_fu_444_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_4205_reg_441;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_5207_phi_fu_435_p4 = p_0_0_0_1_5206_fu_288;
    end else begin
        ap_phi_mux_p_0_0_0_1_5207_phi_fu_435_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_5207_reg_432;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_6209_phi_fu_426_p4 = p_0_0_0_1_6208_fu_292;
    end else begin
        ap_phi_mux_p_0_0_0_1_6209_phi_fu_426_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_6209_reg_423;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_7211_phi_fu_417_p4 = p_0_0_0_1_7210_fu_296;
    end else begin
        ap_phi_mux_p_0_0_0_1_7211_phi_fu_417_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_7211_reg_414;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_8213_phi_fu_408_p4 = p_0_0_0_1_8212_fu_300;
    end else begin
        ap_phi_mux_p_0_0_0_1_8213_phi_fu_408_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_8213_reg_405;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_1_9215_phi_fu_399_p4 = p_0_0_0_1_9214_fu_304;
    end else begin
        ap_phi_mux_p_0_0_0_1_9215_phi_fu_399_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_1_9215_reg_396;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_2171_phi_fu_607_p4 = p_0_0_0_2170_fu_216;
    end else begin
        ap_phi_mux_p_0_0_0_2171_phi_fu_607_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_2171_reg_604;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_3173_phi_fu_598_p4 = p_0_0_0_3172_fu_220;
    end else begin
        ap_phi_mux_p_0_0_0_3173_phi_fu_598_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_3173_reg_595;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_4175_phi_fu_589_p4 = p_0_0_0_4174_fu_224;
    end else begin
        ap_phi_mux_p_0_0_0_4175_phi_fu_589_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_4175_reg_586;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_5177_phi_fu_580_p4 = p_0_0_0_5176_fu_228;
    end else begin
        ap_phi_mux_p_0_0_0_5177_phi_fu_580_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_5177_reg_577;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_6179_phi_fu_571_p4 = p_0_0_0_6178_fu_232;
    end else begin
        ap_phi_mux_p_0_0_0_6179_phi_fu_571_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_6179_reg_568;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_7181_phi_fu_562_p4 = p_0_0_0_7180_fu_236;
    end else begin
        ap_phi_mux_p_0_0_0_7181_phi_fu_562_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_7181_reg_559;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_8183_phi_fu_553_p4 = p_0_0_0_8182_fu_240;
    end else begin
        ap_phi_mux_p_0_0_0_8183_phi_fu_553_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_8183_reg_550;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (icmp_ln50_reg_1980_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0_0_0_9185_phi_fu_544_p4 = p_0_0_0_9184_fu_244;
    end else begin
        ap_phi_mux_p_0_0_0_9185_phi_fu_544_p4 = ap_phi_reg_pp0_iter3_p_0_0_0_9185_reg_541;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten70_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten70_load = indvar_flatten70_fu_204;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_200;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 5'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_196;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op83_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op83_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        o_stream_TDATA_blk_n = o_stream_TREADY_int_regslice;
    end else begin
        o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        o_stream_TVALID_int_regslice = 1'b1;
    end else begin
        o_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_679_p2 = (ap_sig_allocacmp_indvar_flatten70_load + 15'd1);

assign add_ln46_fu_697_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign and_ln45_fu_752_p2 = (xor_ln45_fu_741_p2 & icmp_ln47_fu_746_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (regslice_both_o_stream_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (regslice_both_o_stream_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_pp0_stage0_iter4) | (o_stream_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (regslice_both_o_stream_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_pp0_stage0_iter4) | (o_stream_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op83_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (o_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_o_stream_U_apdone_blk == 1'b1) | ((icmp_ln45_reg_1970_pp0_iter2_reg == 1'd0) & (o_stream_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (o_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_condition_393 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_397 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_empty_605_reg_486 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_341 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0167_reg_622 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_10187_reg_532 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_11189_reg_523 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1197_reg_477 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_12191_reg_514 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_126169_reg_613 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_13193_reg_505 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_14195_reg_496 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_10217_reg_387 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_11219_reg_378 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_1199_reg_468 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_12221_reg_369 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_13223_reg_360 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_14225_reg_351 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_2201_reg_459 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_3203_reg_450 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_4205_reg_441 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_5207_reg_432 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_6209_reg_423 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_7211_reg_414 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_8213_reg_405 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1_9215_reg_396 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_2171_reg_604 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_3173_reg_595 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_4175_reg_586 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_5177_reg_577 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_6179_reg_568 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_7181_reg_559 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_8183_reg_550 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_9185_reg_541 = 'bx;

always @ (*) begin
    ap_predicate_op83_read_state3 = ((icmp_ln50_reg_1980 == 1'd1) & (icmp_ln45_reg_1970_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_685_p2 = ((ap_sig_allocacmp_indvar_flatten70_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_691_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_746_p2 = ((ap_sig_allocacmp_t_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_771_p2 = ((select_ln46_fu_763_p3 == 5'd0) ? 1'b1 : 1'b0);

assign o_stream_TDATA_int_regslice = tmp_fu_1321_p4;

assign o_stream_TVALID = regslice_both_o_stream_U_vld_out;

assign or_ln46_fu_758_p2 = (icmp_ln46_reg_1974 | and_ln45_fu_752_p2);

assign select_ln46_1_fu_703_p3 = ((icmp_ln46_fu_691_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_697_p2);

assign select_ln46_fu_763_p3 = ((or_ln46_fu_758_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_t_load);

assign t_1_fu_777_p2 = (select_ln46_fu_763_p3 + 5'd1);

assign tmp_fu_1321_p4 = {{{ap_phi_mux_p_0_0_0_1197_phi_fu_480_p4}, {3'd0}}, {ap_phi_mux_p_0_0_0167_phi_fu_625_p4}};

assign trunc_ln50_fu_797_p1 = mac_sm_dout[12:0];

assign xor_ln45_fu_741_p2 = (icmp_ln46_reg_1974 ^ 1'd1);

endmodule //PATCH_EMBED_do_adapt_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module PATCH_EMBED_do_patch_embed (
        i_stream_TDATA,
        o_stream_TDATA,
        ap_clk,
        ap_rst,
        i_stream_TVALID,
        i_stream_TREADY,
        ap_start,
        o_stream_TVALID,
        o_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_TDATA;
output  [31:0] o_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   i_stream_TVALID;
output   i_stream_TREADY;
input   ap_start;
output   o_stream_TVALID;
input   o_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_U0_ap_start;
wire    do_adapt_U0_ap_done;
wire    do_adapt_U0_ap_continue;
wire    do_adapt_U0_ap_idle;
wire    do_adapt_U0_ap_ready;
wire   [255:0] do_adapt_U0_adpt_sm_din;
wire    do_adapt_U0_adpt_sm_write;
wire    do_adapt_U0_start_out;
wire    do_adapt_U0_start_write;
wire    do_adapt_U0_i_stream_TREADY;
wire    step1_cache_window_U0_ap_start;
wire    step1_cache_window_U0_ap_done;
wire    step1_cache_window_U0_ap_continue;
wire    step1_cache_window_U0_ap_idle;
wire    step1_cache_window_U0_ap_ready;
wire    step1_cache_window_U0_adpt_sm_read;
wire   [255:0] step1_cache_window_U0_cache_window_sm_din;
wire    step1_cache_window_U0_cache_window_sm_write;
wire    step1_cache_window_U0_start_out;
wire    step1_cache_window_U0_start_write;
wire    step2_mac_replace_shift_U0_ap_start;
wire    step2_mac_replace_shift_U0_ap_done;
wire    step2_mac_replace_shift_U0_ap_continue;
wire    step2_mac_replace_shift_U0_ap_idle;
wire    step2_mac_replace_shift_U0_ap_ready;
wire   [2:0] step2_mac_replace_shift_U0_cache_window_sm_fifo_cap;
wire    step2_mac_replace_shift_U0_cache_window_sm_read;
wire   [415:0] step2_mac_replace_shift_U0_mac_sm_din;
wire    step2_mac_replace_shift_U0_mac_sm_write;
wire    step2_mac_replace_shift_U0_start_out;
wire    step2_mac_replace_shift_U0_start_write;
wire    do_adapt_1_U0_ap_start;
wire    do_adapt_1_U0_ap_done;
wire    do_adapt_1_U0_ap_continue;
wire    do_adapt_1_U0_ap_idle;
wire    do_adapt_1_U0_ap_ready;
wire    do_adapt_1_U0_mac_sm_read;
wire   [31:0] do_adapt_1_U0_o_stream_TDATA;
wire    do_adapt_1_U0_o_stream_TVALID;
wire    adpt_sm_full_n;
wire   [255:0] adpt_sm_dout;
wire   [6:0] adpt_sm_num_data_valid;
wire   [6:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [255:0] cache_window_sm_dout;
wire   [3:0] cache_window_sm_num_data_valid;
wire   [3:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [415:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire   [0:0] start_for_step1_cache_window_U0_din;
wire    start_for_step1_cache_window_U0_full_n;
wire   [0:0] start_for_step1_cache_window_U0_dout;
wire    start_for_step1_cache_window_U0_empty_n;
wire   [0:0] start_for_step2_mac_replace_shift_U0_din;
wire    start_for_step2_mac_replace_shift_U0_full_n;
wire   [0:0] start_for_step2_mac_replace_shift_U0_dout;
wire    start_for_step2_mac_replace_shift_U0_empty_n;
wire   [0:0] start_for_do_adapt_1_U0_din;
wire    start_for_do_adapt_1_U0_full_n;
wire   [0:0] start_for_do_adapt_1_U0_dout;
wire    start_for_do_adapt_1_U0_empty_n;

PATCH_EMBED_do_adapt do_adapt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_U0_ap_start),
    .start_full_n(start_for_step1_cache_window_U0_full_n),
    .ap_done(do_adapt_U0_ap_done),
    .ap_continue(do_adapt_U0_ap_continue),
    .ap_idle(do_adapt_U0_ap_idle),
    .ap_ready(do_adapt_U0_ap_ready),
    .i_stream_TVALID(i_stream_TVALID),
    .adpt_sm_din(do_adapt_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_U0_adpt_sm_write),
    .start_out(do_adapt_U0_start_out),
    .start_write(do_adapt_U0_start_write),
    .i_stream_TDATA(i_stream_TDATA),
    .i_stream_TREADY(do_adapt_U0_i_stream_TREADY)
);

PATCH_EMBED_step1_cache_window step1_cache_window_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(step1_cache_window_U0_ap_start),
    .start_full_n(start_for_step2_mac_replace_shift_U0_full_n),
    .ap_done(step1_cache_window_U0_ap_done),
    .ap_continue(step1_cache_window_U0_ap_continue),
    .ap_idle(step1_cache_window_U0_ap_idle),
    .ap_ready(step1_cache_window_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(step1_cache_window_U0_adpt_sm_read),
    .cache_window_sm_din(step1_cache_window_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(3'd0),
    .cache_window_sm_fifo_cap(3'd0),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(step1_cache_window_U0_cache_window_sm_write),
    .start_out(step1_cache_window_U0_start_out),
    .start_write(step1_cache_window_U0_start_write)
);

PATCH_EMBED_step2_mac_replace_shift step2_mac_replace_shift_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(step2_mac_replace_shift_U0_ap_start),
    .start_full_n(start_for_do_adapt_1_U0_full_n),
    .ap_done(step2_mac_replace_shift_U0_ap_done),
    .ap_continue(step2_mac_replace_shift_U0_ap_continue),
    .ap_idle(step2_mac_replace_shift_U0_ap_idle),
    .ap_ready(step2_mac_replace_shift_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(step2_mac_replace_shift_U0_cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(step2_mac_replace_shift_U0_cache_window_sm_read),
    .mac_sm_din(step2_mac_replace_shift_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(step2_mac_replace_shift_U0_mac_sm_write),
    .start_out(step2_mac_replace_shift_U0_start_out),
    .start_write(step2_mac_replace_shift_U0_start_write)
);

PATCH_EMBED_do_adapt_1 do_adapt_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_1_U0_ap_start),
    .ap_done(do_adapt_1_U0_ap_done),
    .ap_continue(do_adapt_1_U0_ap_continue),
    .ap_idle(do_adapt_1_U0_ap_idle),
    .ap_ready(do_adapt_1_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_1_U0_mac_sm_read),
    .o_stream_TREADY(o_stream_TREADY),
    .o_stream_TDATA(do_adapt_1_U0_o_stream_TDATA),
    .o_stream_TVALID(do_adapt_1_U0_o_stream_TVALID)
);

PATCH_EMBED_fifo_w256_d64_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(step1_cache_window_U0_adpt_sm_read)
);

PATCH_EMBED_fifo_w256_d6_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(step1_cache_window_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(step1_cache_window_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(step2_mac_replace_shift_U0_cache_window_sm_read)
);

PATCH_EMBED_fifo_w416_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(step2_mac_replace_shift_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(step2_mac_replace_shift_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_1_U0_mac_sm_read)
);

PATCH_EMBED_start_for_step1_cache_window_U0 start_for_step1_cache_window_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_step1_cache_window_U0_din),
    .if_full_n(start_for_step1_cache_window_U0_full_n),
    .if_write(do_adapt_U0_start_write),
    .if_dout(start_for_step1_cache_window_U0_dout),
    .if_empty_n(start_for_step1_cache_window_U0_empty_n),
    .if_read(step1_cache_window_U0_ap_ready)
);

PATCH_EMBED_start_for_step2_mac_replace_shift_U0 start_for_step2_mac_replace_shift_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_step2_mac_replace_shift_U0_din),
    .if_full_n(start_for_step2_mac_replace_shift_U0_full_n),
    .if_write(step1_cache_window_U0_start_write),
    .if_dout(start_for_step2_mac_replace_shift_U0_dout),
    .if_empty_n(start_for_step2_mac_replace_shift_U0_empty_n),
    .if_read(step2_mac_replace_shift_U0_ap_ready)
);

PATCH_EMBED_start_for_do_adapt_1_U0 start_for_do_adapt_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_1_U0_din),
    .if_full_n(start_for_do_adapt_1_U0_full_n),
    .if_write(step2_mac_replace_shift_U0_start_write),
    .if_dout(start_for_do_adapt_1_U0_dout),
    .if_empty_n(start_for_do_adapt_1_U0_empty_n),
    .if_read(do_adapt_1_U0_ap_ready)
);

assign ap_done = do_adapt_1_U0_ap_done;

assign ap_idle = (step2_mac_replace_shift_U0_ap_idle & step1_cache_window_U0_ap_idle & do_adapt_U0_ap_idle & do_adapt_1_U0_ap_idle);

assign ap_ready = do_adapt_U0_ap_ready;

assign do_adapt_1_U0_ap_continue = ap_continue;

assign do_adapt_1_U0_ap_start = start_for_do_adapt_1_U0_empty_n;

assign do_adapt_U0_ap_continue = 1'b1;

assign do_adapt_U0_ap_start = ap_start;

assign i_stream_TREADY = do_adapt_U0_i_stream_TREADY;

assign o_stream_TDATA = do_adapt_1_U0_o_stream_TDATA;

assign o_stream_TVALID = do_adapt_1_U0_o_stream_TVALID;

assign start_for_do_adapt_1_U0_din = 1'b1;

assign start_for_step1_cache_window_U0_din = 1'b1;

assign start_for_step2_mac_replace_shift_U0_din = 1'b1;

assign step1_cache_window_U0_ap_continue = 1'b1;

assign step1_cache_window_U0_ap_start = start_for_step1_cache_window_U0_empty_n;

assign step2_mac_replace_shift_U0_ap_continue = 1'b1;

assign step2_mac_replace_shift_U0_ap_start = start_for_step2_mac_replace_shift_U0_empty_n;

assign step2_mac_replace_shift_U0_cache_window_sm_fifo_cap = cache_window_sm_fifo_cap;

endmodule //PATCH_EMBED_do_patch_embed
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
// 
`timescale 1 ns / 1 ps

module PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 (clk,reset,ce,din0,din1,din2,din3,din4,din5,din6,dout);

parameter ID = 1;
parameter NUM_STAGE = 1;
parameter din0_WIDTH = 9;
parameter din1_WIDTH = 8;
parameter din2_WIDTH = 9;
parameter din3_WIDTH = 8;
parameter din4_WIDTH = 9;
parameter din5_WIDTH = 8;
parameter din6_WIDTH = 58;
parameter dout_WIDTH = 58;

input  clk;
input  reset;
input  ce;
input  signed [din0_WIDTH-1:0] din0;
input  signed [din1_WIDTH-1:0] din1;
input  signed [din2_WIDTH-1:0] din2;
input  signed [din3_WIDTH-1:0] din3;
input  signed [din4_WIDTH-1:0] din4;
input  signed [din5_WIDTH-1:0] din5;
input  signed [din6_WIDTH-1:0] din6;
output signed [dout_WIDTH-1:0] dout;

wire signed [din0_WIDTH+din1_WIDTH-1:0] mult0;
wire signed [din2_WIDTH+din3_WIDTH-1:0] mult1;
wire signed [din4_WIDTH+din5_WIDTH-1:0] mult2;
wire signed [dout_WIDTH-1:0] dotpr;
reg  signed [din0_WIDTH-1:0] din0_reg;
reg  signed [din1_WIDTH-1:0] din1_reg;
reg  signed [din2_WIDTH-1:0] din2_reg;
reg  signed [din3_WIDTH-1:0] din3_reg;
reg  signed [din4_WIDTH-1:0] din4_reg;
reg  signed [din5_WIDTH-1:0] din5_reg;
reg  signed [din6_WIDTH-1:0] din6_reg;
reg  signed [dout_WIDTH-1:0] dotpr_reg;
reg  signed [dout_WIDTH-1:0] product_reg;

always @ (posedge clk) begin
    din0_reg    <= din0;
    din1_reg    <= din1;
    din2_reg    <= din2;
    din3_reg    <= din3;
    din4_reg    <= din4;
    din5_reg    <= din5;
    din6_reg    <= din6;
    dotpr_reg   <= dotpr;
    product_reg <= dotpr_reg + din6_reg;
end

assign mult0 = din0_reg * din1_reg;
assign mult1 = din2_reg * din3_reg;
assign mult2 = din4_reg * din5_reg;
assign dotpr = mult0 + mult1 + mult2;

assign dout = product_reg;

endmodule
// // ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
// 
`timescale 1 ns / 1 ps

module PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 (clk,reset,ce,din0,din1,din2,din3,din4,din5,din6,dout);

parameter ID = 1;
parameter NUM_STAGE = 1;
parameter din0_WIDTH = 9;
parameter din1_WIDTH = 8;
parameter din2_WIDTH = 9;
parameter din3_WIDTH = 8;
parameter din4_WIDTH = 9;
parameter din5_WIDTH = 8;
parameter din6_WIDTH = 58;
parameter dout_WIDTH = 58;

input  clk;
input  reset;
input  ce;
input  signed [din0_WIDTH-1:0] din0;
input  signed [din1_WIDTH-1:0] din1;
input  signed [din2_WIDTH-1:0] din2;
input  signed [din3_WIDTH-1:0] din3;
input  signed [din4_WIDTH-1:0] din4;
input  signed [din5_WIDTH-1:0] din5;
input  signed [din6_WIDTH-1:0] din6;
output signed [dout_WIDTH-1:0] dout;

wire signed [din0_WIDTH+din1_WIDTH-1:0] mult0;
wire signed [din2_WIDTH+din3_WIDTH-1:0] mult1;
wire signed [din4_WIDTH+din5_WIDTH-1:0] mult2;
wire signed [dout_WIDTH-1:0] dotpr;
reg  signed [din0_WIDTH-1:0] din0_reg;
reg  signed [din1_WIDTH-1:0] din1_reg;
reg  signed [din2_WIDTH-1:0] din2_reg;
reg  signed [din3_WIDTH-1:0] din3_reg;
reg  signed [din4_WIDTH-1:0] din4_reg;
reg  signed [din5_WIDTH-1:0] din5_reg;
reg  signed [din6_WIDTH-1:0] din6_reg;
reg  signed [dout_WIDTH-1:0] dotpr_reg;
reg  signed [dout_WIDTH-1:0] product_reg;

always @ (posedge clk) begin
    din0_reg    <= din0;
    din1_reg    <= din1;
    din2_reg    <= din2;
    din3_reg    <= din3;
    din4_reg    <= din4;
    din5_reg    <= din5;
    din6_reg    <= din6;
    dotpr_reg   <= dotpr;
    product_reg <= dotpr_reg + din6_reg;
end

assign mult0 = din0_reg * din1_reg;
assign mult1 = din2_reg * din3_reg;
assign mult2 = din4_reg * din5_reg;
assign dotpr = mult0 + mult1 + mult2;

assign dout = product_reg;

endmodule
// // ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module PATCH_EMBED_fifo_w256_d64_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 256,
    ADDR_WIDTH   = 6,
    DEPTH        = 63)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    PATCH_EMBED_fifo_w256_d64_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_PATCH_EMBED_fifo_w256_d64_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module PATCH_EMBED_fifo_w256_d64_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 256,
    ADDR_WIDTH  = 6,
    DEPTH       = 63)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module PATCH_EMBED_fifo_w256_d6_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 256,
    ADDR_WIDTH   = 3,
    DEPTH        = 6)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    PATCH_EMBED_fifo_w256_d6_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_PATCH_EMBED_fifo_w256_d6_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module PATCH_EMBED_fifo_w256_d6_S_ShiftReg
#(parameter
    DATA_WIDTH  = 256,
    ADDR_WIDTH  = 3,
    DEPTH       = 6)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module PATCH_EMBED_fifo_w416_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 416,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    PATCH_EMBED_fifo_w416_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_PATCH_EMBED_fifo_w416_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module PATCH_EMBED_fifo_w416_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 416,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module PATCH_EMBED_flow_control_loop_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
end

assign ap_start_int = ap_start;

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

(* keep_hierarchy = "yes" *)
module PATCH_EMBED_frp_fifoout
  (
   ap_clk,
   ap_rst,
   data_in,
   data_in_vld,
   data_in_last,

   data_out,
   data_out_vld,

   ap_start,
   data_out_read,

   valid,
   num_valid_datasets,
   pf_ready,
   pf_done,
   pf_all_done,
   pf_continue
);
   parameter BlockingType = 1;  // 'frp_fifoout' type parameter: '1' for blocking port(AXIS/FIFO/AP_HS)
                                //                               '0' for non-blocking port(Memory/AP_VLD...)
   parameter PipeLatency = 4;
   parameter PipelineII  = 1;
   parameter DataWidth   = 32;
   parameter NumWrites   = 1;
   parameter CeilLog2Stages  = 2;
   parameter CeilLog2FDepth  = 2;
   parameter PfAllDoneEnable = 2;
   
   localparam NUM_STAGES = (PipeLatency+PipelineII-1) / PipelineII; // Ceil(Latency/II)
   
   function isDefined;
      input val;
      begin
         isDefined = (val === 1'b0 || val === 1'b1);
      end
   endfunction

   input ap_clk;
   input ap_rst;
   input [DataWidth-1:0] data_in;
   input ap_start;
   input [PipeLatency-1:0] valid;
   input               data_in_vld, data_in_last;
   input [CeilLog2Stages:0] num_valid_datasets;
   input data_out_read;
   input pf_all_done;
   input pf_continue;

   output reg [DataWidth-1:0] data_out;
   output reg data_out_vld;
   output reg pf_ready;
   output reg pf_done;


   ///////// custom fifo implementation /////////
   localparam FDEPTH = NUM_STAGES * NumWrites + 1;
   reg [DataWidth-1+2:0] fifo [0:FDEPTH-1]; // the "+2" is for extrabits for {data_in_last,data_in_vld}
   reg write_enable, read_enable;
   reg fifo_empty, fifo_full, sel_pipe;
   reg signed [CeilLog2FDepth:0] fifo_rdPtr; // range is -1 to FDEPTH-1
   reg [CeilLog2FDepth:0] fifo_avail;
   reg signed [CeilLog2FDepth+1:0] ready_chk; // max -ve value is (0 - fifo_avail)
   reg                  fail;
   reg     data_out_vld_fifo;

   integer WarningSuppressThreshold;
   initial begin // for co-sim assertion
       fifo_rdPtr = -1;
       fifo_empty = 1'b1;
       fifo_full = 1'b0;
       fail = 0;
//       if(!$value$plusargs("warning_suppress_threshold=%0d", WarningSuppressThreshold)) 
$display("This is PATCH_EMBED -1.\n");
           WarningSuppressThreshold = 5;
   end

   integer i;
   always @ (posedge ap_clk) begin : fifo_gen
      if (write_enable) begin
         for (i = 0; i < FDEPTH-1; i = i+1)
           fifo[i+1] <= fifo[i];
         fifo[0] <= {data_in_last, data_in_vld, data_in};
      end
   end
   // read ptr should have a positive address (MSB can be ignored)
   wire [DataWidth-1+2:0] fifo_out; // the "+2" is for extrabits for {data_in_last,data_in_vld}
   assign fifo_out = fifo[ fifo_rdPtr[CeilLog2FDepth-1:0] ];

   integer j;
   integer cnt_write_ovfl = 0;
   integer cnt_read_ovfl = 0;
   always @ (posedge ap_clk) begin : fifo_ptr
      if (ap_rst) begin
        fifo_rdPtr <= -1;
        fifo_empty <= 1'b1;
        fifo_full <= 1'b0;
      end
      else begin
          //// // synthesis translate_off
          //// if ($time > 0) begin
          ////    if ( write_enable && fifo_full && cnt_write_ovfl < WarningSuppressThreshold ) begin
          ////        $display("WARNING : fifo write overflow at time %0t", $time); fail=1;
          ////        cnt_write_ovfl = cnt_write_ovfl + 1;
          ////    end
          //// end
          //// // synthesis translate_on
         if (write_enable && !read_enable && !fifo_full) begin
           fifo_rdPtr <= fifo_rdPtr + 1;
           fifo_empty <= 1'b0;
           fifo_full <= (fifo_rdPtr == FDEPTH-2);
         end
         else if (read_enable && !write_enable && !fifo_empty) begin
           fifo_rdPtr <= fifo_rdPtr - 1;
           fifo_empty <= (fifo_rdPtr == 'd0);
           fifo_full <= 1'b0;
         end
      end
   end
   
   ///////// control logic /////////

   reg stalled, must_stall, data_cannot_vld, data_done, data_out_last_reg;
   reg data_out_last, internal_done;
   
    generate
        if(PfAllDoneEnable==2)
            always @(*) begin
                stalled = must_stall;
            end
        else
            always @ (posedge ap_clk) begin : stall_reg
                if (ap_rst) stalled <= 1'b0;
                else stalled <= must_stall;
            end
    endgenerate
   
    generate
        if (BlockingType == 1)
            always @ (*) begin : readen_control_for_blocking
                casex ({data_out_read, data_out_vld_fifo, data_out_last, fifo_empty, stalled})
                  5'b 1_X_X_0_0 : // when consumer reads and fifo is not empty.
                    read_enable = 1'b1;
                  5'b X_0_1_0_0 : // when no data in last and fifo is not empty.
                    read_enable = 1'b1;
                  default:
                    read_enable = 1'b0;
                endcase
            end
        else
            always @ (*) begin : readen_control_for_non_blocking
                casex ({fifo_empty, must_stall})
                  2'b 0_0: 
                    read_enable = 1'b1;
                  default:
                    read_enable = 1'b0;
                endcase
            end
    endgenerate

    generate
        if (BlockingType == 1)
            always @ (*) begin : writen_control_for_blocking
                casex ({ data_out_read, data_in_vld, fifo_empty, data_in_last, stalled })
                    5'b X_X_X_1_1 :
                        write_enable = 1'b1;
                    5'b X_1_X_X_1 :
                        write_enable = 1'b1;

                    5'b X_X_0_1_0 : // last valid, fifo has data
                        write_enable = 1'b1;
                    5'b 0_1_1_1_0 : // last valid, but consumer stalls (data_out_read==0), data_in_valid available
                        write_enable = 1'b1;
                    
                    5'b 0_1_X_X_0 : // data valid, but consumer stalls (data_out_read==0)
                        write_enable = 1'b1;
                    5'b 1_1_1_X_0 : // data valid, consumer ready, fifo is fifo_empty
                        write_enable = 1'b0;
                    5'b 1_1_0_X_0 : // data valid, consumer ready, fifo has data
                        write_enable = 1'b1;
                    default     :
                      write_enable = 1'b0;
                endcase
            end
        else if(BlockingType==0 && PfAllDoneEnable == 2)
            always @ (*) begin : writen_control_for_non_blocking
                casex ({ data_in_vld, fifo_empty, data_in_last, must_stall })
                  4'b 1_0_X_X :
                      write_enable = 1'b1;
                  4'b X_0_1_X :
                      write_enable = 1'b1;
                  4'b X_1_1_1 :
                      write_enable = 1'b1;
                  4'b 1_1_X_1 :
                      write_enable = 1'b1;
                  default     :
                      write_enable = 1'b0;
                endcase
            end
        else
            always @ (*) begin : writen_control_for_non_blocking
                casex ({ data_in_vld, fifo_empty, data_in_last, must_stall })
                  4'b 1_0_X_X :
                      write_enable = 1'b1;
                  4'b X_0_1_X :
                      write_enable = 1'b1;
                  4'b X_1_1_1 :
                      write_enable = 1'b1;
                  default     :
                      write_enable = 1'b0;
                endcase
            end
    endgenerate

    generate
        if (PfAllDoneEnable == 2)
            always @(posedge ap_clk) begin
                if(ap_rst) begin
                    data_cannot_vld<=1'b0;
                    data_out_last_reg<=1'b0;
                end else if(pf_all_done&&pf_continue) begin 
                    if(data_out_vld_fifo&&data_out_read&&data_out_last) data_cannot_vld<=1'b1 & (BlockingType==1);
                    else if(!data_out_vld_fifo&&data_out_last) data_cannot_vld<=1'b1;
                    else data_cannot_vld<=1'b0;

                    if(data_out_vld_fifo&&data_out_read&&data_out_last) data_out_last_reg<=data_out_last&(BlockingType==1);
                    else if(!data_out_vld_fifo&&data_out_last) data_out_last_reg<=data_out_last;
                    else data_out_last_reg<=1'b0;
                end else if(pf_all_done&&!pf_continue) begin 
                    data_cannot_vld<=1'b1;
                    data_out_last_reg<=data_out_last_reg;
                end else if(!pf_all_done) begin
                    if(data_out_last_reg) begin
                        data_cannot_vld<=1'b1;
                        data_out_last_reg<=data_out_last_reg;
                    end else if(data_out_vld_fifo&&!data_out_read) begin
                        data_cannot_vld<=1'b0;
                        data_out_last_reg<=1'b0;
                    end else if(data_out_vld_fifo&&data_out_read||!data_out_vld_fifo)begin
                        if(!data_out_last) data_cannot_vld<=1'b0;
                        else data_cannot_vld<=1'b1;
                        if(data_out_last) data_out_last_reg<=data_out_last;
                        else data_out_last_reg<=1'b0;
                    end
                end

                if(ap_rst) data_done<=1'b0;
                else if(must_stall) data_done <= data_done;
                else if ( (data_out_vld&&data_out_read||!data_out_vld_fifo&&data_out_last)||
                          (!pf_all_done||pf_all_done&&pf_continue) ) data_done <= 1'b1 & (BlockingType==1);
                else data_done <= 1'b0;
            end
    endgenerate

    generate
        if (PfAllDoneEnable == 2)
            always @ (*) begin : control
                ///////// internal signals /////////
                // data_out_vld is AMBA compliant (independent of data_out_read)
                sel_pipe    = fifo_empty;
                {data_out_last, data_out_vld_fifo, data_out} = sel_pipe ? {data_in_last, data_in_vld, data_in} : fifo_out;
                //for blocking mode, next transaction first data is already in PATCH_EMBED fifo. They can do handshake when
                //last transaction ap_done/ap_continue does handshake
                //for non_blocking mode, next transaction first data is not in PATCH_EMBED fifo
                data_out_vld = data_out_vld_fifo & (!data_cannot_vld || pf_continue&&pf_all_done&&data_done);

                if(pf_continue&&pf_all_done) begin
                    if(data_out_vld_fifo&&!data_out_read) must_stall=1'b1;
                    else if(data_out_vld_fifo&&data_out_read) must_stall=1'b1 & (BlockingType==0);
                    else must_stall=1'b0;

                    if(data_out_vld_fifo&&data_out_read) pf_done=data_out_last & (BlockingType==1);
                    else if(!data_out_vld_fifo&&data_out_last) pf_done=data_out_last;
                    else pf_done=1'b0;
                end else if(pf_all_done && !pf_continue) begin 
                    must_stall=1;
                    pf_done=data_out_last_reg;
                end else if(!pf_all_done) begin
                    if(data_out_last_reg) begin
                         must_stall=1'b1;
                         pf_done=data_out_last_reg;
                    end else if(data_out_vld_fifo&&!data_out_read) begin
                        must_stall=1'b1;
                        pf_done=1'b0;
                    end else if(data_out_vld_fifo&&data_out_read||!data_out_vld_fifo)begin
                        must_stall = 1'b0;
                        if(data_out_last) pf_done=data_out_last;
                        else pf_done=1'b0;
                    end else begin
                        must_stall = 1'b0;
                        pf_done = 1'b0;
                    end
                end else begin
                    must_stall = 1'b0;
                    pf_done = 1'b0;
                end

                ///////// outputs /////////
                fifo_avail = (FDEPTH - fifo_rdPtr - 1);
                // available has to be atleast one (or NumWrites) more than
                // valid transactions being processed in the pipeline. Then this
                // fifo buffer can accept the "valid" data in the following cycle.
                // pf_ready = (fifo_avail - (num_valid_datasets * NumWrites) >=
                // NumWrites);
                // above expr simplified for hardware
                                ready_chk = (NumWrites - fifo_avail + (num_valid_datasets * NumWrites));
                  pf_ready = ready_chk < 0;
            end // block: control
        else if (PfAllDoneEnable == 1)
            always @ (*) begin : control
               ///////// internal signals /////////
               // data_out_vld is AMBA compliant (independent of data_out_read)
               sel_pipe    = fifo_empty;
               {data_out_last, data_out_vld_fifo, data_out} = sel_pipe ? {data_in_last, data_in_vld, data_in} : fifo_out;
               data_out_vld = data_out_vld_fifo & !stalled;

               casex ({data_out_vld_fifo, data_out_last, pf_continue&pf_all_done, stalled, data_out_read})
                 5'b 0_0_X_0_X : {internal_done, must_stall} = 2'b 0_0;
                 5'b X_X_0_1_X : {internal_done, must_stall} = 2'b 1_1;  // when 'stalled', should wait until 'pf_continue'.
                 5'b X_X_1_1_X : {internal_done, must_stall} = 2'b 1_0;  // when 'pf_continue' arrived, 'stalled' register is de-asserted first.
                                                                         // This is to avoid the combinational loop on 'pf_done'.
                                                                         // loop: pf_done->ap_done->done_sync->ap_continue->pf_continue->pf_done.
                 5'b 0_1_0_0_X : {internal_done, must_stall} = 2'b 1_1;  // When there is only 'data_out_last', no need to wait 'data_out_read'.
                 5'b 0_1_1_0_X : {internal_done, must_stall} = 2'b 1_0;

                 5'b 1_1_X_X_0 : {internal_done, must_stall} = 2'b 0_0;  // when there are 'data_out_vld' and 'data_out_last' in the same cycle, 'internal_done' has to handshake with 'data_out_read'.
                 5'b 1_1_1_0_1 : {internal_done, must_stall} = 2'b 1_0;
                 5'b 1_1_0_0_1 : {internal_done, must_stall} = 2'b 1_1;
                 default       : {internal_done, must_stall} = 2'b 0_0;
               endcase
               pf_done = internal_done&!(pf_continue&pf_all_done);

               ///////// outputs /////////
               fifo_avail = (FDEPTH - fifo_rdPtr - 1);
               // available has to be atleast one (or NumWrites) more than
               // valid transactions being processed in the pipeline. Then this
               // fifo buffer can accept the "valid" data in the following cycle.
               // pf_ready = (fifo_avail - (num_valid_datasets * NumWrites) >=
               // NumWrites);
               // above expr simplified for hardware

                               ready_chk = (NumWrites - fifo_avail + (num_valid_datasets * NumWrites));
                 pf_ready = ready_chk < 0;
            end // block: control
        else
            always @ (*) begin : control
     
                 ///////// internal signals /////////
     
                 // data_out_vld is AMBA compliant (independent of data_out_read)
                 sel_pipe    = fifo_empty;
                 {data_out_last, data_out_vld_fifo, data_out} = sel_pipe ? {data_in_last, data_in_vld, data_in} : fifo_out;
                 data_out_vld = data_out_vld_fifo & !stalled;
     
                 casex ({data_out_vld_fifo, data_out_last, pf_continue, stalled, data_out_read})
                   5'b 0_0_X_0_X : {internal_done, must_stall} = 2'b 0_0;
                   5'b X_X_0_1_X : {internal_done, must_stall} = 2'b 1_1;  // when 'stalled', should wait until 'pf_continue'.
                   5'b X_X_1_1_X : {internal_done, must_stall} = 2'b 1_0;  // when 'pf_continue' arrived, 'stalled' register is de-asserted first.
                                                                           // This is to avoid the combinational loop on 'pf_done'.
                                                                           // loop: pf_done->ap_done->done_sync->ap_continue->pf_continue->pf_done.
                   5'b 0_1_0_0_X : {internal_done, must_stall} = 2'b 1_1;  // When there is only 'data_out_last', no need to wait 'data_out_read'.
                   5'b 0_1_1_0_X : {internal_done, must_stall} = 2'b 1_0;

                   5'b 1_1_X_X_0 : {internal_done, must_stall} = 2'b 0_0;  // when there are 'data_out_vld' and 'data_out_last' in the same cycle, 'internal_done' has to handshake with 'data_out_read'.
                   5'b 1_1_1_0_1 : {internal_done, must_stall} = 2'b 1_0;
                   5'b 1_1_0_0_1 : {internal_done, must_stall} = 2'b 1_1;
                   default       : {internal_done, must_stall} = 2'b 0_0;
                 endcase
                 pf_done = internal_done;

                 ///////// outputs /////////
                 fifo_avail = (FDEPTH - fifo_rdPtr - 1);
                 // available has to be atleast one (or NumWrites) more than
                 // valid transactions being processed in the pipeline. Then this
                 // fifo buffer can accept the "valid" data in the following cycle.
                 // pf_ready = (fifo_avail - (num_valid_datasets * NumWrites) >=
                 // NumWrites);
                 // above expr simplified for hardware

                             ready_chk = (NumWrites - fifo_avail + (num_valid_datasets * NumWrites));
                     pf_ready = ready_chk < 0;
            end // block: control
       endgenerate
endmodule // pipeline_fifo
    
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

(* keep_hierarchy = "yes" *)
module PATCH_EMBED_frp_pipeline_valid
  (ap_clk,
   ap_rst,
   valid_in,
   exitcond,

   valid_out,
   num_valid_datasets);

   parameter PipelineLatency =  4;
   parameter PipelineII      =  1;
   parameter ExitLatency = -1;
   parameter CeilLog2Stages   = 2;
   
   localparam NUM_STAGES = (PipelineLatency+PipelineII-1) / PipelineII; // Ceil(Latency/II)
   
   function isDefined;
      input val;
      begin
         isDefined = (val === 1'b0 || val === 1'b1);
      end
   endfunction

   input ap_clk;
   input ap_rst;
   input valid_in;
   input exitcond;
   
   
   output [PipelineLatency-1:0] valid_out;
   output [CeilLog2Stages:0] num_valid_datasets;
   reg signed [CeilLog2Stages+1:0] nvd_reg;
   assign num_valid_datasets=nvd_reg;

   reg fail;
   reg [PipelineLatency-2:0] v2;

   integer WarningSuppressThreshold;
   initial begin // for co-sim assertion
       v2 = 0;
       fail = 0;
       nvd_reg = 0;
//       if(!$value$plusargs("warning_suppress_threshold=%0d", WarningSuppressThreshold)) 
$display("This is PATCH_EMBED -1.\n");
           WarningSuppressThreshold = 5;
   end

   reg [PipelineLatency-1:0] valid_out_tmp;

   assign valid_out=valid_out_tmp;
   ///////// pipeline data valid (flushable impl) /////////
   reg [PipelineLatency-2:0] v1;
   genvar i;
   generate for (i = 0; i < PipelineLatency-1; i = i+1)
     always @ (posedge ap_clk) begin
        if (ap_rst)
          v2[i] <= 0;
        else begin
           v1[i] = (i == 0) ? valid_in : v2[i-1];
           v2[i] <= (ExitLatency==i) ? (!exitcond & v1[i]) : v1[i];
        end
     end
   endgenerate

   integer j;
   ///// // synthesis translate_off
   ///// integer cnt_nvd_ovfl_warning[PipelineLatency-1:0];
   ///// // synthesis translate_on
   always @(*) begin

       valid_out_tmp = {v2, valid_in};

       //// // synthesis translate_off
       //// if ($time > 0) begin
       ////    for (j = 1; j < PipelineLatency; j = j+1) begin : loop_block
       ////       if ( !(!valid_out_tmp[j] || nvd_reg <= NUM_STAGES) && 
       ////            cnt_nvd_ovfl_warning[j] < WarningSuppressThreshold ) begin
       ////          $display("WARNING : nvd_reg overflow. valid_out_tmp[%0d]=%b nvd=%0d nstg=%0d (at time %0t)",
       ////                 j, valid_out_tmp[j], nvd_reg, NUM_STAGES, $time);
       ////          fail=1; 
       ////          cnt_nvd_ovfl_warning[j] = cnt_nvd_ovfl_warning[j] + 1;
       ////          disable loop_block;
       ////       end
       ////    end // for (j = 1; j < PipelineLatency; j = j+1)
       //// end // if ($time > 0)
       //// // synthesis translate_on
   end

   wire   valid_disable;
   assign valid_disable = (ExitLatency == -1) ? 1'b0 : (valid_out_tmp[ExitLatency] & exitcond);
   
   // Count the num valid_out_tmp datasets in the pipe stages other than the
   // first. We do NOT count valid_out_tmp[0], otherwise it will be a
   // combination loop: nvd -> pfifo.ap_ready -> valid_in -> valid_out_tmp[0] -> nvd
   reg signed [2:0] incr;
   integer cnt_nvd_out_range = 0;
   always @ (posedge ap_clk) begin
      if (ap_rst)
         nvd_reg <= 0;
      else begin
         casex ({valid_out_tmp[0], valid_out_tmp[PipelineLatency-1], valid_disable})
           3'b100:  incr =  1;
           3'b111:  incr = -1;
           3'b001:  incr = -1;
           3'b010:  incr = -1;
           3'b011:  incr = -2;
           default: incr =  0;
         endcase
         /// // synthesis translate_off
         /// if (!(0 <=($signed(nvd_reg)+incr)<=NUM_STAGES) && cnt_nvd_out_range<WarningSuppressThreshold) begin
         ///       $display("WARNING: nvd_reg out of range. incr=%d nvd=%0d nstg=%0d (at time %0t)",
         ///              incr, nvd_reg, NUM_STAGES, $time);
         ///    fail=1;
         ///    cnt_nvd_out_range = cnt_nvd_out_range+1;
         /// end
         /// // synthesis translate_on
         nvd_reg <= nvd_reg + incr;
      end
   end

   //// // synthesis translate_off
   //// integer cnt_valid_out_tmp[PipelineLatency-1:0];
   //// integer stg, stgc;
   //// always @ (posedge ap_clk) begin
   ////    stg = 0;
   ////    stgc = 0;
   ////    for (j = 0; j < PipelineLatency; j = j+1) begin : block_stgc
   ////       stgc = stgc + valid_out_tmp[j];
   ////       if (stg == PipelineII-1) begin
   ////          if ( !(stgc <= 1) && cnt_valid_out_tmp[j]<WarningSuppressThreshold) begin
   ////             $display("WARNING: valid_out_tmp=%b. %0d bits set in one pipe-stage ending at bit-%0d (at time %0t)",
   ////                    valid_out_tmp, stgc, j, $time);
   ////             fail=1; 
   ////             cnt_valid_out_tmp[j] = cnt_valid_out_tmp[j] + 1;
   ////             disable block_stgc;
   ////          end
   ////          stgc = 0;
   ////          stg  = 0;
   ////       end else begin
   ////          stg = stg + 1;
   ////       end
   ////    end // for (j = 0; j < PipelineLatency; j = j+1)
   //// end // always @ (posedge ap_clk)
   //// // synthesis translate_on

endmodule // pipeline_valid
    
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================
`timescale 1 ns / 1 ps

(* use_dsp = "yes" *) module PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [16 - 1:0] in2,
    output [17 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [24 - 1:0]     b;
wire signed [58 - 1:0]     c;
wire signed [51 - 1:0]     m;
wire signed [58 - 1:0]     p;
reg  signed [51 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [24 - 1:0]     b_reg;
reg  signed [58 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1_DSP48_0 PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1_DSP48_0_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================
`timescale 1 ns / 1 ps

(* use_dsp = "yes" *) module PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1_DSP48_1(
    input clk,
    input rst,
    input ce,
    input  [8 - 1:0] in0,
    input  [8 - 1:0] in1,
    input  [21 - 1:0] in2,
    output [21 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [24 - 1:0]     b;
wire signed [58 - 1:0]     c;
wire signed [51 - 1:0]     m;
wire signed [58 - 1:0]     p;
reg  signed [51 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [24 - 1:0]     b_reg;
reg  signed [58 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $signed(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1_DSP48_1 PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1_DSP48_1_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

  (* use_dsp = "yes" *)  module PATCH_EMBED_mul_8s_8s_16_2_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;












assign tmp_product = $signed(din0) * $signed(din1);






always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;





    end
end




assign dout = buff0;






endmodule
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps

module PATCH_EMBED_regslice_both
#(parameter 
    DataWidth=32
)(
    input ap_clk ,
    input ap_rst,

    input [DataWidth-1:0] data_in , 
    input vld_in , 
    output ack_in ,
    output [DataWidth-1:0] data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 

reg   [1:0] B_V_data_1_state;
wire   [DataWidth-1:0] B_V_data_1_data_in;
reg   [DataWidth-1:0] B_V_data_1_data_out;
wire    B_V_data_1_vld_reg;
wire    B_V_data_1_vld_in;
wire    B_V_data_1_vld_out;
reg   [DataWidth-1:0] B_V_data_1_payload_A;
reg   [DataWidth-1:0] B_V_data_1_payload_B;
reg    B_V_data_1_sel_rd;
reg    B_V_data_1_sel_wr;
wire    B_V_data_1_sel;
wire    B_V_data_1_load_A;
wire    B_V_data_1_load_B;
wire    B_V_data_1_state_cmp_full;
wire    B_V_data_1_ack_in;
wire    B_V_data_1_ack_out;

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_out) & (1'b1 == B_V_data_1_ack_out))) begin
            B_V_data_1_sel_rd <= ~B_V_data_1_sel_rd;
        end else begin
            B_V_data_1_sel_rd <= B_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_in))) begin
            B_V_data_1_sel_wr <= ~B_V_data_1_sel_wr;
        end else begin
            B_V_data_1_sel_wr <= B_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) | ((2'd2 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out)) | ((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd1;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b1 == B_V_data_1_ack_out)) | (~((1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)) & ~((1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) & (2'd3 == B_V_data_1_state)) | ((2'd2 == B_V_data_1_state) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd3;
        end else begin
            B_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_A)) begin
        B_V_data_1_payload_A <= B_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_B)) begin
        B_V_data_1_payload_B <= B_V_data_1_data_in;
    end
end

always @ (*) begin
    if ((1'b1 == B_V_data_1_sel)) begin
        B_V_data_1_data_out = B_V_data_1_payload_B;
    end else begin
        B_V_data_1_data_out = B_V_data_1_payload_A;
    end
end

assign B_V_data_1_ack_in = B_V_data_1_state[1'd1];
assign B_V_data_1_load_A = (~B_V_data_1_sel_wr & B_V_data_1_state_cmp_full);
assign B_V_data_1_load_B = (B_V_data_1_state_cmp_full & B_V_data_1_sel_wr);
assign B_V_data_1_sel = B_V_data_1_sel_rd;
assign B_V_data_1_state_cmp_full = ((B_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);
assign B_V_data_1_vld_out = B_V_data_1_state[1'd0];

assign ack_in = B_V_data_1_ack_in;
assign B_V_data_1_data_in = data_in;
assign B_V_data_1_vld_in = vld_in;

assign vld_out = B_V_data_1_vld_out;
assign data_out = B_V_data_1_data_out;
assign B_V_data_1_ack_out = ack_out;

assign apdone_blk = ((B_V_data_1_state == 2'd3 && ack_out == 1'b0) | (B_V_data_1_state == 2'd1));

endmodule // both

module PATCH_EMBED_regslice_both_w1
#(parameter 
    DataWidth=1
)(
    input ap_clk ,
    input ap_rst,

    input data_in , 
    input vld_in , 
    output ack_in ,
    output data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);

reg     [1:0] B_V_data_1_state;
wire    B_V_data_1_data_in;
reg     B_V_data_1_data_out;
wire    B_V_data_1_vld_reg;
wire    B_V_data_1_vld_in;
wire    B_V_data_1_vld_out;
reg     B_V_data_1_payload_A;
reg     B_V_data_1_payload_B;
reg     B_V_data_1_sel_rd;
reg     B_V_data_1_sel_wr;
wire    B_V_data_1_sel;
wire    B_V_data_1_load_A;
wire    B_V_data_1_load_B;
wire    B_V_data_1_state_cmp_full;
wire    B_V_data_1_ack_in;
wire    B_V_data_1_ack_out;

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_out) & (1'b1 == B_V_data_1_ack_out))) begin
            B_V_data_1_sel_rd <= ~B_V_data_1_sel_rd;
        end else begin
            B_V_data_1_sel_rd <= B_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_in))) begin
            B_V_data_1_sel_wr <= ~B_V_data_1_sel_wr;
        end else begin
            B_V_data_1_sel_wr <= B_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) | ((2'd2 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out)) | ((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd1;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b1 == B_V_data_1_ack_out)) | (~((1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)) & ~((1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) & (2'd3 == B_V_data_1_state)) | ((2'd2 == B_V_data_1_state) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd3;
        end else begin
            B_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_A)) begin
        B_V_data_1_payload_A <= B_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_B)) begin
        B_V_data_1_payload_B <= B_V_data_1_data_in;
    end
end

always @ (*) begin
    if ((1'b1 == B_V_data_1_sel)) begin
        B_V_data_1_data_out = B_V_data_1_payload_B;
    end else begin
        B_V_data_1_data_out = B_V_data_1_payload_A;
    end
end

assign B_V_data_1_ack_in = B_V_data_1_state[1'd1];
assign B_V_data_1_load_A = (~B_V_data_1_sel_wr & B_V_data_1_state_cmp_full);
assign B_V_data_1_load_B = (B_V_data_1_state_cmp_full & B_V_data_1_sel_wr);
assign B_V_data_1_sel = B_V_data_1_sel_rd;
assign B_V_data_1_state_cmp_full = ((B_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);
assign B_V_data_1_vld_out = B_V_data_1_state[1'd0];

assign ack_in = B_V_data_1_ack_in;
assign B_V_data_1_data_in = data_in;
assign B_V_data_1_vld_in = vld_in;

assign vld_out = B_V_data_1_vld_out;
assign data_out = B_V_data_1_data_out;
assign B_V_data_1_ack_out = ack_out;

assign apdone_blk = ((B_V_data_1_state == 2'd3 && ack_out == 1'b0) | (B_V_data_1_state == 2'd1));

endmodule // both


// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module PATCH_EMBED_start_for_do_adapt_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    PATCH_EMBED_start_for_do_adapt_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_PATCH_EMBED_start_for_do_adapt_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module PATCH_EMBED_start_for_do_adapt_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module PATCH_EMBED_start_for_step1_cache_window_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    PATCH_EMBED_start_for_step1_cache_window_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_PATCH_EMBED_start_for_step1_cache_window_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module PATCH_EMBED_start_for_step1_cache_window_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module PATCH_EMBED_start_for_step2_mac_replace_shift_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    PATCH_EMBED_start_for_step2_mac_replace_shift_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_PATCH_EMBED_start_for_step2_mac_replace_shift_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module PATCH_EMBED_start_for_step2_mac_replace_shift_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module PATCH_EMBED_step1_cache_window (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] adpt_sm_dout;
input  [6:0] adpt_sm_num_data_valid;
input  [6:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [255:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln75_reg_408;
reg   [0:0] icmp_ln75_reg_408_pp0_iter1_reg;
reg   [0:0] cmp10_reg_424;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln75_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln75_reg_408_pp0_iter2_reg;
wire   [0:0] icmp_ln76_fu_202_p2;
reg   [0:0] icmp_ln76_reg_412;
wire   [5:0] select_ln76_fu_293_p3;
reg   [5:0] select_ln76_reg_419;
wire   [0:0] cmp10_fu_309_p2;
reg   [0:0] cmp10_reg_424_pp0_iter2_reg;
reg   [5:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [255:0] wb_q0;
reg   [255:0] ap_phi_mux_vec_o_0_phi_fu_122_p4;
wire   [255:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
reg   [255:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
reg   [255:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
reg   [255:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
wire   [63:0] zext_ln77_fu_345_p1;
wire   [5:0] wb_addr_gep_fu_111_p3;
reg   [5:0] cit_fu_66;
wire   [5:0] add_ln77_fu_315_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [3:0] cot_fu_70;
wire   [3:0] select_ln76_1_fu_301_p3;
reg   [3:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_74;
wire   [9:0] select_ln76_2_fu_214_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_78;
wire   [15:0] add_ln75_fu_190_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln76_1_fu_208_p2;
wire   [0:0] icmp_ln77_fu_270_p2;
wire   [0:0] xor_ln75_fu_265_p2;
wire   [3:0] select_ln75_fu_258_p3;
wire   [0:0] and_ln75_fu_276_p2;
wire   [0:0] or_ln76_fu_288_p2;
wire   [3:0] cot_2_fu_282_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_151;
reg    ap_condition_147;
reg    ap_condition_324;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_66 = 6'd0;
//#0 cot_fu_70 = 4'd0;
//#0 indvar_flatten_fu_74 = 10'd0;
//#0 indvar_flatten11_fu_78 = 16'd0;
end

PATCH_EMBED_step1_cache_window_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

PATCH_EMBED_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_424 == 1'd1) & (icmp_ln75_reg_408_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        cit_fu_66 <= add_ln77_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_151)) begin
    cot_fu_70 <= select_ln76_1_fu_301_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln75_fu_196_p2 == 1'd0)) begin
        indvar_flatten11_fu_78 <= add_ln75_fu_190_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_78 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln75_fu_196_p2 == 1'd0)) begin
        indvar_flatten_fu_74 <= select_ln76_2_fu_214_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_74 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_424 <= cmp10_fu_309_p2;
        icmp_ln75_reg_408 <= icmp_ln75_fu_196_p2;
        icmp_ln75_reg_408_pp0_iter1_reg <= icmp_ln75_reg_408;
        icmp_ln76_reg_412 <= icmp_ln76_fu_202_p2;
        select_ln76_reg_419 <= select_ln76_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_424_pp0_iter2_reg <= cmp10_reg_424;
        icmp_ln75_reg_408_pp0_iter2_reg <= icmp_ln75_reg_408_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_424_pp0_iter2_reg == 1'd0) & (icmp_ln75_reg_408_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_load = 4'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_324)) begin
        if ((cmp10_reg_424 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_111_p3;
        end else if ((cmp10_reg_424 == 1'd0)) begin
            wb_address0 = zext_ln77_fu_345_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln75_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd0) & (icmp_ln75_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln75_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln75_fu_190_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln76_1_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln77_fu_315_p2 = (select_ln76_fu_293_p3 + 6'd1);

assign and_ln75_fu_276_p2 = (xor_ln75_fu_265_p2 & icmp_ln77_fu_270_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_147 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_151 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_324 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln75_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_119 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_424 == 1'd1) & (icmp_ln75_reg_408_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_122_p4;

assign cmp10_fu_309_p2 = ((select_ln76_1_fu_301_p3 == 4'd0) ? 1'b1 : 1'b0);

assign cot_2_fu_282_p2 = (select_ln75_fu_258_p3 + 4'd1);

assign icmp_ln75_fu_196_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd56448) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_270_p2 = ((ap_sig_allocacmp_cit_load == 6'd48) ? 1'b1 : 1'b0);

assign or_ln76_fu_288_p2 = (icmp_ln76_reg_412 | and_ln75_fu_276_p2);

assign select_ln75_fu_258_p3 = ((icmp_ln76_reg_412[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_cot_load);

assign select_ln76_1_fu_301_p3 = ((and_ln75_fu_276_p2[0:0] == 1'b1) ? cot_2_fu_282_p2 : select_ln75_fu_258_p3);

assign select_ln76_2_fu_214_p3 = ((icmp_ln76_fu_202_p2[0:0] == 1'b1) ? 10'd1 : add_ln76_1_fu_208_p2);

assign select_ln76_fu_293_p3 = ((or_ln76_fu_288_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign start_out = real_start;

assign wb_addr_gep_fu_111_p3 = zext_ln77_fu_345_p1;

assign xor_ln75_fu_265_p2 = (icmp_ln76_reg_412 ^ 1'd1);

assign zext_ln77_fu_345_p1 = select_ln76_reg_419;

endmodule //PATCH_EMBED_step1_cache_window
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module PATCH_EMBED_step1_cache_window_wb_RAM_1P_LUTRAM_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 256;
parameter AddressWidth = 6;
parameter AddressRange = 48;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module PATCH_EMBED_step2_mac_replace_shift (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] cache_window_sm_dout;
input  [3:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [415:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln173_reg_19605;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter9_reg;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln126_fu_2594_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [10:0] PATCH_EMBED_INST_bias_arr_19_address0;
reg    PATCH_EMBED_INST_bias_arr_19_ce0;
wire   [667:0] PATCH_EMBED_INST_bias_arr_19_q0;
wire   [3:0] PATCH_EMBED_INST_cls_arr_20_address0;
reg    PATCH_EMBED_INST_cls_arr_20_ce0;
wire   [330:0] PATCH_EMBED_INST_cls_arr_20_q0;
wire   [9:0] PATCH_EMBED_INST_weight_arr_18_address0;
reg    PATCH_EMBED_INST_weight_arr_18_ce0;
wire   [2047:0] PATCH_EMBED_INST_weight_arr_18_q0;
wire    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
wire    mac_sm_blk_n;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln127_fu_2612_p2;
reg   [0:0] icmp_ln127_reg_19544;
reg   [0:0] icmp_ln127_reg_19544_pp0_iter1_reg;
reg   [0:0] icmp_ln127_reg_19544_pp0_iter2_reg;
reg   [0:0] icmp_ln127_reg_19544_pp0_iter3_reg;
wire   [5:0] select_ln127_fu_2656_p3;
reg   [5:0] select_ln127_reg_19549;
wire   [3:0] select_ln127_1_fu_2664_p3;
reg   [3:0] select_ln127_1_reg_19556;
reg   [3:0] select_ln127_1_reg_19556_pp0_iter1_reg;
reg   [3:0] select_ln127_1_reg_19556_pp0_iter2_reg;
reg   [3:0] select_ln127_1_reg_19556_pp0_iter3_reg;
reg   [3:0] select_ln127_1_reg_19556_pp0_iter4_reg;
reg   [3:0] select_ln127_1_reg_19556_pp0_iter5_reg;
reg   [3:0] select_ln127_1_reg_19556_pp0_iter6_reg;
reg   [3:0] select_ln127_1_reg_19556_pp0_iter7_reg;
wire   [0:0] icmp_ln132_fu_2778_p2;
reg   [0:0] icmp_ln132_reg_19569;
reg   [0:0] icmp_ln132_reg_19569_pp0_iter2_reg;
reg   [0:0] icmp_ln132_reg_19569_pp0_iter3_reg;
reg   [0:0] icmp_ln132_reg_19569_pp0_iter4_reg;
reg   [0:0] icmp_ln132_reg_19569_pp0_iter5_reg;
reg   [0:0] icmp_ln132_reg_19569_pp0_iter6_reg;
reg   [0:0] icmp_ln132_reg_19569_pp0_iter7_reg;
reg   [0:0] icmp_ln132_reg_19569_pp0_iter8_reg;
wire   [0:0] icmp_ln173_fu_2787_p2;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter2_reg;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter3_reg;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter4_reg;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter5_reg;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter6_reg;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter7_reg;
reg   [0:0] icmp_ln173_reg_19605_pp0_iter8_reg;
wire   [6:0] select_ln126_1_fu_2804_p3;
reg   [6:0] select_ln126_1_reg_19609;
wire   [7:0] trunc_ln149_fu_2813_p1;
reg   [7:0] trunc_ln149_reg_19616;
reg   [7:0] trunc_ln149_1_reg_19621;
reg   [7:0] trunc_ln149_2_reg_19626;
reg   [7:0] trunc_ln149_2_reg_19626_pp0_iter5_reg;
reg   [7:0] trunc_ln149_4_reg_19631;
reg   [7:0] trunc_ln149_5_reg_19636;
reg   [7:0] trunc_ln149_5_reg_19636_pp0_iter5_reg;
reg   [7:0] trunc_ln149_6_reg_19641;
reg   [7:0] trunc_ln149_6_reg_19641_pp0_iter5_reg;
reg   [7:0] trunc_ln149_7_reg_19646;
reg   [7:0] trunc_ln149_9_reg_19651;
reg   [7:0] trunc_ln149_9_reg_19651_pp0_iter5_reg;
reg   [7:0] trunc_ln149_10_reg_19656;
reg   [7:0] trunc_ln149_11_reg_19661;
reg   [7:0] trunc_ln149_12_reg_19666;
reg   [7:0] trunc_ln149_12_reg_19666_pp0_iter5_reg;
reg   [7:0] trunc_ln149_13_reg_19671;
reg   [7:0] trunc_ln149_13_reg_19671_pp0_iter5_reg;
reg   [7:0] trunc_ln149_14_reg_19676;
reg   [7:0] trunc_ln149_14_reg_19676_pp0_iter5_reg;
reg   [7:0] trunc_ln149_15_reg_19681;
reg   [7:0] trunc_ln149_16_reg_19686;
reg   [7:0] trunc_ln149_17_reg_19691;
reg   [7:0] trunc_ln149_17_reg_19691_pp0_iter5_reg;
reg   [7:0] trunc_ln149_19_reg_19696;
reg   [7:0] trunc_ln149_20_reg_19701;
reg   [7:0] trunc_ln149_20_reg_19701_pp0_iter5_reg;
reg   [7:0] trunc_ln149_21_reg_19706;
reg   [7:0] trunc_ln149_21_reg_19706_pp0_iter5_reg;
reg   [7:0] trunc_ln149_22_reg_19711;
reg   [7:0] trunc_ln149_24_reg_19716;
reg   [7:0] trunc_ln149_24_reg_19716_pp0_iter5_reg;
reg   [7:0] trunc_ln149_26_reg_19721;
reg   [7:0] trunc_ln149_27_reg_19726;
reg   [7:0] trunc_ln149_28_reg_19731;
reg   [7:0] trunc_ln149_28_reg_19731_pp0_iter5_reg;
reg   [7:0] trunc_ln149_29_reg_19736;
reg   [7:0] trunc_ln149_29_reg_19736_pp0_iter5_reg;
reg   [7:0] trunc_ln149_30_reg_19741;
reg   [7:0] trunc_ln149_30_reg_19741_pp0_iter5_reg;
wire   [7:0] trunc_ln159_fu_3127_p1;
reg   [7:0] trunc_ln159_reg_19746;
reg   [7:0] tmp_35_reg_19751;
reg   [7:0] tmp_36_reg_19756;
reg   [7:0] tmp_36_reg_19756_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_6_fu_3161_p1;
wire  signed [15:0] sext_ln159_7_fu_3165_p1;
reg   [7:0] tmp_38_reg_19787;
reg   [7:0] tmp_39_reg_19792;
reg   [7:0] tmp_39_reg_19792_pp0_iter5_reg;
reg   [7:0] tmp_40_reg_19797;
reg   [7:0] tmp_40_reg_19797_pp0_iter5_reg;
reg   [7:0] tmp_41_reg_19802;
wire  signed [15:0] sext_ln159_16_fu_3227_p1;
wire  signed [15:0] sext_ln159_17_fu_3231_p1;
reg   [7:0] tmp_43_reg_19833;
reg   [7:0] tmp_43_reg_19833_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_20_fu_3263_p1;
wire  signed [15:0] sext_ln159_21_fu_3267_p1;
reg   [7:0] tmp_45_reg_19864;
reg  signed [7:0] tmp_46_reg_19869;
reg   [7:0] tmp_47_reg_19874;
reg   [7:0] tmp_47_reg_19874_pp0_iter5_reg;
reg   [7:0] tmp_48_reg_19879;
reg   [7:0] tmp_48_reg_19879_pp0_iter5_reg;
reg   [7:0] tmp_49_reg_19884;
reg   [7:0] tmp_49_reg_19884_pp0_iter5_reg;
reg   [7:0] tmp_50_reg_19889;
reg   [7:0] tmp_51_reg_19894;
reg   [7:0] tmp_52_reg_19899;
reg   [7:0] tmp_52_reg_19899_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_35_fu_3369_p1;
reg   [7:0] tmp_54_reg_19910;
reg   [7:0] tmp_55_reg_19915;
reg   [7:0] tmp_55_reg_19915_pp0_iter5_reg;
reg   [7:0] tmp_56_reg_19920;
reg   [7:0] tmp_56_reg_19920_pp0_iter5_reg;
reg   [7:0] tmp_57_reg_19925;
wire  signed [15:0] sext_ln159_40_fu_3431_p1;
reg   [7:0] tmp_59_reg_19936;
reg   [7:0] tmp_59_reg_19936_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_42_fu_3463_p1;
reg   [7:0] tmp_61_reg_19947;
reg  signed [7:0] tmp_62_reg_19952;
reg   [7:0] tmp_63_reg_19957;
reg   [7:0] tmp_63_reg_19957_pp0_iter5_reg;
reg   [7:0] tmp_64_reg_19962;
reg   [7:0] tmp_64_reg_19962_pp0_iter5_reg;
reg   [7:0] tmp_65_reg_19967;
reg   [7:0] tmp_65_reg_19967_pp0_iter5_reg;
reg   [7:0] tmp_66_reg_19972;
reg   [7:0] tmp_67_reg_19977;
reg   [7:0] tmp_68_reg_19982;
reg   [7:0] tmp_68_reg_19982_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_51_fu_3565_p1;
reg   [7:0] tmp_70_reg_19993;
reg   [7:0] tmp_71_reg_19998;
reg   [7:0] tmp_71_reg_19998_pp0_iter5_reg;
reg   [7:0] tmp_72_reg_20003;
reg   [7:0] tmp_72_reg_20003_pp0_iter5_reg;
reg   [7:0] tmp_73_reg_20008;
wire  signed [15:0] sext_ln159_56_fu_3627_p1;
reg   [7:0] tmp_75_reg_20019;
reg   [7:0] tmp_75_reg_20019_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_58_fu_3659_p1;
reg   [7:0] tmp_77_reg_20030;
reg  signed [7:0] tmp_78_reg_20035;
reg   [7:0] tmp_79_reg_20040;
reg   [7:0] tmp_79_reg_20040_pp0_iter5_reg;
reg   [7:0] tmp_80_reg_20045;
reg   [7:0] tmp_80_reg_20045_pp0_iter5_reg;
reg   [7:0] tmp_81_reg_20050;
reg   [7:0] tmp_81_reg_20050_pp0_iter5_reg;
reg   [7:0] tmp_82_reg_20055;
reg   [7:0] tmp_83_reg_20060;
reg   [7:0] tmp_84_reg_20065;
reg   [7:0] tmp_84_reg_20065_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_67_fu_3761_p1;
reg   [7:0] tmp_86_reg_20076;
reg   [7:0] tmp_87_reg_20081;
reg   [7:0] tmp_87_reg_20081_pp0_iter5_reg;
reg   [7:0] tmp_88_reg_20086;
reg   [7:0] tmp_88_reg_20086_pp0_iter5_reg;
reg   [7:0] tmp_89_reg_20091;
wire  signed [15:0] sext_ln159_72_fu_3823_p1;
reg   [7:0] tmp_91_reg_20102;
reg   [7:0] tmp_91_reg_20102_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_74_fu_3855_p1;
reg   [7:0] tmp_93_reg_20113;
reg  signed [7:0] tmp_94_reg_20118;
reg   [7:0] tmp_95_reg_20123;
reg   [7:0] tmp_95_reg_20123_pp0_iter5_reg;
reg   [7:0] tmp_96_reg_20128;
reg   [7:0] tmp_96_reg_20128_pp0_iter5_reg;
reg   [7:0] tmp_97_reg_20133;
reg   [7:0] tmp_97_reg_20133_pp0_iter5_reg;
reg   [7:0] tmp_98_reg_20138;
reg   [7:0] tmp_99_reg_20143;
reg   [7:0] tmp_100_reg_20148;
reg   [7:0] tmp_100_reg_20148_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_83_fu_3957_p1;
reg   [7:0] tmp_102_reg_20159;
reg   [7:0] tmp_103_reg_20164;
reg   [7:0] tmp_103_reg_20164_pp0_iter5_reg;
reg   [7:0] tmp_104_reg_20169;
reg   [7:0] tmp_104_reg_20169_pp0_iter5_reg;
reg   [7:0] tmp_105_reg_20174;
wire  signed [15:0] sext_ln159_88_fu_4019_p1;
reg   [7:0] tmp_107_reg_20185;
reg   [7:0] tmp_107_reg_20185_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_90_fu_4051_p1;
reg   [7:0] tmp_109_reg_20196;
reg  signed [7:0] tmp_110_reg_20201;
reg   [7:0] tmp_111_reg_20206;
reg   [7:0] tmp_111_reg_20206_pp0_iter5_reg;
reg   [7:0] tmp_112_reg_20211;
reg   [7:0] tmp_112_reg_20211_pp0_iter5_reg;
reg   [7:0] tmp_113_reg_20216;
reg   [7:0] tmp_113_reg_20216_pp0_iter5_reg;
reg   [7:0] tmp_114_reg_20221;
reg   [7:0] tmp_115_reg_20226;
reg   [7:0] tmp_116_reg_20231;
reg   [7:0] tmp_116_reg_20231_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_99_fu_4153_p1;
reg   [7:0] tmp_118_reg_20242;
reg   [7:0] tmp_119_reg_20247;
reg   [7:0] tmp_119_reg_20247_pp0_iter5_reg;
reg   [7:0] tmp_120_reg_20252;
reg   [7:0] tmp_120_reg_20252_pp0_iter5_reg;
reg   [7:0] tmp_121_reg_20257;
wire  signed [15:0] sext_ln159_104_fu_4215_p1;
reg   [7:0] tmp_123_reg_20268;
reg   [7:0] tmp_123_reg_20268_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_106_fu_4247_p1;
reg   [7:0] tmp_125_reg_20279;
reg  signed [7:0] tmp_126_reg_20284;
reg   [7:0] tmp_127_reg_20289;
reg   [7:0] tmp_127_reg_20289_pp0_iter5_reg;
reg   [7:0] tmp_128_reg_20294;
reg   [7:0] tmp_128_reg_20294_pp0_iter5_reg;
reg   [7:0] tmp_129_reg_20299;
reg   [7:0] tmp_129_reg_20299_pp0_iter5_reg;
reg   [7:0] tmp_130_reg_20304;
reg   [7:0] tmp_131_reg_20309;
reg   [7:0] tmp_132_reg_20314;
reg   [7:0] tmp_132_reg_20314_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_115_fu_4349_p1;
reg   [7:0] tmp_134_reg_20325;
reg   [7:0] tmp_135_reg_20330;
reg   [7:0] tmp_135_reg_20330_pp0_iter5_reg;
reg   [7:0] tmp_136_reg_20335;
reg   [7:0] tmp_136_reg_20335_pp0_iter5_reg;
reg   [7:0] tmp_137_reg_20340;
wire  signed [15:0] sext_ln159_120_fu_4411_p1;
reg   [7:0] tmp_139_reg_20351;
reg   [7:0] tmp_139_reg_20351_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_122_fu_4443_p1;
reg   [7:0] tmp_141_reg_20362;
reg  signed [7:0] tmp_142_reg_20367;
reg   [7:0] tmp_143_reg_20372;
reg   [7:0] tmp_143_reg_20372_pp0_iter5_reg;
reg   [7:0] tmp_144_reg_20377;
reg   [7:0] tmp_144_reg_20377_pp0_iter5_reg;
reg   [7:0] tmp_145_reg_20382;
reg   [7:0] tmp_145_reg_20382_pp0_iter5_reg;
reg   [7:0] tmp_146_reg_20387;
reg   [7:0] tmp_147_reg_20392;
reg   [7:0] tmp_148_reg_20397;
reg   [7:0] tmp_148_reg_20397_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_131_fu_4545_p1;
reg   [7:0] tmp_150_reg_20408;
reg   [7:0] tmp_151_reg_20413;
reg   [7:0] tmp_151_reg_20413_pp0_iter5_reg;
reg   [7:0] tmp_152_reg_20418;
reg   [7:0] tmp_152_reg_20418_pp0_iter5_reg;
reg   [7:0] tmp_153_reg_20423;
wire  signed [15:0] sext_ln159_136_fu_4607_p1;
reg   [7:0] tmp_155_reg_20434;
reg   [7:0] tmp_155_reg_20434_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_138_fu_4639_p1;
reg   [7:0] tmp_157_reg_20445;
reg  signed [7:0] tmp_158_reg_20450;
reg   [7:0] tmp_159_reg_20455;
reg   [7:0] tmp_159_reg_20455_pp0_iter5_reg;
reg   [7:0] tmp_160_reg_20460;
reg   [7:0] tmp_160_reg_20460_pp0_iter5_reg;
reg   [7:0] tmp_161_reg_20465;
reg   [7:0] tmp_161_reg_20465_pp0_iter5_reg;
reg   [7:0] tmp_162_reg_20470;
reg   [7:0] tmp_163_reg_20475;
reg   [7:0] tmp_164_reg_20480;
reg   [7:0] tmp_164_reg_20480_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_147_fu_4741_p1;
reg   [7:0] tmp_166_reg_20491;
reg   [7:0] tmp_167_reg_20496;
reg   [7:0] tmp_167_reg_20496_pp0_iter5_reg;
reg   [7:0] tmp_168_reg_20501;
reg   [7:0] tmp_168_reg_20501_pp0_iter5_reg;
reg   [7:0] tmp_169_reg_20506;
wire  signed [15:0] sext_ln159_152_fu_4803_p1;
reg   [7:0] tmp_171_reg_20517;
reg   [7:0] tmp_171_reg_20517_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_154_fu_4835_p1;
reg   [7:0] tmp_173_reg_20528;
reg  signed [7:0] tmp_174_reg_20533;
reg   [7:0] tmp_175_reg_20538;
reg   [7:0] tmp_175_reg_20538_pp0_iter5_reg;
reg   [7:0] tmp_176_reg_20543;
reg   [7:0] tmp_176_reg_20543_pp0_iter5_reg;
reg   [7:0] tmp_177_reg_20548;
reg   [7:0] tmp_177_reg_20548_pp0_iter5_reg;
reg   [7:0] tmp_178_reg_20553;
reg   [7:0] tmp_179_reg_20558;
reg   [7:0] tmp_180_reg_20563;
reg   [7:0] tmp_180_reg_20563_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_163_fu_4937_p1;
reg   [7:0] tmp_182_reg_20574;
reg   [7:0] tmp_183_reg_20579;
reg   [7:0] tmp_183_reg_20579_pp0_iter5_reg;
reg   [7:0] tmp_184_reg_20584;
reg   [7:0] tmp_184_reg_20584_pp0_iter5_reg;
reg   [7:0] tmp_185_reg_20589;
wire  signed [15:0] sext_ln159_168_fu_4999_p1;
reg   [7:0] tmp_187_reg_20600;
reg   [7:0] tmp_187_reg_20600_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_170_fu_5031_p1;
reg   [7:0] tmp_189_reg_20611;
reg  signed [7:0] tmp_190_reg_20616;
reg   [7:0] tmp_191_reg_20621;
reg   [7:0] tmp_191_reg_20621_pp0_iter5_reg;
reg   [7:0] tmp_192_reg_20626;
reg   [7:0] tmp_192_reg_20626_pp0_iter5_reg;
reg   [7:0] tmp_193_reg_20631;
reg   [7:0] tmp_193_reg_20631_pp0_iter5_reg;
reg   [7:0] tmp_194_reg_20636;
reg   [7:0] tmp_195_reg_20641;
reg   [7:0] tmp_196_reg_20646;
reg   [7:0] tmp_196_reg_20646_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_179_fu_5133_p1;
reg   [7:0] tmp_198_reg_20657;
reg   [7:0] tmp_199_reg_20662;
reg   [7:0] tmp_199_reg_20662_pp0_iter5_reg;
reg   [7:0] tmp_200_reg_20667;
reg   [7:0] tmp_200_reg_20667_pp0_iter5_reg;
reg   [7:0] tmp_201_reg_20672;
wire  signed [15:0] sext_ln159_184_fu_5195_p1;
reg   [7:0] tmp_203_reg_20683;
reg   [7:0] tmp_203_reg_20683_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_186_fu_5227_p1;
reg   [7:0] tmp_205_reg_20694;
reg   [7:0] tmp_206_reg_20699;
reg   [7:0] tmp_207_reg_20704;
reg   [7:0] tmp_207_reg_20704_pp0_iter5_reg;
reg   [7:0] tmp_208_reg_20709;
reg   [7:0] tmp_208_reg_20709_pp0_iter5_reg;
reg   [7:0] tmp_209_reg_20714;
reg   [7:0] tmp_209_reg_20714_pp0_iter5_reg;
reg   [7:0] tmp_210_reg_20719;
reg   [7:0] tmp_211_reg_20724;
reg   [7:0] tmp_212_reg_20729;
reg   [7:0] tmp_212_reg_20729_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_195_fu_5329_p1;
reg   [7:0] tmp_214_reg_20740;
reg   [7:0] tmp_215_reg_20745;
reg   [7:0] tmp_215_reg_20745_pp0_iter5_reg;
reg   [7:0] tmp_216_reg_20750;
reg   [7:0] tmp_216_reg_20750_pp0_iter5_reg;
reg   [7:0] tmp_217_reg_20755;
wire  signed [15:0] sext_ln159_200_fu_5391_p1;
reg   [7:0] tmp_219_reg_20766;
reg   [7:0] tmp_219_reg_20766_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_202_fu_5423_p1;
reg   [7:0] tmp_221_reg_20777;
reg   [7:0] tmp_222_reg_20782;
reg   [7:0] tmp_223_reg_20787;
reg   [7:0] tmp_223_reg_20787_pp0_iter5_reg;
reg   [7:0] tmp_224_reg_20792;
reg   [7:0] tmp_224_reg_20792_pp0_iter5_reg;
reg   [7:0] tmp_225_reg_20797;
reg   [7:0] tmp_225_reg_20797_pp0_iter5_reg;
reg   [7:0] tmp_226_reg_20802;
reg   [7:0] tmp_227_reg_20807;
reg   [7:0] tmp_228_reg_20812;
reg   [7:0] tmp_228_reg_20812_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_211_fu_5525_p1;
reg   [7:0] tmp_230_reg_20823;
reg   [7:0] tmp_231_reg_20828;
reg   [7:0] tmp_231_reg_20828_pp0_iter5_reg;
reg   [7:0] tmp_232_reg_20833;
reg   [7:0] tmp_232_reg_20833_pp0_iter5_reg;
reg   [7:0] tmp_233_reg_20838;
wire  signed [15:0] sext_ln159_216_fu_5587_p1;
reg   [7:0] tmp_235_reg_20849;
reg   [7:0] tmp_235_reg_20849_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_218_fu_5619_p1;
reg   [7:0] tmp_237_reg_20860;
reg   [7:0] tmp_238_reg_20865;
reg   [7:0] tmp_239_reg_20870;
reg   [7:0] tmp_239_reg_20870_pp0_iter5_reg;
reg   [7:0] tmp_240_reg_20875;
reg   [7:0] tmp_240_reg_20875_pp0_iter5_reg;
reg   [7:0] tmp_241_reg_20880;
reg   [7:0] tmp_241_reg_20880_pp0_iter5_reg;
reg   [7:0] tmp_242_reg_20885;
reg   [7:0] tmp_243_reg_20890;
reg   [7:0] tmp_244_reg_20895;
reg   [7:0] tmp_244_reg_20895_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_227_fu_5721_p1;
reg   [7:0] tmp_246_reg_20906;
reg   [7:0] tmp_247_reg_20911;
reg   [7:0] tmp_247_reg_20911_pp0_iter5_reg;
reg   [7:0] tmp_248_reg_20916;
reg   [7:0] tmp_248_reg_20916_pp0_iter5_reg;
reg   [7:0] tmp_249_reg_20921;
wire  signed [15:0] sext_ln159_232_fu_5783_p1;
reg   [7:0] tmp_251_reg_20932;
reg   [7:0] tmp_251_reg_20932_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_234_fu_5815_p1;
reg   [7:0] tmp_253_reg_20943;
reg   [7:0] tmp_254_reg_20948;
reg   [7:0] tmp_255_reg_20953;
reg   [7:0] tmp_255_reg_20953_pp0_iter5_reg;
reg   [7:0] tmp_256_reg_20958;
reg   [7:0] tmp_256_reg_20958_pp0_iter5_reg;
reg   [7:0] tmp_257_reg_20963;
reg   [7:0] tmp_257_reg_20963_pp0_iter5_reg;
reg   [7:0] tmp_258_reg_20968;
reg   [7:0] tmp_259_reg_20973;
reg   [7:0] tmp_260_reg_20978;
reg   [7:0] tmp_260_reg_20978_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_243_fu_5917_p1;
reg   [7:0] tmp_262_reg_20989;
reg   [7:0] tmp_263_reg_20994;
reg   [7:0] tmp_263_reg_20994_pp0_iter5_reg;
reg   [7:0] tmp_264_reg_20999;
reg   [7:0] tmp_264_reg_20999_pp0_iter5_reg;
reg   [7:0] tmp_265_reg_21004;
wire  signed [15:0] sext_ln159_248_fu_5979_p1;
reg   [7:0] tmp_267_reg_21015;
reg   [7:0] tmp_267_reg_21015_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_250_fu_6011_p1;
reg   [7:0] tmp_269_reg_21026;
reg   [7:0] tmp_270_reg_21031;
reg   [7:0] tmp_271_reg_21036;
reg   [7:0] tmp_271_reg_21036_pp0_iter5_reg;
reg   [7:0] tmp_272_reg_21041;
reg   [7:0] tmp_272_reg_21041_pp0_iter5_reg;
reg   [7:0] tmp_273_reg_21046;
reg   [7:0] tmp_273_reg_21046_pp0_iter5_reg;
reg   [7:0] tmp_274_reg_21051;
reg   [7:0] tmp_275_reg_21056;
reg   [7:0] tmp_276_reg_21061;
reg   [7:0] tmp_276_reg_21061_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_259_fu_6113_p1;
reg   [7:0] tmp_278_reg_21072;
reg   [7:0] tmp_279_reg_21077;
reg   [7:0] tmp_279_reg_21077_pp0_iter5_reg;
reg   [7:0] tmp_280_reg_21082;
reg   [7:0] tmp_280_reg_21082_pp0_iter5_reg;
reg   [7:0] tmp_281_reg_21087;
wire  signed [15:0] sext_ln159_264_fu_6175_p1;
reg   [7:0] tmp_283_reg_21098;
reg   [7:0] tmp_283_reg_21098_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_266_fu_6207_p1;
reg   [7:0] tmp_285_reg_21109;
reg   [7:0] tmp_286_reg_21114;
reg   [7:0] tmp_301_reg_21119;
reg   [7:0] tmp_301_reg_21119_pp0_iter5_reg;
reg   [7:0] tmp_303_reg_21124;
reg   [7:0] tmp_303_reg_21124_pp0_iter5_reg;
reg   [7:0] tmp_317_reg_21129;
reg   [7:0] tmp_317_reg_21129_pp0_iter5_reg;
wire  signed [15:0] sext_ln159_275_fu_6269_p1;
wire  signed [15:0] sext_ln159_280_fu_6281_p1;
wire  signed [15:0] sext_ln159_282_fu_6293_p1;
wire   [0:0] cmp23_fu_6701_p2;
reg   [0:0] cmp23_reg_21194;
reg   [0:0] cmp23_reg_21194_pp0_iter6_reg;
reg   [0:0] cmp23_reg_21194_pp0_iter7_reg;
reg   [0:0] cmp23_reg_21194_pp0_iter8_reg;
wire   [10:0] empty_586_fu_6709_p2;
reg   [10:0] empty_586_reg_21230;
wire  signed [15:0] sext_ln159_fu_6715_p1;
wire  signed [15:0] sext_ln159_1_fu_6718_p1;
wire  signed [15:0] sext_ln159_2_fu_6729_p1;
wire  signed [15:0] sext_ln159_3_fu_6732_p1;
wire  signed [15:0] sext_ln159_8_fu_6743_p1;
wire  signed [15:0] sext_ln159_9_fu_6746_p1;
wire  signed [15:0] sext_ln159_14_fu_6763_p1;
wire  signed [15:0] sext_ln159_15_fu_6766_p1;
wire  signed [15:0] sext_ln159_22_fu_6783_p1;
wire  signed [15:0] sext_ln159_23_fu_6786_p1;
wire  signed [15:0] sext_ln159_24_fu_6803_p1;
wire  signed [15:0] sext_ln159_25_fu_6806_p1;
reg  signed [15:0] sext_ln159_25_reg_21385;
wire  signed [15:0] sext_ln159_32_fu_6817_p1;
wire  signed [15:0] sext_ln159_33_fu_6828_p1;
wire  signed [15:0] sext_ln159_36_fu_6839_p1;
wire  signed [15:0] sext_ln159_39_fu_6856_p1;
wire  signed [15:0] sext_ln159_43_fu_6873_p1;
wire  signed [15:0] sext_ln159_44_fu_6890_p1;
reg  signed [15:0] sext_ln159_44_reg_21422;
wire  signed [15:0] sext_ln159_48_fu_6901_p1;
wire  signed [15:0] sext_ln159_49_fu_6912_p1;
wire  signed [15:0] sext_ln159_52_fu_6923_p1;
wire  signed [15:0] sext_ln159_55_fu_6940_p1;
wire  signed [15:0] sext_ln159_59_fu_6957_p1;
wire  signed [15:0] sext_ln159_60_fu_6974_p1;
reg  signed [15:0] sext_ln159_60_reg_21459;
wire  signed [15:0] sext_ln159_64_fu_6985_p1;
wire  signed [15:0] sext_ln159_65_fu_6996_p1;
wire  signed [15:0] sext_ln159_68_fu_7007_p1;
wire  signed [15:0] sext_ln159_71_fu_7024_p1;
wire  signed [15:0] sext_ln159_75_fu_7041_p1;
wire  signed [15:0] sext_ln159_76_fu_7058_p1;
reg  signed [15:0] sext_ln159_76_reg_21496;
wire  signed [15:0] sext_ln159_80_fu_7069_p1;
wire  signed [15:0] sext_ln159_81_fu_7080_p1;
wire  signed [15:0] sext_ln159_84_fu_7091_p1;
wire  signed [15:0] sext_ln159_87_fu_7108_p1;
wire  signed [15:0] sext_ln159_91_fu_7125_p1;
wire  signed [15:0] sext_ln159_92_fu_7142_p1;
reg  signed [15:0] sext_ln159_92_reg_21533;
wire  signed [15:0] sext_ln159_96_fu_7153_p1;
wire  signed [15:0] sext_ln159_97_fu_7164_p1;
wire  signed [15:0] sext_ln159_100_fu_7175_p1;
wire  signed [15:0] sext_ln159_103_fu_7192_p1;
wire  signed [15:0] sext_ln159_107_fu_7209_p1;
wire  signed [15:0] sext_ln159_108_fu_7226_p1;
reg  signed [15:0] sext_ln159_108_reg_21570;
wire  signed [15:0] sext_ln159_112_fu_7237_p1;
wire  signed [15:0] sext_ln159_113_fu_7248_p1;
wire  signed [15:0] sext_ln159_116_fu_7259_p1;
wire  signed [15:0] sext_ln159_119_fu_7276_p1;
wire  signed [15:0] sext_ln159_123_fu_7293_p1;
wire  signed [15:0] sext_ln159_124_fu_7310_p1;
reg  signed [15:0] sext_ln159_124_reg_21607;
wire  signed [15:0] sext_ln159_128_fu_7321_p1;
wire  signed [15:0] sext_ln159_129_fu_7332_p1;
wire  signed [15:0] sext_ln159_132_fu_7343_p1;
wire  signed [15:0] sext_ln159_135_fu_7360_p1;
wire  signed [15:0] sext_ln159_139_fu_7377_p1;
wire  signed [15:0] sext_ln159_140_fu_7394_p1;
reg  signed [15:0] sext_ln159_140_reg_21644;
wire  signed [15:0] sext_ln159_144_fu_7405_p1;
wire  signed [15:0] sext_ln159_145_fu_7416_p1;
wire  signed [15:0] sext_ln159_148_fu_7427_p1;
wire  signed [15:0] sext_ln159_151_fu_7444_p1;
wire  signed [15:0] sext_ln159_155_fu_7461_p1;
wire  signed [15:0] sext_ln159_156_fu_7478_p1;
reg  signed [15:0] sext_ln159_156_reg_21681;
wire  signed [15:0] sext_ln159_160_fu_7489_p1;
wire  signed [15:0] sext_ln159_161_fu_7500_p1;
wire  signed [15:0] sext_ln159_164_fu_7511_p1;
wire  signed [15:0] sext_ln159_167_fu_7528_p1;
wire  signed [15:0] sext_ln159_171_fu_7545_p1;
wire  signed [15:0] sext_ln159_172_fu_7562_p1;
reg  signed [15:0] sext_ln159_172_reg_21718;
wire  signed [15:0] sext_ln159_176_fu_7573_p1;
wire  signed [15:0] sext_ln159_177_fu_7584_p1;
wire  signed [15:0] sext_ln159_180_fu_7595_p1;
wire  signed [15:0] sext_ln159_183_fu_7612_p1;
wire  signed [15:0] sext_ln159_187_fu_7629_p1;
wire  signed [15:0] sext_ln159_188_fu_7646_p1;
wire  signed [15:0] sext_ln159_192_fu_7657_p1;
wire  signed [15:0] sext_ln159_193_fu_7668_p1;
wire  signed [15:0] sext_ln159_196_fu_7679_p1;
wire  signed [15:0] sext_ln159_199_fu_7696_p1;
wire  signed [15:0] sext_ln159_203_fu_7713_p1;
wire  signed [15:0] sext_ln159_204_fu_7730_p1;
wire  signed [15:0] sext_ln159_208_fu_7741_p1;
wire  signed [15:0] sext_ln159_209_fu_7752_p1;
wire  signed [15:0] sext_ln159_212_fu_7763_p1;
wire  signed [15:0] sext_ln159_215_fu_7780_p1;
wire  signed [15:0] sext_ln159_219_fu_7797_p1;
wire  signed [15:0] sext_ln159_220_fu_7814_p1;
wire  signed [15:0] sext_ln159_224_fu_7825_p1;
wire  signed [15:0] sext_ln159_225_fu_7836_p1;
wire  signed [15:0] sext_ln159_228_fu_7847_p1;
wire  signed [15:0] sext_ln159_231_fu_7864_p1;
wire  signed [15:0] sext_ln159_235_fu_7881_p1;
wire  signed [15:0] sext_ln159_236_fu_7898_p1;
wire  signed [15:0] sext_ln159_240_fu_7909_p1;
wire  signed [15:0] sext_ln159_241_fu_7920_p1;
wire  signed [15:0] sext_ln159_244_fu_7931_p1;
wire  signed [15:0] sext_ln159_247_fu_7948_p1;
wire  signed [15:0] sext_ln159_251_fu_7965_p1;
wire  signed [15:0] sext_ln159_252_fu_7982_p1;
wire  signed [15:0] sext_ln159_256_fu_7993_p1;
wire  signed [15:0] sext_ln159_257_fu_8004_p1;
wire  signed [15:0] sext_ln159_260_fu_8015_p1;
wire  signed [15:0] sext_ln159_263_fu_8032_p1;
wire  signed [15:0] sext_ln159_267_fu_8049_p1;
wire  signed [15:0] sext_ln159_268_fu_8066_p1;
wire  signed [15:0] sext_ln159_272_fu_8077_p1;
wire  signed [15:0] sext_ln159_273_fu_8088_p1;
wire  signed [15:0] sext_ln159_276_fu_8099_p1;
wire  signed [15:0] sext_ln159_279_fu_8116_p1;
wire  signed [15:0] sext_ln159_283_fu_8133_p1;
wire  signed [15:0] sext_ln159_284_fu_8150_p1;
reg  signed [15:0] sext_ln159_284_reg_22041;
wire  signed [15:0] sext_ln159_4_fu_9079_p1;
wire  signed [15:0] sext_ln159_5_fu_9082_p1;
wire  signed [15:0] sext_ln159_18_fu_9135_p1;
wire  signed [15:0] sext_ln159_19_fu_9138_p1;
wire  signed [15:0] sext_ln159_26_fu_9159_p1;
wire  signed [15:0] sext_ln159_27_fu_9162_p1;
wire  signed [15:0] sext_ln159_28_fu_9173_p1;
wire  signed [15:0] sext_ln159_29_fu_9176_p1;
wire  signed [15:0] sext_ln159_34_fu_9207_p1;
wire  signed [15:0] sext_ln159_41_fu_9254_p1;
wire  signed [15:0] sext_ln159_45_fu_9275_p1;
wire  signed [15:0] sext_ln159_46_fu_9286_p1;
wire  signed [15:0] sext_ln159_50_fu_9314_p1;
wire  signed [15:0] sext_ln159_57_fu_9361_p1;
wire  signed [15:0] sext_ln159_61_fu_9382_p1;
wire  signed [15:0] sext_ln159_62_fu_9393_p1;
wire  signed [15:0] sext_ln159_66_fu_9421_p1;
wire  signed [15:0] sext_ln159_73_fu_9468_p1;
wire  signed [15:0] sext_ln159_77_fu_9489_p1;
wire  signed [15:0] sext_ln159_78_fu_9500_p1;
wire  signed [15:0] sext_ln159_82_fu_9528_p1;
wire  signed [15:0] sext_ln159_89_fu_9575_p1;
wire  signed [15:0] sext_ln159_93_fu_9596_p1;
wire  signed [15:0] sext_ln159_94_fu_9607_p1;
wire  signed [15:0] sext_ln159_98_fu_9635_p1;
wire  signed [15:0] sext_ln159_105_fu_9682_p1;
wire  signed [15:0] sext_ln159_109_fu_9703_p1;
wire  signed [15:0] sext_ln159_110_fu_9714_p1;
wire  signed [15:0] sext_ln159_114_fu_9742_p1;
wire  signed [15:0] sext_ln159_121_fu_9789_p1;
wire  signed [15:0] sext_ln159_125_fu_9810_p1;
wire  signed [15:0] sext_ln159_126_fu_9821_p1;
wire  signed [15:0] sext_ln159_130_fu_9849_p1;
wire  signed [15:0] sext_ln159_137_fu_9896_p1;
wire  signed [15:0] sext_ln159_141_fu_9917_p1;
wire  signed [15:0] sext_ln159_142_fu_9928_p1;
wire  signed [15:0] sext_ln159_146_fu_9956_p1;
wire  signed [15:0] sext_ln159_153_fu_10003_p1;
wire  signed [15:0] sext_ln159_157_fu_10024_p1;
wire  signed [15:0] sext_ln159_158_fu_10035_p1;
wire  signed [15:0] sext_ln159_162_fu_10063_p1;
wire  signed [15:0] sext_ln159_169_fu_10110_p1;
wire  signed [15:0] sext_ln159_173_fu_10131_p1;
wire  signed [15:0] sext_ln159_174_fu_10142_p1;
wire  signed [15:0] sext_ln159_178_fu_10170_p1;
wire  signed [15:0] sext_ln159_185_fu_10217_p1;
wire  signed [15:0] sext_ln159_189_fu_10238_p1;
wire  signed [15:0] sext_ln159_190_fu_10249_p1;
wire  signed [15:0] sext_ln159_194_fu_10277_p1;
wire  signed [15:0] sext_ln159_201_fu_10324_p1;
wire  signed [15:0] sext_ln159_205_fu_10345_p1;
wire  signed [15:0] sext_ln159_206_fu_10356_p1;
wire  signed [15:0] sext_ln159_210_fu_10384_p1;
wire  signed [15:0] sext_ln159_217_fu_10431_p1;
wire  signed [15:0] sext_ln159_221_fu_10452_p1;
wire  signed [15:0] sext_ln159_222_fu_10463_p1;
wire  signed [15:0] sext_ln159_226_fu_10491_p1;
wire  signed [15:0] sext_ln159_233_fu_10538_p1;
wire  signed [15:0] sext_ln159_237_fu_10559_p1;
wire  signed [15:0] sext_ln159_238_fu_10570_p1;
wire  signed [15:0] sext_ln159_242_fu_10598_p1;
wire  signed [15:0] sext_ln159_249_fu_10645_p1;
wire  signed [15:0] sext_ln159_253_fu_10666_p1;
wire  signed [15:0] sext_ln159_254_fu_10677_p1;
wire  signed [15:0] sext_ln159_258_fu_10705_p1;
wire  signed [15:0] sext_ln159_265_fu_10752_p1;
wire  signed [15:0] sext_ln159_269_fu_10773_p1;
wire  signed [15:0] sext_ln159_270_fu_10784_p1;
wire  signed [15:0] sext_ln159_274_fu_10812_p1;
wire  signed [15:0] sext_ln159_281_fu_10859_p1;
wire  signed [15:0] sext_ln159_285_fu_10886_p1;
wire  signed [15:0] sext_ln159_286_fu_10897_p1;
reg   [667:0] PATCH_EMBED_INST_bias_arr_19_load_reg_23060;
reg   [20:0] tmp_15_reg_23080;
reg   [20:0] tmp_15_reg_23080_pp0_iter8_reg;
reg   [20:0] tmp_16_reg_23085;
reg   [20:0] tmp_16_reg_23085_pp0_iter8_reg;
reg   [20:0] tmp_17_reg_23090;
reg   [20:0] tmp_17_reg_23090_pp0_iter8_reg;
reg   [20:0] tmp_18_reg_23095;
reg   [20:0] tmp_18_reg_23095_pp0_iter8_reg;
reg   [20:0] tmp_19_reg_23100;
reg   [20:0] tmp_19_reg_23100_pp0_iter8_reg;
reg   [20:0] tmp_20_reg_23105;
reg   [20:0] tmp_20_reg_23105_pp0_iter8_reg;
reg   [20:0] tmp_21_reg_23110;
reg   [20:0] tmp_21_reg_23110_pp0_iter8_reg;
reg   [20:0] tmp_22_reg_23115;
reg   [20:0] tmp_22_reg_23115_pp0_iter8_reg;
reg   [20:0] tmp_23_reg_23120;
reg   [20:0] tmp_23_reg_23120_pp0_iter8_reg;
reg   [20:0] tmp_24_reg_23125;
reg   [20:0] tmp_24_reg_23125_pp0_iter8_reg;
reg   [20:0] tmp_25_reg_23130;
reg   [20:0] tmp_26_reg_23135;
reg   [20:0] tmp_27_reg_23140;
reg   [20:0] tmp_28_reg_23145;
reg   [20:0] tmp_29_reg_23150;
reg   [16:0] tmp_34_reg_23155;
wire   [17:0] add_ln161_5_fu_12387_p2;
reg   [17:0] add_ln161_5_reg_23175;
reg   [17:0] add_ln161_5_reg_23175_pp0_iter8_reg;
wire   [17:0] add_ln161_21_fu_12414_p2;
reg   [17:0] add_ln161_21_reg_23200;
reg   [17:0] add_ln161_21_reg_23200_pp0_iter8_reg;
wire   [17:0] add_ln161_37_fu_12441_p2;
reg   [17:0] add_ln161_37_reg_23225;
reg   [17:0] add_ln161_37_reg_23225_pp0_iter8_reg;
wire   [17:0] add_ln161_53_fu_12468_p2;
reg   [17:0] add_ln161_53_reg_23250;
reg   [17:0] add_ln161_53_reg_23250_pp0_iter8_reg;
wire   [17:0] add_ln161_69_fu_12495_p2;
reg   [17:0] add_ln161_69_reg_23275;
reg   [17:0] add_ln161_69_reg_23275_pp0_iter8_reg;
wire   [17:0] add_ln161_85_fu_12522_p2;
reg   [17:0] add_ln161_85_reg_23300;
reg   [17:0] add_ln161_85_reg_23300_pp0_iter8_reg;
wire   [17:0] add_ln161_101_fu_12549_p2;
reg   [17:0] add_ln161_101_reg_23325;
reg   [17:0] add_ln161_101_reg_23325_pp0_iter8_reg;
wire   [17:0] add_ln161_117_fu_12576_p2;
reg   [17:0] add_ln161_117_reg_23350;
reg   [17:0] add_ln161_117_reg_23350_pp0_iter8_reg;
wire   [17:0] add_ln161_133_fu_12603_p2;
reg   [17:0] add_ln161_133_reg_23375;
reg   [17:0] add_ln161_133_reg_23375_pp0_iter8_reg;
wire   [17:0] add_ln161_149_fu_12630_p2;
reg   [17:0] add_ln161_149_reg_23400;
reg   [17:0] add_ln161_149_reg_23400_pp0_iter8_reg;
wire   [17:0] add_ln161_165_fu_12657_p2;
reg   [17:0] add_ln161_165_reg_23425;
reg   [17:0] add_ln161_165_reg_23425_pp0_iter8_reg;
wire   [17:0] add_ln161_181_fu_12684_p2;
reg   [17:0] add_ln161_181_reg_23450;
reg   [17:0] add_ln161_181_reg_23450_pp0_iter8_reg;
wire   [17:0] add_ln161_197_fu_12711_p2;
reg   [17:0] add_ln161_197_reg_23475;
reg   [17:0] add_ln161_197_reg_23475_pp0_iter8_reg;
wire   [17:0] add_ln161_213_fu_12738_p2;
reg   [17:0] add_ln161_213_reg_23500;
reg   [17:0] add_ln161_213_reg_23500_pp0_iter8_reg;
wire   [17:0] add_ln161_229_fu_12765_p2;
reg   [17:0] add_ln161_229_reg_23525;
reg   [17:0] add_ln161_229_reg_23525_pp0_iter8_reg;
wire   [17:0] add_ln161_245_fu_12792_p2;
reg   [17:0] add_ln161_245_reg_23550;
reg   [17:0] add_ln161_245_reg_23550_pp0_iter8_reg;
wire   [17:0] add_ln161_421_fu_13089_p2;
reg   [17:0] add_ln161_421_reg_23775;
reg   [17:0] add_ln161_421_reg_23775_pp0_iter8_reg;
wire   [17:0] add_ln161_437_fu_13116_p2;
reg   [17:0] add_ln161_437_reg_23800;
reg   [17:0] add_ln161_437_reg_23800_pp0_iter8_reg;
wire   [17:0] add_ln161_453_fu_13143_p2;
reg   [17:0] add_ln161_453_reg_23825;
reg   [17:0] add_ln161_453_reg_23825_pp0_iter8_reg;
wire   [17:0] add_ln161_469_fu_13170_p2;
reg   [17:0] add_ln161_469_reg_23850;
reg   [17:0] add_ln161_469_reg_23850_pp0_iter8_reg;
wire   [17:0] add_ln161_485_fu_13197_p2;
reg   [17:0] add_ln161_485_reg_23875;
reg   [17:0] add_ln161_485_reg_23875_pp0_iter8_reg;
wire   [17:0] add_ln161_501_fu_13224_p2;
reg   [17:0] add_ln161_501_reg_23900;
reg   [17:0] add_ln161_501_reg_23900_pp0_iter8_reg;
wire  signed [16:0] grp_fu_17592_p3;
reg  signed [16:0] add_ln161_1_reg_24025;
wire   [17:0] add_ln161_9_fu_13781_p2;
reg   [17:0] add_ln161_9_reg_24030;
wire  signed [16:0] grp_fu_17618_p3;
reg  signed [16:0] add_ln161_17_reg_24035;
wire   [17:0] add_ln161_25_fu_13793_p2;
reg   [17:0] add_ln161_25_reg_24040;
wire  signed [16:0] grp_fu_17644_p3;
reg  signed [16:0] add_ln161_33_reg_24045;
wire   [17:0] add_ln161_41_fu_13805_p2;
reg   [17:0] add_ln161_41_reg_24050;
wire  signed [16:0] grp_fu_17670_p3;
reg  signed [16:0] add_ln161_49_reg_24055;
wire   [17:0] add_ln161_57_fu_13817_p2;
reg   [17:0] add_ln161_57_reg_24060;
wire  signed [16:0] grp_fu_17696_p3;
reg  signed [16:0] add_ln161_65_reg_24065;
wire   [17:0] add_ln161_73_fu_13829_p2;
reg   [17:0] add_ln161_73_reg_24070;
wire  signed [16:0] grp_fu_17722_p3;
reg  signed [16:0] add_ln161_81_reg_24075;
wire   [17:0] add_ln161_89_fu_13841_p2;
reg   [17:0] add_ln161_89_reg_24080;
wire  signed [16:0] grp_fu_17748_p3;
reg  signed [16:0] add_ln161_97_reg_24085;
wire   [17:0] add_ln161_105_fu_13853_p2;
reg   [17:0] add_ln161_105_reg_24090;
wire  signed [16:0] grp_fu_17774_p3;
reg  signed [16:0] add_ln161_113_reg_24095;
wire   [17:0] add_ln161_121_fu_13865_p2;
reg   [17:0] add_ln161_121_reg_24100;
wire  signed [16:0] grp_fu_17800_p3;
reg  signed [16:0] add_ln161_129_reg_24105;
wire   [17:0] add_ln161_137_fu_13877_p2;
reg   [17:0] add_ln161_137_reg_24110;
wire  signed [16:0] grp_fu_17826_p3;
reg  signed [16:0] add_ln161_145_reg_24115;
wire   [17:0] add_ln161_153_fu_13889_p2;
reg   [17:0] add_ln161_153_reg_24120;
wire  signed [16:0] grp_fu_17852_p3;
reg  signed [16:0] add_ln161_161_reg_24125;
wire   [17:0] add_ln161_169_fu_13901_p2;
reg   [17:0] add_ln161_169_reg_24130;
wire  signed [16:0] grp_fu_17878_p3;
reg  signed [16:0] add_ln161_177_reg_24135;
wire   [17:0] add_ln161_185_fu_13913_p2;
reg   [17:0] add_ln161_185_reg_24140;
wire  signed [16:0] grp_fu_17904_p3;
reg  signed [16:0] add_ln161_193_reg_24145;
wire   [17:0] add_ln161_201_fu_13925_p2;
reg   [17:0] add_ln161_201_reg_24150;
wire  signed [16:0] grp_fu_17930_p3;
reg  signed [16:0] add_ln161_209_reg_24155;
wire   [17:0] add_ln161_217_fu_13937_p2;
reg   [17:0] add_ln161_217_reg_24160;
wire  signed [16:0] grp_fu_17956_p3;
reg  signed [16:0] add_ln161_225_reg_24165;
wire   [17:0] add_ln161_233_fu_13949_p2;
reg   [17:0] add_ln161_233_reg_24170;
wire  signed [16:0] grp_fu_17982_p3;
reg  signed [16:0] add_ln161_241_reg_24175;
wire   [17:0] add_ln161_249_fu_13961_p2;
reg   [17:0] add_ln161_249_reg_24180;
wire   [17:0] add_ln161_265_fu_13973_p2;
reg   [17:0] add_ln161_265_reg_24185;
wire   [17:0] add_ln161_281_fu_13985_p2;
reg   [17:0] add_ln161_281_reg_24190;
wire   [17:0] add_ln161_297_fu_13997_p2;
reg   [17:0] add_ln161_297_reg_24195;
wire   [17:0] add_ln161_313_fu_14009_p2;
reg   [17:0] add_ln161_313_reg_24200;
wire   [17:0] add_ln161_329_fu_14021_p2;
reg   [17:0] add_ln161_329_reg_24205;
wire   [17:0] add_ln161_345_fu_14033_p2;
reg   [17:0] add_ln161_345_reg_24210;
wire   [17:0] add_ln161_361_fu_14045_p2;
reg   [17:0] add_ln161_361_reg_24215;
wire   [17:0] add_ln161_377_fu_14057_p2;
reg   [17:0] add_ln161_377_reg_24220;
wire   [17:0] add_ln161_393_fu_14069_p2;
reg   [17:0] add_ln161_393_reg_24225;
wire   [17:0] add_ln161_409_fu_14081_p2;
reg   [17:0] add_ln161_409_reg_24230;
wire  signed [16:0] grp_fu_18188_p3;
reg  signed [16:0] add_ln161_417_reg_24235;
wire   [17:0] add_ln161_425_fu_14093_p2;
reg   [17:0] add_ln161_425_reg_24240;
wire  signed [16:0] grp_fu_18214_p3;
reg  signed [16:0] add_ln161_433_reg_24245;
wire   [17:0] add_ln161_441_fu_14105_p2;
reg   [17:0] add_ln161_441_reg_24250;
wire  signed [16:0] grp_fu_18240_p3;
reg  signed [16:0] add_ln161_449_reg_24255;
wire   [17:0] add_ln161_457_fu_14117_p2;
reg   [17:0] add_ln161_457_reg_24260;
wire  signed [16:0] grp_fu_18266_p3;
reg  signed [16:0] add_ln161_465_reg_24265;
wire   [17:0] add_ln161_473_fu_14129_p2;
reg   [17:0] add_ln161_473_reg_24270;
wire  signed [16:0] grp_fu_18292_p3;
reg  signed [16:0] add_ln161_481_reg_24275;
wire   [17:0] add_ln161_489_fu_14141_p2;
reg   [17:0] add_ln161_489_reg_24280;
wire  signed [16:0] grp_fu_18318_p3;
reg  signed [16:0] add_ln161_497_reg_24285;
wire   [17:0] add_ln161_505_fu_14153_p2;
reg   [17:0] add_ln161_505_reg_24290;
wire   [20:0] add_ln161_271_fu_14924_p2;
reg   [20:0] add_ln161_271_reg_24295;
wire   [20:0] add_ln161_287_fu_14951_p2;
reg   [20:0] add_ln161_287_reg_24300;
wire   [20:0] add_ln161_303_fu_14978_p2;
reg   [20:0] add_ln161_303_reg_24305;
wire   [20:0] add_ln161_319_fu_15005_p2;
reg   [20:0] add_ln161_319_reg_24310;
wire   [20:0] add_ln161_335_fu_15032_p2;
reg   [20:0] add_ln161_335_reg_24315;
wire   [20:0] add_ln161_351_fu_15059_p2;
reg   [20:0] add_ln161_351_reg_24320;
wire   [20:0] add_ln161_367_fu_15086_p2;
reg   [20:0] add_ln161_367_reg_24325;
wire   [20:0] add_ln161_383_fu_15113_p2;
reg   [20:0] add_ln161_383_reg_24330;
wire   [20:0] add_ln161_399_fu_15140_p2;
reg   [20:0] add_ln161_399_reg_24335;
wire   [20:0] add_ln161_415_fu_15167_p2;
reg   [20:0] add_ln161_415_reg_24340;
wire   [20:0] add_ln161_431_fu_15206_p2;
reg   [20:0] add_ln161_431_reg_24345;
wire   [20:0] add_ln161_447_fu_15245_p2;
reg   [20:0] add_ln161_447_reg_24350;
wire   [20:0] add_ln161_463_fu_15284_p2;
reg   [20:0] add_ln161_463_reg_24355;
wire   [20:0] add_ln161_479_fu_15323_p2;
reg   [20:0] add_ln161_479_reg_24360;
wire   [20:0] add_ln161_495_fu_15362_p2;
reg   [20:0] add_ln161_495_reg_24365;
wire   [20:0] add_ln161_511_fu_15401_p2;
reg   [20:0] add_ln161_511_reg_24370;
wire   [20:0] empty_569_fu_15709_p3;
reg   [20:0] empty_569_reg_24375;
wire   [20:0] empty_570_fu_15716_p3;
reg   [20:0] empty_570_reg_24380;
wire   [20:0] empty_571_fu_15723_p3;
reg   [20:0] empty_571_reg_24385;
wire   [20:0] empty_572_fu_15730_p3;
reg   [20:0] empty_572_reg_24390;
wire   [20:0] empty_573_fu_15737_p3;
reg   [20:0] empty_573_reg_24395;
wire   [20:0] empty_574_fu_15744_p3;
reg   [20:0] empty_574_reg_24400;
wire   [20:0] empty_575_fu_15751_p3;
reg   [20:0] empty_575_reg_24405;
wire   [20:0] empty_576_fu_15758_p3;
reg   [20:0] empty_576_reg_24410;
wire   [20:0] empty_577_fu_15765_p3;
reg   [20:0] empty_577_reg_24415;
wire   [20:0] empty_578_fu_15772_p3;
reg   [20:0] empty_578_reg_24420;
wire   [20:0] empty_579_fu_15779_p3;
reg   [20:0] empty_579_reg_24425;
wire   [20:0] empty_580_fu_15786_p3;
reg   [20:0] empty_580_reg_24430;
wire   [20:0] empty_581_fu_15793_p3;
reg   [20:0] empty_581_reg_24435;
wire   [20:0] empty_582_fu_15800_p3;
reg   [20:0] empty_582_reg_24440;
wire   [20:0] empty_583_fu_15807_p3;
reg   [20:0] empty_583_reg_24445;
wire   [20:0] empty_584_fu_15814_p3;
reg   [20:0] empty_584_reg_24450;
wire   [63:0] zext_ln159_2_fu_2773_p1;
wire   [63:0] p_cast390_fu_9071_p1;
wire   [63:0] zext_ln127_fu_13365_p1;
reg   [5:0] cit_fu_2268;
wire   [5:0] add_ln128_fu_2672_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [20:0] empty_fu_2272;
wire   [20:0] add_ln161_15_fu_14312_p2;
reg   [20:0] ap_sig_allocacmp_p_load432;
reg   [20:0] empty_538_fu_2276;
wire   [20:0] add_ln161_31_fu_14351_p2;
reg   [20:0] ap_sig_allocacmp_p_load431;
reg   [20:0] empty_539_fu_2280;
wire   [20:0] add_ln161_47_fu_14390_p2;
reg   [20:0] ap_sig_allocacmp_p_load430;
reg   [20:0] empty_540_fu_2284;
wire   [20:0] add_ln161_63_fu_14429_p2;
reg   [20:0] ap_sig_allocacmp_p_load429;
reg   [20:0] empty_541_fu_2288;
wire   [20:0] add_ln161_79_fu_14468_p2;
reg   [20:0] ap_sig_allocacmp_p_load428;
reg   [20:0] empty_542_fu_2292;
wire   [20:0] add_ln161_95_fu_14507_p2;
reg   [20:0] ap_sig_allocacmp_p_load427;
reg   [20:0] empty_543_fu_2296;
wire   [20:0] add_ln161_111_fu_14546_p2;
reg   [20:0] ap_sig_allocacmp_p_load426;
reg   [20:0] empty_544_fu_2300;
wire   [20:0] add_ln161_127_fu_14585_p2;
reg   [20:0] ap_sig_allocacmp_p_load425;
reg   [20:0] empty_545_fu_2304;
wire   [20:0] add_ln161_143_fu_14624_p2;
reg   [20:0] ap_sig_allocacmp_p_load424;
reg   [20:0] empty_546_fu_2308;
wire   [20:0] add_ln161_159_fu_14663_p2;
reg   [20:0] ap_sig_allocacmp_p_load423;
reg   [20:0] empty_547_fu_2312;
wire   [20:0] add_ln161_175_fu_14702_p2;
reg   [20:0] ap_sig_allocacmp_p_load422;
reg   [20:0] empty_548_fu_2316;
wire   [20:0] add_ln161_191_fu_14741_p2;
reg   [20:0] ap_sig_allocacmp_p_load421;
reg   [20:0] empty_549_fu_2320;
wire   [20:0] add_ln161_207_fu_14780_p2;
reg   [20:0] ap_sig_allocacmp_p_load420;
reg   [20:0] empty_550_fu_2324;
wire   [20:0] add_ln161_223_fu_14819_p2;
reg   [20:0] ap_sig_allocacmp_p_load419;
reg   [20:0] empty_551_fu_2328;
wire   [20:0] add_ln161_239_fu_14858_p2;
reg   [20:0] ap_sig_allocacmp_p_load418;
reg   [20:0] empty_552_fu_2332;
wire   [20:0] add_ln161_255_fu_14897_p2;
reg   [20:0] ap_sig_allocacmp_p_load417;
reg   [20:0] empty_553_fu_2336;
reg   [20:0] empty_554_fu_2340;
reg   [20:0] empty_555_fu_2344;
reg   [20:0] empty_556_fu_2348;
reg   [20:0] empty_557_fu_2352;
reg   [20:0] empty_558_fu_2356;
reg   [20:0] empty_559_fu_2360;
reg   [20:0] empty_560_fu_2364;
reg   [20:0] empty_561_fu_2368;
reg   [20:0] empty_562_fu_2372;
reg   [20:0] empty_563_fu_2376;
reg   [20:0] ap_sig_allocacmp_p_load406;
reg   [20:0] empty_564_fu_2380;
reg   [20:0] ap_sig_allocacmp_p_load405;
reg   [20:0] empty_565_fu_2384;
reg   [20:0] ap_sig_allocacmp_p_load404;
reg   [20:0] empty_566_fu_2388;
reg   [20:0] ap_sig_allocacmp_p_load403;
reg   [20:0] empty_567_fu_2392;
reg   [20:0] ap_sig_allocacmp_p_load402;
reg   [20:0] empty_568_fu_2396;
reg   [20:0] ap_sig_allocacmp_p_load;
reg   [3:0] cot_fu_2400;
reg   [3:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_2404;
wire   [9:0] select_ln127_2_fu_2684_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [6:0] tt_fu_2408;
reg    ap_loop_init_pp0_iter1_reg;
reg    ap_loop_init_pp0_iter2_reg;
reg    ap_loop_init_pp0_iter3_reg;
reg    ap_loop_init_pp0_iter4_reg;
reg   [6:0] ap_sig_allocacmp_tt_load;
reg   [15:0] indvar_flatten107_fu_2412;
wire   [15:0] add_ln126_1_fu_2588_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten107_load;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln128_fu_2632_p2;
wire   [0:0] xor_ln126_fu_2626_p2;
wire   [3:0] select_ln126_fu_2618_p3;
wire   [0:0] and_ln126_fu_2638_p2;
wire   [0:0] or_ln127_fu_2650_p2;
wire   [3:0] add_ln127_fu_2644_p2;
wire   [9:0] add_ln127_1_fu_2678_p2;
wire   [7:0] tmp_33_fu_2747_p3;
wire   [9:0] tmp_32_fu_2740_p3;
wire   [9:0] zext_ln159_fu_2754_p1;
wire   [9:0] sub_ln159_fu_2758_p2;
wire   [9:0] zext_ln159_1_fu_2764_p1;
wire   [9:0] add_ln159_fu_2767_p2;
wire   [6:0] add_ln126_fu_2798_p2;
wire   [7:0] trunc_ln149_3_fu_2837_p4;
wire   [7:0] tmp_37_fu_3151_p4;
wire   [7:0] trunc_ln149_8_fu_2887_p4;
wire   [7:0] tmp_42_fu_3217_p4;
wire   [7:0] trunc_ln149_s_fu_2907_p4;
wire   [7:0] tmp_44_fu_3253_p4;
wire   [7:0] tmp_53_fu_3359_p4;
wire   [7:0] tmp_58_fu_3421_p4;
wire   [7:0] tmp_60_fu_3453_p4;
wire   [7:0] tmp_69_fu_3555_p4;
wire   [7:0] tmp_74_fu_3617_p4;
wire   [7:0] tmp_76_fu_3649_p4;
wire   [7:0] tmp_85_fu_3751_p4;
wire   [7:0] tmp_90_fu_3813_p4;
wire   [7:0] tmp_92_fu_3845_p4;
wire   [7:0] tmp_101_fu_3947_p4;
wire   [7:0] tmp_106_fu_4009_p4;
wire   [7:0] tmp_108_fu_4041_p4;
wire   [7:0] tmp_117_fu_4143_p4;
wire   [7:0] tmp_122_fu_4205_p4;
wire   [7:0] tmp_124_fu_4237_p4;
wire   [7:0] tmp_133_fu_4339_p4;
wire   [7:0] tmp_138_fu_4401_p4;
wire   [7:0] tmp_140_fu_4433_p4;
wire   [7:0] tmp_149_fu_4535_p4;
wire   [7:0] tmp_154_fu_4597_p4;
wire   [7:0] tmp_156_fu_4629_p4;
wire   [7:0] tmp_165_fu_4731_p4;
wire   [7:0] tmp_170_fu_4793_p4;
wire   [7:0] tmp_172_fu_4825_p4;
wire   [7:0] tmp_181_fu_4927_p4;
wire   [7:0] tmp_186_fu_4989_p4;
wire   [7:0] tmp_188_fu_5021_p4;
wire   [7:0] tmp_197_fu_5123_p4;
wire   [7:0] tmp_202_fu_5185_p4;
wire   [7:0] tmp_204_fu_5217_p4;
wire   [7:0] tmp_213_fu_5319_p4;
wire   [7:0] tmp_218_fu_5381_p4;
wire   [7:0] tmp_220_fu_5413_p4;
wire   [7:0] tmp_229_fu_5515_p4;
wire   [7:0] tmp_234_fu_5577_p4;
wire   [7:0] tmp_236_fu_5609_p4;
wire   [7:0] tmp_245_fu_5711_p4;
wire   [7:0] tmp_250_fu_5773_p4;
wire   [7:0] tmp_252_fu_5805_p4;
wire   [7:0] tmp_261_fu_5907_p4;
wire   [7:0] tmp_266_fu_5969_p4;
wire   [7:0] tmp_268_fu_6001_p4;
wire   [7:0] tmp_277_fu_6103_p4;
wire   [7:0] tmp_282_fu_6165_p4;
wire   [7:0] tmp_284_fu_6197_p4;
wire   [7:0] trunc_ln149_18_fu_2997_p4;
wire   [7:0] trunc_ln149_23_fu_3047_p4;
wire   [7:0] trunc_ln149_25_fu_3067_p4;
wire   [8:0] tmp_31_fu_6684_p3;
wire   [10:0] tmp_30_fu_6677_p3;
wire   [10:0] tmp_317_cast_fu_6691_p1;
wire   [10:0] empty_585_fu_6695_p2;
wire   [10:0] select_ln127_1_cast_fu_6706_p1;
wire  signed [7:0] grp_fu_6757_p0;
wire  signed [7:0] grp_fu_6757_p1;
wire  signed [7:0] grp_fu_6777_p0;
wire  signed [7:0] grp_fu_6777_p1;
wire  signed [7:0] grp_fu_6797_p0;
wire  signed [7:0] grp_fu_6797_p1;
wire  signed [7:0] grp_fu_6850_p0;
wire  signed [7:0] grp_fu_6850_p1;
wire  signed [7:0] grp_fu_6867_p0;
wire  signed [7:0] grp_fu_6867_p1;
wire  signed [7:0] grp_fu_6884_p0;
wire  signed [7:0] grp_fu_6884_p1;
wire  signed [7:0] grp_fu_6934_p0;
wire  signed [7:0] grp_fu_6934_p1;
wire  signed [7:0] grp_fu_6951_p0;
wire  signed [7:0] grp_fu_6951_p1;
wire  signed [7:0] grp_fu_6968_p0;
wire  signed [7:0] grp_fu_6968_p1;
wire  signed [7:0] grp_fu_7018_p0;
wire  signed [7:0] grp_fu_7018_p1;
wire  signed [7:0] grp_fu_7035_p0;
wire  signed [7:0] grp_fu_7035_p1;
wire  signed [7:0] grp_fu_7052_p0;
wire  signed [7:0] grp_fu_7052_p1;
wire  signed [7:0] grp_fu_7102_p0;
wire  signed [7:0] grp_fu_7102_p1;
wire  signed [7:0] grp_fu_7119_p0;
wire  signed [7:0] grp_fu_7119_p1;
wire  signed [7:0] grp_fu_7136_p0;
wire  signed [7:0] grp_fu_7136_p1;
wire  signed [7:0] grp_fu_7186_p0;
wire  signed [7:0] grp_fu_7186_p1;
wire  signed [7:0] grp_fu_7203_p0;
wire  signed [7:0] grp_fu_7203_p1;
wire  signed [7:0] grp_fu_7220_p0;
wire  signed [7:0] grp_fu_7220_p1;
wire  signed [7:0] grp_fu_7270_p0;
wire  signed [7:0] grp_fu_7270_p1;
wire  signed [7:0] grp_fu_7287_p0;
wire  signed [7:0] grp_fu_7287_p1;
wire  signed [7:0] grp_fu_7304_p0;
wire  signed [7:0] grp_fu_7304_p1;
wire  signed [7:0] grp_fu_7354_p0;
wire  signed [7:0] grp_fu_7354_p1;
wire  signed [7:0] grp_fu_7371_p0;
wire  signed [7:0] grp_fu_7371_p1;
wire  signed [7:0] grp_fu_7388_p0;
wire  signed [7:0] grp_fu_7388_p1;
wire  signed [7:0] grp_fu_7438_p0;
wire  signed [7:0] grp_fu_7438_p1;
wire  signed [7:0] grp_fu_7455_p0;
wire  signed [7:0] grp_fu_7455_p1;
wire  signed [7:0] grp_fu_7472_p0;
wire  signed [7:0] grp_fu_7472_p1;
wire  signed [7:0] grp_fu_7522_p0;
wire  signed [7:0] grp_fu_7522_p1;
wire  signed [7:0] grp_fu_7539_p0;
wire  signed [7:0] grp_fu_7539_p1;
wire  signed [7:0] grp_fu_7556_p0;
wire  signed [7:0] grp_fu_7556_p1;
wire  signed [7:0] grp_fu_7606_p0;
wire  signed [7:0] grp_fu_7606_p1;
wire  signed [7:0] grp_fu_7623_p0;
wire  signed [7:0] grp_fu_7623_p1;
wire  signed [7:0] grp_fu_7640_p0;
wire  signed [7:0] grp_fu_7640_p1;
wire  signed [7:0] grp_fu_7690_p0;
wire  signed [7:0] grp_fu_7690_p1;
wire  signed [7:0] grp_fu_7707_p0;
wire  signed [7:0] grp_fu_7707_p1;
wire  signed [7:0] grp_fu_7724_p0;
wire  signed [7:0] grp_fu_7724_p1;
wire  signed [7:0] grp_fu_7774_p0;
wire  signed [7:0] grp_fu_7774_p1;
wire  signed [7:0] grp_fu_7791_p0;
wire  signed [7:0] grp_fu_7791_p1;
wire  signed [7:0] grp_fu_7808_p0;
wire  signed [7:0] grp_fu_7808_p1;
wire  signed [7:0] grp_fu_7858_p0;
wire  signed [7:0] grp_fu_7858_p1;
wire  signed [7:0] grp_fu_7875_p0;
wire  signed [7:0] grp_fu_7875_p1;
wire  signed [7:0] grp_fu_7892_p0;
wire  signed [7:0] grp_fu_7892_p1;
wire  signed [7:0] grp_fu_7942_p0;
wire  signed [7:0] grp_fu_7942_p1;
wire  signed [7:0] grp_fu_7959_p0;
wire  signed [7:0] grp_fu_7959_p1;
wire  signed [7:0] grp_fu_7976_p0;
wire  signed [7:0] grp_fu_7976_p1;
wire  signed [7:0] grp_fu_8026_p0;
wire  signed [7:0] grp_fu_8026_p1;
wire  signed [7:0] grp_fu_8043_p0;
wire  signed [7:0] grp_fu_8043_p1;
wire  signed [7:0] grp_fu_8060_p0;
wire  signed [7:0] grp_fu_8060_p1;
wire  signed [7:0] grp_fu_8110_p0;
wire  signed [7:0] grp_fu_8110_p1;
wire  signed [7:0] grp_fu_8127_p0;
wire  signed [7:0] grp_fu_8127_p1;
wire  signed [7:0] grp_fu_8144_p0;
wire  signed [7:0] grp_fu_8144_p1;
wire  signed [7:0] grp_fu_8177_p0;
wire  signed [7:0] grp_fu_8177_p1;
wire  signed [7:0] grp_fu_8191_p0;
wire  signed [7:0] grp_fu_8191_p1;
wire  signed [7:0] grp_fu_8205_p0;
wire  signed [7:0] grp_fu_8205_p1;
wire  signed [7:0] grp_fu_8235_p0;
wire  signed [7:0] grp_fu_8235_p1;
wire  signed [7:0] grp_fu_8249_p0;
wire  signed [7:0] grp_fu_8249_p1;
wire  signed [7:0] grp_fu_8263_p0;
wire  signed [7:0] grp_fu_8263_p1;
wire  signed [7:0] grp_fu_8293_p0;
wire  signed [7:0] grp_fu_8293_p1;
wire  signed [7:0] grp_fu_8307_p0;
wire  signed [7:0] grp_fu_8307_p1;
wire  signed [7:0] grp_fu_8321_p0;
wire  signed [7:0] grp_fu_8321_p1;
wire  signed [7:0] grp_fu_8351_p0;
wire  signed [7:0] grp_fu_8351_p1;
wire  signed [7:0] grp_fu_8365_p0;
wire  signed [7:0] grp_fu_8365_p1;
wire  signed [7:0] grp_fu_8379_p0;
wire  signed [7:0] grp_fu_8379_p1;
wire  signed [7:0] grp_fu_8409_p0;
wire  signed [7:0] grp_fu_8409_p1;
wire  signed [7:0] grp_fu_8423_p0;
wire  signed [7:0] grp_fu_8423_p1;
wire  signed [7:0] grp_fu_8437_p0;
wire  signed [7:0] grp_fu_8437_p1;
wire  signed [7:0] grp_fu_8467_p0;
wire  signed [7:0] grp_fu_8467_p1;
wire  signed [7:0] grp_fu_8481_p0;
wire  signed [7:0] grp_fu_8481_p1;
wire  signed [7:0] grp_fu_8495_p0;
wire  signed [7:0] grp_fu_8495_p1;
wire  signed [7:0] grp_fu_8525_p0;
wire  signed [7:0] grp_fu_8525_p1;
wire  signed [7:0] grp_fu_8539_p0;
wire  signed [7:0] grp_fu_8539_p1;
wire  signed [7:0] grp_fu_8553_p0;
wire  signed [7:0] grp_fu_8553_p1;
wire  signed [7:0] grp_fu_8583_p0;
wire  signed [7:0] grp_fu_8583_p1;
wire  signed [7:0] grp_fu_8597_p0;
wire  signed [7:0] grp_fu_8597_p1;
wire  signed [7:0] grp_fu_8611_p0;
wire  signed [7:0] grp_fu_8611_p1;
wire  signed [7:0] grp_fu_8641_p0;
wire  signed [7:0] grp_fu_8641_p1;
wire  signed [7:0] grp_fu_8655_p0;
wire  signed [7:0] grp_fu_8655_p1;
wire  signed [7:0] grp_fu_8669_p0;
wire  signed [7:0] grp_fu_8669_p1;
wire  signed [7:0] grp_fu_8699_p0;
wire  signed [7:0] grp_fu_8699_p1;
wire  signed [7:0] grp_fu_8713_p0;
wire  signed [7:0] grp_fu_8713_p1;
wire  signed [7:0] grp_fu_8727_p0;
wire  signed [7:0] grp_fu_8727_p1;
wire  signed [7:0] grp_fu_8765_p0;
wire  signed [7:0] grp_fu_8765_p1;
wire  signed [7:0] grp_fu_8779_p0;
wire  signed [7:0] grp_fu_8779_p1;
wire  signed [7:0] grp_fu_8793_p0;
wire  signed [7:0] grp_fu_8793_p1;
wire  signed [7:0] grp_fu_8831_p0;
wire  signed [7:0] grp_fu_8831_p1;
wire  signed [7:0] grp_fu_8845_p0;
wire  signed [7:0] grp_fu_8845_p1;
wire  signed [7:0] grp_fu_8859_p0;
wire  signed [7:0] grp_fu_8859_p1;
wire  signed [7:0] grp_fu_8897_p0;
wire  signed [7:0] grp_fu_8897_p1;
wire  signed [7:0] grp_fu_8911_p0;
wire  signed [7:0] grp_fu_8911_p1;
wire  signed [7:0] grp_fu_8925_p0;
wire  signed [7:0] grp_fu_8925_p1;
wire  signed [7:0] grp_fu_8963_p0;
wire  signed [7:0] grp_fu_8963_p1;
wire  signed [7:0] grp_fu_8977_p0;
wire  signed [7:0] grp_fu_8977_p1;
wire  signed [7:0] grp_fu_8991_p0;
wire  signed [7:0] grp_fu_8991_p1;
wire  signed [7:0] grp_fu_9029_p0;
wire  signed [7:0] grp_fu_9029_p1;
wire  signed [7:0] grp_fu_9043_p0;
wire  signed [7:0] grp_fu_9043_p1;
wire  signed [7:0] grp_fu_9057_p0;
wire  signed [7:0] grp_fu_9057_p1;
wire  signed [7:0] grp_fu_9093_p0;
wire  signed [7:0] grp_fu_9093_p1;
wire  signed [15:0] grp_fu_6757_p2;
wire  signed [15:0] grp_fu_6777_p2;
wire  signed [7:0] grp_fu_9149_p0;
wire  signed [7:0] grp_fu_9149_p1;
wire  signed [15:0] grp_fu_6797_p2;
wire  signed [7:0] grp_fu_9187_p0;
wire  signed [7:0] grp_fu_9187_p1;
wire  signed [7:0] grp_fu_9218_p0;
wire  signed [7:0] grp_fu_9218_p1;
wire  signed [15:0] grp_fu_6850_p2;
wire  signed [15:0] grp_fu_6867_p2;
wire  signed [7:0] grp_fu_9265_p0;
wire  signed [7:0] grp_fu_9265_p1;
wire  signed [15:0] grp_fu_6884_p2;
wire  signed [7:0] grp_fu_9297_p0;
wire  signed [7:0] grp_fu_9297_p1;
wire  signed [7:0] grp_fu_9325_p0;
wire  signed [7:0] grp_fu_9325_p1;
wire  signed [15:0] grp_fu_6934_p2;
wire  signed [15:0] grp_fu_6951_p2;
wire  signed [7:0] grp_fu_9372_p0;
wire  signed [7:0] grp_fu_9372_p1;
wire  signed [15:0] grp_fu_6968_p2;
wire  signed [7:0] grp_fu_9404_p0;
wire  signed [7:0] grp_fu_9404_p1;
wire  signed [7:0] grp_fu_9432_p0;
wire  signed [7:0] grp_fu_9432_p1;
wire  signed [15:0] grp_fu_7018_p2;
wire  signed [15:0] grp_fu_7035_p2;
wire  signed [7:0] grp_fu_9479_p0;
wire  signed [7:0] grp_fu_9479_p1;
wire  signed [15:0] grp_fu_7052_p2;
wire  signed [7:0] grp_fu_9511_p0;
wire  signed [7:0] grp_fu_9511_p1;
wire  signed [7:0] grp_fu_9539_p0;
wire  signed [7:0] grp_fu_9539_p1;
wire  signed [15:0] grp_fu_7102_p2;
wire  signed [15:0] grp_fu_7119_p2;
wire  signed [7:0] grp_fu_9586_p0;
wire  signed [7:0] grp_fu_9586_p1;
wire  signed [15:0] grp_fu_7136_p2;
wire  signed [7:0] grp_fu_9618_p0;
wire  signed [7:0] grp_fu_9618_p1;
wire  signed [7:0] grp_fu_9646_p0;
wire  signed [7:0] grp_fu_9646_p1;
wire  signed [15:0] grp_fu_7186_p2;
wire  signed [15:0] grp_fu_7203_p2;
wire  signed [7:0] grp_fu_9693_p0;
wire  signed [7:0] grp_fu_9693_p1;
wire  signed [15:0] grp_fu_7220_p2;
wire  signed [7:0] grp_fu_9725_p0;
wire  signed [7:0] grp_fu_9725_p1;
wire  signed [7:0] grp_fu_9753_p0;
wire  signed [7:0] grp_fu_9753_p1;
wire  signed [15:0] grp_fu_7270_p2;
wire  signed [15:0] grp_fu_7287_p2;
wire  signed [7:0] grp_fu_9800_p0;
wire  signed [7:0] grp_fu_9800_p1;
wire  signed [15:0] grp_fu_7304_p2;
wire  signed [7:0] grp_fu_9832_p0;
wire  signed [7:0] grp_fu_9832_p1;
wire  signed [7:0] grp_fu_9860_p0;
wire  signed [7:0] grp_fu_9860_p1;
wire  signed [15:0] grp_fu_7354_p2;
wire  signed [15:0] grp_fu_7371_p2;
wire  signed [7:0] grp_fu_9907_p0;
wire  signed [7:0] grp_fu_9907_p1;
wire  signed [15:0] grp_fu_7388_p2;
wire  signed [7:0] grp_fu_9939_p0;
wire  signed [7:0] grp_fu_9939_p1;
wire  signed [7:0] grp_fu_9967_p0;
wire  signed [7:0] grp_fu_9967_p1;
wire  signed [15:0] grp_fu_7438_p2;
wire  signed [15:0] grp_fu_7455_p2;
wire  signed [7:0] grp_fu_10014_p0;
wire  signed [7:0] grp_fu_10014_p1;
wire  signed [15:0] grp_fu_7472_p2;
wire  signed [7:0] grp_fu_10046_p0;
wire  signed [7:0] grp_fu_10046_p1;
wire  signed [7:0] grp_fu_10074_p0;
wire  signed [7:0] grp_fu_10074_p1;
wire  signed [15:0] grp_fu_7522_p2;
wire  signed [15:0] grp_fu_7539_p2;
wire  signed [7:0] grp_fu_10121_p0;
wire  signed [7:0] grp_fu_10121_p1;
wire  signed [15:0] grp_fu_7556_p2;
wire  signed [7:0] grp_fu_10153_p0;
wire  signed [7:0] grp_fu_10153_p1;
wire  signed [7:0] grp_fu_10181_p0;
wire  signed [7:0] grp_fu_10181_p1;
wire  signed [15:0] grp_fu_7606_p2;
wire  signed [15:0] grp_fu_7623_p2;
wire  signed [7:0] grp_fu_10228_p0;
wire  signed [7:0] grp_fu_10228_p1;
wire  signed [15:0] grp_fu_7640_p2;
wire  signed [7:0] grp_fu_10260_p0;
wire  signed [7:0] grp_fu_10260_p1;
wire  signed [7:0] grp_fu_10288_p0;
wire  signed [7:0] grp_fu_10288_p1;
wire  signed [15:0] grp_fu_7690_p2;
wire  signed [15:0] grp_fu_7707_p2;
wire  signed [7:0] grp_fu_10335_p0;
wire  signed [7:0] grp_fu_10335_p1;
wire  signed [15:0] grp_fu_7724_p2;
wire  signed [7:0] grp_fu_10367_p0;
wire  signed [7:0] grp_fu_10367_p1;
wire  signed [7:0] grp_fu_10395_p0;
wire  signed [7:0] grp_fu_10395_p1;
wire  signed [15:0] grp_fu_7774_p2;
wire  signed [15:0] grp_fu_7791_p2;
wire  signed [7:0] grp_fu_10442_p0;
wire  signed [7:0] grp_fu_10442_p1;
wire  signed [15:0] grp_fu_7808_p2;
wire  signed [7:0] grp_fu_10474_p0;
wire  signed [7:0] grp_fu_10474_p1;
wire  signed [7:0] grp_fu_10502_p0;
wire  signed [7:0] grp_fu_10502_p1;
wire  signed [15:0] grp_fu_7858_p2;
wire  signed [15:0] grp_fu_7875_p2;
wire  signed [7:0] grp_fu_10549_p0;
wire  signed [7:0] grp_fu_10549_p1;
wire  signed [15:0] grp_fu_7892_p2;
wire  signed [7:0] grp_fu_10581_p0;
wire  signed [7:0] grp_fu_10581_p1;
wire  signed [7:0] grp_fu_10609_p0;
wire  signed [7:0] grp_fu_10609_p1;
wire  signed [15:0] grp_fu_7942_p2;
wire  signed [15:0] grp_fu_7959_p2;
wire  signed [7:0] grp_fu_10656_p0;
wire  signed [7:0] grp_fu_10656_p1;
wire  signed [15:0] grp_fu_7976_p2;
wire  signed [7:0] grp_fu_10688_p0;
wire  signed [7:0] grp_fu_10688_p1;
wire  signed [7:0] grp_fu_10716_p0;
wire  signed [7:0] grp_fu_10716_p1;
wire  signed [15:0] grp_fu_8026_p2;
wire  signed [15:0] grp_fu_8043_p2;
wire  signed [7:0] grp_fu_10763_p0;
wire  signed [7:0] grp_fu_10763_p1;
wire  signed [15:0] grp_fu_8060_p2;
wire  signed [7:0] grp_fu_10795_p0;
wire  signed [7:0] grp_fu_10795_p1;
wire  signed [7:0] grp_fu_10823_p0;
wire  signed [7:0] grp_fu_10823_p1;
wire  signed [15:0] grp_fu_8110_p2;
wire  signed [15:0] grp_fu_8127_p2;
wire  signed [7:0] grp_fu_10870_p0;
wire  signed [7:0] grp_fu_10870_p1;
wire  signed [15:0] grp_fu_8144_p2;
wire  signed [7:0] grp_fu_10927_p0;
wire  signed [7:0] grp_fu_10927_p1;
wire  signed [15:0] grp_fu_8177_p2;
wire  signed [15:0] grp_fu_8191_p2;
wire  signed [7:0] grp_fu_10965_p0;
wire  signed [7:0] grp_fu_10965_p1;
wire  signed [15:0] grp_fu_8205_p2;
wire  signed [7:0] grp_fu_11013_p0;
wire  signed [7:0] grp_fu_11013_p1;
wire  signed [15:0] grp_fu_8235_p2;
wire  signed [15:0] grp_fu_8249_p2;
wire  signed [7:0] grp_fu_11051_p0;
wire  signed [7:0] grp_fu_11051_p1;
wire  signed [15:0] grp_fu_8263_p2;
wire  signed [7:0] grp_fu_11099_p0;
wire  signed [7:0] grp_fu_11099_p1;
wire  signed [15:0] grp_fu_8293_p2;
wire  signed [15:0] grp_fu_8307_p2;
wire  signed [7:0] grp_fu_11137_p0;
wire  signed [7:0] grp_fu_11137_p1;
wire  signed [15:0] grp_fu_8321_p2;
wire  signed [7:0] grp_fu_11185_p0;
wire  signed [7:0] grp_fu_11185_p1;
wire  signed [15:0] grp_fu_8351_p2;
wire  signed [15:0] grp_fu_8365_p2;
wire  signed [7:0] grp_fu_11223_p0;
wire  signed [7:0] grp_fu_11223_p1;
wire  signed [15:0] grp_fu_8379_p2;
wire  signed [7:0] grp_fu_11271_p0;
wire  signed [7:0] grp_fu_11271_p1;
wire  signed [15:0] grp_fu_8409_p2;
wire  signed [15:0] grp_fu_8423_p2;
wire  signed [7:0] grp_fu_11309_p0;
wire  signed [7:0] grp_fu_11309_p1;
wire  signed [15:0] grp_fu_8437_p2;
wire  signed [7:0] grp_fu_11357_p0;
wire  signed [7:0] grp_fu_11357_p1;
wire  signed [15:0] grp_fu_8467_p2;
wire  signed [15:0] grp_fu_8481_p2;
wire  signed [7:0] grp_fu_11395_p0;
wire  signed [7:0] grp_fu_11395_p1;
wire  signed [15:0] grp_fu_8495_p2;
wire  signed [7:0] grp_fu_11443_p0;
wire  signed [7:0] grp_fu_11443_p1;
wire  signed [15:0] grp_fu_8525_p2;
wire  signed [15:0] grp_fu_8539_p2;
wire  signed [7:0] grp_fu_11481_p0;
wire  signed [7:0] grp_fu_11481_p1;
wire  signed [15:0] grp_fu_8553_p2;
wire  signed [7:0] grp_fu_11529_p0;
wire  signed [7:0] grp_fu_11529_p1;
wire  signed [15:0] grp_fu_8583_p2;
wire  signed [15:0] grp_fu_8597_p2;
wire  signed [7:0] grp_fu_11567_p0;
wire  signed [7:0] grp_fu_11567_p1;
wire  signed [15:0] grp_fu_8611_p2;
wire  signed [7:0] grp_fu_11615_p0;
wire  signed [7:0] grp_fu_11615_p1;
wire  signed [15:0] grp_fu_8641_p2;
wire  signed [15:0] grp_fu_8655_p2;
wire  signed [7:0] grp_fu_11653_p0;
wire  signed [7:0] grp_fu_11653_p1;
wire  signed [15:0] grp_fu_8669_p2;
wire  signed [7:0] grp_fu_11701_p0;
wire  signed [7:0] grp_fu_11701_p1;
wire  signed [15:0] grp_fu_8699_p2;
wire  signed [15:0] grp_fu_8713_p2;
wire  signed [7:0] grp_fu_11739_p0;
wire  signed [7:0] grp_fu_11739_p1;
wire  signed [15:0] grp_fu_8727_p2;
wire  signed [7:0] grp_fu_11765_p0;
wire  signed [7:0] grp_fu_11765_p1;
wire  signed [7:0] grp_fu_11787_p0;
wire  signed [7:0] grp_fu_11787_p1;
wire  signed [15:0] grp_fu_8765_p2;
wire  signed [15:0] grp_fu_8779_p2;
wire  signed [7:0] grp_fu_11825_p0;
wire  signed [7:0] grp_fu_11825_p1;
wire  signed [15:0] grp_fu_8793_p2;
wire  signed [7:0] grp_fu_11851_p0;
wire  signed [7:0] grp_fu_11851_p1;
wire  signed [7:0] grp_fu_11873_p0;
wire  signed [7:0] grp_fu_11873_p1;
wire  signed [15:0] grp_fu_8831_p2;
wire  signed [15:0] grp_fu_8845_p2;
wire  signed [7:0] grp_fu_11911_p0;
wire  signed [7:0] grp_fu_11911_p1;
wire  signed [15:0] grp_fu_8859_p2;
wire  signed [7:0] grp_fu_11937_p0;
wire  signed [7:0] grp_fu_11937_p1;
wire  signed [7:0] grp_fu_11959_p0;
wire  signed [7:0] grp_fu_11959_p1;
wire  signed [15:0] grp_fu_8897_p2;
wire  signed [15:0] grp_fu_8911_p2;
wire  signed [7:0] grp_fu_11997_p0;
wire  signed [7:0] grp_fu_11997_p1;
wire  signed [15:0] grp_fu_8925_p2;
wire  signed [7:0] grp_fu_12023_p0;
wire  signed [7:0] grp_fu_12023_p1;
wire  signed [7:0] grp_fu_12045_p0;
wire  signed [7:0] grp_fu_12045_p1;
wire  signed [15:0] grp_fu_8963_p2;
wire  signed [15:0] grp_fu_8977_p2;
wire  signed [7:0] grp_fu_12083_p0;
wire  signed [7:0] grp_fu_12083_p1;
wire  signed [15:0] grp_fu_8991_p2;
wire  signed [7:0] grp_fu_12109_p0;
wire  signed [7:0] grp_fu_12109_p1;
wire  signed [7:0] grp_fu_12131_p0;
wire  signed [7:0] grp_fu_12131_p1;
wire  signed [15:0] grp_fu_9029_p2;
wire  signed [15:0] grp_fu_9043_p2;
wire  signed [7:0] grp_fu_12169_p0;
wire  signed [7:0] grp_fu_12169_p1;
wire  signed [15:0] grp_fu_9057_p2;
wire  signed [7:0] grp_fu_12195_p0;
wire  signed [7:0] grp_fu_12195_p1;
wire  signed [15:0] grp_fu_9093_p2;
wire  signed [15:0] grp_fu_9149_p2;
wire  signed [15:0] grp_fu_9187_p2;
wire  signed [16:0] grp_fu_16719_p3;
wire  signed [16:0] grp_fu_16728_p3;
wire  signed [17:0] sext_ln161_4_fu_12384_p1;
wire  signed [17:0] sext_ln161_3_fu_12381_p1;
wire  signed [16:0] grp_fu_16710_p3;
wire  signed [15:0] grp_fu_9218_p2;
wire  signed [15:0] grp_fu_9265_p2;
wire  signed [15:0] grp_fu_9297_p2;
wire  signed [16:0] grp_fu_16746_p3;
wire  signed [16:0] grp_fu_16755_p3;
wire  signed [17:0] sext_ln161_17_fu_12411_p1;
wire  signed [17:0] sext_ln161_16_fu_12408_p1;
wire  signed [16:0] grp_fu_16737_p3;
wire  signed [15:0] grp_fu_9325_p2;
wire  signed [15:0] grp_fu_9372_p2;
wire  signed [15:0] grp_fu_9404_p2;
wire  signed [16:0] grp_fu_16773_p3;
wire  signed [16:0] grp_fu_16782_p3;
wire  signed [17:0] sext_ln161_30_fu_12438_p1;
wire  signed [17:0] sext_ln161_29_fu_12435_p1;
wire  signed [16:0] grp_fu_16764_p3;
wire  signed [15:0] grp_fu_9432_p2;
wire  signed [15:0] grp_fu_9479_p2;
wire  signed [15:0] grp_fu_9511_p2;
wire  signed [16:0] grp_fu_16800_p3;
wire  signed [16:0] grp_fu_16809_p3;
wire  signed [17:0] sext_ln161_43_fu_12465_p1;
wire  signed [17:0] sext_ln161_42_fu_12462_p1;
wire  signed [16:0] grp_fu_16791_p3;
wire  signed [15:0] grp_fu_9539_p2;
wire  signed [15:0] grp_fu_9586_p2;
wire  signed [15:0] grp_fu_9618_p2;
wire  signed [16:0] grp_fu_16827_p3;
wire  signed [16:0] grp_fu_16836_p3;
wire  signed [17:0] sext_ln161_56_fu_12492_p1;
wire  signed [17:0] sext_ln161_55_fu_12489_p1;
wire  signed [16:0] grp_fu_16818_p3;
wire  signed [15:0] grp_fu_9646_p2;
wire  signed [15:0] grp_fu_9693_p2;
wire  signed [15:0] grp_fu_9725_p2;
wire  signed [16:0] grp_fu_16854_p3;
wire  signed [16:0] grp_fu_16863_p3;
wire  signed [17:0] sext_ln161_69_fu_12519_p1;
wire  signed [17:0] sext_ln161_68_fu_12516_p1;
wire  signed [16:0] grp_fu_16845_p3;
wire  signed [15:0] grp_fu_9753_p2;
wire  signed [15:0] grp_fu_9800_p2;
wire  signed [15:0] grp_fu_9832_p2;
wire  signed [16:0] grp_fu_16881_p3;
wire  signed [16:0] grp_fu_16890_p3;
wire  signed [17:0] sext_ln161_82_fu_12546_p1;
wire  signed [17:0] sext_ln161_81_fu_12543_p1;
wire  signed [16:0] grp_fu_16872_p3;
wire  signed [15:0] grp_fu_9860_p2;
wire  signed [15:0] grp_fu_9907_p2;
wire  signed [15:0] grp_fu_9939_p2;
wire  signed [16:0] grp_fu_16908_p3;
wire  signed [16:0] grp_fu_16917_p3;
wire  signed [17:0] sext_ln161_95_fu_12573_p1;
wire  signed [17:0] sext_ln161_94_fu_12570_p1;
wire  signed [16:0] grp_fu_16899_p3;
wire  signed [15:0] grp_fu_9967_p2;
wire  signed [15:0] grp_fu_10014_p2;
wire  signed [15:0] grp_fu_10046_p2;
wire  signed [16:0] grp_fu_16935_p3;
wire  signed [16:0] grp_fu_16944_p3;
wire  signed [17:0] sext_ln161_108_fu_12600_p1;
wire  signed [17:0] sext_ln161_107_fu_12597_p1;
wire  signed [16:0] grp_fu_16926_p3;
wire  signed [15:0] grp_fu_10074_p2;
wire  signed [15:0] grp_fu_10121_p2;
wire  signed [15:0] grp_fu_10153_p2;
wire  signed [16:0] grp_fu_16962_p3;
wire  signed [16:0] grp_fu_16971_p3;
wire  signed [17:0] sext_ln161_121_fu_12627_p1;
wire  signed [17:0] sext_ln161_120_fu_12624_p1;
wire  signed [16:0] grp_fu_16953_p3;
wire  signed [15:0] grp_fu_10181_p2;
wire  signed [15:0] grp_fu_10228_p2;
wire  signed [15:0] grp_fu_10260_p2;
wire  signed [16:0] grp_fu_16989_p3;
wire  signed [16:0] grp_fu_16998_p3;
wire  signed [17:0] sext_ln161_134_fu_12654_p1;
wire  signed [17:0] sext_ln161_133_fu_12651_p1;
wire  signed [16:0] grp_fu_16980_p3;
wire  signed [15:0] grp_fu_10288_p2;
wire  signed [15:0] grp_fu_10335_p2;
wire  signed [15:0] grp_fu_10367_p2;
wire  signed [16:0] grp_fu_17016_p3;
wire  signed [16:0] grp_fu_17025_p3;
wire  signed [17:0] sext_ln161_147_fu_12681_p1;
wire  signed [17:0] sext_ln161_146_fu_12678_p1;
wire  signed [16:0] grp_fu_17007_p3;
wire  signed [15:0] grp_fu_10395_p2;
wire  signed [15:0] grp_fu_10442_p2;
wire  signed [15:0] grp_fu_10474_p2;
wire  signed [16:0] grp_fu_17043_p3;
wire  signed [16:0] grp_fu_17052_p3;
wire  signed [17:0] sext_ln161_160_fu_12708_p1;
wire  signed [17:0] sext_ln161_159_fu_12705_p1;
wire  signed [16:0] grp_fu_17034_p3;
wire  signed [15:0] grp_fu_10502_p2;
wire  signed [15:0] grp_fu_10549_p2;
wire  signed [15:0] grp_fu_10581_p2;
wire  signed [16:0] grp_fu_17070_p3;
wire  signed [16:0] grp_fu_17079_p3;
wire  signed [17:0] sext_ln161_173_fu_12735_p1;
wire  signed [17:0] sext_ln161_172_fu_12732_p1;
wire  signed [16:0] grp_fu_17061_p3;
wire  signed [15:0] grp_fu_10609_p2;
wire  signed [15:0] grp_fu_10656_p2;
wire  signed [15:0] grp_fu_10688_p2;
wire  signed [16:0] grp_fu_17097_p3;
wire  signed [16:0] grp_fu_17106_p3;
wire  signed [17:0] sext_ln161_186_fu_12762_p1;
wire  signed [17:0] sext_ln161_185_fu_12759_p1;
wire  signed [16:0] grp_fu_17088_p3;
wire  signed [15:0] grp_fu_10716_p2;
wire  signed [15:0] grp_fu_10763_p2;
wire  signed [15:0] grp_fu_10795_p2;
wire  signed [16:0] grp_fu_17124_p3;
wire  signed [16:0] grp_fu_17133_p3;
wire  signed [17:0] sext_ln161_199_fu_12789_p1;
wire  signed [17:0] sext_ln161_198_fu_12786_p1;
wire  signed [16:0] grp_fu_17115_p3;
wire  signed [15:0] grp_fu_10823_p2;
wire  signed [15:0] grp_fu_10870_p2;
wire  signed [16:0] grp_fu_17151_p3;
wire  signed [16:0] grp_fu_17160_p3;
wire  signed [17:0] sext_ln161_212_fu_12812_p1;
wire  signed [17:0] sext_ln161_211_fu_12809_p1;
wire  signed [17:0] add_ln161_261_fu_12815_p2;
wire  signed [16:0] grp_fu_17142_p3;
wire  signed [15:0] grp_fu_10927_p2;
wire  signed [15:0] grp_fu_10965_p2;
wire  signed [16:0] grp_fu_17178_p3;
wire  signed [16:0] grp_fu_17187_p3;
wire  signed [17:0] sext_ln161_225_fu_12839_p1;
wire  signed [17:0] sext_ln161_224_fu_12836_p1;
wire  signed [17:0] add_ln161_277_fu_12842_p2;
wire  signed [16:0] grp_fu_17169_p3;
wire  signed [15:0] grp_fu_11013_p2;
wire  signed [15:0] grp_fu_11051_p2;
wire  signed [16:0] grp_fu_17205_p3;
wire  signed [16:0] grp_fu_17214_p3;
wire  signed [17:0] sext_ln161_238_fu_12866_p1;
wire  signed [17:0] sext_ln161_237_fu_12863_p1;
wire  signed [17:0] add_ln161_293_fu_12869_p2;
wire  signed [16:0] grp_fu_17196_p3;
wire  signed [15:0] grp_fu_11099_p2;
wire  signed [15:0] grp_fu_11137_p2;
wire  signed [16:0] grp_fu_17232_p3;
wire  signed [16:0] grp_fu_17241_p3;
wire  signed [17:0] sext_ln161_251_fu_12893_p1;
wire  signed [17:0] sext_ln161_250_fu_12890_p1;
wire  signed [17:0] add_ln161_309_fu_12896_p2;
wire  signed [16:0] grp_fu_17223_p3;
wire  signed [15:0] grp_fu_11185_p2;
wire  signed [15:0] grp_fu_11223_p2;
wire  signed [16:0] grp_fu_17259_p3;
wire  signed [16:0] grp_fu_17268_p3;
wire  signed [17:0] sext_ln161_264_fu_12920_p1;
wire  signed [17:0] sext_ln161_263_fu_12917_p1;
wire  signed [17:0] add_ln161_325_fu_12923_p2;
wire  signed [16:0] grp_fu_17250_p3;
wire  signed [15:0] grp_fu_11271_p2;
wire  signed [15:0] grp_fu_11309_p2;
wire  signed [16:0] grp_fu_17286_p3;
wire  signed [16:0] grp_fu_17295_p3;
wire  signed [17:0] sext_ln161_277_fu_12947_p1;
wire  signed [17:0] sext_ln161_276_fu_12944_p1;
wire  signed [17:0] add_ln161_341_fu_12950_p2;
wire  signed [16:0] grp_fu_17277_p3;
wire  signed [15:0] grp_fu_11357_p2;
wire  signed [15:0] grp_fu_11395_p2;
wire  signed [16:0] grp_fu_17313_p3;
wire  signed [16:0] grp_fu_17322_p3;
wire  signed [17:0] sext_ln161_290_fu_12974_p1;
wire  signed [17:0] sext_ln161_289_fu_12971_p1;
wire  signed [17:0] add_ln161_357_fu_12977_p2;
wire  signed [16:0] grp_fu_17304_p3;
wire  signed [15:0] grp_fu_11443_p2;
wire  signed [15:0] grp_fu_11481_p2;
wire  signed [16:0] grp_fu_17340_p3;
wire  signed [16:0] grp_fu_17349_p3;
wire  signed [17:0] sext_ln161_303_fu_13001_p1;
wire  signed [17:0] sext_ln161_302_fu_12998_p1;
wire  signed [17:0] add_ln161_373_fu_13004_p2;
wire  signed [16:0] grp_fu_17331_p3;
wire  signed [15:0] grp_fu_11529_p2;
wire  signed [15:0] grp_fu_11567_p2;
wire  signed [16:0] grp_fu_17367_p3;
wire  signed [16:0] grp_fu_17376_p3;
wire  signed [17:0] sext_ln161_316_fu_13028_p1;
wire  signed [17:0] sext_ln161_315_fu_13025_p1;
wire  signed [17:0] add_ln161_389_fu_13031_p2;
wire  signed [16:0] grp_fu_17358_p3;
wire  signed [15:0] grp_fu_11615_p2;
wire  signed [15:0] grp_fu_11653_p2;
wire  signed [16:0] grp_fu_17394_p3;
wire  signed [16:0] grp_fu_17403_p3;
wire  signed [17:0] sext_ln161_329_fu_13055_p1;
wire  signed [17:0] sext_ln161_328_fu_13052_p1;
wire  signed [17:0] add_ln161_405_fu_13058_p2;
wire  signed [16:0] grp_fu_17385_p3;
wire  signed [15:0] grp_fu_11701_p2;
wire  signed [15:0] grp_fu_11739_p2;
wire  signed [15:0] grp_fu_11765_p2;
wire  signed [16:0] grp_fu_17421_p3;
wire  signed [16:0] grp_fu_17430_p3;
wire  signed [17:0] sext_ln161_342_fu_13086_p1;
wire  signed [17:0] sext_ln161_341_fu_13083_p1;
wire  signed [16:0] grp_fu_17412_p3;
wire  signed [15:0] grp_fu_11787_p2;
wire  signed [15:0] grp_fu_11825_p2;
wire  signed [15:0] grp_fu_11851_p2;
wire  signed [16:0] grp_fu_17448_p3;
wire  signed [16:0] grp_fu_17457_p3;
wire  signed [17:0] sext_ln161_355_fu_13113_p1;
wire  signed [17:0] sext_ln161_354_fu_13110_p1;
wire  signed [16:0] grp_fu_17439_p3;
wire  signed [15:0] grp_fu_11873_p2;
wire  signed [15:0] grp_fu_11911_p2;
wire  signed [15:0] grp_fu_11937_p2;
wire  signed [16:0] grp_fu_17475_p3;
wire  signed [16:0] grp_fu_17484_p3;
wire  signed [17:0] sext_ln161_368_fu_13140_p1;
wire  signed [17:0] sext_ln161_367_fu_13137_p1;
wire  signed [16:0] grp_fu_17466_p3;
wire  signed [15:0] grp_fu_11959_p2;
wire  signed [15:0] grp_fu_11997_p2;
wire  signed [15:0] grp_fu_12023_p2;
wire  signed [16:0] grp_fu_17502_p3;
wire  signed [16:0] grp_fu_17511_p3;
wire  signed [17:0] sext_ln161_381_fu_13167_p1;
wire  signed [17:0] sext_ln161_380_fu_13164_p1;
wire  signed [16:0] grp_fu_17493_p3;
wire  signed [15:0] grp_fu_12045_p2;
wire  signed [15:0] grp_fu_12083_p2;
wire  signed [15:0] grp_fu_12109_p2;
wire  signed [16:0] grp_fu_17529_p3;
wire  signed [16:0] grp_fu_17538_p3;
wire  signed [17:0] sext_ln161_394_fu_13194_p1;
wire  signed [17:0] sext_ln161_393_fu_13191_p1;
wire  signed [16:0] grp_fu_17520_p3;
wire  signed [15:0] grp_fu_12131_p2;
wire  signed [15:0] grp_fu_12169_p2;
wire  signed [15:0] grp_fu_12195_p2;
wire  signed [16:0] grp_fu_17556_p3;
wire  signed [16:0] grp_fu_17565_p3;
wire  signed [17:0] sext_ln161_407_fu_13221_p1;
wire  signed [17:0] sext_ln161_406_fu_13218_p1;
wire  signed [16:0] grp_fu_17547_p3;
wire   [20:0] tmp_13_fu_13493_p4;
wire   [20:0] tmp_11_fu_13475_p4;
wire   [20:0] tmp_s_fu_13457_p4;
wire   [20:0] tmp_8_fu_13439_p4;
wire   [20:0] tmp_6_fu_13421_p4;
wire   [20:0] tmp_4_fu_13403_p4;
wire   [20:0] tmp_2_fu_13385_p4;
wire   [20:0] trunc_ln142_fu_13373_p1;
wire   [20:0] tmp_1_fu_13376_p4;
wire   [20:0] tmp_3_fu_13394_p4;
wire   [20:0] tmp_5_fu_13412_p4;
wire   [20:0] tmp_7_fu_13430_p4;
wire   [20:0] tmp_9_fu_13448_p4;
wire   [20:0] tmp_10_fu_13466_p4;
wire   [20:0] tmp_12_fu_13484_p4;
wire   [20:0] tmp_14_fu_13502_p4;
wire  signed [20:0] sext_ln142_fu_13623_p1;
wire   [20:0] empty_602_fu_13616_p3;
wire   [20:0] empty_587_fu_13511_p3;
wire   [20:0] empty_601_fu_13609_p3;
wire   [20:0] empty_588_fu_13518_p3;
wire   [20:0] empty_600_fu_13602_p3;
wire   [20:0] empty_589_fu_13525_p3;
wire   [20:0] empty_599_fu_13595_p3;
wire   [20:0] empty_590_fu_13532_p3;
wire   [20:0] empty_598_fu_13588_p3;
wire   [20:0] empty_591_fu_13539_p3;
wire   [20:0] empty_597_fu_13581_p3;
wire   [20:0] empty_592_fu_13546_p3;
wire   [20:0] empty_596_fu_13574_p3;
wire   [20:0] empty_593_fu_13553_p3;
wire   [20:0] empty_595_fu_13567_p3;
wire   [20:0] empty_594_fu_13560_p3;
wire  signed [16:0] grp_fu_17574_p3;
wire  signed [16:0] grp_fu_17583_p3;
wire  signed [17:0] sext_ln161_7_fu_13778_p1;
wire  signed [17:0] sext_ln161_6_fu_13775_p1;
wire  signed [16:0] grp_fu_17600_p3;
wire  signed [16:0] grp_fu_17609_p3;
wire  signed [17:0] sext_ln161_20_fu_13790_p1;
wire  signed [17:0] sext_ln161_19_fu_13787_p1;
wire  signed [16:0] grp_fu_17626_p3;
wire  signed [16:0] grp_fu_17635_p3;
wire  signed [17:0] sext_ln161_33_fu_13802_p1;
wire  signed [17:0] sext_ln161_32_fu_13799_p1;
wire  signed [16:0] grp_fu_17652_p3;
wire  signed [16:0] grp_fu_17661_p3;
wire  signed [17:0] sext_ln161_46_fu_13814_p1;
wire  signed [17:0] sext_ln161_45_fu_13811_p1;
wire  signed [16:0] grp_fu_17678_p3;
wire  signed [16:0] grp_fu_17687_p3;
wire  signed [17:0] sext_ln161_59_fu_13826_p1;
wire  signed [17:0] sext_ln161_58_fu_13823_p1;
wire  signed [16:0] grp_fu_17704_p3;
wire  signed [16:0] grp_fu_17713_p3;
wire  signed [17:0] sext_ln161_72_fu_13838_p1;
wire  signed [17:0] sext_ln161_71_fu_13835_p1;
wire  signed [16:0] grp_fu_17730_p3;
wire  signed [16:0] grp_fu_17739_p3;
wire  signed [17:0] sext_ln161_85_fu_13850_p1;
wire  signed [17:0] sext_ln161_84_fu_13847_p1;
wire  signed [16:0] grp_fu_17756_p3;
wire  signed [16:0] grp_fu_17765_p3;
wire  signed [17:0] sext_ln161_98_fu_13862_p1;
wire  signed [17:0] sext_ln161_97_fu_13859_p1;
wire  signed [16:0] grp_fu_17782_p3;
wire  signed [16:0] grp_fu_17791_p3;
wire  signed [17:0] sext_ln161_111_fu_13874_p1;
wire  signed [17:0] sext_ln161_110_fu_13871_p1;
wire  signed [16:0] grp_fu_17808_p3;
wire  signed [16:0] grp_fu_17817_p3;
wire  signed [17:0] sext_ln161_124_fu_13886_p1;
wire  signed [17:0] sext_ln161_123_fu_13883_p1;
wire  signed [16:0] grp_fu_17834_p3;
wire  signed [16:0] grp_fu_17843_p3;
wire  signed [17:0] sext_ln161_137_fu_13898_p1;
wire  signed [17:0] sext_ln161_136_fu_13895_p1;
wire  signed [16:0] grp_fu_17860_p3;
wire  signed [16:0] grp_fu_17869_p3;
wire  signed [17:0] sext_ln161_150_fu_13910_p1;
wire  signed [17:0] sext_ln161_149_fu_13907_p1;
wire  signed [16:0] grp_fu_17886_p3;
wire  signed [16:0] grp_fu_17895_p3;
wire  signed [17:0] sext_ln161_163_fu_13922_p1;
wire  signed [17:0] sext_ln161_162_fu_13919_p1;
wire  signed [16:0] grp_fu_17912_p3;
wire  signed [16:0] grp_fu_17921_p3;
wire  signed [17:0] sext_ln161_176_fu_13934_p1;
wire  signed [17:0] sext_ln161_175_fu_13931_p1;
wire  signed [16:0] grp_fu_17938_p3;
wire  signed [16:0] grp_fu_17947_p3;
wire  signed [17:0] sext_ln161_189_fu_13946_p1;
wire  signed [17:0] sext_ln161_188_fu_13943_p1;
wire  signed [16:0] grp_fu_17964_p3;
wire  signed [16:0] grp_fu_17973_p3;
wire  signed [17:0] sext_ln161_202_fu_13958_p1;
wire  signed [17:0] sext_ln161_201_fu_13955_p1;
wire  signed [16:0] grp_fu_17990_p3;
wire  signed [16:0] grp_fu_17999_p3;
wire  signed [17:0] sext_ln161_215_fu_13970_p1;
wire  signed [17:0] sext_ln161_214_fu_13967_p1;
wire  signed [16:0] grp_fu_18008_p3;
wire  signed [16:0] grp_fu_18017_p3;
wire  signed [17:0] sext_ln161_228_fu_13982_p1;
wire  signed [17:0] sext_ln161_227_fu_13979_p1;
wire  signed [16:0] grp_fu_18026_p3;
wire  signed [16:0] grp_fu_18035_p3;
wire  signed [17:0] sext_ln161_241_fu_13994_p1;
wire  signed [17:0] sext_ln161_240_fu_13991_p1;
wire  signed [16:0] grp_fu_18044_p3;
wire  signed [16:0] grp_fu_18053_p3;
wire  signed [17:0] sext_ln161_254_fu_14006_p1;
wire  signed [17:0] sext_ln161_253_fu_14003_p1;
wire  signed [16:0] grp_fu_18062_p3;
wire  signed [16:0] grp_fu_18071_p3;
wire  signed [17:0] sext_ln161_267_fu_14018_p1;
wire  signed [17:0] sext_ln161_266_fu_14015_p1;
wire  signed [16:0] grp_fu_18080_p3;
wire  signed [16:0] grp_fu_18089_p3;
wire  signed [17:0] sext_ln161_280_fu_14030_p1;
wire  signed [17:0] sext_ln161_279_fu_14027_p1;
wire  signed [16:0] grp_fu_18098_p3;
wire  signed [16:0] grp_fu_18107_p3;
wire  signed [17:0] sext_ln161_293_fu_14042_p1;
wire  signed [17:0] sext_ln161_292_fu_14039_p1;
wire  signed [16:0] grp_fu_18116_p3;
wire  signed [16:0] grp_fu_18125_p3;
wire  signed [17:0] sext_ln161_306_fu_14054_p1;
wire  signed [17:0] sext_ln161_305_fu_14051_p1;
wire  signed [16:0] grp_fu_18134_p3;
wire  signed [16:0] grp_fu_18143_p3;
wire  signed [17:0] sext_ln161_319_fu_14066_p1;
wire  signed [17:0] sext_ln161_318_fu_14063_p1;
wire  signed [16:0] grp_fu_18152_p3;
wire  signed [16:0] grp_fu_18161_p3;
wire  signed [17:0] sext_ln161_332_fu_14078_p1;
wire  signed [17:0] sext_ln161_331_fu_14075_p1;
wire  signed [16:0] grp_fu_18170_p3;
wire  signed [16:0] grp_fu_18179_p3;
wire  signed [17:0] sext_ln161_345_fu_14090_p1;
wire  signed [17:0] sext_ln161_344_fu_14087_p1;
wire  signed [16:0] grp_fu_18196_p3;
wire  signed [16:0] grp_fu_18205_p3;
wire  signed [17:0] sext_ln161_358_fu_14102_p1;
wire  signed [17:0] sext_ln161_357_fu_14099_p1;
wire  signed [16:0] grp_fu_18222_p3;
wire  signed [16:0] grp_fu_18231_p3;
wire  signed [17:0] sext_ln161_371_fu_14114_p1;
wire  signed [17:0] sext_ln161_370_fu_14111_p1;
wire  signed [16:0] grp_fu_18248_p3;
wire  signed [16:0] grp_fu_18257_p3;
wire  signed [17:0] sext_ln161_384_fu_14126_p1;
wire  signed [17:0] sext_ln161_383_fu_14123_p1;
wire  signed [16:0] grp_fu_18274_p3;
wire  signed [16:0] grp_fu_18283_p3;
wire  signed [17:0] sext_ln161_397_fu_14138_p1;
wire  signed [17:0] sext_ln161_396_fu_14135_p1;
wire  signed [16:0] grp_fu_18300_p3;
wire  signed [16:0] grp_fu_18309_p3;
wire  signed [17:0] sext_ln161_410_fu_14150_p1;
wire  signed [17:0] sext_ln161_409_fu_14147_p1;
wire  signed [20:0] sext_ln161_2_fu_14279_p1;
wire  signed [20:0] grp_fu_18343_p3;
wire  signed [20:0] sext_ln161_5_fu_14287_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_2_fu_14282_p2;
wire  signed [17:0] grp_fu_18326_p7;
wire  signed [18:0] sext_ln161_11_fu_14299_p1;
wire  signed [18:0] sext_ln161_8_fu_14296_p1;
wire   [18:0] add_ln161_14_fu_14302_p2;
wire  signed [20:0] sext_ln161_12_fu_14308_p1;
wire   [20:0] add_ln161_6_fu_14290_p2;
wire  signed [20:0] sext_ln161_15_fu_14318_p1;
wire  signed [20:0] grp_fu_18369_p3;
wire  signed [20:0] sext_ln161_18_fu_14326_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_18_fu_14321_p2;
wire  signed [17:0] grp_fu_18352_p7;
wire  signed [18:0] sext_ln161_24_fu_14338_p1;
wire  signed [18:0] sext_ln161_21_fu_14335_p1;
wire   [18:0] add_ln161_30_fu_14341_p2;
wire  signed [20:0] sext_ln161_25_fu_14347_p1;
wire   [20:0] add_ln161_22_fu_14329_p2;
wire  signed [20:0] sext_ln161_28_fu_14357_p1;
wire  signed [20:0] grp_fu_18395_p3;
wire  signed [20:0] sext_ln161_31_fu_14365_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_34_fu_14360_p2;
wire  signed [17:0] grp_fu_18378_p7;
wire  signed [18:0] sext_ln161_37_fu_14377_p1;
wire  signed [18:0] sext_ln161_34_fu_14374_p1;
wire   [18:0] add_ln161_46_fu_14380_p2;
wire  signed [20:0] sext_ln161_38_fu_14386_p1;
wire   [20:0] add_ln161_38_fu_14368_p2;
wire  signed [20:0] sext_ln161_41_fu_14396_p1;
wire  signed [20:0] grp_fu_18421_p3;
wire  signed [20:0] sext_ln161_44_fu_14404_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_50_fu_14399_p2;
wire  signed [17:0] grp_fu_18404_p7;
wire  signed [18:0] sext_ln161_50_fu_14416_p1;
wire  signed [18:0] sext_ln161_47_fu_14413_p1;
wire   [18:0] add_ln161_62_fu_14419_p2;
wire  signed [20:0] sext_ln161_51_fu_14425_p1;
wire   [20:0] add_ln161_54_fu_14407_p2;
wire  signed [20:0] sext_ln161_54_fu_14435_p1;
wire  signed [20:0] grp_fu_18447_p3;
wire  signed [20:0] sext_ln161_57_fu_14443_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_66_fu_14438_p2;
wire  signed [17:0] grp_fu_18430_p7;
wire  signed [18:0] sext_ln161_63_fu_14455_p1;
wire  signed [18:0] sext_ln161_60_fu_14452_p1;
wire   [18:0] add_ln161_78_fu_14458_p2;
wire  signed [20:0] sext_ln161_64_fu_14464_p1;
wire   [20:0] add_ln161_70_fu_14446_p2;
wire  signed [20:0] sext_ln161_67_fu_14474_p1;
wire  signed [20:0] grp_fu_18473_p3;
wire  signed [20:0] sext_ln161_70_fu_14482_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_82_fu_14477_p2;
wire  signed [17:0] grp_fu_18456_p7;
wire  signed [18:0] sext_ln161_76_fu_14494_p1;
wire  signed [18:0] sext_ln161_73_fu_14491_p1;
wire   [18:0] add_ln161_94_fu_14497_p2;
wire  signed [20:0] sext_ln161_77_fu_14503_p1;
wire   [20:0] add_ln161_86_fu_14485_p2;
wire  signed [20:0] sext_ln161_80_fu_14513_p1;
wire  signed [20:0] grp_fu_18499_p3;
wire  signed [20:0] sext_ln161_83_fu_14521_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_98_fu_14516_p2;
wire  signed [17:0] grp_fu_18482_p7;
wire  signed [18:0] sext_ln161_89_fu_14533_p1;
wire  signed [18:0] sext_ln161_86_fu_14530_p1;
wire   [18:0] add_ln161_110_fu_14536_p2;
wire  signed [20:0] sext_ln161_90_fu_14542_p1;
wire   [20:0] add_ln161_102_fu_14524_p2;
wire  signed [20:0] sext_ln161_93_fu_14552_p1;
wire  signed [20:0] grp_fu_18525_p3;
wire  signed [20:0] sext_ln161_96_fu_14560_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_114_fu_14555_p2;
wire  signed [17:0] grp_fu_18508_p7;
wire  signed [18:0] sext_ln161_102_fu_14572_p1;
wire  signed [18:0] sext_ln161_99_fu_14569_p1;
wire   [18:0] add_ln161_126_fu_14575_p2;
wire  signed [20:0] sext_ln161_103_fu_14581_p1;
wire   [20:0] add_ln161_118_fu_14563_p2;
wire  signed [20:0] sext_ln161_106_fu_14591_p1;
wire  signed [20:0] grp_fu_18551_p3;
wire  signed [20:0] sext_ln161_109_fu_14599_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_130_fu_14594_p2;
wire  signed [17:0] grp_fu_18534_p7;
wire  signed [18:0] sext_ln161_115_fu_14611_p1;
wire  signed [18:0] sext_ln161_112_fu_14608_p1;
wire   [18:0] add_ln161_142_fu_14614_p2;
wire  signed [20:0] sext_ln161_116_fu_14620_p1;
wire   [20:0] add_ln161_134_fu_14602_p2;
wire  signed [20:0] sext_ln161_119_fu_14630_p1;
wire  signed [20:0] grp_fu_18577_p3;
wire  signed [20:0] sext_ln161_122_fu_14638_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_146_fu_14633_p2;
wire  signed [17:0] grp_fu_18560_p7;
wire  signed [18:0] sext_ln161_128_fu_14650_p1;
wire  signed [18:0] sext_ln161_125_fu_14647_p1;
wire   [18:0] add_ln161_158_fu_14653_p2;
wire  signed [20:0] sext_ln161_129_fu_14659_p1;
wire   [20:0] add_ln161_150_fu_14641_p2;
wire  signed [20:0] sext_ln161_132_fu_14669_p1;
wire  signed [20:0] grp_fu_18603_p3;
wire  signed [20:0] sext_ln161_135_fu_14677_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_162_fu_14672_p2;
wire  signed [17:0] grp_fu_18586_p7;
wire  signed [18:0] sext_ln161_141_fu_14689_p1;
wire  signed [18:0] sext_ln161_138_fu_14686_p1;
wire   [18:0] add_ln161_174_fu_14692_p2;
wire  signed [20:0] sext_ln161_142_fu_14698_p1;
wire   [20:0] add_ln161_166_fu_14680_p2;
wire  signed [20:0] sext_ln161_145_fu_14708_p1;
wire  signed [20:0] grp_fu_18629_p3;
wire  signed [20:0] sext_ln161_148_fu_14716_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_178_fu_14711_p2;
wire  signed [17:0] grp_fu_18612_p7;
wire  signed [18:0] sext_ln161_154_fu_14728_p1;
wire  signed [18:0] sext_ln161_151_fu_14725_p1;
wire   [18:0] add_ln161_190_fu_14731_p2;
wire  signed [20:0] sext_ln161_155_fu_14737_p1;
wire   [20:0] add_ln161_182_fu_14719_p2;
wire  signed [20:0] sext_ln161_158_fu_14747_p1;
wire  signed [20:0] grp_fu_18655_p3;
wire  signed [20:0] sext_ln161_161_fu_14755_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_194_fu_14750_p2;
wire  signed [17:0] grp_fu_18638_p7;
wire  signed [18:0] sext_ln161_167_fu_14767_p1;
wire  signed [18:0] sext_ln161_164_fu_14764_p1;
wire   [18:0] add_ln161_206_fu_14770_p2;
wire  signed [20:0] sext_ln161_168_fu_14776_p1;
wire   [20:0] add_ln161_198_fu_14758_p2;
wire  signed [20:0] sext_ln161_171_fu_14786_p1;
wire  signed [20:0] grp_fu_18681_p3;
wire  signed [20:0] sext_ln161_174_fu_14794_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_210_fu_14789_p2;
wire  signed [17:0] grp_fu_18664_p7;
wire  signed [18:0] sext_ln161_180_fu_14806_p1;
wire  signed [18:0] sext_ln161_177_fu_14803_p1;
wire   [18:0] add_ln161_222_fu_14809_p2;
wire  signed [20:0] sext_ln161_181_fu_14815_p1;
wire   [20:0] add_ln161_214_fu_14797_p2;
wire  signed [20:0] sext_ln161_184_fu_14825_p1;
wire  signed [20:0] grp_fu_18707_p3;
wire  signed [20:0] sext_ln161_187_fu_14833_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_226_fu_14828_p2;
wire  signed [17:0] grp_fu_18690_p7;
wire  signed [18:0] sext_ln161_193_fu_14845_p1;
wire  signed [18:0] sext_ln161_190_fu_14842_p1;
wire   [18:0] add_ln161_238_fu_14848_p2;
wire  signed [20:0] sext_ln161_194_fu_14854_p1;
wire   [20:0] add_ln161_230_fu_14836_p2;
wire  signed [20:0] sext_ln161_197_fu_14864_p1;
wire  signed [20:0] grp_fu_18733_p3;
wire  signed [20:0] sext_ln161_200_fu_14872_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_242_fu_14867_p2;
wire  signed [17:0] grp_fu_18716_p7;
wire  signed [18:0] sext_ln161_206_fu_14884_p1;
wire  signed [18:0] sext_ln161_203_fu_14881_p1;
wire   [18:0] add_ln161_254_fu_14887_p2;
wire  signed [20:0] sext_ln161_207_fu_14893_p1;
wire   [20:0] add_ln161_246_fu_14875_p2;
wire  signed [17:0] grp_fu_18742_p7;
wire  signed [18:0] sext_ln161_219_fu_14906_p1;
wire  signed [18:0] sext_ln161_216_fu_14903_p1;
wire   [18:0] add_ln161_270_fu_14909_p2;
wire  signed [20:0] sext_ln161_220_fu_14915_p1;
wire  signed [20:0] grp_fu_18759_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_262_fu_14919_p2;
wire   [20:0] select_ln132_15_fu_14273_p3;
wire  signed [17:0] grp_fu_18774_p7;
wire  signed [18:0] sext_ln161_232_fu_14933_p1;
wire  signed [18:0] sext_ln161_229_fu_14930_p1;
wire   [18:0] add_ln161_286_fu_14936_p2;
wire  signed [20:0] sext_ln161_233_fu_14942_p1;
wire  signed [20:0] grp_fu_18791_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_278_fu_14946_p2;
wire   [20:0] select_ln132_14_fu_14267_p3;
wire  signed [17:0] grp_fu_18806_p7;
wire  signed [18:0] sext_ln161_245_fu_14960_p1;
wire  signed [18:0] sext_ln161_242_fu_14957_p1;
wire   [18:0] add_ln161_302_fu_14963_p2;
wire  signed [20:0] sext_ln161_246_fu_14969_p1;
wire  signed [20:0] grp_fu_18823_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_294_fu_14973_p2;
wire   [20:0] select_ln132_13_fu_14261_p3;
wire  signed [17:0] grp_fu_18838_p7;
wire  signed [18:0] sext_ln161_258_fu_14987_p1;
wire  signed [18:0] sext_ln161_255_fu_14984_p1;
wire   [18:0] add_ln161_318_fu_14990_p2;
wire  signed [20:0] sext_ln161_259_fu_14996_p1;
wire  signed [20:0] grp_fu_18855_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_310_fu_15000_p2;
wire   [20:0] select_ln132_12_fu_14255_p3;
wire  signed [17:0] grp_fu_18870_p7;
wire  signed [18:0] sext_ln161_271_fu_15014_p1;
wire  signed [18:0] sext_ln161_268_fu_15011_p1;
wire   [18:0] add_ln161_334_fu_15017_p2;
wire  signed [20:0] sext_ln161_272_fu_15023_p1;
wire  signed [20:0] grp_fu_18887_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_326_fu_15027_p2;
wire   [20:0] select_ln132_11_fu_14249_p3;
wire  signed [17:0] grp_fu_18902_p7;
wire  signed [18:0] sext_ln161_284_fu_15041_p1;
wire  signed [18:0] sext_ln161_281_fu_15038_p1;
wire   [18:0] add_ln161_350_fu_15044_p2;
wire  signed [20:0] sext_ln161_285_fu_15050_p1;
wire  signed [20:0] grp_fu_18919_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_342_fu_15054_p2;
wire   [20:0] select_ln132_10_fu_14243_p3;
wire  signed [17:0] grp_fu_18934_p7;
wire  signed [18:0] sext_ln161_297_fu_15068_p1;
wire  signed [18:0] sext_ln161_294_fu_15065_p1;
wire   [18:0] add_ln161_366_fu_15071_p2;
wire  signed [20:0] sext_ln161_298_fu_15077_p1;
wire  signed [20:0] grp_fu_18951_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_358_fu_15081_p2;
wire   [20:0] select_ln132_9_fu_14237_p3;
wire  signed [17:0] grp_fu_18966_p7;
wire  signed [18:0] sext_ln161_310_fu_15095_p1;
wire  signed [18:0] sext_ln161_307_fu_15092_p1;
wire   [18:0] add_ln161_382_fu_15098_p2;
wire  signed [20:0] sext_ln161_311_fu_15104_p1;
wire  signed [20:0] grp_fu_18983_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_374_fu_15108_p2;
wire   [20:0] select_ln132_8_fu_14231_p3;
wire  signed [17:0] grp_fu_18998_p7;
wire  signed [18:0] sext_ln161_323_fu_15122_p1;
wire  signed [18:0] sext_ln161_320_fu_15119_p1;
wire   [18:0] add_ln161_398_fu_15125_p2;
wire  signed [20:0] sext_ln161_324_fu_15131_p1;
wire  signed [20:0] grp_fu_19015_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_390_fu_15135_p2;
wire   [20:0] select_ln132_7_fu_14225_p3;
wire  signed [17:0] grp_fu_19030_p7;
wire  signed [18:0] sext_ln161_336_fu_15149_p1;
wire  signed [18:0] sext_ln161_333_fu_15146_p1;
wire   [18:0] add_ln161_414_fu_15152_p2;
wire  signed [20:0] sext_ln161_337_fu_15158_p1;
wire  signed [20:0] grp_fu_19047_p7;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_406_fu_15162_p2;
wire   [20:0] select_ln132_6_fu_14219_p3;
wire  signed [20:0] sext_ln161_340_fu_15173_p1;
wire  signed [20:0] grp_fu_19079_p3;
wire  signed [20:0] sext_ln161_343_fu_15181_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_418_fu_15176_p2;
wire  signed [17:0] grp_fu_19062_p7;
wire  signed [18:0] sext_ln161_349_fu_15193_p1;
wire  signed [18:0] sext_ln161_346_fu_15190_p1;
wire   [18:0] add_ln161_430_fu_15196_p2;
wire  signed [20:0] sext_ln161_350_fu_15202_p1;
wire   [20:0] add_ln161_422_fu_15184_p2;
wire  signed [20:0] sext_ln161_353_fu_15212_p1;
wire  signed [20:0] grp_fu_19105_p3;
wire  signed [20:0] sext_ln161_356_fu_15220_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_434_fu_15215_p2;
wire  signed [17:0] grp_fu_19088_p7;
wire  signed [18:0] sext_ln161_362_fu_15232_p1;
wire  signed [18:0] sext_ln161_359_fu_15229_p1;
wire   [18:0] add_ln161_446_fu_15235_p2;
wire  signed [20:0] sext_ln161_363_fu_15241_p1;
wire   [20:0] add_ln161_438_fu_15223_p2;
wire  signed [20:0] sext_ln161_366_fu_15251_p1;
wire  signed [20:0] grp_fu_19131_p3;
wire  signed [20:0] sext_ln161_369_fu_15259_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_450_fu_15254_p2;
wire  signed [17:0] grp_fu_19114_p7;
wire  signed [18:0] sext_ln161_375_fu_15271_p1;
wire  signed [18:0] sext_ln161_372_fu_15268_p1;
wire   [18:0] add_ln161_462_fu_15274_p2;
wire  signed [20:0] sext_ln161_376_fu_15280_p1;
wire   [20:0] add_ln161_454_fu_15262_p2;
wire  signed [20:0] sext_ln161_379_fu_15290_p1;
wire  signed [20:0] grp_fu_19157_p3;
wire  signed [20:0] sext_ln161_382_fu_15298_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_466_fu_15293_p2;
wire  signed [17:0] grp_fu_19140_p7;
wire  signed [18:0] sext_ln161_388_fu_15310_p1;
wire  signed [18:0] sext_ln161_385_fu_15307_p1;
wire   [18:0] add_ln161_478_fu_15313_p2;
wire  signed [20:0] sext_ln161_389_fu_15319_p1;
wire   [20:0] add_ln161_470_fu_15301_p2;
wire  signed [20:0] sext_ln161_392_fu_15329_p1;
wire  signed [20:0] grp_fu_19183_p3;
wire  signed [20:0] sext_ln161_395_fu_15337_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_482_fu_15332_p2;
wire  signed [17:0] grp_fu_19166_p7;
wire  signed [18:0] sext_ln161_401_fu_15349_p1;
wire  signed [18:0] sext_ln161_398_fu_15346_p1;
wire   [18:0] add_ln161_494_fu_15352_p2;
wire  signed [20:0] sext_ln161_402_fu_15358_p1;
wire   [20:0] add_ln161_486_fu_15340_p2;
wire  signed [20:0] sext_ln161_405_fu_15368_p1;
wire  signed [20:0] grp_fu_19209_p3;
wire  signed [20:0] sext_ln161_408_fu_15376_p1;
(* use_dsp48 = "no" *) wire   [20:0] add_ln161_498_fu_15371_p2;
wire  signed [17:0] grp_fu_19192_p7;
wire  signed [18:0] sext_ln161_414_fu_15388_p1;
wire  signed [18:0] sext_ln161_411_fu_15385_p1;
wire   [18:0] add_ln161_510_fu_15391_p2;
wire  signed [20:0] sext_ln161_415_fu_15397_p1;
wire   [20:0] add_ln161_502_fu_15379_p2;
wire   [15:0] tmp_318_fu_15695_p4;
wire  signed [20:0] sext_ln178_fu_15705_p1;
wire   [20:0] tmp_300_fu_15685_p4;
wire   [20:0] tmp_299_fu_15675_p4;
wire   [20:0] tmp_298_fu_15665_p4;
wire   [20:0] tmp_297_fu_15655_p4;
wire   [20:0] tmp_296_fu_15645_p4;
wire   [20:0] tmp_295_fu_15635_p4;
wire   [20:0] tmp_294_fu_15625_p4;
wire   [20:0] tmp_293_fu_15615_p4;
wire   [20:0] tmp_292_fu_15605_p4;
wire   [20:0] tmp_291_fu_15595_p4;
wire   [20:0] tmp_290_fu_15585_p4;
wire   [20:0] tmp_289_fu_15575_p4;
wire   [20:0] tmp_288_fu_15565_p4;
wire   [20:0] tmp_287_fu_15555_p4;
wire   [20:0] trunc_ln178_fu_15551_p1;
wire   [20:0] add_ln188_fu_16157_p2;
wire   [20:0] add_ln188_1_fu_16172_p2;
wire   [20:0] add_ln188_16_fu_16247_p2;
wire   [20:0] add_ln188_17_fu_16252_p2;
wire   [20:0] add_ln188_18_fu_16257_p2;
wire   [20:0] add_ln188_19_fu_16262_p2;
wire   [20:0] add_ln188_20_fu_16267_p2;
wire   [20:0] add_ln188_21_fu_16272_p2;
wire   [20:0] add_ln188_22_fu_16277_p2;
wire   [20:0] add_ln188_23_fu_16282_p2;
wire   [20:0] add_ln188_24_fu_16287_p2;
wire   [20:0] add_ln188_25_fu_16292_p2;
wire   [20:0] add_ln188_26_fu_16297_p2;
wire   [20:0] add_ln188_27_fu_16302_p2;
wire   [20:0] add_ln188_28_fu_16307_p2;
wire   [20:0] add_ln188_29_fu_16312_p2;
wire   [20:0] add_ln188_30_fu_16317_p2;
wire   [20:0] add_ln188_31_fu_16322_p2;
wire   [20:0] add_ln188_2_fu_16177_p2;
wire   [20:0] add_ln188_3_fu_16182_p2;
wire   [20:0] add_ln188_4_fu_16187_p2;
wire   [20:0] add_ln188_5_fu_16192_p2;
wire   [20:0] add_ln188_6_fu_16197_p2;
wire   [20:0] add_ln188_7_fu_16202_p2;
wire   [20:0] add_ln188_8_fu_16207_p2;
wire   [20:0] add_ln188_9_fu_16212_p2;
wire   [20:0] add_ln188_10_fu_16217_p2;
wire   [20:0] add_ln188_11_fu_16222_p2;
wire   [20:0] add_ln188_12_fu_16227_p2;
wire   [20:0] add_ln188_13_fu_16232_p2;
wire   [20:0] add_ln188_14_fu_16237_p2;
wire   [20:0] add_ln188_15_fu_16242_p2;
wire   [12:0] trunc_ln191_15_fu_16487_p4;
wire   [12:0] trunc_ln191_14_fu_16477_p4;
wire   [12:0] trunc_ln191_13_fu_16467_p4;
wire   [12:0] trunc_ln191_12_fu_16457_p4;
wire   [12:0] trunc_ln191_11_fu_16447_p4;
wire   [12:0] trunc_ln191_10_fu_16437_p4;
wire   [12:0] trunc_ln191_s_fu_16427_p4;
wire   [12:0] trunc_ln191_9_fu_16417_p4;
wire   [12:0] trunc_ln191_8_fu_16407_p4;
wire   [12:0] trunc_ln191_7_fu_16397_p4;
wire   [12:0] trunc_ln191_6_fu_16387_p4;
wire   [12:0] trunc_ln191_5_fu_16377_p4;
wire   [12:0] trunc_ln191_4_fu_16367_p4;
wire   [12:0] trunc_ln191_3_fu_16357_p4;
wire   [12:0] trunc_ln191_2_fu_16347_p4;
wire   [12:0] trunc_ln191_1_fu_16337_p4;
wire   [12:0] tmp_316_fu_16627_p4;
wire   [12:0] tmp_315_fu_16617_p4;
wire   [12:0] tmp_314_fu_16607_p4;
wire   [12:0] tmp_313_fu_16597_p4;
wire   [12:0] tmp_312_fu_16587_p4;
wire   [12:0] tmp_311_fu_16577_p4;
wire   [12:0] tmp_310_fu_16567_p4;
wire   [12:0] tmp_309_fu_16557_p4;
wire   [12:0] tmp_308_fu_16547_p4;
wire   [12:0] tmp_307_fu_16537_p4;
wire   [12:0] tmp_306_fu_16527_p4;
wire   [12:0] tmp_305_fu_16517_p4;
wire   [12:0] tmp_304_fu_16507_p4;
wire   [12:0] tmp_302_fu_16497_p4;
wire   [12:0] tmp_319_fu_16327_p4;
wire   [12:0] trunc_ln1_fu_16162_p4;
wire  signed [7:0] grp_fu_16710_p0;
wire  signed [7:0] grp_fu_16710_p1;
wire  signed [7:0] grp_fu_16719_p0;
wire  signed [7:0] grp_fu_16719_p1;
wire  signed [7:0] grp_fu_16728_p0;
wire  signed [7:0] grp_fu_16728_p1;
wire  signed [7:0] grp_fu_16737_p0;
wire  signed [7:0] grp_fu_16737_p1;
wire  signed [7:0] grp_fu_16746_p0;
wire  signed [7:0] grp_fu_16746_p1;
wire  signed [7:0] grp_fu_16755_p0;
wire  signed [7:0] grp_fu_16755_p1;
wire  signed [7:0] grp_fu_16764_p0;
wire  signed [7:0] grp_fu_16764_p1;
wire  signed [7:0] grp_fu_16773_p0;
wire  signed [7:0] grp_fu_16773_p1;
wire  signed [7:0] grp_fu_16782_p0;
wire  signed [7:0] grp_fu_16782_p1;
wire  signed [7:0] grp_fu_16791_p0;
wire  signed [7:0] grp_fu_16791_p1;
wire  signed [7:0] grp_fu_16800_p0;
wire  signed [7:0] grp_fu_16800_p1;
wire  signed [7:0] grp_fu_16809_p0;
wire  signed [7:0] grp_fu_16809_p1;
wire  signed [7:0] grp_fu_16818_p0;
wire  signed [7:0] grp_fu_16818_p1;
wire  signed [7:0] grp_fu_16827_p0;
wire  signed [7:0] grp_fu_16827_p1;
wire  signed [7:0] grp_fu_16836_p0;
wire  signed [7:0] grp_fu_16836_p1;
wire  signed [7:0] grp_fu_16845_p0;
wire  signed [7:0] grp_fu_16845_p1;
wire  signed [7:0] grp_fu_16854_p0;
wire  signed [7:0] grp_fu_16854_p1;
wire  signed [7:0] grp_fu_16863_p0;
wire  signed [7:0] grp_fu_16863_p1;
wire  signed [7:0] grp_fu_16872_p0;
wire  signed [7:0] grp_fu_16872_p1;
wire  signed [7:0] grp_fu_16881_p0;
wire  signed [7:0] grp_fu_16881_p1;
wire  signed [7:0] grp_fu_16890_p0;
wire  signed [7:0] grp_fu_16890_p1;
wire  signed [7:0] grp_fu_16899_p0;
wire  signed [7:0] grp_fu_16899_p1;
wire  signed [7:0] grp_fu_16908_p0;
wire  signed [7:0] grp_fu_16908_p1;
wire  signed [7:0] grp_fu_16917_p0;
wire  signed [7:0] grp_fu_16917_p1;
wire  signed [7:0] grp_fu_16926_p0;
wire  signed [7:0] grp_fu_16926_p1;
wire  signed [7:0] grp_fu_16935_p0;
wire  signed [7:0] grp_fu_16935_p1;
wire  signed [7:0] grp_fu_16944_p0;
wire  signed [7:0] grp_fu_16944_p1;
wire  signed [7:0] grp_fu_16953_p0;
wire  signed [7:0] grp_fu_16953_p1;
wire  signed [7:0] grp_fu_16962_p0;
wire  signed [7:0] grp_fu_16962_p1;
wire  signed [7:0] grp_fu_16971_p0;
wire  signed [7:0] grp_fu_16971_p1;
wire  signed [7:0] grp_fu_16980_p0;
wire  signed [7:0] grp_fu_16980_p1;
wire  signed [7:0] grp_fu_16989_p0;
wire  signed [7:0] grp_fu_16989_p1;
wire  signed [7:0] grp_fu_16998_p0;
wire  signed [7:0] grp_fu_16998_p1;
wire  signed [7:0] grp_fu_17007_p0;
wire  signed [7:0] grp_fu_17007_p1;
wire  signed [7:0] grp_fu_17016_p0;
wire  signed [7:0] grp_fu_17016_p1;
wire  signed [7:0] grp_fu_17025_p0;
wire  signed [7:0] grp_fu_17025_p1;
wire  signed [7:0] grp_fu_17034_p0;
wire  signed [7:0] grp_fu_17034_p1;
wire  signed [7:0] grp_fu_17043_p0;
wire  signed [7:0] grp_fu_17043_p1;
wire  signed [7:0] grp_fu_17052_p0;
wire  signed [7:0] grp_fu_17052_p1;
wire  signed [7:0] grp_fu_17061_p0;
wire  signed [7:0] grp_fu_17061_p1;
wire  signed [7:0] grp_fu_17070_p0;
wire  signed [7:0] grp_fu_17070_p1;
wire  signed [7:0] grp_fu_17079_p0;
wire  signed [7:0] grp_fu_17079_p1;
wire  signed [7:0] grp_fu_17088_p0;
wire  signed [7:0] grp_fu_17088_p1;
wire  signed [7:0] grp_fu_17097_p0;
wire  signed [7:0] grp_fu_17097_p1;
wire  signed [7:0] grp_fu_17106_p0;
wire  signed [7:0] grp_fu_17106_p1;
wire  signed [7:0] grp_fu_17115_p0;
wire  signed [7:0] grp_fu_17115_p1;
wire  signed [7:0] grp_fu_17124_p0;
wire  signed [7:0] grp_fu_17124_p1;
wire  signed [7:0] grp_fu_17133_p0;
wire  signed [7:0] grp_fu_17133_p1;
wire  signed [7:0] grp_fu_17142_p0;
wire  signed [7:0] grp_fu_17142_p1;
wire  signed [7:0] grp_fu_17151_p0;
wire  signed [7:0] grp_fu_17151_p1;
wire  signed [7:0] grp_fu_17160_p0;
wire  signed [7:0] grp_fu_17160_p1;
wire  signed [7:0] grp_fu_17169_p0;
wire  signed [7:0] grp_fu_17169_p1;
wire  signed [7:0] grp_fu_17178_p0;
wire  signed [7:0] grp_fu_17178_p1;
wire  signed [7:0] grp_fu_17187_p0;
wire  signed [7:0] grp_fu_17187_p1;
wire  signed [7:0] grp_fu_17196_p0;
wire  signed [7:0] grp_fu_17196_p1;
wire  signed [7:0] grp_fu_17205_p0;
wire  signed [7:0] grp_fu_17205_p1;
wire  signed [7:0] grp_fu_17214_p0;
wire  signed [7:0] grp_fu_17214_p1;
wire  signed [7:0] grp_fu_17223_p0;
wire  signed [7:0] grp_fu_17223_p1;
wire  signed [7:0] grp_fu_17232_p0;
wire  signed [7:0] grp_fu_17232_p1;
wire  signed [7:0] grp_fu_17241_p0;
wire  signed [7:0] grp_fu_17241_p1;
wire  signed [7:0] grp_fu_17250_p0;
wire  signed [7:0] grp_fu_17250_p1;
wire  signed [7:0] grp_fu_17259_p0;
wire  signed [7:0] grp_fu_17259_p1;
wire  signed [7:0] grp_fu_17268_p0;
wire  signed [7:0] grp_fu_17268_p1;
wire  signed [7:0] grp_fu_17277_p0;
wire  signed [7:0] grp_fu_17277_p1;
wire  signed [7:0] grp_fu_17286_p0;
wire  signed [7:0] grp_fu_17286_p1;
wire  signed [7:0] grp_fu_17295_p0;
wire  signed [7:0] grp_fu_17295_p1;
wire  signed [7:0] grp_fu_17304_p0;
wire  signed [7:0] grp_fu_17304_p1;
wire  signed [7:0] grp_fu_17313_p0;
wire  signed [7:0] grp_fu_17313_p1;
wire  signed [7:0] grp_fu_17322_p0;
wire  signed [7:0] grp_fu_17322_p1;
wire  signed [7:0] grp_fu_17331_p0;
wire  signed [7:0] grp_fu_17331_p1;
wire  signed [7:0] grp_fu_17340_p0;
wire  signed [7:0] grp_fu_17340_p1;
wire  signed [7:0] grp_fu_17349_p0;
wire  signed [7:0] grp_fu_17349_p1;
wire  signed [7:0] grp_fu_17358_p0;
wire  signed [7:0] grp_fu_17358_p1;
wire  signed [7:0] grp_fu_17367_p0;
wire  signed [7:0] grp_fu_17367_p1;
wire  signed [7:0] grp_fu_17376_p0;
wire  signed [7:0] grp_fu_17376_p1;
wire  signed [7:0] grp_fu_17385_p0;
wire  signed [7:0] grp_fu_17385_p1;
wire  signed [7:0] grp_fu_17394_p0;
wire  signed [7:0] grp_fu_17394_p1;
wire  signed [7:0] grp_fu_17403_p0;
wire  signed [7:0] grp_fu_17403_p1;
wire  signed [7:0] grp_fu_17412_p0;
wire  signed [7:0] grp_fu_17412_p1;
wire  signed [7:0] grp_fu_17421_p0;
wire  signed [7:0] grp_fu_17421_p1;
wire  signed [7:0] grp_fu_17430_p0;
wire  signed [7:0] grp_fu_17430_p1;
wire  signed [7:0] grp_fu_17439_p0;
wire  signed [7:0] grp_fu_17439_p1;
wire  signed [7:0] grp_fu_17448_p0;
wire  signed [7:0] grp_fu_17448_p1;
wire  signed [7:0] grp_fu_17457_p0;
wire  signed [7:0] grp_fu_17457_p1;
wire  signed [7:0] grp_fu_17466_p0;
wire  signed [7:0] grp_fu_17466_p1;
wire  signed [7:0] grp_fu_17475_p0;
wire  signed [7:0] grp_fu_17475_p1;
wire  signed [7:0] grp_fu_17484_p0;
wire  signed [7:0] grp_fu_17484_p1;
wire  signed [7:0] grp_fu_17493_p0;
wire  signed [7:0] grp_fu_17493_p1;
wire  signed [7:0] grp_fu_17502_p0;
wire  signed [7:0] grp_fu_17502_p1;
wire  signed [7:0] grp_fu_17511_p0;
wire  signed [7:0] grp_fu_17511_p1;
wire  signed [7:0] grp_fu_17520_p0;
wire  signed [7:0] grp_fu_17520_p1;
wire  signed [7:0] grp_fu_17529_p0;
wire  signed [7:0] grp_fu_17529_p1;
wire  signed [7:0] grp_fu_17538_p0;
wire  signed [7:0] grp_fu_17538_p1;
wire  signed [7:0] grp_fu_17547_p0;
wire  signed [7:0] grp_fu_17547_p1;
wire  signed [7:0] grp_fu_17556_p0;
wire  signed [7:0] grp_fu_17556_p1;
wire  signed [7:0] grp_fu_17565_p0;
wire  signed [7:0] grp_fu_17565_p1;
wire  signed [7:0] grp_fu_17574_p0;
wire  signed [7:0] grp_fu_17574_p1;
wire  signed [7:0] grp_fu_17583_p0;
wire  signed [7:0] grp_fu_17583_p1;
wire  signed [7:0] grp_fu_17592_p1;
wire  signed [7:0] grp_fu_17600_p0;
wire  signed [7:0] grp_fu_17600_p1;
wire  signed [7:0] grp_fu_17609_p0;
wire  signed [7:0] grp_fu_17609_p1;
wire  signed [7:0] grp_fu_17618_p1;
wire  signed [7:0] grp_fu_17626_p0;
wire  signed [7:0] grp_fu_17626_p1;
wire  signed [7:0] grp_fu_17635_p0;
wire  signed [7:0] grp_fu_17635_p1;
wire  signed [7:0] grp_fu_17644_p1;
wire  signed [7:0] grp_fu_17652_p0;
wire  signed [7:0] grp_fu_17652_p1;
wire  signed [7:0] grp_fu_17661_p0;
wire  signed [7:0] grp_fu_17661_p1;
wire  signed [7:0] grp_fu_17670_p1;
wire  signed [7:0] grp_fu_17678_p0;
wire  signed [7:0] grp_fu_17678_p1;
wire  signed [7:0] grp_fu_17687_p0;
wire  signed [7:0] grp_fu_17687_p1;
wire  signed [7:0] grp_fu_17696_p1;
wire  signed [7:0] grp_fu_17704_p0;
wire  signed [7:0] grp_fu_17704_p1;
wire  signed [7:0] grp_fu_17713_p0;
wire  signed [7:0] grp_fu_17713_p1;
wire  signed [7:0] grp_fu_17722_p1;
wire  signed [7:0] grp_fu_17730_p0;
wire  signed [7:0] grp_fu_17730_p1;
wire  signed [7:0] grp_fu_17739_p0;
wire  signed [7:0] grp_fu_17739_p1;
wire  signed [7:0] grp_fu_17748_p1;
wire  signed [7:0] grp_fu_17756_p0;
wire  signed [7:0] grp_fu_17756_p1;
wire  signed [7:0] grp_fu_17765_p0;
wire  signed [7:0] grp_fu_17765_p1;
wire  signed [7:0] grp_fu_17774_p1;
wire  signed [7:0] grp_fu_17782_p0;
wire  signed [7:0] grp_fu_17782_p1;
wire  signed [7:0] grp_fu_17791_p0;
wire  signed [7:0] grp_fu_17791_p1;
wire  signed [7:0] grp_fu_17800_p1;
wire  signed [7:0] grp_fu_17808_p0;
wire  signed [7:0] grp_fu_17808_p1;
wire  signed [7:0] grp_fu_17817_p0;
wire  signed [7:0] grp_fu_17817_p1;
wire  signed [7:0] grp_fu_17826_p1;
wire  signed [7:0] grp_fu_17834_p0;
wire  signed [7:0] grp_fu_17834_p1;
wire  signed [7:0] grp_fu_17843_p0;
wire  signed [7:0] grp_fu_17843_p1;
wire  signed [7:0] grp_fu_17852_p0;
wire  signed [7:0] grp_fu_17852_p1;
wire  signed [7:0] grp_fu_17860_p0;
wire  signed [7:0] grp_fu_17860_p1;
wire  signed [7:0] grp_fu_17869_p0;
wire  signed [7:0] grp_fu_17869_p1;
wire  signed [7:0] grp_fu_17878_p0;
wire  signed [7:0] grp_fu_17878_p1;
wire  signed [7:0] grp_fu_17886_p0;
wire  signed [7:0] grp_fu_17886_p1;
wire  signed [7:0] grp_fu_17895_p0;
wire  signed [7:0] grp_fu_17895_p1;
wire  signed [7:0] grp_fu_17904_p0;
wire  signed [7:0] grp_fu_17904_p1;
wire  signed [7:0] grp_fu_17912_p0;
wire  signed [7:0] grp_fu_17912_p1;
wire  signed [7:0] grp_fu_17921_p0;
wire  signed [7:0] grp_fu_17921_p1;
wire  signed [7:0] grp_fu_17930_p0;
wire  signed [7:0] grp_fu_17930_p1;
wire  signed [7:0] grp_fu_17938_p0;
wire  signed [7:0] grp_fu_17938_p1;
wire  signed [7:0] grp_fu_17947_p0;
wire  signed [7:0] grp_fu_17947_p1;
wire  signed [7:0] grp_fu_17956_p0;
wire  signed [7:0] grp_fu_17956_p1;
wire  signed [7:0] grp_fu_17964_p0;
wire  signed [7:0] grp_fu_17964_p1;
wire  signed [7:0] grp_fu_17973_p0;
wire  signed [7:0] grp_fu_17973_p1;
wire  signed [7:0] grp_fu_17982_p0;
wire  signed [7:0] grp_fu_17982_p1;
wire  signed [7:0] grp_fu_17990_p0;
wire  signed [7:0] grp_fu_17990_p1;
wire  signed [7:0] grp_fu_17999_p0;
wire  signed [7:0] grp_fu_17999_p1;
wire  signed [7:0] grp_fu_18008_p0;
wire  signed [7:0] grp_fu_18008_p1;
wire  signed [7:0] grp_fu_18017_p0;
wire  signed [7:0] grp_fu_18017_p1;
wire  signed [7:0] grp_fu_18026_p0;
wire  signed [7:0] grp_fu_18026_p1;
wire  signed [7:0] grp_fu_18035_p0;
wire  signed [7:0] grp_fu_18035_p1;
wire  signed [7:0] grp_fu_18044_p0;
wire  signed [7:0] grp_fu_18044_p1;
wire  signed [7:0] grp_fu_18053_p0;
wire  signed [7:0] grp_fu_18053_p1;
wire  signed [7:0] grp_fu_18062_p0;
wire  signed [7:0] grp_fu_18062_p1;
wire  signed [7:0] grp_fu_18071_p0;
wire  signed [7:0] grp_fu_18071_p1;
wire  signed [7:0] grp_fu_18080_p0;
wire  signed [7:0] grp_fu_18080_p1;
wire  signed [7:0] grp_fu_18089_p0;
wire  signed [7:0] grp_fu_18089_p1;
wire  signed [7:0] grp_fu_18098_p0;
wire  signed [7:0] grp_fu_18098_p1;
wire  signed [7:0] grp_fu_18107_p0;
wire  signed [7:0] grp_fu_18107_p1;
wire  signed [7:0] grp_fu_18116_p0;
wire  signed [7:0] grp_fu_18116_p1;
wire  signed [7:0] grp_fu_18125_p0;
wire  signed [7:0] grp_fu_18125_p1;
wire  signed [7:0] grp_fu_18134_p0;
wire  signed [7:0] grp_fu_18134_p1;
wire  signed [7:0] grp_fu_18143_p0;
wire  signed [7:0] grp_fu_18143_p1;
wire  signed [7:0] grp_fu_18152_p0;
wire  signed [7:0] grp_fu_18152_p1;
wire  signed [7:0] grp_fu_18161_p0;
wire  signed [7:0] grp_fu_18161_p1;
wire  signed [7:0] grp_fu_18170_p0;
wire  signed [7:0] grp_fu_18170_p1;
wire  signed [7:0] grp_fu_18179_p0;
wire  signed [7:0] grp_fu_18179_p1;
wire  signed [7:0] grp_fu_18188_p0;
wire  signed [7:0] grp_fu_18188_p1;
wire  signed [7:0] grp_fu_18196_p0;
wire  signed [7:0] grp_fu_18196_p1;
wire  signed [7:0] grp_fu_18205_p0;
wire  signed [7:0] grp_fu_18205_p1;
wire  signed [7:0] grp_fu_18214_p0;
wire  signed [7:0] grp_fu_18214_p1;
wire  signed [7:0] grp_fu_18222_p0;
wire  signed [7:0] grp_fu_18222_p1;
wire  signed [7:0] grp_fu_18231_p0;
wire  signed [7:0] grp_fu_18231_p1;
wire  signed [7:0] grp_fu_18240_p0;
wire  signed [7:0] grp_fu_18240_p1;
wire  signed [7:0] grp_fu_18248_p0;
wire  signed [7:0] grp_fu_18248_p1;
wire  signed [7:0] grp_fu_18257_p0;
wire  signed [7:0] grp_fu_18257_p1;
wire  signed [7:0] grp_fu_18266_p0;
wire  signed [7:0] grp_fu_18266_p1;
wire  signed [7:0] grp_fu_18274_p0;
wire  signed [7:0] grp_fu_18274_p1;
wire  signed [7:0] grp_fu_18283_p0;
wire  signed [7:0] grp_fu_18283_p1;
wire  signed [7:0] grp_fu_18292_p0;
wire  signed [7:0] grp_fu_18292_p1;
wire  signed [7:0] grp_fu_18300_p0;
wire  signed [7:0] grp_fu_18300_p1;
wire  signed [7:0] grp_fu_18309_p0;
wire  signed [7:0] grp_fu_18309_p1;
wire  signed [7:0] grp_fu_18318_p0;
wire  signed [7:0] grp_fu_18318_p1;
wire  signed [7:0] grp_fu_18326_p0;
wire  signed [15:0] sext_ln159_11_fu_9106_p1;
wire  signed [7:0] grp_fu_18326_p1;
wire  signed [15:0] sext_ln159_10_fu_9103_p1;
wire  signed [7:0] grp_fu_18326_p2;
wire  signed [15:0] sext_ln159_31_fu_9196_p1;
wire  signed [7:0] grp_fu_18326_p3;
wire  signed [15:0] sext_ln159_30_fu_9193_p1;
wire  signed [7:0] grp_fu_18326_p4;
wire  signed [15:0] sext_ln159_13_fu_9120_p1;
wire  signed [7:0] grp_fu_18326_p5;
wire  signed [15:0] sext_ln159_12_fu_9117_p1;
wire  signed [7:0] grp_fu_18343_p0;
wire  signed [7:0] grp_fu_18343_p1;
wire  signed [20:0] grp_fu_18343_p2;
wire  signed [7:0] grp_fu_18352_p0;
wire  signed [15:0] sext_ln159_37_fu_9228_p1;
wire  signed [7:0] grp_fu_18352_p1;
wire  signed [7:0] grp_fu_18352_p2;
wire  signed [15:0] sext_ln159_47_fu_9303_p1;
wire  signed [7:0] grp_fu_18352_p3;
wire  signed [7:0] grp_fu_18352_p4;
wire  signed [15:0] sext_ln159_38_fu_9239_p1;
wire  signed [7:0] grp_fu_18352_p5;
wire  signed [7:0] grp_fu_18369_p0;
wire  signed [7:0] grp_fu_18369_p1;
wire  signed [20:0] grp_fu_18369_p2;
wire  signed [7:0] grp_fu_18378_p0;
wire  signed [15:0] sext_ln159_53_fu_9335_p1;
wire  signed [7:0] grp_fu_18378_p1;
wire  signed [7:0] grp_fu_18378_p2;
wire  signed [15:0] sext_ln159_63_fu_9410_p1;
wire  signed [7:0] grp_fu_18378_p3;
wire  signed [7:0] grp_fu_18378_p4;
wire  signed [15:0] sext_ln159_54_fu_9346_p1;
wire  signed [7:0] grp_fu_18378_p5;
wire  signed [7:0] grp_fu_18395_p0;
wire  signed [7:0] grp_fu_18395_p1;
wire  signed [20:0] grp_fu_18395_p2;
wire  signed [7:0] grp_fu_18404_p0;
wire  signed [15:0] sext_ln159_69_fu_9442_p1;
wire  signed [7:0] grp_fu_18404_p1;
wire  signed [7:0] grp_fu_18404_p2;
wire  signed [15:0] sext_ln159_79_fu_9517_p1;
wire  signed [7:0] grp_fu_18404_p3;
wire  signed [7:0] grp_fu_18404_p4;
wire  signed [15:0] sext_ln159_70_fu_9453_p1;
wire  signed [7:0] grp_fu_18404_p5;
wire  signed [7:0] grp_fu_18421_p0;
wire  signed [7:0] grp_fu_18421_p1;
wire  signed [20:0] grp_fu_18421_p2;
wire  signed [7:0] grp_fu_18430_p0;
wire  signed [15:0] sext_ln159_85_fu_9549_p1;
wire  signed [7:0] grp_fu_18430_p1;
wire  signed [7:0] grp_fu_18430_p2;
wire  signed [15:0] sext_ln159_95_fu_9624_p1;
wire  signed [7:0] grp_fu_18430_p3;
wire  signed [7:0] grp_fu_18430_p4;
wire  signed [15:0] sext_ln159_86_fu_9560_p1;
wire  signed [7:0] grp_fu_18430_p5;
wire  signed [7:0] grp_fu_18447_p0;
wire  signed [7:0] grp_fu_18447_p1;
wire  signed [20:0] grp_fu_18447_p2;
wire  signed [7:0] grp_fu_18456_p0;
wire  signed [15:0] sext_ln159_101_fu_9656_p1;
wire  signed [7:0] grp_fu_18456_p1;
wire  signed [7:0] grp_fu_18456_p2;
wire  signed [15:0] sext_ln159_111_fu_9731_p1;
wire  signed [7:0] grp_fu_18456_p3;
wire  signed [7:0] grp_fu_18456_p4;
wire  signed [15:0] sext_ln159_102_fu_9667_p1;
wire  signed [7:0] grp_fu_18456_p5;
wire  signed [7:0] grp_fu_18473_p0;
wire  signed [7:0] grp_fu_18473_p1;
wire  signed [20:0] grp_fu_18473_p2;
wire  signed [7:0] grp_fu_18482_p0;
wire  signed [15:0] sext_ln159_117_fu_9763_p1;
wire  signed [7:0] grp_fu_18482_p1;
wire  signed [7:0] grp_fu_18482_p2;
wire  signed [15:0] sext_ln159_127_fu_9838_p1;
wire  signed [7:0] grp_fu_18482_p3;
wire  signed [7:0] grp_fu_18482_p4;
wire  signed [15:0] sext_ln159_118_fu_9774_p1;
wire  signed [7:0] grp_fu_18482_p5;
wire  signed [7:0] grp_fu_18499_p0;
wire  signed [7:0] grp_fu_18499_p1;
wire  signed [20:0] grp_fu_18499_p2;
wire  signed [7:0] grp_fu_18508_p0;
wire  signed [15:0] sext_ln159_133_fu_9870_p1;
wire  signed [7:0] grp_fu_18508_p1;
wire  signed [7:0] grp_fu_18508_p2;
wire  signed [15:0] sext_ln159_143_fu_9945_p1;
wire  signed [7:0] grp_fu_18508_p3;
wire  signed [7:0] grp_fu_18508_p4;
wire  signed [15:0] sext_ln159_134_fu_9881_p1;
wire  signed [7:0] grp_fu_18508_p5;
wire  signed [7:0] grp_fu_18525_p0;
wire  signed [7:0] grp_fu_18525_p1;
wire  signed [20:0] grp_fu_18525_p2;
wire  signed [7:0] grp_fu_18534_p0;
wire  signed [15:0] sext_ln159_149_fu_9977_p1;
wire  signed [7:0] grp_fu_18534_p1;
wire  signed [7:0] grp_fu_18534_p2;
wire  signed [15:0] sext_ln159_159_fu_10052_p1;
wire  signed [7:0] grp_fu_18534_p3;
wire  signed [7:0] grp_fu_18534_p4;
wire  signed [15:0] sext_ln159_150_fu_9988_p1;
wire  signed [7:0] grp_fu_18534_p5;
wire  signed [7:0] grp_fu_18551_p0;
wire  signed [7:0] grp_fu_18551_p1;
wire  signed [20:0] grp_fu_18551_p2;
wire  signed [7:0] grp_fu_18560_p0;
wire  signed [15:0] sext_ln159_165_fu_10084_p1;
wire  signed [7:0] grp_fu_18560_p1;
wire  signed [7:0] grp_fu_18560_p2;
wire  signed [15:0] sext_ln159_175_fu_10159_p1;
wire  signed [7:0] grp_fu_18560_p3;
wire  signed [7:0] grp_fu_18560_p4;
wire  signed [15:0] sext_ln159_166_fu_10095_p1;
wire  signed [7:0] grp_fu_18560_p5;
wire  signed [7:0] grp_fu_18577_p0;
wire  signed [7:0] grp_fu_18577_p1;
wire  signed [20:0] grp_fu_18577_p2;
wire  signed [7:0] grp_fu_18586_p0;
wire  signed [15:0] sext_ln159_181_fu_10191_p1;
wire  signed [7:0] grp_fu_18586_p1;
wire  signed [7:0] grp_fu_18586_p2;
wire  signed [15:0] sext_ln159_191_fu_10266_p1;
wire  signed [7:0] grp_fu_18586_p3;
wire  signed [7:0] grp_fu_18586_p4;
wire  signed [15:0] sext_ln159_182_fu_10202_p1;
wire  signed [7:0] grp_fu_18586_p5;
wire  signed [7:0] grp_fu_18603_p0;
wire  signed [7:0] grp_fu_18603_p1;
wire  signed [20:0] grp_fu_18603_p2;
wire  signed [7:0] grp_fu_18612_p0;
wire  signed [15:0] sext_ln159_197_fu_10298_p1;
wire  signed [7:0] grp_fu_18612_p1;
wire  signed [7:0] grp_fu_18612_p2;
wire  signed [15:0] sext_ln159_207_fu_10373_p1;
wire  signed [7:0] grp_fu_18612_p3;
wire  signed [7:0] grp_fu_18612_p4;
wire  signed [15:0] sext_ln159_198_fu_10309_p1;
wire  signed [7:0] grp_fu_18612_p5;
wire  signed [7:0] grp_fu_18629_p0;
wire  signed [7:0] grp_fu_18629_p1;
wire  signed [20:0] grp_fu_18629_p2;
wire  signed [7:0] grp_fu_18638_p0;
wire  signed [15:0] sext_ln159_213_fu_10405_p1;
wire  signed [7:0] grp_fu_18638_p1;
wire  signed [7:0] grp_fu_18638_p2;
wire  signed [15:0] sext_ln159_223_fu_10480_p1;
wire  signed [7:0] grp_fu_18638_p3;
wire  signed [7:0] grp_fu_18638_p4;
wire  signed [15:0] sext_ln159_214_fu_10416_p1;
wire  signed [7:0] grp_fu_18638_p5;
wire  signed [7:0] grp_fu_18655_p0;
wire  signed [7:0] grp_fu_18655_p1;
wire  signed [20:0] grp_fu_18655_p2;
wire  signed [7:0] grp_fu_18664_p0;
wire  signed [15:0] sext_ln159_229_fu_10512_p1;
wire  signed [7:0] grp_fu_18664_p1;
wire  signed [7:0] grp_fu_18664_p2;
wire  signed [15:0] sext_ln159_239_fu_10587_p1;
wire  signed [7:0] grp_fu_18664_p3;
wire  signed [7:0] grp_fu_18664_p4;
wire  signed [15:0] sext_ln159_230_fu_10523_p1;
wire  signed [7:0] grp_fu_18664_p5;
wire  signed [7:0] grp_fu_18681_p0;
wire  signed [7:0] grp_fu_18681_p1;
wire  signed [20:0] grp_fu_18681_p2;
wire  signed [7:0] grp_fu_18690_p0;
wire  signed [15:0] sext_ln159_245_fu_10619_p1;
wire  signed [7:0] grp_fu_18690_p1;
wire  signed [7:0] grp_fu_18690_p2;
wire  signed [15:0] sext_ln159_255_fu_10694_p1;
wire  signed [7:0] grp_fu_18690_p3;
wire  signed [7:0] grp_fu_18690_p4;
wire  signed [15:0] sext_ln159_246_fu_10630_p1;
wire  signed [7:0] grp_fu_18690_p5;
wire  signed [7:0] grp_fu_18707_p0;
wire  signed [7:0] grp_fu_18707_p1;
wire  signed [20:0] grp_fu_18707_p2;
wire  signed [7:0] grp_fu_18716_p0;
wire  signed [15:0] sext_ln159_261_fu_10726_p1;
wire  signed [7:0] grp_fu_18716_p1;
wire  signed [7:0] grp_fu_18716_p2;
wire  signed [15:0] sext_ln159_271_fu_10801_p1;
wire  signed [7:0] grp_fu_18716_p3;
wire  signed [7:0] grp_fu_18716_p4;
wire  signed [15:0] sext_ln159_262_fu_10737_p1;
wire  signed [7:0] grp_fu_18716_p5;
wire  signed [7:0] grp_fu_18733_p0;
wire  signed [7:0] grp_fu_18733_p1;
wire  signed [20:0] grp_fu_18733_p2;
wire  signed [7:0] grp_fu_18742_p0;
wire  signed [7:0] grp_fu_18742_p1;
wire  signed [15:0] sext_ln159_277_fu_10833_p1;
wire  signed [7:0] grp_fu_18742_p2;
wire  signed [7:0] grp_fu_18742_p3;
wire  signed [15:0] sext_ln159_287_fu_10908_p1;
wire  signed [7:0] grp_fu_18742_p4;
wire  signed [7:0] grp_fu_18742_p5;
wire  signed [15:0] sext_ln159_278_fu_10844_p1;
wire  signed [7:0] grp_fu_18759_p0;
wire  signed [7:0] grp_fu_18759_p1;
wire  signed [7:0] grp_fu_18759_p2;
wire  signed [7:0] grp_fu_18759_p3;
wire  signed [7:0] grp_fu_18759_p4;
wire  signed [7:0] grp_fu_18759_p5;
wire  signed [7:0] grp_fu_18774_p0;
wire  signed [7:0] grp_fu_18774_p1;
wire  signed [7:0] grp_fu_18774_p2;
wire  signed [7:0] grp_fu_18774_p3;
wire  signed [7:0] grp_fu_18774_p4;
wire  signed [7:0] grp_fu_18774_p5;
wire  signed [7:0] grp_fu_18791_p0;
wire  signed [7:0] grp_fu_18791_p1;
wire  signed [7:0] grp_fu_18791_p2;
wire  signed [7:0] grp_fu_18791_p3;
wire  signed [7:0] grp_fu_18791_p4;
wire  signed [7:0] grp_fu_18791_p5;
wire  signed [7:0] grp_fu_18806_p0;
wire  signed [7:0] grp_fu_18806_p1;
wire  signed [7:0] grp_fu_18806_p2;
wire  signed [7:0] grp_fu_18806_p3;
wire  signed [7:0] grp_fu_18806_p4;
wire  signed [7:0] grp_fu_18806_p5;
wire  signed [7:0] grp_fu_18823_p0;
wire  signed [7:0] grp_fu_18823_p1;
wire  signed [7:0] grp_fu_18823_p2;
wire  signed [7:0] grp_fu_18823_p3;
wire  signed [7:0] grp_fu_18823_p4;
wire  signed [7:0] grp_fu_18823_p5;
wire  signed [7:0] grp_fu_18838_p0;
wire  signed [7:0] grp_fu_18838_p1;
wire  signed [7:0] grp_fu_18838_p2;
wire  signed [7:0] grp_fu_18838_p3;
wire  signed [7:0] grp_fu_18838_p4;
wire  signed [7:0] grp_fu_18838_p5;
wire  signed [7:0] grp_fu_18855_p0;
wire  signed [7:0] grp_fu_18855_p1;
wire  signed [7:0] grp_fu_18855_p2;
wire  signed [7:0] grp_fu_18855_p3;
wire  signed [7:0] grp_fu_18855_p4;
wire  signed [7:0] grp_fu_18855_p5;
wire  signed [7:0] grp_fu_18870_p0;
wire  signed [7:0] grp_fu_18870_p1;
wire  signed [7:0] grp_fu_18870_p2;
wire  signed [7:0] grp_fu_18870_p3;
wire  signed [7:0] grp_fu_18870_p4;
wire  signed [7:0] grp_fu_18870_p5;
wire  signed [7:0] grp_fu_18887_p0;
wire  signed [7:0] grp_fu_18887_p1;
wire  signed [7:0] grp_fu_18887_p2;
wire  signed [7:0] grp_fu_18887_p3;
wire  signed [7:0] grp_fu_18887_p4;
wire  signed [7:0] grp_fu_18887_p5;
wire  signed [7:0] grp_fu_18902_p0;
wire  signed [7:0] grp_fu_18902_p1;
wire  signed [7:0] grp_fu_18902_p2;
wire  signed [7:0] grp_fu_18902_p3;
wire  signed [7:0] grp_fu_18902_p4;
wire  signed [7:0] grp_fu_18902_p5;
wire  signed [7:0] grp_fu_18919_p0;
wire  signed [7:0] grp_fu_18919_p1;
wire  signed [7:0] grp_fu_18919_p2;
wire  signed [7:0] grp_fu_18919_p3;
wire  signed [7:0] grp_fu_18919_p4;
wire  signed [7:0] grp_fu_18919_p5;
wire  signed [7:0] grp_fu_18934_p0;
wire  signed [7:0] grp_fu_18934_p1;
wire  signed [7:0] grp_fu_18934_p2;
wire  signed [7:0] grp_fu_18934_p3;
wire  signed [7:0] grp_fu_18934_p4;
wire  signed [7:0] grp_fu_18934_p5;
wire  signed [7:0] grp_fu_18951_p0;
wire  signed [7:0] grp_fu_18951_p1;
wire  signed [7:0] grp_fu_18951_p2;
wire  signed [7:0] grp_fu_18951_p3;
wire  signed [7:0] grp_fu_18951_p4;
wire  signed [7:0] grp_fu_18951_p5;
wire  signed [7:0] grp_fu_18966_p0;
wire  signed [7:0] grp_fu_18966_p1;
wire  signed [7:0] grp_fu_18966_p2;
wire  signed [7:0] grp_fu_18966_p3;
wire  signed [7:0] grp_fu_18966_p4;
wire  signed [7:0] grp_fu_18966_p5;
wire  signed [7:0] grp_fu_18983_p0;
wire  signed [7:0] grp_fu_18983_p1;
wire  signed [7:0] grp_fu_18983_p2;
wire  signed [7:0] grp_fu_18983_p3;
wire  signed [7:0] grp_fu_18983_p4;
wire  signed [7:0] grp_fu_18983_p5;
wire  signed [7:0] grp_fu_18998_p0;
wire  signed [7:0] grp_fu_18998_p1;
wire  signed [7:0] grp_fu_18998_p2;
wire  signed [7:0] grp_fu_18998_p3;
wire  signed [7:0] grp_fu_18998_p4;
wire  signed [7:0] grp_fu_18998_p5;
wire  signed [7:0] grp_fu_19015_p0;
wire  signed [7:0] grp_fu_19015_p1;
wire  signed [7:0] grp_fu_19015_p2;
wire  signed [7:0] grp_fu_19015_p3;
wire  signed [7:0] grp_fu_19015_p4;
wire  signed [7:0] grp_fu_19015_p5;
wire  signed [7:0] grp_fu_19030_p0;
wire  signed [7:0] grp_fu_19030_p1;
wire  signed [7:0] grp_fu_19030_p2;
wire  signed [7:0] grp_fu_19030_p3;
wire  signed [7:0] grp_fu_19030_p4;
wire  signed [7:0] grp_fu_19030_p5;
wire  signed [7:0] grp_fu_19047_p0;
wire  signed [7:0] grp_fu_19047_p1;
wire  signed [7:0] grp_fu_19047_p2;
wire  signed [7:0] grp_fu_19047_p3;
wire  signed [7:0] grp_fu_19047_p4;
wire  signed [7:0] grp_fu_19047_p5;
wire  signed [7:0] grp_fu_19062_p0;
wire  signed [7:0] grp_fu_19062_p1;
wire  signed [7:0] grp_fu_19062_p2;
wire  signed [7:0] grp_fu_19062_p3;
wire  signed [7:0] grp_fu_19062_p4;
wire  signed [7:0] grp_fu_19062_p5;
wire  signed [7:0] grp_fu_19079_p0;
wire  signed [7:0] grp_fu_19079_p1;
wire  signed [20:0] grp_fu_19079_p2;
wire  signed [7:0] grp_fu_19088_p0;
wire  signed [7:0] grp_fu_19088_p1;
wire  signed [7:0] grp_fu_19088_p2;
wire  signed [7:0] grp_fu_19088_p3;
wire  signed [7:0] grp_fu_19088_p4;
wire  signed [7:0] grp_fu_19088_p5;
wire  signed [7:0] grp_fu_19105_p0;
wire  signed [7:0] grp_fu_19105_p1;
wire  signed [20:0] grp_fu_19105_p2;
wire  signed [7:0] grp_fu_19114_p0;
wire  signed [7:0] grp_fu_19114_p1;
wire  signed [7:0] grp_fu_19114_p2;
wire  signed [7:0] grp_fu_19114_p3;
wire  signed [7:0] grp_fu_19114_p4;
wire  signed [7:0] grp_fu_19114_p5;
wire  signed [7:0] grp_fu_19131_p0;
wire  signed [7:0] grp_fu_19131_p1;
wire  signed [20:0] grp_fu_19131_p2;
wire  signed [7:0] grp_fu_19140_p0;
wire  signed [7:0] grp_fu_19140_p1;
wire  signed [7:0] grp_fu_19140_p2;
wire  signed [7:0] grp_fu_19140_p3;
wire  signed [7:0] grp_fu_19140_p4;
wire  signed [7:0] grp_fu_19140_p5;
wire  signed [7:0] grp_fu_19157_p0;
wire  signed [7:0] grp_fu_19157_p1;
wire  signed [20:0] grp_fu_19157_p2;
wire  signed [7:0] grp_fu_19166_p0;
wire  signed [7:0] grp_fu_19166_p1;
wire  signed [7:0] grp_fu_19166_p2;
wire  signed [7:0] grp_fu_19166_p3;
wire  signed [7:0] grp_fu_19166_p4;
wire  signed [7:0] grp_fu_19166_p5;
wire  signed [7:0] grp_fu_19183_p0;
wire  signed [7:0] grp_fu_19183_p1;
wire  signed [20:0] grp_fu_19183_p2;
wire  signed [7:0] grp_fu_19192_p0;
wire  signed [7:0] grp_fu_19192_p1;
wire  signed [7:0] grp_fu_19192_p2;
wire  signed [7:0] grp_fu_19192_p3;
wire  signed [7:0] grp_fu_19192_p4;
wire  signed [7:0] grp_fu_19192_p5;
wire  signed [7:0] grp_fu_19209_p0;
wire  signed [7:0] grp_fu_19209_p1;
wire  signed [20:0] grp_fu_19209_p2;
wire    ap_continue_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_done_int_frp;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [10:0] frp_pipeline_valid_U_valid_out;
wire   [4:0] frp_pipeline_valid_U_num_valid_datasets;
wire   [415:0] pf_mac_sm_U_data_out;
wire    pf_mac_sm_U_data_out_vld;
wire    pf_mac_sm_U_pf_ready;
wire    pf_mac_sm_U_pf_done;
reg   [0:0] ap_frp_data_next_issued_cache_window_sm;
reg    ap_frp_data_issued_nxt_cache_window_sm_op126;
reg   [3:0] ap_frp_data_req_cache_window_sm;
reg   [0:0] ap_frp_data_req_cache_window_sm_op126;
reg    ap_condition_frp_roi_pvb_no_fwd_prs;
reg    ap_condition_frp_pvb_no_bkwd_prs;
reg    ap_condition_frp_pvb_pf_start;
reg    ap_frp_vld_in;
reg    frp_pipeline_valid_U_exitcond;
reg    pf_mac_sm_U_data_in_vld;
wire   [415:0] pf_mac_sm_U_frpsig_data_in;
reg    pf_all_done;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_2268 = 6'd0;
//#0 empty_fu_2272 = 21'd0;
//#0 empty_538_fu_2276 = 21'd0;
//#0 empty_539_fu_2280 = 21'd0;
//#0 empty_540_fu_2284 = 21'd0;
//#0 empty_541_fu_2288 = 21'd0;
//#0 empty_542_fu_2292 = 21'd0;
//#0 empty_543_fu_2296 = 21'd0;
//#0 empty_544_fu_2300 = 21'd0;
//#0 empty_545_fu_2304 = 21'd0;
//#0 empty_546_fu_2308 = 21'd0;
//#0 empty_547_fu_2312 = 21'd0;
//#0 empty_548_fu_2316 = 21'd0;
//#0 empty_549_fu_2320 = 21'd0;
//#0 empty_550_fu_2324 = 21'd0;
//#0 empty_551_fu_2328 = 21'd0;
//#0 empty_552_fu_2332 = 21'd0;
//#0 empty_553_fu_2336 = 21'd0;
//#0 empty_554_fu_2340 = 21'd0;
//#0 empty_555_fu_2344 = 21'd0;
//#0 empty_556_fu_2348 = 21'd0;
//#0 empty_557_fu_2352 = 21'd0;
//#0 empty_558_fu_2356 = 21'd0;
//#0 empty_559_fu_2360 = 21'd0;
//#0 empty_560_fu_2364 = 21'd0;
//#0 empty_561_fu_2368 = 21'd0;
//#0 empty_562_fu_2372 = 21'd0;
//#0 empty_563_fu_2376 = 21'd0;
//#0 empty_564_fu_2380 = 21'd0;
//#0 empty_565_fu_2384 = 21'd0;
//#0 empty_566_fu_2388 = 21'd0;
//#0 empty_567_fu_2392 = 21'd0;
//#0 empty_568_fu_2396 = 21'd0;
//#0 cot_fu_2400 = 4'd0;
//#0 indvar_flatten_fu_2404 = 10'd0;
//#0 tt_fu_2408 = 7'd0;
//#0 indvar_flatten107_fu_2412 = 16'd0;
//#0 ap_frp_data_req_cache_window_sm = 4'd0;
//#0 pf_all_done = 1'b0;
end

PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_bias_arr_19_ROM_1P_BRAM_1R #(
    .DataWidth( 668 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
PATCH_EMBED_INST_bias_arr_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PATCH_EMBED_INST_bias_arr_19_address0),
    .ce0(PATCH_EMBED_INST_bias_arr_19_ce0),
    .q0(PATCH_EMBED_INST_bias_arr_19_q0)
);

PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_cls_arr_20_ROM_AUTO_1R #(
    .DataWidth( 331 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
PATCH_EMBED_INST_cls_arr_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PATCH_EMBED_INST_cls_arr_20_address0),
    .ce0(PATCH_EMBED_INST_cls_arr_20_ce0),
    .q0(PATCH_EMBED_INST_cls_arr_20_q0)
);

PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_weight_arr_18_RAM_1P_URAM_3R2W #(
    .DataWidth( 2048 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
PATCH_EMBED_INST_weight_arr_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PATCH_EMBED_INST_weight_arr_18_address0),
    .ce0(PATCH_EMBED_INST_weight_arr_18_ce0),
    .q0(PATCH_EMBED_INST_weight_arr_18_q0)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6757_p0),
    .din1(grp_fu_6757_p1),
    .ce(1'b1),
    .dout(grp_fu_6757_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6777_p0),
    .din1(grp_fu_6777_p1),
    .ce(1'b1),
    .dout(grp_fu_6777_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6797_p0),
    .din1(grp_fu_6797_p1),
    .ce(1'b1),
    .dout(grp_fu_6797_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6850_p0),
    .din1(grp_fu_6850_p1),
    .ce(1'b1),
    .dout(grp_fu_6850_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6867_p0),
    .din1(grp_fu_6867_p1),
    .ce(1'b1),
    .dout(grp_fu_6867_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6884_p0),
    .din1(grp_fu_6884_p1),
    .ce(1'b1),
    .dout(grp_fu_6884_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6934_p0),
    .din1(grp_fu_6934_p1),
    .ce(1'b1),
    .dout(grp_fu_6934_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6951_p0),
    .din1(grp_fu_6951_p1),
    .ce(1'b1),
    .dout(grp_fu_6951_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_6968_p0),
    .din1(grp_fu_6968_p1),
    .ce(1'b1),
    .dout(grp_fu_6968_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7018_p0),
    .din1(grp_fu_7018_p1),
    .ce(1'b1),
    .dout(grp_fu_7018_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7035_p0),
    .din1(grp_fu_7035_p1),
    .ce(1'b1),
    .dout(grp_fu_7035_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7052_p0),
    .din1(grp_fu_7052_p1),
    .ce(1'b1),
    .dout(grp_fu_7052_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7102_p0),
    .din1(grp_fu_7102_p1),
    .ce(1'b1),
    .dout(grp_fu_7102_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7119_p0),
    .din1(grp_fu_7119_p1),
    .ce(1'b1),
    .dout(grp_fu_7119_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7136_p0),
    .din1(grp_fu_7136_p1),
    .ce(1'b1),
    .dout(grp_fu_7136_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7186_p0),
    .din1(grp_fu_7186_p1),
    .ce(1'b1),
    .dout(grp_fu_7186_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7203_p0),
    .din1(grp_fu_7203_p1),
    .ce(1'b1),
    .dout(grp_fu_7203_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7220_p0),
    .din1(grp_fu_7220_p1),
    .ce(1'b1),
    .dout(grp_fu_7220_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7270_p0),
    .din1(grp_fu_7270_p1),
    .ce(1'b1),
    .dout(grp_fu_7270_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7287_p0),
    .din1(grp_fu_7287_p1),
    .ce(1'b1),
    .dout(grp_fu_7287_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7304_p0),
    .din1(grp_fu_7304_p1),
    .ce(1'b1),
    .dout(grp_fu_7304_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7354_p0),
    .din1(grp_fu_7354_p1),
    .ce(1'b1),
    .dout(grp_fu_7354_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7371_p0),
    .din1(grp_fu_7371_p1),
    .ce(1'b1),
    .dout(grp_fu_7371_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7388_p0),
    .din1(grp_fu_7388_p1),
    .ce(1'b1),
    .dout(grp_fu_7388_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7438_p0),
    .din1(grp_fu_7438_p1),
    .ce(1'b1),
    .dout(grp_fu_7438_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7455_p0),
    .din1(grp_fu_7455_p1),
    .ce(1'b1),
    .dout(grp_fu_7455_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7472_p0),
    .din1(grp_fu_7472_p1),
    .ce(1'b1),
    .dout(grp_fu_7472_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7522_p0),
    .din1(grp_fu_7522_p1),
    .ce(1'b1),
    .dout(grp_fu_7522_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7539_p0),
    .din1(grp_fu_7539_p1),
    .ce(1'b1),
    .dout(grp_fu_7539_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7556_p0),
    .din1(grp_fu_7556_p1),
    .ce(1'b1),
    .dout(grp_fu_7556_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7606_p0),
    .din1(grp_fu_7606_p1),
    .ce(1'b1),
    .dout(grp_fu_7606_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7623_p0),
    .din1(grp_fu_7623_p1),
    .ce(1'b1),
    .dout(grp_fu_7623_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7640_p0),
    .din1(grp_fu_7640_p1),
    .ce(1'b1),
    .dout(grp_fu_7640_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7690_p0),
    .din1(grp_fu_7690_p1),
    .ce(1'b1),
    .dout(grp_fu_7690_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7707_p0),
    .din1(grp_fu_7707_p1),
    .ce(1'b1),
    .dout(grp_fu_7707_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7724_p0),
    .din1(grp_fu_7724_p1),
    .ce(1'b1),
    .dout(grp_fu_7724_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7774_p0),
    .din1(grp_fu_7774_p1),
    .ce(1'b1),
    .dout(grp_fu_7774_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7791_p0),
    .din1(grp_fu_7791_p1),
    .ce(1'b1),
    .dout(grp_fu_7791_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7808_p0),
    .din1(grp_fu_7808_p1),
    .ce(1'b1),
    .dout(grp_fu_7808_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7858_p0),
    .din1(grp_fu_7858_p1),
    .ce(1'b1),
    .dout(grp_fu_7858_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7875_p0),
    .din1(grp_fu_7875_p1),
    .ce(1'b1),
    .dout(grp_fu_7875_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7892_p0),
    .din1(grp_fu_7892_p1),
    .ce(1'b1),
    .dout(grp_fu_7892_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7942_p0),
    .din1(grp_fu_7942_p1),
    .ce(1'b1),
    .dout(grp_fu_7942_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7959_p0),
    .din1(grp_fu_7959_p1),
    .ce(1'b1),
    .dout(grp_fu_7959_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_7976_p0),
    .din1(grp_fu_7976_p1),
    .ce(1'b1),
    .dout(grp_fu_7976_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8026_p0),
    .din1(grp_fu_8026_p1),
    .ce(1'b1),
    .dout(grp_fu_8026_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8043_p0),
    .din1(grp_fu_8043_p1),
    .ce(1'b1),
    .dout(grp_fu_8043_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8060_p0),
    .din1(grp_fu_8060_p1),
    .ce(1'b1),
    .dout(grp_fu_8060_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8110_p0),
    .din1(grp_fu_8110_p1),
    .ce(1'b1),
    .dout(grp_fu_8110_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8127_p0),
    .din1(grp_fu_8127_p1),
    .ce(1'b1),
    .dout(grp_fu_8127_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8144_p0),
    .din1(grp_fu_8144_p1),
    .ce(1'b1),
    .dout(grp_fu_8144_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8177_p0),
    .din1(grp_fu_8177_p1),
    .ce(1'b1),
    .dout(grp_fu_8177_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8191_p0),
    .din1(grp_fu_8191_p1),
    .ce(1'b1),
    .dout(grp_fu_8191_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8205_p0),
    .din1(grp_fu_8205_p1),
    .ce(1'b1),
    .dout(grp_fu_8205_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8235_p0),
    .din1(grp_fu_8235_p1),
    .ce(1'b1),
    .dout(grp_fu_8235_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8249_p0),
    .din1(grp_fu_8249_p1),
    .ce(1'b1),
    .dout(grp_fu_8249_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8263_p0),
    .din1(grp_fu_8263_p1),
    .ce(1'b1),
    .dout(grp_fu_8263_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8293_p0),
    .din1(grp_fu_8293_p1),
    .ce(1'b1),
    .dout(grp_fu_8293_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8307_p0),
    .din1(grp_fu_8307_p1),
    .ce(1'b1),
    .dout(grp_fu_8307_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8321_p0),
    .din1(grp_fu_8321_p1),
    .ce(1'b1),
    .dout(grp_fu_8321_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8351_p0),
    .din1(grp_fu_8351_p1),
    .ce(1'b1),
    .dout(grp_fu_8351_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8365_p0),
    .din1(grp_fu_8365_p1),
    .ce(1'b1),
    .dout(grp_fu_8365_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8379_p0),
    .din1(grp_fu_8379_p1),
    .ce(1'b1),
    .dout(grp_fu_8379_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8409_p0),
    .din1(grp_fu_8409_p1),
    .ce(1'b1),
    .dout(grp_fu_8409_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8423_p0),
    .din1(grp_fu_8423_p1),
    .ce(1'b1),
    .dout(grp_fu_8423_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8437_p0),
    .din1(grp_fu_8437_p1),
    .ce(1'b1),
    .dout(grp_fu_8437_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8467_p0),
    .din1(grp_fu_8467_p1),
    .ce(1'b1),
    .dout(grp_fu_8467_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8481_p0),
    .din1(grp_fu_8481_p1),
    .ce(1'b1),
    .dout(grp_fu_8481_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8495_p0),
    .din1(grp_fu_8495_p1),
    .ce(1'b1),
    .dout(grp_fu_8495_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8525_p0),
    .din1(grp_fu_8525_p1),
    .ce(1'b1),
    .dout(grp_fu_8525_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8539_p0),
    .din1(grp_fu_8539_p1),
    .ce(1'b1),
    .dout(grp_fu_8539_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8553_p0),
    .din1(grp_fu_8553_p1),
    .ce(1'b1),
    .dout(grp_fu_8553_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8583_p0),
    .din1(grp_fu_8583_p1),
    .ce(1'b1),
    .dout(grp_fu_8583_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8597_p0),
    .din1(grp_fu_8597_p1),
    .ce(1'b1),
    .dout(grp_fu_8597_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8611_p0),
    .din1(grp_fu_8611_p1),
    .ce(1'b1),
    .dout(grp_fu_8611_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8641_p0),
    .din1(grp_fu_8641_p1),
    .ce(1'b1),
    .dout(grp_fu_8641_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8655_p0),
    .din1(grp_fu_8655_p1),
    .ce(1'b1),
    .dout(grp_fu_8655_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8669_p0),
    .din1(grp_fu_8669_p1),
    .ce(1'b1),
    .dout(grp_fu_8669_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8699_p0),
    .din1(grp_fu_8699_p1),
    .ce(1'b1),
    .dout(grp_fu_8699_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8713_p0),
    .din1(grp_fu_8713_p1),
    .ce(1'b1),
    .dout(grp_fu_8713_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8727_p0),
    .din1(grp_fu_8727_p1),
    .ce(1'b1),
    .dout(grp_fu_8727_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8765_p0),
    .din1(grp_fu_8765_p1),
    .ce(1'b1),
    .dout(grp_fu_8765_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8779_p0),
    .din1(grp_fu_8779_p1),
    .ce(1'b1),
    .dout(grp_fu_8779_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8793_p0),
    .din1(grp_fu_8793_p1),
    .ce(1'b1),
    .dout(grp_fu_8793_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8831_p0),
    .din1(grp_fu_8831_p1),
    .ce(1'b1),
    .dout(grp_fu_8831_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U92(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8845_p0),
    .din1(grp_fu_8845_p1),
    .ce(1'b1),
    .dout(grp_fu_8845_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U93(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8859_p0),
    .din1(grp_fu_8859_p1),
    .ce(1'b1),
    .dout(grp_fu_8859_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8897_p0),
    .din1(grp_fu_8897_p1),
    .ce(1'b1),
    .dout(grp_fu_8897_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8911_p0),
    .din1(grp_fu_8911_p1),
    .ce(1'b1),
    .dout(grp_fu_8911_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8925_p0),
    .din1(grp_fu_8925_p1),
    .ce(1'b1),
    .dout(grp_fu_8925_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8963_p0),
    .din1(grp_fu_8963_p1),
    .ce(1'b1),
    .dout(grp_fu_8963_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8977_p0),
    .din1(grp_fu_8977_p1),
    .ce(1'b1),
    .dout(grp_fu_8977_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_8991_p0),
    .din1(grp_fu_8991_p1),
    .ce(1'b1),
    .dout(grp_fu_8991_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9029_p0),
    .din1(grp_fu_9029_p1),
    .ce(1'b1),
    .dout(grp_fu_9029_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9043_p0),
    .din1(grp_fu_9043_p1),
    .ce(1'b1),
    .dout(grp_fu_9043_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9057_p0),
    .din1(grp_fu_9057_p1),
    .ce(1'b1),
    .dout(grp_fu_9057_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9093_p0),
    .din1(grp_fu_9093_p1),
    .ce(1'b1),
    .dout(grp_fu_9093_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9149_p0),
    .din1(grp_fu_9149_p1),
    .ce(1'b1),
    .dout(grp_fu_9149_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9187_p0),
    .din1(grp_fu_9187_p1),
    .ce(1'b1),
    .dout(grp_fu_9187_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9218_p0),
    .din1(grp_fu_9218_p1),
    .ce(1'b1),
    .dout(grp_fu_9218_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9265_p0),
    .din1(grp_fu_9265_p1),
    .ce(1'b1),
    .dout(grp_fu_9265_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9297_p0),
    .din1(grp_fu_9297_p1),
    .ce(1'b1),
    .dout(grp_fu_9297_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9325_p0),
    .din1(grp_fu_9325_p1),
    .ce(1'b1),
    .dout(grp_fu_9325_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9372_p0),
    .din1(grp_fu_9372_p1),
    .ce(1'b1),
    .dout(grp_fu_9372_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9404_p0),
    .din1(grp_fu_9404_p1),
    .ce(1'b1),
    .dout(grp_fu_9404_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9432_p0),
    .din1(grp_fu_9432_p1),
    .ce(1'b1),
    .dout(grp_fu_9432_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9479_p0),
    .din1(grp_fu_9479_p1),
    .ce(1'b1),
    .dout(grp_fu_9479_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9511_p0),
    .din1(grp_fu_9511_p1),
    .ce(1'b1),
    .dout(grp_fu_9511_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9539_p0),
    .din1(grp_fu_9539_p1),
    .ce(1'b1),
    .dout(grp_fu_9539_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9586_p0),
    .din1(grp_fu_9586_p1),
    .ce(1'b1),
    .dout(grp_fu_9586_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9618_p0),
    .din1(grp_fu_9618_p1),
    .ce(1'b1),
    .dout(grp_fu_9618_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U118(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9646_p0),
    .din1(grp_fu_9646_p1),
    .ce(1'b1),
    .dout(grp_fu_9646_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U119(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9693_p0),
    .din1(grp_fu_9693_p1),
    .ce(1'b1),
    .dout(grp_fu_9693_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9725_p0),
    .din1(grp_fu_9725_p1),
    .ce(1'b1),
    .dout(grp_fu_9725_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9753_p0),
    .din1(grp_fu_9753_p1),
    .ce(1'b1),
    .dout(grp_fu_9753_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U122(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9800_p0),
    .din1(grp_fu_9800_p1),
    .ce(1'b1),
    .dout(grp_fu_9800_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U123(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9832_p0),
    .din1(grp_fu_9832_p1),
    .ce(1'b1),
    .dout(grp_fu_9832_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9860_p0),
    .din1(grp_fu_9860_p1),
    .ce(1'b1),
    .dout(grp_fu_9860_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U125(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9907_p0),
    .din1(grp_fu_9907_p1),
    .ce(1'b1),
    .dout(grp_fu_9907_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9939_p0),
    .din1(grp_fu_9939_p1),
    .ce(1'b1),
    .dout(grp_fu_9939_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U127(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_9967_p0),
    .din1(grp_fu_9967_p1),
    .ce(1'b1),
    .dout(grp_fu_9967_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10014_p0),
    .din1(grp_fu_10014_p1),
    .ce(1'b1),
    .dout(grp_fu_10014_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U129(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10046_p0),
    .din1(grp_fu_10046_p1),
    .ce(1'b1),
    .dout(grp_fu_10046_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U130(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10074_p0),
    .din1(grp_fu_10074_p1),
    .ce(1'b1),
    .dout(grp_fu_10074_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U131(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10121_p0),
    .din1(grp_fu_10121_p1),
    .ce(1'b1),
    .dout(grp_fu_10121_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U132(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10153_p0),
    .din1(grp_fu_10153_p1),
    .ce(1'b1),
    .dout(grp_fu_10153_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U133(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10181_p0),
    .din1(grp_fu_10181_p1),
    .ce(1'b1),
    .dout(grp_fu_10181_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U134(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10228_p0),
    .din1(grp_fu_10228_p1),
    .ce(1'b1),
    .dout(grp_fu_10228_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U135(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10260_p0),
    .din1(grp_fu_10260_p1),
    .ce(1'b1),
    .dout(grp_fu_10260_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U136(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10288_p0),
    .din1(grp_fu_10288_p1),
    .ce(1'b1),
    .dout(grp_fu_10288_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U137(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10335_p0),
    .din1(grp_fu_10335_p1),
    .ce(1'b1),
    .dout(grp_fu_10335_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U138(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10367_p0),
    .din1(grp_fu_10367_p1),
    .ce(1'b1),
    .dout(grp_fu_10367_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U139(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10395_p0),
    .din1(grp_fu_10395_p1),
    .ce(1'b1),
    .dout(grp_fu_10395_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10442_p0),
    .din1(grp_fu_10442_p1),
    .ce(1'b1),
    .dout(grp_fu_10442_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U141(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10474_p0),
    .din1(grp_fu_10474_p1),
    .ce(1'b1),
    .dout(grp_fu_10474_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10502_p0),
    .din1(grp_fu_10502_p1),
    .ce(1'b1),
    .dout(grp_fu_10502_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10549_p0),
    .din1(grp_fu_10549_p1),
    .ce(1'b1),
    .dout(grp_fu_10549_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10581_p0),
    .din1(grp_fu_10581_p1),
    .ce(1'b1),
    .dout(grp_fu_10581_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U145(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10609_p0),
    .din1(grp_fu_10609_p1),
    .ce(1'b1),
    .dout(grp_fu_10609_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10656_p0),
    .din1(grp_fu_10656_p1),
    .ce(1'b1),
    .dout(grp_fu_10656_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10688_p0),
    .din1(grp_fu_10688_p1),
    .ce(1'b1),
    .dout(grp_fu_10688_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U148(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10716_p0),
    .din1(grp_fu_10716_p1),
    .ce(1'b1),
    .dout(grp_fu_10716_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U149(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10763_p0),
    .din1(grp_fu_10763_p1),
    .ce(1'b1),
    .dout(grp_fu_10763_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10795_p0),
    .din1(grp_fu_10795_p1),
    .ce(1'b1),
    .dout(grp_fu_10795_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10823_p0),
    .din1(grp_fu_10823_p1),
    .ce(1'b1),
    .dout(grp_fu_10823_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10870_p0),
    .din1(grp_fu_10870_p1),
    .ce(1'b1),
    .dout(grp_fu_10870_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U153(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10927_p0),
    .din1(grp_fu_10927_p1),
    .ce(1'b1),
    .dout(grp_fu_10927_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U154(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_10965_p0),
    .din1(grp_fu_10965_p1),
    .ce(1'b1),
    .dout(grp_fu_10965_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U155(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11013_p0),
    .din1(grp_fu_11013_p1),
    .ce(1'b1),
    .dout(grp_fu_11013_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11051_p0),
    .din1(grp_fu_11051_p1),
    .ce(1'b1),
    .dout(grp_fu_11051_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11099_p0),
    .din1(grp_fu_11099_p1),
    .ce(1'b1),
    .dout(grp_fu_11099_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11137_p0),
    .din1(grp_fu_11137_p1),
    .ce(1'b1),
    .dout(grp_fu_11137_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11185_p0),
    .din1(grp_fu_11185_p1),
    .ce(1'b1),
    .dout(grp_fu_11185_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11223_p0),
    .din1(grp_fu_11223_p1),
    .ce(1'b1),
    .dout(grp_fu_11223_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11271_p0),
    .din1(grp_fu_11271_p1),
    .ce(1'b1),
    .dout(grp_fu_11271_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U162(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11309_p0),
    .din1(grp_fu_11309_p1),
    .ce(1'b1),
    .dout(grp_fu_11309_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11357_p0),
    .din1(grp_fu_11357_p1),
    .ce(1'b1),
    .dout(grp_fu_11357_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11395_p0),
    .din1(grp_fu_11395_p1),
    .ce(1'b1),
    .dout(grp_fu_11395_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U165(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11443_p0),
    .din1(grp_fu_11443_p1),
    .ce(1'b1),
    .dout(grp_fu_11443_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11481_p0),
    .din1(grp_fu_11481_p1),
    .ce(1'b1),
    .dout(grp_fu_11481_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11529_p0),
    .din1(grp_fu_11529_p1),
    .ce(1'b1),
    .dout(grp_fu_11529_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11567_p0),
    .din1(grp_fu_11567_p1),
    .ce(1'b1),
    .dout(grp_fu_11567_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11615_p0),
    .din1(grp_fu_11615_p1),
    .ce(1'b1),
    .dout(grp_fu_11615_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11653_p0),
    .din1(grp_fu_11653_p1),
    .ce(1'b1),
    .dout(grp_fu_11653_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U171(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11701_p0),
    .din1(grp_fu_11701_p1),
    .ce(1'b1),
    .dout(grp_fu_11701_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11739_p0),
    .din1(grp_fu_11739_p1),
    .ce(1'b1),
    .dout(grp_fu_11739_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11765_p0),
    .din1(grp_fu_11765_p1),
    .ce(1'b1),
    .dout(grp_fu_11765_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11787_p0),
    .din1(grp_fu_11787_p1),
    .ce(1'b1),
    .dout(grp_fu_11787_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U175(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11825_p0),
    .din1(grp_fu_11825_p1),
    .ce(1'b1),
    .dout(grp_fu_11825_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11851_p0),
    .din1(grp_fu_11851_p1),
    .ce(1'b1),
    .dout(grp_fu_11851_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U177(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11873_p0),
    .din1(grp_fu_11873_p1),
    .ce(1'b1),
    .dout(grp_fu_11873_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U178(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11911_p0),
    .din1(grp_fu_11911_p1),
    .ce(1'b1),
    .dout(grp_fu_11911_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U179(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11937_p0),
    .din1(grp_fu_11937_p1),
    .ce(1'b1),
    .dout(grp_fu_11937_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U180(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11959_p0),
    .din1(grp_fu_11959_p1),
    .ce(1'b1),
    .dout(grp_fu_11959_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U181(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_11997_p0),
    .din1(grp_fu_11997_p1),
    .ce(1'b1),
    .dout(grp_fu_11997_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U182(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_12023_p0),
    .din1(grp_fu_12023_p1),
    .ce(1'b1),
    .dout(grp_fu_12023_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U183(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_12045_p0),
    .din1(grp_fu_12045_p1),
    .ce(1'b1),
    .dout(grp_fu_12045_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U184(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_12083_p0),
    .din1(grp_fu_12083_p1),
    .ce(1'b1),
    .dout(grp_fu_12083_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U185(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_12109_p0),
    .din1(grp_fu_12109_p1),
    .ce(1'b1),
    .dout(grp_fu_12109_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U186(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_12131_p0),
    .din1(grp_fu_12131_p1),
    .ce(1'b1),
    .dout(grp_fu_12131_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U187(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_12169_p0),
    .din1(grp_fu_12169_p1),
    .ce(1'b1),
    .dout(grp_fu_12169_p2)
);

PATCH_EMBED_mul_8s_8s_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_2_1_U188(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_12195_p0),
    .din1(grp_fu_12195_p1),
    .ce(1'b1),
    .dout(grp_fu_12195_p2)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U189(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16710_p0),
    .din1(grp_fu_16710_p1),
    .din2(grp_fu_6757_p2),
    .ce(1'b1),
    .dout(grp_fu_16710_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U190(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16719_p0),
    .din1(grp_fu_16719_p1),
    .din2(grp_fu_6797_p2),
    .ce(1'b1),
    .dout(grp_fu_16719_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U191(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16728_p0),
    .din1(grp_fu_16728_p1),
    .din2(grp_fu_6777_p2),
    .ce(1'b1),
    .dout(grp_fu_16728_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U192(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16737_p0),
    .din1(grp_fu_16737_p1),
    .din2(grp_fu_6850_p2),
    .ce(1'b1),
    .dout(grp_fu_16737_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U193(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16746_p0),
    .din1(grp_fu_16746_p1),
    .din2(grp_fu_6884_p2),
    .ce(1'b1),
    .dout(grp_fu_16746_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16755_p0),
    .din1(grp_fu_16755_p1),
    .din2(grp_fu_6867_p2),
    .ce(1'b1),
    .dout(grp_fu_16755_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U195(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16764_p0),
    .din1(grp_fu_16764_p1),
    .din2(grp_fu_6934_p2),
    .ce(1'b1),
    .dout(grp_fu_16764_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U196(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16773_p0),
    .din1(grp_fu_16773_p1),
    .din2(grp_fu_6968_p2),
    .ce(1'b1),
    .dout(grp_fu_16773_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U197(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16782_p0),
    .din1(grp_fu_16782_p1),
    .din2(grp_fu_6951_p2),
    .ce(1'b1),
    .dout(grp_fu_16782_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U198(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16791_p0),
    .din1(grp_fu_16791_p1),
    .din2(grp_fu_7018_p2),
    .ce(1'b1),
    .dout(grp_fu_16791_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U199(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16800_p0),
    .din1(grp_fu_16800_p1),
    .din2(grp_fu_7052_p2),
    .ce(1'b1),
    .dout(grp_fu_16800_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U200(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16809_p0),
    .din1(grp_fu_16809_p1),
    .din2(grp_fu_7035_p2),
    .ce(1'b1),
    .dout(grp_fu_16809_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U201(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16818_p0),
    .din1(grp_fu_16818_p1),
    .din2(grp_fu_7102_p2),
    .ce(1'b1),
    .dout(grp_fu_16818_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U202(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16827_p0),
    .din1(grp_fu_16827_p1),
    .din2(grp_fu_7136_p2),
    .ce(1'b1),
    .dout(grp_fu_16827_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U203(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16836_p0),
    .din1(grp_fu_16836_p1),
    .din2(grp_fu_7119_p2),
    .ce(1'b1),
    .dout(grp_fu_16836_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U204(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16845_p0),
    .din1(grp_fu_16845_p1),
    .din2(grp_fu_7186_p2),
    .ce(1'b1),
    .dout(grp_fu_16845_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U205(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16854_p0),
    .din1(grp_fu_16854_p1),
    .din2(grp_fu_7220_p2),
    .ce(1'b1),
    .dout(grp_fu_16854_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U206(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16863_p0),
    .din1(grp_fu_16863_p1),
    .din2(grp_fu_7203_p2),
    .ce(1'b1),
    .dout(grp_fu_16863_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U207(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16872_p0),
    .din1(grp_fu_16872_p1),
    .din2(grp_fu_7270_p2),
    .ce(1'b1),
    .dout(grp_fu_16872_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U208(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16881_p0),
    .din1(grp_fu_16881_p1),
    .din2(grp_fu_7304_p2),
    .ce(1'b1),
    .dout(grp_fu_16881_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U209(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16890_p0),
    .din1(grp_fu_16890_p1),
    .din2(grp_fu_7287_p2),
    .ce(1'b1),
    .dout(grp_fu_16890_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U210(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16899_p0),
    .din1(grp_fu_16899_p1),
    .din2(grp_fu_7354_p2),
    .ce(1'b1),
    .dout(grp_fu_16899_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U211(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16908_p0),
    .din1(grp_fu_16908_p1),
    .din2(grp_fu_7388_p2),
    .ce(1'b1),
    .dout(grp_fu_16908_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U212(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16917_p0),
    .din1(grp_fu_16917_p1),
    .din2(grp_fu_7371_p2),
    .ce(1'b1),
    .dout(grp_fu_16917_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U213(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16926_p0),
    .din1(grp_fu_16926_p1),
    .din2(grp_fu_7438_p2),
    .ce(1'b1),
    .dout(grp_fu_16926_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U214(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16935_p0),
    .din1(grp_fu_16935_p1),
    .din2(grp_fu_7472_p2),
    .ce(1'b1),
    .dout(grp_fu_16935_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U215(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16944_p0),
    .din1(grp_fu_16944_p1),
    .din2(grp_fu_7455_p2),
    .ce(1'b1),
    .dout(grp_fu_16944_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U216(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16953_p0),
    .din1(grp_fu_16953_p1),
    .din2(grp_fu_7522_p2),
    .ce(1'b1),
    .dout(grp_fu_16953_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U217(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16962_p0),
    .din1(grp_fu_16962_p1),
    .din2(grp_fu_7556_p2),
    .ce(1'b1),
    .dout(grp_fu_16962_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U218(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16971_p0),
    .din1(grp_fu_16971_p1),
    .din2(grp_fu_7539_p2),
    .ce(1'b1),
    .dout(grp_fu_16971_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U219(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16980_p0),
    .din1(grp_fu_16980_p1),
    .din2(grp_fu_7606_p2),
    .ce(1'b1),
    .dout(grp_fu_16980_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U220(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16989_p0),
    .din1(grp_fu_16989_p1),
    .din2(grp_fu_7640_p2),
    .ce(1'b1),
    .dout(grp_fu_16989_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U221(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_16998_p0),
    .din1(grp_fu_16998_p1),
    .din2(grp_fu_7623_p2),
    .ce(1'b1),
    .dout(grp_fu_16998_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U222(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17007_p0),
    .din1(grp_fu_17007_p1),
    .din2(grp_fu_7690_p2),
    .ce(1'b1),
    .dout(grp_fu_17007_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U223(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17016_p0),
    .din1(grp_fu_17016_p1),
    .din2(grp_fu_7724_p2),
    .ce(1'b1),
    .dout(grp_fu_17016_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U224(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17025_p0),
    .din1(grp_fu_17025_p1),
    .din2(grp_fu_7707_p2),
    .ce(1'b1),
    .dout(grp_fu_17025_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U225(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17034_p0),
    .din1(grp_fu_17034_p1),
    .din2(grp_fu_7774_p2),
    .ce(1'b1),
    .dout(grp_fu_17034_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U226(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17043_p0),
    .din1(grp_fu_17043_p1),
    .din2(grp_fu_7808_p2),
    .ce(1'b1),
    .dout(grp_fu_17043_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U227(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17052_p0),
    .din1(grp_fu_17052_p1),
    .din2(grp_fu_7791_p2),
    .ce(1'b1),
    .dout(grp_fu_17052_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U228(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17061_p0),
    .din1(grp_fu_17061_p1),
    .din2(grp_fu_7858_p2),
    .ce(1'b1),
    .dout(grp_fu_17061_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U229(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17070_p0),
    .din1(grp_fu_17070_p1),
    .din2(grp_fu_7892_p2),
    .ce(1'b1),
    .dout(grp_fu_17070_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U230(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17079_p0),
    .din1(grp_fu_17079_p1),
    .din2(grp_fu_7875_p2),
    .ce(1'b1),
    .dout(grp_fu_17079_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U231(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17088_p0),
    .din1(grp_fu_17088_p1),
    .din2(grp_fu_7942_p2),
    .ce(1'b1),
    .dout(grp_fu_17088_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U232(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17097_p0),
    .din1(grp_fu_17097_p1),
    .din2(grp_fu_7976_p2),
    .ce(1'b1),
    .dout(grp_fu_17097_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U233(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17106_p0),
    .din1(grp_fu_17106_p1),
    .din2(grp_fu_7959_p2),
    .ce(1'b1),
    .dout(grp_fu_17106_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U234(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17115_p0),
    .din1(grp_fu_17115_p1),
    .din2(grp_fu_8026_p2),
    .ce(1'b1),
    .dout(grp_fu_17115_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U235(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17124_p0),
    .din1(grp_fu_17124_p1),
    .din2(grp_fu_8060_p2),
    .ce(1'b1),
    .dout(grp_fu_17124_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U236(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17133_p0),
    .din1(grp_fu_17133_p1),
    .din2(grp_fu_8043_p2),
    .ce(1'b1),
    .dout(grp_fu_17133_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U237(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17142_p0),
    .din1(grp_fu_17142_p1),
    .din2(grp_fu_8110_p2),
    .ce(1'b1),
    .dout(grp_fu_17142_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U238(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17151_p0),
    .din1(grp_fu_17151_p1),
    .din2(grp_fu_8144_p2),
    .ce(1'b1),
    .dout(grp_fu_17151_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U239(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17160_p0),
    .din1(grp_fu_17160_p1),
    .din2(grp_fu_8127_p2),
    .ce(1'b1),
    .dout(grp_fu_17160_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U240(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17169_p0),
    .din1(grp_fu_17169_p1),
    .din2(grp_fu_8177_p2),
    .ce(1'b1),
    .dout(grp_fu_17169_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U241(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17178_p0),
    .din1(grp_fu_17178_p1),
    .din2(grp_fu_8205_p2),
    .ce(1'b1),
    .dout(grp_fu_17178_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U242(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17187_p0),
    .din1(grp_fu_17187_p1),
    .din2(grp_fu_8191_p2),
    .ce(1'b1),
    .dout(grp_fu_17187_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U243(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17196_p0),
    .din1(grp_fu_17196_p1),
    .din2(grp_fu_8235_p2),
    .ce(1'b1),
    .dout(grp_fu_17196_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U244(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17205_p0),
    .din1(grp_fu_17205_p1),
    .din2(grp_fu_8263_p2),
    .ce(1'b1),
    .dout(grp_fu_17205_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U245(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17214_p0),
    .din1(grp_fu_17214_p1),
    .din2(grp_fu_8249_p2),
    .ce(1'b1),
    .dout(grp_fu_17214_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U246(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17223_p0),
    .din1(grp_fu_17223_p1),
    .din2(grp_fu_8293_p2),
    .ce(1'b1),
    .dout(grp_fu_17223_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U247(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17232_p0),
    .din1(grp_fu_17232_p1),
    .din2(grp_fu_8321_p2),
    .ce(1'b1),
    .dout(grp_fu_17232_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U248(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17241_p0),
    .din1(grp_fu_17241_p1),
    .din2(grp_fu_8307_p2),
    .ce(1'b1),
    .dout(grp_fu_17241_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U249(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17250_p0),
    .din1(grp_fu_17250_p1),
    .din2(grp_fu_8351_p2),
    .ce(1'b1),
    .dout(grp_fu_17250_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U250(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17259_p0),
    .din1(grp_fu_17259_p1),
    .din2(grp_fu_8379_p2),
    .ce(1'b1),
    .dout(grp_fu_17259_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U251(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17268_p0),
    .din1(grp_fu_17268_p1),
    .din2(grp_fu_8365_p2),
    .ce(1'b1),
    .dout(grp_fu_17268_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U252(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17277_p0),
    .din1(grp_fu_17277_p1),
    .din2(grp_fu_8409_p2),
    .ce(1'b1),
    .dout(grp_fu_17277_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U253(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17286_p0),
    .din1(grp_fu_17286_p1),
    .din2(grp_fu_8437_p2),
    .ce(1'b1),
    .dout(grp_fu_17286_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U254(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17295_p0),
    .din1(grp_fu_17295_p1),
    .din2(grp_fu_8423_p2),
    .ce(1'b1),
    .dout(grp_fu_17295_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U255(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17304_p0),
    .din1(grp_fu_17304_p1),
    .din2(grp_fu_8467_p2),
    .ce(1'b1),
    .dout(grp_fu_17304_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U256(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17313_p0),
    .din1(grp_fu_17313_p1),
    .din2(grp_fu_8495_p2),
    .ce(1'b1),
    .dout(grp_fu_17313_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U257(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17322_p0),
    .din1(grp_fu_17322_p1),
    .din2(grp_fu_8481_p2),
    .ce(1'b1),
    .dout(grp_fu_17322_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U258(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17331_p0),
    .din1(grp_fu_17331_p1),
    .din2(grp_fu_8525_p2),
    .ce(1'b1),
    .dout(grp_fu_17331_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U259(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17340_p0),
    .din1(grp_fu_17340_p1),
    .din2(grp_fu_8553_p2),
    .ce(1'b1),
    .dout(grp_fu_17340_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U260(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17349_p0),
    .din1(grp_fu_17349_p1),
    .din2(grp_fu_8539_p2),
    .ce(1'b1),
    .dout(grp_fu_17349_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U261(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17358_p0),
    .din1(grp_fu_17358_p1),
    .din2(grp_fu_8583_p2),
    .ce(1'b1),
    .dout(grp_fu_17358_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U262(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17367_p0),
    .din1(grp_fu_17367_p1),
    .din2(grp_fu_8611_p2),
    .ce(1'b1),
    .dout(grp_fu_17367_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U263(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17376_p0),
    .din1(grp_fu_17376_p1),
    .din2(grp_fu_8597_p2),
    .ce(1'b1),
    .dout(grp_fu_17376_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U264(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17385_p0),
    .din1(grp_fu_17385_p1),
    .din2(grp_fu_8641_p2),
    .ce(1'b1),
    .dout(grp_fu_17385_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U265(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17394_p0),
    .din1(grp_fu_17394_p1),
    .din2(grp_fu_8669_p2),
    .ce(1'b1),
    .dout(grp_fu_17394_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U266(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17403_p0),
    .din1(grp_fu_17403_p1),
    .din2(grp_fu_8655_p2),
    .ce(1'b1),
    .dout(grp_fu_17403_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U267(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17412_p0),
    .din1(grp_fu_17412_p1),
    .din2(grp_fu_8699_p2),
    .ce(1'b1),
    .dout(grp_fu_17412_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U268(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17421_p0),
    .din1(grp_fu_17421_p1),
    .din2(grp_fu_8727_p2),
    .ce(1'b1),
    .dout(grp_fu_17421_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U269(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17430_p0),
    .din1(grp_fu_17430_p1),
    .din2(grp_fu_8713_p2),
    .ce(1'b1),
    .dout(grp_fu_17430_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U270(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17439_p0),
    .din1(grp_fu_17439_p1),
    .din2(grp_fu_8765_p2),
    .ce(1'b1),
    .dout(grp_fu_17439_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U271(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17448_p0),
    .din1(grp_fu_17448_p1),
    .din2(grp_fu_8793_p2),
    .ce(1'b1),
    .dout(grp_fu_17448_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U272(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17457_p0),
    .din1(grp_fu_17457_p1),
    .din2(grp_fu_8779_p2),
    .ce(1'b1),
    .dout(grp_fu_17457_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U273(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17466_p0),
    .din1(grp_fu_17466_p1),
    .din2(grp_fu_8831_p2),
    .ce(1'b1),
    .dout(grp_fu_17466_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U274(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17475_p0),
    .din1(grp_fu_17475_p1),
    .din2(grp_fu_8859_p2),
    .ce(1'b1),
    .dout(grp_fu_17475_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U275(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17484_p0),
    .din1(grp_fu_17484_p1),
    .din2(grp_fu_8845_p2),
    .ce(1'b1),
    .dout(grp_fu_17484_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U276(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17493_p0),
    .din1(grp_fu_17493_p1),
    .din2(grp_fu_8897_p2),
    .ce(1'b1),
    .dout(grp_fu_17493_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U277(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17502_p0),
    .din1(grp_fu_17502_p1),
    .din2(grp_fu_8925_p2),
    .ce(1'b1),
    .dout(grp_fu_17502_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U278(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17511_p0),
    .din1(grp_fu_17511_p1),
    .din2(grp_fu_8911_p2),
    .ce(1'b1),
    .dout(grp_fu_17511_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U279(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17520_p0),
    .din1(grp_fu_17520_p1),
    .din2(grp_fu_8963_p2),
    .ce(1'b1),
    .dout(grp_fu_17520_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U280(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17529_p0),
    .din1(grp_fu_17529_p1),
    .din2(grp_fu_8991_p2),
    .ce(1'b1),
    .dout(grp_fu_17529_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U281(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17538_p0),
    .din1(grp_fu_17538_p1),
    .din2(grp_fu_8977_p2),
    .ce(1'b1),
    .dout(grp_fu_17538_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U282(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17547_p0),
    .din1(grp_fu_17547_p1),
    .din2(grp_fu_9029_p2),
    .ce(1'b1),
    .dout(grp_fu_17547_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U283(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17556_p0),
    .din1(grp_fu_17556_p1),
    .din2(grp_fu_9057_p2),
    .ce(1'b1),
    .dout(grp_fu_17556_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U284(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17565_p0),
    .din1(grp_fu_17565_p1),
    .din2(grp_fu_9043_p2),
    .ce(1'b1),
    .dout(grp_fu_17565_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U285(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17574_p0),
    .din1(grp_fu_17574_p1),
    .din2(grp_fu_9149_p2),
    .ce(1'b1),
    .dout(grp_fu_17574_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U286(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17583_p0),
    .din1(grp_fu_17583_p1),
    .din2(grp_fu_9093_p2),
    .ce(1'b1),
    .dout(grp_fu_17583_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U287(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_46_reg_19869),
    .din1(grp_fu_17592_p1),
    .din2(grp_fu_9187_p2),
    .ce(1'b1),
    .dout(grp_fu_17592_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U288(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17600_p0),
    .din1(grp_fu_17600_p1),
    .din2(grp_fu_9265_p2),
    .ce(1'b1),
    .dout(grp_fu_17600_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U289(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17609_p0),
    .din1(grp_fu_17609_p1),
    .din2(grp_fu_9218_p2),
    .ce(1'b1),
    .dout(grp_fu_17609_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U290(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_62_reg_19952),
    .din1(grp_fu_17618_p1),
    .din2(grp_fu_9297_p2),
    .ce(1'b1),
    .dout(grp_fu_17618_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U291(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17626_p0),
    .din1(grp_fu_17626_p1),
    .din2(grp_fu_9372_p2),
    .ce(1'b1),
    .dout(grp_fu_17626_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U292(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17635_p0),
    .din1(grp_fu_17635_p1),
    .din2(grp_fu_9325_p2),
    .ce(1'b1),
    .dout(grp_fu_17635_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U293(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_78_reg_20035),
    .din1(grp_fu_17644_p1),
    .din2(grp_fu_9404_p2),
    .ce(1'b1),
    .dout(grp_fu_17644_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U294(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17652_p0),
    .din1(grp_fu_17652_p1),
    .din2(grp_fu_9479_p2),
    .ce(1'b1),
    .dout(grp_fu_17652_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U295(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17661_p0),
    .din1(grp_fu_17661_p1),
    .din2(grp_fu_9432_p2),
    .ce(1'b1),
    .dout(grp_fu_17661_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U296(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_94_reg_20118),
    .din1(grp_fu_17670_p1),
    .din2(grp_fu_9511_p2),
    .ce(1'b1),
    .dout(grp_fu_17670_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U297(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17678_p0),
    .din1(grp_fu_17678_p1),
    .din2(grp_fu_9586_p2),
    .ce(1'b1),
    .dout(grp_fu_17678_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U298(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17687_p0),
    .din1(grp_fu_17687_p1),
    .din2(grp_fu_9539_p2),
    .ce(1'b1),
    .dout(grp_fu_17687_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U299(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_110_reg_20201),
    .din1(grp_fu_17696_p1),
    .din2(grp_fu_9618_p2),
    .ce(1'b1),
    .dout(grp_fu_17696_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U300(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17704_p0),
    .din1(grp_fu_17704_p1),
    .din2(grp_fu_9693_p2),
    .ce(1'b1),
    .dout(grp_fu_17704_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U301(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17713_p0),
    .din1(grp_fu_17713_p1),
    .din2(grp_fu_9646_p2),
    .ce(1'b1),
    .dout(grp_fu_17713_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U302(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_126_reg_20284),
    .din1(grp_fu_17722_p1),
    .din2(grp_fu_9725_p2),
    .ce(1'b1),
    .dout(grp_fu_17722_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U303(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17730_p0),
    .din1(grp_fu_17730_p1),
    .din2(grp_fu_9800_p2),
    .ce(1'b1),
    .dout(grp_fu_17730_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U304(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17739_p0),
    .din1(grp_fu_17739_p1),
    .din2(grp_fu_9753_p2),
    .ce(1'b1),
    .dout(grp_fu_17739_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U305(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_142_reg_20367),
    .din1(grp_fu_17748_p1),
    .din2(grp_fu_9832_p2),
    .ce(1'b1),
    .dout(grp_fu_17748_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U306(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17756_p0),
    .din1(grp_fu_17756_p1),
    .din2(grp_fu_9907_p2),
    .ce(1'b1),
    .dout(grp_fu_17756_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U307(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17765_p0),
    .din1(grp_fu_17765_p1),
    .din2(grp_fu_9860_p2),
    .ce(1'b1),
    .dout(grp_fu_17765_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U308(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_158_reg_20450),
    .din1(grp_fu_17774_p1),
    .din2(grp_fu_9939_p2),
    .ce(1'b1),
    .dout(grp_fu_17774_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U309(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17782_p0),
    .din1(grp_fu_17782_p1),
    .din2(grp_fu_10014_p2),
    .ce(1'b1),
    .dout(grp_fu_17782_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U310(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17791_p0),
    .din1(grp_fu_17791_p1),
    .din2(grp_fu_9967_p2),
    .ce(1'b1),
    .dout(grp_fu_17791_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U311(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_174_reg_20533),
    .din1(grp_fu_17800_p1),
    .din2(grp_fu_10046_p2),
    .ce(1'b1),
    .dout(grp_fu_17800_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U312(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17808_p0),
    .din1(grp_fu_17808_p1),
    .din2(grp_fu_10121_p2),
    .ce(1'b1),
    .dout(grp_fu_17808_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U313(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17817_p0),
    .din1(grp_fu_17817_p1),
    .din2(grp_fu_10074_p2),
    .ce(1'b1),
    .dout(grp_fu_17817_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U314(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_190_reg_20616),
    .din1(grp_fu_17826_p1),
    .din2(grp_fu_10153_p2),
    .ce(1'b1),
    .dout(grp_fu_17826_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U315(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17834_p0),
    .din1(grp_fu_17834_p1),
    .din2(grp_fu_10228_p2),
    .ce(1'b1),
    .dout(grp_fu_17834_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U316(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17843_p0),
    .din1(grp_fu_17843_p1),
    .din2(grp_fu_10181_p2),
    .ce(1'b1),
    .dout(grp_fu_17843_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U317(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17852_p0),
    .din1(grp_fu_17852_p1),
    .din2(grp_fu_10260_p2),
    .ce(1'b1),
    .dout(grp_fu_17852_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U318(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17860_p0),
    .din1(grp_fu_17860_p1),
    .din2(grp_fu_10335_p2),
    .ce(1'b1),
    .dout(grp_fu_17860_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U319(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17869_p0),
    .din1(grp_fu_17869_p1),
    .din2(grp_fu_10288_p2),
    .ce(1'b1),
    .dout(grp_fu_17869_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U320(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17878_p0),
    .din1(grp_fu_17878_p1),
    .din2(grp_fu_10367_p2),
    .ce(1'b1),
    .dout(grp_fu_17878_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U321(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17886_p0),
    .din1(grp_fu_17886_p1),
    .din2(grp_fu_10442_p2),
    .ce(1'b1),
    .dout(grp_fu_17886_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U322(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17895_p0),
    .din1(grp_fu_17895_p1),
    .din2(grp_fu_10395_p2),
    .ce(1'b1),
    .dout(grp_fu_17895_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U323(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17904_p0),
    .din1(grp_fu_17904_p1),
    .din2(grp_fu_10474_p2),
    .ce(1'b1),
    .dout(grp_fu_17904_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U324(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17912_p0),
    .din1(grp_fu_17912_p1),
    .din2(grp_fu_10549_p2),
    .ce(1'b1),
    .dout(grp_fu_17912_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U325(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17921_p0),
    .din1(grp_fu_17921_p1),
    .din2(grp_fu_10502_p2),
    .ce(1'b1),
    .dout(grp_fu_17921_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U326(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17930_p0),
    .din1(grp_fu_17930_p1),
    .din2(grp_fu_10581_p2),
    .ce(1'b1),
    .dout(grp_fu_17930_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U327(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17938_p0),
    .din1(grp_fu_17938_p1),
    .din2(grp_fu_10656_p2),
    .ce(1'b1),
    .dout(grp_fu_17938_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U328(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17947_p0),
    .din1(grp_fu_17947_p1),
    .din2(grp_fu_10609_p2),
    .ce(1'b1),
    .dout(grp_fu_17947_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U329(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17956_p0),
    .din1(grp_fu_17956_p1),
    .din2(grp_fu_10688_p2),
    .ce(1'b1),
    .dout(grp_fu_17956_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U330(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17964_p0),
    .din1(grp_fu_17964_p1),
    .din2(grp_fu_10763_p2),
    .ce(1'b1),
    .dout(grp_fu_17964_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U331(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17973_p0),
    .din1(grp_fu_17973_p1),
    .din2(grp_fu_10716_p2),
    .ce(1'b1),
    .dout(grp_fu_17973_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U332(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17982_p0),
    .din1(grp_fu_17982_p1),
    .din2(grp_fu_10795_p2),
    .ce(1'b1),
    .dout(grp_fu_17982_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U333(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17990_p0),
    .din1(grp_fu_17990_p1),
    .din2(grp_fu_10870_p2),
    .ce(1'b1),
    .dout(grp_fu_17990_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U334(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_17999_p0),
    .din1(grp_fu_17999_p1),
    .din2(grp_fu_10823_p2),
    .ce(1'b1),
    .dout(grp_fu_17999_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U335(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18008_p0),
    .din1(grp_fu_18008_p1),
    .din2(grp_fu_10965_p2),
    .ce(1'b1),
    .dout(grp_fu_18008_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U336(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18017_p0),
    .din1(grp_fu_18017_p1),
    .din2(grp_fu_10927_p2),
    .ce(1'b1),
    .dout(grp_fu_18017_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U337(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18026_p0),
    .din1(grp_fu_18026_p1),
    .din2(grp_fu_11051_p2),
    .ce(1'b1),
    .dout(grp_fu_18026_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U338(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18035_p0),
    .din1(grp_fu_18035_p1),
    .din2(grp_fu_11013_p2),
    .ce(1'b1),
    .dout(grp_fu_18035_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U339(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18044_p0),
    .din1(grp_fu_18044_p1),
    .din2(grp_fu_11137_p2),
    .ce(1'b1),
    .dout(grp_fu_18044_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U340(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18053_p0),
    .din1(grp_fu_18053_p1),
    .din2(grp_fu_11099_p2),
    .ce(1'b1),
    .dout(grp_fu_18053_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U341(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18062_p0),
    .din1(grp_fu_18062_p1),
    .din2(grp_fu_11223_p2),
    .ce(1'b1),
    .dout(grp_fu_18062_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U342(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18071_p0),
    .din1(grp_fu_18071_p1),
    .din2(grp_fu_11185_p2),
    .ce(1'b1),
    .dout(grp_fu_18071_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U343(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18080_p0),
    .din1(grp_fu_18080_p1),
    .din2(grp_fu_11309_p2),
    .ce(1'b1),
    .dout(grp_fu_18080_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U344(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18089_p0),
    .din1(grp_fu_18089_p1),
    .din2(grp_fu_11271_p2),
    .ce(1'b1),
    .dout(grp_fu_18089_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U345(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18098_p0),
    .din1(grp_fu_18098_p1),
    .din2(grp_fu_11395_p2),
    .ce(1'b1),
    .dout(grp_fu_18098_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U346(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18107_p0),
    .din1(grp_fu_18107_p1),
    .din2(grp_fu_11357_p2),
    .ce(1'b1),
    .dout(grp_fu_18107_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U347(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18116_p0),
    .din1(grp_fu_18116_p1),
    .din2(grp_fu_11481_p2),
    .ce(1'b1),
    .dout(grp_fu_18116_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U348(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18125_p0),
    .din1(grp_fu_18125_p1),
    .din2(grp_fu_11443_p2),
    .ce(1'b1),
    .dout(grp_fu_18125_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U349(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18134_p0),
    .din1(grp_fu_18134_p1),
    .din2(grp_fu_11567_p2),
    .ce(1'b1),
    .dout(grp_fu_18134_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U350(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18143_p0),
    .din1(grp_fu_18143_p1),
    .din2(grp_fu_11529_p2),
    .ce(1'b1),
    .dout(grp_fu_18143_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U351(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18152_p0),
    .din1(grp_fu_18152_p1),
    .din2(grp_fu_11653_p2),
    .ce(1'b1),
    .dout(grp_fu_18152_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U352(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18161_p0),
    .din1(grp_fu_18161_p1),
    .din2(grp_fu_11615_p2),
    .ce(1'b1),
    .dout(grp_fu_18161_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U353(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18170_p0),
    .din1(grp_fu_18170_p1),
    .din2(grp_fu_11739_p2),
    .ce(1'b1),
    .dout(grp_fu_18170_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U354(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18179_p0),
    .din1(grp_fu_18179_p1),
    .din2(grp_fu_11701_p2),
    .ce(1'b1),
    .dout(grp_fu_18179_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U355(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18188_p0),
    .din1(grp_fu_18188_p1),
    .din2(grp_fu_11765_p2),
    .ce(1'b1),
    .dout(grp_fu_18188_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U356(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18196_p0),
    .din1(grp_fu_18196_p1),
    .din2(grp_fu_11825_p2),
    .ce(1'b1),
    .dout(grp_fu_18196_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U357(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18205_p0),
    .din1(grp_fu_18205_p1),
    .din2(grp_fu_11787_p2),
    .ce(1'b1),
    .dout(grp_fu_18205_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U358(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18214_p0),
    .din1(grp_fu_18214_p1),
    .din2(grp_fu_11851_p2),
    .ce(1'b1),
    .dout(grp_fu_18214_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U359(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18222_p0),
    .din1(grp_fu_18222_p1),
    .din2(grp_fu_11911_p2),
    .ce(1'b1),
    .dout(grp_fu_18222_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U360(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18231_p0),
    .din1(grp_fu_18231_p1),
    .din2(grp_fu_11873_p2),
    .ce(1'b1),
    .dout(grp_fu_18231_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U361(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18240_p0),
    .din1(grp_fu_18240_p1),
    .din2(grp_fu_11937_p2),
    .ce(1'b1),
    .dout(grp_fu_18240_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U362(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18248_p0),
    .din1(grp_fu_18248_p1),
    .din2(grp_fu_11997_p2),
    .ce(1'b1),
    .dout(grp_fu_18248_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U363(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18257_p0),
    .din1(grp_fu_18257_p1),
    .din2(grp_fu_11959_p2),
    .ce(1'b1),
    .dout(grp_fu_18257_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U364(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18266_p0),
    .din1(grp_fu_18266_p1),
    .din2(grp_fu_12023_p2),
    .ce(1'b1),
    .dout(grp_fu_18266_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U365(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18274_p0),
    .din1(grp_fu_18274_p1),
    .din2(grp_fu_12083_p2),
    .ce(1'b1),
    .dout(grp_fu_18274_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U366(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18283_p0),
    .din1(grp_fu_18283_p1),
    .din2(grp_fu_12045_p2),
    .ce(1'b1),
    .dout(grp_fu_18283_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U367(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18292_p0),
    .din1(grp_fu_18292_p1),
    .din2(grp_fu_12109_p2),
    .ce(1'b1),
    .dout(grp_fu_18292_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U368(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18300_p0),
    .din1(grp_fu_18300_p1),
    .din2(grp_fu_12169_p2),
    .ce(1'b1),
    .dout(grp_fu_18300_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U369(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18309_p0),
    .din1(grp_fu_18309_p1),
    .din2(grp_fu_12131_p2),
    .ce(1'b1),
    .dout(grp_fu_18309_p3)
);

PATCH_EMBED_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U370(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18318_p0),
    .din1(grp_fu_18318_p1),
    .din2(grp_fu_12195_p2),
    .ce(1'b1),
    .dout(grp_fu_18318_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U371(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18326_p0),
    .din1(grp_fu_18326_p1),
    .din2(grp_fu_18326_p2),
    .din3(grp_fu_18326_p3),
    .din4(grp_fu_18326_p4),
    .din5(grp_fu_18326_p5),
    .din6(grp_fu_16710_p3),
    .ce(1'b1),
    .dout(grp_fu_18326_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U372(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18343_p0),
    .din1(grp_fu_18343_p1),
    .din2(grp_fu_18343_p2),
    .ce(1'b1),
    .dout(grp_fu_18343_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U373(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18352_p0),
    .din1(grp_fu_18352_p1),
    .din2(grp_fu_18352_p2),
    .din3(grp_fu_18352_p3),
    .din4(grp_fu_18352_p4),
    .din5(grp_fu_18352_p5),
    .din6(grp_fu_16737_p3),
    .ce(1'b1),
    .dout(grp_fu_18352_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U374(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18369_p0),
    .din1(grp_fu_18369_p1),
    .din2(grp_fu_18369_p2),
    .ce(1'b1),
    .dout(grp_fu_18369_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U375(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18378_p0),
    .din1(grp_fu_18378_p1),
    .din2(grp_fu_18378_p2),
    .din3(grp_fu_18378_p3),
    .din4(grp_fu_18378_p4),
    .din5(grp_fu_18378_p5),
    .din6(grp_fu_16764_p3),
    .ce(1'b1),
    .dout(grp_fu_18378_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U376(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18395_p0),
    .din1(grp_fu_18395_p1),
    .din2(grp_fu_18395_p2),
    .ce(1'b1),
    .dout(grp_fu_18395_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U377(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18404_p0),
    .din1(grp_fu_18404_p1),
    .din2(grp_fu_18404_p2),
    .din3(grp_fu_18404_p3),
    .din4(grp_fu_18404_p4),
    .din5(grp_fu_18404_p5),
    .din6(grp_fu_16791_p3),
    .ce(1'b1),
    .dout(grp_fu_18404_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U378(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18421_p0),
    .din1(grp_fu_18421_p1),
    .din2(grp_fu_18421_p2),
    .ce(1'b1),
    .dout(grp_fu_18421_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U379(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18430_p0),
    .din1(grp_fu_18430_p1),
    .din2(grp_fu_18430_p2),
    .din3(grp_fu_18430_p3),
    .din4(grp_fu_18430_p4),
    .din5(grp_fu_18430_p5),
    .din6(grp_fu_16818_p3),
    .ce(1'b1),
    .dout(grp_fu_18430_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U380(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18447_p0),
    .din1(grp_fu_18447_p1),
    .din2(grp_fu_18447_p2),
    .ce(1'b1),
    .dout(grp_fu_18447_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U381(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18456_p0),
    .din1(grp_fu_18456_p1),
    .din2(grp_fu_18456_p2),
    .din3(grp_fu_18456_p3),
    .din4(grp_fu_18456_p4),
    .din5(grp_fu_18456_p5),
    .din6(grp_fu_16845_p3),
    .ce(1'b1),
    .dout(grp_fu_18456_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U382(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18473_p0),
    .din1(grp_fu_18473_p1),
    .din2(grp_fu_18473_p2),
    .ce(1'b1),
    .dout(grp_fu_18473_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U383(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18482_p0),
    .din1(grp_fu_18482_p1),
    .din2(grp_fu_18482_p2),
    .din3(grp_fu_18482_p3),
    .din4(grp_fu_18482_p4),
    .din5(grp_fu_18482_p5),
    .din6(grp_fu_16872_p3),
    .ce(1'b1),
    .dout(grp_fu_18482_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U384(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18499_p0),
    .din1(grp_fu_18499_p1),
    .din2(grp_fu_18499_p2),
    .ce(1'b1),
    .dout(grp_fu_18499_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U385(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18508_p0),
    .din1(grp_fu_18508_p1),
    .din2(grp_fu_18508_p2),
    .din3(grp_fu_18508_p3),
    .din4(grp_fu_18508_p4),
    .din5(grp_fu_18508_p5),
    .din6(grp_fu_16899_p3),
    .ce(1'b1),
    .dout(grp_fu_18508_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U386(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18525_p0),
    .din1(grp_fu_18525_p1),
    .din2(grp_fu_18525_p2),
    .ce(1'b1),
    .dout(grp_fu_18525_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U387(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18534_p0),
    .din1(grp_fu_18534_p1),
    .din2(grp_fu_18534_p2),
    .din3(grp_fu_18534_p3),
    .din4(grp_fu_18534_p4),
    .din5(grp_fu_18534_p5),
    .din6(grp_fu_16926_p3),
    .ce(1'b1),
    .dout(grp_fu_18534_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U388(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18551_p0),
    .din1(grp_fu_18551_p1),
    .din2(grp_fu_18551_p2),
    .ce(1'b1),
    .dout(grp_fu_18551_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U389(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18560_p0),
    .din1(grp_fu_18560_p1),
    .din2(grp_fu_18560_p2),
    .din3(grp_fu_18560_p3),
    .din4(grp_fu_18560_p4),
    .din5(grp_fu_18560_p5),
    .din6(grp_fu_16953_p3),
    .ce(1'b1),
    .dout(grp_fu_18560_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U390(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18577_p0),
    .din1(grp_fu_18577_p1),
    .din2(grp_fu_18577_p2),
    .ce(1'b1),
    .dout(grp_fu_18577_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U391(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18586_p0),
    .din1(grp_fu_18586_p1),
    .din2(grp_fu_18586_p2),
    .din3(grp_fu_18586_p3),
    .din4(grp_fu_18586_p4),
    .din5(grp_fu_18586_p5),
    .din6(grp_fu_16980_p3),
    .ce(1'b1),
    .dout(grp_fu_18586_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U392(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18603_p0),
    .din1(grp_fu_18603_p1),
    .din2(grp_fu_18603_p2),
    .ce(1'b1),
    .dout(grp_fu_18603_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U393(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18612_p0),
    .din1(grp_fu_18612_p1),
    .din2(grp_fu_18612_p2),
    .din3(grp_fu_18612_p3),
    .din4(grp_fu_18612_p4),
    .din5(grp_fu_18612_p5),
    .din6(grp_fu_17007_p3),
    .ce(1'b1),
    .dout(grp_fu_18612_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U394(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18629_p0),
    .din1(grp_fu_18629_p1),
    .din2(grp_fu_18629_p2),
    .ce(1'b1),
    .dout(grp_fu_18629_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U395(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18638_p0),
    .din1(grp_fu_18638_p1),
    .din2(grp_fu_18638_p2),
    .din3(grp_fu_18638_p3),
    .din4(grp_fu_18638_p4),
    .din5(grp_fu_18638_p5),
    .din6(grp_fu_17034_p3),
    .ce(1'b1),
    .dout(grp_fu_18638_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U396(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18655_p0),
    .din1(grp_fu_18655_p1),
    .din2(grp_fu_18655_p2),
    .ce(1'b1),
    .dout(grp_fu_18655_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U397(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18664_p0),
    .din1(grp_fu_18664_p1),
    .din2(grp_fu_18664_p2),
    .din3(grp_fu_18664_p3),
    .din4(grp_fu_18664_p4),
    .din5(grp_fu_18664_p5),
    .din6(grp_fu_17061_p3),
    .ce(1'b1),
    .dout(grp_fu_18664_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U398(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18681_p0),
    .din1(grp_fu_18681_p1),
    .din2(grp_fu_18681_p2),
    .ce(1'b1),
    .dout(grp_fu_18681_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U399(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18690_p0),
    .din1(grp_fu_18690_p1),
    .din2(grp_fu_18690_p2),
    .din3(grp_fu_18690_p3),
    .din4(grp_fu_18690_p4),
    .din5(grp_fu_18690_p5),
    .din6(grp_fu_17088_p3),
    .ce(1'b1),
    .dout(grp_fu_18690_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U400(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18707_p0),
    .din1(grp_fu_18707_p1),
    .din2(grp_fu_18707_p2),
    .ce(1'b1),
    .dout(grp_fu_18707_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U401(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18716_p0),
    .din1(grp_fu_18716_p1),
    .din2(grp_fu_18716_p2),
    .din3(grp_fu_18716_p3),
    .din4(grp_fu_18716_p4),
    .din5(grp_fu_18716_p5),
    .din6(grp_fu_17115_p3),
    .ce(1'b1),
    .dout(grp_fu_18716_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U402(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18733_p0),
    .din1(grp_fu_18733_p1),
    .din2(grp_fu_18733_p2),
    .ce(1'b1),
    .dout(grp_fu_18733_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U403(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18742_p0),
    .din1(grp_fu_18742_p1),
    .din2(grp_fu_18742_p2),
    .din3(grp_fu_18742_p3),
    .din4(grp_fu_18742_p4),
    .din5(grp_fu_18742_p5),
    .din6(grp_fu_17142_p3),
    .ce(1'b1),
    .dout(grp_fu_18742_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U404(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18759_p0),
    .din1(grp_fu_18759_p1),
    .din2(grp_fu_18759_p2),
    .din3(grp_fu_18759_p3),
    .din4(grp_fu_18759_p4),
    .din5(grp_fu_18759_p5),
    .din6(add_ln161_261_fu_12815_p2),
    .ce(1'b1),
    .dout(grp_fu_18759_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U405(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18774_p0),
    .din1(grp_fu_18774_p1),
    .din2(grp_fu_18774_p2),
    .din3(grp_fu_18774_p3),
    .din4(grp_fu_18774_p4),
    .din5(grp_fu_18774_p5),
    .din6(grp_fu_17169_p3),
    .ce(1'b1),
    .dout(grp_fu_18774_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U406(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18791_p0),
    .din1(grp_fu_18791_p1),
    .din2(grp_fu_18791_p2),
    .din3(grp_fu_18791_p3),
    .din4(grp_fu_18791_p4),
    .din5(grp_fu_18791_p5),
    .din6(add_ln161_277_fu_12842_p2),
    .ce(1'b1),
    .dout(grp_fu_18791_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U407(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18806_p0),
    .din1(grp_fu_18806_p1),
    .din2(grp_fu_18806_p2),
    .din3(grp_fu_18806_p3),
    .din4(grp_fu_18806_p4),
    .din5(grp_fu_18806_p5),
    .din6(grp_fu_17196_p3),
    .ce(1'b1),
    .dout(grp_fu_18806_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U408(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18823_p0),
    .din1(grp_fu_18823_p1),
    .din2(grp_fu_18823_p2),
    .din3(grp_fu_18823_p3),
    .din4(grp_fu_18823_p4),
    .din5(grp_fu_18823_p5),
    .din6(add_ln161_293_fu_12869_p2),
    .ce(1'b1),
    .dout(grp_fu_18823_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U409(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18838_p0),
    .din1(grp_fu_18838_p1),
    .din2(grp_fu_18838_p2),
    .din3(grp_fu_18838_p3),
    .din4(grp_fu_18838_p4),
    .din5(grp_fu_18838_p5),
    .din6(grp_fu_17223_p3),
    .ce(1'b1),
    .dout(grp_fu_18838_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U410(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18855_p0),
    .din1(grp_fu_18855_p1),
    .din2(grp_fu_18855_p2),
    .din3(grp_fu_18855_p3),
    .din4(grp_fu_18855_p4),
    .din5(grp_fu_18855_p5),
    .din6(add_ln161_309_fu_12896_p2),
    .ce(1'b1),
    .dout(grp_fu_18855_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U411(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18870_p0),
    .din1(grp_fu_18870_p1),
    .din2(grp_fu_18870_p2),
    .din3(grp_fu_18870_p3),
    .din4(grp_fu_18870_p4),
    .din5(grp_fu_18870_p5),
    .din6(grp_fu_17250_p3),
    .ce(1'b1),
    .dout(grp_fu_18870_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U412(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18887_p0),
    .din1(grp_fu_18887_p1),
    .din2(grp_fu_18887_p2),
    .din3(grp_fu_18887_p3),
    .din4(grp_fu_18887_p4),
    .din5(grp_fu_18887_p5),
    .din6(add_ln161_325_fu_12923_p2),
    .ce(1'b1),
    .dout(grp_fu_18887_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U413(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18902_p0),
    .din1(grp_fu_18902_p1),
    .din2(grp_fu_18902_p2),
    .din3(grp_fu_18902_p3),
    .din4(grp_fu_18902_p4),
    .din5(grp_fu_18902_p5),
    .din6(grp_fu_17277_p3),
    .ce(1'b1),
    .dout(grp_fu_18902_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U414(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18919_p0),
    .din1(grp_fu_18919_p1),
    .din2(grp_fu_18919_p2),
    .din3(grp_fu_18919_p3),
    .din4(grp_fu_18919_p4),
    .din5(grp_fu_18919_p5),
    .din6(add_ln161_341_fu_12950_p2),
    .ce(1'b1),
    .dout(grp_fu_18919_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U415(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18934_p0),
    .din1(grp_fu_18934_p1),
    .din2(grp_fu_18934_p2),
    .din3(grp_fu_18934_p3),
    .din4(grp_fu_18934_p4),
    .din5(grp_fu_18934_p5),
    .din6(grp_fu_17304_p3),
    .ce(1'b1),
    .dout(grp_fu_18934_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U416(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18951_p0),
    .din1(grp_fu_18951_p1),
    .din2(grp_fu_18951_p2),
    .din3(grp_fu_18951_p3),
    .din4(grp_fu_18951_p4),
    .din5(grp_fu_18951_p5),
    .din6(add_ln161_357_fu_12977_p2),
    .ce(1'b1),
    .dout(grp_fu_18951_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U417(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18966_p0),
    .din1(grp_fu_18966_p1),
    .din2(grp_fu_18966_p2),
    .din3(grp_fu_18966_p3),
    .din4(grp_fu_18966_p4),
    .din5(grp_fu_18966_p5),
    .din6(grp_fu_17331_p3),
    .ce(1'b1),
    .dout(grp_fu_18966_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U418(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18983_p0),
    .din1(grp_fu_18983_p1),
    .din2(grp_fu_18983_p2),
    .din3(grp_fu_18983_p3),
    .din4(grp_fu_18983_p4),
    .din5(grp_fu_18983_p5),
    .din6(add_ln161_373_fu_13004_p2),
    .ce(1'b1),
    .dout(grp_fu_18983_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U419(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_18998_p0),
    .din1(grp_fu_18998_p1),
    .din2(grp_fu_18998_p2),
    .din3(grp_fu_18998_p3),
    .din4(grp_fu_18998_p4),
    .din5(grp_fu_18998_p5),
    .din6(grp_fu_17358_p3),
    .ce(1'b1),
    .dout(grp_fu_18998_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U420(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19015_p0),
    .din1(grp_fu_19015_p1),
    .din2(grp_fu_19015_p2),
    .din3(grp_fu_19015_p3),
    .din4(grp_fu_19015_p4),
    .din5(grp_fu_19015_p5),
    .din6(add_ln161_389_fu_13031_p2),
    .ce(1'b1),
    .dout(grp_fu_19015_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U421(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19030_p0),
    .din1(grp_fu_19030_p1),
    .din2(grp_fu_19030_p2),
    .din3(grp_fu_19030_p3),
    .din4(grp_fu_19030_p4),
    .din5(grp_fu_19030_p5),
    .din6(grp_fu_17385_p3),
    .ce(1'b1),
    .dout(grp_fu_19030_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 18 ),
    .dout_WIDTH( 21 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_18s_21_4_1_U422(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19047_p0),
    .din1(grp_fu_19047_p1),
    .din2(grp_fu_19047_p2),
    .din3(grp_fu_19047_p3),
    .din4(grp_fu_19047_p4),
    .din5(grp_fu_19047_p5),
    .din6(add_ln161_405_fu_13058_p2),
    .ce(1'b1),
    .dout(grp_fu_19047_p7)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U423(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19062_p0),
    .din1(grp_fu_19062_p1),
    .din2(grp_fu_19062_p2),
    .din3(grp_fu_19062_p3),
    .din4(grp_fu_19062_p4),
    .din5(grp_fu_19062_p5),
    .din6(grp_fu_17412_p3),
    .ce(1'b1),
    .dout(grp_fu_19062_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U424(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19079_p0),
    .din1(grp_fu_19079_p1),
    .din2(grp_fu_19079_p2),
    .ce(1'b1),
    .dout(grp_fu_19079_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U425(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19088_p0),
    .din1(grp_fu_19088_p1),
    .din2(grp_fu_19088_p2),
    .din3(grp_fu_19088_p3),
    .din4(grp_fu_19088_p4),
    .din5(grp_fu_19088_p5),
    .din6(grp_fu_17439_p3),
    .ce(1'b1),
    .dout(grp_fu_19088_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U426(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19105_p0),
    .din1(grp_fu_19105_p1),
    .din2(grp_fu_19105_p2),
    .ce(1'b1),
    .dout(grp_fu_19105_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U427(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19114_p0),
    .din1(grp_fu_19114_p1),
    .din2(grp_fu_19114_p2),
    .din3(grp_fu_19114_p3),
    .din4(grp_fu_19114_p4),
    .din5(grp_fu_19114_p5),
    .din6(grp_fu_17466_p3),
    .ce(1'b1),
    .dout(grp_fu_19114_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U428(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19131_p0),
    .din1(grp_fu_19131_p1),
    .din2(grp_fu_19131_p2),
    .ce(1'b1),
    .dout(grp_fu_19131_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U429(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19140_p0),
    .din1(grp_fu_19140_p1),
    .din2(grp_fu_19140_p2),
    .din3(grp_fu_19140_p3),
    .din4(grp_fu_19140_p4),
    .din5(grp_fu_19140_p5),
    .din6(grp_fu_17493_p3),
    .ce(1'b1),
    .dout(grp_fu_19140_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U430(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19157_p0),
    .din1(grp_fu_19157_p1),
    .din2(grp_fu_19157_p2),
    .ce(1'b1),
    .dout(grp_fu_19157_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U431(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19166_p0),
    .din1(grp_fu_19166_p1),
    .din2(grp_fu_19166_p2),
    .din3(grp_fu_19166_p3),
    .din4(grp_fu_19166_p4),
    .din5(grp_fu_19166_p5),
    .din6(grp_fu_17520_p3),
    .ce(1'b1),
    .dout(grp_fu_19166_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U432(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19183_p0),
    .din1(grp_fu_19183_p1),
    .din2(grp_fu_19183_p2),
    .ce(1'b1),
    .dout(grp_fu_19183_p3)
);

PATCH_EMBED_dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
dsp_dotpra3add_8s_8s_8s_8s_8s_8s_17s_18_4_1_U433(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19192_p0),
    .din1(grp_fu_19192_p1),
    .din2(grp_fu_19192_p2),
    .din3(grp_fu_19192_p3),
    .din4(grp_fu_19192_p4),
    .din5(grp_fu_19192_p5),
    .din6(grp_fu_17547_p3),
    .ce(1'b1),
    .dout(grp_fu_19192_p7)
);

PATCH_EMBED_mac_muladd_8s_8s_21s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_8s_21s_21_4_1_U434(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_19209_p0),
    .din1(grp_fu_19209_p1),
    .din2(grp_fu_19209_p2),
    .ce(1'b1),
    .dout(grp_fu_19209_p3)
);

PATCH_EMBED_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(pf_all_done),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(pf_all_done),
    .ap_continue(ap_continue)
);

PATCH_EMBED_frp_pipeline_valid #(
    .PipelineLatency( 11 ),
    .PipelineII( 1 ),
    .CeilLog2Stages( 4 ),
    .ExitLatency( 0 ))
frp_pipeline_valid_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .valid_in(ap_frp_vld_in),
    .exitcond(frp_pipeline_valid_U_exitcond),
    .valid_out(frp_pipeline_valid_U_valid_out),
    .num_valid_datasets(frp_pipeline_valid_U_num_valid_datasets)
);

PATCH_EMBED_frp_fifoout #(
    .BlockingType( 1 ),
    .PipeLatency( 11 ),
    .PipelineII( 1 ),
    .DataWidth( 416 ),
    .NumWrites( 1 ),
    .CeilLog2Stages( 4 ),
    .CeilLog2FDepth( 4 ),
    .PfAllDoneEnable( 2 ))
pf_mac_sm_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(pf_mac_sm_U_frpsig_data_in),
    .data_out(pf_mac_sm_U_data_out),
    .valid(frp_pipeline_valid_U_valid_out),
    .data_in_vld(pf_mac_sm_U_data_in_vld),
    .data_out_vld(pf_mac_sm_U_data_out_vld),
    .data_in_last(ap_done_int_frp),
    .pf_continue(ap_continue),
    .pf_all_done(pf_all_done),
    .pf_ready(pf_mac_sm_U_pf_ready),
    .pf_done(pf_mac_sm_U_pf_done),
    .data_out_read(mac_sm_full_n),
    .ap_start(1'b0),
    .num_valid_datasets(frp_pipeline_valid_U_num_valid_datasets)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_frp_data_req_cache_window_sm <= 4'd0;
    end else begin
        if ((frp_pipeline_valid_U_valid_out[4'd0] == 1'b0)) begin
            ap_frp_data_req_cache_window_sm <= (ap_frp_data_req_cache_window_sm - ap_frp_data_next_issued_cache_window_sm);
        end else begin
            ap_frp_data_req_cache_window_sm <= ((ap_frp_data_req_cache_window_sm + ap_frp_data_req_cache_window_sm_op126) - ap_frp_data_next_issued_cache_window_sm);
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        pf_all_done <= 1'b0;
    end else begin
        pf_all_done <= pf_mac_sm_U_pf_done;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((frp_pipeline_valid_U_valid_out[4'd0] == 1'b1) & ((icmp_ln126_fu_2594_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        cit_fu_2268 <= add_ln128_fu_2672_p2;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cit_fu_2268 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((frp_pipeline_valid_U_valid_out[4'd0] == 1'b1) & ((icmp_ln126_fu_2594_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        cot_fu_2400 <= select_ln127_1_fu_2664_p3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cot_fu_2400 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_538_fu_2276 <= empty_583_fu_15807_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_538_fu_2276 <= add_ln161_31_fu_14351_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_539_fu_2280 <= empty_582_fu_15800_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_539_fu_2280 <= add_ln161_47_fu_14390_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_540_fu_2284 <= empty_581_fu_15793_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_540_fu_2284 <= add_ln161_63_fu_14429_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_541_fu_2288 <= empty_580_fu_15786_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_541_fu_2288 <= add_ln161_79_fu_14468_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_542_fu_2292 <= empty_579_fu_15779_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_542_fu_2292 <= add_ln161_95_fu_14507_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_543_fu_2296 <= empty_578_fu_15772_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_543_fu_2296 <= add_ln161_111_fu_14546_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_544_fu_2300 <= empty_577_fu_15765_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_544_fu_2300 <= add_ln161_127_fu_14585_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_545_fu_2304 <= empty_576_fu_15758_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_545_fu_2304 <= add_ln161_143_fu_14624_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_546_fu_2308 <= empty_575_fu_15751_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_546_fu_2308 <= add_ln161_159_fu_14663_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_547_fu_2312 <= empty_574_fu_15744_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_547_fu_2312 <= add_ln161_175_fu_14702_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_548_fu_2316 <= empty_573_fu_15737_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_548_fu_2316 <= add_ln161_191_fu_14741_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_549_fu_2320 <= empty_572_fu_15730_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_549_fu_2320 <= add_ln161_207_fu_14780_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_550_fu_2324 <= empty_571_fu_15723_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_550_fu_2324 <= add_ln161_223_fu_14819_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_551_fu_2328 <= empty_570_fu_15716_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_551_fu_2328 <= add_ln161_239_fu_14858_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_552_fu_2332 <= empty_569_fu_15709_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_552_fu_2332 <= add_ln161_255_fu_14897_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            empty_fu_2272 <= empty_584_fu_15814_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            empty_fu_2272 <= add_ln161_15_fu_14312_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((frp_pipeline_valid_U_valid_out[4'd0] == 1'b1) & ((icmp_ln126_fu_2594_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        indvar_flatten107_fu_2412 <= add_ln126_1_fu_2588_p2;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten107_fu_2412 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((frp_pipeline_valid_U_valid_out[4'd0] == 1'b1) & ((icmp_ln126_fu_2594_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        indvar_flatten_fu_2404 <= select_ln127_2_fu_2684_p3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_2404 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tt_fu_2408 <= select_ln126_1_fu_2804_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        PATCH_EMBED_INST_bias_arr_19_load_reg_23060 <= PATCH_EMBED_INST_bias_arr_19_q0;
        add_ln161_101_reg_23325 <= add_ln161_101_fu_12549_p2;
        add_ln161_101_reg_23325_pp0_iter8_reg <= add_ln161_101_reg_23325;
        add_ln161_105_reg_24090 <= add_ln161_105_fu_13853_p2;
        add_ln161_117_reg_23350 <= add_ln161_117_fu_12576_p2;
        add_ln161_117_reg_23350_pp0_iter8_reg <= add_ln161_117_reg_23350;
        add_ln161_121_reg_24100 <= add_ln161_121_fu_13865_p2;
        add_ln161_133_reg_23375 <= add_ln161_133_fu_12603_p2;
        add_ln161_133_reg_23375_pp0_iter8_reg <= add_ln161_133_reg_23375;
        add_ln161_137_reg_24110 <= add_ln161_137_fu_13877_p2;
        add_ln161_149_reg_23400 <= add_ln161_149_fu_12630_p2;
        add_ln161_149_reg_23400_pp0_iter8_reg <= add_ln161_149_reg_23400;
        add_ln161_153_reg_24120 <= add_ln161_153_fu_13889_p2;
        add_ln161_165_reg_23425 <= add_ln161_165_fu_12657_p2;
        add_ln161_165_reg_23425_pp0_iter8_reg <= add_ln161_165_reg_23425;
        add_ln161_169_reg_24130 <= add_ln161_169_fu_13901_p2;
        add_ln161_181_reg_23450 <= add_ln161_181_fu_12684_p2;
        add_ln161_181_reg_23450_pp0_iter8_reg <= add_ln161_181_reg_23450;
        add_ln161_185_reg_24140 <= add_ln161_185_fu_13913_p2;
        add_ln161_197_reg_23475 <= add_ln161_197_fu_12711_p2;
        add_ln161_197_reg_23475_pp0_iter8_reg <= add_ln161_197_reg_23475;
        add_ln161_201_reg_24150 <= add_ln161_201_fu_13925_p2;
        add_ln161_213_reg_23500 <= add_ln161_213_fu_12738_p2;
        add_ln161_213_reg_23500_pp0_iter8_reg <= add_ln161_213_reg_23500;
        add_ln161_217_reg_24160 <= add_ln161_217_fu_13937_p2;
        add_ln161_21_reg_23200 <= add_ln161_21_fu_12414_p2;
        add_ln161_21_reg_23200_pp0_iter8_reg <= add_ln161_21_reg_23200;
        add_ln161_229_reg_23525 <= add_ln161_229_fu_12765_p2;
        add_ln161_229_reg_23525_pp0_iter8_reg <= add_ln161_229_reg_23525;
        add_ln161_233_reg_24170 <= add_ln161_233_fu_13949_p2;
        add_ln161_245_reg_23550 <= add_ln161_245_fu_12792_p2;
        add_ln161_245_reg_23550_pp0_iter8_reg <= add_ln161_245_reg_23550;
        add_ln161_249_reg_24180 <= add_ln161_249_fu_13961_p2;
        add_ln161_25_reg_24040 <= add_ln161_25_fu_13793_p2;
        add_ln161_265_reg_24185 <= add_ln161_265_fu_13973_p2;
        add_ln161_271_reg_24295 <= add_ln161_271_fu_14924_p2;
        add_ln161_281_reg_24190 <= add_ln161_281_fu_13985_p2;
        add_ln161_287_reg_24300 <= add_ln161_287_fu_14951_p2;
        add_ln161_297_reg_24195 <= add_ln161_297_fu_13997_p2;
        add_ln161_303_reg_24305 <= add_ln161_303_fu_14978_p2;
        add_ln161_313_reg_24200 <= add_ln161_313_fu_14009_p2;
        add_ln161_319_reg_24310 <= add_ln161_319_fu_15005_p2;
        add_ln161_329_reg_24205 <= add_ln161_329_fu_14021_p2;
        add_ln161_335_reg_24315 <= add_ln161_335_fu_15032_p2;
        add_ln161_345_reg_24210 <= add_ln161_345_fu_14033_p2;
        add_ln161_351_reg_24320 <= add_ln161_351_fu_15059_p2;
        add_ln161_361_reg_24215 <= add_ln161_361_fu_14045_p2;
        add_ln161_367_reg_24325 <= add_ln161_367_fu_15086_p2;
        add_ln161_377_reg_24220 <= add_ln161_377_fu_14057_p2;
        add_ln161_37_reg_23225 <= add_ln161_37_fu_12441_p2;
        add_ln161_37_reg_23225_pp0_iter8_reg <= add_ln161_37_reg_23225;
        add_ln161_383_reg_24330 <= add_ln161_383_fu_15113_p2;
        add_ln161_393_reg_24225 <= add_ln161_393_fu_14069_p2;
        add_ln161_399_reg_24335 <= add_ln161_399_fu_15140_p2;
        add_ln161_409_reg_24230 <= add_ln161_409_fu_14081_p2;
        add_ln161_415_reg_24340 <= add_ln161_415_fu_15167_p2;
        add_ln161_41_reg_24050 <= add_ln161_41_fu_13805_p2;
        add_ln161_421_reg_23775 <= add_ln161_421_fu_13089_p2;
        add_ln161_421_reg_23775_pp0_iter8_reg <= add_ln161_421_reg_23775;
        add_ln161_425_reg_24240 <= add_ln161_425_fu_14093_p2;
        add_ln161_431_reg_24345 <= add_ln161_431_fu_15206_p2;
        add_ln161_437_reg_23800 <= add_ln161_437_fu_13116_p2;
        add_ln161_437_reg_23800_pp0_iter8_reg <= add_ln161_437_reg_23800;
        add_ln161_441_reg_24250 <= add_ln161_441_fu_14105_p2;
        add_ln161_447_reg_24350 <= add_ln161_447_fu_15245_p2;
        add_ln161_453_reg_23825 <= add_ln161_453_fu_13143_p2;
        add_ln161_453_reg_23825_pp0_iter8_reg <= add_ln161_453_reg_23825;
        add_ln161_457_reg_24260 <= add_ln161_457_fu_14117_p2;
        add_ln161_463_reg_24355 <= add_ln161_463_fu_15284_p2;
        add_ln161_469_reg_23850 <= add_ln161_469_fu_13170_p2;
        add_ln161_469_reg_23850_pp0_iter8_reg <= add_ln161_469_reg_23850;
        add_ln161_473_reg_24270 <= add_ln161_473_fu_14129_p2;
        add_ln161_479_reg_24360 <= add_ln161_479_fu_15323_p2;
        add_ln161_485_reg_23875 <= add_ln161_485_fu_13197_p2;
        add_ln161_485_reg_23875_pp0_iter8_reg <= add_ln161_485_reg_23875;
        add_ln161_489_reg_24280 <= add_ln161_489_fu_14141_p2;
        add_ln161_495_reg_24365 <= add_ln161_495_fu_15362_p2;
        add_ln161_501_reg_23900 <= add_ln161_501_fu_13224_p2;
        add_ln161_501_reg_23900_pp0_iter8_reg <= add_ln161_501_reg_23900;
        add_ln161_505_reg_24290 <= add_ln161_505_fu_14153_p2;
        add_ln161_511_reg_24370 <= add_ln161_511_fu_15401_p2;
        add_ln161_53_reg_23250 <= add_ln161_53_fu_12468_p2;
        add_ln161_53_reg_23250_pp0_iter8_reg <= add_ln161_53_reg_23250;
        add_ln161_57_reg_24060 <= add_ln161_57_fu_13817_p2;
        add_ln161_5_reg_23175 <= add_ln161_5_fu_12387_p2;
        add_ln161_5_reg_23175_pp0_iter8_reg <= add_ln161_5_reg_23175;
        add_ln161_69_reg_23275 <= add_ln161_69_fu_12495_p2;
        add_ln161_69_reg_23275_pp0_iter8_reg <= add_ln161_69_reg_23275;
        add_ln161_73_reg_24070 <= add_ln161_73_fu_13829_p2;
        add_ln161_85_reg_23300 <= add_ln161_85_fu_12522_p2;
        add_ln161_85_reg_23300_pp0_iter8_reg <= add_ln161_85_reg_23300;
        add_ln161_89_reg_24080 <= add_ln161_89_fu_13841_p2;
        add_ln161_9_reg_24030 <= add_ln161_9_fu_13781_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_loop_init_pp0_iter3_reg <= ap_loop_init_pp0_iter2_reg;
        ap_loop_init_pp0_iter4_reg <= ap_loop_init_pp0_iter3_reg;
        cmp23_reg_21194 <= cmp23_fu_6701_p2;
        cmp23_reg_21194_pp0_iter6_reg <= cmp23_reg_21194;
        cmp23_reg_21194_pp0_iter7_reg <= cmp23_reg_21194_pp0_iter6_reg;
        cmp23_reg_21194_pp0_iter8_reg <= cmp23_reg_21194_pp0_iter7_reg;
        empty_569_reg_24375 <= empty_569_fu_15709_p3;
        empty_570_reg_24380 <= empty_570_fu_15716_p3;
        empty_571_reg_24385 <= empty_571_fu_15723_p3;
        empty_572_reg_24390 <= empty_572_fu_15730_p3;
        empty_573_reg_24395 <= empty_573_fu_15737_p3;
        empty_574_reg_24400 <= empty_574_fu_15744_p3;
        empty_575_reg_24405 <= empty_575_fu_15751_p3;
        empty_576_reg_24410 <= empty_576_fu_15758_p3;
        empty_577_reg_24415 <= empty_577_fu_15765_p3;
        empty_578_reg_24420 <= empty_578_fu_15772_p3;
        empty_579_reg_24425 <= empty_579_fu_15779_p3;
        empty_580_reg_24430 <= empty_580_fu_15786_p3;
        empty_581_reg_24435 <= empty_581_fu_15793_p3;
        empty_582_reg_24440 <= empty_582_fu_15800_p3;
        empty_583_reg_24445 <= empty_583_fu_15807_p3;
        empty_584_reg_24450 <= empty_584_fu_15814_p3;
        empty_586_reg_21230 <= empty_586_fu_6709_p2;
        icmp_ln127_reg_19544_pp0_iter2_reg <= icmp_ln127_reg_19544_pp0_iter1_reg;
        icmp_ln127_reg_19544_pp0_iter3_reg <= icmp_ln127_reg_19544_pp0_iter2_reg;
        icmp_ln132_reg_19569_pp0_iter2_reg <= icmp_ln132_reg_19569;
        icmp_ln132_reg_19569_pp0_iter3_reg <= icmp_ln132_reg_19569_pp0_iter2_reg;
        icmp_ln132_reg_19569_pp0_iter4_reg <= icmp_ln132_reg_19569_pp0_iter3_reg;
        icmp_ln132_reg_19569_pp0_iter5_reg <= icmp_ln132_reg_19569_pp0_iter4_reg;
        icmp_ln132_reg_19569_pp0_iter6_reg <= icmp_ln132_reg_19569_pp0_iter5_reg;
        icmp_ln132_reg_19569_pp0_iter7_reg <= icmp_ln132_reg_19569_pp0_iter6_reg;
        icmp_ln132_reg_19569_pp0_iter8_reg <= icmp_ln132_reg_19569_pp0_iter7_reg;
        icmp_ln173_reg_19605_pp0_iter2_reg <= icmp_ln173_reg_19605;
        icmp_ln173_reg_19605_pp0_iter3_reg <= icmp_ln173_reg_19605_pp0_iter2_reg;
        icmp_ln173_reg_19605_pp0_iter4_reg <= icmp_ln173_reg_19605_pp0_iter3_reg;
        icmp_ln173_reg_19605_pp0_iter5_reg <= icmp_ln173_reg_19605_pp0_iter4_reg;
        icmp_ln173_reg_19605_pp0_iter6_reg <= icmp_ln173_reg_19605_pp0_iter5_reg;
        icmp_ln173_reg_19605_pp0_iter7_reg <= icmp_ln173_reg_19605_pp0_iter6_reg;
        icmp_ln173_reg_19605_pp0_iter8_reg <= icmp_ln173_reg_19605_pp0_iter7_reg;
        icmp_ln173_reg_19605_pp0_iter9_reg <= icmp_ln173_reg_19605_pp0_iter8_reg;
        select_ln126_1_reg_19609 <= select_ln126_1_fu_2804_p3;
        select_ln127_1_reg_19556_pp0_iter2_reg <= select_ln127_1_reg_19556_pp0_iter1_reg;
        select_ln127_1_reg_19556_pp0_iter3_reg <= select_ln127_1_reg_19556_pp0_iter2_reg;
        select_ln127_1_reg_19556_pp0_iter4_reg <= select_ln127_1_reg_19556_pp0_iter3_reg;
        select_ln127_1_reg_19556_pp0_iter5_reg <= select_ln127_1_reg_19556_pp0_iter4_reg;
        select_ln127_1_reg_19556_pp0_iter6_reg <= select_ln127_1_reg_19556_pp0_iter5_reg;
        select_ln127_1_reg_19556_pp0_iter7_reg <= select_ln127_1_reg_19556_pp0_iter6_reg;
        sext_ln159_108_reg_21570 <= sext_ln159_108_fu_7226_p1;
        sext_ln159_124_reg_21607 <= sext_ln159_124_fu_7310_p1;
        sext_ln159_140_reg_21644 <= sext_ln159_140_fu_7394_p1;
        sext_ln159_156_reg_21681 <= sext_ln159_156_fu_7478_p1;
        sext_ln159_172_reg_21718 <= sext_ln159_172_fu_7562_p1;
        sext_ln159_25_reg_21385 <= sext_ln159_25_fu_6806_p1;
        sext_ln159_284_reg_22041 <= sext_ln159_284_fu_8150_p1;
        sext_ln159_44_reg_21422 <= sext_ln159_44_fu_6890_p1;
        sext_ln159_60_reg_21459 <= sext_ln159_60_fu_6974_p1;
        sext_ln159_76_reg_21496 <= sext_ln159_76_fu_7058_p1;
        sext_ln159_92_reg_21533 <= sext_ln159_92_fu_7142_p1;
        tmp_100_reg_20148 <= {{PATCH_EMBED_INST_weight_arr_18_q0[535:528]}};
        tmp_100_reg_20148_pp0_iter5_reg <= tmp_100_reg_20148;
        tmp_102_reg_20159 <= {{PATCH_EMBED_INST_weight_arr_18_q0[551:544]}};
        tmp_103_reg_20164 <= {{PATCH_EMBED_INST_weight_arr_18_q0[559:552]}};
        tmp_103_reg_20164_pp0_iter5_reg <= tmp_103_reg_20164;
        tmp_104_reg_20169 <= {{PATCH_EMBED_INST_weight_arr_18_q0[567:560]}};
        tmp_104_reg_20169_pp0_iter5_reg <= tmp_104_reg_20169;
        tmp_105_reg_20174 <= {{PATCH_EMBED_INST_weight_arr_18_q0[575:568]}};
        tmp_107_reg_20185 <= {{PATCH_EMBED_INST_weight_arr_18_q0[591:584]}};
        tmp_107_reg_20185_pp0_iter5_reg <= tmp_107_reg_20185;
        tmp_109_reg_20196 <= {{PATCH_EMBED_INST_weight_arr_18_q0[607:600]}};
        tmp_110_reg_20201 <= {{PATCH_EMBED_INST_weight_arr_18_q0[615:608]}};
        tmp_111_reg_20206 <= {{PATCH_EMBED_INST_weight_arr_18_q0[623:616]}};
        tmp_111_reg_20206_pp0_iter5_reg <= tmp_111_reg_20206;
        tmp_112_reg_20211 <= {{PATCH_EMBED_INST_weight_arr_18_q0[631:624]}};
        tmp_112_reg_20211_pp0_iter5_reg <= tmp_112_reg_20211;
        tmp_113_reg_20216 <= {{PATCH_EMBED_INST_weight_arr_18_q0[639:632]}};
        tmp_113_reg_20216_pp0_iter5_reg <= tmp_113_reg_20216;
        tmp_114_reg_20221 <= {{PATCH_EMBED_INST_weight_arr_18_q0[647:640]}};
        tmp_115_reg_20226 <= {{PATCH_EMBED_INST_weight_arr_18_q0[655:648]}};
        tmp_116_reg_20231 <= {{PATCH_EMBED_INST_weight_arr_18_q0[663:656]}};
        tmp_116_reg_20231_pp0_iter5_reg <= tmp_116_reg_20231;
        tmp_118_reg_20242 <= {{PATCH_EMBED_INST_weight_arr_18_q0[679:672]}};
        tmp_119_reg_20247 <= {{PATCH_EMBED_INST_weight_arr_18_q0[687:680]}};
        tmp_119_reg_20247_pp0_iter5_reg <= tmp_119_reg_20247;
        tmp_120_reg_20252 <= {{PATCH_EMBED_INST_weight_arr_18_q0[695:688]}};
        tmp_120_reg_20252_pp0_iter5_reg <= tmp_120_reg_20252;
        tmp_121_reg_20257 <= {{PATCH_EMBED_INST_weight_arr_18_q0[703:696]}};
        tmp_123_reg_20268 <= {{PATCH_EMBED_INST_weight_arr_18_q0[719:712]}};
        tmp_123_reg_20268_pp0_iter5_reg <= tmp_123_reg_20268;
        tmp_125_reg_20279 <= {{PATCH_EMBED_INST_weight_arr_18_q0[735:728]}};
        tmp_126_reg_20284 <= {{PATCH_EMBED_INST_weight_arr_18_q0[743:736]}};
        tmp_127_reg_20289 <= {{PATCH_EMBED_INST_weight_arr_18_q0[751:744]}};
        tmp_127_reg_20289_pp0_iter5_reg <= tmp_127_reg_20289;
        tmp_128_reg_20294 <= {{PATCH_EMBED_INST_weight_arr_18_q0[759:752]}};
        tmp_128_reg_20294_pp0_iter5_reg <= tmp_128_reg_20294;
        tmp_129_reg_20299 <= {{PATCH_EMBED_INST_weight_arr_18_q0[767:760]}};
        tmp_129_reg_20299_pp0_iter5_reg <= tmp_129_reg_20299;
        tmp_130_reg_20304 <= {{PATCH_EMBED_INST_weight_arr_18_q0[775:768]}};
        tmp_131_reg_20309 <= {{PATCH_EMBED_INST_weight_arr_18_q0[783:776]}};
        tmp_132_reg_20314 <= {{PATCH_EMBED_INST_weight_arr_18_q0[791:784]}};
        tmp_132_reg_20314_pp0_iter5_reg <= tmp_132_reg_20314;
        tmp_134_reg_20325 <= {{PATCH_EMBED_INST_weight_arr_18_q0[807:800]}};
        tmp_135_reg_20330 <= {{PATCH_EMBED_INST_weight_arr_18_q0[815:808]}};
        tmp_135_reg_20330_pp0_iter5_reg <= tmp_135_reg_20330;
        tmp_136_reg_20335 <= {{PATCH_EMBED_INST_weight_arr_18_q0[823:816]}};
        tmp_136_reg_20335_pp0_iter5_reg <= tmp_136_reg_20335;
        tmp_137_reg_20340 <= {{PATCH_EMBED_INST_weight_arr_18_q0[831:824]}};
        tmp_139_reg_20351 <= {{PATCH_EMBED_INST_weight_arr_18_q0[847:840]}};
        tmp_139_reg_20351_pp0_iter5_reg <= tmp_139_reg_20351;
        tmp_141_reg_20362 <= {{PATCH_EMBED_INST_weight_arr_18_q0[863:856]}};
        tmp_142_reg_20367 <= {{PATCH_EMBED_INST_weight_arr_18_q0[871:864]}};
        tmp_143_reg_20372 <= {{PATCH_EMBED_INST_weight_arr_18_q0[879:872]}};
        tmp_143_reg_20372_pp0_iter5_reg <= tmp_143_reg_20372;
        tmp_144_reg_20377 <= {{PATCH_EMBED_INST_weight_arr_18_q0[887:880]}};
        tmp_144_reg_20377_pp0_iter5_reg <= tmp_144_reg_20377;
        tmp_145_reg_20382 <= {{PATCH_EMBED_INST_weight_arr_18_q0[895:888]}};
        tmp_145_reg_20382_pp0_iter5_reg <= tmp_145_reg_20382;
        tmp_146_reg_20387 <= {{PATCH_EMBED_INST_weight_arr_18_q0[903:896]}};
        tmp_147_reg_20392 <= {{PATCH_EMBED_INST_weight_arr_18_q0[911:904]}};
        tmp_148_reg_20397 <= {{PATCH_EMBED_INST_weight_arr_18_q0[919:912]}};
        tmp_148_reg_20397_pp0_iter5_reg <= tmp_148_reg_20397;
        tmp_150_reg_20408 <= {{PATCH_EMBED_INST_weight_arr_18_q0[935:928]}};
        tmp_151_reg_20413 <= {{PATCH_EMBED_INST_weight_arr_18_q0[943:936]}};
        tmp_151_reg_20413_pp0_iter5_reg <= tmp_151_reg_20413;
        tmp_152_reg_20418 <= {{PATCH_EMBED_INST_weight_arr_18_q0[951:944]}};
        tmp_152_reg_20418_pp0_iter5_reg <= tmp_152_reg_20418;
        tmp_153_reg_20423 <= {{PATCH_EMBED_INST_weight_arr_18_q0[959:952]}};
        tmp_155_reg_20434 <= {{PATCH_EMBED_INST_weight_arr_18_q0[975:968]}};
        tmp_155_reg_20434_pp0_iter5_reg <= tmp_155_reg_20434;
        tmp_157_reg_20445 <= {{PATCH_EMBED_INST_weight_arr_18_q0[991:984]}};
        tmp_158_reg_20450 <= {{PATCH_EMBED_INST_weight_arr_18_q0[999:992]}};
        tmp_159_reg_20455 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1007:1000]}};
        tmp_159_reg_20455_pp0_iter5_reg <= tmp_159_reg_20455;
        tmp_15_reg_23080 <= {{PATCH_EMBED_INST_bias_arr_19_q0[356:336]}};
        tmp_15_reg_23080_pp0_iter8_reg <= tmp_15_reg_23080;
        tmp_160_reg_20460 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1015:1008]}};
        tmp_160_reg_20460_pp0_iter5_reg <= tmp_160_reg_20460;
        tmp_161_reg_20465 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1023:1016]}};
        tmp_161_reg_20465_pp0_iter5_reg <= tmp_161_reg_20465;
        tmp_162_reg_20470 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1031:1024]}};
        tmp_163_reg_20475 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1039:1032]}};
        tmp_164_reg_20480 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1047:1040]}};
        tmp_164_reg_20480_pp0_iter5_reg <= tmp_164_reg_20480;
        tmp_166_reg_20491 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1063:1056]}};
        tmp_167_reg_20496 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1071:1064]}};
        tmp_167_reg_20496_pp0_iter5_reg <= tmp_167_reg_20496;
        tmp_168_reg_20501 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1079:1072]}};
        tmp_168_reg_20501_pp0_iter5_reg <= tmp_168_reg_20501;
        tmp_169_reg_20506 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1087:1080]}};
        tmp_16_reg_23085 <= {{PATCH_EMBED_INST_bias_arr_19_q0[377:357]}};
        tmp_16_reg_23085_pp0_iter8_reg <= tmp_16_reg_23085;
        tmp_171_reg_20517 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1103:1096]}};
        tmp_171_reg_20517_pp0_iter5_reg <= tmp_171_reg_20517;
        tmp_173_reg_20528 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1119:1112]}};
        tmp_174_reg_20533 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1127:1120]}};
        tmp_175_reg_20538 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1135:1128]}};
        tmp_175_reg_20538_pp0_iter5_reg <= tmp_175_reg_20538;
        tmp_176_reg_20543 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1143:1136]}};
        tmp_176_reg_20543_pp0_iter5_reg <= tmp_176_reg_20543;
        tmp_177_reg_20548 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1151:1144]}};
        tmp_177_reg_20548_pp0_iter5_reg <= tmp_177_reg_20548;
        tmp_178_reg_20553 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1159:1152]}};
        tmp_179_reg_20558 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1167:1160]}};
        tmp_17_reg_23090 <= {{PATCH_EMBED_INST_bias_arr_19_q0[398:378]}};
        tmp_17_reg_23090_pp0_iter8_reg <= tmp_17_reg_23090;
        tmp_180_reg_20563 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1175:1168]}};
        tmp_180_reg_20563_pp0_iter5_reg <= tmp_180_reg_20563;
        tmp_182_reg_20574 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1191:1184]}};
        tmp_183_reg_20579 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1199:1192]}};
        tmp_183_reg_20579_pp0_iter5_reg <= tmp_183_reg_20579;
        tmp_184_reg_20584 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1207:1200]}};
        tmp_184_reg_20584_pp0_iter5_reg <= tmp_184_reg_20584;
        tmp_185_reg_20589 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1215:1208]}};
        tmp_187_reg_20600 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1231:1224]}};
        tmp_187_reg_20600_pp0_iter5_reg <= tmp_187_reg_20600;
        tmp_189_reg_20611 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1247:1240]}};
        tmp_18_reg_23095 <= {{PATCH_EMBED_INST_bias_arr_19_q0[419:399]}};
        tmp_18_reg_23095_pp0_iter8_reg <= tmp_18_reg_23095;
        tmp_190_reg_20616 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1255:1248]}};
        tmp_191_reg_20621 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1263:1256]}};
        tmp_191_reg_20621_pp0_iter5_reg <= tmp_191_reg_20621;
        tmp_192_reg_20626 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1271:1264]}};
        tmp_192_reg_20626_pp0_iter5_reg <= tmp_192_reg_20626;
        tmp_193_reg_20631 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1279:1272]}};
        tmp_193_reg_20631_pp0_iter5_reg <= tmp_193_reg_20631;
        tmp_194_reg_20636 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1287:1280]}};
        tmp_195_reg_20641 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1295:1288]}};
        tmp_196_reg_20646 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1303:1296]}};
        tmp_196_reg_20646_pp0_iter5_reg <= tmp_196_reg_20646;
        tmp_198_reg_20657 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1319:1312]}};
        tmp_199_reg_20662 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1327:1320]}};
        tmp_199_reg_20662_pp0_iter5_reg <= tmp_199_reg_20662;
        tmp_19_reg_23100 <= {{PATCH_EMBED_INST_bias_arr_19_q0[440:420]}};
        tmp_19_reg_23100_pp0_iter8_reg <= tmp_19_reg_23100;
        tmp_200_reg_20667 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1335:1328]}};
        tmp_200_reg_20667_pp0_iter5_reg <= tmp_200_reg_20667;
        tmp_201_reg_20672 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1343:1336]}};
        tmp_203_reg_20683 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1359:1352]}};
        tmp_203_reg_20683_pp0_iter5_reg <= tmp_203_reg_20683;
        tmp_205_reg_20694 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1375:1368]}};
        tmp_206_reg_20699 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1383:1376]}};
        tmp_207_reg_20704 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1391:1384]}};
        tmp_207_reg_20704_pp0_iter5_reg <= tmp_207_reg_20704;
        tmp_208_reg_20709 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1399:1392]}};
        tmp_208_reg_20709_pp0_iter5_reg <= tmp_208_reg_20709;
        tmp_209_reg_20714 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1407:1400]}};
        tmp_209_reg_20714_pp0_iter5_reg <= tmp_209_reg_20714;
        tmp_20_reg_23105 <= {{PATCH_EMBED_INST_bias_arr_19_q0[461:441]}};
        tmp_20_reg_23105_pp0_iter8_reg <= tmp_20_reg_23105;
        tmp_210_reg_20719 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1415:1408]}};
        tmp_211_reg_20724 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1423:1416]}};
        tmp_212_reg_20729 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1431:1424]}};
        tmp_212_reg_20729_pp0_iter5_reg <= tmp_212_reg_20729;
        tmp_214_reg_20740 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1447:1440]}};
        tmp_215_reg_20745 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1455:1448]}};
        tmp_215_reg_20745_pp0_iter5_reg <= tmp_215_reg_20745;
        tmp_216_reg_20750 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1463:1456]}};
        tmp_216_reg_20750_pp0_iter5_reg <= tmp_216_reg_20750;
        tmp_217_reg_20755 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1471:1464]}};
        tmp_219_reg_20766 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1487:1480]}};
        tmp_219_reg_20766_pp0_iter5_reg <= tmp_219_reg_20766;
        tmp_21_reg_23110 <= {{PATCH_EMBED_INST_bias_arr_19_q0[482:462]}};
        tmp_21_reg_23110_pp0_iter8_reg <= tmp_21_reg_23110;
        tmp_221_reg_20777 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1503:1496]}};
        tmp_222_reg_20782 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1511:1504]}};
        tmp_223_reg_20787 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1519:1512]}};
        tmp_223_reg_20787_pp0_iter5_reg <= tmp_223_reg_20787;
        tmp_224_reg_20792 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1527:1520]}};
        tmp_224_reg_20792_pp0_iter5_reg <= tmp_224_reg_20792;
        tmp_225_reg_20797 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1535:1528]}};
        tmp_225_reg_20797_pp0_iter5_reg <= tmp_225_reg_20797;
        tmp_226_reg_20802 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1543:1536]}};
        tmp_227_reg_20807 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1551:1544]}};
        tmp_228_reg_20812 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1559:1552]}};
        tmp_228_reg_20812_pp0_iter5_reg <= tmp_228_reg_20812;
        tmp_22_reg_23115 <= {{PATCH_EMBED_INST_bias_arr_19_q0[503:483]}};
        tmp_22_reg_23115_pp0_iter8_reg <= tmp_22_reg_23115;
        tmp_230_reg_20823 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1575:1568]}};
        tmp_231_reg_20828 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1583:1576]}};
        tmp_231_reg_20828_pp0_iter5_reg <= tmp_231_reg_20828;
        tmp_232_reg_20833 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1591:1584]}};
        tmp_232_reg_20833_pp0_iter5_reg <= tmp_232_reg_20833;
        tmp_233_reg_20838 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1599:1592]}};
        tmp_235_reg_20849 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1615:1608]}};
        tmp_235_reg_20849_pp0_iter5_reg <= tmp_235_reg_20849;
        tmp_237_reg_20860 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1631:1624]}};
        tmp_238_reg_20865 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1639:1632]}};
        tmp_239_reg_20870 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1647:1640]}};
        tmp_239_reg_20870_pp0_iter5_reg <= tmp_239_reg_20870;
        tmp_23_reg_23120 <= {{PATCH_EMBED_INST_bias_arr_19_q0[524:504]}};
        tmp_23_reg_23120_pp0_iter8_reg <= tmp_23_reg_23120;
        tmp_240_reg_20875 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1655:1648]}};
        tmp_240_reg_20875_pp0_iter5_reg <= tmp_240_reg_20875;
        tmp_241_reg_20880 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1663:1656]}};
        tmp_241_reg_20880_pp0_iter5_reg <= tmp_241_reg_20880;
        tmp_242_reg_20885 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1671:1664]}};
        tmp_243_reg_20890 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1679:1672]}};
        tmp_244_reg_20895 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1687:1680]}};
        tmp_244_reg_20895_pp0_iter5_reg <= tmp_244_reg_20895;
        tmp_246_reg_20906 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1703:1696]}};
        tmp_247_reg_20911 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1711:1704]}};
        tmp_247_reg_20911_pp0_iter5_reg <= tmp_247_reg_20911;
        tmp_248_reg_20916 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1719:1712]}};
        tmp_248_reg_20916_pp0_iter5_reg <= tmp_248_reg_20916;
        tmp_249_reg_20921 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1727:1720]}};
        tmp_24_reg_23125 <= {{PATCH_EMBED_INST_bias_arr_19_q0[545:525]}};
        tmp_24_reg_23125_pp0_iter8_reg <= tmp_24_reg_23125;
        tmp_251_reg_20932 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1743:1736]}};
        tmp_251_reg_20932_pp0_iter5_reg <= tmp_251_reg_20932;
        tmp_253_reg_20943 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1759:1752]}};
        tmp_254_reg_20948 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1767:1760]}};
        tmp_255_reg_20953 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1775:1768]}};
        tmp_255_reg_20953_pp0_iter5_reg <= tmp_255_reg_20953;
        tmp_256_reg_20958 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1783:1776]}};
        tmp_256_reg_20958_pp0_iter5_reg <= tmp_256_reg_20958;
        tmp_257_reg_20963 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1791:1784]}};
        tmp_257_reg_20963_pp0_iter5_reg <= tmp_257_reg_20963;
        tmp_258_reg_20968 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1799:1792]}};
        tmp_259_reg_20973 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1807:1800]}};
        tmp_25_reg_23130 <= {{PATCH_EMBED_INST_bias_arr_19_q0[566:546]}};
        tmp_260_reg_20978 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1815:1808]}};
        tmp_260_reg_20978_pp0_iter5_reg <= tmp_260_reg_20978;
        tmp_262_reg_20989 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1831:1824]}};
        tmp_263_reg_20994 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1839:1832]}};
        tmp_263_reg_20994_pp0_iter5_reg <= tmp_263_reg_20994;
        tmp_264_reg_20999 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1847:1840]}};
        tmp_264_reg_20999_pp0_iter5_reg <= tmp_264_reg_20999;
        tmp_265_reg_21004 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1855:1848]}};
        tmp_267_reg_21015 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1871:1864]}};
        tmp_267_reg_21015_pp0_iter5_reg <= tmp_267_reg_21015;
        tmp_269_reg_21026 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1887:1880]}};
        tmp_26_reg_23135 <= {{PATCH_EMBED_INST_bias_arr_19_q0[587:567]}};
        tmp_270_reg_21031 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1895:1888]}};
        tmp_271_reg_21036 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1903:1896]}};
        tmp_271_reg_21036_pp0_iter5_reg <= tmp_271_reg_21036;
        tmp_272_reg_21041 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1911:1904]}};
        tmp_272_reg_21041_pp0_iter5_reg <= tmp_272_reg_21041;
        tmp_273_reg_21046 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1919:1912]}};
        tmp_273_reg_21046_pp0_iter5_reg <= tmp_273_reg_21046;
        tmp_274_reg_21051 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1927:1920]}};
        tmp_275_reg_21056 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1935:1928]}};
        tmp_276_reg_21061 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1943:1936]}};
        tmp_276_reg_21061_pp0_iter5_reg <= tmp_276_reg_21061;
        tmp_278_reg_21072 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1959:1952]}};
        tmp_279_reg_21077 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1967:1960]}};
        tmp_279_reg_21077_pp0_iter5_reg <= tmp_279_reg_21077;
        tmp_27_reg_23140 <= {{PATCH_EMBED_INST_bias_arr_19_q0[608:588]}};
        tmp_280_reg_21082 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1975:1968]}};
        tmp_280_reg_21082_pp0_iter5_reg <= tmp_280_reg_21082;
        tmp_281_reg_21087 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1983:1976]}};
        tmp_283_reg_21098 <= {{PATCH_EMBED_INST_weight_arr_18_q0[1999:1992]}};
        tmp_283_reg_21098_pp0_iter5_reg <= tmp_283_reg_21098;
        tmp_285_reg_21109 <= {{PATCH_EMBED_INST_weight_arr_18_q0[2015:2008]}};
        tmp_286_reg_21114 <= {{PATCH_EMBED_INST_weight_arr_18_q0[2023:2016]}};
        tmp_28_reg_23145 <= {{PATCH_EMBED_INST_bias_arr_19_q0[629:609]}};
        tmp_29_reg_23150 <= {{PATCH_EMBED_INST_bias_arr_19_q0[650:630]}};
        tmp_301_reg_21119 <= {{PATCH_EMBED_INST_weight_arr_18_q0[2031:2024]}};
        tmp_301_reg_21119_pp0_iter5_reg <= tmp_301_reg_21119;
        tmp_303_reg_21124 <= {{PATCH_EMBED_INST_weight_arr_18_q0[2039:2032]}};
        tmp_303_reg_21124_pp0_iter5_reg <= tmp_303_reg_21124;
        tmp_317_reg_21129 <= {{PATCH_EMBED_INST_weight_arr_18_q0[2047:2040]}};
        tmp_317_reg_21129_pp0_iter5_reg <= tmp_317_reg_21129;
        tmp_34_reg_23155 <= {{PATCH_EMBED_INST_bias_arr_19_q0[667:651]}};
        tmp_35_reg_19751 <= {{PATCH_EMBED_INST_weight_arr_18_q0[15:8]}};
        tmp_36_reg_19756 <= {{PATCH_EMBED_INST_weight_arr_18_q0[23:16]}};
        tmp_36_reg_19756_pp0_iter5_reg <= tmp_36_reg_19756;
        tmp_38_reg_19787 <= {{PATCH_EMBED_INST_weight_arr_18_q0[39:32]}};
        tmp_39_reg_19792 <= {{PATCH_EMBED_INST_weight_arr_18_q0[47:40]}};
        tmp_39_reg_19792_pp0_iter5_reg <= tmp_39_reg_19792;
        tmp_40_reg_19797 <= {{PATCH_EMBED_INST_weight_arr_18_q0[55:48]}};
        tmp_40_reg_19797_pp0_iter5_reg <= tmp_40_reg_19797;
        tmp_41_reg_19802 <= {{PATCH_EMBED_INST_weight_arr_18_q0[63:56]}};
        tmp_43_reg_19833 <= {{PATCH_EMBED_INST_weight_arr_18_q0[79:72]}};
        tmp_43_reg_19833_pp0_iter5_reg <= tmp_43_reg_19833;
        tmp_45_reg_19864 <= {{PATCH_EMBED_INST_weight_arr_18_q0[95:88]}};
        tmp_46_reg_19869 <= {{PATCH_EMBED_INST_weight_arr_18_q0[103:96]}};
        tmp_47_reg_19874 <= {{PATCH_EMBED_INST_weight_arr_18_q0[111:104]}};
        tmp_47_reg_19874_pp0_iter5_reg <= tmp_47_reg_19874;
        tmp_48_reg_19879 <= {{PATCH_EMBED_INST_weight_arr_18_q0[119:112]}};
        tmp_48_reg_19879_pp0_iter5_reg <= tmp_48_reg_19879;
        tmp_49_reg_19884 <= {{PATCH_EMBED_INST_weight_arr_18_q0[127:120]}};
        tmp_49_reg_19884_pp0_iter5_reg <= tmp_49_reg_19884;
        tmp_50_reg_19889 <= {{PATCH_EMBED_INST_weight_arr_18_q0[135:128]}};
        tmp_51_reg_19894 <= {{PATCH_EMBED_INST_weight_arr_18_q0[143:136]}};
        tmp_52_reg_19899 <= {{PATCH_EMBED_INST_weight_arr_18_q0[151:144]}};
        tmp_52_reg_19899_pp0_iter5_reg <= tmp_52_reg_19899;
        tmp_54_reg_19910 <= {{PATCH_EMBED_INST_weight_arr_18_q0[167:160]}};
        tmp_55_reg_19915 <= {{PATCH_EMBED_INST_weight_arr_18_q0[175:168]}};
        tmp_55_reg_19915_pp0_iter5_reg <= tmp_55_reg_19915;
        tmp_56_reg_19920 <= {{PATCH_EMBED_INST_weight_arr_18_q0[183:176]}};
        tmp_56_reg_19920_pp0_iter5_reg <= tmp_56_reg_19920;
        tmp_57_reg_19925 <= {{PATCH_EMBED_INST_weight_arr_18_q0[191:184]}};
        tmp_59_reg_19936 <= {{PATCH_EMBED_INST_weight_arr_18_q0[207:200]}};
        tmp_59_reg_19936_pp0_iter5_reg <= tmp_59_reg_19936;
        tmp_61_reg_19947 <= {{PATCH_EMBED_INST_weight_arr_18_q0[223:216]}};
        tmp_62_reg_19952 <= {{PATCH_EMBED_INST_weight_arr_18_q0[231:224]}};
        tmp_63_reg_19957 <= {{PATCH_EMBED_INST_weight_arr_18_q0[239:232]}};
        tmp_63_reg_19957_pp0_iter5_reg <= tmp_63_reg_19957;
        tmp_64_reg_19962 <= {{PATCH_EMBED_INST_weight_arr_18_q0[247:240]}};
        tmp_64_reg_19962_pp0_iter5_reg <= tmp_64_reg_19962;
        tmp_65_reg_19967 <= {{PATCH_EMBED_INST_weight_arr_18_q0[255:248]}};
        tmp_65_reg_19967_pp0_iter5_reg <= tmp_65_reg_19967;
        tmp_66_reg_19972 <= {{PATCH_EMBED_INST_weight_arr_18_q0[263:256]}};
        tmp_67_reg_19977 <= {{PATCH_EMBED_INST_weight_arr_18_q0[271:264]}};
        tmp_68_reg_19982 <= {{PATCH_EMBED_INST_weight_arr_18_q0[279:272]}};
        tmp_68_reg_19982_pp0_iter5_reg <= tmp_68_reg_19982;
        tmp_70_reg_19993 <= {{PATCH_EMBED_INST_weight_arr_18_q0[295:288]}};
        tmp_71_reg_19998 <= {{PATCH_EMBED_INST_weight_arr_18_q0[303:296]}};
        tmp_71_reg_19998_pp0_iter5_reg <= tmp_71_reg_19998;
        tmp_72_reg_20003 <= {{PATCH_EMBED_INST_weight_arr_18_q0[311:304]}};
        tmp_72_reg_20003_pp0_iter5_reg <= tmp_72_reg_20003;
        tmp_73_reg_20008 <= {{PATCH_EMBED_INST_weight_arr_18_q0[319:312]}};
        tmp_75_reg_20019 <= {{PATCH_EMBED_INST_weight_arr_18_q0[335:328]}};
        tmp_75_reg_20019_pp0_iter5_reg <= tmp_75_reg_20019;
        tmp_77_reg_20030 <= {{PATCH_EMBED_INST_weight_arr_18_q0[351:344]}};
        tmp_78_reg_20035 <= {{PATCH_EMBED_INST_weight_arr_18_q0[359:352]}};
        tmp_79_reg_20040 <= {{PATCH_EMBED_INST_weight_arr_18_q0[367:360]}};
        tmp_79_reg_20040_pp0_iter5_reg <= tmp_79_reg_20040;
        tmp_80_reg_20045 <= {{PATCH_EMBED_INST_weight_arr_18_q0[375:368]}};
        tmp_80_reg_20045_pp0_iter5_reg <= tmp_80_reg_20045;
        tmp_81_reg_20050 <= {{PATCH_EMBED_INST_weight_arr_18_q0[383:376]}};
        tmp_81_reg_20050_pp0_iter5_reg <= tmp_81_reg_20050;
        tmp_82_reg_20055 <= {{PATCH_EMBED_INST_weight_arr_18_q0[391:384]}};
        tmp_83_reg_20060 <= {{PATCH_EMBED_INST_weight_arr_18_q0[399:392]}};
        tmp_84_reg_20065 <= {{PATCH_EMBED_INST_weight_arr_18_q0[407:400]}};
        tmp_84_reg_20065_pp0_iter5_reg <= tmp_84_reg_20065;
        tmp_86_reg_20076 <= {{PATCH_EMBED_INST_weight_arr_18_q0[423:416]}};
        tmp_87_reg_20081 <= {{PATCH_EMBED_INST_weight_arr_18_q0[431:424]}};
        tmp_87_reg_20081_pp0_iter5_reg <= tmp_87_reg_20081;
        tmp_88_reg_20086 <= {{PATCH_EMBED_INST_weight_arr_18_q0[439:432]}};
        tmp_88_reg_20086_pp0_iter5_reg <= tmp_88_reg_20086;
        tmp_89_reg_20091 <= {{PATCH_EMBED_INST_weight_arr_18_q0[447:440]}};
        tmp_91_reg_20102 <= {{PATCH_EMBED_INST_weight_arr_18_q0[463:456]}};
        tmp_91_reg_20102_pp0_iter5_reg <= tmp_91_reg_20102;
        tmp_93_reg_20113 <= {{PATCH_EMBED_INST_weight_arr_18_q0[479:472]}};
        tmp_94_reg_20118 <= {{PATCH_EMBED_INST_weight_arr_18_q0[487:480]}};
        tmp_95_reg_20123 <= {{PATCH_EMBED_INST_weight_arr_18_q0[495:488]}};
        tmp_95_reg_20123_pp0_iter5_reg <= tmp_95_reg_20123;
        tmp_96_reg_20128 <= {{PATCH_EMBED_INST_weight_arr_18_q0[503:496]}};
        tmp_96_reg_20128_pp0_iter5_reg <= tmp_96_reg_20128;
        tmp_97_reg_20133 <= {{PATCH_EMBED_INST_weight_arr_18_q0[511:504]}};
        tmp_97_reg_20133_pp0_iter5_reg <= tmp_97_reg_20133;
        tmp_98_reg_20138 <= {{PATCH_EMBED_INST_weight_arr_18_q0[519:512]}};
        tmp_99_reg_20143 <= {{PATCH_EMBED_INST_weight_arr_18_q0[527:520]}};
        trunc_ln149_10_reg_19656 <= {{cache_window_sm_dout[95:88]}};
        trunc_ln149_11_reg_19661 <= {{cache_window_sm_dout[103:96]}};
        trunc_ln149_12_reg_19666 <= {{cache_window_sm_dout[111:104]}};
        trunc_ln149_12_reg_19666_pp0_iter5_reg <= trunc_ln149_12_reg_19666;
        trunc_ln149_13_reg_19671 <= {{cache_window_sm_dout[119:112]}};
        trunc_ln149_13_reg_19671_pp0_iter5_reg <= trunc_ln149_13_reg_19671;
        trunc_ln149_14_reg_19676 <= {{cache_window_sm_dout[127:120]}};
        trunc_ln149_14_reg_19676_pp0_iter5_reg <= trunc_ln149_14_reg_19676;
        trunc_ln149_15_reg_19681 <= {{cache_window_sm_dout[135:128]}};
        trunc_ln149_16_reg_19686 <= {{cache_window_sm_dout[143:136]}};
        trunc_ln149_17_reg_19691 <= {{cache_window_sm_dout[151:144]}};
        trunc_ln149_17_reg_19691_pp0_iter5_reg <= trunc_ln149_17_reg_19691;
        trunc_ln149_19_reg_19696 <= {{cache_window_sm_dout[167:160]}};
        trunc_ln149_1_reg_19621 <= {{cache_window_sm_dout[15:8]}};
        trunc_ln149_20_reg_19701 <= {{cache_window_sm_dout[175:168]}};
        trunc_ln149_20_reg_19701_pp0_iter5_reg <= trunc_ln149_20_reg_19701;
        trunc_ln149_21_reg_19706 <= {{cache_window_sm_dout[183:176]}};
        trunc_ln149_21_reg_19706_pp0_iter5_reg <= trunc_ln149_21_reg_19706;
        trunc_ln149_22_reg_19711 <= {{cache_window_sm_dout[191:184]}};
        trunc_ln149_24_reg_19716 <= {{cache_window_sm_dout[207:200]}};
        trunc_ln149_24_reg_19716_pp0_iter5_reg <= trunc_ln149_24_reg_19716;
        trunc_ln149_26_reg_19721 <= {{cache_window_sm_dout[223:216]}};
        trunc_ln149_27_reg_19726 <= {{cache_window_sm_dout[231:224]}};
        trunc_ln149_28_reg_19731 <= {{cache_window_sm_dout[239:232]}};
        trunc_ln149_28_reg_19731_pp0_iter5_reg <= trunc_ln149_28_reg_19731;
        trunc_ln149_29_reg_19736 <= {{cache_window_sm_dout[247:240]}};
        trunc_ln149_29_reg_19736_pp0_iter5_reg <= trunc_ln149_29_reg_19736;
        trunc_ln149_2_reg_19626 <= {{cache_window_sm_dout[23:16]}};
        trunc_ln149_2_reg_19626_pp0_iter5_reg <= trunc_ln149_2_reg_19626;
        trunc_ln149_30_reg_19741 <= {{cache_window_sm_dout[255:248]}};
        trunc_ln149_30_reg_19741_pp0_iter5_reg <= trunc_ln149_30_reg_19741;
        trunc_ln149_4_reg_19631 <= {{cache_window_sm_dout[39:32]}};
        trunc_ln149_5_reg_19636 <= {{cache_window_sm_dout[47:40]}};
        trunc_ln149_5_reg_19636_pp0_iter5_reg <= trunc_ln149_5_reg_19636;
        trunc_ln149_6_reg_19641 <= {{cache_window_sm_dout[55:48]}};
        trunc_ln149_6_reg_19641_pp0_iter5_reg <= trunc_ln149_6_reg_19641;
        trunc_ln149_7_reg_19646 <= {{cache_window_sm_dout[63:56]}};
        trunc_ln149_9_reg_19651 <= {{cache_window_sm_dout[79:72]}};
        trunc_ln149_9_reg_19651_pp0_iter5_reg <= trunc_ln149_9_reg_19651;
        trunc_ln149_reg_19616 <= trunc_ln149_fu_2813_p1;
        trunc_ln159_reg_19746 <= trunc_ln159_fu_3127_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln161_113_reg_24095 <= grp_fu_17774_p3;
        add_ln161_129_reg_24105 <= grp_fu_17800_p3;
        add_ln161_145_reg_24115 <= grp_fu_17826_p3;
        add_ln161_161_reg_24125 <= grp_fu_17852_p3;
        add_ln161_177_reg_24135 <= grp_fu_17878_p3;
        add_ln161_17_reg_24035 <= grp_fu_17618_p3;
        add_ln161_193_reg_24145 <= grp_fu_17904_p3;
        add_ln161_1_reg_24025 <= grp_fu_17592_p3;
        add_ln161_209_reg_24155 <= grp_fu_17930_p3;
        add_ln161_225_reg_24165 <= grp_fu_17956_p3;
        add_ln161_241_reg_24175 <= grp_fu_17982_p3;
        add_ln161_33_reg_24045 <= grp_fu_17644_p3;
        add_ln161_417_reg_24235 <= grp_fu_18188_p3;
        add_ln161_433_reg_24245 <= grp_fu_18214_p3;
        add_ln161_449_reg_24255 <= grp_fu_18240_p3;
        add_ln161_465_reg_24265 <= grp_fu_18266_p3;
        add_ln161_481_reg_24275 <= grp_fu_18292_p3;
        add_ln161_497_reg_24285 <= grp_fu_18318_p3;
        add_ln161_49_reg_24055 <= grp_fu_17670_p3;
        add_ln161_65_reg_24065 <= grp_fu_17696_p3;
        add_ln161_81_reg_24075 <= grp_fu_17722_p3;
        add_ln161_97_reg_24085 <= grp_fu_17748_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln127_reg_19544 <= icmp_ln127_fu_2612_p2;
        icmp_ln127_reg_19544_pp0_iter1_reg <= icmp_ln127_reg_19544;
        icmp_ln132_reg_19569 <= icmp_ln132_fu_2778_p2;
        icmp_ln173_reg_19605 <= icmp_ln173_fu_2787_p2;
        select_ln127_1_reg_19556 <= select_ln127_1_fu_2664_p3;
        select_ln127_1_reg_19556_pp0_iter1_reg <= select_ln127_1_reg_19556;
        select_ln127_reg_19549 <= select_ln127_fu_2656_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_553_fu_2336 <= add_ln161_271_fu_14924_p2;
        empty_554_fu_2340 <= add_ln161_287_fu_14951_p2;
        empty_555_fu_2344 <= add_ln161_303_fu_14978_p2;
        empty_556_fu_2348 <= add_ln161_319_fu_15005_p2;
        empty_557_fu_2352 <= add_ln161_335_fu_15032_p2;
        empty_558_fu_2356 <= add_ln161_351_fu_15059_p2;
        empty_559_fu_2360 <= add_ln161_367_fu_15086_p2;
        empty_560_fu_2364 <= add_ln161_383_fu_15113_p2;
        empty_561_fu_2368 <= add_ln161_399_fu_15140_p2;
        empty_562_fu_2372 <= add_ln161_415_fu_15167_p2;
        empty_563_fu_2376 <= add_ln161_431_fu_15206_p2;
        empty_564_fu_2380 <= add_ln161_447_fu_15245_p2;
        empty_565_fu_2384 <= add_ln161_463_fu_15284_p2;
        empty_566_fu_2388 <= add_ln161_479_fu_15323_p2;
        empty_567_fu_2392 <= add_ln161_495_fu_15362_p2;
        empty_568_fu_2396 <= add_ln161_511_fu_15401_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        PATCH_EMBED_INST_bias_arr_19_ce0 = 1'b1;
    end else begin
        PATCH_EMBED_INST_bias_arr_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        PATCH_EMBED_INST_cls_arr_20_ce0 = 1'b1;
    end else begin
        PATCH_EMBED_INST_cls_arr_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((frp_pipeline_valid_U_valid_out[4'd1] == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        PATCH_EMBED_INST_weight_arr_18_ce0 = 1'b1;
    end else begin
        PATCH_EMBED_INST_weight_arr_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((frp_pipeline_valid_U_valid_out[4'd0] == 1'b1) & ((icmp_ln126_fu_2594_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int_frp = 1'b1;
    end else begin
        ap_done_int_frp = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd1] == 1'b1)) begin
        ap_enable_reg_pp0_iter1 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter1 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd10] == 1'b1)) begin
        ap_enable_reg_pp0_iter10 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter10 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd2] == 1'b1)) begin
        ap_enable_reg_pp0_iter2 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter2 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd3] == 1'b1)) begin
        ap_enable_reg_pp0_iter3 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter3 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd4] == 1'b1)) begin
        ap_enable_reg_pp0_iter4 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter4 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd5] == 1'b1)) begin
        ap_enable_reg_pp0_iter5 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter5 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd6] == 1'b1)) begin
        ap_enable_reg_pp0_iter6 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter6 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd7] == 1'b1)) begin
        ap_enable_reg_pp0_iter7 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter7 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd8] == 1'b1)) begin
        ap_enable_reg_pp0_iter8 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter8 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd9] == 1'b1)) begin
        ap_enable_reg_pp0_iter9 = 1'b1;
    end else begin
        ap_enable_reg_pp0_iter9 = 1'b0;
    end
end

always @ (*) begin
    if ((frp_pipeline_valid_U_valid_out[4'd4] == 1'b1)) begin
        ap_frp_data_issued_nxt_cache_window_sm_op126 = 1'b1;
    end else begin
        ap_frp_data_issued_nxt_cache_window_sm_op126 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_frp_data_issued_nxt_cache_window_sm_op126 == 1'b1)) begin
        ap_frp_data_next_issued_cache_window_sm = 1'd1;
    end else begin
        ap_frp_data_next_issued_cache_window_sm = 1'd0;
    end
end

always @ (*) begin
    if ((~(icmp_ln126_fu_2594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_frp_data_req_cache_window_sm_op126 = 1'd1;
    end else begin
        ap_frp_data_req_cache_window_sm_op126 = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_condition_frp_pvb_pf_start) & (1'b1 == ap_condition_frp_pvb_no_bkwd_prs) & (1'b1 == ap_condition_frp_roi_pvb_no_fwd_prs))) begin
        ap_frp_vld_in = 1'b1;
    end else begin
        ap_frp_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((frp_pipeline_valid_U_valid_out[4'd0] == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_2268;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 4'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_2400;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten107_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten107_load = indvar_flatten107_fu_2412;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_2404;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_load = add_ln161_511_fu_15401_p2;
    end else begin
        ap_sig_allocacmp_p_load = empty_568_fu_2396;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_load402 = add_ln161_495_fu_15362_p2;
    end else begin
        ap_sig_allocacmp_p_load402 = empty_567_fu_2392;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_load403 = add_ln161_479_fu_15323_p2;
    end else begin
        ap_sig_allocacmp_p_load403 = empty_566_fu_2388;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_load404 = add_ln161_463_fu_15284_p2;
    end else begin
        ap_sig_allocacmp_p_load404 = empty_565_fu_2384;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_load405 = add_ln161_447_fu_15245_p2;
    end else begin
        ap_sig_allocacmp_p_load405 = empty_564_fu_2380;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_load406 = add_ln161_431_fu_15206_p2;
    end else begin
        ap_sig_allocacmp_p_load406 = empty_563_fu_2376;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load417 = empty_569_fu_15709_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load417 = add_ln161_255_fu_14897_p2;
        end else begin
            ap_sig_allocacmp_p_load417 = empty_552_fu_2332;
        end
    end else begin
        ap_sig_allocacmp_p_load417 = empty_552_fu_2332;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load418 = empty_570_fu_15716_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load418 = add_ln161_239_fu_14858_p2;
        end else begin
            ap_sig_allocacmp_p_load418 = empty_551_fu_2328;
        end
    end else begin
        ap_sig_allocacmp_p_load418 = empty_551_fu_2328;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load419 = empty_571_fu_15723_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load419 = add_ln161_223_fu_14819_p2;
        end else begin
            ap_sig_allocacmp_p_load419 = empty_550_fu_2324;
        end
    end else begin
        ap_sig_allocacmp_p_load419 = empty_550_fu_2324;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load420 = empty_572_fu_15730_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load420 = add_ln161_207_fu_14780_p2;
        end else begin
            ap_sig_allocacmp_p_load420 = empty_549_fu_2320;
        end
    end else begin
        ap_sig_allocacmp_p_load420 = empty_549_fu_2320;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load421 = empty_573_fu_15737_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load421 = add_ln161_191_fu_14741_p2;
        end else begin
            ap_sig_allocacmp_p_load421 = empty_548_fu_2316;
        end
    end else begin
        ap_sig_allocacmp_p_load421 = empty_548_fu_2316;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load422 = empty_574_fu_15744_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load422 = add_ln161_175_fu_14702_p2;
        end else begin
            ap_sig_allocacmp_p_load422 = empty_547_fu_2312;
        end
    end else begin
        ap_sig_allocacmp_p_load422 = empty_547_fu_2312;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load423 = empty_575_fu_15751_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load423 = add_ln161_159_fu_14663_p2;
        end else begin
            ap_sig_allocacmp_p_load423 = empty_546_fu_2308;
        end
    end else begin
        ap_sig_allocacmp_p_load423 = empty_546_fu_2308;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load424 = empty_576_fu_15758_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load424 = add_ln161_143_fu_14624_p2;
        end else begin
            ap_sig_allocacmp_p_load424 = empty_545_fu_2304;
        end
    end else begin
        ap_sig_allocacmp_p_load424 = empty_545_fu_2304;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load425 = empty_577_fu_15765_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load425 = add_ln161_127_fu_14585_p2;
        end else begin
            ap_sig_allocacmp_p_load425 = empty_544_fu_2300;
        end
    end else begin
        ap_sig_allocacmp_p_load425 = empty_544_fu_2300;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load426 = empty_578_fu_15772_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load426 = add_ln161_111_fu_14546_p2;
        end else begin
            ap_sig_allocacmp_p_load426 = empty_543_fu_2296;
        end
    end else begin
        ap_sig_allocacmp_p_load426 = empty_543_fu_2296;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load427 = empty_579_fu_15779_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load427 = add_ln161_95_fu_14507_p2;
        end else begin
            ap_sig_allocacmp_p_load427 = empty_542_fu_2292;
        end
    end else begin
        ap_sig_allocacmp_p_load427 = empty_542_fu_2292;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load428 = empty_580_fu_15786_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load428 = add_ln161_79_fu_14468_p2;
        end else begin
            ap_sig_allocacmp_p_load428 = empty_541_fu_2288;
        end
    end else begin
        ap_sig_allocacmp_p_load428 = empty_541_fu_2288;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load429 = empty_581_fu_15793_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load429 = add_ln161_63_fu_14429_p2;
        end else begin
            ap_sig_allocacmp_p_load429 = empty_540_fu_2284;
        end
    end else begin
        ap_sig_allocacmp_p_load429 = empty_540_fu_2284;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load430 = empty_582_fu_15800_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load430 = add_ln161_47_fu_14390_p2;
        end else begin
            ap_sig_allocacmp_p_load430 = empty_539_fu_2280;
        end
    end else begin
        ap_sig_allocacmp_p_load430 = empty_539_fu_2280;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load431 = empty_583_fu_15807_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load431 = add_ln161_31_fu_14351_p2;
        end else begin
            ap_sig_allocacmp_p_load431 = empty_538_fu_2276;
        end
    end else begin
        ap_sig_allocacmp_p_load431 = empty_538_fu_2276;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd1)) begin
            ap_sig_allocacmp_p_load432 = empty_584_fu_15814_p3;
        end else if ((icmp_ln173_reg_19605_pp0_iter8_reg == 1'd0)) begin
            ap_sig_allocacmp_p_load432 = add_ln161_15_fu_14312_p2;
        end else begin
            ap_sig_allocacmp_p_load432 = empty_fu_2272;
        end
    end else begin
        ap_sig_allocacmp_p_load432 = empty_fu_2272;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_loop_init_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_tt_load = 7'd0;
    end else begin
        ap_sig_allocacmp_tt_load = tt_fu_2408;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln126_fu_2594_p2 == 1'd1))) begin
        frp_pipeline_valid_U_exitcond = 1'b1;
    end else begin
        frp_pipeline_valid_U_exitcond = 1'b0;
    end
end

always @ (*) begin
    if ((pf_mac_sm_U_data_out_vld == 1'b1)) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_reg_19605_pp0_iter9_reg == 1'd1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pf_mac_sm_U_data_in_vld = 1'b1;
    end else begin
        pf_mac_sm_U_data_in_vld = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PATCH_EMBED_INST_bias_arr_19_address0 = p_cast390_fu_9071_p1;

assign PATCH_EMBED_INST_cls_arr_20_address0 = zext_ln127_fu_13365_p1;

assign PATCH_EMBED_INST_weight_arr_18_address0 = zext_ln159_2_fu_2773_p1;

assign add_ln126_1_fu_2588_p2 = (ap_sig_allocacmp_indvar_flatten107_load + 16'd1);

assign add_ln126_fu_2798_p2 = (ap_sig_allocacmp_tt_load + 7'd1);

assign add_ln127_1_fu_2678_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln127_fu_2644_p2 = (select_ln126_fu_2618_p3 + 4'd1);

assign add_ln128_fu_2672_p2 = (select_ln127_fu_2656_p3 + 6'd1);

assign add_ln159_fu_2767_p2 = (sub_ln159_fu_2758_p2 + zext_ln159_1_fu_2764_p1);

assign add_ln161_101_fu_12549_p2 = ($signed(sext_ln161_82_fu_12546_p1) + $signed(sext_ln161_81_fu_12543_p1));

assign add_ln161_102_fu_14524_p2 = ($signed(sext_ln161_83_fu_14521_p1) + $signed(add_ln161_98_fu_14516_p2));

assign add_ln161_105_fu_13853_p2 = ($signed(sext_ln161_85_fu_13850_p1) + $signed(sext_ln161_84_fu_13847_p1));

assign add_ln161_110_fu_14536_p2 = ($signed(sext_ln161_89_fu_14533_p1) + $signed(sext_ln161_86_fu_14530_p1));

assign add_ln161_111_fu_14546_p2 = ($signed(sext_ln161_90_fu_14542_p1) + $signed(add_ln161_102_fu_14524_p2));

assign add_ln161_114_fu_14555_p2 = ($signed(sext_ln161_93_fu_14552_p1) + $signed(grp_fu_18525_p3));

assign add_ln161_117_fu_12576_p2 = ($signed(sext_ln161_95_fu_12573_p1) + $signed(sext_ln161_94_fu_12570_p1));

assign add_ln161_118_fu_14563_p2 = ($signed(sext_ln161_96_fu_14560_p1) + $signed(add_ln161_114_fu_14555_p2));

assign add_ln161_121_fu_13865_p2 = ($signed(sext_ln161_98_fu_13862_p1) + $signed(sext_ln161_97_fu_13859_p1));

assign add_ln161_126_fu_14575_p2 = ($signed(sext_ln161_102_fu_14572_p1) + $signed(sext_ln161_99_fu_14569_p1));

assign add_ln161_127_fu_14585_p2 = ($signed(sext_ln161_103_fu_14581_p1) + $signed(add_ln161_118_fu_14563_p2));

assign add_ln161_130_fu_14594_p2 = ($signed(sext_ln161_106_fu_14591_p1) + $signed(grp_fu_18551_p3));

assign add_ln161_133_fu_12603_p2 = ($signed(sext_ln161_108_fu_12600_p1) + $signed(sext_ln161_107_fu_12597_p1));

assign add_ln161_134_fu_14602_p2 = ($signed(sext_ln161_109_fu_14599_p1) + $signed(add_ln161_130_fu_14594_p2));

assign add_ln161_137_fu_13877_p2 = ($signed(sext_ln161_111_fu_13874_p1) + $signed(sext_ln161_110_fu_13871_p1));

assign add_ln161_142_fu_14614_p2 = ($signed(sext_ln161_115_fu_14611_p1) + $signed(sext_ln161_112_fu_14608_p1));

assign add_ln161_143_fu_14624_p2 = ($signed(sext_ln161_116_fu_14620_p1) + $signed(add_ln161_134_fu_14602_p2));

assign add_ln161_146_fu_14633_p2 = ($signed(sext_ln161_119_fu_14630_p1) + $signed(grp_fu_18577_p3));

assign add_ln161_149_fu_12630_p2 = ($signed(sext_ln161_121_fu_12627_p1) + $signed(sext_ln161_120_fu_12624_p1));

assign add_ln161_14_fu_14302_p2 = ($signed(sext_ln161_11_fu_14299_p1) + $signed(sext_ln161_8_fu_14296_p1));

assign add_ln161_150_fu_14641_p2 = ($signed(sext_ln161_122_fu_14638_p1) + $signed(add_ln161_146_fu_14633_p2));

assign add_ln161_153_fu_13889_p2 = ($signed(sext_ln161_124_fu_13886_p1) + $signed(sext_ln161_123_fu_13883_p1));

assign add_ln161_158_fu_14653_p2 = ($signed(sext_ln161_128_fu_14650_p1) + $signed(sext_ln161_125_fu_14647_p1));

assign add_ln161_159_fu_14663_p2 = ($signed(sext_ln161_129_fu_14659_p1) + $signed(add_ln161_150_fu_14641_p2));

assign add_ln161_15_fu_14312_p2 = ($signed(sext_ln161_12_fu_14308_p1) + $signed(add_ln161_6_fu_14290_p2));

assign add_ln161_162_fu_14672_p2 = ($signed(sext_ln161_132_fu_14669_p1) + $signed(grp_fu_18603_p3));

assign add_ln161_165_fu_12657_p2 = ($signed(sext_ln161_134_fu_12654_p1) + $signed(sext_ln161_133_fu_12651_p1));

assign add_ln161_166_fu_14680_p2 = ($signed(sext_ln161_135_fu_14677_p1) + $signed(add_ln161_162_fu_14672_p2));

assign add_ln161_169_fu_13901_p2 = ($signed(sext_ln161_137_fu_13898_p1) + $signed(sext_ln161_136_fu_13895_p1));

assign add_ln161_174_fu_14692_p2 = ($signed(sext_ln161_141_fu_14689_p1) + $signed(sext_ln161_138_fu_14686_p1));

assign add_ln161_175_fu_14702_p2 = ($signed(sext_ln161_142_fu_14698_p1) + $signed(add_ln161_166_fu_14680_p2));

assign add_ln161_178_fu_14711_p2 = ($signed(sext_ln161_145_fu_14708_p1) + $signed(grp_fu_18629_p3));

assign add_ln161_181_fu_12684_p2 = ($signed(sext_ln161_147_fu_12681_p1) + $signed(sext_ln161_146_fu_12678_p1));

assign add_ln161_182_fu_14719_p2 = ($signed(sext_ln161_148_fu_14716_p1) + $signed(add_ln161_178_fu_14711_p2));

assign add_ln161_185_fu_13913_p2 = ($signed(sext_ln161_150_fu_13910_p1) + $signed(sext_ln161_149_fu_13907_p1));

assign add_ln161_18_fu_14321_p2 = ($signed(sext_ln161_15_fu_14318_p1) + $signed(grp_fu_18369_p3));

assign add_ln161_190_fu_14731_p2 = ($signed(sext_ln161_154_fu_14728_p1) + $signed(sext_ln161_151_fu_14725_p1));

assign add_ln161_191_fu_14741_p2 = ($signed(sext_ln161_155_fu_14737_p1) + $signed(add_ln161_182_fu_14719_p2));

assign add_ln161_194_fu_14750_p2 = ($signed(sext_ln161_158_fu_14747_p1) + $signed(grp_fu_18655_p3));

assign add_ln161_197_fu_12711_p2 = ($signed(sext_ln161_160_fu_12708_p1) + $signed(sext_ln161_159_fu_12705_p1));

assign add_ln161_198_fu_14758_p2 = ($signed(sext_ln161_161_fu_14755_p1) + $signed(add_ln161_194_fu_14750_p2));

assign add_ln161_201_fu_13925_p2 = ($signed(sext_ln161_163_fu_13922_p1) + $signed(sext_ln161_162_fu_13919_p1));

assign add_ln161_206_fu_14770_p2 = ($signed(sext_ln161_167_fu_14767_p1) + $signed(sext_ln161_164_fu_14764_p1));

assign add_ln161_207_fu_14780_p2 = ($signed(sext_ln161_168_fu_14776_p1) + $signed(add_ln161_198_fu_14758_p2));

assign add_ln161_210_fu_14789_p2 = ($signed(sext_ln161_171_fu_14786_p1) + $signed(grp_fu_18681_p3));

assign add_ln161_213_fu_12738_p2 = ($signed(sext_ln161_173_fu_12735_p1) + $signed(sext_ln161_172_fu_12732_p1));

assign add_ln161_214_fu_14797_p2 = ($signed(sext_ln161_174_fu_14794_p1) + $signed(add_ln161_210_fu_14789_p2));

assign add_ln161_217_fu_13937_p2 = ($signed(sext_ln161_176_fu_13934_p1) + $signed(sext_ln161_175_fu_13931_p1));

assign add_ln161_21_fu_12414_p2 = ($signed(sext_ln161_17_fu_12411_p1) + $signed(sext_ln161_16_fu_12408_p1));

assign add_ln161_222_fu_14809_p2 = ($signed(sext_ln161_180_fu_14806_p1) + $signed(sext_ln161_177_fu_14803_p1));

assign add_ln161_223_fu_14819_p2 = ($signed(sext_ln161_181_fu_14815_p1) + $signed(add_ln161_214_fu_14797_p2));

assign add_ln161_226_fu_14828_p2 = ($signed(sext_ln161_184_fu_14825_p1) + $signed(grp_fu_18707_p3));

assign add_ln161_229_fu_12765_p2 = ($signed(sext_ln161_186_fu_12762_p1) + $signed(sext_ln161_185_fu_12759_p1));

assign add_ln161_22_fu_14329_p2 = ($signed(sext_ln161_18_fu_14326_p1) + $signed(add_ln161_18_fu_14321_p2));

assign add_ln161_230_fu_14836_p2 = ($signed(sext_ln161_187_fu_14833_p1) + $signed(add_ln161_226_fu_14828_p2));

assign add_ln161_233_fu_13949_p2 = ($signed(sext_ln161_189_fu_13946_p1) + $signed(sext_ln161_188_fu_13943_p1));

assign add_ln161_238_fu_14848_p2 = ($signed(sext_ln161_193_fu_14845_p1) + $signed(sext_ln161_190_fu_14842_p1));

assign add_ln161_239_fu_14858_p2 = ($signed(sext_ln161_194_fu_14854_p1) + $signed(add_ln161_230_fu_14836_p2));

assign add_ln161_242_fu_14867_p2 = ($signed(sext_ln161_197_fu_14864_p1) + $signed(grp_fu_18733_p3));

assign add_ln161_245_fu_12792_p2 = ($signed(sext_ln161_199_fu_12789_p1) + $signed(sext_ln161_198_fu_12786_p1));

assign add_ln161_246_fu_14875_p2 = ($signed(sext_ln161_200_fu_14872_p1) + $signed(add_ln161_242_fu_14867_p2));

assign add_ln161_249_fu_13961_p2 = ($signed(sext_ln161_202_fu_13958_p1) + $signed(sext_ln161_201_fu_13955_p1));

assign add_ln161_254_fu_14887_p2 = ($signed(sext_ln161_206_fu_14884_p1) + $signed(sext_ln161_203_fu_14881_p1));

assign add_ln161_255_fu_14897_p2 = ($signed(sext_ln161_207_fu_14893_p1) + $signed(add_ln161_246_fu_14875_p2));

assign add_ln161_25_fu_13793_p2 = ($signed(sext_ln161_20_fu_13790_p1) + $signed(sext_ln161_19_fu_13787_p1));

assign add_ln161_261_fu_12815_p2 = ($signed(sext_ln161_212_fu_12812_p1) + $signed(sext_ln161_211_fu_12809_p1));

assign add_ln161_262_fu_14919_p2 = ($signed(sext_ln161_220_fu_14915_p1) + $signed(grp_fu_18759_p7));

assign add_ln161_265_fu_13973_p2 = ($signed(sext_ln161_215_fu_13970_p1) + $signed(sext_ln161_214_fu_13967_p1));

assign add_ln161_270_fu_14909_p2 = ($signed(sext_ln161_219_fu_14906_p1) + $signed(sext_ln161_216_fu_14903_p1));

assign add_ln161_271_fu_14924_p2 = (add_ln161_262_fu_14919_p2 + select_ln132_15_fu_14273_p3);

assign add_ln161_277_fu_12842_p2 = ($signed(sext_ln161_225_fu_12839_p1) + $signed(sext_ln161_224_fu_12836_p1));

assign add_ln161_278_fu_14946_p2 = ($signed(sext_ln161_233_fu_14942_p1) + $signed(grp_fu_18791_p7));

assign add_ln161_281_fu_13985_p2 = ($signed(sext_ln161_228_fu_13982_p1) + $signed(sext_ln161_227_fu_13979_p1));

assign add_ln161_286_fu_14936_p2 = ($signed(sext_ln161_232_fu_14933_p1) + $signed(sext_ln161_229_fu_14930_p1));

assign add_ln161_287_fu_14951_p2 = (add_ln161_278_fu_14946_p2 + select_ln132_14_fu_14267_p3);

assign add_ln161_293_fu_12869_p2 = ($signed(sext_ln161_238_fu_12866_p1) + $signed(sext_ln161_237_fu_12863_p1));

assign add_ln161_294_fu_14973_p2 = ($signed(sext_ln161_246_fu_14969_p1) + $signed(grp_fu_18823_p7));

assign add_ln161_297_fu_13997_p2 = ($signed(sext_ln161_241_fu_13994_p1) + $signed(sext_ln161_240_fu_13991_p1));

assign add_ln161_2_fu_14282_p2 = ($signed(sext_ln161_2_fu_14279_p1) + $signed(grp_fu_18343_p3));

assign add_ln161_302_fu_14963_p2 = ($signed(sext_ln161_245_fu_14960_p1) + $signed(sext_ln161_242_fu_14957_p1));

assign add_ln161_303_fu_14978_p2 = (add_ln161_294_fu_14973_p2 + select_ln132_13_fu_14261_p3);

assign add_ln161_309_fu_12896_p2 = ($signed(sext_ln161_251_fu_12893_p1) + $signed(sext_ln161_250_fu_12890_p1));

assign add_ln161_30_fu_14341_p2 = ($signed(sext_ln161_24_fu_14338_p1) + $signed(sext_ln161_21_fu_14335_p1));

assign add_ln161_310_fu_15000_p2 = ($signed(sext_ln161_259_fu_14996_p1) + $signed(grp_fu_18855_p7));

assign add_ln161_313_fu_14009_p2 = ($signed(sext_ln161_254_fu_14006_p1) + $signed(sext_ln161_253_fu_14003_p1));

assign add_ln161_318_fu_14990_p2 = ($signed(sext_ln161_258_fu_14987_p1) + $signed(sext_ln161_255_fu_14984_p1));

assign add_ln161_319_fu_15005_p2 = (add_ln161_310_fu_15000_p2 + select_ln132_12_fu_14255_p3);

assign add_ln161_31_fu_14351_p2 = ($signed(sext_ln161_25_fu_14347_p1) + $signed(add_ln161_22_fu_14329_p2));

assign add_ln161_325_fu_12923_p2 = ($signed(sext_ln161_264_fu_12920_p1) + $signed(sext_ln161_263_fu_12917_p1));

assign add_ln161_326_fu_15027_p2 = ($signed(sext_ln161_272_fu_15023_p1) + $signed(grp_fu_18887_p7));

assign add_ln161_329_fu_14021_p2 = ($signed(sext_ln161_267_fu_14018_p1) + $signed(sext_ln161_266_fu_14015_p1));

assign add_ln161_334_fu_15017_p2 = ($signed(sext_ln161_271_fu_15014_p1) + $signed(sext_ln161_268_fu_15011_p1));

assign add_ln161_335_fu_15032_p2 = (add_ln161_326_fu_15027_p2 + select_ln132_11_fu_14249_p3);

assign add_ln161_341_fu_12950_p2 = ($signed(sext_ln161_277_fu_12947_p1) + $signed(sext_ln161_276_fu_12944_p1));

assign add_ln161_342_fu_15054_p2 = ($signed(sext_ln161_285_fu_15050_p1) + $signed(grp_fu_18919_p7));

assign add_ln161_345_fu_14033_p2 = ($signed(sext_ln161_280_fu_14030_p1) + $signed(sext_ln161_279_fu_14027_p1));

assign add_ln161_34_fu_14360_p2 = ($signed(sext_ln161_28_fu_14357_p1) + $signed(grp_fu_18395_p3));

assign add_ln161_350_fu_15044_p2 = ($signed(sext_ln161_284_fu_15041_p1) + $signed(sext_ln161_281_fu_15038_p1));

assign add_ln161_351_fu_15059_p2 = (add_ln161_342_fu_15054_p2 + select_ln132_10_fu_14243_p3);

assign add_ln161_357_fu_12977_p2 = ($signed(sext_ln161_290_fu_12974_p1) + $signed(sext_ln161_289_fu_12971_p1));

assign add_ln161_358_fu_15081_p2 = ($signed(sext_ln161_298_fu_15077_p1) + $signed(grp_fu_18951_p7));

assign add_ln161_361_fu_14045_p2 = ($signed(sext_ln161_293_fu_14042_p1) + $signed(sext_ln161_292_fu_14039_p1));

assign add_ln161_366_fu_15071_p2 = ($signed(sext_ln161_297_fu_15068_p1) + $signed(sext_ln161_294_fu_15065_p1));

assign add_ln161_367_fu_15086_p2 = (add_ln161_358_fu_15081_p2 + select_ln132_9_fu_14237_p3);

assign add_ln161_373_fu_13004_p2 = ($signed(sext_ln161_303_fu_13001_p1) + $signed(sext_ln161_302_fu_12998_p1));

assign add_ln161_374_fu_15108_p2 = ($signed(sext_ln161_311_fu_15104_p1) + $signed(grp_fu_18983_p7));

assign add_ln161_377_fu_14057_p2 = ($signed(sext_ln161_306_fu_14054_p1) + $signed(sext_ln161_305_fu_14051_p1));

assign add_ln161_37_fu_12441_p2 = ($signed(sext_ln161_30_fu_12438_p1) + $signed(sext_ln161_29_fu_12435_p1));

assign add_ln161_382_fu_15098_p2 = ($signed(sext_ln161_310_fu_15095_p1) + $signed(sext_ln161_307_fu_15092_p1));

assign add_ln161_383_fu_15113_p2 = (add_ln161_374_fu_15108_p2 + select_ln132_8_fu_14231_p3);

assign add_ln161_389_fu_13031_p2 = ($signed(sext_ln161_316_fu_13028_p1) + $signed(sext_ln161_315_fu_13025_p1));

assign add_ln161_38_fu_14368_p2 = ($signed(sext_ln161_31_fu_14365_p1) + $signed(add_ln161_34_fu_14360_p2));

assign add_ln161_390_fu_15135_p2 = ($signed(sext_ln161_324_fu_15131_p1) + $signed(grp_fu_19015_p7));

assign add_ln161_393_fu_14069_p2 = ($signed(sext_ln161_319_fu_14066_p1) + $signed(sext_ln161_318_fu_14063_p1));

assign add_ln161_398_fu_15125_p2 = ($signed(sext_ln161_323_fu_15122_p1) + $signed(sext_ln161_320_fu_15119_p1));

assign add_ln161_399_fu_15140_p2 = (add_ln161_390_fu_15135_p2 + select_ln132_7_fu_14225_p3);

assign add_ln161_405_fu_13058_p2 = ($signed(sext_ln161_329_fu_13055_p1) + $signed(sext_ln161_328_fu_13052_p1));

assign add_ln161_406_fu_15162_p2 = ($signed(sext_ln161_337_fu_15158_p1) + $signed(grp_fu_19047_p7));

assign add_ln161_409_fu_14081_p2 = ($signed(sext_ln161_332_fu_14078_p1) + $signed(sext_ln161_331_fu_14075_p1));

assign add_ln161_414_fu_15152_p2 = ($signed(sext_ln161_336_fu_15149_p1) + $signed(sext_ln161_333_fu_15146_p1));

assign add_ln161_415_fu_15167_p2 = (add_ln161_406_fu_15162_p2 + select_ln132_6_fu_14219_p3);

assign add_ln161_418_fu_15176_p2 = ($signed(sext_ln161_340_fu_15173_p1) + $signed(grp_fu_19079_p3));

assign add_ln161_41_fu_13805_p2 = ($signed(sext_ln161_33_fu_13802_p1) + $signed(sext_ln161_32_fu_13799_p1));

assign add_ln161_421_fu_13089_p2 = ($signed(sext_ln161_342_fu_13086_p1) + $signed(sext_ln161_341_fu_13083_p1));

assign add_ln161_422_fu_15184_p2 = ($signed(sext_ln161_343_fu_15181_p1) + $signed(add_ln161_418_fu_15176_p2));

assign add_ln161_425_fu_14093_p2 = ($signed(sext_ln161_345_fu_14090_p1) + $signed(sext_ln161_344_fu_14087_p1));

assign add_ln161_430_fu_15196_p2 = ($signed(sext_ln161_349_fu_15193_p1) + $signed(sext_ln161_346_fu_15190_p1));

assign add_ln161_431_fu_15206_p2 = ($signed(sext_ln161_350_fu_15202_p1) + $signed(add_ln161_422_fu_15184_p2));

assign add_ln161_434_fu_15215_p2 = ($signed(sext_ln161_353_fu_15212_p1) + $signed(grp_fu_19105_p3));

assign add_ln161_437_fu_13116_p2 = ($signed(sext_ln161_355_fu_13113_p1) + $signed(sext_ln161_354_fu_13110_p1));

assign add_ln161_438_fu_15223_p2 = ($signed(sext_ln161_356_fu_15220_p1) + $signed(add_ln161_434_fu_15215_p2));

assign add_ln161_441_fu_14105_p2 = ($signed(sext_ln161_358_fu_14102_p1) + $signed(sext_ln161_357_fu_14099_p1));

assign add_ln161_446_fu_15235_p2 = ($signed(sext_ln161_362_fu_15232_p1) + $signed(sext_ln161_359_fu_15229_p1));

assign add_ln161_447_fu_15245_p2 = ($signed(sext_ln161_363_fu_15241_p1) + $signed(add_ln161_438_fu_15223_p2));

assign add_ln161_450_fu_15254_p2 = ($signed(sext_ln161_366_fu_15251_p1) + $signed(grp_fu_19131_p3));

assign add_ln161_453_fu_13143_p2 = ($signed(sext_ln161_368_fu_13140_p1) + $signed(sext_ln161_367_fu_13137_p1));

assign add_ln161_454_fu_15262_p2 = ($signed(sext_ln161_369_fu_15259_p1) + $signed(add_ln161_450_fu_15254_p2));

assign add_ln161_457_fu_14117_p2 = ($signed(sext_ln161_371_fu_14114_p1) + $signed(sext_ln161_370_fu_14111_p1));

assign add_ln161_462_fu_15274_p2 = ($signed(sext_ln161_375_fu_15271_p1) + $signed(sext_ln161_372_fu_15268_p1));

assign add_ln161_463_fu_15284_p2 = ($signed(sext_ln161_376_fu_15280_p1) + $signed(add_ln161_454_fu_15262_p2));

assign add_ln161_466_fu_15293_p2 = ($signed(sext_ln161_379_fu_15290_p1) + $signed(grp_fu_19157_p3));

assign add_ln161_469_fu_13170_p2 = ($signed(sext_ln161_381_fu_13167_p1) + $signed(sext_ln161_380_fu_13164_p1));

assign add_ln161_46_fu_14380_p2 = ($signed(sext_ln161_37_fu_14377_p1) + $signed(sext_ln161_34_fu_14374_p1));

assign add_ln161_470_fu_15301_p2 = ($signed(sext_ln161_382_fu_15298_p1) + $signed(add_ln161_466_fu_15293_p2));

assign add_ln161_473_fu_14129_p2 = ($signed(sext_ln161_384_fu_14126_p1) + $signed(sext_ln161_383_fu_14123_p1));

assign add_ln161_478_fu_15313_p2 = ($signed(sext_ln161_388_fu_15310_p1) + $signed(sext_ln161_385_fu_15307_p1));

assign add_ln161_479_fu_15323_p2 = ($signed(sext_ln161_389_fu_15319_p1) + $signed(add_ln161_470_fu_15301_p2));

assign add_ln161_47_fu_14390_p2 = ($signed(sext_ln161_38_fu_14386_p1) + $signed(add_ln161_38_fu_14368_p2));

assign add_ln161_482_fu_15332_p2 = ($signed(sext_ln161_392_fu_15329_p1) + $signed(grp_fu_19183_p3));

assign add_ln161_485_fu_13197_p2 = ($signed(sext_ln161_394_fu_13194_p1) + $signed(sext_ln161_393_fu_13191_p1));

assign add_ln161_486_fu_15340_p2 = ($signed(sext_ln161_395_fu_15337_p1) + $signed(add_ln161_482_fu_15332_p2));

assign add_ln161_489_fu_14141_p2 = ($signed(sext_ln161_397_fu_14138_p1) + $signed(sext_ln161_396_fu_14135_p1));

assign add_ln161_494_fu_15352_p2 = ($signed(sext_ln161_401_fu_15349_p1) + $signed(sext_ln161_398_fu_15346_p1));

assign add_ln161_495_fu_15362_p2 = ($signed(sext_ln161_402_fu_15358_p1) + $signed(add_ln161_486_fu_15340_p2));

assign add_ln161_498_fu_15371_p2 = ($signed(sext_ln161_405_fu_15368_p1) + $signed(grp_fu_19209_p3));

assign add_ln161_501_fu_13224_p2 = ($signed(sext_ln161_407_fu_13221_p1) + $signed(sext_ln161_406_fu_13218_p1));

assign add_ln161_502_fu_15379_p2 = ($signed(sext_ln161_408_fu_15376_p1) + $signed(add_ln161_498_fu_15371_p2));

assign add_ln161_505_fu_14153_p2 = ($signed(sext_ln161_410_fu_14150_p1) + $signed(sext_ln161_409_fu_14147_p1));

assign add_ln161_50_fu_14399_p2 = ($signed(sext_ln161_41_fu_14396_p1) + $signed(grp_fu_18421_p3));

assign add_ln161_510_fu_15391_p2 = ($signed(sext_ln161_414_fu_15388_p1) + $signed(sext_ln161_411_fu_15385_p1));

assign add_ln161_511_fu_15401_p2 = ($signed(sext_ln161_415_fu_15397_p1) + $signed(add_ln161_502_fu_15379_p2));

assign add_ln161_53_fu_12468_p2 = ($signed(sext_ln161_43_fu_12465_p1) + $signed(sext_ln161_42_fu_12462_p1));

assign add_ln161_54_fu_14407_p2 = ($signed(sext_ln161_44_fu_14404_p1) + $signed(add_ln161_50_fu_14399_p2));

assign add_ln161_57_fu_13817_p2 = ($signed(sext_ln161_46_fu_13814_p1) + $signed(sext_ln161_45_fu_13811_p1));

assign add_ln161_5_fu_12387_p2 = ($signed(sext_ln161_4_fu_12384_p1) + $signed(sext_ln161_3_fu_12381_p1));

assign add_ln161_62_fu_14419_p2 = ($signed(sext_ln161_50_fu_14416_p1) + $signed(sext_ln161_47_fu_14413_p1));

assign add_ln161_63_fu_14429_p2 = ($signed(sext_ln161_51_fu_14425_p1) + $signed(add_ln161_54_fu_14407_p2));

assign add_ln161_66_fu_14438_p2 = ($signed(sext_ln161_54_fu_14435_p1) + $signed(grp_fu_18447_p3));

assign add_ln161_69_fu_12495_p2 = ($signed(sext_ln161_56_fu_12492_p1) + $signed(sext_ln161_55_fu_12489_p1));

assign add_ln161_6_fu_14290_p2 = ($signed(sext_ln161_5_fu_14287_p1) + $signed(add_ln161_2_fu_14282_p2));

assign add_ln161_70_fu_14446_p2 = ($signed(sext_ln161_57_fu_14443_p1) + $signed(add_ln161_66_fu_14438_p2));

assign add_ln161_73_fu_13829_p2 = ($signed(sext_ln161_59_fu_13826_p1) + $signed(sext_ln161_58_fu_13823_p1));

assign add_ln161_78_fu_14458_p2 = ($signed(sext_ln161_63_fu_14455_p1) + $signed(sext_ln161_60_fu_14452_p1));

assign add_ln161_79_fu_14468_p2 = ($signed(sext_ln161_64_fu_14464_p1) + $signed(add_ln161_70_fu_14446_p2));

assign add_ln161_82_fu_14477_p2 = ($signed(sext_ln161_67_fu_14474_p1) + $signed(grp_fu_18473_p3));

assign add_ln161_85_fu_12522_p2 = ($signed(sext_ln161_69_fu_12519_p1) + $signed(sext_ln161_68_fu_12516_p1));

assign add_ln161_86_fu_14485_p2 = ($signed(sext_ln161_70_fu_14482_p1) + $signed(add_ln161_82_fu_14477_p2));

assign add_ln161_89_fu_13841_p2 = ($signed(sext_ln161_72_fu_13838_p1) + $signed(sext_ln161_71_fu_13835_p1));

assign add_ln161_94_fu_14497_p2 = ($signed(sext_ln161_76_fu_14494_p1) + $signed(sext_ln161_73_fu_14491_p1));

assign add_ln161_95_fu_14507_p2 = ($signed(sext_ln161_77_fu_14503_p1) + $signed(add_ln161_86_fu_14485_p2));

assign add_ln161_98_fu_14516_p2 = ($signed(sext_ln161_80_fu_14513_p1) + $signed(grp_fu_18499_p3));

assign add_ln161_9_fu_13781_p2 = ($signed(sext_ln161_7_fu_13778_p1) + $signed(sext_ln161_6_fu_13775_p1));

assign add_ln188_10_fu_16217_p2 = (empty_574_reg_24400 + 21'd128);

assign add_ln188_11_fu_16222_p2 = (empty_573_reg_24395 + 21'd128);

assign add_ln188_12_fu_16227_p2 = (empty_572_reg_24390 + 21'd128);

assign add_ln188_13_fu_16232_p2 = (empty_571_reg_24385 + 21'd128);

assign add_ln188_14_fu_16237_p2 = (empty_570_reg_24380 + 21'd128);

assign add_ln188_15_fu_16242_p2 = (empty_569_reg_24375 + 21'd128);

assign add_ln188_16_fu_16247_p2 = (add_ln161_271_reg_24295 + 21'd128);

assign add_ln188_17_fu_16252_p2 = (add_ln161_287_reg_24300 + 21'd128);

assign add_ln188_18_fu_16257_p2 = (add_ln161_303_reg_24305 + 21'd128);

assign add_ln188_19_fu_16262_p2 = (add_ln161_319_reg_24310 + 21'd128);

assign add_ln188_1_fu_16172_p2 = (empty_583_reg_24445 + 21'd128);

assign add_ln188_20_fu_16267_p2 = (add_ln161_335_reg_24315 + 21'd128);

assign add_ln188_21_fu_16272_p2 = (add_ln161_351_reg_24320 + 21'd128);

assign add_ln188_22_fu_16277_p2 = (add_ln161_367_reg_24325 + 21'd128);

assign add_ln188_23_fu_16282_p2 = (add_ln161_383_reg_24330 + 21'd128);

assign add_ln188_24_fu_16287_p2 = (add_ln161_399_reg_24335 + 21'd128);

assign add_ln188_25_fu_16292_p2 = (add_ln161_415_reg_24340 + 21'd128);

assign add_ln188_26_fu_16297_p2 = (add_ln161_431_reg_24345 + 21'd128);

assign add_ln188_27_fu_16302_p2 = (add_ln161_447_reg_24350 + 21'd128);

assign add_ln188_28_fu_16307_p2 = (add_ln161_463_reg_24355 + 21'd128);

assign add_ln188_29_fu_16312_p2 = (add_ln161_479_reg_24360 + 21'd128);

assign add_ln188_2_fu_16177_p2 = (empty_582_reg_24440 + 21'd128);

assign add_ln188_30_fu_16317_p2 = (add_ln161_495_reg_24365 + 21'd128);

assign add_ln188_31_fu_16322_p2 = (add_ln161_511_reg_24370 + 21'd128);

assign add_ln188_3_fu_16182_p2 = (empty_581_reg_24435 + 21'd128);

assign add_ln188_4_fu_16187_p2 = (empty_580_reg_24430 + 21'd128);

assign add_ln188_5_fu_16192_p2 = (empty_579_reg_24425 + 21'd128);

assign add_ln188_6_fu_16197_p2 = (empty_578_reg_24420 + 21'd128);

assign add_ln188_7_fu_16202_p2 = (empty_577_reg_24415 + 21'd128);

assign add_ln188_8_fu_16207_p2 = (empty_576_reg_24410 + 21'd128);

assign add_ln188_9_fu_16212_p2 = (empty_575_reg_24405 + 21'd128);

assign add_ln188_fu_16157_p2 = (empty_584_reg_24450 + 21'd128);

assign and_ln126_fu_2638_p2 = (xor_ln126_fu_2626_p2 & icmp_ln128_fu_2632_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = 1'b0;

assign ap_block_pp0_stage0_01001 = 1'b0;

assign ap_block_pp0_stage0_11001 = 1'b0;

assign ap_block_pp0_stage0_subdone = 1'b0;

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((icmp_ln173_reg_19605_pp0_iter9_reg == 1'd1) & (1'b1 == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state5_pp0_stage0_iter4 = (1'b1 == 1'b0);

always @ (*) begin
    ap_condition_frp_pvb_no_bkwd_prs = (pf_mac_sm_U_pf_ready == 1'b1);
end

always @ (*) begin
    ap_condition_frp_pvb_pf_start = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_condition_frp_roi_pvb_no_fwd_prs = ~(cache_window_sm_num_data_valid < (ap_frp_data_req_cache_window_sm + ap_frp_data_req_cache_window_sm_op126));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign cache_window_sm_blk_n = 1'b1;

assign cmp23_fu_6701_p2 = ((select_ln126_1_reg_19609 == 7'd0) ? 1'b1 : 1'b0);

assign empty_569_fu_15709_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? sext_ln178_fu_15705_p1 : add_ln161_255_fu_14897_p2);

assign empty_570_fu_15716_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_300_fu_15685_p4 : add_ln161_239_fu_14858_p2);

assign empty_571_fu_15723_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_299_fu_15675_p4 : add_ln161_223_fu_14819_p2);

assign empty_572_fu_15730_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_298_fu_15665_p4 : add_ln161_207_fu_14780_p2);

assign empty_573_fu_15737_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_297_fu_15655_p4 : add_ln161_191_fu_14741_p2);

assign empty_574_fu_15744_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_296_fu_15645_p4 : add_ln161_175_fu_14702_p2);

assign empty_575_fu_15751_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_295_fu_15635_p4 : add_ln161_159_fu_14663_p2);

assign empty_576_fu_15758_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_294_fu_15625_p4 : add_ln161_143_fu_14624_p2);

assign empty_577_fu_15765_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_293_fu_15615_p4 : add_ln161_127_fu_14585_p2);

assign empty_578_fu_15772_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_292_fu_15605_p4 : add_ln161_111_fu_14546_p2);

assign empty_579_fu_15779_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_291_fu_15595_p4 : add_ln161_95_fu_14507_p2);

assign empty_580_fu_15786_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_290_fu_15585_p4 : add_ln161_79_fu_14468_p2);

assign empty_581_fu_15793_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_289_fu_15575_p4 : add_ln161_63_fu_14429_p2);

assign empty_582_fu_15800_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_288_fu_15565_p4 : add_ln161_47_fu_14390_p2);

assign empty_583_fu_15807_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? tmp_287_fu_15555_p4 : add_ln161_31_fu_14351_p2);

assign empty_584_fu_15814_p3 = ((cmp23_reg_21194_pp0_iter8_reg[0:0] == 1'b1) ? trunc_ln178_fu_15551_p1 : add_ln161_15_fu_14312_p2);

assign empty_585_fu_6695_p2 = (tmp_30_fu_6677_p3 - tmp_317_cast_fu_6691_p1);

assign empty_586_fu_6709_p2 = (empty_585_fu_6695_p2 + select_ln127_1_cast_fu_6706_p1);

assign empty_587_fu_13511_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_13_fu_13493_p4);

assign empty_588_fu_13518_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_11_fu_13475_p4);

assign empty_589_fu_13525_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_s_fu_13457_p4);

assign empty_590_fu_13532_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_8_fu_13439_p4);

assign empty_591_fu_13539_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_6_fu_13421_p4);

assign empty_592_fu_13546_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_4_fu_13403_p4);

assign empty_593_fu_13553_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_2_fu_13385_p4);

assign empty_594_fu_13560_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : trunc_ln142_fu_13373_p1);

assign empty_595_fu_13567_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_1_fu_13376_p4);

assign empty_596_fu_13574_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_3_fu_13394_p4);

assign empty_597_fu_13581_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_5_fu_13412_p4);

assign empty_598_fu_13588_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_7_fu_13430_p4);

assign empty_599_fu_13595_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_9_fu_13448_p4);

assign empty_600_fu_13602_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_10_fu_13466_p4);

assign empty_601_fu_13609_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_12_fu_13484_p4);

assign empty_602_fu_13616_p3 = ((cmp23_reg_21194_pp0_iter7_reg[0:0] == 1'b1) ? 21'd0 : tmp_14_fu_13502_p4);

assign grp_fu_10014_p0 = sext_ln159_153_fu_10003_p1;

assign grp_fu_10014_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10046_p0 = sext_ln159_158_fu_10035_p1;

assign grp_fu_10046_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10074_p0 = sext_ln159_162_fu_10063_p1;

assign grp_fu_10074_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_10121_p0 = sext_ln159_169_fu_10110_p1;

assign grp_fu_10121_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10153_p0 = sext_ln159_174_fu_10142_p1;

assign grp_fu_10153_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10181_p0 = sext_ln159_178_fu_10170_p1;

assign grp_fu_10181_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_10228_p0 = sext_ln159_185_fu_10217_p1;

assign grp_fu_10228_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10260_p0 = sext_ln159_190_fu_10249_p1;

assign grp_fu_10260_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10288_p0 = sext_ln159_194_fu_10277_p1;

assign grp_fu_10288_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_10335_p0 = sext_ln159_201_fu_10324_p1;

assign grp_fu_10335_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10367_p0 = sext_ln159_206_fu_10356_p1;

assign grp_fu_10367_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10395_p0 = sext_ln159_210_fu_10384_p1;

assign grp_fu_10395_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_10442_p0 = sext_ln159_217_fu_10431_p1;

assign grp_fu_10442_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10474_p0 = sext_ln159_222_fu_10463_p1;

assign grp_fu_10474_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10502_p0 = sext_ln159_226_fu_10491_p1;

assign grp_fu_10502_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_10549_p0 = sext_ln159_233_fu_10538_p1;

assign grp_fu_10549_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10581_p0 = sext_ln159_238_fu_10570_p1;

assign grp_fu_10581_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10609_p0 = sext_ln159_242_fu_10598_p1;

assign grp_fu_10609_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_10656_p0 = sext_ln159_249_fu_10645_p1;

assign grp_fu_10656_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10688_p0 = sext_ln159_254_fu_10677_p1;

assign grp_fu_10688_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10716_p0 = sext_ln159_258_fu_10705_p1;

assign grp_fu_10716_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_10763_p0 = sext_ln159_265_fu_10752_p1;

assign grp_fu_10763_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_10795_p0 = sext_ln159_270_fu_10784_p1;

assign grp_fu_10795_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_10823_p0 = sext_ln159_5_fu_9082_p1;

assign grp_fu_10823_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_10870_p0 = sext_ln159_19_fu_9138_p1;

assign grp_fu_10870_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_10927_p0 = sext_ln159_34_fu_9207_p1;

assign grp_fu_10927_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_10965_p0 = sext_ln159_41_fu_9254_p1;

assign grp_fu_10965_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11013_p0 = sext_ln159_50_fu_9314_p1;

assign grp_fu_11013_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11051_p0 = sext_ln159_57_fu_9361_p1;

assign grp_fu_11051_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11099_p0 = sext_ln159_66_fu_9421_p1;

assign grp_fu_11099_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11137_p0 = sext_ln159_73_fu_9468_p1;

assign grp_fu_11137_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11185_p0 = sext_ln159_82_fu_9528_p1;

assign grp_fu_11185_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11223_p0 = sext_ln159_89_fu_9575_p1;

assign grp_fu_11223_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11271_p0 = sext_ln159_98_fu_9635_p1;

assign grp_fu_11271_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11309_p0 = sext_ln159_105_fu_9682_p1;

assign grp_fu_11309_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11357_p0 = sext_ln159_114_fu_9742_p1;

assign grp_fu_11357_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11395_p0 = sext_ln159_121_fu_9789_p1;

assign grp_fu_11395_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11443_p0 = sext_ln159_130_fu_9849_p1;

assign grp_fu_11443_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11481_p0 = sext_ln159_137_fu_9896_p1;

assign grp_fu_11481_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11529_p0 = sext_ln159_146_fu_9956_p1;

assign grp_fu_11529_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11567_p0 = sext_ln159_153_fu_10003_p1;

assign grp_fu_11567_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11615_p0 = sext_ln159_162_fu_10063_p1;

assign grp_fu_11615_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11653_p0 = sext_ln159_169_fu_10110_p1;

assign grp_fu_11653_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11701_p0 = sext_ln159_178_fu_10170_p1;

assign grp_fu_11701_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11739_p0 = sext_ln159_185_fu_10217_p1;

assign grp_fu_11739_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11765_p0 = sext_ln159_190_fu_10249_p1;

assign grp_fu_11765_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_11787_p0 = sext_ln159_194_fu_10277_p1;

assign grp_fu_11787_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11825_p0 = sext_ln159_201_fu_10324_p1;

assign grp_fu_11825_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11851_p0 = sext_ln159_206_fu_10356_p1;

assign grp_fu_11851_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_11873_p0 = sext_ln159_210_fu_10384_p1;

assign grp_fu_11873_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11911_p0 = sext_ln159_217_fu_10431_p1;

assign grp_fu_11911_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_11937_p0 = sext_ln159_222_fu_10463_p1;

assign grp_fu_11937_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_11959_p0 = sext_ln159_226_fu_10491_p1;

assign grp_fu_11959_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_11997_p0 = sext_ln159_233_fu_10538_p1;

assign grp_fu_11997_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_12023_p0 = sext_ln159_238_fu_10570_p1;

assign grp_fu_12023_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_12045_p0 = sext_ln159_242_fu_10598_p1;

assign grp_fu_12045_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_12083_p0 = sext_ln159_249_fu_10645_p1;

assign grp_fu_12083_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_12109_p0 = sext_ln159_254_fu_10677_p1;

assign grp_fu_12109_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_12131_p0 = sext_ln159_258_fu_10705_p1;

assign grp_fu_12131_p1 = sext_ln159_274_fu_10812_p1;

assign grp_fu_12169_p0 = sext_ln159_265_fu_10752_p1;

assign grp_fu_12169_p1 = sext_ln159_281_fu_10859_p1;

assign grp_fu_12195_p0 = sext_ln159_270_fu_10784_p1;

assign grp_fu_12195_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_16710_p0 = sext_ln159_7_fu_3165_p1;

assign grp_fu_16710_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16719_p0 = sext_ln159_17_fu_3231_p1;

assign grp_fu_16719_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16728_p0 = sext_ln159_21_fu_3267_p1;

assign grp_fu_16728_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16737_p0 = sext_ln159_35_fu_3369_p1;

assign grp_fu_16737_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16746_p0 = sext_ln159_40_fu_3431_p1;

assign grp_fu_16746_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16755_p0 = sext_ln159_42_fu_3463_p1;

assign grp_fu_16755_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16764_p0 = sext_ln159_51_fu_3565_p1;

assign grp_fu_16764_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16773_p0 = sext_ln159_56_fu_3627_p1;

assign grp_fu_16773_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16782_p0 = sext_ln159_58_fu_3659_p1;

assign grp_fu_16782_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16791_p0 = sext_ln159_67_fu_3761_p1;

assign grp_fu_16791_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16800_p0 = sext_ln159_72_fu_3823_p1;

assign grp_fu_16800_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16809_p0 = sext_ln159_74_fu_3855_p1;

assign grp_fu_16809_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16818_p0 = sext_ln159_83_fu_3957_p1;

assign grp_fu_16818_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16827_p0 = sext_ln159_88_fu_4019_p1;

assign grp_fu_16827_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16836_p0 = sext_ln159_90_fu_4051_p1;

assign grp_fu_16836_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16845_p0 = sext_ln159_99_fu_4153_p1;

assign grp_fu_16845_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16854_p0 = sext_ln159_104_fu_4215_p1;

assign grp_fu_16854_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16863_p0 = sext_ln159_106_fu_4247_p1;

assign grp_fu_16863_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16872_p0 = sext_ln159_115_fu_4349_p1;

assign grp_fu_16872_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16881_p0 = sext_ln159_120_fu_4411_p1;

assign grp_fu_16881_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16890_p0 = sext_ln159_122_fu_4443_p1;

assign grp_fu_16890_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16899_p0 = sext_ln159_131_fu_4545_p1;

assign grp_fu_16899_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16908_p0 = sext_ln159_136_fu_4607_p1;

assign grp_fu_16908_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16917_p0 = sext_ln159_138_fu_4639_p1;

assign grp_fu_16917_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16926_p0 = sext_ln159_147_fu_4741_p1;

assign grp_fu_16926_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16935_p0 = sext_ln159_152_fu_4803_p1;

assign grp_fu_16935_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16944_p0 = sext_ln159_154_fu_4835_p1;

assign grp_fu_16944_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16953_p0 = sext_ln159_163_fu_4937_p1;

assign grp_fu_16953_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16962_p0 = sext_ln159_168_fu_4999_p1;

assign grp_fu_16962_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16971_p0 = sext_ln159_170_fu_5031_p1;

assign grp_fu_16971_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_16980_p0 = sext_ln159_179_fu_5133_p1;

assign grp_fu_16980_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_16989_p0 = sext_ln159_184_fu_5195_p1;

assign grp_fu_16989_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_16998_p0 = sext_ln159_186_fu_5227_p1;

assign grp_fu_16998_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_17007_p0 = sext_ln159_195_fu_5329_p1;

assign grp_fu_17007_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_17016_p0 = sext_ln159_200_fu_5391_p1;

assign grp_fu_17016_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_17025_p0 = sext_ln159_202_fu_5423_p1;

assign grp_fu_17025_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_17034_p0 = sext_ln159_211_fu_5525_p1;

assign grp_fu_17034_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_17043_p0 = sext_ln159_216_fu_5587_p1;

assign grp_fu_17043_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_17052_p0 = sext_ln159_218_fu_5619_p1;

assign grp_fu_17052_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_17061_p0 = sext_ln159_227_fu_5721_p1;

assign grp_fu_17061_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_17070_p0 = sext_ln159_232_fu_5783_p1;

assign grp_fu_17070_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_17079_p0 = sext_ln159_234_fu_5815_p1;

assign grp_fu_17079_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_17088_p0 = sext_ln159_243_fu_5917_p1;

assign grp_fu_17088_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_17097_p0 = sext_ln159_248_fu_5979_p1;

assign grp_fu_17097_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_17106_p0 = sext_ln159_250_fu_6011_p1;

assign grp_fu_17106_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_17115_p0 = sext_ln159_259_fu_6113_p1;

assign grp_fu_17115_p1 = sext_ln159_6_fu_3161_p1;

assign grp_fu_17124_p0 = sext_ln159_264_fu_6175_p1;

assign grp_fu_17124_p1 = sext_ln159_16_fu_3227_p1;

assign grp_fu_17133_p0 = sext_ln159_266_fu_6207_p1;

assign grp_fu_17133_p1 = sext_ln159_20_fu_3263_p1;

assign grp_fu_17142_p0 = sext_ln159_7_fu_3165_p1;

assign grp_fu_17142_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17151_p0 = sext_ln159_17_fu_3231_p1;

assign grp_fu_17151_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17160_p0 = sext_ln159_21_fu_3267_p1;

assign grp_fu_17160_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17169_p0 = sext_ln159_35_fu_3369_p1;

assign grp_fu_17169_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17178_p0 = sext_ln159_40_fu_3431_p1;

assign grp_fu_17178_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17187_p0 = sext_ln159_42_fu_3463_p1;

assign grp_fu_17187_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17196_p0 = sext_ln159_51_fu_3565_p1;

assign grp_fu_17196_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17205_p0 = sext_ln159_56_fu_3627_p1;

assign grp_fu_17205_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17214_p0 = sext_ln159_58_fu_3659_p1;

assign grp_fu_17214_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17223_p0 = sext_ln159_67_fu_3761_p1;

assign grp_fu_17223_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17232_p0 = sext_ln159_72_fu_3823_p1;

assign grp_fu_17232_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17241_p0 = sext_ln159_74_fu_3855_p1;

assign grp_fu_17241_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17250_p0 = sext_ln159_83_fu_3957_p1;

assign grp_fu_17250_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17259_p0 = sext_ln159_88_fu_4019_p1;

assign grp_fu_17259_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17268_p0 = sext_ln159_90_fu_4051_p1;

assign grp_fu_17268_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17277_p0 = sext_ln159_99_fu_4153_p1;

assign grp_fu_17277_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17286_p0 = sext_ln159_104_fu_4215_p1;

assign grp_fu_17286_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17295_p0 = sext_ln159_106_fu_4247_p1;

assign grp_fu_17295_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17304_p0 = sext_ln159_115_fu_4349_p1;

assign grp_fu_17304_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17313_p0 = sext_ln159_120_fu_4411_p1;

assign grp_fu_17313_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17322_p0 = sext_ln159_122_fu_4443_p1;

assign grp_fu_17322_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17331_p0 = sext_ln159_131_fu_4545_p1;

assign grp_fu_17331_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17340_p0 = sext_ln159_136_fu_4607_p1;

assign grp_fu_17340_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17349_p0 = sext_ln159_138_fu_4639_p1;

assign grp_fu_17349_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17358_p0 = sext_ln159_147_fu_4741_p1;

assign grp_fu_17358_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17367_p0 = sext_ln159_152_fu_4803_p1;

assign grp_fu_17367_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17376_p0 = sext_ln159_154_fu_4835_p1;

assign grp_fu_17376_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17385_p0 = sext_ln159_163_fu_4937_p1;

assign grp_fu_17385_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17394_p0 = sext_ln159_168_fu_4999_p1;

assign grp_fu_17394_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17403_p0 = sext_ln159_170_fu_5031_p1;

assign grp_fu_17403_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17412_p0 = sext_ln159_179_fu_5133_p1;

assign grp_fu_17412_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17421_p0 = sext_ln159_184_fu_5195_p1;

assign grp_fu_17421_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17430_p0 = sext_ln159_186_fu_5227_p1;

assign grp_fu_17430_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17439_p0 = sext_ln159_195_fu_5329_p1;

assign grp_fu_17439_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17448_p0 = sext_ln159_200_fu_5391_p1;

assign grp_fu_17448_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17457_p0 = sext_ln159_202_fu_5423_p1;

assign grp_fu_17457_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17466_p0 = sext_ln159_211_fu_5525_p1;

assign grp_fu_17466_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17475_p0 = sext_ln159_216_fu_5587_p1;

assign grp_fu_17475_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17484_p0 = sext_ln159_218_fu_5619_p1;

assign grp_fu_17484_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17493_p0 = sext_ln159_227_fu_5721_p1;

assign grp_fu_17493_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17502_p0 = sext_ln159_232_fu_5783_p1;

assign grp_fu_17502_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17511_p0 = sext_ln159_234_fu_5815_p1;

assign grp_fu_17511_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17520_p0 = sext_ln159_243_fu_5917_p1;

assign grp_fu_17520_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17529_p0 = sext_ln159_248_fu_5979_p1;

assign grp_fu_17529_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17538_p0 = sext_ln159_250_fu_6011_p1;

assign grp_fu_17538_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17547_p0 = sext_ln159_259_fu_6113_p1;

assign grp_fu_17547_p1 = sext_ln159_275_fu_6269_p1;

assign grp_fu_17556_p0 = sext_ln159_264_fu_6175_p1;

assign grp_fu_17556_p1 = sext_ln159_280_fu_6281_p1;

assign grp_fu_17565_p0 = sext_ln159_266_fu_6207_p1;

assign grp_fu_17565_p1 = sext_ln159_282_fu_6293_p1;

assign grp_fu_17574_p0 = sext_ln159_1_fu_6718_p1;

assign grp_fu_17574_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17583_p0 = sext_ln159_3_fu_6732_p1;

assign grp_fu_17583_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17592_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17600_p0 = sext_ln159_32_fu_6817_p1;

assign grp_fu_17600_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17609_p0 = sext_ln159_33_fu_6828_p1;

assign grp_fu_17609_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17618_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17626_p0 = sext_ln159_48_fu_6901_p1;

assign grp_fu_17626_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17635_p0 = sext_ln159_49_fu_6912_p1;

assign grp_fu_17635_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17644_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17652_p0 = sext_ln159_64_fu_6985_p1;

assign grp_fu_17652_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17661_p0 = sext_ln159_65_fu_6996_p1;

assign grp_fu_17661_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17670_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17678_p0 = sext_ln159_80_fu_7069_p1;

assign grp_fu_17678_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17687_p0 = sext_ln159_81_fu_7080_p1;

assign grp_fu_17687_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17696_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17704_p0 = sext_ln159_96_fu_7153_p1;

assign grp_fu_17704_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17713_p0 = sext_ln159_97_fu_7164_p1;

assign grp_fu_17713_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17722_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17730_p0 = sext_ln159_112_fu_7237_p1;

assign grp_fu_17730_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17739_p0 = sext_ln159_113_fu_7248_p1;

assign grp_fu_17739_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17748_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17756_p0 = sext_ln159_128_fu_7321_p1;

assign grp_fu_17756_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17765_p0 = sext_ln159_129_fu_7332_p1;

assign grp_fu_17765_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17774_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17782_p0 = sext_ln159_144_fu_7405_p1;

assign grp_fu_17782_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17791_p0 = sext_ln159_145_fu_7416_p1;

assign grp_fu_17791_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17800_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17808_p0 = sext_ln159_160_fu_7489_p1;

assign grp_fu_17808_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17817_p0 = sext_ln159_161_fu_7500_p1;

assign grp_fu_17817_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17826_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17834_p0 = sext_ln159_176_fu_7573_p1;

assign grp_fu_17834_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17843_p0 = sext_ln159_177_fu_7584_p1;

assign grp_fu_17843_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17852_p0 = sext_ln159_188_fu_7646_p1;

assign grp_fu_17852_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17860_p0 = sext_ln159_192_fu_7657_p1;

assign grp_fu_17860_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17869_p0 = sext_ln159_193_fu_7668_p1;

assign grp_fu_17869_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17878_p0 = sext_ln159_204_fu_7730_p1;

assign grp_fu_17878_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17886_p0 = sext_ln159_208_fu_7741_p1;

assign grp_fu_17886_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17895_p0 = sext_ln159_209_fu_7752_p1;

assign grp_fu_17895_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17904_p0 = sext_ln159_220_fu_7814_p1;

assign grp_fu_17904_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17912_p0 = sext_ln159_224_fu_7825_p1;

assign grp_fu_17912_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17921_p0 = sext_ln159_225_fu_7836_p1;

assign grp_fu_17921_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17930_p0 = sext_ln159_236_fu_7898_p1;

assign grp_fu_17930_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17938_p0 = sext_ln159_240_fu_7909_p1;

assign grp_fu_17938_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17947_p0 = sext_ln159_241_fu_7920_p1;

assign grp_fu_17947_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17956_p0 = sext_ln159_252_fu_7982_p1;

assign grp_fu_17956_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17964_p0 = sext_ln159_256_fu_7993_p1;

assign grp_fu_17964_p1 = sext_ln159_fu_6715_p1;

assign grp_fu_17973_p0 = sext_ln159_257_fu_8004_p1;

assign grp_fu_17973_p1 = sext_ln159_2_fu_6729_p1;

assign grp_fu_17982_p0 = sext_ln159_268_fu_8066_p1;

assign grp_fu_17982_p1 = sext_ln159_24_fu_6803_p1;

assign grp_fu_17990_p0 = sext_ln159_1_fu_6718_p1;

assign grp_fu_17990_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_17999_p0 = sext_ln159_3_fu_6732_p1;

assign grp_fu_17999_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18008_p0 = sext_ln159_32_fu_6817_p1;

assign grp_fu_18008_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18017_p0 = sext_ln159_33_fu_6828_p1;

assign grp_fu_18017_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18026_p0 = sext_ln159_48_fu_6901_p1;

assign grp_fu_18026_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18035_p0 = sext_ln159_49_fu_6912_p1;

assign grp_fu_18035_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18044_p0 = sext_ln159_64_fu_6985_p1;

assign grp_fu_18044_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18053_p0 = sext_ln159_65_fu_6996_p1;

assign grp_fu_18053_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18062_p0 = sext_ln159_80_fu_7069_p1;

assign grp_fu_18062_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18071_p0 = sext_ln159_81_fu_7080_p1;

assign grp_fu_18071_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18080_p0 = sext_ln159_96_fu_7153_p1;

assign grp_fu_18080_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18089_p0 = sext_ln159_97_fu_7164_p1;

assign grp_fu_18089_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18098_p0 = sext_ln159_112_fu_7237_p1;

assign grp_fu_18098_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18107_p0 = sext_ln159_113_fu_7248_p1;

assign grp_fu_18107_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18116_p0 = sext_ln159_128_fu_7321_p1;

assign grp_fu_18116_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18125_p0 = sext_ln159_129_fu_7332_p1;

assign grp_fu_18125_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18134_p0 = sext_ln159_144_fu_7405_p1;

assign grp_fu_18134_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18143_p0 = sext_ln159_145_fu_7416_p1;

assign grp_fu_18143_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18152_p0 = sext_ln159_160_fu_7489_p1;

assign grp_fu_18152_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18161_p0 = sext_ln159_161_fu_7500_p1;

assign grp_fu_18161_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18170_p0 = sext_ln159_176_fu_7573_p1;

assign grp_fu_18170_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18179_p0 = sext_ln159_177_fu_7584_p1;

assign grp_fu_18179_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18188_p0 = sext_ln159_188_fu_7646_p1;

assign grp_fu_18188_p1 = sext_ln159_284_fu_8150_p1;

assign grp_fu_18196_p0 = sext_ln159_192_fu_7657_p1;

assign grp_fu_18196_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18205_p0 = sext_ln159_193_fu_7668_p1;

assign grp_fu_18205_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18214_p0 = sext_ln159_204_fu_7730_p1;

assign grp_fu_18214_p1 = sext_ln159_284_fu_8150_p1;

assign grp_fu_18222_p0 = sext_ln159_208_fu_7741_p1;

assign grp_fu_18222_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18231_p0 = sext_ln159_209_fu_7752_p1;

assign grp_fu_18231_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18240_p0 = sext_ln159_220_fu_7814_p1;

assign grp_fu_18240_p1 = sext_ln159_284_fu_8150_p1;

assign grp_fu_18248_p0 = sext_ln159_224_fu_7825_p1;

assign grp_fu_18248_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18257_p0 = sext_ln159_225_fu_7836_p1;

assign grp_fu_18257_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18266_p0 = sext_ln159_236_fu_7898_p1;

assign grp_fu_18266_p1 = sext_ln159_284_fu_8150_p1;

assign grp_fu_18274_p0 = sext_ln159_240_fu_7909_p1;

assign grp_fu_18274_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18283_p0 = sext_ln159_241_fu_7920_p1;

assign grp_fu_18283_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18292_p0 = sext_ln159_252_fu_7982_p1;

assign grp_fu_18292_p1 = sext_ln159_284_fu_8150_p1;

assign grp_fu_18300_p0 = sext_ln159_256_fu_7993_p1;

assign grp_fu_18300_p1 = sext_ln159_272_fu_8077_p1;

assign grp_fu_18309_p0 = sext_ln159_257_fu_8004_p1;

assign grp_fu_18309_p1 = sext_ln159_273_fu_8088_p1;

assign grp_fu_18318_p0 = sext_ln159_268_fu_8066_p1;

assign grp_fu_18318_p1 = sext_ln159_284_fu_8150_p1;

assign grp_fu_18326_p0 = sext_ln159_11_fu_9106_p1;

assign grp_fu_18326_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18326_p2 = sext_ln159_31_fu_9196_p1;

assign grp_fu_18326_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18326_p4 = sext_ln159_13_fu_9120_p1;

assign grp_fu_18326_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18343_p0 = sext_ln159_27_fu_9162_p1;

assign grp_fu_18343_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18343_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_594_fu_13560_p3 : ap_sig_allocacmp_p_load432);

assign grp_fu_18352_p0 = sext_ln159_37_fu_9228_p1;

assign grp_fu_18352_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18352_p2 = sext_ln159_47_fu_9303_p1;

assign grp_fu_18352_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18352_p4 = sext_ln159_38_fu_9239_p1;

assign grp_fu_18352_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18369_p0 = sext_ln159_45_fu_9275_p1;

assign grp_fu_18369_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18369_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_595_fu_13567_p3 : ap_sig_allocacmp_p_load431);

assign grp_fu_18378_p0 = sext_ln159_53_fu_9335_p1;

assign grp_fu_18378_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18378_p2 = sext_ln159_63_fu_9410_p1;

assign grp_fu_18378_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18378_p4 = sext_ln159_54_fu_9346_p1;

assign grp_fu_18378_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18395_p0 = sext_ln159_61_fu_9382_p1;

assign grp_fu_18395_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18395_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_593_fu_13553_p3 : ap_sig_allocacmp_p_load430);

assign grp_fu_18404_p0 = sext_ln159_69_fu_9442_p1;

assign grp_fu_18404_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18404_p2 = sext_ln159_79_fu_9517_p1;

assign grp_fu_18404_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18404_p4 = sext_ln159_70_fu_9453_p1;

assign grp_fu_18404_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18421_p0 = sext_ln159_77_fu_9489_p1;

assign grp_fu_18421_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18421_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_596_fu_13574_p3 : ap_sig_allocacmp_p_load429);

assign grp_fu_18430_p0 = sext_ln159_85_fu_9549_p1;

assign grp_fu_18430_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18430_p2 = sext_ln159_95_fu_9624_p1;

assign grp_fu_18430_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18430_p4 = sext_ln159_86_fu_9560_p1;

assign grp_fu_18430_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18447_p0 = sext_ln159_93_fu_9596_p1;

assign grp_fu_18447_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18447_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_592_fu_13546_p3 : ap_sig_allocacmp_p_load428);

assign grp_fu_18456_p0 = sext_ln159_101_fu_9656_p1;

assign grp_fu_18456_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18456_p2 = sext_ln159_111_fu_9731_p1;

assign grp_fu_18456_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18456_p4 = sext_ln159_102_fu_9667_p1;

assign grp_fu_18456_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18473_p0 = sext_ln159_109_fu_9703_p1;

assign grp_fu_18473_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18473_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_597_fu_13581_p3 : ap_sig_allocacmp_p_load427);

assign grp_fu_18482_p0 = sext_ln159_117_fu_9763_p1;

assign grp_fu_18482_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18482_p2 = sext_ln159_127_fu_9838_p1;

assign grp_fu_18482_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18482_p4 = sext_ln159_118_fu_9774_p1;

assign grp_fu_18482_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18499_p0 = sext_ln159_125_fu_9810_p1;

assign grp_fu_18499_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18499_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_591_fu_13539_p3 : ap_sig_allocacmp_p_load426);

assign grp_fu_18508_p0 = sext_ln159_133_fu_9870_p1;

assign grp_fu_18508_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18508_p2 = sext_ln159_143_fu_9945_p1;

assign grp_fu_18508_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18508_p4 = sext_ln159_134_fu_9881_p1;

assign grp_fu_18508_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18525_p0 = sext_ln159_141_fu_9917_p1;

assign grp_fu_18525_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18525_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_598_fu_13588_p3 : ap_sig_allocacmp_p_load425);

assign grp_fu_18534_p0 = sext_ln159_149_fu_9977_p1;

assign grp_fu_18534_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18534_p2 = sext_ln159_159_fu_10052_p1;

assign grp_fu_18534_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18534_p4 = sext_ln159_150_fu_9988_p1;

assign grp_fu_18534_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18551_p0 = sext_ln159_157_fu_10024_p1;

assign grp_fu_18551_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18551_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_590_fu_13532_p3 : ap_sig_allocacmp_p_load424);

assign grp_fu_18560_p0 = sext_ln159_165_fu_10084_p1;

assign grp_fu_18560_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18560_p2 = sext_ln159_175_fu_10159_p1;

assign grp_fu_18560_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18560_p4 = sext_ln159_166_fu_10095_p1;

assign grp_fu_18560_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18577_p0 = sext_ln159_173_fu_10131_p1;

assign grp_fu_18577_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18577_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_599_fu_13595_p3 : ap_sig_allocacmp_p_load423);

assign grp_fu_18586_p0 = sext_ln159_181_fu_10191_p1;

assign grp_fu_18586_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18586_p2 = sext_ln159_191_fu_10266_p1;

assign grp_fu_18586_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18586_p4 = sext_ln159_182_fu_10202_p1;

assign grp_fu_18586_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18603_p0 = sext_ln159_189_fu_10238_p1;

assign grp_fu_18603_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18603_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_589_fu_13525_p3 : ap_sig_allocacmp_p_load422);

assign grp_fu_18612_p0 = sext_ln159_197_fu_10298_p1;

assign grp_fu_18612_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18612_p2 = sext_ln159_207_fu_10373_p1;

assign grp_fu_18612_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18612_p4 = sext_ln159_198_fu_10309_p1;

assign grp_fu_18612_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18629_p0 = sext_ln159_205_fu_10345_p1;

assign grp_fu_18629_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18629_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_600_fu_13602_p3 : ap_sig_allocacmp_p_load421);

assign grp_fu_18638_p0 = sext_ln159_213_fu_10405_p1;

assign grp_fu_18638_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18638_p2 = sext_ln159_223_fu_10480_p1;

assign grp_fu_18638_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18638_p4 = sext_ln159_214_fu_10416_p1;

assign grp_fu_18638_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18655_p0 = sext_ln159_221_fu_10452_p1;

assign grp_fu_18655_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18655_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_588_fu_13518_p3 : ap_sig_allocacmp_p_load420);

assign grp_fu_18664_p0 = sext_ln159_229_fu_10512_p1;

assign grp_fu_18664_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18664_p2 = sext_ln159_239_fu_10587_p1;

assign grp_fu_18664_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18664_p4 = sext_ln159_230_fu_10523_p1;

assign grp_fu_18664_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18681_p0 = sext_ln159_237_fu_10559_p1;

assign grp_fu_18681_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18681_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_601_fu_13609_p3 : ap_sig_allocacmp_p_load419);

assign grp_fu_18690_p0 = sext_ln159_245_fu_10619_p1;

assign grp_fu_18690_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18690_p2 = sext_ln159_255_fu_10694_p1;

assign grp_fu_18690_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18690_p4 = sext_ln159_246_fu_10630_p1;

assign grp_fu_18690_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18707_p0 = sext_ln159_253_fu_10666_p1;

assign grp_fu_18707_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18707_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_587_fu_13511_p3 : ap_sig_allocacmp_p_load418);

assign grp_fu_18716_p0 = sext_ln159_261_fu_10726_p1;

assign grp_fu_18716_p1 = sext_ln159_10_fu_9103_p1;

assign grp_fu_18716_p2 = sext_ln159_271_fu_10801_p1;

assign grp_fu_18716_p3 = sext_ln159_30_fu_9193_p1;

assign grp_fu_18716_p4 = sext_ln159_262_fu_10737_p1;

assign grp_fu_18716_p5 = sext_ln159_12_fu_9117_p1;

assign grp_fu_18733_p0 = sext_ln159_269_fu_10773_p1;

assign grp_fu_18733_p1 = sext_ln159_26_fu_9159_p1;

assign grp_fu_18733_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? empty_602_fu_13616_p3 : ap_sig_allocacmp_p_load417);

assign grp_fu_18742_p0 = sext_ln159_11_fu_9106_p1;

assign grp_fu_18742_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18742_p2 = sext_ln159_31_fu_9196_p1;

assign grp_fu_18742_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18742_p4 = sext_ln159_13_fu_9120_p1;

assign grp_fu_18742_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18759_p0 = sext_ln159_29_fu_9176_p1;

assign grp_fu_18759_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18759_p2 = sext_ln159_25_reg_21385;

assign grp_fu_18759_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18759_p4 = sext_ln159_27_fu_9162_p1;

assign grp_fu_18759_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18774_p0 = sext_ln159_37_fu_9228_p1;

assign grp_fu_18774_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18774_p2 = sext_ln159_47_fu_9303_p1;

assign grp_fu_18774_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18774_p4 = sext_ln159_38_fu_9239_p1;

assign grp_fu_18774_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18791_p0 = sext_ln159_46_fu_9286_p1;

assign grp_fu_18791_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18791_p2 = sext_ln159_44_reg_21422;

assign grp_fu_18791_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18791_p4 = sext_ln159_45_fu_9275_p1;

assign grp_fu_18791_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18806_p0 = sext_ln159_53_fu_9335_p1;

assign grp_fu_18806_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18806_p2 = sext_ln159_63_fu_9410_p1;

assign grp_fu_18806_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18806_p4 = sext_ln159_54_fu_9346_p1;

assign grp_fu_18806_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18823_p0 = sext_ln159_62_fu_9393_p1;

assign grp_fu_18823_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18823_p2 = sext_ln159_60_reg_21459;

assign grp_fu_18823_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18823_p4 = sext_ln159_61_fu_9382_p1;

assign grp_fu_18823_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18838_p0 = sext_ln159_69_fu_9442_p1;

assign grp_fu_18838_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18838_p2 = sext_ln159_79_fu_9517_p1;

assign grp_fu_18838_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18838_p4 = sext_ln159_70_fu_9453_p1;

assign grp_fu_18838_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18855_p0 = sext_ln159_78_fu_9500_p1;

assign grp_fu_18855_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18855_p2 = sext_ln159_76_reg_21496;

assign grp_fu_18855_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18855_p4 = sext_ln159_77_fu_9489_p1;

assign grp_fu_18855_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18870_p0 = sext_ln159_85_fu_9549_p1;

assign grp_fu_18870_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18870_p2 = sext_ln159_95_fu_9624_p1;

assign grp_fu_18870_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18870_p4 = sext_ln159_86_fu_9560_p1;

assign grp_fu_18870_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18887_p0 = sext_ln159_94_fu_9607_p1;

assign grp_fu_18887_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18887_p2 = sext_ln159_92_reg_21533;

assign grp_fu_18887_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18887_p4 = sext_ln159_93_fu_9596_p1;

assign grp_fu_18887_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18902_p0 = sext_ln159_101_fu_9656_p1;

assign grp_fu_18902_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18902_p2 = sext_ln159_111_fu_9731_p1;

assign grp_fu_18902_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18902_p4 = sext_ln159_102_fu_9667_p1;

assign grp_fu_18902_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18919_p0 = sext_ln159_110_fu_9714_p1;

assign grp_fu_18919_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18919_p2 = sext_ln159_108_reg_21570;

assign grp_fu_18919_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18919_p4 = sext_ln159_109_fu_9703_p1;

assign grp_fu_18919_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18934_p0 = sext_ln159_117_fu_9763_p1;

assign grp_fu_18934_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18934_p2 = sext_ln159_127_fu_9838_p1;

assign grp_fu_18934_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18934_p4 = sext_ln159_118_fu_9774_p1;

assign grp_fu_18934_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18951_p0 = sext_ln159_126_fu_9821_p1;

assign grp_fu_18951_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18951_p2 = sext_ln159_124_reg_21607;

assign grp_fu_18951_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18951_p4 = sext_ln159_125_fu_9810_p1;

assign grp_fu_18951_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18966_p0 = sext_ln159_133_fu_9870_p1;

assign grp_fu_18966_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18966_p2 = sext_ln159_143_fu_9945_p1;

assign grp_fu_18966_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18966_p4 = sext_ln159_134_fu_9881_p1;

assign grp_fu_18966_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_18983_p0 = sext_ln159_142_fu_9928_p1;

assign grp_fu_18983_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_18983_p2 = sext_ln159_140_reg_21644;

assign grp_fu_18983_p3 = sext_ln159_284_reg_22041;

assign grp_fu_18983_p4 = sext_ln159_141_fu_9917_p1;

assign grp_fu_18983_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_18998_p0 = sext_ln159_149_fu_9977_p1;

assign grp_fu_18998_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_18998_p2 = sext_ln159_159_fu_10052_p1;

assign grp_fu_18998_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_18998_p4 = sext_ln159_150_fu_9988_p1;

assign grp_fu_18998_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19015_p0 = sext_ln159_158_fu_10035_p1;

assign grp_fu_19015_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_19015_p2 = sext_ln159_156_reg_21681;

assign grp_fu_19015_p3 = sext_ln159_284_reg_22041;

assign grp_fu_19015_p4 = sext_ln159_157_fu_10024_p1;

assign grp_fu_19015_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19030_p0 = sext_ln159_165_fu_10084_p1;

assign grp_fu_19030_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_19030_p2 = sext_ln159_175_fu_10159_p1;

assign grp_fu_19030_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_19030_p4 = sext_ln159_166_fu_10095_p1;

assign grp_fu_19030_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19047_p0 = sext_ln159_174_fu_10142_p1;

assign grp_fu_19047_p1 = sext_ln159_286_fu_10897_p1;

assign grp_fu_19047_p2 = sext_ln159_172_reg_21718;

assign grp_fu_19047_p3 = sext_ln159_284_reg_22041;

assign grp_fu_19047_p4 = sext_ln159_173_fu_10131_p1;

assign grp_fu_19047_p5 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19062_p0 = sext_ln159_181_fu_10191_p1;

assign grp_fu_19062_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_19062_p2 = sext_ln159_191_fu_10266_p1;

assign grp_fu_19062_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_19062_p4 = sext_ln159_182_fu_10202_p1;

assign grp_fu_19062_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19079_p0 = sext_ln159_189_fu_10238_p1;

assign grp_fu_19079_p1 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19079_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? tmp_25_reg_23130 : ap_sig_allocacmp_p_load406);

assign grp_fu_19088_p0 = sext_ln159_197_fu_10298_p1;

assign grp_fu_19088_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_19088_p2 = sext_ln159_207_fu_10373_p1;

assign grp_fu_19088_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_19088_p4 = sext_ln159_198_fu_10309_p1;

assign grp_fu_19088_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19105_p0 = sext_ln159_205_fu_10345_p1;

assign grp_fu_19105_p1 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19105_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? tmp_26_reg_23135 : ap_sig_allocacmp_p_load405);

assign grp_fu_19114_p0 = sext_ln159_213_fu_10405_p1;

assign grp_fu_19114_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_19114_p2 = sext_ln159_223_fu_10480_p1;

assign grp_fu_19114_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_19114_p4 = sext_ln159_214_fu_10416_p1;

assign grp_fu_19114_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19131_p0 = sext_ln159_221_fu_10452_p1;

assign grp_fu_19131_p1 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19131_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? tmp_27_reg_23140 : ap_sig_allocacmp_p_load404);

assign grp_fu_19140_p0 = sext_ln159_229_fu_10512_p1;

assign grp_fu_19140_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_19140_p2 = sext_ln159_239_fu_10587_p1;

assign grp_fu_19140_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_19140_p4 = sext_ln159_230_fu_10523_p1;

assign grp_fu_19140_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19157_p0 = sext_ln159_237_fu_10559_p1;

assign grp_fu_19157_p1 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19157_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? tmp_28_reg_23145 : ap_sig_allocacmp_p_load403);

assign grp_fu_19166_p0 = sext_ln159_245_fu_10619_p1;

assign grp_fu_19166_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_19166_p2 = sext_ln159_255_fu_10694_p1;

assign grp_fu_19166_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_19166_p4 = sext_ln159_246_fu_10630_p1;

assign grp_fu_19166_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19183_p0 = sext_ln159_253_fu_10666_p1;

assign grp_fu_19183_p1 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19183_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? tmp_29_reg_23150 : ap_sig_allocacmp_p_load402);

assign grp_fu_19192_p0 = sext_ln159_261_fu_10726_p1;

assign grp_fu_19192_p1 = sext_ln159_277_fu_10833_p1;

assign grp_fu_19192_p2 = sext_ln159_271_fu_10801_p1;

assign grp_fu_19192_p3 = sext_ln159_287_fu_10908_p1;

assign grp_fu_19192_p4 = sext_ln159_262_fu_10737_p1;

assign grp_fu_19192_p5 = sext_ln159_278_fu_10844_p1;

assign grp_fu_19209_p0 = sext_ln159_269_fu_10773_p1;

assign grp_fu_19209_p1 = sext_ln159_285_fu_10886_p1;

assign grp_fu_19209_p2 = ((icmp_ln132_reg_19569_pp0_iter7_reg[0:0] == 1'b1) ? sext_ln142_fu_13623_p1 : ap_sig_allocacmp_p_load);

assign grp_fu_6757_p0 = sext_ln159_9_fu_6746_p1;

assign grp_fu_6757_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_6777_p0 = sext_ln159_15_fu_6766_p1;

assign grp_fu_6777_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_6797_p0 = sext_ln159_23_fu_6786_p1;

assign grp_fu_6797_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_6850_p0 = sext_ln159_36_fu_6839_p1;

assign grp_fu_6850_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_6867_p0 = sext_ln159_39_fu_6856_p1;

assign grp_fu_6867_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_6884_p0 = sext_ln159_43_fu_6873_p1;

assign grp_fu_6884_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_6934_p0 = sext_ln159_52_fu_6923_p1;

assign grp_fu_6934_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_6951_p0 = sext_ln159_55_fu_6940_p1;

assign grp_fu_6951_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_6968_p0 = sext_ln159_59_fu_6957_p1;

assign grp_fu_6968_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7018_p0 = sext_ln159_68_fu_7007_p1;

assign grp_fu_7018_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7035_p0 = sext_ln159_71_fu_7024_p1;

assign grp_fu_7035_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7052_p0 = sext_ln159_75_fu_7041_p1;

assign grp_fu_7052_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7102_p0 = sext_ln159_84_fu_7091_p1;

assign grp_fu_7102_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7119_p0 = sext_ln159_87_fu_7108_p1;

assign grp_fu_7119_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7136_p0 = sext_ln159_91_fu_7125_p1;

assign grp_fu_7136_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7186_p0 = sext_ln159_100_fu_7175_p1;

assign grp_fu_7186_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7203_p0 = sext_ln159_103_fu_7192_p1;

assign grp_fu_7203_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7220_p0 = sext_ln159_107_fu_7209_p1;

assign grp_fu_7220_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7270_p0 = sext_ln159_116_fu_7259_p1;

assign grp_fu_7270_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7287_p0 = sext_ln159_119_fu_7276_p1;

assign grp_fu_7287_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7304_p0 = sext_ln159_123_fu_7293_p1;

assign grp_fu_7304_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7354_p0 = sext_ln159_132_fu_7343_p1;

assign grp_fu_7354_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7371_p0 = sext_ln159_135_fu_7360_p1;

assign grp_fu_7371_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7388_p0 = sext_ln159_139_fu_7377_p1;

assign grp_fu_7388_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7438_p0 = sext_ln159_148_fu_7427_p1;

assign grp_fu_7438_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7455_p0 = sext_ln159_151_fu_7444_p1;

assign grp_fu_7455_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7472_p0 = sext_ln159_155_fu_7461_p1;

assign grp_fu_7472_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7522_p0 = sext_ln159_164_fu_7511_p1;

assign grp_fu_7522_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7539_p0 = sext_ln159_167_fu_7528_p1;

assign grp_fu_7539_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7556_p0 = sext_ln159_171_fu_7545_p1;

assign grp_fu_7556_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7606_p0 = sext_ln159_180_fu_7595_p1;

assign grp_fu_7606_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7623_p0 = sext_ln159_183_fu_7612_p1;

assign grp_fu_7623_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7640_p0 = sext_ln159_187_fu_7629_p1;

assign grp_fu_7640_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7690_p0 = sext_ln159_196_fu_7679_p1;

assign grp_fu_7690_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7707_p0 = sext_ln159_199_fu_7696_p1;

assign grp_fu_7707_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7724_p0 = sext_ln159_203_fu_7713_p1;

assign grp_fu_7724_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7774_p0 = sext_ln159_212_fu_7763_p1;

assign grp_fu_7774_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7791_p0 = sext_ln159_215_fu_7780_p1;

assign grp_fu_7791_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7808_p0 = sext_ln159_219_fu_7797_p1;

assign grp_fu_7808_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7858_p0 = sext_ln159_228_fu_7847_p1;

assign grp_fu_7858_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7875_p0 = sext_ln159_231_fu_7864_p1;

assign grp_fu_7875_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7892_p0 = sext_ln159_235_fu_7881_p1;

assign grp_fu_7892_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_7942_p0 = sext_ln159_244_fu_7931_p1;

assign grp_fu_7942_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_7959_p0 = sext_ln159_247_fu_7948_p1;

assign grp_fu_7959_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_7976_p0 = sext_ln159_251_fu_7965_p1;

assign grp_fu_7976_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_8026_p0 = sext_ln159_260_fu_8015_p1;

assign grp_fu_8026_p1 = sext_ln159_8_fu_6743_p1;

assign grp_fu_8043_p0 = sext_ln159_263_fu_8032_p1;

assign grp_fu_8043_p1 = sext_ln159_14_fu_6763_p1;

assign grp_fu_8060_p0 = sext_ln159_267_fu_8049_p1;

assign grp_fu_8060_p1 = sext_ln159_22_fu_6783_p1;

assign grp_fu_8110_p0 = sext_ln159_9_fu_6746_p1;

assign grp_fu_8110_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8127_p0 = sext_ln159_15_fu_6766_p1;

assign grp_fu_8127_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8144_p0 = sext_ln159_23_fu_6786_p1;

assign grp_fu_8144_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8177_p0 = sext_ln159_36_fu_6839_p1;

assign grp_fu_8177_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8191_p0 = sext_ln159_39_fu_6856_p1;

assign grp_fu_8191_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8205_p0 = sext_ln159_43_fu_6873_p1;

assign grp_fu_8205_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8235_p0 = sext_ln159_52_fu_6923_p1;

assign grp_fu_8235_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8249_p0 = sext_ln159_55_fu_6940_p1;

assign grp_fu_8249_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8263_p0 = sext_ln159_59_fu_6957_p1;

assign grp_fu_8263_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8293_p0 = sext_ln159_68_fu_7007_p1;

assign grp_fu_8293_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8307_p0 = sext_ln159_71_fu_7024_p1;

assign grp_fu_8307_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8321_p0 = sext_ln159_75_fu_7041_p1;

assign grp_fu_8321_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8351_p0 = sext_ln159_84_fu_7091_p1;

assign grp_fu_8351_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8365_p0 = sext_ln159_87_fu_7108_p1;

assign grp_fu_8365_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8379_p0 = sext_ln159_91_fu_7125_p1;

assign grp_fu_8379_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8409_p0 = sext_ln159_100_fu_7175_p1;

assign grp_fu_8409_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8423_p0 = sext_ln159_103_fu_7192_p1;

assign grp_fu_8423_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8437_p0 = sext_ln159_107_fu_7209_p1;

assign grp_fu_8437_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8467_p0 = sext_ln159_116_fu_7259_p1;

assign grp_fu_8467_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8481_p0 = sext_ln159_119_fu_7276_p1;

assign grp_fu_8481_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8495_p0 = sext_ln159_123_fu_7293_p1;

assign grp_fu_8495_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8525_p0 = sext_ln159_132_fu_7343_p1;

assign grp_fu_8525_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8539_p0 = sext_ln159_135_fu_7360_p1;

assign grp_fu_8539_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8553_p0 = sext_ln159_139_fu_7377_p1;

assign grp_fu_8553_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8583_p0 = sext_ln159_148_fu_7427_p1;

assign grp_fu_8583_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8597_p0 = sext_ln159_151_fu_7444_p1;

assign grp_fu_8597_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8611_p0 = sext_ln159_155_fu_7461_p1;

assign grp_fu_8611_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8641_p0 = sext_ln159_164_fu_7511_p1;

assign grp_fu_8641_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8655_p0 = sext_ln159_167_fu_7528_p1;

assign grp_fu_8655_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8669_p0 = sext_ln159_171_fu_7545_p1;

assign grp_fu_8669_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8699_p0 = sext_ln159_180_fu_7595_p1;

assign grp_fu_8699_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8713_p0 = sext_ln159_183_fu_7612_p1;

assign grp_fu_8713_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8727_p0 = sext_ln159_187_fu_7629_p1;

assign grp_fu_8727_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8765_p0 = sext_ln159_196_fu_7679_p1;

assign grp_fu_8765_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8779_p0 = sext_ln159_199_fu_7696_p1;

assign grp_fu_8779_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8793_p0 = sext_ln159_203_fu_7713_p1;

assign grp_fu_8793_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8831_p0 = sext_ln159_212_fu_7763_p1;

assign grp_fu_8831_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8845_p0 = sext_ln159_215_fu_7780_p1;

assign grp_fu_8845_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8859_p0 = sext_ln159_219_fu_7797_p1;

assign grp_fu_8859_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8897_p0 = sext_ln159_228_fu_7847_p1;

assign grp_fu_8897_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8911_p0 = sext_ln159_231_fu_7864_p1;

assign grp_fu_8911_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8925_p0 = sext_ln159_235_fu_7881_p1;

assign grp_fu_8925_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_8963_p0 = sext_ln159_244_fu_7931_p1;

assign grp_fu_8963_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_8977_p0 = sext_ln159_247_fu_7948_p1;

assign grp_fu_8977_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_8991_p0 = sext_ln159_251_fu_7965_p1;

assign grp_fu_8991_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_9029_p0 = sext_ln159_260_fu_8015_p1;

assign grp_fu_9029_p1 = sext_ln159_276_fu_8099_p1;

assign grp_fu_9043_p0 = sext_ln159_263_fu_8032_p1;

assign grp_fu_9043_p1 = sext_ln159_279_fu_8116_p1;

assign grp_fu_9057_p0 = sext_ln159_267_fu_8049_p1;

assign grp_fu_9057_p1 = sext_ln159_283_fu_8133_p1;

assign grp_fu_9093_p0 = sext_ln159_5_fu_9082_p1;

assign grp_fu_9093_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9149_p0 = sext_ln159_19_fu_9138_p1;

assign grp_fu_9149_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9187_p0 = sext_ln159_29_fu_9176_p1;

assign grp_fu_9187_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9218_p0 = sext_ln159_34_fu_9207_p1;

assign grp_fu_9218_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9265_p0 = sext_ln159_41_fu_9254_p1;

assign grp_fu_9265_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9297_p0 = sext_ln159_46_fu_9286_p1;

assign grp_fu_9297_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9325_p0 = sext_ln159_50_fu_9314_p1;

assign grp_fu_9325_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9372_p0 = sext_ln159_57_fu_9361_p1;

assign grp_fu_9372_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9404_p0 = sext_ln159_62_fu_9393_p1;

assign grp_fu_9404_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9432_p0 = sext_ln159_66_fu_9421_p1;

assign grp_fu_9432_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9479_p0 = sext_ln159_73_fu_9468_p1;

assign grp_fu_9479_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9511_p0 = sext_ln159_78_fu_9500_p1;

assign grp_fu_9511_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9539_p0 = sext_ln159_82_fu_9528_p1;

assign grp_fu_9539_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9586_p0 = sext_ln159_89_fu_9575_p1;

assign grp_fu_9586_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9618_p0 = sext_ln159_94_fu_9607_p1;

assign grp_fu_9618_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9646_p0 = sext_ln159_98_fu_9635_p1;

assign grp_fu_9646_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9693_p0 = sext_ln159_105_fu_9682_p1;

assign grp_fu_9693_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9725_p0 = sext_ln159_110_fu_9714_p1;

assign grp_fu_9725_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9753_p0 = sext_ln159_114_fu_9742_p1;

assign grp_fu_9753_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9800_p0 = sext_ln159_121_fu_9789_p1;

assign grp_fu_9800_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9832_p0 = sext_ln159_126_fu_9821_p1;

assign grp_fu_9832_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9860_p0 = sext_ln159_130_fu_9849_p1;

assign grp_fu_9860_p1 = sext_ln159_4_fu_9079_p1;

assign grp_fu_9907_p0 = sext_ln159_137_fu_9896_p1;

assign grp_fu_9907_p1 = sext_ln159_18_fu_9135_p1;

assign grp_fu_9939_p0 = sext_ln159_142_fu_9928_p1;

assign grp_fu_9939_p1 = sext_ln159_28_fu_9173_p1;

assign grp_fu_9967_p0 = sext_ln159_146_fu_9956_p1;

assign grp_fu_9967_p1 = sext_ln159_4_fu_9079_p1;

assign icmp_ln126_fu_2594_p2 = ((ap_sig_allocacmp_indvar_flatten107_load == 16'd56448) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_2612_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_2632_p2 = ((ap_sig_allocacmp_cit_load == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_2778_p2 = ((select_ln127_reg_19549 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_2787_p2 = ((select_ln127_reg_19549 == 6'd47) ? 1'b1 : 1'b0);

assign mac_sm_blk_n = 1'b1;

assign mac_sm_din = pf_mac_sm_U_data_out;

assign or_ln127_fu_2650_p2 = (icmp_ln127_fu_2612_p2 | and_ln126_fu_2638_p2);

assign p_cast390_fu_9071_p1 = empty_586_reg_21230;

assign pf_mac_sm_U_frpsig_data_in = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln191_15_fu_16487_p4}, {trunc_ln191_14_fu_16477_p4}}, {trunc_ln191_13_fu_16467_p4}}, {trunc_ln191_12_fu_16457_p4}}, {trunc_ln191_11_fu_16447_p4}}, {trunc_ln191_10_fu_16437_p4}}, {trunc_ln191_s_fu_16427_p4}}, {trunc_ln191_9_fu_16417_p4}}, {trunc_ln191_8_fu_16407_p4}}, {trunc_ln191_7_fu_16397_p4}}, {trunc_ln191_6_fu_16387_p4}}, {trunc_ln191_5_fu_16377_p4}}, {trunc_ln191_4_fu_16367_p4}}, {trunc_ln191_3_fu_16357_p4}}, {trunc_ln191_2_fu_16347_p4}}, {trunc_ln191_1_fu_16337_p4}}, {tmp_316_fu_16627_p4}}, {tmp_315_fu_16617_p4}}, {tmp_314_fu_16607_p4}}, {tmp_313_fu_16597_p4}}, {tmp_312_fu_16587_p4}}, {tmp_311_fu_16577_p4}}, {tmp_310_fu_16567_p4}}, {tmp_309_fu_16557_p4}}, {tmp_308_fu_16547_p4}}, {tmp_307_fu_16537_p4}}, {tmp_306_fu_16527_p4}}, {tmp_305_fu_16517_p4}}, {tmp_304_fu_16507_p4}}, {tmp_302_fu_16497_p4}}, {tmp_319_fu_16327_p4}}, {trunc_ln1_fu_16162_p4}};

assign select_ln126_1_fu_2804_p3 = ((icmp_ln127_reg_19544_pp0_iter3_reg[0:0] == 1'b1) ? add_ln126_fu_2798_p2 : ap_sig_allocacmp_tt_load);

assign select_ln126_fu_2618_p3 = ((icmp_ln127_fu_2612_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_cot_load);

assign select_ln127_1_cast_fu_6706_p1 = select_ln127_1_reg_19556_pp0_iter4_reg;

assign select_ln127_1_fu_2664_p3 = ((and_ln126_fu_2638_p2[0:0] == 1'b1) ? add_ln127_fu_2644_p2 : select_ln126_fu_2618_p3);

assign select_ln127_2_fu_2684_p3 = ((icmp_ln127_fu_2612_p2[0:0] == 1'b1) ? 10'd1 : add_ln127_1_fu_2678_p2);

assign select_ln127_fu_2656_p3 = ((or_ln127_fu_2650_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign select_ln132_10_fu_14243_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_20_reg_23105_pp0_iter8_reg : empty_558_fu_2356);

assign select_ln132_11_fu_14249_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_19_reg_23100_pp0_iter8_reg : empty_557_fu_2352);

assign select_ln132_12_fu_14255_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_18_reg_23095_pp0_iter8_reg : empty_556_fu_2348);

assign select_ln132_13_fu_14261_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_17_reg_23090_pp0_iter8_reg : empty_555_fu_2344);

assign select_ln132_14_fu_14267_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_16_reg_23085_pp0_iter8_reg : empty_554_fu_2340);

assign select_ln132_15_fu_14273_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_15_reg_23080_pp0_iter8_reg : empty_553_fu_2336);

assign select_ln132_6_fu_14219_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_24_reg_23125_pp0_iter8_reg : empty_562_fu_2372);

assign select_ln132_7_fu_14225_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_23_reg_23120_pp0_iter8_reg : empty_561_fu_2368);

assign select_ln132_8_fu_14231_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_22_reg_23115_pp0_iter8_reg : empty_560_fu_2364);

assign select_ln132_9_fu_14237_p3 = ((icmp_ln132_reg_19569_pp0_iter8_reg[0:0] == 1'b1) ? tmp_21_reg_23110_pp0_iter8_reg : empty_559_fu_2360);

assign sext_ln142_fu_13623_p1 = $signed(tmp_34_reg_23155);

assign sext_ln159_100_fu_7175_p1 = $signed(tmp_118_reg_20242);

assign sext_ln159_101_fu_9656_p1 = $signed(tmp_119_reg_20247_pp0_iter5_reg);

assign sext_ln159_102_fu_9667_p1 = $signed(tmp_120_reg_20252_pp0_iter5_reg);

assign sext_ln159_103_fu_7192_p1 = $signed(tmp_121_reg_20257);

assign sext_ln159_104_fu_4215_p1 = $signed(tmp_122_fu_4205_p4);

assign sext_ln159_105_fu_9682_p1 = $signed(tmp_123_reg_20268_pp0_iter5_reg);

assign sext_ln159_106_fu_4247_p1 = $signed(tmp_124_fu_4237_p4);

assign sext_ln159_107_fu_7209_p1 = $signed(tmp_125_reg_20279);

assign sext_ln159_108_fu_7226_p1 = tmp_126_reg_20284;

assign sext_ln159_109_fu_9703_p1 = $signed(tmp_127_reg_20289_pp0_iter5_reg);

assign sext_ln159_10_fu_9103_p1 = $signed(trunc_ln149_5_reg_19636_pp0_iter5_reg);

assign sext_ln159_110_fu_9714_p1 = $signed(tmp_128_reg_20294_pp0_iter5_reg);

assign sext_ln159_111_fu_9731_p1 = $signed(tmp_129_reg_20299_pp0_iter5_reg);

assign sext_ln159_112_fu_7237_p1 = $signed(tmp_130_reg_20304);

assign sext_ln159_113_fu_7248_p1 = $signed(tmp_131_reg_20309);

assign sext_ln159_114_fu_9742_p1 = $signed(tmp_132_reg_20314_pp0_iter5_reg);

assign sext_ln159_115_fu_4349_p1 = $signed(tmp_133_fu_4339_p4);

assign sext_ln159_116_fu_7259_p1 = $signed(tmp_134_reg_20325);

assign sext_ln159_117_fu_9763_p1 = $signed(tmp_135_reg_20330_pp0_iter5_reg);

assign sext_ln159_118_fu_9774_p1 = $signed(tmp_136_reg_20335_pp0_iter5_reg);

assign sext_ln159_119_fu_7276_p1 = $signed(tmp_137_reg_20340);

assign sext_ln159_11_fu_9106_p1 = $signed(tmp_39_reg_19792_pp0_iter5_reg);

assign sext_ln159_120_fu_4411_p1 = $signed(tmp_138_fu_4401_p4);

assign sext_ln159_121_fu_9789_p1 = $signed(tmp_139_reg_20351_pp0_iter5_reg);

assign sext_ln159_122_fu_4443_p1 = $signed(tmp_140_fu_4433_p4);

assign sext_ln159_123_fu_7293_p1 = $signed(tmp_141_reg_20362);

assign sext_ln159_124_fu_7310_p1 = tmp_142_reg_20367;

assign sext_ln159_125_fu_9810_p1 = $signed(tmp_143_reg_20372_pp0_iter5_reg);

assign sext_ln159_126_fu_9821_p1 = $signed(tmp_144_reg_20377_pp0_iter5_reg);

assign sext_ln159_127_fu_9838_p1 = $signed(tmp_145_reg_20382_pp0_iter5_reg);

assign sext_ln159_128_fu_7321_p1 = $signed(tmp_146_reg_20387);

assign sext_ln159_129_fu_7332_p1 = $signed(tmp_147_reg_20392);

assign sext_ln159_12_fu_9117_p1 = $signed(trunc_ln149_6_reg_19641_pp0_iter5_reg);

assign sext_ln159_130_fu_9849_p1 = $signed(tmp_148_reg_20397_pp0_iter5_reg);

assign sext_ln159_131_fu_4545_p1 = $signed(tmp_149_fu_4535_p4);

assign sext_ln159_132_fu_7343_p1 = $signed(tmp_150_reg_20408);

assign sext_ln159_133_fu_9870_p1 = $signed(tmp_151_reg_20413_pp0_iter5_reg);

assign sext_ln159_134_fu_9881_p1 = $signed(tmp_152_reg_20418_pp0_iter5_reg);

assign sext_ln159_135_fu_7360_p1 = $signed(tmp_153_reg_20423);

assign sext_ln159_136_fu_4607_p1 = $signed(tmp_154_fu_4597_p4);

assign sext_ln159_137_fu_9896_p1 = $signed(tmp_155_reg_20434_pp0_iter5_reg);

assign sext_ln159_138_fu_4639_p1 = $signed(tmp_156_fu_4629_p4);

assign sext_ln159_139_fu_7377_p1 = $signed(tmp_157_reg_20445);

assign sext_ln159_13_fu_9120_p1 = $signed(tmp_40_reg_19797_pp0_iter5_reg);

assign sext_ln159_140_fu_7394_p1 = tmp_158_reg_20450;

assign sext_ln159_141_fu_9917_p1 = $signed(tmp_159_reg_20455_pp0_iter5_reg);

assign sext_ln159_142_fu_9928_p1 = $signed(tmp_160_reg_20460_pp0_iter5_reg);

assign sext_ln159_143_fu_9945_p1 = $signed(tmp_161_reg_20465_pp0_iter5_reg);

assign sext_ln159_144_fu_7405_p1 = $signed(tmp_162_reg_20470);

assign sext_ln159_145_fu_7416_p1 = $signed(tmp_163_reg_20475);

assign sext_ln159_146_fu_9956_p1 = $signed(tmp_164_reg_20480_pp0_iter5_reg);

assign sext_ln159_147_fu_4741_p1 = $signed(tmp_165_fu_4731_p4);

assign sext_ln159_148_fu_7427_p1 = $signed(tmp_166_reg_20491);

assign sext_ln159_149_fu_9977_p1 = $signed(tmp_167_reg_20496_pp0_iter5_reg);

assign sext_ln159_14_fu_6763_p1 = $signed(trunc_ln149_7_reg_19646);

assign sext_ln159_150_fu_9988_p1 = $signed(tmp_168_reg_20501_pp0_iter5_reg);

assign sext_ln159_151_fu_7444_p1 = $signed(tmp_169_reg_20506);

assign sext_ln159_152_fu_4803_p1 = $signed(tmp_170_fu_4793_p4);

assign sext_ln159_153_fu_10003_p1 = $signed(tmp_171_reg_20517_pp0_iter5_reg);

assign sext_ln159_154_fu_4835_p1 = $signed(tmp_172_fu_4825_p4);

assign sext_ln159_155_fu_7461_p1 = $signed(tmp_173_reg_20528);

assign sext_ln159_156_fu_7478_p1 = tmp_174_reg_20533;

assign sext_ln159_157_fu_10024_p1 = $signed(tmp_175_reg_20538_pp0_iter5_reg);

assign sext_ln159_158_fu_10035_p1 = $signed(tmp_176_reg_20543_pp0_iter5_reg);

assign sext_ln159_159_fu_10052_p1 = $signed(tmp_177_reg_20548_pp0_iter5_reg);

assign sext_ln159_15_fu_6766_p1 = $signed(tmp_41_reg_19802);

assign sext_ln159_160_fu_7489_p1 = $signed(tmp_178_reg_20553);

assign sext_ln159_161_fu_7500_p1 = $signed(tmp_179_reg_20558);

assign sext_ln159_162_fu_10063_p1 = $signed(tmp_180_reg_20563_pp0_iter5_reg);

assign sext_ln159_163_fu_4937_p1 = $signed(tmp_181_fu_4927_p4);

assign sext_ln159_164_fu_7511_p1 = $signed(tmp_182_reg_20574);

assign sext_ln159_165_fu_10084_p1 = $signed(tmp_183_reg_20579_pp0_iter5_reg);

assign sext_ln159_166_fu_10095_p1 = $signed(tmp_184_reg_20584_pp0_iter5_reg);

assign sext_ln159_167_fu_7528_p1 = $signed(tmp_185_reg_20589);

assign sext_ln159_168_fu_4999_p1 = $signed(tmp_186_fu_4989_p4);

assign sext_ln159_169_fu_10110_p1 = $signed(tmp_187_reg_20600_pp0_iter5_reg);

assign sext_ln159_16_fu_3227_p1 = $signed(trunc_ln149_8_fu_2887_p4);

assign sext_ln159_170_fu_5031_p1 = $signed(tmp_188_fu_5021_p4);

assign sext_ln159_171_fu_7545_p1 = $signed(tmp_189_reg_20611);

assign sext_ln159_172_fu_7562_p1 = tmp_190_reg_20616;

assign sext_ln159_173_fu_10131_p1 = $signed(tmp_191_reg_20621_pp0_iter5_reg);

assign sext_ln159_174_fu_10142_p1 = $signed(tmp_192_reg_20626_pp0_iter5_reg);

assign sext_ln159_175_fu_10159_p1 = $signed(tmp_193_reg_20631_pp0_iter5_reg);

assign sext_ln159_176_fu_7573_p1 = $signed(tmp_194_reg_20636);

assign sext_ln159_177_fu_7584_p1 = $signed(tmp_195_reg_20641);

assign sext_ln159_178_fu_10170_p1 = $signed(tmp_196_reg_20646_pp0_iter5_reg);

assign sext_ln159_179_fu_5133_p1 = $signed(tmp_197_fu_5123_p4);

assign sext_ln159_17_fu_3231_p1 = $signed(tmp_42_fu_3217_p4);

assign sext_ln159_180_fu_7595_p1 = $signed(tmp_198_reg_20657);

assign sext_ln159_181_fu_10191_p1 = $signed(tmp_199_reg_20662_pp0_iter5_reg);

assign sext_ln159_182_fu_10202_p1 = $signed(tmp_200_reg_20667_pp0_iter5_reg);

assign sext_ln159_183_fu_7612_p1 = $signed(tmp_201_reg_20672);

assign sext_ln159_184_fu_5195_p1 = $signed(tmp_202_fu_5185_p4);

assign sext_ln159_185_fu_10217_p1 = $signed(tmp_203_reg_20683_pp0_iter5_reg);

assign sext_ln159_186_fu_5227_p1 = $signed(tmp_204_fu_5217_p4);

assign sext_ln159_187_fu_7629_p1 = $signed(tmp_205_reg_20694);

assign sext_ln159_188_fu_7646_p1 = $signed(tmp_206_reg_20699);

assign sext_ln159_189_fu_10238_p1 = $signed(tmp_207_reg_20704_pp0_iter5_reg);

assign sext_ln159_18_fu_9135_p1 = $signed(trunc_ln149_9_reg_19651_pp0_iter5_reg);

assign sext_ln159_190_fu_10249_p1 = $signed(tmp_208_reg_20709_pp0_iter5_reg);

assign sext_ln159_191_fu_10266_p1 = $signed(tmp_209_reg_20714_pp0_iter5_reg);

assign sext_ln159_192_fu_7657_p1 = $signed(tmp_210_reg_20719);

assign sext_ln159_193_fu_7668_p1 = $signed(tmp_211_reg_20724);

assign sext_ln159_194_fu_10277_p1 = $signed(tmp_212_reg_20729_pp0_iter5_reg);

assign sext_ln159_195_fu_5329_p1 = $signed(tmp_213_fu_5319_p4);

assign sext_ln159_196_fu_7679_p1 = $signed(tmp_214_reg_20740);

assign sext_ln159_197_fu_10298_p1 = $signed(tmp_215_reg_20745_pp0_iter5_reg);

assign sext_ln159_198_fu_10309_p1 = $signed(tmp_216_reg_20750_pp0_iter5_reg);

assign sext_ln159_199_fu_7696_p1 = $signed(tmp_217_reg_20755);

assign sext_ln159_19_fu_9138_p1 = $signed(tmp_43_reg_19833_pp0_iter5_reg);

assign sext_ln159_1_fu_6718_p1 = $signed(trunc_ln159_reg_19746);

assign sext_ln159_200_fu_5391_p1 = $signed(tmp_218_fu_5381_p4);

assign sext_ln159_201_fu_10324_p1 = $signed(tmp_219_reg_20766_pp0_iter5_reg);

assign sext_ln159_202_fu_5423_p1 = $signed(tmp_220_fu_5413_p4);

assign sext_ln159_203_fu_7713_p1 = $signed(tmp_221_reg_20777);

assign sext_ln159_204_fu_7730_p1 = $signed(tmp_222_reg_20782);

assign sext_ln159_205_fu_10345_p1 = $signed(tmp_223_reg_20787_pp0_iter5_reg);

assign sext_ln159_206_fu_10356_p1 = $signed(tmp_224_reg_20792_pp0_iter5_reg);

assign sext_ln159_207_fu_10373_p1 = $signed(tmp_225_reg_20797_pp0_iter5_reg);

assign sext_ln159_208_fu_7741_p1 = $signed(tmp_226_reg_20802);

assign sext_ln159_209_fu_7752_p1 = $signed(tmp_227_reg_20807);

assign sext_ln159_20_fu_3263_p1 = $signed(trunc_ln149_s_fu_2907_p4);

assign sext_ln159_210_fu_10384_p1 = $signed(tmp_228_reg_20812_pp0_iter5_reg);

assign sext_ln159_211_fu_5525_p1 = $signed(tmp_229_fu_5515_p4);

assign sext_ln159_212_fu_7763_p1 = $signed(tmp_230_reg_20823);

assign sext_ln159_213_fu_10405_p1 = $signed(tmp_231_reg_20828_pp0_iter5_reg);

assign sext_ln159_214_fu_10416_p1 = $signed(tmp_232_reg_20833_pp0_iter5_reg);

assign sext_ln159_215_fu_7780_p1 = $signed(tmp_233_reg_20838);

assign sext_ln159_216_fu_5587_p1 = $signed(tmp_234_fu_5577_p4);

assign sext_ln159_217_fu_10431_p1 = $signed(tmp_235_reg_20849_pp0_iter5_reg);

assign sext_ln159_218_fu_5619_p1 = $signed(tmp_236_fu_5609_p4);

assign sext_ln159_219_fu_7797_p1 = $signed(tmp_237_reg_20860);

assign sext_ln159_21_fu_3267_p1 = $signed(tmp_44_fu_3253_p4);

assign sext_ln159_220_fu_7814_p1 = $signed(tmp_238_reg_20865);

assign sext_ln159_221_fu_10452_p1 = $signed(tmp_239_reg_20870_pp0_iter5_reg);

assign sext_ln159_222_fu_10463_p1 = $signed(tmp_240_reg_20875_pp0_iter5_reg);

assign sext_ln159_223_fu_10480_p1 = $signed(tmp_241_reg_20880_pp0_iter5_reg);

assign sext_ln159_224_fu_7825_p1 = $signed(tmp_242_reg_20885);

assign sext_ln159_225_fu_7836_p1 = $signed(tmp_243_reg_20890);

assign sext_ln159_226_fu_10491_p1 = $signed(tmp_244_reg_20895_pp0_iter5_reg);

assign sext_ln159_227_fu_5721_p1 = $signed(tmp_245_fu_5711_p4);

assign sext_ln159_228_fu_7847_p1 = $signed(tmp_246_reg_20906);

assign sext_ln159_229_fu_10512_p1 = $signed(tmp_247_reg_20911_pp0_iter5_reg);

assign sext_ln159_22_fu_6783_p1 = $signed(trunc_ln149_10_reg_19656);

assign sext_ln159_230_fu_10523_p1 = $signed(tmp_248_reg_20916_pp0_iter5_reg);

assign sext_ln159_231_fu_7864_p1 = $signed(tmp_249_reg_20921);

assign sext_ln159_232_fu_5783_p1 = $signed(tmp_250_fu_5773_p4);

assign sext_ln159_233_fu_10538_p1 = $signed(tmp_251_reg_20932_pp0_iter5_reg);

assign sext_ln159_234_fu_5815_p1 = $signed(tmp_252_fu_5805_p4);

assign sext_ln159_235_fu_7881_p1 = $signed(tmp_253_reg_20943);

assign sext_ln159_236_fu_7898_p1 = $signed(tmp_254_reg_20948);

assign sext_ln159_237_fu_10559_p1 = $signed(tmp_255_reg_20953_pp0_iter5_reg);

assign sext_ln159_238_fu_10570_p1 = $signed(tmp_256_reg_20958_pp0_iter5_reg);

assign sext_ln159_239_fu_10587_p1 = $signed(tmp_257_reg_20963_pp0_iter5_reg);

assign sext_ln159_23_fu_6786_p1 = $signed(tmp_45_reg_19864);

assign sext_ln159_240_fu_7909_p1 = $signed(tmp_258_reg_20968);

assign sext_ln159_241_fu_7920_p1 = $signed(tmp_259_reg_20973);

assign sext_ln159_242_fu_10598_p1 = $signed(tmp_260_reg_20978_pp0_iter5_reg);

assign sext_ln159_243_fu_5917_p1 = $signed(tmp_261_fu_5907_p4);

assign sext_ln159_244_fu_7931_p1 = $signed(tmp_262_reg_20989);

assign sext_ln159_245_fu_10619_p1 = $signed(tmp_263_reg_20994_pp0_iter5_reg);

assign sext_ln159_246_fu_10630_p1 = $signed(tmp_264_reg_20999_pp0_iter5_reg);

assign sext_ln159_247_fu_7948_p1 = $signed(tmp_265_reg_21004);

assign sext_ln159_248_fu_5979_p1 = $signed(tmp_266_fu_5969_p4);

assign sext_ln159_249_fu_10645_p1 = $signed(tmp_267_reg_21015_pp0_iter5_reg);

assign sext_ln159_24_fu_6803_p1 = $signed(trunc_ln149_11_reg_19661);

assign sext_ln159_250_fu_6011_p1 = $signed(tmp_268_fu_6001_p4);

assign sext_ln159_251_fu_7965_p1 = $signed(tmp_269_reg_21026);

assign sext_ln159_252_fu_7982_p1 = $signed(tmp_270_reg_21031);

assign sext_ln159_253_fu_10666_p1 = $signed(tmp_271_reg_21036_pp0_iter5_reg);

assign sext_ln159_254_fu_10677_p1 = $signed(tmp_272_reg_21041_pp0_iter5_reg);

assign sext_ln159_255_fu_10694_p1 = $signed(tmp_273_reg_21046_pp0_iter5_reg);

assign sext_ln159_256_fu_7993_p1 = $signed(tmp_274_reg_21051);

assign sext_ln159_257_fu_8004_p1 = $signed(tmp_275_reg_21056);

assign sext_ln159_258_fu_10705_p1 = $signed(tmp_276_reg_21061_pp0_iter5_reg);

assign sext_ln159_259_fu_6113_p1 = $signed(tmp_277_fu_6103_p4);

assign sext_ln159_25_fu_6806_p1 = tmp_46_reg_19869;

assign sext_ln159_260_fu_8015_p1 = $signed(tmp_278_reg_21072);

assign sext_ln159_261_fu_10726_p1 = $signed(tmp_279_reg_21077_pp0_iter5_reg);

assign sext_ln159_262_fu_10737_p1 = $signed(tmp_280_reg_21082_pp0_iter5_reg);

assign sext_ln159_263_fu_8032_p1 = $signed(tmp_281_reg_21087);

assign sext_ln159_264_fu_6175_p1 = $signed(tmp_282_fu_6165_p4);

assign sext_ln159_265_fu_10752_p1 = $signed(tmp_283_reg_21098_pp0_iter5_reg);

assign sext_ln159_266_fu_6207_p1 = $signed(tmp_284_fu_6197_p4);

assign sext_ln159_267_fu_8049_p1 = $signed(tmp_285_reg_21109);

assign sext_ln159_268_fu_8066_p1 = $signed(tmp_286_reg_21114);

assign sext_ln159_269_fu_10773_p1 = $signed(tmp_301_reg_21119_pp0_iter5_reg);

assign sext_ln159_26_fu_9159_p1 = $signed(trunc_ln149_12_reg_19666_pp0_iter5_reg);

assign sext_ln159_270_fu_10784_p1 = $signed(tmp_303_reg_21124_pp0_iter5_reg);

assign sext_ln159_271_fu_10801_p1 = $signed(tmp_317_reg_21129_pp0_iter5_reg);

assign sext_ln159_272_fu_8077_p1 = $signed(trunc_ln149_15_reg_19681);

assign sext_ln159_273_fu_8088_p1 = $signed(trunc_ln149_16_reg_19686);

assign sext_ln159_274_fu_10812_p1 = $signed(trunc_ln149_17_reg_19691_pp0_iter5_reg);

assign sext_ln159_275_fu_6269_p1 = $signed(trunc_ln149_18_fu_2997_p4);

assign sext_ln159_276_fu_8099_p1 = $signed(trunc_ln149_19_reg_19696);

assign sext_ln159_277_fu_10833_p1 = $signed(trunc_ln149_20_reg_19701_pp0_iter5_reg);

assign sext_ln159_278_fu_10844_p1 = $signed(trunc_ln149_21_reg_19706_pp0_iter5_reg);

assign sext_ln159_279_fu_8116_p1 = $signed(trunc_ln149_22_reg_19711);

assign sext_ln159_27_fu_9162_p1 = $signed(tmp_47_reg_19874_pp0_iter5_reg);

assign sext_ln159_280_fu_6281_p1 = $signed(trunc_ln149_23_fu_3047_p4);

assign sext_ln159_281_fu_10859_p1 = $signed(trunc_ln149_24_reg_19716_pp0_iter5_reg);

assign sext_ln159_282_fu_6293_p1 = $signed(trunc_ln149_25_fu_3067_p4);

assign sext_ln159_283_fu_8133_p1 = $signed(trunc_ln149_26_reg_19721);

assign sext_ln159_284_fu_8150_p1 = $signed(trunc_ln149_27_reg_19726);

assign sext_ln159_285_fu_10886_p1 = $signed(trunc_ln149_28_reg_19731_pp0_iter5_reg);

assign sext_ln159_286_fu_10897_p1 = $signed(trunc_ln149_29_reg_19736_pp0_iter5_reg);

assign sext_ln159_287_fu_10908_p1 = $signed(trunc_ln149_30_reg_19741_pp0_iter5_reg);

assign sext_ln159_28_fu_9173_p1 = $signed(trunc_ln149_13_reg_19671_pp0_iter5_reg);

assign sext_ln159_29_fu_9176_p1 = $signed(tmp_48_reg_19879_pp0_iter5_reg);

assign sext_ln159_2_fu_6729_p1 = $signed(trunc_ln149_1_reg_19621);

assign sext_ln159_30_fu_9193_p1 = $signed(trunc_ln149_14_reg_19676_pp0_iter5_reg);

assign sext_ln159_31_fu_9196_p1 = $signed(tmp_49_reg_19884_pp0_iter5_reg);

assign sext_ln159_32_fu_6817_p1 = $signed(tmp_50_reg_19889);

assign sext_ln159_33_fu_6828_p1 = $signed(tmp_51_reg_19894);

assign sext_ln159_34_fu_9207_p1 = $signed(tmp_52_reg_19899_pp0_iter5_reg);

assign sext_ln159_35_fu_3369_p1 = $signed(tmp_53_fu_3359_p4);

assign sext_ln159_36_fu_6839_p1 = $signed(tmp_54_reg_19910);

assign sext_ln159_37_fu_9228_p1 = $signed(tmp_55_reg_19915_pp0_iter5_reg);

assign sext_ln159_38_fu_9239_p1 = $signed(tmp_56_reg_19920_pp0_iter5_reg);

assign sext_ln159_39_fu_6856_p1 = $signed(tmp_57_reg_19925);

assign sext_ln159_3_fu_6732_p1 = $signed(tmp_35_reg_19751);

assign sext_ln159_40_fu_3431_p1 = $signed(tmp_58_fu_3421_p4);

assign sext_ln159_41_fu_9254_p1 = $signed(tmp_59_reg_19936_pp0_iter5_reg);

assign sext_ln159_42_fu_3463_p1 = $signed(tmp_60_fu_3453_p4);

assign sext_ln159_43_fu_6873_p1 = $signed(tmp_61_reg_19947);

assign sext_ln159_44_fu_6890_p1 = tmp_62_reg_19952;

assign sext_ln159_45_fu_9275_p1 = $signed(tmp_63_reg_19957_pp0_iter5_reg);

assign sext_ln159_46_fu_9286_p1 = $signed(tmp_64_reg_19962_pp0_iter5_reg);

assign sext_ln159_47_fu_9303_p1 = $signed(tmp_65_reg_19967_pp0_iter5_reg);

assign sext_ln159_48_fu_6901_p1 = $signed(tmp_66_reg_19972);

assign sext_ln159_49_fu_6912_p1 = $signed(tmp_67_reg_19977);

assign sext_ln159_4_fu_9079_p1 = $signed(trunc_ln149_2_reg_19626_pp0_iter5_reg);

assign sext_ln159_50_fu_9314_p1 = $signed(tmp_68_reg_19982_pp0_iter5_reg);

assign sext_ln159_51_fu_3565_p1 = $signed(tmp_69_fu_3555_p4);

assign sext_ln159_52_fu_6923_p1 = $signed(tmp_70_reg_19993);

assign sext_ln159_53_fu_9335_p1 = $signed(tmp_71_reg_19998_pp0_iter5_reg);

assign sext_ln159_54_fu_9346_p1 = $signed(tmp_72_reg_20003_pp0_iter5_reg);

assign sext_ln159_55_fu_6940_p1 = $signed(tmp_73_reg_20008);

assign sext_ln159_56_fu_3627_p1 = $signed(tmp_74_fu_3617_p4);

assign sext_ln159_57_fu_9361_p1 = $signed(tmp_75_reg_20019_pp0_iter5_reg);

assign sext_ln159_58_fu_3659_p1 = $signed(tmp_76_fu_3649_p4);

assign sext_ln159_59_fu_6957_p1 = $signed(tmp_77_reg_20030);

assign sext_ln159_5_fu_9082_p1 = $signed(tmp_36_reg_19756_pp0_iter5_reg);

assign sext_ln159_60_fu_6974_p1 = tmp_78_reg_20035;

assign sext_ln159_61_fu_9382_p1 = $signed(tmp_79_reg_20040_pp0_iter5_reg);

assign sext_ln159_62_fu_9393_p1 = $signed(tmp_80_reg_20045_pp0_iter5_reg);

assign sext_ln159_63_fu_9410_p1 = $signed(tmp_81_reg_20050_pp0_iter5_reg);

assign sext_ln159_64_fu_6985_p1 = $signed(tmp_82_reg_20055);

assign sext_ln159_65_fu_6996_p1 = $signed(tmp_83_reg_20060);

assign sext_ln159_66_fu_9421_p1 = $signed(tmp_84_reg_20065_pp0_iter5_reg);

assign sext_ln159_67_fu_3761_p1 = $signed(tmp_85_fu_3751_p4);

assign sext_ln159_68_fu_7007_p1 = $signed(tmp_86_reg_20076);

assign sext_ln159_69_fu_9442_p1 = $signed(tmp_87_reg_20081_pp0_iter5_reg);

assign sext_ln159_6_fu_3161_p1 = $signed(trunc_ln149_3_fu_2837_p4);

assign sext_ln159_70_fu_9453_p1 = $signed(tmp_88_reg_20086_pp0_iter5_reg);

assign sext_ln159_71_fu_7024_p1 = $signed(tmp_89_reg_20091);

assign sext_ln159_72_fu_3823_p1 = $signed(tmp_90_fu_3813_p4);

assign sext_ln159_73_fu_9468_p1 = $signed(tmp_91_reg_20102_pp0_iter5_reg);

assign sext_ln159_74_fu_3855_p1 = $signed(tmp_92_fu_3845_p4);

assign sext_ln159_75_fu_7041_p1 = $signed(tmp_93_reg_20113);

assign sext_ln159_76_fu_7058_p1 = tmp_94_reg_20118;

assign sext_ln159_77_fu_9489_p1 = $signed(tmp_95_reg_20123_pp0_iter5_reg);

assign sext_ln159_78_fu_9500_p1 = $signed(tmp_96_reg_20128_pp0_iter5_reg);

assign sext_ln159_79_fu_9517_p1 = $signed(tmp_97_reg_20133_pp0_iter5_reg);

assign sext_ln159_7_fu_3165_p1 = $signed(tmp_37_fu_3151_p4);

assign sext_ln159_80_fu_7069_p1 = $signed(tmp_98_reg_20138);

assign sext_ln159_81_fu_7080_p1 = $signed(tmp_99_reg_20143);

assign sext_ln159_82_fu_9528_p1 = $signed(tmp_100_reg_20148_pp0_iter5_reg);

assign sext_ln159_83_fu_3957_p1 = $signed(tmp_101_fu_3947_p4);

assign sext_ln159_84_fu_7091_p1 = $signed(tmp_102_reg_20159);

assign sext_ln159_85_fu_9549_p1 = $signed(tmp_103_reg_20164_pp0_iter5_reg);

assign sext_ln159_86_fu_9560_p1 = $signed(tmp_104_reg_20169_pp0_iter5_reg);

assign sext_ln159_87_fu_7108_p1 = $signed(tmp_105_reg_20174);

assign sext_ln159_88_fu_4019_p1 = $signed(tmp_106_fu_4009_p4);

assign sext_ln159_89_fu_9575_p1 = $signed(tmp_107_reg_20185_pp0_iter5_reg);

assign sext_ln159_8_fu_6743_p1 = $signed(trunc_ln149_4_reg_19631);

assign sext_ln159_90_fu_4051_p1 = $signed(tmp_108_fu_4041_p4);

assign sext_ln159_91_fu_7125_p1 = $signed(tmp_109_reg_20196);

assign sext_ln159_92_fu_7142_p1 = tmp_110_reg_20201;

assign sext_ln159_93_fu_9596_p1 = $signed(tmp_111_reg_20206_pp0_iter5_reg);

assign sext_ln159_94_fu_9607_p1 = $signed(tmp_112_reg_20211_pp0_iter5_reg);

assign sext_ln159_95_fu_9624_p1 = $signed(tmp_113_reg_20216_pp0_iter5_reg);

assign sext_ln159_96_fu_7153_p1 = $signed(tmp_114_reg_20221);

assign sext_ln159_97_fu_7164_p1 = $signed(tmp_115_reg_20226);

assign sext_ln159_98_fu_9635_p1 = $signed(tmp_116_reg_20231_pp0_iter5_reg);

assign sext_ln159_99_fu_4153_p1 = $signed(tmp_117_fu_4143_p4);

assign sext_ln159_9_fu_6746_p1 = $signed(tmp_38_reg_19787);

assign sext_ln159_fu_6715_p1 = $signed(trunc_ln149_reg_19616);

assign sext_ln161_102_fu_14572_p1 = grp_fu_18508_p7;

assign sext_ln161_103_fu_14581_p1 = $signed(add_ln161_126_fu_14575_p2);

assign sext_ln161_106_fu_14591_p1 = add_ln161_129_reg_24105;

assign sext_ln161_107_fu_12597_p1 = grp_fu_16935_p3;

assign sext_ln161_108_fu_12600_p1 = grp_fu_16944_p3;

assign sext_ln161_109_fu_14599_p1 = $signed(add_ln161_133_reg_23375_pp0_iter8_reg);

assign sext_ln161_110_fu_13871_p1 = grp_fu_17782_p3;

assign sext_ln161_111_fu_13874_p1 = grp_fu_17791_p3;

assign sext_ln161_112_fu_14608_p1 = $signed(add_ln161_137_reg_24110);

assign sext_ln161_115_fu_14611_p1 = grp_fu_18534_p7;

assign sext_ln161_116_fu_14620_p1 = $signed(add_ln161_142_fu_14614_p2);

assign sext_ln161_119_fu_14630_p1 = add_ln161_145_reg_24115;

assign sext_ln161_11_fu_14299_p1 = grp_fu_18326_p7;

assign sext_ln161_120_fu_12624_p1 = grp_fu_16962_p3;

assign sext_ln161_121_fu_12627_p1 = grp_fu_16971_p3;

assign sext_ln161_122_fu_14638_p1 = $signed(add_ln161_149_reg_23400_pp0_iter8_reg);

assign sext_ln161_123_fu_13883_p1 = grp_fu_17808_p3;

assign sext_ln161_124_fu_13886_p1 = grp_fu_17817_p3;

assign sext_ln161_125_fu_14647_p1 = $signed(add_ln161_153_reg_24120);

assign sext_ln161_128_fu_14650_p1 = grp_fu_18560_p7;

assign sext_ln161_129_fu_14659_p1 = $signed(add_ln161_158_fu_14653_p2);

assign sext_ln161_12_fu_14308_p1 = $signed(add_ln161_14_fu_14302_p2);

assign sext_ln161_132_fu_14669_p1 = add_ln161_161_reg_24125;

assign sext_ln161_133_fu_12651_p1 = grp_fu_16989_p3;

assign sext_ln161_134_fu_12654_p1 = grp_fu_16998_p3;

assign sext_ln161_135_fu_14677_p1 = $signed(add_ln161_165_reg_23425_pp0_iter8_reg);

assign sext_ln161_136_fu_13895_p1 = grp_fu_17834_p3;

assign sext_ln161_137_fu_13898_p1 = grp_fu_17843_p3;

assign sext_ln161_138_fu_14686_p1 = $signed(add_ln161_169_reg_24130);

assign sext_ln161_141_fu_14689_p1 = grp_fu_18586_p7;

assign sext_ln161_142_fu_14698_p1 = $signed(add_ln161_174_fu_14692_p2);

assign sext_ln161_145_fu_14708_p1 = add_ln161_177_reg_24135;

assign sext_ln161_146_fu_12678_p1 = grp_fu_17016_p3;

assign sext_ln161_147_fu_12681_p1 = grp_fu_17025_p3;

assign sext_ln161_148_fu_14716_p1 = $signed(add_ln161_181_reg_23450_pp0_iter8_reg);

assign sext_ln161_149_fu_13907_p1 = grp_fu_17860_p3;

assign sext_ln161_150_fu_13910_p1 = grp_fu_17869_p3;

assign sext_ln161_151_fu_14725_p1 = $signed(add_ln161_185_reg_24140);

assign sext_ln161_154_fu_14728_p1 = grp_fu_18612_p7;

assign sext_ln161_155_fu_14737_p1 = $signed(add_ln161_190_fu_14731_p2);

assign sext_ln161_158_fu_14747_p1 = add_ln161_193_reg_24145;

assign sext_ln161_159_fu_12705_p1 = grp_fu_17043_p3;

assign sext_ln161_15_fu_14318_p1 = add_ln161_17_reg_24035;

assign sext_ln161_160_fu_12708_p1 = grp_fu_17052_p3;

assign sext_ln161_161_fu_14755_p1 = $signed(add_ln161_197_reg_23475_pp0_iter8_reg);

assign sext_ln161_162_fu_13919_p1 = grp_fu_17886_p3;

assign sext_ln161_163_fu_13922_p1 = grp_fu_17895_p3;

assign sext_ln161_164_fu_14764_p1 = $signed(add_ln161_201_reg_24150);

assign sext_ln161_167_fu_14767_p1 = grp_fu_18638_p7;

assign sext_ln161_168_fu_14776_p1 = $signed(add_ln161_206_fu_14770_p2);

assign sext_ln161_16_fu_12408_p1 = grp_fu_16746_p3;

assign sext_ln161_171_fu_14786_p1 = add_ln161_209_reg_24155;

assign sext_ln161_172_fu_12732_p1 = grp_fu_17070_p3;

assign sext_ln161_173_fu_12735_p1 = grp_fu_17079_p3;

assign sext_ln161_174_fu_14794_p1 = $signed(add_ln161_213_reg_23500_pp0_iter8_reg);

assign sext_ln161_175_fu_13931_p1 = grp_fu_17912_p3;

assign sext_ln161_176_fu_13934_p1 = grp_fu_17921_p3;

assign sext_ln161_177_fu_14803_p1 = $signed(add_ln161_217_reg_24160);

assign sext_ln161_17_fu_12411_p1 = grp_fu_16755_p3;

assign sext_ln161_180_fu_14806_p1 = grp_fu_18664_p7;

assign sext_ln161_181_fu_14815_p1 = $signed(add_ln161_222_fu_14809_p2);

assign sext_ln161_184_fu_14825_p1 = add_ln161_225_reg_24165;

assign sext_ln161_185_fu_12759_p1 = grp_fu_17097_p3;

assign sext_ln161_186_fu_12762_p1 = grp_fu_17106_p3;

assign sext_ln161_187_fu_14833_p1 = $signed(add_ln161_229_reg_23525_pp0_iter8_reg);

assign sext_ln161_188_fu_13943_p1 = grp_fu_17938_p3;

assign sext_ln161_189_fu_13946_p1 = grp_fu_17947_p3;

assign sext_ln161_18_fu_14326_p1 = $signed(add_ln161_21_reg_23200_pp0_iter8_reg);

assign sext_ln161_190_fu_14842_p1 = $signed(add_ln161_233_reg_24170);

assign sext_ln161_193_fu_14845_p1 = grp_fu_18690_p7;

assign sext_ln161_194_fu_14854_p1 = $signed(add_ln161_238_fu_14848_p2);

assign sext_ln161_197_fu_14864_p1 = add_ln161_241_reg_24175;

assign sext_ln161_198_fu_12786_p1 = grp_fu_17124_p3;

assign sext_ln161_199_fu_12789_p1 = grp_fu_17133_p3;

assign sext_ln161_19_fu_13787_p1 = grp_fu_17600_p3;

assign sext_ln161_200_fu_14872_p1 = $signed(add_ln161_245_reg_23550_pp0_iter8_reg);

assign sext_ln161_201_fu_13955_p1 = grp_fu_17964_p3;

assign sext_ln161_202_fu_13958_p1 = grp_fu_17973_p3;

assign sext_ln161_203_fu_14881_p1 = $signed(add_ln161_249_reg_24180);

assign sext_ln161_206_fu_14884_p1 = grp_fu_18716_p7;

assign sext_ln161_207_fu_14893_p1 = $signed(add_ln161_254_fu_14887_p2);

assign sext_ln161_20_fu_13790_p1 = grp_fu_17609_p3;

assign sext_ln161_211_fu_12809_p1 = grp_fu_17151_p3;

assign sext_ln161_212_fu_12812_p1 = grp_fu_17160_p3;

assign sext_ln161_214_fu_13967_p1 = grp_fu_17990_p3;

assign sext_ln161_215_fu_13970_p1 = grp_fu_17999_p3;

assign sext_ln161_216_fu_14903_p1 = $signed(add_ln161_265_reg_24185);

assign sext_ln161_219_fu_14906_p1 = grp_fu_18742_p7;

assign sext_ln161_21_fu_14335_p1 = $signed(add_ln161_25_reg_24040);

assign sext_ln161_220_fu_14915_p1 = $signed(add_ln161_270_fu_14909_p2);

assign sext_ln161_224_fu_12836_p1 = grp_fu_17178_p3;

assign sext_ln161_225_fu_12839_p1 = grp_fu_17187_p3;

assign sext_ln161_227_fu_13979_p1 = grp_fu_18008_p3;

assign sext_ln161_228_fu_13982_p1 = grp_fu_18017_p3;

assign sext_ln161_229_fu_14930_p1 = $signed(add_ln161_281_reg_24190);

assign sext_ln161_232_fu_14933_p1 = grp_fu_18774_p7;

assign sext_ln161_233_fu_14942_p1 = $signed(add_ln161_286_fu_14936_p2);

assign sext_ln161_237_fu_12863_p1 = grp_fu_17205_p3;

assign sext_ln161_238_fu_12866_p1 = grp_fu_17214_p3;

assign sext_ln161_240_fu_13991_p1 = grp_fu_18026_p3;

assign sext_ln161_241_fu_13994_p1 = grp_fu_18035_p3;

assign sext_ln161_242_fu_14957_p1 = $signed(add_ln161_297_reg_24195);

assign sext_ln161_245_fu_14960_p1 = grp_fu_18806_p7;

assign sext_ln161_246_fu_14969_p1 = $signed(add_ln161_302_fu_14963_p2);

assign sext_ln161_24_fu_14338_p1 = grp_fu_18352_p7;

assign sext_ln161_250_fu_12890_p1 = grp_fu_17232_p3;

assign sext_ln161_251_fu_12893_p1 = grp_fu_17241_p3;

assign sext_ln161_253_fu_14003_p1 = grp_fu_18044_p3;

assign sext_ln161_254_fu_14006_p1 = grp_fu_18053_p3;

assign sext_ln161_255_fu_14984_p1 = $signed(add_ln161_313_reg_24200);

assign sext_ln161_258_fu_14987_p1 = grp_fu_18838_p7;

assign sext_ln161_259_fu_14996_p1 = $signed(add_ln161_318_fu_14990_p2);

assign sext_ln161_25_fu_14347_p1 = $signed(add_ln161_30_fu_14341_p2);

assign sext_ln161_263_fu_12917_p1 = grp_fu_17259_p3;

assign sext_ln161_264_fu_12920_p1 = grp_fu_17268_p3;

assign sext_ln161_266_fu_14015_p1 = grp_fu_18062_p3;

assign sext_ln161_267_fu_14018_p1 = grp_fu_18071_p3;

assign sext_ln161_268_fu_15011_p1 = $signed(add_ln161_329_reg_24205);

assign sext_ln161_271_fu_15014_p1 = grp_fu_18870_p7;

assign sext_ln161_272_fu_15023_p1 = $signed(add_ln161_334_fu_15017_p2);

assign sext_ln161_276_fu_12944_p1 = grp_fu_17286_p3;

assign sext_ln161_277_fu_12947_p1 = grp_fu_17295_p3;

assign sext_ln161_279_fu_14027_p1 = grp_fu_18080_p3;

assign sext_ln161_280_fu_14030_p1 = grp_fu_18089_p3;

assign sext_ln161_281_fu_15038_p1 = $signed(add_ln161_345_reg_24210);

assign sext_ln161_284_fu_15041_p1 = grp_fu_18902_p7;

assign sext_ln161_285_fu_15050_p1 = $signed(add_ln161_350_fu_15044_p2);

assign sext_ln161_289_fu_12971_p1 = grp_fu_17313_p3;

assign sext_ln161_28_fu_14357_p1 = add_ln161_33_reg_24045;

assign sext_ln161_290_fu_12974_p1 = grp_fu_17322_p3;

assign sext_ln161_292_fu_14039_p1 = grp_fu_18098_p3;

assign sext_ln161_293_fu_14042_p1 = grp_fu_18107_p3;

assign sext_ln161_294_fu_15065_p1 = $signed(add_ln161_361_reg_24215);

assign sext_ln161_297_fu_15068_p1 = grp_fu_18934_p7;

assign sext_ln161_298_fu_15077_p1 = $signed(add_ln161_366_fu_15071_p2);

assign sext_ln161_29_fu_12435_p1 = grp_fu_16773_p3;

assign sext_ln161_2_fu_14279_p1 = add_ln161_1_reg_24025;

assign sext_ln161_302_fu_12998_p1 = grp_fu_17340_p3;

assign sext_ln161_303_fu_13001_p1 = grp_fu_17349_p3;

assign sext_ln161_305_fu_14051_p1 = grp_fu_18116_p3;

assign sext_ln161_306_fu_14054_p1 = grp_fu_18125_p3;

assign sext_ln161_307_fu_15092_p1 = $signed(add_ln161_377_reg_24220);

assign sext_ln161_30_fu_12438_p1 = grp_fu_16782_p3;

assign sext_ln161_310_fu_15095_p1 = grp_fu_18966_p7;

assign sext_ln161_311_fu_15104_p1 = $signed(add_ln161_382_fu_15098_p2);

assign sext_ln161_315_fu_13025_p1 = grp_fu_17367_p3;

assign sext_ln161_316_fu_13028_p1 = grp_fu_17376_p3;

assign sext_ln161_318_fu_14063_p1 = grp_fu_18134_p3;

assign sext_ln161_319_fu_14066_p1 = grp_fu_18143_p3;

assign sext_ln161_31_fu_14365_p1 = $signed(add_ln161_37_reg_23225_pp0_iter8_reg);

assign sext_ln161_320_fu_15119_p1 = $signed(add_ln161_393_reg_24225);

assign sext_ln161_323_fu_15122_p1 = grp_fu_18998_p7;

assign sext_ln161_324_fu_15131_p1 = $signed(add_ln161_398_fu_15125_p2);

assign sext_ln161_328_fu_13052_p1 = grp_fu_17394_p3;

assign sext_ln161_329_fu_13055_p1 = grp_fu_17403_p3;

assign sext_ln161_32_fu_13799_p1 = grp_fu_17626_p3;

assign sext_ln161_331_fu_14075_p1 = grp_fu_18152_p3;

assign sext_ln161_332_fu_14078_p1 = grp_fu_18161_p3;

assign sext_ln161_333_fu_15146_p1 = $signed(add_ln161_409_reg_24230);

assign sext_ln161_336_fu_15149_p1 = grp_fu_19030_p7;

assign sext_ln161_337_fu_15158_p1 = $signed(add_ln161_414_fu_15152_p2);

assign sext_ln161_33_fu_13802_p1 = grp_fu_17635_p3;

assign sext_ln161_340_fu_15173_p1 = add_ln161_417_reg_24235;

assign sext_ln161_341_fu_13083_p1 = grp_fu_17421_p3;

assign sext_ln161_342_fu_13086_p1 = grp_fu_17430_p3;

assign sext_ln161_343_fu_15181_p1 = $signed(add_ln161_421_reg_23775_pp0_iter8_reg);

assign sext_ln161_344_fu_14087_p1 = grp_fu_18170_p3;

assign sext_ln161_345_fu_14090_p1 = grp_fu_18179_p3;

assign sext_ln161_346_fu_15190_p1 = $signed(add_ln161_425_reg_24240);

assign sext_ln161_349_fu_15193_p1 = grp_fu_19062_p7;

assign sext_ln161_34_fu_14374_p1 = $signed(add_ln161_41_reg_24050);

assign sext_ln161_350_fu_15202_p1 = $signed(add_ln161_430_fu_15196_p2);

assign sext_ln161_353_fu_15212_p1 = add_ln161_433_reg_24245;

assign sext_ln161_354_fu_13110_p1 = grp_fu_17448_p3;

assign sext_ln161_355_fu_13113_p1 = grp_fu_17457_p3;

assign sext_ln161_356_fu_15220_p1 = $signed(add_ln161_437_reg_23800_pp0_iter8_reg);

assign sext_ln161_357_fu_14099_p1 = grp_fu_18196_p3;

assign sext_ln161_358_fu_14102_p1 = grp_fu_18205_p3;

assign sext_ln161_359_fu_15229_p1 = $signed(add_ln161_441_reg_24250);

assign sext_ln161_362_fu_15232_p1 = grp_fu_19088_p7;

assign sext_ln161_363_fu_15241_p1 = $signed(add_ln161_446_fu_15235_p2);

assign sext_ln161_366_fu_15251_p1 = add_ln161_449_reg_24255;

assign sext_ln161_367_fu_13137_p1 = grp_fu_17475_p3;

assign sext_ln161_368_fu_13140_p1 = grp_fu_17484_p3;

assign sext_ln161_369_fu_15259_p1 = $signed(add_ln161_453_reg_23825_pp0_iter8_reg);

assign sext_ln161_370_fu_14111_p1 = grp_fu_18222_p3;

assign sext_ln161_371_fu_14114_p1 = grp_fu_18231_p3;

assign sext_ln161_372_fu_15268_p1 = $signed(add_ln161_457_reg_24260);

assign sext_ln161_375_fu_15271_p1 = grp_fu_19114_p7;

assign sext_ln161_376_fu_15280_p1 = $signed(add_ln161_462_fu_15274_p2);

assign sext_ln161_379_fu_15290_p1 = add_ln161_465_reg_24265;

assign sext_ln161_37_fu_14377_p1 = grp_fu_18378_p7;

assign sext_ln161_380_fu_13164_p1 = grp_fu_17502_p3;

assign sext_ln161_381_fu_13167_p1 = grp_fu_17511_p3;

assign sext_ln161_382_fu_15298_p1 = $signed(add_ln161_469_reg_23850_pp0_iter8_reg);

assign sext_ln161_383_fu_14123_p1 = grp_fu_18248_p3;

assign sext_ln161_384_fu_14126_p1 = grp_fu_18257_p3;

assign sext_ln161_385_fu_15307_p1 = $signed(add_ln161_473_reg_24270);

assign sext_ln161_388_fu_15310_p1 = grp_fu_19140_p7;

assign sext_ln161_389_fu_15319_p1 = $signed(add_ln161_478_fu_15313_p2);

assign sext_ln161_38_fu_14386_p1 = $signed(add_ln161_46_fu_14380_p2);

assign sext_ln161_392_fu_15329_p1 = add_ln161_481_reg_24275;

assign sext_ln161_393_fu_13191_p1 = grp_fu_17529_p3;

assign sext_ln161_394_fu_13194_p1 = grp_fu_17538_p3;

assign sext_ln161_395_fu_15337_p1 = $signed(add_ln161_485_reg_23875_pp0_iter8_reg);

assign sext_ln161_396_fu_14135_p1 = grp_fu_18274_p3;

assign sext_ln161_397_fu_14138_p1 = grp_fu_18283_p3;

assign sext_ln161_398_fu_15346_p1 = $signed(add_ln161_489_reg_24280);

assign sext_ln161_3_fu_12381_p1 = grp_fu_16719_p3;

assign sext_ln161_401_fu_15349_p1 = grp_fu_19166_p7;

assign sext_ln161_402_fu_15358_p1 = $signed(add_ln161_494_fu_15352_p2);

assign sext_ln161_405_fu_15368_p1 = add_ln161_497_reg_24285;

assign sext_ln161_406_fu_13218_p1 = grp_fu_17556_p3;

assign sext_ln161_407_fu_13221_p1 = grp_fu_17565_p3;

assign sext_ln161_408_fu_15376_p1 = $signed(add_ln161_501_reg_23900_pp0_iter8_reg);

assign sext_ln161_409_fu_14147_p1 = grp_fu_18300_p3;

assign sext_ln161_410_fu_14150_p1 = grp_fu_18309_p3;

assign sext_ln161_411_fu_15385_p1 = $signed(add_ln161_505_reg_24290);

assign sext_ln161_414_fu_15388_p1 = grp_fu_19192_p7;

assign sext_ln161_415_fu_15397_p1 = $signed(add_ln161_510_fu_15391_p2);

assign sext_ln161_41_fu_14396_p1 = add_ln161_49_reg_24055;

assign sext_ln161_42_fu_12462_p1 = grp_fu_16800_p3;

assign sext_ln161_43_fu_12465_p1 = grp_fu_16809_p3;

assign sext_ln161_44_fu_14404_p1 = $signed(add_ln161_53_reg_23250_pp0_iter8_reg);

assign sext_ln161_45_fu_13811_p1 = grp_fu_17652_p3;

assign sext_ln161_46_fu_13814_p1 = grp_fu_17661_p3;

assign sext_ln161_47_fu_14413_p1 = $signed(add_ln161_57_reg_24060);

assign sext_ln161_4_fu_12384_p1 = grp_fu_16728_p3;

assign sext_ln161_50_fu_14416_p1 = grp_fu_18404_p7;

assign sext_ln161_51_fu_14425_p1 = $signed(add_ln161_62_fu_14419_p2);

assign sext_ln161_54_fu_14435_p1 = add_ln161_65_reg_24065;

assign sext_ln161_55_fu_12489_p1 = grp_fu_16827_p3;

assign sext_ln161_56_fu_12492_p1 = grp_fu_16836_p3;

assign sext_ln161_57_fu_14443_p1 = $signed(add_ln161_69_reg_23275_pp0_iter8_reg);

assign sext_ln161_58_fu_13823_p1 = grp_fu_17678_p3;

assign sext_ln161_59_fu_13826_p1 = grp_fu_17687_p3;

assign sext_ln161_5_fu_14287_p1 = $signed(add_ln161_5_reg_23175_pp0_iter8_reg);

assign sext_ln161_60_fu_14452_p1 = $signed(add_ln161_73_reg_24070);

assign sext_ln161_63_fu_14455_p1 = grp_fu_18430_p7;

assign sext_ln161_64_fu_14464_p1 = $signed(add_ln161_78_fu_14458_p2);

assign sext_ln161_67_fu_14474_p1 = add_ln161_81_reg_24075;

assign sext_ln161_68_fu_12516_p1 = grp_fu_16854_p3;

assign sext_ln161_69_fu_12519_p1 = grp_fu_16863_p3;

assign sext_ln161_6_fu_13775_p1 = grp_fu_17574_p3;

assign sext_ln161_70_fu_14482_p1 = $signed(add_ln161_85_reg_23300_pp0_iter8_reg);

assign sext_ln161_71_fu_13835_p1 = grp_fu_17704_p3;

assign sext_ln161_72_fu_13838_p1 = grp_fu_17713_p3;

assign sext_ln161_73_fu_14491_p1 = $signed(add_ln161_89_reg_24080);

assign sext_ln161_76_fu_14494_p1 = grp_fu_18456_p7;

assign sext_ln161_77_fu_14503_p1 = $signed(add_ln161_94_fu_14497_p2);

assign sext_ln161_7_fu_13778_p1 = grp_fu_17583_p3;

assign sext_ln161_80_fu_14513_p1 = add_ln161_97_reg_24085;

assign sext_ln161_81_fu_12543_p1 = grp_fu_16881_p3;

assign sext_ln161_82_fu_12546_p1 = grp_fu_16890_p3;

assign sext_ln161_83_fu_14521_p1 = $signed(add_ln161_101_reg_23325_pp0_iter8_reg);

assign sext_ln161_84_fu_13847_p1 = grp_fu_17730_p3;

assign sext_ln161_85_fu_13850_p1 = grp_fu_17739_p3;

assign sext_ln161_86_fu_14530_p1 = $signed(add_ln161_105_reg_24090);

assign sext_ln161_89_fu_14533_p1 = grp_fu_18482_p7;

assign sext_ln161_8_fu_14296_p1 = $signed(add_ln161_9_reg_24030);

assign sext_ln161_90_fu_14542_p1 = $signed(add_ln161_110_fu_14536_p2);

assign sext_ln161_93_fu_14552_p1 = add_ln161_113_reg_24095;

assign sext_ln161_94_fu_12570_p1 = grp_fu_16908_p3;

assign sext_ln161_95_fu_12573_p1 = grp_fu_16917_p3;

assign sext_ln161_96_fu_14560_p1 = $signed(add_ln161_117_reg_23350_pp0_iter8_reg);

assign sext_ln161_97_fu_13859_p1 = grp_fu_17756_p3;

assign sext_ln161_98_fu_13862_p1 = grp_fu_17765_p3;

assign sext_ln161_99_fu_14569_p1 = $signed(add_ln161_121_reg_24100);

assign sext_ln178_fu_15705_p1 = $signed(tmp_318_fu_15695_p4);

assign start_out = real_start;

assign sub_ln159_fu_2758_p2 = (tmp_32_fu_2740_p3 - zext_ln159_fu_2754_p1);

assign tmp_101_fu_3947_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[543:536]}};

assign tmp_106_fu_4009_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[583:576]}};

assign tmp_108_fu_4041_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[599:592]}};

assign tmp_10_fu_13466_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[251:231]}};

assign tmp_117_fu_4143_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[671:664]}};

assign tmp_11_fu_13475_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[272:252]}};

assign tmp_122_fu_4205_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[711:704]}};

assign tmp_124_fu_4237_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[727:720]}};

assign tmp_12_fu_13484_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[293:273]}};

assign tmp_133_fu_4339_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[799:792]}};

assign tmp_138_fu_4401_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[839:832]}};

assign tmp_13_fu_13493_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[314:294]}};

assign tmp_140_fu_4433_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[855:848]}};

assign tmp_149_fu_4535_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[927:920]}};

assign tmp_14_fu_13502_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[335:315]}};

assign tmp_154_fu_4597_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[967:960]}};

assign tmp_156_fu_4629_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[983:976]}};

assign tmp_165_fu_4731_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1055:1048]}};

assign tmp_170_fu_4793_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1095:1088]}};

assign tmp_172_fu_4825_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1111:1104]}};

assign tmp_181_fu_4927_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1183:1176]}};

assign tmp_186_fu_4989_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1223:1216]}};

assign tmp_188_fu_5021_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1239:1232]}};

assign tmp_197_fu_5123_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1311:1304]}};

assign tmp_1_fu_13376_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[41:21]}};

assign tmp_202_fu_5185_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1351:1344]}};

assign tmp_204_fu_5217_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1367:1360]}};

assign tmp_213_fu_5319_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1439:1432]}};

assign tmp_218_fu_5381_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1479:1472]}};

assign tmp_220_fu_5413_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1495:1488]}};

assign tmp_229_fu_5515_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1567:1560]}};

assign tmp_234_fu_5577_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1607:1600]}};

assign tmp_236_fu_5609_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1623:1616]}};

assign tmp_245_fu_5711_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1695:1688]}};

assign tmp_250_fu_5773_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1735:1728]}};

assign tmp_252_fu_5805_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1751:1744]}};

assign tmp_261_fu_5907_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1823:1816]}};

assign tmp_266_fu_5969_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1863:1856]}};

assign tmp_268_fu_6001_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1879:1872]}};

assign tmp_277_fu_6103_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1951:1944]}};

assign tmp_282_fu_6165_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[1991:1984]}};

assign tmp_284_fu_6197_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[2007:2000]}};

assign tmp_287_fu_15555_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[41:21]}};

assign tmp_288_fu_15565_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[62:42]}};

assign tmp_289_fu_15575_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[83:63]}};

assign tmp_290_fu_15585_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[104:84]}};

assign tmp_291_fu_15595_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[125:105]}};

assign tmp_292_fu_15605_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[146:126]}};

assign tmp_293_fu_15615_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[167:147]}};

assign tmp_294_fu_15625_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[188:168]}};

assign tmp_295_fu_15635_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[209:189]}};

assign tmp_296_fu_15645_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[230:210]}};

assign tmp_297_fu_15655_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[251:231]}};

assign tmp_298_fu_15665_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[272:252]}};

assign tmp_299_fu_15675_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[293:273]}};

assign tmp_2_fu_13385_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[62:42]}};

assign tmp_300_fu_15685_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[314:294]}};

assign tmp_302_fu_16497_p4 = {{add_ln188_2_fu_16177_p2[20:8]}};

assign tmp_304_fu_16507_p4 = {{add_ln188_3_fu_16182_p2[20:8]}};

assign tmp_305_fu_16517_p4 = {{add_ln188_4_fu_16187_p2[20:8]}};

assign tmp_306_fu_16527_p4 = {{add_ln188_5_fu_16192_p2[20:8]}};

assign tmp_307_fu_16537_p4 = {{add_ln188_6_fu_16197_p2[20:8]}};

assign tmp_308_fu_16547_p4 = {{add_ln188_7_fu_16202_p2[20:8]}};

assign tmp_309_fu_16557_p4 = {{add_ln188_8_fu_16207_p2[20:8]}};

assign tmp_30_fu_6677_p3 = {{select_ln126_1_reg_19609}, {4'd0}};

assign tmp_310_fu_16567_p4 = {{add_ln188_9_fu_16212_p2[20:8]}};

assign tmp_311_fu_16577_p4 = {{add_ln188_10_fu_16217_p2[20:8]}};

assign tmp_312_fu_16587_p4 = {{add_ln188_11_fu_16222_p2[20:8]}};

assign tmp_313_fu_16597_p4 = {{add_ln188_12_fu_16227_p2[20:8]}};

assign tmp_314_fu_16607_p4 = {{add_ln188_13_fu_16232_p2[20:8]}};

assign tmp_315_fu_16617_p4 = {{add_ln188_14_fu_16237_p2[20:8]}};

assign tmp_316_fu_16627_p4 = {{add_ln188_15_fu_16242_p2[20:8]}};

assign tmp_317_cast_fu_6691_p1 = tmp_31_fu_6684_p3;

assign tmp_318_fu_15695_p4 = {{PATCH_EMBED_INST_cls_arr_20_q0[330:315]}};

assign tmp_319_fu_16327_p4 = {{add_ln188_1_fu_16172_p2[20:8]}};

assign tmp_31_fu_6684_p3 = {{select_ln126_1_reg_19609}, {2'd0}};

assign tmp_32_fu_2740_p3 = {{select_ln127_1_reg_19556}, {6'd0}};

assign tmp_33_fu_2747_p3 = {{select_ln127_1_reg_19556}, {4'd0}};

assign tmp_37_fu_3151_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[31:24]}};

assign tmp_3_fu_13394_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[83:63]}};

assign tmp_42_fu_3217_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[71:64]}};

assign tmp_44_fu_3253_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[87:80]}};

assign tmp_4_fu_13403_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[104:84]}};

assign tmp_53_fu_3359_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[159:152]}};

assign tmp_58_fu_3421_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[199:192]}};

assign tmp_5_fu_13412_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[125:105]}};

assign tmp_60_fu_3453_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[215:208]}};

assign tmp_69_fu_3555_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[287:280]}};

assign tmp_6_fu_13421_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[146:126]}};

assign tmp_74_fu_3617_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[327:320]}};

assign tmp_76_fu_3649_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[343:336]}};

assign tmp_7_fu_13430_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[167:147]}};

assign tmp_85_fu_3751_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[415:408]}};

assign tmp_8_fu_13439_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[188:168]}};

assign tmp_90_fu_3813_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[455:448]}};

assign tmp_92_fu_3845_p4 = {{PATCH_EMBED_INST_weight_arr_18_q0[471:464]}};

assign tmp_9_fu_13448_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[209:189]}};

assign tmp_s_fu_13457_p4 = {{PATCH_EMBED_INST_bias_arr_19_load_reg_23060[230:210]}};

assign trunc_ln142_fu_13373_p1 = PATCH_EMBED_INST_bias_arr_19_load_reg_23060[20:0];

assign trunc_ln149_18_fu_2997_p4 = {{cache_window_sm_dout[159:152]}};

assign trunc_ln149_23_fu_3047_p4 = {{cache_window_sm_dout[199:192]}};

assign trunc_ln149_25_fu_3067_p4 = {{cache_window_sm_dout[215:208]}};

assign trunc_ln149_3_fu_2837_p4 = {{cache_window_sm_dout[31:24]}};

assign trunc_ln149_8_fu_2887_p4 = {{cache_window_sm_dout[71:64]}};

assign trunc_ln149_fu_2813_p1 = cache_window_sm_dout[7:0];

assign trunc_ln149_s_fu_2907_p4 = {{cache_window_sm_dout[87:80]}};

assign trunc_ln159_fu_3127_p1 = PATCH_EMBED_INST_weight_arr_18_q0[7:0];

assign trunc_ln178_fu_15551_p1 = PATCH_EMBED_INST_cls_arr_20_q0[20:0];

assign trunc_ln191_10_fu_16437_p4 = {{add_ln188_26_fu_16297_p2[20:8]}};

assign trunc_ln191_11_fu_16447_p4 = {{add_ln188_27_fu_16302_p2[20:8]}};

assign trunc_ln191_12_fu_16457_p4 = {{add_ln188_28_fu_16307_p2[20:8]}};

assign trunc_ln191_13_fu_16467_p4 = {{add_ln188_29_fu_16312_p2[20:8]}};

assign trunc_ln191_14_fu_16477_p4 = {{add_ln188_30_fu_16317_p2[20:8]}};

assign trunc_ln191_15_fu_16487_p4 = {{add_ln188_31_fu_16322_p2[20:8]}};

assign trunc_ln191_1_fu_16337_p4 = {{add_ln188_16_fu_16247_p2[20:8]}};

assign trunc_ln191_2_fu_16347_p4 = {{add_ln188_17_fu_16252_p2[20:8]}};

assign trunc_ln191_3_fu_16357_p4 = {{add_ln188_18_fu_16257_p2[20:8]}};

assign trunc_ln191_4_fu_16367_p4 = {{add_ln188_19_fu_16262_p2[20:8]}};

assign trunc_ln191_5_fu_16377_p4 = {{add_ln188_20_fu_16267_p2[20:8]}};

assign trunc_ln191_6_fu_16387_p4 = {{add_ln188_21_fu_16272_p2[20:8]}};

assign trunc_ln191_7_fu_16397_p4 = {{add_ln188_22_fu_16277_p2[20:8]}};

assign trunc_ln191_8_fu_16407_p4 = {{add_ln188_23_fu_16282_p2[20:8]}};

assign trunc_ln191_9_fu_16417_p4 = {{add_ln188_24_fu_16287_p2[20:8]}};

assign trunc_ln191_s_fu_16427_p4 = {{add_ln188_25_fu_16292_p2[20:8]}};

assign trunc_ln1_fu_16162_p4 = {{add_ln188_fu_16157_p2[20:8]}};

assign xor_ln126_fu_2626_p2 = (icmp_ln127_fu_2612_p2 ^ 1'd1);

assign zext_ln127_fu_13365_p1 = select_ln127_1_reg_19556_pp0_iter7_reg;

assign zext_ln159_1_fu_2764_p1 = select_ln127_reg_19549;

assign zext_ln159_2_fu_2773_p1 = add_ln159_fu_2767_p2;

assign zext_ln159_fu_2754_p1 = tmp_33_fu_2747_p3;

endmodule //PATCH_EMBED_step2_mac_replace_shift
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_bias_arr_19_ROM_1P_BRAM_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 668;
parameter AddressWidth = 11;
parameter AddressRange = 1176;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
(* rom_style = "block" *)reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/PATCH_EMBED/PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_bias_arr_19_ROM_1P_BRAM_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_cls_arr_20_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 331;
parameter AddressWidth = 4;
parameter AddressRange = 12;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/PATCH_EMBED/PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_cls_arr_20_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_weight_arr_18_RAM_1P_URAM_3R2W (
     address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 2048;
parameter AddressWidth = 10;
parameter AddressRange = 576;
 
input[AddressWidth-1:0] address0;
input ce0;
output wire[DataWidth-1:0] q0;

input reset;
input clk;

 
(* rom_style = "hls_ultra" *)reg [DataWidth-1:0] rom0[0:AddressRange-1];


  
wire [AddressWidth-1:0] address0_t0;
wire ce0_t0;
reg [AddressWidth-1:0] address0_t1;

reg [DataWidth-1:0] q0_t0;
reg [DataWidth-1:0] q0_t1;

initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/PATCH_EMBED/PATCH_EMBED_step2_mac_replace_shift_PATCH_EMBED_INST_weight_arr_18_RAM_1P_URAM_3R2W.dat", rom0);
end

 
assign address0_t0 = address0;

assign q0 = q0_t1; 

always @(posedge clk)  
begin
 
    if (ce0) 
    begin
        address0_t1 <= address0_t0; 
        q0_t1 <= q0_t0;
    end

end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0_t0 <= rom0[address0_t1];
    end
end


endmodule

