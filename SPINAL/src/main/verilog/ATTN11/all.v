/* verilator lint_off PINMISSING */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ATTN11_ATTN11,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-2MP-e-S,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.022000,HLS_SYN_LAT=57682,HLS_SYN_TPT=57634,HLS_SYN_MEM=119,HLS_SYN_DSP=0,HLS_SYN_FF=40524,HLS_SYN_LUT=78045,HLS_VERSION=2023_2}" *)

module ATTN11 (
        i_stream_TDATA,
        o_stream_TDATA,
        ap_clk,
        ap_rst_n,
        i_stream_TVALID,
        i_stream_TREADY,
        o_stream_TVALID,
        o_stream_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_TDATA;
output  [31:0] o_stream_TDATA;
input   ap_clk;
input   ap_rst_n;
input   i_stream_TVALID;
output   i_stream_TREADY;
output   o_stream_TVALID;
input   o_stream_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [31:0] do_attn_U0_o_stream_TDATA;
 reg    ap_rst_n_inv;
wire    do_attn_U0_i_stream_TREADY;
wire    do_attn_U0_ap_start;
wire    do_attn_U0_o_stream_TVALID;
wire    do_attn_U0_ap_done;
wire    do_attn_U0_ap_ready;
wire    do_attn_U0_ap_idle;
wire    do_attn_U0_ap_continue;

ATTN11_do_attn do_attn_U0(
    .i_stream_TDATA(i_stream_TDATA),
    .o_stream_TDATA(do_attn_U0_o_stream_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .i_stream_TVALID(i_stream_TVALID),
    .i_stream_TREADY(do_attn_U0_i_stream_TREADY),
    .ap_start(do_attn_U0_ap_start),
    .o_stream_TVALID(do_attn_U0_o_stream_TVALID),
    .o_stream_TREADY(o_stream_TREADY),
    .ap_done(do_attn_U0_ap_done),
    .ap_ready(do_attn_U0_ap_ready),
    .ap_idle(do_attn_U0_ap_idle),
    .ap_continue(do_attn_U0_ap_continue)
);

assign ap_done = do_attn_U0_ap_done;

assign ap_idle = do_attn_U0_ap_idle;

assign ap_ready = do_attn_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign do_attn_U0_ap_continue = ap_continue;

assign do_attn_U0_ap_start = ap_start;

assign i_stream_TREADY = do_attn_U0_i_stream_TREADY;

assign o_stream_TDATA = do_attn_U0_o_stream_TDATA;

assign o_stream_TVALID = do_attn_U0_o_stream_TVALID;

endmodule //ATTN11
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rq_sm_head3_dout,
        rq_sm_head3_num_data_valid,
        rq_sm_head3_fifo_cap,
        rq_sm_head3_empty_n,
        rq_sm_head3_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] rq_sm_head3_dout;
input  [9:0] rq_sm_head3_num_data_valid;
input  [9:0] rq_sm_head3_fifo_cap;
input   rq_sm_head3_empty_n;
output   rq_sm_head3_read;
output  [41:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg rq_sm_head3_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_329_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_reg_971;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    rq_sm_head3_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
wire   [0:0] or_ln79_fu_365_p2;
reg   [0:0] or_ln79_reg_941;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln86_fu_373_p1;
reg   [2:0] trunc_ln86_reg_957;
reg   [2:0] trunc_ln86_3_reg_964;
wire   [0:0] icmp_ln83_fu_401_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_22_fu_393_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12189_fu_62;
wire   [2:0] select_ln79_106_fu_599_p3;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12189_load;
reg   [2:0] p_0_0_01_291_fu_66;
wire   [2:0] select_ln79_105_fu_592_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_291_load;
reg   [2:0] p_0_0_01_393_fu_70;
wire   [2:0] select_ln79_104_fu_585_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_393_load;
reg   [2:0] p_0_0_01_495_fu_74;
wire   [2:0] select_ln79_103_fu_578_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_495_load;
reg   [2:0] p_0_0_01_597_fu_78;
wire   [2:0] select_ln79_102_fu_571_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_597_load;
reg   [2:0] p_0_0_0_0_0_099_fu_82;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_099_load;
reg   [2:0] p_0_0_01_1_1101_fu_86;
wire   [2:0] select_ln79_100_fu_557_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_1101_load;
reg   [2:0] p_0_0_01_1_2103_fu_90;
wire   [2:0] select_ln79_99_fu_550_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_2103_load;
reg   [2:0] p_0_0_01_1_3105_fu_94;
wire   [2:0] select_ln79_98_fu_543_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_3105_load;
reg   [2:0] p_0_0_01_1_4107_fu_98;
wire   [2:0] select_ln79_97_fu_536_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_4107_load;
reg   [2:0] p_0_0_01_1_5109_fu_102;
wire   [2:0] select_ln79_fu_529_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_5109_load;
reg   [2:0] p_0_0_1_0_0_0111_fu_106;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_0111_load;
reg   [7:0] indvar_flatten_fu_110;
wire   [7:0] select_ln79_108_fu_413_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten24_fu_114;
wire   [14:0] add_ln78_fu_323_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten24_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_341_p2;
wire   [0:0] icmp_ln8342_fu_353_p2;
wire   [0:0] xor_ln78_fu_347_p2;
wire   [0:0] and_ln78_fu_359_p2;
wire   [2:0] add_ln83_fu_387_p2;
wire   [7:0] add_ln79_fu_407_p2;
wire   [2:0] select_ln79_101_fu_564_p3;
wire   [2:0] select_ln79_107_fu_606_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_136;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12189_fu_62 = 3'd0;
//#0 p_0_0_01_291_fu_66 = 3'd0;
//#0 p_0_0_01_393_fu_70 = 3'd0;
//#0 p_0_0_01_495_fu_74 = 3'd0;
//#0 p_0_0_01_597_fu_78 = 3'd0;
//#0 p_0_0_0_0_0_099_fu_82 = 3'd0;
//#0 p_0_0_01_1_1101_fu_86 = 3'd0;
//#0 p_0_0_01_1_2103_fu_90 = 3'd0;
//#0 p_0_0_01_1_3105_fu_94 = 3'd0;
//#0 p_0_0_01_1_4107_fu_98 = 3'd0;
//#0 p_0_0_01_1_5109_fu_102 = 3'd0;
//#0 p_0_0_1_0_0_0111_fu_106 = 3'd0;
//#0 indvar_flatten_fu_110 = 8'd0;
//#0 indvar_flatten24_fu_114 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
            indvar_flatten24_fu_114 <= add_ln78_fu_323_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten24_fu_114 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
            indvar_flatten_fu_110 <= select_ln79_108_fu_413_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_110 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        p_0_0_01_12189_fu_62 <= select_ln79_106_fu_599_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_1101_fu_86 <= select_ln79_100_fu_557_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_2103_fu_90 <= select_ln79_99_fu_550_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_3105_fu_94 <= select_ln79_98_fu_543_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_4107_fu_98 <= select_ln79_97_fu_536_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_5109_fu_102 <= select_ln79_fu_529_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_291_fu_66 <= select_ln79_105_fu_592_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_393_fu_70 <= select_ln79_104_fu_585_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_495_fu_74 <= select_ln79_103_fu_578_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_597_fu_78 <= select_ln79_102_fu_571_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_0_0_0_099_fu_82 <= trunc_ln86_reg_957;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_1_0_0_0111_fu_106 <= trunc_ln86_3_reg_964;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_124)) begin
    if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
        t_fu_58 <= t_22_fu_393_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        t_fu_58 <= 3'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln83_reg_971 <= icmp_ln83_fu_401_p2;
        or_ln79_reg_941 <= or_ln79_fu_365_p2;
        trunc_ln86_3_reg_964 <= {{rq_sm_head3_dout[5:3]}};
        trunc_ln86_reg_957 <= trunc_ln86_fu_373_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_reg_971 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_reg_971 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_329_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten24_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten24_load = indvar_flatten24_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12189_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12189_load = p_0_0_01_12189_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_1101_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_1101_load = p_0_0_01_1_1101_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_2103_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_2103_load = p_0_0_01_1_2103_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_3105_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_3105_load = p_0_0_01_1_3105_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_4107_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_4107_load = p_0_0_01_1_4107_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_5109_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_5109_load = p_0_0_01_1_5109_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_291_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_291_load = p_0_0_01_291_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_393_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_393_load = p_0_0_01_393_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_495_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_495_load = p_0_0_01_495_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_597_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_597_load = p_0_0_01_597_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_099_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_099_load = p_0_0_0_0_0_099_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_0111_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_0111_load = p_0_0_1_0_0_0111_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_329_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head3_blk_n = rq_sm_head3_empty_n;
    end else begin
        rq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_329_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head3_read = 1'b1;
    end else begin
        rq_sm_head3_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_323_p2 = (ap_sig_allocacmp_indvar_flatten24_load + 15'd1);

assign add_ln79_fu_407_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln83_fu_387_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{{{{{{{trunc_ln86_3_reg_964}, {select_ln79_fu_529_p3}}, {select_ln79_97_fu_536_p3}}, {select_ln79_98_fu_543_p3}}, {select_ln79_99_fu_550_p3}}, {select_ln79_100_fu_557_p3}}, {select_ln79_101_fu_564_p3}}, {trunc_ln86_reg_957}}, {select_ln79_102_fu_571_p3}}, {select_ln79_103_fu_578_p3}}, {select_ln79_104_fu_585_p3}}, {select_ln79_105_fu_592_p3}}, {select_ln79_106_fu_599_p3}}, {select_ln79_107_fu_606_p3}};

assign and_ln78_fu_359_p2 = (xor_ln78_fu_347_p2 & icmp_ln8342_fu_353_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_329_p2 == 1'd0) & (rq_sm_head3_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln83_reg_971 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_124 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_136 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_329_p2 = ((ap_sig_allocacmp_indvar_flatten24_load == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_341_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln8342_fu_353_p2 = ((ap_sig_allocacmp_t_load == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_401_p2 = ((t_22_fu_393_p3 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln79_fu_365_p2 = (icmp_ln79_fu_341_p2 | and_ln78_fu_359_p2);

assign select_ln79_100_fu_557_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_2103_load);

assign select_ln79_101_fu_564_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_1101_load);

assign select_ln79_102_fu_571_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_099_load);

assign select_ln79_103_fu_578_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_597_load);

assign select_ln79_104_fu_585_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_495_load);

assign select_ln79_105_fu_592_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_393_load);

assign select_ln79_106_fu_599_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_291_load);

assign select_ln79_107_fu_606_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12189_load);

assign select_ln79_108_fu_413_p3 = ((icmp_ln79_fu_341_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_407_p2);

assign select_ln79_97_fu_536_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_5109_load);

assign select_ln79_98_fu_543_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_4107_load);

assign select_ln79_99_fu_550_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_3105_load);

assign select_ln79_fu_529_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_0111_load);

assign start_out = real_start;

assign t_22_fu_393_p3 = ((or_ln79_fu_365_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_387_p2);

assign trunc_ln86_fu_373_p1 = rq_sm_head3_dout[2:0];

assign xor_ln78_fu_347_p2 = (icmp_ln79_fu_341_p2 ^ 1'd1);

endmodule //ATTN11_do_adapt
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qq_sm_head3_dout,
        qq_sm_head3_num_data_valid,
        qq_sm_head3_fifo_cap,
        qq_sm_head3_empty_n,
        qq_sm_head3_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] qq_sm_head3_dout;
input  [13:0] qq_sm_head3_num_data_valid;
input  [13:0] qq_sm_head3_fifo_cap;
input   qq_sm_head3_empty_n;
output   qq_sm_head3_read;
output  [23:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg qq_sm_head3_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_233_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_7_reg_647;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    qq_sm_head3_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
wire   [0:0] or_ln79_fu_269_p2;
reg   [0:0] or_ln79_reg_623;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln86_fu_277_p1;
reg   [2:0] trunc_ln86_reg_633;
reg   [2:0] trunc_ln86_6_reg_640;
wire   [0:0] icmp_ln83_7_fu_305_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_21_fu_297_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12165_fu_62;
wire   [2:0] select_ln79_94_fu_425_p3;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12165_load;
reg   [2:0] p_0_0_01_267_fu_66;
wire   [2:0] select_ln79_93_fu_418_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_267_load;
reg   [2:0] p_0_0_0_0_0_069_fu_70;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_069_load;
reg   [2:0] p_0_0_01_1_171_fu_74;
wire   [2:0] select_ln79_91_fu_404_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_171_load;
reg   [2:0] p_0_0_01_1_273_fu_78;
wire   [2:0] select_ln79_fu_397_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_273_load;
reg   [2:0] p_0_0_1_0_0_075_fu_82;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_075_load;
reg   [7:0] indvar_flatten_fu_86;
wire   [7:0] select_ln79_96_fu_317_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [12:0] indvar_flatten18_fu_90;
wire   [12:0] add_ln78_fu_227_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_245_p2;
wire   [0:0] icmp_ln83_fu_257_p2;
wire   [0:0] xor_ln78_fu_251_p2;
wire   [0:0] and_ln78_fu_263_p2;
wire   [2:0] add_ln83_fu_291_p2;
wire   [7:0] add_ln79_fu_311_p2;
wire   [2:0] select_ln79_92_fu_411_p3;
wire   [2:0] select_ln79_95_fu_432_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_136;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12165_fu_62 = 3'd0;
//#0 p_0_0_01_267_fu_66 = 3'd0;
//#0 p_0_0_0_0_0_069_fu_70 = 3'd0;
//#0 p_0_0_01_1_171_fu_74 = 3'd0;
//#0 p_0_0_01_1_273_fu_78 = 3'd0;
//#0 p_0_0_1_0_0_075_fu_82 = 3'd0;
//#0 indvar_flatten_fu_86 = 8'd0;
//#0 indvar_flatten18_fu_90 = 13'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
            indvar_flatten18_fu_90 <= add_ln78_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_90 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
            indvar_flatten_fu_86 <= select_ln79_96_fu_317_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        p_0_0_01_12165_fu_62 <= select_ln79_94_fu_425_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_171_fu_74 <= select_ln79_91_fu_404_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_273_fu_78 <= select_ln79_fu_397_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_267_fu_66 <= select_ln79_93_fu_418_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_0_0_0_069_fu_70 <= trunc_ln86_reg_633;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_1_0_0_075_fu_82 <= trunc_ln86_6_reg_640;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_124)) begin
    if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
        t_fu_58 <= t_21_fu_297_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        t_fu_58 <= 3'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln83_7_reg_647 <= icmp_ln83_7_fu_305_p2;
        or_ln79_reg_623 <= or_ln79_fu_269_p2;
        trunc_ln86_6_reg_640 <= {{qq_sm_head3_dout[5:3]}};
        trunc_ln86_reg_633 <= trunc_ln86_fu_277_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_7_reg_647 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_7_reg_647 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_233_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12165_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12165_load = p_0_0_01_12165_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_171_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_171_load = p_0_0_01_1_171_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_273_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_273_load = p_0_0_01_1_273_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_267_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_267_load = p_0_0_01_267_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_069_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_069_load = p_0_0_0_0_0_069_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_075_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_075_load = p_0_0_1_0_0_075_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_233_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head3_blk_n = qq_sm_head3_empty_n;
    end else begin
        qq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_233_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head3_read = 1'b1;
    end else begin
        qq_sm_head3_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_227_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 13'd1);

assign add_ln79_fu_311_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln83_fu_291_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{trunc_ln86_6_reg_640}, {select_ln79_fu_397_p3}}, {select_ln79_91_fu_404_p3}}, {select_ln79_92_fu_411_p3}}, {trunc_ln86_reg_633}}, {select_ln79_93_fu_418_p3}}, {select_ln79_94_fu_425_p3}}, {select_ln79_95_fu_432_p3}};

assign and_ln78_fu_263_p2 = (xor_ln78_fu_251_p2 & icmp_ln83_fu_257_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_233_p2 == 1'd0) & (qq_sm_head3_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln83_7_reg_647 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_124 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_136 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_233_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_245_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln83_7_fu_305_p2 = ((t_21_fu_297_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_257_p2 = ((ap_sig_allocacmp_t_load == 3'd4) ? 1'b1 : 1'b0);

assign or_ln79_fu_269_p2 = (icmp_ln79_fu_245_p2 | and_ln78_fu_263_p2);

assign select_ln79_91_fu_404_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_273_load);

assign select_ln79_92_fu_411_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_171_load);

assign select_ln79_93_fu_418_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_069_load);

assign select_ln79_94_fu_425_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_267_load);

assign select_ln79_95_fu_432_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12165_load);

assign select_ln79_96_fu_317_p3 = ((icmp_ln79_fu_245_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_311_p2);

assign select_ln79_fu_397_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_075_load);

assign start_out = real_start;

assign t_21_fu_297_p3 = ((or_ln79_fu_269_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_291_p2);

assign trunc_ln86_fu_277_p1 = qq_sm_head3_dout[2:0];

assign xor_ln78_fu_251_p2 = (icmp_ln79_fu_245_p2 ^ 1'd1);

endmodule //ATTN11_do_adapt_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        v_sm_din,
        v_sm_num_data_valid,
        v_sm_fifo_cap,
        v_sm_full_n,
        v_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [239:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] v_sm_din;
input  [2:0] v_sm_num_data_valid;
input  [2:0] v_sm_fifo_cap;
input   v_sm_full_n;
output   v_sm_write;

reg ap_idle;
reg mac_sm_read;
reg v_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_1546;
reg   [0:0] icmp_ln45_reg_1546_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1556;
reg    ap_predicate_op122_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_543_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    v_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_549_p2;
reg   [0:0] icmp_ln46_reg_1550;
wire   [0:0] icmp_ln50_fu_629_p2;
wire   [9:0] trunc_ln50_fu_807_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_274_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_271;
reg   [9:0] ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
reg   [9:0] ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
reg   [9:0] ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
reg   [9:0] ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
reg   [9:0] ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
reg   [9:0] ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
reg   [9:0] ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
reg   [9:0] ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
reg   [9:0] ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
reg   [9:0] ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
reg   [9:0] ap_phi_mux_empty_1251_phi_fu_374_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1251_reg_371;
reg   [9:0] ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
reg   [9:0] ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
reg   [9:0] ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
reg   [9:0] ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
reg   [9:0] ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
reg   [9:0] ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
reg   [9:0] ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
reg   [9:0] ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
reg   [9:0] ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
reg   [9:0] ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480;
reg   [3:0] t_fu_158;
wire   [3:0] t_20_fu_635_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [3:0] ap_sig_allocacmp_t_load;
reg   [8:0] indvar_flatten_fu_162;
wire   [8:0] select_ln46_11_fu_561_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten54_fu_166;
wire   [14:0] add_ln45_fu_537_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten54_load;
reg   [9:0] p_0_0_0134_fu_170;
reg   [9:0] p_0_0_0_126136_fu_174;
reg   [9:0] p_0_0_0_2138_fu_178;
reg   [9:0] p_0_0_0_3140_fu_182;
reg   [9:0] p_0_0_0_4142_fu_186;
reg   [9:0] p_0_0_0_5144_fu_190;
reg   [9:0] p_0_0_0_6146_fu_194;
reg   [9:0] p_0_0_0_7148_fu_198;
reg   [9:0] p_0_0_0_8150_fu_202;
reg   [9:0] p_0_0_0_9152_fu_206;
reg   [9:0] p_0_0_0_10154_fu_210;
reg   [9:0] p_0_0_0_1156_fu_214;
reg   [9:0] p_0_0_0_1_1158_fu_218;
reg   [9:0] p_0_0_0_1_2160_fu_222;
reg   [9:0] p_0_0_0_1_3162_fu_226;
reg   [9:0] p_0_0_0_1_4164_fu_230;
reg   [9:0] p_0_0_0_1_5166_fu_234;
reg   [9:0] p_0_0_0_1_6168_fu_238;
reg   [9:0] p_0_0_0_1_7170_fu_242;
reg   [9:0] p_0_0_0_1_8172_fu_246;
reg   [9:0] p_0_0_0_1_9174_fu_250;
reg   [9:0] p_0_0_0_1_10176_fu_254;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln46_fu_555_p2;
wire   [0:0] icmp_ln47_fu_604_p2;
wire   [0:0] xor_ln45_fu_599_p2;
wire   [0:0] and_ln45_fu_610_p2;
wire   [0:0] or_ln46_fu_616_p2;
wire   [3:0] select_ln46_fu_621_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_336;
reg    ap_condition_340;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_158 = 4'd0;
//#0 indvar_flatten_fu_162 = 9'd0;
//#0 indvar_flatten54_fu_166 = 15'd0;
//#0 p_0_0_0134_fu_170 = 10'd0;
//#0 p_0_0_0_126136_fu_174 = 10'd0;
//#0 p_0_0_0_2138_fu_178 = 10'd0;
//#0 p_0_0_0_3140_fu_182 = 10'd0;
//#0 p_0_0_0_4142_fu_186 = 10'd0;
//#0 p_0_0_0_5144_fu_190 = 10'd0;
//#0 p_0_0_0_6146_fu_194 = 10'd0;
//#0 p_0_0_0_7148_fu_198 = 10'd0;
//#0 p_0_0_0_8150_fu_202 = 10'd0;
//#0 p_0_0_0_9152_fu_206 = 10'd0;
//#0 p_0_0_0_10154_fu_210 = 10'd0;
//#0 p_0_0_0_1156_fu_214 = 10'd0;
//#0 p_0_0_0_1_1158_fu_218 = 10'd0;
//#0 p_0_0_0_1_2160_fu_222 = 10'd0;
//#0 p_0_0_0_1_3162_fu_226 = 10'd0;
//#0 p_0_0_0_1_4164_fu_230 = 10'd0;
//#0 p_0_0_0_1_5166_fu_234 = 10'd0;
//#0 p_0_0_0_1_6168_fu_238 = 10'd0;
//#0 p_0_0_0_1_7170_fu_242 = 10'd0;
//#0 p_0_0_0_1_8172_fu_246 = 10'd0;
//#0 p_0_0_0_1_9174_fu_250 = 10'd0;
//#0 p_0_0_0_1_10176_fu_254 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1556 == 1'd0) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= p_0_0_0134_fu_170;
        end else if (((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= trunc_ln50_fu_807_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1556 == 1'd0) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= p_0_0_0_1156_fu_214;
        end else if (((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= {{mac_sm_dout[129:120]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_336)) begin
        if ((icmp_ln45_fu_543_p2 == 1'd0)) begin
            indvar_flatten54_fu_166 <= add_ln45_fu_537_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten54_fu_166 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_336)) begin
        if ((icmp_ln45_fu_543_p2 == 1'd0)) begin
            indvar_flatten_fu_162 <= select_ln46_11_fu_561_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_162 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_340)) begin
        if ((icmp_ln45_reg_1546 == 1'd0)) begin
            t_fu_158 <= t_20_fu_635_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_158 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_1546 <= icmp_ln45_fu_543_p2;
        icmp_ln45_reg_1546_pp0_iter1_reg <= icmp_ln45_reg_1546;
        icmp_ln46_reg_1550 <= icmp_ln46_fu_549_p2;
        icmp_ln50_reg_1556 <= icmp_ln50_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480;
        ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480;
        ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_0134_fu_170 <= ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4;
        p_0_0_0_10154_fu_210 <= ap_phi_mux_empty_1251_phi_fu_374_p4;
        p_0_0_0_1156_fu_214 <= ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4;
        p_0_0_0_126136_fu_174 <= ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4;
        p_0_0_0_1_10176_fu_254 <= ap_phi_mux_empty_phi_fu_274_p4;
        p_0_0_0_1_1158_fu_218 <= ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4;
        p_0_0_0_1_2160_fu_222 <= ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4;
        p_0_0_0_1_3162_fu_226 <= ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4;
        p_0_0_0_1_4164_fu_230 <= ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4;
        p_0_0_0_1_5166_fu_234 <= ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4;
        p_0_0_0_1_6168_fu_238 <= ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4;
        p_0_0_0_1_7170_fu_242 <= ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4;
        p_0_0_0_1_8172_fu_246 <= ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4;
        p_0_0_0_1_9174_fu_250 <= ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4;
        p_0_0_0_2138_fu_178 <= ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4;
        p_0_0_0_3140_fu_182 <= ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4;
        p_0_0_0_4142_fu_186 <= ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4;
        p_0_0_0_5144_fu_190 <= ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4;
        p_0_0_0_6146_fu_194 <= ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4;
        p_0_0_0_7148_fu_198 <= ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4;
        p_0_0_0_8150_fu_202 <= ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4;
        p_0_0_0_9152_fu_206 <= ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_543_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_empty_1251_phi_fu_374_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_empty_1251_phi_fu_374_p4 = {{mac_sm_dout[119:110]}};
        end else begin
            ap_phi_mux_empty_1251_phi_fu_374_p4 = ap_phi_reg_pp0_iter2_empty_1251_reg_371;
        end
    end else begin
        ap_phi_mux_empty_1251_phi_fu_374_p4 = ap_phi_reg_pp0_iter2_empty_1251_reg_371;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_274_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_274_p4 = {{mac_sm_dout[239:230]}};
        end else begin
            ap_phi_mux_empty_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_reg_271;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_reg_271;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = p_0_0_0_10154_fu_210;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = {{mac_sm_dout[109:100]}};
        end else begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
        end
    end else begin
        ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = p_0_0_0_126136_fu_174;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
        end
    end else begin
        ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = p_0_0_0_1_10176_fu_254;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = {{mac_sm_dout[229:220]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = p_0_0_0_1_1158_fu_218;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = {{mac_sm_dout[139:130]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = p_0_0_0_1_2160_fu_222;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = {{mac_sm_dout[149:140]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = p_0_0_0_1_3162_fu_226;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = {{mac_sm_dout[159:150]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = p_0_0_0_1_4164_fu_230;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = {{mac_sm_dout[169:160]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = p_0_0_0_1_5166_fu_234;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = {{mac_sm_dout[179:170]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = p_0_0_0_1_6168_fu_238;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = {{mac_sm_dout[189:180]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = p_0_0_0_1_7170_fu_242;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = {{mac_sm_dout[199:190]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = p_0_0_0_1_8172_fu_246;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = {{mac_sm_dout[209:200]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = p_0_0_0_1_9174_fu_250;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = {{mac_sm_dout[219:210]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = p_0_0_0_2138_fu_178;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
        end
    end else begin
        ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = p_0_0_0_3140_fu_182;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
        end
    end else begin
        ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = p_0_0_0_4142_fu_186;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = {{mac_sm_dout[49:40]}};
        end else begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
        end
    end else begin
        ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = p_0_0_0_5144_fu_190;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
        end
    end else begin
        ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = p_0_0_0_6146_fu_194;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
        end
    end else begin
        ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = p_0_0_0_7148_fu_198;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = {{mac_sm_dout[79:70]}};
        end else begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
        end
    end else begin
        ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = p_0_0_0_8150_fu_202;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = {{mac_sm_dout[89:80]}};
        end else begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
        end
    end else begin
        ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = p_0_0_0_9152_fu_206;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = {{mac_sm_dout[99:90]}};
        end else begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
        end
    end else begin
        ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten54_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten54_load = indvar_flatten54_fu_166;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 4'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op122_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op122_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v_sm_blk_n = v_sm_full_n;
    end else begin
        v_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v_sm_write = 1'b1;
    end else begin
        v_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_537_p2 = (ap_sig_allocacmp_indvar_flatten54_load + 15'd1);

assign add_ln46_fu_555_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign and_ln45_fu_610_p2 = (xor_ln45_fu_599_p2 & icmp_ln47_fu_604_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op122_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (v_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_336 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_340 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1251_reg_371 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_271 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390 = 'bx;

always @ (*) begin
    ap_predicate_op122_read_state3 = ((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_543_p2 = ((ap_sig_allocacmp_indvar_flatten54_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_549_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_604_p2 = ((ap_sig_allocacmp_t_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_629_p2 = ((select_ln46_fu_621_p3 == 4'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_616_p2 = (icmp_ln46_reg_1550 | and_ln45_fu_610_p2);

assign select_ln46_11_fu_561_p3 = ((icmp_ln46_fu_549_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_555_p2);

assign select_ln46_fu_621_p3 = ((or_ln46_fu_616_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_t_load);

assign t_20_fu_635_p2 = (select_ln46_fu_621_p3 + 4'd1);

assign trunc_ln50_fu_807_p1 = mac_sm_dout[9:0];

assign v_sm_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471}, {ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480}};

assign xor_ln45_fu_599_p2 = (icmp_ln46_reg_1550 ^ 1'd1);

endmodule //ATTN11_do_adapt_10
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_16 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rq_sm_head1_dout,
        rq_sm_head1_num_data_valid,
        rq_sm_head1_fifo_cap,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] rq_sm_head1_dout;
input  [9:0] rq_sm_head1_num_data_valid;
input  [9:0] rq_sm_head1_fifo_cap;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
output  [41:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg rq_sm_head1_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_329_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_reg_971;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    rq_sm_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
wire   [0:0] or_ln79_fu_365_p2;
reg   [0:0] or_ln79_reg_941;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln86_fu_373_p1;
reg   [2:0] trunc_ln86_reg_957;
reg   [2:0] trunc_ln86_2_reg_964;
wire   [0:0] icmp_ln83_fu_401_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_19_fu_393_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12189_fu_62;
wire   [2:0] select_ln79_88_fu_599_p3;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12189_load;
reg   [2:0] p_0_0_01_291_fu_66;
wire   [2:0] select_ln79_87_fu_592_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_291_load;
reg   [2:0] p_0_0_01_393_fu_70;
wire   [2:0] select_ln79_86_fu_585_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_393_load;
reg   [2:0] p_0_0_01_495_fu_74;
wire   [2:0] select_ln79_85_fu_578_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_495_load;
reg   [2:0] p_0_0_01_597_fu_78;
wire   [2:0] select_ln79_84_fu_571_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_597_load;
reg   [2:0] p_0_0_0_0_0_099_fu_82;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_099_load;
reg   [2:0] p_0_0_01_1_1101_fu_86;
wire   [2:0] select_ln79_82_fu_557_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_1101_load;
reg   [2:0] p_0_0_01_1_2103_fu_90;
wire   [2:0] select_ln79_81_fu_550_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_2103_load;
reg   [2:0] p_0_0_01_1_3105_fu_94;
wire   [2:0] select_ln79_80_fu_543_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_3105_load;
reg   [2:0] p_0_0_01_1_4107_fu_98;
wire   [2:0] select_ln79_79_fu_536_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_4107_load;
reg   [2:0] p_0_0_01_1_5109_fu_102;
wire   [2:0] select_ln79_fu_529_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_5109_load;
reg   [2:0] p_0_0_1_0_0_0111_fu_106;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_0111_load;
reg   [7:0] indvar_flatten_fu_110;
wire   [7:0] select_ln79_90_fu_413_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten24_fu_114;
wire   [14:0] add_ln78_fu_323_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten24_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_341_p2;
wire   [0:0] icmp_ln8342_fu_353_p2;
wire   [0:0] xor_ln78_fu_347_p2;
wire   [0:0] and_ln78_fu_359_p2;
wire   [2:0] add_ln83_fu_387_p2;
wire   [7:0] add_ln79_fu_407_p2;
wire   [2:0] select_ln79_83_fu_564_p3;
wire   [2:0] select_ln79_89_fu_606_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_136;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12189_fu_62 = 3'd0;
//#0 p_0_0_01_291_fu_66 = 3'd0;
//#0 p_0_0_01_393_fu_70 = 3'd0;
//#0 p_0_0_01_495_fu_74 = 3'd0;
//#0 p_0_0_01_597_fu_78 = 3'd0;
//#0 p_0_0_0_0_0_099_fu_82 = 3'd0;
//#0 p_0_0_01_1_1101_fu_86 = 3'd0;
//#0 p_0_0_01_1_2103_fu_90 = 3'd0;
//#0 p_0_0_01_1_3105_fu_94 = 3'd0;
//#0 p_0_0_01_1_4107_fu_98 = 3'd0;
//#0 p_0_0_01_1_5109_fu_102 = 3'd0;
//#0 p_0_0_1_0_0_0111_fu_106 = 3'd0;
//#0 indvar_flatten_fu_110 = 8'd0;
//#0 indvar_flatten24_fu_114 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
            indvar_flatten24_fu_114 <= add_ln78_fu_323_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten24_fu_114 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
            indvar_flatten_fu_110 <= select_ln79_90_fu_413_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_110 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        p_0_0_01_12189_fu_62 <= select_ln79_88_fu_599_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_1101_fu_86 <= select_ln79_82_fu_557_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_2103_fu_90 <= select_ln79_81_fu_550_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_3105_fu_94 <= select_ln79_80_fu_543_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_4107_fu_98 <= select_ln79_79_fu_536_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_5109_fu_102 <= select_ln79_fu_529_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_291_fu_66 <= select_ln79_87_fu_592_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_393_fu_70 <= select_ln79_86_fu_585_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_495_fu_74 <= select_ln79_85_fu_578_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_597_fu_78 <= select_ln79_84_fu_571_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_0_0_0_099_fu_82 <= trunc_ln86_reg_957;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_1_0_0_0111_fu_106 <= trunc_ln86_2_reg_964;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_124)) begin
    if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
        t_fu_58 <= t_19_fu_393_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        t_fu_58 <= 3'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln83_reg_971 <= icmp_ln83_fu_401_p2;
        or_ln79_reg_941 <= or_ln79_fu_365_p2;
        trunc_ln86_2_reg_964 <= {{rq_sm_head1_dout[5:3]}};
        trunc_ln86_reg_957 <= trunc_ln86_fu_373_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_reg_971 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_reg_971 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_329_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten24_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten24_load = indvar_flatten24_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12189_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12189_load = p_0_0_01_12189_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_1101_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_1101_load = p_0_0_01_1_1101_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_2103_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_2103_load = p_0_0_01_1_2103_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_3105_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_3105_load = p_0_0_01_1_3105_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_4107_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_4107_load = p_0_0_01_1_4107_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_5109_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_5109_load = p_0_0_01_1_5109_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_291_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_291_load = p_0_0_01_291_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_393_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_393_load = p_0_0_01_393_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_495_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_495_load = p_0_0_01_495_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_597_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_597_load = p_0_0_01_597_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_099_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_099_load = p_0_0_0_0_0_099_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_0111_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_0111_load = p_0_0_1_0_0_0111_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_329_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_blk_n = rq_sm_head1_empty_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_329_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_read = 1'b1;
    end else begin
        rq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_323_p2 = (ap_sig_allocacmp_indvar_flatten24_load + 15'd1);

assign add_ln79_fu_407_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln83_fu_387_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{{{{{{{trunc_ln86_2_reg_964}, {select_ln79_fu_529_p3}}, {select_ln79_79_fu_536_p3}}, {select_ln79_80_fu_543_p3}}, {select_ln79_81_fu_550_p3}}, {select_ln79_82_fu_557_p3}}, {select_ln79_83_fu_564_p3}}, {trunc_ln86_reg_957}}, {select_ln79_84_fu_571_p3}}, {select_ln79_85_fu_578_p3}}, {select_ln79_86_fu_585_p3}}, {select_ln79_87_fu_592_p3}}, {select_ln79_88_fu_599_p3}}, {select_ln79_89_fu_606_p3}};

assign and_ln78_fu_359_p2 = (xor_ln78_fu_347_p2 & icmp_ln8342_fu_353_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_329_p2 == 1'd0) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln83_reg_971 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_124 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_136 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_329_p2 = ((ap_sig_allocacmp_indvar_flatten24_load == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_341_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln8342_fu_353_p2 = ((ap_sig_allocacmp_t_load == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_401_p2 = ((t_19_fu_393_p3 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln79_fu_365_p2 = (icmp_ln79_fu_341_p2 | and_ln78_fu_359_p2);

assign select_ln79_79_fu_536_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_5109_load);

assign select_ln79_80_fu_543_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_4107_load);

assign select_ln79_81_fu_550_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_3105_load);

assign select_ln79_82_fu_557_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_2103_load);

assign select_ln79_83_fu_564_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_1101_load);

assign select_ln79_84_fu_571_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_099_load);

assign select_ln79_85_fu_578_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_597_load);

assign select_ln79_86_fu_585_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_495_load);

assign select_ln79_87_fu_592_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_393_load);

assign select_ln79_88_fu_599_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_291_load);

assign select_ln79_89_fu_606_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12189_load);

assign select_ln79_90_fu_413_p3 = ((icmp_ln79_fu_341_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_407_p2);

assign select_ln79_fu_529_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_0111_load);

assign start_out = real_start;

assign t_19_fu_393_p3 = ((or_ln79_fu_365_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_387_p2);

assign trunc_ln86_fu_373_p1 = rq_sm_head1_dout[2:0];

assign xor_ln78_fu_347_p2 = (icmp_ln79_fu_341_p2 ^ 1'd1);

endmodule //ATTN11_do_adapt_16
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_num_data_valid,
        lnq_sm_cp1_fifo_cap,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] lnq_sm_cp1_dout;
input  [2:0] lnq_sm_cp1_num_data_valid;
input  [2:0] lnq_sm_cp1_fifo_cap;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [35:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg lnq_sm_cp1_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_297_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_6_reg_868;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lnq_sm_cp1_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln79_fu_303_p2;
reg   [0:0] icmp_ln79_reg_834;
wire   [2:0] trunc_ln86_fu_311_p1;
reg   [2:0] trunc_ln86_reg_840;
reg   [2:0] trunc_ln86_reg_840_pp0_iter1_reg;
reg   [2:0] trunc_ln86_9_reg_847;
reg   [2:0] trunc_ln86_9_reg_847_pp0_iter1_reg;
wire   [0:0] or_ln79_fu_386_p2;
reg   [0:0] or_ln79_reg_854;
wire   [0:0] icmp_ln83_6_fu_405_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_18_fu_397_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12181_fu_62;
wire   [2:0] select_ln79_76_fu_539_p3;
reg    ap_loop_init_pp0_iter2_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12181_load;
reg   [2:0] p_0_0_01_283_fu_66;
wire   [2:0] select_ln79_75_fu_532_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_283_load;
reg   [2:0] p_0_0_01_385_fu_70;
wire   [2:0] select_ln79_74_fu_525_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_385_load;
reg   [2:0] p_0_0_01_487_fu_74;
wire   [2:0] select_ln79_73_fu_518_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_487_load;
reg   [2:0] p_0_0_0_0_0_089_fu_78;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_089_load;
reg   [2:0] p_0_0_01_1_191_fu_82;
wire   [2:0] select_ln79_71_fu_504_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_191_load;
reg   [2:0] p_0_0_01_1_293_fu_86;
wire   [2:0] select_ln79_70_fu_497_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_293_load;
reg   [2:0] p_0_0_01_1_395_fu_90;
wire   [2:0] select_ln79_69_fu_490_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_395_load;
reg   [2:0] p_0_0_01_1_497_fu_94;
wire   [2:0] select_ln79_fu_483_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_497_load;
reg   [2:0] p_0_0_1_0_0_099_fu_98;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_099_load;
reg   [8:0] indvar_flatten_fu_102;
wire   [8:0] select_ln79_78_fu_331_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten22_fu_106;
wire   [14:0] add_ln78_fu_291_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten22_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln79_fu_325_p2;
wire   [0:0] icmp_ln83_fu_374_p2;
wire   [0:0] xor_ln78_fu_369_p2;
wire   [0:0] and_ln78_fu_380_p2;
wire   [2:0] add_ln83_fu_391_p2;
wire   [2:0] select_ln79_72_fu_511_p3;
wire   [2:0] select_ln79_77_fu_546_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_224;
reg    ap_condition_166;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12181_fu_62 = 3'd0;
//#0 p_0_0_01_283_fu_66 = 3'd0;
//#0 p_0_0_01_385_fu_70 = 3'd0;
//#0 p_0_0_01_487_fu_74 = 3'd0;
//#0 p_0_0_0_0_0_089_fu_78 = 3'd0;
//#0 p_0_0_01_1_191_fu_82 = 3'd0;
//#0 p_0_0_01_1_293_fu_86 = 3'd0;
//#0 p_0_0_01_1_395_fu_90 = 3'd0;
//#0 p_0_0_01_1_497_fu_94 = 3'd0;
//#0 p_0_0_1_0_0_099_fu_98 = 3'd0;
//#0 indvar_flatten_fu_102 = 9'd0;
//#0 indvar_flatten22_fu_106 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_224)) begin
        if ((icmp_ln78_fu_297_p2 == 1'd0)) begin
            indvar_flatten22_fu_106 <= add_ln78_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten22_fu_106 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_224)) begin
        if ((icmp_ln78_fu_297_p2 == 1'd0)) begin
            indvar_flatten_fu_102 <= select_ln79_78_fu_331_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_102 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_01_12181_fu_62 <= select_ln79_76_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_191_fu_82 <= select_ln79_71_fu_504_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_293_fu_86 <= select_ln79_70_fu_497_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_395_fu_90 <= select_ln79_69_fu_490_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_497_fu_94 <= select_ln79_fu_483_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_283_fu_66 <= select_ln79_75_fu_532_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_385_fu_70 <= select_ln79_74_fu_525_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_487_fu_74 <= select_ln79_73_fu_518_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_0_0_0_089_fu_78 <= trunc_ln86_reg_840_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_1_0_0_099_fu_98 <= trunc_ln86_9_reg_847_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_166)) begin
    t_fu_58 <= t_18_fu_397_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln79_reg_834 <= icmp_ln79_fu_303_p2;
        icmp_ln83_6_reg_868 <= icmp_ln83_6_fu_405_p2;
        or_ln79_reg_854 <= or_ln79_fu_386_p2;
        trunc_ln86_9_reg_847 <= {{lnq_sm_cp1_dout[5:3]}};
        trunc_ln86_9_reg_847_pp0_iter1_reg <= trunc_ln86_9_reg_847;
        trunc_ln86_reg_840 <= trunc_ln86_fu_311_p1;
        trunc_ln86_reg_840_pp0_iter1_reg <= trunc_ln86_reg_840;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_6_reg_868 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_6_reg_868 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_297_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten22_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten22_load = indvar_flatten22_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12181_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12181_load = p_0_0_01_12181_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_191_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_191_load = p_0_0_01_1_191_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_293_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_293_load = p_0_0_01_1_293_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_395_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_395_load = p_0_0_01_1_395_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_497_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_497_load = p_0_0_01_1_497_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_283_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_283_load = p_0_0_01_283_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_385_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_385_load = p_0_0_01_385_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_487_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_487_load = p_0_0_01_487_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_089_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_089_load = p_0_0_0_0_0_089_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_099_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_099_load = p_0_0_1_0_0_099_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_297_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_blk_n = lnq_sm_cp1_empty_n;
    end else begin
        lnq_sm_cp1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_297_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_read = 1'b1;
    end else begin
        lnq_sm_cp1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_291_p2 = (ap_sig_allocacmp_indvar_flatten22_load + 15'd1);

assign add_ln79_fu_325_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln83_fu_391_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{{{{{trunc_ln86_9_reg_847_pp0_iter1_reg}, {select_ln79_fu_483_p3}}, {select_ln79_69_fu_490_p3}}, {select_ln79_70_fu_497_p3}}, {select_ln79_71_fu_504_p3}}, {select_ln79_72_fu_511_p3}}, {trunc_ln86_reg_840_pp0_iter1_reg}}, {select_ln79_73_fu_518_p3}}, {select_ln79_74_fu_525_p3}}, {select_ln79_75_fu_532_p3}}, {select_ln79_76_fu_539_p3}}, {select_ln79_77_fu_546_p3}};

assign and_ln78_fu_380_p2 = (xor_ln78_fu_369_p2 & icmp_ln83_fu_374_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_297_p2 == 1'd0) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln83_6_reg_868 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_166 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_224 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_297_p2 = ((ap_sig_allocacmp_indvar_flatten22_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_303_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_6_fu_405_p2 = ((t_18_fu_397_p3 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_374_p2 = ((ap_sig_allocacmp_t_load == 3'd6) ? 1'b1 : 1'b0);

assign or_ln79_fu_386_p2 = (icmp_ln79_reg_834 | and_ln78_fu_380_p2);

assign select_ln79_69_fu_490_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_497_load);

assign select_ln79_70_fu_497_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_395_load);

assign select_ln79_71_fu_504_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_293_load);

assign select_ln79_72_fu_511_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_191_load);

assign select_ln79_73_fu_518_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_089_load);

assign select_ln79_74_fu_525_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_487_load);

assign select_ln79_75_fu_532_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_385_load);

assign select_ln79_76_fu_539_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_283_load);

assign select_ln79_77_fu_546_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12181_load);

assign select_ln79_78_fu_331_p3 = ((icmp_ln79_fu_303_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_325_p2);

assign select_ln79_fu_483_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_099_load);

assign start_out = real_start;

assign t_18_fu_397_p3 = ((or_ln79_fu_386_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_391_p2);

assign trunc_ln86_fu_311_p1 = lnq_sm_cp1_dout[2:0];

assign xor_ln78_fu_369_p2 = (icmp_ln79_reg_834 ^ 1'd1);

endmodule //ATTN11_do_adapt_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        a_sm_head1_din,
        a_sm_head1_num_data_valid,
        a_sm_head1_fifo_cap,
        a_sm_head1_full_n,
        a_sm_head1_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [79:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] a_sm_head1_din;
input  [6:0] a_sm_head1_num_data_valid;
input  [6:0] a_sm_head1_fifo_cap;
input   a_sm_head1_full_n;
output   a_sm_head1_write;

reg ap_idle;
reg mac_sm_read;
reg a_sm_head1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_666;
reg   [0:0] icmp_ln45_reg_666_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_676;
reg    ap_predicate_op74_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_271_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    a_sm_head1_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_277_p2;
reg   [0:0] icmp_ln46_reg_670;
wire   [0:0] icmp_ln50_fu_357_p2;
wire   [9:0] trunc_ln50_fu_423_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_146_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_143;
reg   [9:0] ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
reg   [9:0] ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
reg   [9:0] ap_phi_mux_empty_1250_phi_fu_174_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1250_reg_171;
reg   [9:0] ap_phi_mux_p_0_0_0_275_phi_fu_184_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
reg   [9:0] ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_071_reg_208;
reg   [2:0] t_fu_94;
wire   [2:0] t_17_fu_363_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [7:0] indvar_flatten_fu_98;
wire   [7:0] select_ln46_10_fu_289_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [12:0] indvar_flatten22_fu_102;
wire   [12:0] add_ln45_fu_265_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten22_load;
reg   [9:0] p_0_0_070_fu_106;
reg   [9:0] p_0_0_0_12672_fu_110;
reg   [9:0] p_0_0_0_274_fu_114;
reg   [9:0] p_0_0_0_176_fu_118;
reg   [9:0] p_0_0_0_1_178_fu_122;
reg   [9:0] p_0_0_0_1_280_fu_126;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_283_p2;
wire   [0:0] icmp_ln47_fu_332_p2;
wire   [0:0] xor_ln45_fu_327_p2;
wire   [0:0] and_ln45_fu_338_p2;
wire   [0:0] or_ln46_fu_344_p2;
wire   [2:0] select_ln46_fu_349_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_192;
reg    ap_condition_196;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_94 = 3'd0;
//#0 indvar_flatten_fu_98 = 8'd0;
//#0 indvar_flatten22_fu_102 = 13'd0;
//#0 p_0_0_070_fu_106 = 10'd0;
//#0 p_0_0_0_12672_fu_110 = 10'd0;
//#0 p_0_0_0_274_fu_114 = 10'd0;
//#0 p_0_0_0_176_fu_118 = 10'd0;
//#0 p_0_0_0_1_178_fu_122 = 10'd0;
//#0 p_0_0_0_1_280_fu_126 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_676 == 1'd0) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= p_0_0_070_fu_106;
        end else if (((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= trunc_ln50_fu_423_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter2_p_0_0_071_reg_208;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_676 == 1'd0) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= p_0_0_0_176_fu_118;
        end else if (((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= {{mac_sm_dout[49:40]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln45_fu_271_p2 == 1'd0)) begin
            indvar_flatten22_fu_102 <= add_ln45_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten22_fu_102 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln45_fu_271_p2 == 1'd0)) begin
            indvar_flatten_fu_98 <= select_ln46_10_fu_289_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_196)) begin
        if ((icmp_ln45_reg_666 == 1'd0)) begin
            t_fu_94 <= t_17_fu_363_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_94 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_666 <= icmp_ln45_fu_271_p2;
        icmp_ln45_reg_666_pp0_iter1_reg <= icmp_ln45_reg_666;
        icmp_ln46_reg_670 <= icmp_ln46_fu_277_p2;
        icmp_ln50_reg_676 <= icmp_ln50_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter0_p_0_0_071_reg_208;
        ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter1_p_0_0_071_reg_208;
        ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_070_fu_106 <= ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4;
        p_0_0_0_12672_fu_110 <= ap_phi_mux_p_0_0_0_275_phi_fu_184_p4;
        p_0_0_0_176_fu_118 <= ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4;
        p_0_0_0_1_178_fu_122 <= ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4;
        p_0_0_0_1_280_fu_126 <= ap_phi_mux_empty_phi_fu_146_p4;
        p_0_0_0_274_fu_114 <= ap_phi_mux_empty_1250_phi_fu_174_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_sm_head1_blk_n = a_sm_head1_full_n;
    end else begin
        a_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_sm_head1_write = 1'b1;
    end else begin
        a_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_empty_1250_phi_fu_174_p4 = 10'd0;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_empty_1250_phi_fu_174_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_empty_1250_phi_fu_174_p4 = ap_phi_reg_pp0_iter2_empty_1250_reg_171;
        end
    end else begin
        ap_phi_mux_empty_1250_phi_fu_174_p4 = ap_phi_reg_pp0_iter2_empty_1250_reg_171;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_146_p4 = 10'd0;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_146_p4 = {{mac_sm_dout[79:70]}};
        end else begin
            ap_phi_mux_empty_phi_fu_146_p4 = ap_phi_reg_pp0_iter2_empty_reg_143;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_146_p4 = ap_phi_reg_pp0_iter2_empty_reg_143;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = p_0_0_0_12672_fu_110;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
        end
    end else begin
        ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = p_0_0_0_1_178_fu_122;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = p_0_0_0_1_280_fu_126;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = p_0_0_0_274_fu_114;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
        end
    end else begin
        ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten22_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten22_load = indvar_flatten22_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op74_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op74_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_head1_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199}, {ap_phi_reg_pp0_iter3_p_0_0_071_reg_208}};

assign add_ln45_fu_265_p2 = (ap_sig_allocacmp_indvar_flatten22_load + 13'd1);

assign add_ln46_fu_283_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln45_fu_338_p2 = (xor_ln45_fu_327_p2 & icmp_ln47_fu_332_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op74_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (1'b0 == a_sm_head1_full_n);
end

always @ (*) begin
    ap_condition_192 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_196 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_071_reg_208 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1250_reg_171 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_143 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181 = 'bx;

always @ (*) begin
    ap_predicate_op74_read_state3 = ((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_271_p2 = ((ap_sig_allocacmp_indvar_flatten22_load == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_277_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_332_p2 = ((ap_sig_allocacmp_t_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_357_p2 = ((select_ln46_fu_349_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_344_p2 = (icmp_ln46_reg_670 | and_ln45_fu_338_p2);

assign select_ln46_10_fu_289_p3 = ((icmp_ln46_fu_277_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_283_p2);

assign select_ln46_fu_349_p3 = ((or_ln46_fu_344_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_t_load);

assign t_17_fu_363_p2 = (select_ln46_fu_349_p3 + 3'd1);

assign trunc_ln50_fu_423_p1 = mac_sm_dout[9:0];

assign xor_ln45_fu_327_p2 = (icmp_ln46_reg_670 ^ 1'd1);

endmodule //ATTN11_do_adapt_20
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_21 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rq_sm_head2_dout,
        rq_sm_head2_num_data_valid,
        rq_sm_head2_fifo_cap,
        rq_sm_head2_empty_n,
        rq_sm_head2_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] rq_sm_head2_dout;
input  [9:0] rq_sm_head2_num_data_valid;
input  [9:0] rq_sm_head2_fifo_cap;
input   rq_sm_head2_empty_n;
output   rq_sm_head2_read;
output  [41:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg rq_sm_head2_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_329_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_reg_971;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    rq_sm_head2_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
wire   [0:0] or_ln79_fu_365_p2;
reg   [0:0] or_ln79_reg_941;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln86_fu_373_p1;
reg   [2:0] trunc_ln86_reg_957;
reg   [2:0] trunc_ln86_1_reg_964;
wire   [0:0] icmp_ln83_fu_401_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_16_fu_393_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12189_fu_62;
wire   [2:0] select_ln79_66_fu_599_p3;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12189_load;
reg   [2:0] p_0_0_01_291_fu_66;
wire   [2:0] select_ln79_65_fu_592_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_291_load;
reg   [2:0] p_0_0_01_393_fu_70;
wire   [2:0] select_ln79_64_fu_585_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_393_load;
reg   [2:0] p_0_0_01_495_fu_74;
wire   [2:0] select_ln79_63_fu_578_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_495_load;
reg   [2:0] p_0_0_01_597_fu_78;
wire   [2:0] select_ln79_62_fu_571_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_597_load;
reg   [2:0] p_0_0_0_0_0_099_fu_82;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_099_load;
reg   [2:0] p_0_0_01_1_1101_fu_86;
wire   [2:0] select_ln79_60_fu_557_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_1101_load;
reg   [2:0] p_0_0_01_1_2103_fu_90;
wire   [2:0] select_ln79_59_fu_550_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_2103_load;
reg   [2:0] p_0_0_01_1_3105_fu_94;
wire   [2:0] select_ln79_58_fu_543_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_3105_load;
reg   [2:0] p_0_0_01_1_4107_fu_98;
wire   [2:0] select_ln79_57_fu_536_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_4107_load;
reg   [2:0] p_0_0_01_1_5109_fu_102;
wire   [2:0] select_ln79_fu_529_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_5109_load;
reg   [2:0] p_0_0_1_0_0_0111_fu_106;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_0111_load;
reg   [7:0] indvar_flatten_fu_110;
wire   [7:0] select_ln79_68_fu_413_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten24_fu_114;
wire   [14:0] add_ln78_fu_323_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten24_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_341_p2;
wire   [0:0] icmp_ln8342_fu_353_p2;
wire   [0:0] xor_ln78_fu_347_p2;
wire   [0:0] and_ln78_fu_359_p2;
wire   [2:0] add_ln83_fu_387_p2;
wire   [7:0] add_ln79_fu_407_p2;
wire   [2:0] select_ln79_61_fu_564_p3;
wire   [2:0] select_ln79_67_fu_606_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_136;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12189_fu_62 = 3'd0;
//#0 p_0_0_01_291_fu_66 = 3'd0;
//#0 p_0_0_01_393_fu_70 = 3'd0;
//#0 p_0_0_01_495_fu_74 = 3'd0;
//#0 p_0_0_01_597_fu_78 = 3'd0;
//#0 p_0_0_0_0_0_099_fu_82 = 3'd0;
//#0 p_0_0_01_1_1101_fu_86 = 3'd0;
//#0 p_0_0_01_1_2103_fu_90 = 3'd0;
//#0 p_0_0_01_1_3105_fu_94 = 3'd0;
//#0 p_0_0_01_1_4107_fu_98 = 3'd0;
//#0 p_0_0_01_1_5109_fu_102 = 3'd0;
//#0 p_0_0_1_0_0_0111_fu_106 = 3'd0;
//#0 indvar_flatten_fu_110 = 8'd0;
//#0 indvar_flatten24_fu_114 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
            indvar_flatten24_fu_114 <= add_ln78_fu_323_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten24_fu_114 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
            indvar_flatten_fu_110 <= select_ln79_68_fu_413_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_110 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        p_0_0_01_12189_fu_62 <= select_ln79_66_fu_599_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_1101_fu_86 <= select_ln79_60_fu_557_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_2103_fu_90 <= select_ln79_59_fu_550_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_3105_fu_94 <= select_ln79_58_fu_543_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_4107_fu_98 <= select_ln79_57_fu_536_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_5109_fu_102 <= select_ln79_fu_529_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_291_fu_66 <= select_ln79_65_fu_592_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_393_fu_70 <= select_ln79_64_fu_585_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_495_fu_74 <= select_ln79_63_fu_578_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_597_fu_78 <= select_ln79_62_fu_571_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_0_0_0_099_fu_82 <= trunc_ln86_reg_957;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_1_0_0_0111_fu_106 <= trunc_ln86_1_reg_964;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_124)) begin
    if ((icmp_ln78_fu_329_p2 == 1'd0)) begin
        t_fu_58 <= t_16_fu_393_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        t_fu_58 <= 3'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln83_reg_971 <= icmp_ln83_fu_401_p2;
        or_ln79_reg_941 <= or_ln79_fu_365_p2;
        trunc_ln86_1_reg_964 <= {{rq_sm_head2_dout[5:3]}};
        trunc_ln86_reg_957 <= trunc_ln86_fu_373_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_reg_971 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_reg_971 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_329_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten24_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten24_load = indvar_flatten24_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12189_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12189_load = p_0_0_01_12189_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_1101_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_1101_load = p_0_0_01_1_1101_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_2103_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_2103_load = p_0_0_01_1_2103_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_3105_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_3105_load = p_0_0_01_1_3105_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_4107_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_4107_load = p_0_0_01_1_4107_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_5109_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_5109_load = p_0_0_01_1_5109_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_291_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_291_load = p_0_0_01_291_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_393_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_393_load = p_0_0_01_393_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_495_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_495_load = p_0_0_01_495_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_597_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_597_load = p_0_0_01_597_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_099_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_099_load = p_0_0_0_0_0_099_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_0111_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_0111_load = p_0_0_1_0_0_0111_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_329_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head2_blk_n = rq_sm_head2_empty_n;
    end else begin
        rq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_329_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head2_read = 1'b1;
    end else begin
        rq_sm_head2_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_323_p2 = (ap_sig_allocacmp_indvar_flatten24_load + 15'd1);

assign add_ln79_fu_407_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln83_fu_387_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{{{{{{{trunc_ln86_1_reg_964}, {select_ln79_fu_529_p3}}, {select_ln79_57_fu_536_p3}}, {select_ln79_58_fu_543_p3}}, {select_ln79_59_fu_550_p3}}, {select_ln79_60_fu_557_p3}}, {select_ln79_61_fu_564_p3}}, {trunc_ln86_reg_957}}, {select_ln79_62_fu_571_p3}}, {select_ln79_63_fu_578_p3}}, {select_ln79_64_fu_585_p3}}, {select_ln79_65_fu_592_p3}}, {select_ln79_66_fu_599_p3}}, {select_ln79_67_fu_606_p3}};

assign and_ln78_fu_359_p2 = (xor_ln78_fu_347_p2 & icmp_ln8342_fu_353_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_329_p2 == 1'd0) & (rq_sm_head2_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln83_reg_971 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_124 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_136 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_329_p2 = ((ap_sig_allocacmp_indvar_flatten24_load == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_341_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln8342_fu_353_p2 = ((ap_sig_allocacmp_t_load == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_401_p2 = ((t_16_fu_393_p3 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln79_fu_365_p2 = (icmp_ln79_fu_341_p2 | and_ln78_fu_359_p2);

assign select_ln79_57_fu_536_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_5109_load);

assign select_ln79_58_fu_543_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_4107_load);

assign select_ln79_59_fu_550_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_3105_load);

assign select_ln79_60_fu_557_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_2103_load);

assign select_ln79_61_fu_564_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_1101_load);

assign select_ln79_62_fu_571_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_099_load);

assign select_ln79_63_fu_578_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_597_load);

assign select_ln79_64_fu_585_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_495_load);

assign select_ln79_65_fu_592_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_393_load);

assign select_ln79_66_fu_599_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_291_load);

assign select_ln79_67_fu_606_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12189_load);

assign select_ln79_68_fu_413_p3 = ((icmp_ln79_fu_341_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_407_p2);

assign select_ln79_fu_529_p3 = ((or_ln79_reg_941[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_0111_load);

assign start_out = real_start;

assign t_16_fu_393_p3 = ((or_ln79_fu_365_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_387_p2);

assign trunc_ln86_fu_373_p1 = rq_sm_head2_dout[2:0];

assign xor_ln78_fu_347_p2 = (icmp_ln79_fu_341_p2 ^ 1'd1);

endmodule //ATTN11_do_adapt_21
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_25 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        a_sm_head2_din,
        a_sm_head2_num_data_valid,
        a_sm_head2_fifo_cap,
        a_sm_head2_full_n,
        a_sm_head2_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [79:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] a_sm_head2_din;
input  [6:0] a_sm_head2_num_data_valid;
input  [6:0] a_sm_head2_fifo_cap;
input   a_sm_head2_full_n;
output   a_sm_head2_write;

reg ap_idle;
reg mac_sm_read;
reg a_sm_head2_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_666;
reg   [0:0] icmp_ln45_reg_666_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_676;
reg    ap_predicate_op74_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_271_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    a_sm_head2_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_277_p2;
reg   [0:0] icmp_ln46_reg_670;
wire   [0:0] icmp_ln50_fu_357_p2;
wire   [9:0] trunc_ln50_fu_423_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_146_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_143;
reg   [9:0] ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
reg   [9:0] ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
reg   [9:0] ap_phi_mux_empty_1249_phi_fu_174_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1249_reg_171;
reg   [9:0] ap_phi_mux_p_0_0_0_275_phi_fu_184_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
reg   [9:0] ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_071_reg_208;
reg   [2:0] t_fu_94;
wire   [2:0] t_15_fu_363_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [7:0] indvar_flatten_fu_98;
wire   [7:0] select_ln46_9_fu_289_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [12:0] indvar_flatten22_fu_102;
wire   [12:0] add_ln45_fu_265_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten22_load;
reg   [9:0] p_0_0_070_fu_106;
reg   [9:0] p_0_0_0_12672_fu_110;
reg   [9:0] p_0_0_0_274_fu_114;
reg   [9:0] p_0_0_0_176_fu_118;
reg   [9:0] p_0_0_0_1_178_fu_122;
reg   [9:0] p_0_0_0_1_280_fu_126;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_283_p2;
wire   [0:0] icmp_ln47_fu_332_p2;
wire   [0:0] xor_ln45_fu_327_p2;
wire   [0:0] and_ln45_fu_338_p2;
wire   [0:0] or_ln46_fu_344_p2;
wire   [2:0] select_ln46_fu_349_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_192;
reg    ap_condition_196;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_94 = 3'd0;
//#0 indvar_flatten_fu_98 = 8'd0;
//#0 indvar_flatten22_fu_102 = 13'd0;
//#0 p_0_0_070_fu_106 = 10'd0;
//#0 p_0_0_0_12672_fu_110 = 10'd0;
//#0 p_0_0_0_274_fu_114 = 10'd0;
//#0 p_0_0_0_176_fu_118 = 10'd0;
//#0 p_0_0_0_1_178_fu_122 = 10'd0;
//#0 p_0_0_0_1_280_fu_126 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_676 == 1'd0) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= p_0_0_070_fu_106;
        end else if (((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= trunc_ln50_fu_423_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter2_p_0_0_071_reg_208;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_676 == 1'd0) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= p_0_0_0_176_fu_118;
        end else if (((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= {{mac_sm_dout[49:40]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln45_fu_271_p2 == 1'd0)) begin
            indvar_flatten22_fu_102 <= add_ln45_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten22_fu_102 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln45_fu_271_p2 == 1'd0)) begin
            indvar_flatten_fu_98 <= select_ln46_9_fu_289_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_196)) begin
        if ((icmp_ln45_reg_666 == 1'd0)) begin
            t_fu_94 <= t_15_fu_363_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_94 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_666 <= icmp_ln45_fu_271_p2;
        icmp_ln45_reg_666_pp0_iter1_reg <= icmp_ln45_reg_666;
        icmp_ln46_reg_670 <= icmp_ln46_fu_277_p2;
        icmp_ln50_reg_676 <= icmp_ln50_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter0_p_0_0_071_reg_208;
        ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter1_p_0_0_071_reg_208;
        ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_070_fu_106 <= ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4;
        p_0_0_0_12672_fu_110 <= ap_phi_mux_p_0_0_0_275_phi_fu_184_p4;
        p_0_0_0_176_fu_118 <= ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4;
        p_0_0_0_1_178_fu_122 <= ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4;
        p_0_0_0_1_280_fu_126 <= ap_phi_mux_empty_phi_fu_146_p4;
        p_0_0_0_274_fu_114 <= ap_phi_mux_empty_1249_phi_fu_174_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_sm_head2_blk_n = a_sm_head2_full_n;
    end else begin
        a_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_sm_head2_write = 1'b1;
    end else begin
        a_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_empty_1249_phi_fu_174_p4 = 10'd0;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_empty_1249_phi_fu_174_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_empty_1249_phi_fu_174_p4 = ap_phi_reg_pp0_iter2_empty_1249_reg_171;
        end
    end else begin
        ap_phi_mux_empty_1249_phi_fu_174_p4 = ap_phi_reg_pp0_iter2_empty_1249_reg_171;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_146_p4 = 10'd0;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_146_p4 = {{mac_sm_dout[79:70]}};
        end else begin
            ap_phi_mux_empty_phi_fu_146_p4 = ap_phi_reg_pp0_iter2_empty_reg_143;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_146_p4 = ap_phi_reg_pp0_iter2_empty_reg_143;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = p_0_0_0_12672_fu_110;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
        end
    end else begin
        ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = p_0_0_0_1_178_fu_122;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = p_0_0_0_1_280_fu_126;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = p_0_0_0_274_fu_114;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
        end
    end else begin
        ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten22_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten22_load = indvar_flatten22_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op74_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op74_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_head2_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199}, {ap_phi_reg_pp0_iter3_p_0_0_071_reg_208}};

assign add_ln45_fu_265_p2 = (ap_sig_allocacmp_indvar_flatten22_load + 13'd1);

assign add_ln46_fu_283_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln45_fu_338_p2 = (xor_ln45_fu_327_p2 & icmp_ln47_fu_332_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op74_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (1'b0 == a_sm_head2_full_n);
end

always @ (*) begin
    ap_condition_192 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_196 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_071_reg_208 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1249_reg_171 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_143 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181 = 'bx;

always @ (*) begin
    ap_predicate_op74_read_state3 = ((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_271_p2 = ((ap_sig_allocacmp_indvar_flatten22_load == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_277_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_332_p2 = ((ap_sig_allocacmp_t_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_357_p2 = ((select_ln46_fu_349_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_344_p2 = (icmp_ln46_reg_670 | and_ln45_fu_338_p2);

assign select_ln46_9_fu_289_p3 = ((icmp_ln46_fu_277_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_283_p2);

assign select_ln46_fu_349_p3 = ((or_ln46_fu_344_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_t_load);

assign t_15_fu_363_p2 = (select_ln46_fu_349_p3 + 3'd1);

assign trunc_ln50_fu_423_p1 = mac_sm_dout[9:0];

assign xor_ln45_fu_327_p2 = (icmp_ln46_reg_670 ^ 1'd1);

endmodule //ATTN11_do_adapt_25
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_26 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qq_sm_head1_dout,
        qq_sm_head1_num_data_valid,
        qq_sm_head1_fifo_cap,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] qq_sm_head1_dout;
input  [13:0] qq_sm_head1_num_data_valid;
input  [13:0] qq_sm_head1_fifo_cap;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
output  [23:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg qq_sm_head1_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_233_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_5_reg_647;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    qq_sm_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
wire   [0:0] or_ln79_fu_269_p2;
reg   [0:0] or_ln79_reg_623;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln86_fu_277_p1;
reg   [2:0] trunc_ln86_reg_633;
reg   [2:0] trunc_ln86_5_reg_640;
wire   [0:0] icmp_ln83_5_fu_305_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_14_fu_297_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12165_fu_62;
wire   [2:0] select_ln79_54_fu_425_p3;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12165_load;
reg   [2:0] p_0_0_01_267_fu_66;
wire   [2:0] select_ln79_53_fu_418_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_267_load;
reg   [2:0] p_0_0_0_0_0_069_fu_70;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_069_load;
reg   [2:0] p_0_0_01_1_171_fu_74;
wire   [2:0] select_ln79_51_fu_404_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_171_load;
reg   [2:0] p_0_0_01_1_273_fu_78;
wire   [2:0] select_ln79_fu_397_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_273_load;
reg   [2:0] p_0_0_1_0_0_075_fu_82;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_075_load;
reg   [7:0] indvar_flatten_fu_86;
wire   [7:0] select_ln79_56_fu_317_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [12:0] indvar_flatten18_fu_90;
wire   [12:0] add_ln78_fu_227_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_245_p2;
wire   [0:0] icmp_ln83_fu_257_p2;
wire   [0:0] xor_ln78_fu_251_p2;
wire   [0:0] and_ln78_fu_263_p2;
wire   [2:0] add_ln83_fu_291_p2;
wire   [7:0] add_ln79_fu_311_p2;
wire   [2:0] select_ln79_52_fu_411_p3;
wire   [2:0] select_ln79_55_fu_432_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_136;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12165_fu_62 = 3'd0;
//#0 p_0_0_01_267_fu_66 = 3'd0;
//#0 p_0_0_0_0_0_069_fu_70 = 3'd0;
//#0 p_0_0_01_1_171_fu_74 = 3'd0;
//#0 p_0_0_01_1_273_fu_78 = 3'd0;
//#0 p_0_0_1_0_0_075_fu_82 = 3'd0;
//#0 indvar_flatten_fu_86 = 8'd0;
//#0 indvar_flatten18_fu_90 = 13'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
            indvar_flatten18_fu_90 <= add_ln78_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_90 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
            indvar_flatten_fu_86 <= select_ln79_56_fu_317_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        p_0_0_01_12165_fu_62 <= select_ln79_54_fu_425_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_171_fu_74 <= select_ln79_51_fu_404_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_273_fu_78 <= select_ln79_fu_397_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_267_fu_66 <= select_ln79_53_fu_418_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_0_0_0_069_fu_70 <= trunc_ln86_reg_633;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_1_0_0_075_fu_82 <= trunc_ln86_5_reg_640;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_124)) begin
    if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
        t_fu_58 <= t_14_fu_297_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        t_fu_58 <= 3'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln83_5_reg_647 <= icmp_ln83_5_fu_305_p2;
        or_ln79_reg_623 <= or_ln79_fu_269_p2;
        trunc_ln86_5_reg_640 <= {{qq_sm_head1_dout[5:3]}};
        trunc_ln86_reg_633 <= trunc_ln86_fu_277_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_5_reg_647 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_5_reg_647 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_233_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12165_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12165_load = p_0_0_01_12165_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_171_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_171_load = p_0_0_01_1_171_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_273_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_273_load = p_0_0_01_1_273_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_267_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_267_load = p_0_0_01_267_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_069_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_069_load = p_0_0_0_0_0_069_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_075_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_075_load = p_0_0_1_0_0_075_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_233_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_blk_n = qq_sm_head1_empty_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_233_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_read = 1'b1;
    end else begin
        qq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_227_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 13'd1);

assign add_ln79_fu_311_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln83_fu_291_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{trunc_ln86_5_reg_640}, {select_ln79_fu_397_p3}}, {select_ln79_51_fu_404_p3}}, {select_ln79_52_fu_411_p3}}, {trunc_ln86_reg_633}}, {select_ln79_53_fu_418_p3}}, {select_ln79_54_fu_425_p3}}, {select_ln79_55_fu_432_p3}};

assign and_ln78_fu_263_p2 = (xor_ln78_fu_251_p2 & icmp_ln83_fu_257_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_233_p2 == 1'd0) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln83_5_reg_647 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_124 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_136 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_233_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_245_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln83_5_fu_305_p2 = ((t_14_fu_297_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_257_p2 = ((ap_sig_allocacmp_t_load == 3'd4) ? 1'b1 : 1'b0);

assign or_ln79_fu_269_p2 = (icmp_ln79_fu_245_p2 | and_ln78_fu_263_p2);

assign select_ln79_51_fu_404_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_273_load);

assign select_ln79_52_fu_411_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_171_load);

assign select_ln79_53_fu_418_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_069_load);

assign select_ln79_54_fu_425_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_267_load);

assign select_ln79_55_fu_432_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12165_load);

assign select_ln79_56_fu_317_p3 = ((icmp_ln79_fu_245_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_311_p2);

assign select_ln79_fu_397_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_075_load);

assign start_out = real_start;

assign t_14_fu_297_p3 = ((or_ln79_fu_269_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_291_p2);

assign trunc_ln86_fu_277_p1 = qq_sm_head1_dout[2:0];

assign xor_ln78_fu_251_p2 = (icmp_ln79_fu_245_p2 ^ 1'd1);

endmodule //ATTN11_do_adapt_26
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        aq_sm_dout,
        aq_sm_num_data_valid,
        aq_sm_fifo_cap,
        aq_sm_empty_n,
        aq_sm_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] aq_sm_dout;
input  [2:0] aq_sm_num_data_valid;
input  [2:0] aq_sm_fifo_cap;
input   aq_sm_empty_n;
output   aq_sm_read;
output  [71:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg aq_sm_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_491_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_reg_1518;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    aq_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln79_fu_497_p2;
reg   [0:0] icmp_ln79_reg_1472;
wire   [2:0] trunc_ln86_fu_505_p1;
reg   [2:0] trunc_ln86_reg_1478;
reg   [2:0] trunc_ln86_reg_1478_pp0_iter1_reg;
reg   [2:0] trunc_ln86_s_reg_1485;
reg   [2:0] trunc_ln86_s_reg_1485_pp0_iter1_reg;
wire   [0:0] or_ln79_fu_580_p2;
reg   [0:0] or_ln79_reg_1492;
wire   [0:0] icmp_ln83_fu_599_p2;
reg   [3:0] t_fu_60;
wire   [3:0] t_13_fu_591_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [3:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_121129_fu_64;
wire   [2:0] select_ln79_48_fu_889_p3;
reg    ap_loop_init_pp0_iter2_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_121129_load;
reg   [2:0] p_0_0_01_2131_fu_68;
wire   [2:0] select_ln79_47_fu_882_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_2131_load;
reg   [2:0] p_0_0_01_3133_fu_72;
wire   [2:0] select_ln79_46_fu_875_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_3133_load;
reg   [2:0] p_0_0_01_4135_fu_76;
wire   [2:0] select_ln79_45_fu_868_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_4135_load;
reg   [2:0] p_0_0_01_5137_fu_80;
wire   [2:0] select_ln79_44_fu_861_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_5137_load;
reg   [2:0] p_0_0_01_6139_fu_84;
wire   [2:0] select_ln79_43_fu_854_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_6139_load;
reg   [2:0] p_0_0_01_7141_fu_88;
wire   [2:0] select_ln79_42_fu_847_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_7141_load;
reg   [2:0] p_0_0_01_8143_fu_92;
wire   [2:0] select_ln79_41_fu_840_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_8143_load;
reg   [2:0] p_0_0_01_9145_fu_96;
wire   [2:0] select_ln79_40_fu_833_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_9145_load;
reg   [2:0] p_0_0_01_10147_fu_100;
wire   [2:0] select_ln79_39_fu_826_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_10147_load;
reg   [2:0] p_0_0_0_0_0_0149_fu_104;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_0149_load;
reg   [2:0] p_0_0_01_1_1151_fu_108;
wire   [2:0] select_ln79_37_fu_812_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_1151_load;
reg   [2:0] p_0_0_01_1_2153_fu_112;
wire   [2:0] select_ln79_36_fu_805_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_2153_load;
reg   [2:0] p_0_0_01_1_3155_fu_116;
wire   [2:0] select_ln79_35_fu_798_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_3155_load;
reg   [2:0] p_0_0_01_1_4157_fu_120;
wire   [2:0] select_ln79_34_fu_791_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_4157_load;
reg   [2:0] p_0_0_01_1_5159_fu_124;
wire   [2:0] select_ln79_33_fu_784_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_5159_load;
reg   [2:0] p_0_0_01_1_6161_fu_128;
wire   [2:0] select_ln79_32_fu_777_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_6161_load;
reg   [2:0] p_0_0_01_1_7163_fu_132;
wire   [2:0] select_ln79_31_fu_770_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_7163_load;
reg   [2:0] p_0_0_01_1_8165_fu_136;
wire   [2:0] select_ln79_30_fu_763_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_8165_load;
reg   [2:0] p_0_0_01_1_9167_fu_140;
wire   [2:0] select_ln79_29_fu_756_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_9167_load;
reg   [2:0] p_0_0_01_1_10169_fu_144;
wire   [2:0] select_ln79_fu_749_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_10169_load;
reg   [2:0] p_0_0_1_0_0_0171_fu_148;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_0171_load;
reg   [8:0] indvar_flatten_fu_152;
wire   [8:0] select_ln79_50_fu_525_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten34_fu_156;
wire   [14:0] add_ln78_fu_485_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten34_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln79_fu_519_p2;
wire   [0:0] icmp_ln8362_fu_568_p2;
wire   [0:0] xor_ln78_fu_563_p2;
wire   [0:0] and_ln78_fu_574_p2;
wire   [3:0] add_ln83_fu_585_p2;
wire   [2:0] select_ln79_38_fu_819_p3;
wire   [2:0] select_ln79_49_fu_896_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_309;
reg    ap_condition_202;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_60 = 4'd0;
//#0 p_0_0_01_121129_fu_64 = 3'd0;
//#0 p_0_0_01_2131_fu_68 = 3'd0;
//#0 p_0_0_01_3133_fu_72 = 3'd0;
//#0 p_0_0_01_4135_fu_76 = 3'd0;
//#0 p_0_0_01_5137_fu_80 = 3'd0;
//#0 p_0_0_01_6139_fu_84 = 3'd0;
//#0 p_0_0_01_7141_fu_88 = 3'd0;
//#0 p_0_0_01_8143_fu_92 = 3'd0;
//#0 p_0_0_01_9145_fu_96 = 3'd0;
//#0 p_0_0_01_10147_fu_100 = 3'd0;
//#0 p_0_0_0_0_0_0149_fu_104 = 3'd0;
//#0 p_0_0_01_1_1151_fu_108 = 3'd0;
//#0 p_0_0_01_1_2153_fu_112 = 3'd0;
//#0 p_0_0_01_1_3155_fu_116 = 3'd0;
//#0 p_0_0_01_1_4157_fu_120 = 3'd0;
//#0 p_0_0_01_1_5159_fu_124 = 3'd0;
//#0 p_0_0_01_1_6161_fu_128 = 3'd0;
//#0 p_0_0_01_1_7163_fu_132 = 3'd0;
//#0 p_0_0_01_1_8165_fu_136 = 3'd0;
//#0 p_0_0_01_1_9167_fu_140 = 3'd0;
//#0 p_0_0_01_1_10169_fu_144 = 3'd0;
//#0 p_0_0_1_0_0_0171_fu_148 = 3'd0;
//#0 indvar_flatten_fu_152 = 9'd0;
//#0 indvar_flatten34_fu_156 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_309)) begin
        if ((icmp_ln78_fu_491_p2 == 1'd0)) begin
            indvar_flatten34_fu_156 <= add_ln78_fu_485_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_156 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_309)) begin
        if ((icmp_ln78_fu_491_p2 == 1'd0)) begin
            indvar_flatten_fu_152 <= select_ln79_50_fu_525_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_152 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_01_10147_fu_100 <= select_ln79_39_fu_826_p3;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_121129_fu_64 <= select_ln79_48_fu_889_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_10169_fu_144 <= select_ln79_fu_749_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_1151_fu_108 <= select_ln79_37_fu_812_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_2153_fu_112 <= select_ln79_36_fu_805_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_3155_fu_116 <= select_ln79_35_fu_798_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_4157_fu_120 <= select_ln79_34_fu_791_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_5159_fu_124 <= select_ln79_33_fu_784_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_6161_fu_128 <= select_ln79_32_fu_777_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_7163_fu_132 <= select_ln79_31_fu_770_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_8165_fu_136 <= select_ln79_30_fu_763_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_9167_fu_140 <= select_ln79_29_fu_756_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_2131_fu_68 <= select_ln79_47_fu_882_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_3133_fu_72 <= select_ln79_46_fu_875_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_4135_fu_76 <= select_ln79_45_fu_868_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_5137_fu_80 <= select_ln79_44_fu_861_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_6139_fu_84 <= select_ln79_43_fu_854_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_7141_fu_88 <= select_ln79_42_fu_847_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_8143_fu_92 <= select_ln79_41_fu_840_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_9145_fu_96 <= select_ln79_40_fu_833_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_0_0_0_0149_fu_104 <= trunc_ln86_reg_1478_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_1_0_0_0171_fu_148 <= trunc_ln86_s_reg_1485_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_202)) begin
    t_fu_60 <= t_13_fu_591_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln79_reg_1472 <= icmp_ln79_fu_497_p2;
        icmp_ln83_reg_1518 <= icmp_ln83_fu_599_p2;
        or_ln79_reg_1492 <= or_ln79_fu_580_p2;
        trunc_ln86_reg_1478 <= trunc_ln86_fu_505_p1;
        trunc_ln86_reg_1478_pp0_iter1_reg <= trunc_ln86_reg_1478;
        trunc_ln86_s_reg_1485 <= {{aq_sm_dout[5:3]}};
        trunc_ln86_s_reg_1485_pp0_iter1_reg <= trunc_ln86_s_reg_1485;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_reg_1518 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_reg_1518 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_491_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_156;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_152;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_10147_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_10147_load = p_0_0_01_10147_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_121129_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_121129_load = p_0_0_01_121129_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_10169_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_10169_load = p_0_0_01_1_10169_fu_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_1151_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_1151_load = p_0_0_01_1_1151_fu_108;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_2153_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_2153_load = p_0_0_01_1_2153_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_3155_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_3155_load = p_0_0_01_1_3155_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_4157_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_4157_load = p_0_0_01_1_4157_fu_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_5159_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_5159_load = p_0_0_01_1_5159_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_6161_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_6161_load = p_0_0_01_1_6161_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_7163_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_7163_load = p_0_0_01_1_7163_fu_132;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_8165_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_8165_load = p_0_0_01_1_8165_fu_136;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_9167_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_9167_load = p_0_0_01_1_9167_fu_140;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_2131_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_2131_load = p_0_0_01_2131_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_3133_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_3133_load = p_0_0_01_3133_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_4135_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_4135_load = p_0_0_01_4135_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_5137_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_5137_load = p_0_0_01_5137_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_6139_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_6139_load = p_0_0_01_6139_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_7141_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_7141_load = p_0_0_01_7141_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_8143_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_8143_load = p_0_0_01_8143_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_9145_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_9145_load = p_0_0_01_9145_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_0149_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_0149_load = p_0_0_0_0_0_0149_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_0171_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_0171_load = p_0_0_1_0_0_0171_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_t_load = 4'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_491_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        aq_sm_blk_n = aq_sm_empty_n;
    end else begin
        aq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_491_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        aq_sm_read = 1'b1;
    end else begin
        aq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_485_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 15'd1);

assign add_ln79_fu_519_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln83_fu_585_p2 = (ap_sig_allocacmp_t_load + 4'd1);

assign adpt_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{trunc_ln86_s_reg_1485_pp0_iter1_reg}, {select_ln79_fu_749_p3}}, {select_ln79_29_fu_756_p3}}, {select_ln79_30_fu_763_p3}}, {select_ln79_31_fu_770_p3}}, {select_ln79_32_fu_777_p3}}, {select_ln79_33_fu_784_p3}}, {select_ln79_34_fu_791_p3}}, {select_ln79_35_fu_798_p3}}, {select_ln79_36_fu_805_p3}}, {select_ln79_37_fu_812_p3}}, {select_ln79_38_fu_819_p3}}, {trunc_ln86_reg_1478_pp0_iter1_reg}}, {select_ln79_39_fu_826_p3}}, {select_ln79_40_fu_833_p3}}, {select_ln79_41_fu_840_p3}}, {select_ln79_42_fu_847_p3}}, {select_ln79_43_fu_854_p3}}, {select_ln79_44_fu_861_p3}}, {select_ln79_45_fu_868_p3}}, {select_ln79_46_fu_875_p3}}, {select_ln79_47_fu_882_p3}}, {select_ln79_48_fu_889_p3}}, {select_ln79_49_fu_896_p3}};

assign and_ln78_fu_574_p2 = (xor_ln78_fu_563_p2 & icmp_ln8362_fu_568_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_491_p2 == 1'd0) & (aq_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln83_reg_1518 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_202 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_309 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_491_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_497_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln8362_fu_568_p2 = ((ap_sig_allocacmp_t_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_599_p2 = ((t_13_fu_591_p3 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln79_fu_580_p2 = (icmp_ln79_reg_1472 | and_ln78_fu_574_p2);

assign select_ln79_29_fu_756_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_10169_load);

assign select_ln79_30_fu_763_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_9167_load);

assign select_ln79_31_fu_770_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_8165_load);

assign select_ln79_32_fu_777_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_7163_load);

assign select_ln79_33_fu_784_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_6161_load);

assign select_ln79_34_fu_791_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_5159_load);

assign select_ln79_35_fu_798_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_4157_load);

assign select_ln79_36_fu_805_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_3155_load);

assign select_ln79_37_fu_812_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_2153_load);

assign select_ln79_38_fu_819_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_1151_load);

assign select_ln79_39_fu_826_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_0149_load);

assign select_ln79_40_fu_833_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_10147_load);

assign select_ln79_41_fu_840_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_9145_load);

assign select_ln79_42_fu_847_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_8143_load);

assign select_ln79_43_fu_854_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_7141_load);

assign select_ln79_44_fu_861_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_6139_load);

assign select_ln79_45_fu_868_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_5137_load);

assign select_ln79_46_fu_875_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_4135_load);

assign select_ln79_47_fu_882_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_3133_load);

assign select_ln79_48_fu_889_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_2131_load);

assign select_ln79_49_fu_896_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_121129_load);

assign select_ln79_50_fu_525_p3 = ((icmp_ln79_fu_497_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_519_p2);

assign select_ln79_fu_749_p3 = ((or_ln79_reg_1492[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_0171_load);

assign start_out = real_start;

assign t_13_fu_591_p3 = ((or_ln79_fu_580_p2[0:0] == 1'b1) ? 4'd1 : add_ln83_fu_585_p2);

assign trunc_ln86_fu_505_p1 = aq_sm_dout[2:0];

assign xor_ln78_fu_563_p2 = (icmp_ln79_reg_1472 ^ 1'd1);

endmodule //ATTN11_do_adapt_3
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_30 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        r_sm_head1_din,
        r_sm_head1_num_data_valid,
        r_sm_head1_fifo_cap,
        r_sm_head1_full_n,
        r_sm_head1_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [139:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] r_sm_head1_din;
input  [9:0] r_sm_head1_num_data_valid;
input  [9:0] r_sm_head1_fifo_cap;
input   r_sm_head1_full_n;
output   r_sm_head1_write;

reg ap_idle;
reg mac_sm_read;
reg r_sm_head1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_996;
reg   [0:0] icmp_ln45_reg_996_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1006;
reg    ap_predicate_op92_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_373_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    r_sm_head1_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_379_p2;
reg   [0:0] icmp_ln46_reg_1000;
wire   [0:0] icmp_ln50_fu_459_p2;
wire   [9:0] trunc_ln50_fu_567_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_194_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_191;
reg   [9:0] ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
reg   [9:0] ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
reg   [9:0] ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
reg   [9:0] ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
reg   [9:0] ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
reg   [9:0] ap_phi_mux_empty_1248_phi_fu_249_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1248_reg_246;
reg   [9:0] ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
reg   [9:0] ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
reg   [9:0] ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
reg   [9:0] ap_phi_mux_p_0_0_0_299_phi_fu_286_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
reg   [9:0] ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_095_reg_310;
reg   [2:0] t_fu_118;
wire   [2:0] t_12_fu_465_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [7:0] indvar_flatten_fu_122;
wire   [7:0] select_ln46_8_fu_391_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten34_fu_126;
wire   [14:0] add_ln45_fu_367_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [9:0] p_0_0_094_fu_130;
reg   [9:0] p_0_0_0_12696_fu_134;
reg   [9:0] p_0_0_0_298_fu_138;
reg   [9:0] p_0_0_0_3100_fu_142;
reg   [9:0] p_0_0_0_4102_fu_146;
reg   [9:0] p_0_0_0_5104_fu_150;
reg   [9:0] p_0_0_0_1106_fu_154;
reg   [9:0] p_0_0_0_1_1108_fu_158;
reg   [9:0] p_0_0_0_1_2110_fu_162;
reg   [9:0] p_0_0_0_1_3112_fu_166;
reg   [9:0] p_0_0_0_1_4114_fu_170;
reg   [9:0] p_0_0_0_1_5116_fu_174;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_385_p2;
wire   [0:0] icmp_ln47_fu_434_p2;
wire   [0:0] xor_ln45_fu_429_p2;
wire   [0:0] and_ln45_fu_440_p2;
wire   [0:0] or_ln46_fu_446_p2;
wire   [2:0] select_ln46_fu_451_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_246;
reg    ap_condition_250;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_118 = 3'd0;
//#0 indvar_flatten_fu_122 = 8'd0;
//#0 indvar_flatten34_fu_126 = 15'd0;
//#0 p_0_0_094_fu_130 = 10'd0;
//#0 p_0_0_0_12696_fu_134 = 10'd0;
//#0 p_0_0_0_298_fu_138 = 10'd0;
//#0 p_0_0_0_3100_fu_142 = 10'd0;
//#0 p_0_0_0_4102_fu_146 = 10'd0;
//#0 p_0_0_0_5104_fu_150 = 10'd0;
//#0 p_0_0_0_1106_fu_154 = 10'd0;
//#0 p_0_0_0_1_1108_fu_158 = 10'd0;
//#0 p_0_0_0_1_2110_fu_162 = 10'd0;
//#0 p_0_0_0_1_3112_fu_166 = 10'd0;
//#0 p_0_0_0_1_4114_fu_170 = 10'd0;
//#0 p_0_0_0_1_5116_fu_174 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1006 == 1'd0) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= p_0_0_094_fu_130;
        end else if (((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= trunc_ln50_fu_567_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter2_p_0_0_095_reg_310;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1006 == 1'd0) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= p_0_0_0_1106_fu_154;
        end else if (((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= {{mac_sm_dout[79:70]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_246)) begin
        if ((icmp_ln45_fu_373_p2 == 1'd0)) begin
            indvar_flatten34_fu_126 <= add_ln45_fu_367_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_126 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_246)) begin
        if ((icmp_ln45_fu_373_p2 == 1'd0)) begin
            indvar_flatten_fu_122 <= select_ln46_8_fu_391_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_122 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_250)) begin
        if ((icmp_ln45_reg_996 == 1'd0)) begin
            t_fu_118 <= t_12_fu_465_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_118 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_996 <= icmp_ln45_fu_373_p2;
        icmp_ln45_reg_996_pp0_iter1_reg <= icmp_ln45_reg_996;
        icmp_ln46_reg_1000 <= icmp_ln46_fu_379_p2;
        icmp_ln50_reg_1006 <= icmp_ln50_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter0_p_0_0_095_reg_310;
        ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter1_p_0_0_095_reg_310;
        ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_094_fu_130 <= ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4;
        p_0_0_0_1106_fu_154 <= ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4;
        p_0_0_0_12696_fu_134 <= ap_phi_mux_p_0_0_0_299_phi_fu_286_p4;
        p_0_0_0_1_1108_fu_158 <= ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4;
        p_0_0_0_1_2110_fu_162 <= ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4;
        p_0_0_0_1_3112_fu_166 <= ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4;
        p_0_0_0_1_4114_fu_170 <= ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4;
        p_0_0_0_1_5116_fu_174 <= ap_phi_mux_empty_phi_fu_194_p4;
        p_0_0_0_298_fu_138 <= ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4;
        p_0_0_0_3100_fu_142 <= ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4;
        p_0_0_0_4102_fu_146 <= ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4;
        p_0_0_0_5104_fu_150 <= ap_phi_mux_empty_1248_phi_fu_249_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_373_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_empty_1248_phi_fu_249_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_empty_1248_phi_fu_249_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_empty_1248_phi_fu_249_p4 = ap_phi_reg_pp0_iter2_empty_1248_reg_246;
        end
    end else begin
        ap_phi_mux_empty_1248_phi_fu_249_p4 = ap_phi_reg_pp0_iter2_empty_1248_reg_246;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_194_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_194_p4 = {{mac_sm_dout[139:130]}};
        end else begin
            ap_phi_mux_empty_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_empty_reg_191;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_empty_reg_191;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = p_0_0_0_12696_fu_134;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
        end
    end else begin
        ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = p_0_0_0_1_1108_fu_158;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = {{mac_sm_dout[89:80]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = p_0_0_0_1_2110_fu_162;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = {{mac_sm_dout[99:90]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = p_0_0_0_1_3112_fu_166;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = {{mac_sm_dout[109:100]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = p_0_0_0_1_4114_fu_170;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = {{mac_sm_dout[119:110]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = p_0_0_0_1_5116_fu_174;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = {{mac_sm_dout[129:120]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = p_0_0_0_298_fu_138;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
        end
    end else begin
        ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = p_0_0_0_3100_fu_142;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
        end
    end else begin
        ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = p_0_0_0_4102_fu_146;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = {{mac_sm_dout[49:40]}};
        end else begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
        end
    end else begin
        ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = p_0_0_0_5104_fu_150;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
        end
    end else begin
        ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op92_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op92_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_sm_head1_blk_n = r_sm_head1_full_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_sm_head1_write = 1'b1;
    end else begin
        r_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_367_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 15'd1);

assign add_ln46_fu_385_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln45_fu_440_p2 = (xor_ln45_fu_429_p2 & icmp_ln47_fu_434_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op92_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (r_sm_head1_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_246 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_250 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_095_reg_310 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1248_reg_246 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_191 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256 = 'bx;

always @ (*) begin
    ap_predicate_op92_read_state3 = ((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_373_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_379_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_434_p2 = ((ap_sig_allocacmp_t_load == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_459_p2 = ((select_ln46_fu_451_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_446_p2 = (icmp_ln46_reg_1000 | and_ln45_fu_440_p2);

assign r_sm_head1_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301}, {ap_phi_reg_pp0_iter3_p_0_0_095_reg_310}};

assign select_ln46_8_fu_391_p3 = ((icmp_ln46_fu_379_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_385_p2);

assign select_ln46_fu_451_p3 = ((or_ln46_fu_446_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_t_load);

assign t_12_fu_465_p2 = (select_ln46_fu_451_p3 + 3'd1);

assign trunc_ln50_fu_567_p1 = mac_sm_dout[9:0];

assign xor_ln45_fu_429_p2 = (icmp_ln46_reg_1000 ^ 1'd1);

endmodule //ATTN11_do_adapt_30
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_31 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qq_sm_head2_dout,
        qq_sm_head2_num_data_valid,
        qq_sm_head2_fifo_cap,
        qq_sm_head2_empty_n,
        qq_sm_head2_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] qq_sm_head2_dout;
input  [13:0] qq_sm_head2_num_data_valid;
input  [13:0] qq_sm_head2_fifo_cap;
input   qq_sm_head2_empty_n;
output   qq_sm_head2_read;
output  [23:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg qq_sm_head2_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_233_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_4_reg_647;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    qq_sm_head2_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
wire   [0:0] or_ln79_fu_269_p2;
reg   [0:0] or_ln79_reg_623;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln86_fu_277_p1;
reg   [2:0] trunc_ln86_reg_633;
reg   [2:0] trunc_ln86_4_reg_640;
wire   [0:0] icmp_ln83_4_fu_305_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_11_fu_297_p3;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12165_fu_62;
wire   [2:0] select_ln79_26_fu_425_p3;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12165_load;
reg   [2:0] p_0_0_01_267_fu_66;
wire   [2:0] select_ln79_25_fu_418_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_267_load;
reg   [2:0] p_0_0_0_0_0_069_fu_70;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_069_load;
reg   [2:0] p_0_0_01_1_171_fu_74;
wire   [2:0] select_ln79_23_fu_404_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_171_load;
reg   [2:0] p_0_0_01_1_273_fu_78;
wire   [2:0] select_ln79_fu_397_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_273_load;
reg   [2:0] p_0_0_1_0_0_075_fu_82;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_075_load;
reg   [7:0] indvar_flatten_fu_86;
wire   [7:0] select_ln79_28_fu_317_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [12:0] indvar_flatten18_fu_90;
wire   [12:0] add_ln78_fu_227_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_245_p2;
wire   [0:0] icmp_ln83_fu_257_p2;
wire   [0:0] xor_ln78_fu_251_p2;
wire   [0:0] and_ln78_fu_263_p2;
wire   [2:0] add_ln83_fu_291_p2;
wire   [7:0] add_ln79_fu_311_p2;
wire   [2:0] select_ln79_24_fu_411_p3;
wire   [2:0] select_ln79_27_fu_432_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_136;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12165_fu_62 = 3'd0;
//#0 p_0_0_01_267_fu_66 = 3'd0;
//#0 p_0_0_0_0_0_069_fu_70 = 3'd0;
//#0 p_0_0_01_1_171_fu_74 = 3'd0;
//#0 p_0_0_01_1_273_fu_78 = 3'd0;
//#0 p_0_0_1_0_0_075_fu_82 = 3'd0;
//#0 indvar_flatten_fu_86 = 8'd0;
//#0 indvar_flatten18_fu_90 = 13'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
            indvar_flatten18_fu_90 <= add_ln78_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_90 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
            indvar_flatten_fu_86 <= select_ln79_28_fu_317_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        p_0_0_01_12165_fu_62 <= select_ln79_26_fu_425_p3;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_171_fu_74 <= select_ln79_23_fu_404_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_1_273_fu_78 <= select_ln79_fu_397_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_01_267_fu_66 <= select_ln79_25_fu_418_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_0_0_0_069_fu_70 <= trunc_ln86_reg_633;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_136)) begin
    p_0_0_1_0_0_075_fu_82 <= trunc_ln86_4_reg_640;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_124)) begin
    if ((icmp_ln78_fu_233_p2 == 1'd0)) begin
        t_fu_58 <= t_11_fu_297_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        t_fu_58 <= 3'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln83_4_reg_647 <= icmp_ln83_4_fu_305_p2;
        or_ln79_reg_623 <= or_ln79_fu_269_p2;
        trunc_ln86_4_reg_640 <= {{qq_sm_head2_dout[5:3]}};
        trunc_ln86_reg_633 <= trunc_ln86_fu_277_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_4_reg_647 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_4_reg_647 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_233_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12165_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12165_load = p_0_0_01_12165_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_171_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_171_load = p_0_0_01_1_171_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_273_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_273_load = p_0_0_01_1_273_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_267_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_267_load = p_0_0_01_267_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_069_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_069_load = p_0_0_0_0_0_069_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_075_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_075_load = p_0_0_1_0_0_075_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_233_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head2_blk_n = qq_sm_head2_empty_n;
    end else begin
        qq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_233_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head2_read = 1'b1;
    end else begin
        qq_sm_head2_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_227_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 13'd1);

assign add_ln79_fu_311_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln83_fu_291_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{trunc_ln86_4_reg_640}, {select_ln79_fu_397_p3}}, {select_ln79_23_fu_404_p3}}, {select_ln79_24_fu_411_p3}}, {trunc_ln86_reg_633}}, {select_ln79_25_fu_418_p3}}, {select_ln79_26_fu_425_p3}}, {select_ln79_27_fu_432_p3}};

assign and_ln78_fu_263_p2 = (xor_ln78_fu_251_p2 & icmp_ln83_fu_257_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_233_p2 == 1'd0) & (qq_sm_head2_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln83_4_reg_647 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_124 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_136 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_233_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_245_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln83_4_fu_305_p2 = ((t_11_fu_297_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_257_p2 = ((ap_sig_allocacmp_t_load == 3'd4) ? 1'b1 : 1'b0);

assign or_ln79_fu_269_p2 = (icmp_ln79_fu_245_p2 | and_ln78_fu_263_p2);

assign select_ln79_23_fu_404_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_273_load);

assign select_ln79_24_fu_411_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_171_load);

assign select_ln79_25_fu_418_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_069_load);

assign select_ln79_26_fu_425_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_267_load);

assign select_ln79_27_fu_432_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12165_load);

assign select_ln79_28_fu_317_p3 = ((icmp_ln79_fu_245_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_311_p2);

assign select_ln79_fu_397_p3 = ((or_ln79_reg_623[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_075_load);

assign start_out = real_start;

assign t_11_fu_297_p3 = ((or_ln79_fu_269_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_291_p2);

assign trunc_ln86_fu_277_p1 = qq_sm_head2_dout[2:0];

assign xor_ln78_fu_251_p2 = (icmp_ln79_fu_245_p2 ^ 1'd1);

endmodule //ATTN11_do_adapt_31
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_35 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        r_sm_head2_din,
        r_sm_head2_num_data_valid,
        r_sm_head2_fifo_cap,
        r_sm_head2_full_n,
        r_sm_head2_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [139:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] r_sm_head2_din;
input  [9:0] r_sm_head2_num_data_valid;
input  [9:0] r_sm_head2_fifo_cap;
input   r_sm_head2_full_n;
output   r_sm_head2_write;

reg ap_idle;
reg mac_sm_read;
reg r_sm_head2_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_996;
reg   [0:0] icmp_ln45_reg_996_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1006;
reg    ap_predicate_op92_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_373_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    r_sm_head2_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_379_p2;
reg   [0:0] icmp_ln46_reg_1000;
wire   [0:0] icmp_ln50_fu_459_p2;
wire   [9:0] trunc_ln50_fu_567_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_194_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_191;
reg   [9:0] ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
reg   [9:0] ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
reg   [9:0] ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
reg   [9:0] ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
reg   [9:0] ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
reg   [9:0] ap_phi_mux_empty_1247_phi_fu_249_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1247_reg_246;
reg   [9:0] ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
reg   [9:0] ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
reg   [9:0] ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
reg   [9:0] ap_phi_mux_p_0_0_0_299_phi_fu_286_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
reg   [9:0] ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_095_reg_310;
reg   [2:0] t_fu_118;
wire   [2:0] t_10_fu_465_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [7:0] indvar_flatten_fu_122;
wire   [7:0] select_ln46_7_fu_391_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten34_fu_126;
wire   [14:0] add_ln45_fu_367_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [9:0] p_0_0_094_fu_130;
reg   [9:0] p_0_0_0_12696_fu_134;
reg   [9:0] p_0_0_0_298_fu_138;
reg   [9:0] p_0_0_0_3100_fu_142;
reg   [9:0] p_0_0_0_4102_fu_146;
reg   [9:0] p_0_0_0_5104_fu_150;
reg   [9:0] p_0_0_0_1106_fu_154;
reg   [9:0] p_0_0_0_1_1108_fu_158;
reg   [9:0] p_0_0_0_1_2110_fu_162;
reg   [9:0] p_0_0_0_1_3112_fu_166;
reg   [9:0] p_0_0_0_1_4114_fu_170;
reg   [9:0] p_0_0_0_1_5116_fu_174;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_385_p2;
wire   [0:0] icmp_ln47_fu_434_p2;
wire   [0:0] xor_ln45_fu_429_p2;
wire   [0:0] and_ln45_fu_440_p2;
wire   [0:0] or_ln46_fu_446_p2;
wire   [2:0] select_ln46_fu_451_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_246;
reg    ap_condition_250;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_118 = 3'd0;
//#0 indvar_flatten_fu_122 = 8'd0;
//#0 indvar_flatten34_fu_126 = 15'd0;
//#0 p_0_0_094_fu_130 = 10'd0;
//#0 p_0_0_0_12696_fu_134 = 10'd0;
//#0 p_0_0_0_298_fu_138 = 10'd0;
//#0 p_0_0_0_3100_fu_142 = 10'd0;
//#0 p_0_0_0_4102_fu_146 = 10'd0;
//#0 p_0_0_0_5104_fu_150 = 10'd0;
//#0 p_0_0_0_1106_fu_154 = 10'd0;
//#0 p_0_0_0_1_1108_fu_158 = 10'd0;
//#0 p_0_0_0_1_2110_fu_162 = 10'd0;
//#0 p_0_0_0_1_3112_fu_166 = 10'd0;
//#0 p_0_0_0_1_4114_fu_170 = 10'd0;
//#0 p_0_0_0_1_5116_fu_174 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1006 == 1'd0) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= p_0_0_094_fu_130;
        end else if (((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= trunc_ln50_fu_567_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter2_p_0_0_095_reg_310;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1006 == 1'd0) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= p_0_0_0_1106_fu_154;
        end else if (((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= {{mac_sm_dout[79:70]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_246)) begin
        if ((icmp_ln45_fu_373_p2 == 1'd0)) begin
            indvar_flatten34_fu_126 <= add_ln45_fu_367_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_126 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_246)) begin
        if ((icmp_ln45_fu_373_p2 == 1'd0)) begin
            indvar_flatten_fu_122 <= select_ln46_7_fu_391_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_122 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_250)) begin
        if ((icmp_ln45_reg_996 == 1'd0)) begin
            t_fu_118 <= t_10_fu_465_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_118 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_996 <= icmp_ln45_fu_373_p2;
        icmp_ln45_reg_996_pp0_iter1_reg <= icmp_ln45_reg_996;
        icmp_ln46_reg_1000 <= icmp_ln46_fu_379_p2;
        icmp_ln50_reg_1006 <= icmp_ln50_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter0_p_0_0_095_reg_310;
        ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter1_p_0_0_095_reg_310;
        ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_094_fu_130 <= ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4;
        p_0_0_0_1106_fu_154 <= ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4;
        p_0_0_0_12696_fu_134 <= ap_phi_mux_p_0_0_0_299_phi_fu_286_p4;
        p_0_0_0_1_1108_fu_158 <= ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4;
        p_0_0_0_1_2110_fu_162 <= ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4;
        p_0_0_0_1_3112_fu_166 <= ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4;
        p_0_0_0_1_4114_fu_170 <= ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4;
        p_0_0_0_1_5116_fu_174 <= ap_phi_mux_empty_phi_fu_194_p4;
        p_0_0_0_298_fu_138 <= ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4;
        p_0_0_0_3100_fu_142 <= ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4;
        p_0_0_0_4102_fu_146 <= ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4;
        p_0_0_0_5104_fu_150 <= ap_phi_mux_empty_1247_phi_fu_249_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_373_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_empty_1247_phi_fu_249_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_empty_1247_phi_fu_249_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_empty_1247_phi_fu_249_p4 = ap_phi_reg_pp0_iter2_empty_1247_reg_246;
        end
    end else begin
        ap_phi_mux_empty_1247_phi_fu_249_p4 = ap_phi_reg_pp0_iter2_empty_1247_reg_246;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_194_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_194_p4 = {{mac_sm_dout[139:130]}};
        end else begin
            ap_phi_mux_empty_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_empty_reg_191;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_empty_reg_191;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = p_0_0_0_12696_fu_134;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
        end
    end else begin
        ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = p_0_0_0_1_1108_fu_158;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = {{mac_sm_dout[89:80]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = p_0_0_0_1_2110_fu_162;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = {{mac_sm_dout[99:90]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = p_0_0_0_1_3112_fu_166;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = {{mac_sm_dout[109:100]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = p_0_0_0_1_4114_fu_170;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = {{mac_sm_dout[119:110]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = p_0_0_0_1_5116_fu_174;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = {{mac_sm_dout[129:120]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = p_0_0_0_298_fu_138;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
        end
    end else begin
        ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = p_0_0_0_3100_fu_142;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
        end
    end else begin
        ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = p_0_0_0_4102_fu_146;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = {{mac_sm_dout[49:40]}};
        end else begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
        end
    end else begin
        ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = p_0_0_0_5104_fu_150;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
        end
    end else begin
        ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op92_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op92_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_sm_head2_blk_n = r_sm_head2_full_n;
    end else begin
        r_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_sm_head2_write = 1'b1;
    end else begin
        r_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_367_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 15'd1);

assign add_ln46_fu_385_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln45_fu_440_p2 = (xor_ln45_fu_429_p2 & icmp_ln47_fu_434_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op92_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (r_sm_head2_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_246 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_250 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_095_reg_310 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1247_reg_246 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_191 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256 = 'bx;

always @ (*) begin
    ap_predicate_op92_read_state3 = ((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_373_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_379_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_434_p2 = ((ap_sig_allocacmp_t_load == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_459_p2 = ((select_ln46_fu_451_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_446_p2 = (icmp_ln46_reg_1000 | and_ln45_fu_440_p2);

assign r_sm_head2_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301}, {ap_phi_reg_pp0_iter3_p_0_0_095_reg_310}};

assign select_ln46_7_fu_391_p3 = ((icmp_ln46_fu_379_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_385_p2);

assign select_ln46_fu_451_p3 = ((or_ln46_fu_446_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_t_load);

assign t_10_fu_465_p2 = (select_ln46_fu_451_p3 + 3'd1);

assign trunc_ln50_fu_567_p1 = mac_sm_dout[9:0];

assign xor_ln45_fu_429_p2 = (icmp_ln46_reg_1000 ^ 1'd1);

endmodule //ATTN11_do_adapt_35
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        resi_sm_dout,
        resi_sm_num_data_valid,
        resi_sm_fifo_cap,
        resi_sm_empty_n,
        resi_sm_read,
        resi_o_sm_din,
        resi_o_sm_num_data_valid,
        resi_o_sm_fifo_cap,
        resi_o_sm_full_n,
        resi_o_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [51:0] resi_sm_dout;
input  [14:0] resi_sm_num_data_valid;
input  [14:0] resi_sm_fifo_cap;
input   resi_sm_empty_n;
output   resi_sm_read;
output  [25:0] resi_o_sm_din;
input  [9:0] resi_o_sm_num_data_valid;
input  [9:0] resi_o_sm_fifo_cap;
input   resi_o_sm_full_n;
output   resi_o_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg resi_sm_read;
reg resi_o_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_446;
reg   [0:0] icmp_ln45_reg_446_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_456;
reg    ap_predicate_op62_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_203_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    resi_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    resi_o_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_209_p2;
reg   [0:0] icmp_ln46_reg_450;
wire   [0:0] icmp_ln50_fu_289_p2;
wire   [12:0] trunc_ln50_fu_327_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [12:0] ap_phi_mux_empty_phi_fu_114_p4;
wire   [12:0] ap_phi_reg_pp0_iter2_empty_reg_111;
reg   [12:0] ap_phi_mux_empty_1246_phi_fu_124_p4;
wire   [12:0] ap_phi_reg_pp0_iter2_empty_1246_reg_121;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_0_157_reg_131;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_0_157_reg_131;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_0_157_reg_131;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_0_157_reg_131;
wire   [12:0] ap_phi_reg_pp0_iter0_p_0_0_055_reg_140;
reg   [12:0] ap_phi_reg_pp0_iter1_p_0_0_055_reg_140;
reg   [12:0] ap_phi_reg_pp0_iter2_p_0_0_055_reg_140;
reg   [12:0] ap_phi_reg_pp0_iter3_p_0_0_055_reg_140;
reg   [1:0] t_fu_78;
wire   [1:0] t_9_fu_295_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [1:0] ap_sig_allocacmp_t_load;
reg   [8:0] indvar_flatten_fu_82;
wire   [8:0] select_ln46_6_fu_221_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten14_fu_86;
wire   [14:0] add_ln45_fu_197_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten14_load;
reg   [12:0] p_0_0_054_fu_90;
reg   [12:0] p_0_0_0_156_fu_94;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln46_fu_215_p2;
wire   [0:0] icmp_ln47_fu_264_p2;
wire   [0:0] xor_ln45_fu_259_p2;
wire   [0:0] and_ln45_fu_270_p2;
wire   [0:0] or_ln46_fu_276_p2;
wire   [1:0] select_ln46_fu_281_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_170;
reg    ap_condition_174;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_78 = 2'd0;
//#0 indvar_flatten_fu_82 = 9'd0;
//#0 indvar_flatten14_fu_86 = 15'd0;
//#0 p_0_0_054_fu_90 = 13'd0;
//#0 p_0_0_0_156_fu_94 = 13'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_456 == 1'd0) & (icmp_ln45_reg_446_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_055_reg_140 <= p_0_0_054_fu_90;
        end else if (((icmp_ln50_reg_456 == 1'd1) & (icmp_ln45_reg_446_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_055_reg_140 <= trunc_ln50_fu_327_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_055_reg_140 <= ap_phi_reg_pp0_iter2_p_0_0_055_reg_140;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_456 == 1'd0) & (icmp_ln45_reg_446_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_157_reg_131 <= p_0_0_0_156_fu_94;
        end else if (((icmp_ln50_reg_456 == 1'd1) & (icmp_ln45_reg_446_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_157_reg_131 <= {{resi_sm_dout[38:26]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_157_reg_131 <= ap_phi_reg_pp0_iter2_p_0_0_0_157_reg_131;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_170)) begin
        if ((icmp_ln45_fu_203_p2 == 1'd0)) begin
            indvar_flatten14_fu_86 <= add_ln45_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten14_fu_86 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_170)) begin
        if ((icmp_ln45_fu_203_p2 == 1'd0)) begin
            indvar_flatten_fu_82 <= select_ln46_6_fu_221_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_174)) begin
        if ((icmp_ln45_reg_446 == 1'd0)) begin
            t_fu_78 <= t_9_fu_295_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_78 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_446 <= icmp_ln45_fu_203_p2;
        icmp_ln45_reg_446_pp0_iter1_reg <= icmp_ln45_reg_446;
        icmp_ln46_reg_450 <= icmp_ln46_fu_209_p2;
        icmp_ln50_reg_456 <= icmp_ln50_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_055_reg_140 <= ap_phi_reg_pp0_iter0_p_0_0_055_reg_140;
        ap_phi_reg_pp0_iter1_p_0_0_0_157_reg_131 <= ap_phi_reg_pp0_iter0_p_0_0_0_157_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_055_reg_140 <= ap_phi_reg_pp0_iter1_p_0_0_055_reg_140;
        ap_phi_reg_pp0_iter2_p_0_0_0_157_reg_131 <= ap_phi_reg_pp0_iter1_p_0_0_0_157_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_446_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_054_fu_90 <= ap_phi_mux_empty_1246_phi_fu_124_p4;
        p_0_0_0_156_fu_94 <= ap_phi_mux_empty_phi_fu_114_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_203_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_446_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_446_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_456 == 1'd0)) begin
            ap_phi_mux_empty_1246_phi_fu_124_p4 = 13'd0;
        end else if ((icmp_ln50_reg_456 == 1'd1)) begin
            ap_phi_mux_empty_1246_phi_fu_124_p4 = {{resi_sm_dout[25:13]}};
        end else begin
            ap_phi_mux_empty_1246_phi_fu_124_p4 = ap_phi_reg_pp0_iter2_empty_1246_reg_121;
        end
    end else begin
        ap_phi_mux_empty_1246_phi_fu_124_p4 = ap_phi_reg_pp0_iter2_empty_1246_reg_121;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_446_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_456 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_114_p4 = 13'd0;
        end else if ((icmp_ln50_reg_456 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_114_p4 = {{resi_sm_dout[51:39]}};
        end else begin
            ap_phi_mux_empty_phi_fu_114_p4 = ap_phi_reg_pp0_iter2_empty_reg_111;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_114_p4 = ap_phi_reg_pp0_iter2_empty_reg_111;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten14_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten14_load = indvar_flatten14_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_t_load = 2'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_78;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resi_o_sm_blk_n = resi_o_sm_full_n;
    end else begin
        resi_o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resi_o_sm_write = 1'b1;
    end else begin
        resi_o_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op62_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        resi_sm_blk_n = resi_sm_empty_n;
    end else begin
        resi_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op62_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        resi_sm_read = 1'b1;
    end else begin
        resi_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_197_p2 = (ap_sig_allocacmp_indvar_flatten14_load + 15'd1);

assign add_ln46_fu_215_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign and_ln45_fu_270_p2 = (xor_ln45_fu_259_p2 & icmp_ln47_fu_264_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op62_read_state3 == 1'b1) & (resi_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (resi_o_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_170 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_174 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_055_reg_140 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_157_reg_131 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1246_reg_121 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_111 = 'bx;

always @ (*) begin
    ap_predicate_op62_read_state3 = ((icmp_ln50_reg_456 == 1'd1) & (icmp_ln45_reg_446_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln45_fu_203_p2 = ((ap_sig_allocacmp_indvar_flatten14_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_209_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_264_p2 = ((ap_sig_allocacmp_t_load == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_289_p2 = ((select_ln46_fu_281_p3 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_276_p2 = (icmp_ln46_reg_450 | and_ln45_fu_270_p2);

assign resi_o_sm_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_157_reg_131}, {ap_phi_reg_pp0_iter3_p_0_0_055_reg_140}};

assign select_ln46_6_fu_221_p3 = ((icmp_ln46_fu_209_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_215_p2);

assign select_ln46_fu_281_p3 = ((or_ln46_fu_276_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_t_load);

assign start_out = real_start;

assign t_9_fu_295_p2 = (select_ln46_fu_281_p3 + 2'd1);

assign trunc_ln50_fu_327_p1 = resi_sm_dout[12:0];

assign xor_ln45_fu_259_p2 = (icmp_ln46_reg_450 ^ 1'd1);

endmodule //ATTN11_do_adapt_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_46 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lnq_sm_cp2_dout,
        lnq_sm_cp2_num_data_valid,
        lnq_sm_cp2_fifo_cap,
        lnq_sm_cp2_empty_n,
        lnq_sm_cp2_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] lnq_sm_cp2_dout;
input  [2:0] lnq_sm_cp2_num_data_valid;
input  [2:0] lnq_sm_cp2_fifo_cap;
input   lnq_sm_cp2_empty_n;
output   lnq_sm_cp2_read;
output  [35:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg lnq_sm_cp2_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_297_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_3_reg_868;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lnq_sm_cp2_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln79_fu_303_p2;
reg   [0:0] icmp_ln79_reg_834;
wire   [2:0] trunc_ln86_fu_311_p1;
reg   [2:0] trunc_ln86_reg_840;
reg   [2:0] trunc_ln86_reg_840_pp0_iter1_reg;
reg   [2:0] trunc_ln86_8_reg_847;
reg   [2:0] trunc_ln86_8_reg_847_pp0_iter1_reg;
wire   [0:0] or_ln79_fu_386_p2;
reg   [0:0] or_ln79_reg_854;
wire   [0:0] icmp_ln83_3_fu_405_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_8_fu_397_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12181_fu_62;
wire   [2:0] select_ln79_20_fu_539_p3;
reg    ap_loop_init_pp0_iter2_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12181_load;
reg   [2:0] p_0_0_01_283_fu_66;
wire   [2:0] select_ln79_19_fu_532_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_283_load;
reg   [2:0] p_0_0_01_385_fu_70;
wire   [2:0] select_ln79_18_fu_525_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_385_load;
reg   [2:0] p_0_0_01_487_fu_74;
wire   [2:0] select_ln79_17_fu_518_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_487_load;
reg   [2:0] p_0_0_0_0_0_089_fu_78;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_089_load;
reg   [2:0] p_0_0_01_1_191_fu_82;
wire   [2:0] select_ln79_15_fu_504_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_191_load;
reg   [2:0] p_0_0_01_1_293_fu_86;
wire   [2:0] select_ln79_14_fu_497_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_293_load;
reg   [2:0] p_0_0_01_1_395_fu_90;
wire   [2:0] select_ln79_13_fu_490_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_395_load;
reg   [2:0] p_0_0_01_1_497_fu_94;
wire   [2:0] select_ln79_fu_483_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_497_load;
reg   [2:0] p_0_0_1_0_0_099_fu_98;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_099_load;
reg   [8:0] indvar_flatten_fu_102;
wire   [8:0] select_ln79_22_fu_331_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten22_fu_106;
wire   [14:0] add_ln78_fu_291_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten22_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln79_fu_325_p2;
wire   [0:0] icmp_ln83_fu_374_p2;
wire   [0:0] xor_ln78_fu_369_p2;
wire   [0:0] and_ln78_fu_380_p2;
wire   [2:0] add_ln83_fu_391_p2;
wire   [2:0] select_ln79_16_fu_511_p3;
wire   [2:0] select_ln79_21_fu_546_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_224;
reg    ap_condition_166;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12181_fu_62 = 3'd0;
//#0 p_0_0_01_283_fu_66 = 3'd0;
//#0 p_0_0_01_385_fu_70 = 3'd0;
//#0 p_0_0_01_487_fu_74 = 3'd0;
//#0 p_0_0_0_0_0_089_fu_78 = 3'd0;
//#0 p_0_0_01_1_191_fu_82 = 3'd0;
//#0 p_0_0_01_1_293_fu_86 = 3'd0;
//#0 p_0_0_01_1_395_fu_90 = 3'd0;
//#0 p_0_0_01_1_497_fu_94 = 3'd0;
//#0 p_0_0_1_0_0_099_fu_98 = 3'd0;
//#0 indvar_flatten_fu_102 = 9'd0;
//#0 indvar_flatten22_fu_106 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_224)) begin
        if ((icmp_ln78_fu_297_p2 == 1'd0)) begin
            indvar_flatten22_fu_106 <= add_ln78_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten22_fu_106 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_224)) begin
        if ((icmp_ln78_fu_297_p2 == 1'd0)) begin
            indvar_flatten_fu_102 <= select_ln79_22_fu_331_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_102 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_01_12181_fu_62 <= select_ln79_20_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_191_fu_82 <= select_ln79_15_fu_504_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_293_fu_86 <= select_ln79_14_fu_497_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_395_fu_90 <= select_ln79_13_fu_490_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_497_fu_94 <= select_ln79_fu_483_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_283_fu_66 <= select_ln79_19_fu_532_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_385_fu_70 <= select_ln79_18_fu_525_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_487_fu_74 <= select_ln79_17_fu_518_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_0_0_0_089_fu_78 <= trunc_ln86_reg_840_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_1_0_0_099_fu_98 <= trunc_ln86_8_reg_847_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_166)) begin
    t_fu_58 <= t_8_fu_397_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln79_reg_834 <= icmp_ln79_fu_303_p2;
        icmp_ln83_3_reg_868 <= icmp_ln83_3_fu_405_p2;
        or_ln79_reg_854 <= or_ln79_fu_386_p2;
        trunc_ln86_8_reg_847 <= {{lnq_sm_cp2_dout[5:3]}};
        trunc_ln86_8_reg_847_pp0_iter1_reg <= trunc_ln86_8_reg_847;
        trunc_ln86_reg_840 <= trunc_ln86_fu_311_p1;
        trunc_ln86_reg_840_pp0_iter1_reg <= trunc_ln86_reg_840;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_3_reg_868 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_3_reg_868 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_297_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten22_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten22_load = indvar_flatten22_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12181_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12181_load = p_0_0_01_12181_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_191_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_191_load = p_0_0_01_1_191_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_293_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_293_load = p_0_0_01_1_293_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_395_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_395_load = p_0_0_01_1_395_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_497_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_497_load = p_0_0_01_1_497_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_283_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_283_load = p_0_0_01_283_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_385_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_385_load = p_0_0_01_385_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_487_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_487_load = p_0_0_01_487_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_089_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_089_load = p_0_0_0_0_0_089_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_099_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_099_load = p_0_0_1_0_0_099_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_297_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp2_blk_n = lnq_sm_cp2_empty_n;
    end else begin
        lnq_sm_cp2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_297_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp2_read = 1'b1;
    end else begin
        lnq_sm_cp2_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_291_p2 = (ap_sig_allocacmp_indvar_flatten22_load + 15'd1);

assign add_ln79_fu_325_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln83_fu_391_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{{{{{trunc_ln86_8_reg_847_pp0_iter1_reg}, {select_ln79_fu_483_p3}}, {select_ln79_13_fu_490_p3}}, {select_ln79_14_fu_497_p3}}, {select_ln79_15_fu_504_p3}}, {select_ln79_16_fu_511_p3}}, {trunc_ln86_reg_840_pp0_iter1_reg}}, {select_ln79_17_fu_518_p3}}, {select_ln79_18_fu_525_p3}}, {select_ln79_19_fu_532_p3}}, {select_ln79_20_fu_539_p3}}, {select_ln79_21_fu_546_p3}};

assign and_ln78_fu_380_p2 = (xor_ln78_fu_369_p2 & icmp_ln83_fu_374_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_297_p2 == 1'd0) & (lnq_sm_cp2_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln83_3_reg_868 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_166 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_224 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_297_p2 = ((ap_sig_allocacmp_indvar_flatten22_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_303_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_3_fu_405_p2 = ((t_8_fu_397_p3 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_374_p2 = ((ap_sig_allocacmp_t_load == 3'd6) ? 1'b1 : 1'b0);

assign or_ln79_fu_386_p2 = (icmp_ln79_reg_834 | and_ln78_fu_380_p2);

assign select_ln79_13_fu_490_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_497_load);

assign select_ln79_14_fu_497_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_395_load);

assign select_ln79_15_fu_504_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_293_load);

assign select_ln79_16_fu_511_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_191_load);

assign select_ln79_17_fu_518_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_089_load);

assign select_ln79_18_fu_525_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_487_load);

assign select_ln79_19_fu_532_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_385_load);

assign select_ln79_20_fu_539_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_283_load);

assign select_ln79_21_fu_546_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12181_load);

assign select_ln79_22_fu_331_p3 = ((icmp_ln79_fu_303_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_325_p2);

assign select_ln79_fu_483_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_099_load);

assign start_out = real_start;

assign t_8_fu_397_p3 = ((or_ln79_fu_386_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_391_p2);

assign trunc_ln86_fu_311_p1 = lnq_sm_cp2_dout[2:0];

assign xor_ln78_fu_369_p2 = (icmp_ln79_reg_834 ^ 1'd1);

endmodule //ATTN11_do_adapt_46
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_49 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        k_sm_din,
        k_sm_num_data_valid,
        k_sm_fifo_cap,
        k_sm_full_n,
        k_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [239:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] k_sm_din;
input  [2:0] k_sm_num_data_valid;
input  [2:0] k_sm_fifo_cap;
input   k_sm_full_n;
output   k_sm_write;

reg ap_idle;
reg mac_sm_read;
reg k_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_1546;
reg   [0:0] icmp_ln45_reg_1546_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1556;
reg    ap_predicate_op122_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_543_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    k_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_549_p2;
reg   [0:0] icmp_ln46_reg_1550;
wire   [0:0] icmp_ln50_fu_629_p2;
wire   [9:0] trunc_ln50_fu_807_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_274_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_271;
reg   [9:0] ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
reg   [9:0] ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
reg   [9:0] ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
reg   [9:0] ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
reg   [9:0] ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
reg   [9:0] ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
reg   [9:0] ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
reg   [9:0] ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
reg   [9:0] ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
reg   [9:0] ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
reg   [9:0] ap_phi_mux_empty_1245_phi_fu_374_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1245_reg_371;
reg   [9:0] ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
reg   [9:0] ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
reg   [9:0] ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
reg   [9:0] ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
reg   [9:0] ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
reg   [9:0] ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
reg   [9:0] ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
reg   [9:0] ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
reg   [9:0] ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
reg   [9:0] ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480;
reg   [3:0] t_fu_158;
wire   [3:0] t_7_fu_635_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [3:0] ap_sig_allocacmp_t_load;
reg   [8:0] indvar_flatten_fu_162;
wire   [8:0] select_ln46_5_fu_561_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten54_fu_166;
wire   [14:0] add_ln45_fu_537_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten54_load;
reg   [9:0] p_0_0_0134_fu_170;
reg   [9:0] p_0_0_0_126136_fu_174;
reg   [9:0] p_0_0_0_2138_fu_178;
reg   [9:0] p_0_0_0_3140_fu_182;
reg   [9:0] p_0_0_0_4142_fu_186;
reg   [9:0] p_0_0_0_5144_fu_190;
reg   [9:0] p_0_0_0_6146_fu_194;
reg   [9:0] p_0_0_0_7148_fu_198;
reg   [9:0] p_0_0_0_8150_fu_202;
reg   [9:0] p_0_0_0_9152_fu_206;
reg   [9:0] p_0_0_0_10154_fu_210;
reg   [9:0] p_0_0_0_1156_fu_214;
reg   [9:0] p_0_0_0_1_1158_fu_218;
reg   [9:0] p_0_0_0_1_2160_fu_222;
reg   [9:0] p_0_0_0_1_3162_fu_226;
reg   [9:0] p_0_0_0_1_4164_fu_230;
reg   [9:0] p_0_0_0_1_5166_fu_234;
reg   [9:0] p_0_0_0_1_6168_fu_238;
reg   [9:0] p_0_0_0_1_7170_fu_242;
reg   [9:0] p_0_0_0_1_8172_fu_246;
reg   [9:0] p_0_0_0_1_9174_fu_250;
reg   [9:0] p_0_0_0_1_10176_fu_254;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln46_fu_555_p2;
wire   [0:0] icmp_ln47_fu_604_p2;
wire   [0:0] xor_ln45_fu_599_p2;
wire   [0:0] and_ln45_fu_610_p2;
wire   [0:0] or_ln46_fu_616_p2;
wire   [3:0] select_ln46_fu_621_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_336;
reg    ap_condition_340;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_158 = 4'd0;
//#0 indvar_flatten_fu_162 = 9'd0;
//#0 indvar_flatten54_fu_166 = 15'd0;
//#0 p_0_0_0134_fu_170 = 10'd0;
//#0 p_0_0_0_126136_fu_174 = 10'd0;
//#0 p_0_0_0_2138_fu_178 = 10'd0;
//#0 p_0_0_0_3140_fu_182 = 10'd0;
//#0 p_0_0_0_4142_fu_186 = 10'd0;
//#0 p_0_0_0_5144_fu_190 = 10'd0;
//#0 p_0_0_0_6146_fu_194 = 10'd0;
//#0 p_0_0_0_7148_fu_198 = 10'd0;
//#0 p_0_0_0_8150_fu_202 = 10'd0;
//#0 p_0_0_0_9152_fu_206 = 10'd0;
//#0 p_0_0_0_10154_fu_210 = 10'd0;
//#0 p_0_0_0_1156_fu_214 = 10'd0;
//#0 p_0_0_0_1_1158_fu_218 = 10'd0;
//#0 p_0_0_0_1_2160_fu_222 = 10'd0;
//#0 p_0_0_0_1_3162_fu_226 = 10'd0;
//#0 p_0_0_0_1_4164_fu_230 = 10'd0;
//#0 p_0_0_0_1_5166_fu_234 = 10'd0;
//#0 p_0_0_0_1_6168_fu_238 = 10'd0;
//#0 p_0_0_0_1_7170_fu_242 = 10'd0;
//#0 p_0_0_0_1_8172_fu_246 = 10'd0;
//#0 p_0_0_0_1_9174_fu_250 = 10'd0;
//#0 p_0_0_0_1_10176_fu_254 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1556 == 1'd0) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= p_0_0_0134_fu_170;
        end else if (((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= trunc_ln50_fu_807_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1556 == 1'd0) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= p_0_0_0_1156_fu_214;
        end else if (((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= {{mac_sm_dout[129:120]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_336)) begin
        if ((icmp_ln45_fu_543_p2 == 1'd0)) begin
            indvar_flatten54_fu_166 <= add_ln45_fu_537_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten54_fu_166 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_336)) begin
        if ((icmp_ln45_fu_543_p2 == 1'd0)) begin
            indvar_flatten_fu_162 <= select_ln46_5_fu_561_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_162 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_340)) begin
        if ((icmp_ln45_reg_1546 == 1'd0)) begin
            t_fu_158 <= t_7_fu_635_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_158 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_1546 <= icmp_ln45_fu_543_p2;
        icmp_ln45_reg_1546_pp0_iter1_reg <= icmp_ln45_reg_1546;
        icmp_ln46_reg_1550 <= icmp_ln46_fu_549_p2;
        icmp_ln50_reg_1556 <= icmp_ln50_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480;
        ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480;
        ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_0134_fu_170 <= ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4;
        p_0_0_0_10154_fu_210 <= ap_phi_mux_empty_1245_phi_fu_374_p4;
        p_0_0_0_1156_fu_214 <= ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4;
        p_0_0_0_126136_fu_174 <= ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4;
        p_0_0_0_1_10176_fu_254 <= ap_phi_mux_empty_phi_fu_274_p4;
        p_0_0_0_1_1158_fu_218 <= ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4;
        p_0_0_0_1_2160_fu_222 <= ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4;
        p_0_0_0_1_3162_fu_226 <= ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4;
        p_0_0_0_1_4164_fu_230 <= ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4;
        p_0_0_0_1_5166_fu_234 <= ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4;
        p_0_0_0_1_6168_fu_238 <= ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4;
        p_0_0_0_1_7170_fu_242 <= ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4;
        p_0_0_0_1_8172_fu_246 <= ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4;
        p_0_0_0_1_9174_fu_250 <= ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4;
        p_0_0_0_2138_fu_178 <= ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4;
        p_0_0_0_3140_fu_182 <= ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4;
        p_0_0_0_4142_fu_186 <= ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4;
        p_0_0_0_5144_fu_190 <= ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4;
        p_0_0_0_6146_fu_194 <= ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4;
        p_0_0_0_7148_fu_198 <= ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4;
        p_0_0_0_8150_fu_202 <= ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4;
        p_0_0_0_9152_fu_206 <= ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_543_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_empty_1245_phi_fu_374_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_empty_1245_phi_fu_374_p4 = {{mac_sm_dout[119:110]}};
        end else begin
            ap_phi_mux_empty_1245_phi_fu_374_p4 = ap_phi_reg_pp0_iter2_empty_1245_reg_371;
        end
    end else begin
        ap_phi_mux_empty_1245_phi_fu_374_p4 = ap_phi_reg_pp0_iter2_empty_1245_reg_371;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_274_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_274_p4 = {{mac_sm_dout[239:230]}};
        end else begin
            ap_phi_mux_empty_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_reg_271;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_reg_271;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = p_0_0_0_10154_fu_210;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = {{mac_sm_dout[109:100]}};
        end else begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
        end
    end else begin
        ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = p_0_0_0_126136_fu_174;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
        end
    end else begin
        ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = p_0_0_0_1_10176_fu_254;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = {{mac_sm_dout[229:220]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = p_0_0_0_1_1158_fu_218;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = {{mac_sm_dout[139:130]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = p_0_0_0_1_2160_fu_222;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = {{mac_sm_dout[149:140]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = p_0_0_0_1_3162_fu_226;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = {{mac_sm_dout[159:150]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = p_0_0_0_1_4164_fu_230;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = {{mac_sm_dout[169:160]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = p_0_0_0_1_5166_fu_234;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = {{mac_sm_dout[179:170]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = p_0_0_0_1_6168_fu_238;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = {{mac_sm_dout[189:180]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = p_0_0_0_1_7170_fu_242;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = {{mac_sm_dout[199:190]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = p_0_0_0_1_8172_fu_246;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = {{mac_sm_dout[209:200]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = p_0_0_0_1_9174_fu_250;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = {{mac_sm_dout[219:210]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = p_0_0_0_2138_fu_178;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
        end
    end else begin
        ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = p_0_0_0_3140_fu_182;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
        end
    end else begin
        ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = p_0_0_0_4142_fu_186;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = {{mac_sm_dout[49:40]}};
        end else begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
        end
    end else begin
        ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = p_0_0_0_5144_fu_190;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
        end
    end else begin
        ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = p_0_0_0_6146_fu_194;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
        end
    end else begin
        ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = p_0_0_0_7148_fu_198;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = {{mac_sm_dout[79:70]}};
        end else begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
        end
    end else begin
        ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = p_0_0_0_8150_fu_202;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = {{mac_sm_dout[89:80]}};
        end else begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
        end
    end else begin
        ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = p_0_0_0_9152_fu_206;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = {{mac_sm_dout[99:90]}};
        end else begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
        end
    end else begin
        ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten54_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten54_load = indvar_flatten54_fu_166;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 4'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        k_sm_blk_n = k_sm_full_n;
    end else begin
        k_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        k_sm_write = 1'b1;
    end else begin
        k_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op122_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op122_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_537_p2 = (ap_sig_allocacmp_indvar_flatten54_load + 15'd1);

assign add_ln46_fu_555_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign and_ln45_fu_610_p2 = (xor_ln45_fu_599_p2 & icmp_ln47_fu_604_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op122_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (k_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_336 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_340 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1245_reg_371 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_271 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390 = 'bx;

always @ (*) begin
    ap_predicate_op122_read_state3 = ((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_543_p2 = ((ap_sig_allocacmp_indvar_flatten54_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_549_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_604_p2 = ((ap_sig_allocacmp_t_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_629_p2 = ((select_ln46_fu_621_p3 == 4'd0) ? 1'b1 : 1'b0);

assign k_sm_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471}, {ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480}};

assign or_ln46_fu_616_p2 = (icmp_ln46_reg_1550 | and_ln45_fu_610_p2);

assign select_ln46_5_fu_561_p3 = ((icmp_ln46_fu_549_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_555_p2);

assign select_ln46_fu_621_p3 = ((or_ln46_fu_616_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_t_load);

assign t_7_fu_635_p2 = (select_ln46_fu_621_p3 + 4'd1);

assign trunc_ln50_fu_807_p1 = mac_sm_dout[9:0];

assign xor_ln45_fu_599_p2 = (icmp_ln46_reg_1550 ^ 1'd1);

endmodule //ATTN11_do_adapt_49
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        resi_i_sm_dout,
        resi_i_sm_num_data_valid,
        resi_i_sm_fifo_cap,
        resi_i_sm_empty_n,
        resi_i_sm_read,
        resi_sm_din,
        resi_sm_num_data_valid,
        resi_sm_fifo_cap,
        resi_sm_full_n,
        resi_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [25:0] resi_i_sm_dout;
input  [9:0] resi_i_sm_num_data_valid;
input  [9:0] resi_i_sm_fifo_cap;
input   resi_i_sm_empty_n;
output   resi_i_sm_read;
output  [51:0] resi_sm_din;
input  [14:0] resi_sm_num_data_valid;
input  [14:0] resi_sm_fifo_cap;
input   resi_sm_full_n;
output   resi_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg resi_i_sm_read;
reg resi_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln83_2_reg_438;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln78_fu_171_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    resi_i_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    resi_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln79_fu_177_p2;
reg   [0:0] icmp_ln79_reg_412;
wire   [0:0] or_ln79_fu_244_p2;
reg   [0:0] or_ln79_reg_418;
wire   [12:0] trunc_ln86_fu_251_p1;
reg   [12:0] trunc_ln86_reg_424;
reg   [12:0] trunc_ln86_s_reg_431;
wire   [0:0] icmp_ln83_2_fu_279_p2;
reg   [1:0] t_fu_60;
wire   [1:0] t_6_fu_271_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [1:0] ap_sig_allocacmp_t_load;
reg   [12:0] p_0_0_0_0_0_049_fu_64;
reg    ap_loop_init_pp0_iter2_reg;
reg   [12:0] ap_sig_allocacmp_p_0_0_0_0_0_049_load;
reg   [12:0] p_0_0_1_0_0_051_fu_68;
reg   [12:0] ap_sig_allocacmp_p_0_0_1_0_0_051_load;
reg   [8:0] indvar_flatten_fu_72;
wire   [8:0] select_ln79_12_fu_189_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten14_fu_76;
wire   [14:0] add_ln78_fu_165_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten14_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln79_fu_183_p2;
wire   [0:0] icmp_ln83_fu_232_p2;
wire   [0:0] xor_ln78_fu_227_p2;
wire   [0:0] and_ln78_fu_238_p2;
wire   [1:0] add_ln83_fu_265_p2;
wire   [12:0] select_ln79_fu_309_p3;
wire   [12:0] select_ln79_11_fu_316_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_162;
reg    ap_condition_135;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_60 = 2'd0;
//#0 p_0_0_0_0_0_049_fu_64 = 13'd0;
//#0 p_0_0_1_0_0_051_fu_68 = 13'd0;
//#0 indvar_flatten_fu_72 = 9'd0;
//#0 indvar_flatten14_fu_76 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((icmp_ln78_fu_171_p2 == 1'd0)) begin
            indvar_flatten14_fu_76 <= add_ln78_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten14_fu_76 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((icmp_ln78_fu_171_p2 == 1'd0)) begin
            indvar_flatten_fu_72 <= select_ln79_12_fu_189_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_0_0_0_049_fu_64 <= trunc_ln86_reg_424;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_1_0_0_051_fu_68 <= trunc_ln86_s_reg_431;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_135)) begin
    t_fu_60 <= t_6_fu_271_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln79_reg_412 <= icmp_ln79_fu_177_p2;
        icmp_ln83_2_reg_438 <= icmp_ln83_2_fu_279_p2;
        or_ln79_reg_418 <= or_ln79_fu_244_p2;
        trunc_ln86_reg_424 <= trunc_ln86_fu_251_p1;
        trunc_ln86_s_reg_431 <= {{resi_i_sm_dout[25:13]}};
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten14_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten14_load = indvar_flatten14_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_049_load = 13'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_049_load = p_0_0_0_0_0_049_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_051_load = 13'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_051_load = p_0_0_1_0_0_051_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_t_load = 2'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_60;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_blk_n = resi_i_sm_empty_n;
    end else begin
        resi_i_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_read = 1'b1;
    end else begin
        resi_i_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_2_reg_438 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        resi_sm_blk_n = resi_sm_full_n;
    end else begin
        resi_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_2_reg_438 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        resi_sm_write = 1'b1;
    end else begin
        resi_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_165_p2 = (ap_sig_allocacmp_indvar_flatten14_load + 15'd1);

assign add_ln79_fu_183_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln83_fu_265_p2 = (ap_sig_allocacmp_t_load + 2'd1);

assign and_ln78_fu_238_p2 = (xor_ln78_fu_227_p2 & icmp_ln83_fu_232_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (resi_i_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln83_2_reg_438 == 1'd1) & (resi_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_135 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_162 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_171_p2 = ((ap_sig_allocacmp_indvar_flatten14_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_177_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_2_fu_279_p2 = ((t_6_fu_271_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_232_p2 = ((ap_sig_allocacmp_t_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln79_fu_244_p2 = (icmp_ln79_reg_412 | and_ln78_fu_238_p2);

assign resi_sm_din = {{{{trunc_ln86_s_reg_431}, {select_ln79_fu_309_p3}}, {trunc_ln86_reg_424}}, {select_ln79_11_fu_316_p3}};

assign select_ln79_11_fu_316_p3 = ((or_ln79_reg_418[0:0] == 1'b1) ? 13'd0 : ap_sig_allocacmp_p_0_0_0_0_0_049_load);

assign select_ln79_12_fu_189_p3 = ((icmp_ln79_fu_177_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_183_p2);

assign select_ln79_fu_309_p3 = ((or_ln79_reg_418[0:0] == 1'b1) ? 13'd0 : ap_sig_allocacmp_p_0_0_1_0_0_051_load);

assign start_out = real_start;

assign t_6_fu_271_p3 = ((or_ln79_fu_244_p2[0:0] == 1'b1) ? 2'd1 : add_ln83_fu_265_p2);

assign trunc_ln86_fu_251_p1 = resi_i_sm_dout[12:0];

assign xor_ln78_fu_227_p2 = (icmp_ln79_reg_412 ^ 1'd1);

endmodule //ATTN11_do_adapt_5
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_50 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lnq_sm_cp3_dout,
        lnq_sm_cp3_num_data_valid,
        lnq_sm_cp3_fifo_cap,
        lnq_sm_cp3_empty_n,
        lnq_sm_cp3_read,
        adpt_sm_din,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_full_n,
        adpt_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] lnq_sm_cp3_dout;
input  [2:0] lnq_sm_cp3_num_data_valid;
input  [2:0] lnq_sm_cp3_fifo_cap;
input   lnq_sm_cp3_empty_n;
output   lnq_sm_cp3_read;
output  [35:0] adpt_sm_din;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_full_n;
output   adpt_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg lnq_sm_cp3_read;
reg adpt_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln78_fu_297_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln83_1_reg_868;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lnq_sm_cp3_blk_n;
wire    ap_block_pp0_stage0;
reg    adpt_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln79_fu_303_p2;
reg   [0:0] icmp_ln79_reg_834;
wire   [2:0] trunc_ln86_fu_311_p1;
reg   [2:0] trunc_ln86_reg_840;
reg   [2:0] trunc_ln86_reg_840_pp0_iter1_reg;
reg   [2:0] trunc_ln86_7_reg_847;
reg   [2:0] trunc_ln86_7_reg_847_pp0_iter1_reg;
wire   [0:0] or_ln79_fu_386_p2;
reg   [0:0] or_ln79_reg_854;
wire   [0:0] icmp_ln83_1_fu_405_p2;
reg   [2:0] t_fu_58;
wire   [2:0] t_5_fu_397_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [2:0] p_0_0_01_12181_fu_62;
wire   [2:0] select_ln79_8_fu_539_p3;
reg    ap_loop_init_pp0_iter2_reg;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_12181_load;
reg   [2:0] p_0_0_01_283_fu_66;
wire   [2:0] select_ln79_7_fu_532_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_283_load;
reg   [2:0] p_0_0_01_385_fu_70;
wire   [2:0] select_ln79_6_fu_525_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_385_load;
reg   [2:0] p_0_0_01_487_fu_74;
wire   [2:0] select_ln79_5_fu_518_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_487_load;
reg   [2:0] p_0_0_0_0_0_089_fu_78;
reg   [2:0] ap_sig_allocacmp_p_0_0_0_0_0_089_load;
reg   [2:0] p_0_0_01_1_191_fu_82;
wire   [2:0] select_ln79_3_fu_504_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_191_load;
reg   [2:0] p_0_0_01_1_293_fu_86;
wire   [2:0] select_ln79_2_fu_497_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_293_load;
reg   [2:0] p_0_0_01_1_395_fu_90;
wire   [2:0] select_ln79_1_fu_490_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_395_load;
reg   [2:0] p_0_0_01_1_497_fu_94;
wire   [2:0] select_ln79_fu_483_p3;
reg   [2:0] ap_sig_allocacmp_p_0_0_01_1_497_load;
reg   [2:0] p_0_0_1_0_0_099_fu_98;
reg   [2:0] ap_sig_allocacmp_p_0_0_1_0_0_099_load;
reg   [8:0] indvar_flatten_fu_102;
wire   [8:0] select_ln79_10_fu_331_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten22_fu_106;
wire   [14:0] add_ln78_fu_291_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten22_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln79_fu_325_p2;
wire   [0:0] icmp_ln83_fu_374_p2;
wire   [0:0] xor_ln78_fu_369_p2;
wire   [0:0] and_ln78_fu_380_p2;
wire   [2:0] add_ln83_fu_391_p2;
wire   [2:0] select_ln79_4_fu_511_p3;
wire   [2:0] select_ln79_9_fu_546_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_224;
reg    ap_condition_166;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_58 = 3'd0;
//#0 p_0_0_01_12181_fu_62 = 3'd0;
//#0 p_0_0_01_283_fu_66 = 3'd0;
//#0 p_0_0_01_385_fu_70 = 3'd0;
//#0 p_0_0_01_487_fu_74 = 3'd0;
//#0 p_0_0_0_0_0_089_fu_78 = 3'd0;
//#0 p_0_0_01_1_191_fu_82 = 3'd0;
//#0 p_0_0_01_1_293_fu_86 = 3'd0;
//#0 p_0_0_01_1_395_fu_90 = 3'd0;
//#0 p_0_0_01_1_497_fu_94 = 3'd0;
//#0 p_0_0_1_0_0_099_fu_98 = 3'd0;
//#0 indvar_flatten_fu_102 = 9'd0;
//#0 indvar_flatten22_fu_106 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_224)) begin
        if ((icmp_ln78_fu_297_p2 == 1'd0)) begin
            indvar_flatten22_fu_106 <= add_ln78_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten22_fu_106 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_224)) begin
        if ((icmp_ln78_fu_297_p2 == 1'd0)) begin
            indvar_flatten_fu_102 <= select_ln79_10_fu_331_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_102 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_01_12181_fu_62 <= select_ln79_8_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_191_fu_82 <= select_ln79_3_fu_504_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_293_fu_86 <= select_ln79_2_fu_497_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_395_fu_90 <= select_ln79_1_fu_490_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_1_497_fu_94 <= select_ln79_fu_483_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_283_fu_66 <= select_ln79_7_fu_532_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_385_fu_70 <= select_ln79_6_fu_525_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_01_487_fu_74 <= select_ln79_5_fu_518_p3;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_0_0_0_089_fu_78 <= trunc_ln86_reg_840_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
    p_0_0_1_0_0_099_fu_98 <= trunc_ln86_7_reg_847_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_166)) begin
    t_fu_58 <= t_5_fu_397_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln79_reg_834 <= icmp_ln79_fu_303_p2;
        icmp_ln83_1_reg_868 <= icmp_ln83_1_fu_405_p2;
        or_ln79_reg_854 <= or_ln79_fu_386_p2;
        trunc_ln86_7_reg_847 <= {{lnq_sm_cp3_dout[5:3]}};
        trunc_ln86_7_reg_847_pp0_iter1_reg <= trunc_ln86_7_reg_847;
        trunc_ln86_reg_840 <= trunc_ln86_fu_311_p1;
        trunc_ln86_reg_840_pp0_iter1_reg <= trunc_ln86_reg_840;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln83_1_reg_868 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln83_1_reg_868 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln78_fu_297_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten22_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten22_load = indvar_flatten22_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_12181_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_12181_load = p_0_0_01_12181_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_191_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_191_load = p_0_0_01_1_191_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_293_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_293_load = p_0_0_01_1_293_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_395_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_395_load = p_0_0_01_1_395_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_1_497_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_1_497_load = p_0_0_01_1_497_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_283_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_283_load = p_0_0_01_283_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_385_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_385_load = p_0_0_01_385_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_01_487_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_01_487_load = p_0_0_01_487_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_0_0_0_089_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_0_0_0_089_load = p_0_0_0_0_0_089_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_loop_init_pp0_iter2_reg == 1'b1))) begin
        ap_sig_allocacmp_p_0_0_1_0_0_099_load = 3'd0;
    end else begin
        ap_sig_allocacmp_p_0_0_1_0_0_099_load = p_0_0_1_0_0_099_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln78_fu_297_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp3_blk_n = lnq_sm_cp3_empty_n;
    end else begin
        lnq_sm_cp3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln78_fu_297_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp3_read = 1'b1;
    end else begin
        lnq_sm_cp3_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_291_p2 = (ap_sig_allocacmp_indvar_flatten22_load + 15'd1);

assign add_ln79_fu_325_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln83_fu_391_p2 = (ap_sig_allocacmp_t_load + 3'd1);

assign adpt_sm_din = {{{{{{{{{{{{trunc_ln86_7_reg_847_pp0_iter1_reg}, {select_ln79_fu_483_p3}}, {select_ln79_1_fu_490_p3}}, {select_ln79_2_fu_497_p3}}, {select_ln79_3_fu_504_p3}}, {select_ln79_4_fu_511_p3}}, {trunc_ln86_reg_840_pp0_iter1_reg}}, {select_ln79_5_fu_518_p3}}, {select_ln79_6_fu_525_p3}}, {select_ln79_7_fu_532_p3}}, {select_ln79_8_fu_539_p3}}, {select_ln79_9_fu_546_p3}};

assign and_ln78_fu_380_p2 = (xor_ln78_fu_369_p2 & icmp_ln83_fu_374_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln78_fu_297_p2 == 1'd0) & (lnq_sm_cp3_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln83_1_reg_868 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

always @ (*) begin
    ap_condition_166 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_224 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_297_p2 = ((ap_sig_allocacmp_indvar_flatten22_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_303_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_405_p2 = ((t_5_fu_397_p3 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_374_p2 = ((ap_sig_allocacmp_t_load == 3'd6) ? 1'b1 : 1'b0);

assign or_ln79_fu_386_p2 = (icmp_ln79_reg_834 | and_ln78_fu_380_p2);

assign select_ln79_10_fu_331_p3 = ((icmp_ln79_fu_303_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_325_p2);

assign select_ln79_1_fu_490_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_497_load);

assign select_ln79_2_fu_497_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_395_load);

assign select_ln79_3_fu_504_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_293_load);

assign select_ln79_4_fu_511_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_1_191_load);

assign select_ln79_5_fu_518_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_0_0_0_089_load);

assign select_ln79_6_fu_525_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_487_load);

assign select_ln79_7_fu_532_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_385_load);

assign select_ln79_8_fu_539_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_283_load);

assign select_ln79_9_fu_546_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_01_12181_load);

assign select_ln79_fu_483_p3 = ((or_ln79_reg_854[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_p_0_0_1_0_0_099_load);

assign start_out = real_start;

assign t_5_fu_397_p3 = ((or_ln79_fu_386_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_391_p2);

assign trunc_ln86_fu_311_p1 = lnq_sm_cp3_dout[2:0];

assign xor_ln78_fu_369_p2 = (icmp_ln79_reg_834 ^ 1'd1);

endmodule //ATTN11_do_adapt_50
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        o_sm_din,
        o_sm_num_data_valid,
        o_sm_fifo_cap,
        o_sm_full_n,
        o_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [143:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [23:0] o_sm_din;
input  [2:0] o_sm_num_data_valid;
input  [2:0] o_sm_fifo_cap;
input   o_sm_full_n;
output   o_sm_write;

reg ap_idle;
reg mac_sm_read;
reg o_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_886;
reg   [0:0] icmp_ln45_reg_886_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_896;
reg    ap_predicate_op86_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_339_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    o_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_345_p2;
reg   [0:0] icmp_ln46_reg_890;
wire   [0:0] icmp_ln50_fu_425_p2;
wire   [11:0] trunc_ln50_fu_519_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [11:0] ap_phi_mux_empty_phi_fu_178_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_empty_reg_175;
reg   [11:0] ap_phi_mux_p_0_0_0_1_4105_phi_fu_188_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4105_reg_185;
reg   [11:0] ap_phi_mux_p_0_0_0_1_3103_phi_fu_197_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3103_reg_194;
reg   [11:0] ap_phi_mux_p_0_0_0_1_2101_phi_fu_206_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2101_reg_203;
reg   [11:0] ap_phi_mux_p_0_0_0_1_199_phi_fu_215_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_199_reg_212;
reg   [11:0] ap_phi_mux_empty_1244_phi_fu_224_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_empty_1244_reg_221;
reg   [11:0] ap_phi_mux_p_0_0_0_495_phi_fu_234_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_495_reg_231;
reg   [11:0] ap_phi_mux_p_0_0_0_393_phi_fu_243_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_393_reg_240;
reg   [11:0] ap_phi_mux_p_0_0_0_291_phi_fu_252_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_291_reg_249;
reg   [11:0] ap_phi_mux_p_0_0_0_12689_phi_fu_261_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_12689_reg_258;
wire   [11:0] ap_phi_reg_pp0_iter0_p_0_0_0_197_reg_267;
reg   [11:0] ap_phi_reg_pp0_iter1_p_0_0_0_197_reg_267;
reg   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_197_reg_267;
reg   [11:0] ap_phi_reg_pp0_iter3_p_0_0_0_197_reg_267;
wire   [11:0] ap_phi_reg_pp0_iter0_p_0_0_087_reg_276;
reg   [11:0] ap_phi_reg_pp0_iter1_p_0_0_087_reg_276;
reg   [11:0] ap_phi_reg_pp0_iter2_p_0_0_087_reg_276;
reg   [11:0] ap_phi_reg_pp0_iter3_p_0_0_087_reg_276;
reg   [2:0] t_fu_110;
wire   [2:0] t_4_fu_431_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [8:0] indvar_flatten_fu_114;
wire   [8:0] select_ln46_4_fu_357_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten30_fu_118;
wire   [14:0] add_ln45_fu_333_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten30_load;
reg   [11:0] p_0_0_086_fu_122;
reg   [11:0] p_0_0_0_12688_fu_126;
reg   [11:0] p_0_0_0_290_fu_130;
reg   [11:0] p_0_0_0_392_fu_134;
reg   [11:0] p_0_0_0_494_fu_138;
reg   [11:0] p_0_0_0_196_fu_142;
reg   [11:0] p_0_0_0_1_198_fu_146;
reg   [11:0] p_0_0_0_1_2100_fu_150;
reg   [11:0] p_0_0_0_1_3102_fu_154;
reg   [11:0] p_0_0_0_1_4104_fu_158;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln46_fu_351_p2;
wire   [0:0] icmp_ln47_fu_400_p2;
wire   [0:0] xor_ln45_fu_395_p2;
wire   [0:0] and_ln45_fu_406_p2;
wire   [0:0] or_ln46_fu_412_p2;
wire   [2:0] select_ln46_fu_417_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_228;
reg    ap_condition_232;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_110 = 3'd0;
//#0 indvar_flatten_fu_114 = 9'd0;
//#0 indvar_flatten30_fu_118 = 15'd0;
//#0 p_0_0_086_fu_122 = 12'd0;
//#0 p_0_0_0_12688_fu_126 = 12'd0;
//#0 p_0_0_0_290_fu_130 = 12'd0;
//#0 p_0_0_0_392_fu_134 = 12'd0;
//#0 p_0_0_0_494_fu_138 = 12'd0;
//#0 p_0_0_0_196_fu_142 = 12'd0;
//#0 p_0_0_0_1_198_fu_146 = 12'd0;
//#0 p_0_0_0_1_2100_fu_150 = 12'd0;
//#0 p_0_0_0_1_3102_fu_154 = 12'd0;
//#0 p_0_0_0_1_4104_fu_158 = 12'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_896 == 1'd0) & (icmp_ln45_reg_886_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_087_reg_276 <= p_0_0_086_fu_122;
        end else if (((icmp_ln50_reg_896 == 1'd1) & (icmp_ln45_reg_886_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_087_reg_276 <= trunc_ln50_fu_519_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_087_reg_276 <= ap_phi_reg_pp0_iter2_p_0_0_087_reg_276;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_896 == 1'd0) & (icmp_ln45_reg_886_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_197_reg_267 <= p_0_0_0_196_fu_142;
        end else if (((icmp_ln50_reg_896 == 1'd1) & (icmp_ln45_reg_886_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_197_reg_267 <= {{mac_sm_dout[83:72]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_197_reg_267 <= ap_phi_reg_pp0_iter2_p_0_0_0_197_reg_267;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_228)) begin
        if ((icmp_ln45_fu_339_p2 == 1'd0)) begin
            indvar_flatten30_fu_118 <= add_ln45_fu_333_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten30_fu_118 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_228)) begin
        if ((icmp_ln45_fu_339_p2 == 1'd0)) begin
            indvar_flatten_fu_114 <= select_ln46_4_fu_357_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_114 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_232)) begin
        if ((icmp_ln45_reg_886 == 1'd0)) begin
            t_fu_110 <= t_4_fu_431_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_110 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_886 <= icmp_ln45_fu_339_p2;
        icmp_ln45_reg_886_pp0_iter1_reg <= icmp_ln45_reg_886;
        icmp_ln46_reg_890 <= icmp_ln46_fu_345_p2;
        icmp_ln50_reg_896 <= icmp_ln50_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_087_reg_276 <= ap_phi_reg_pp0_iter0_p_0_0_087_reg_276;
        ap_phi_reg_pp0_iter1_p_0_0_0_197_reg_267 <= ap_phi_reg_pp0_iter0_p_0_0_0_197_reg_267;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_087_reg_276 <= ap_phi_reg_pp0_iter1_p_0_0_087_reg_276;
        ap_phi_reg_pp0_iter2_p_0_0_0_197_reg_267 <= ap_phi_reg_pp0_iter1_p_0_0_0_197_reg_267;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_886_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_086_fu_122 <= ap_phi_mux_p_0_0_0_12689_phi_fu_261_p4;
        p_0_0_0_12688_fu_126 <= ap_phi_mux_p_0_0_0_291_phi_fu_252_p4;
        p_0_0_0_196_fu_142 <= ap_phi_mux_p_0_0_0_1_199_phi_fu_215_p4;
        p_0_0_0_1_198_fu_146 <= ap_phi_mux_p_0_0_0_1_2101_phi_fu_206_p4;
        p_0_0_0_1_2100_fu_150 <= ap_phi_mux_p_0_0_0_1_3103_phi_fu_197_p4;
        p_0_0_0_1_3102_fu_154 <= ap_phi_mux_p_0_0_0_1_4105_phi_fu_188_p4;
        p_0_0_0_1_4104_fu_158 <= ap_phi_mux_empty_phi_fu_178_p4;
        p_0_0_0_290_fu_130 <= ap_phi_mux_p_0_0_0_393_phi_fu_243_p4;
        p_0_0_0_392_fu_134 <= ap_phi_mux_p_0_0_0_495_phi_fu_234_p4;
        p_0_0_0_494_fu_138 <= ap_phi_mux_empty_1244_phi_fu_224_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_339_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_886_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_empty_1244_phi_fu_224_p4 = 12'd0;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_empty_1244_phi_fu_224_p4 = {{mac_sm_dout[71:60]}};
        end else begin
            ap_phi_mux_empty_1244_phi_fu_224_p4 = ap_phi_reg_pp0_iter2_empty_1244_reg_221;
        end
    end else begin
        ap_phi_mux_empty_1244_phi_fu_224_p4 = ap_phi_reg_pp0_iter2_empty_1244_reg_221;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_178_p4 = 12'd0;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_178_p4 = {{mac_sm_dout[143:132]}};
        end else begin
            ap_phi_mux_empty_phi_fu_178_p4 = ap_phi_reg_pp0_iter2_empty_reg_175;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_178_p4 = ap_phi_reg_pp0_iter2_empty_reg_175;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_12689_phi_fu_261_p4 = p_0_0_0_12688_fu_126;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_12689_phi_fu_261_p4 = {{mac_sm_dout[23:12]}};
        end else begin
            ap_phi_mux_p_0_0_0_12689_phi_fu_261_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12689_reg_258;
        end
    end else begin
        ap_phi_mux_p_0_0_0_12689_phi_fu_261_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12689_reg_258;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_199_phi_fu_215_p4 = p_0_0_0_1_198_fu_146;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_199_phi_fu_215_p4 = {{mac_sm_dout[95:84]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_199_phi_fu_215_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_199_reg_212;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_199_phi_fu_215_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_199_reg_212;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_2101_phi_fu_206_p4 = p_0_0_0_1_2100_fu_150;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_2101_phi_fu_206_p4 = {{mac_sm_dout[107:96]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_2101_phi_fu_206_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2101_reg_203;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_2101_phi_fu_206_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2101_reg_203;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_3103_phi_fu_197_p4 = p_0_0_0_1_3102_fu_154;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_3103_phi_fu_197_p4 = {{mac_sm_dout[119:108]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_3103_phi_fu_197_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3103_reg_194;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_3103_phi_fu_197_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3103_reg_194;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_4105_phi_fu_188_p4 = p_0_0_0_1_4104_fu_158;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_4105_phi_fu_188_p4 = {{mac_sm_dout[131:120]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_4105_phi_fu_188_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4105_reg_185;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_4105_phi_fu_188_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4105_reg_185;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_291_phi_fu_252_p4 = p_0_0_0_290_fu_130;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_291_phi_fu_252_p4 = {{mac_sm_dout[35:24]}};
        end else begin
            ap_phi_mux_p_0_0_0_291_phi_fu_252_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_291_reg_249;
        end
    end else begin
        ap_phi_mux_p_0_0_0_291_phi_fu_252_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_291_reg_249;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_393_phi_fu_243_p4 = p_0_0_0_392_fu_134;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_393_phi_fu_243_p4 = {{mac_sm_dout[47:36]}};
        end else begin
            ap_phi_mux_p_0_0_0_393_phi_fu_243_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_393_reg_240;
        end
    end else begin
        ap_phi_mux_p_0_0_0_393_phi_fu_243_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_393_reg_240;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_886_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_896 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_495_phi_fu_234_p4 = p_0_0_0_494_fu_138;
        end else if ((icmp_ln50_reg_896 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_495_phi_fu_234_p4 = {{mac_sm_dout[59:48]}};
        end else begin
            ap_phi_mux_p_0_0_0_495_phi_fu_234_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_495_reg_231;
        end
    end else begin
        ap_phi_mux_p_0_0_0_495_phi_fu_234_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_495_reg_231;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten30_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten30_load = indvar_flatten30_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op86_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op86_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        o_sm_blk_n = o_sm_full_n;
    end else begin
        o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        o_sm_write = 1'b1;
    end else begin
        o_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_333_p2 = (ap_sig_allocacmp_indvar_flatten30_load + 15'd1);

assign add_ln46_fu_351_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign and_ln45_fu_406_p2 = (xor_ln45_fu_395_p2 & icmp_ln47_fu_400_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op86_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (o_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_228 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_232 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_087_reg_276 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_197_reg_267 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1244_reg_221 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_175 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_12689_reg_258 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_199_reg_212 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_2101_reg_203 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_3103_reg_194 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_4105_reg_185 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_291_reg_249 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_393_reg_240 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_495_reg_231 = 'bx;

always @ (*) begin
    ap_predicate_op86_read_state3 = ((icmp_ln50_reg_896 == 1'd1) & (icmp_ln45_reg_886_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_339_p2 = ((ap_sig_allocacmp_indvar_flatten30_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_345_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_400_p2 = ((ap_sig_allocacmp_t_load == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_425_p2 = ((select_ln46_fu_417_p3 == 3'd0) ? 1'b1 : 1'b0);

assign o_sm_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_197_reg_267}, {ap_phi_reg_pp0_iter3_p_0_0_087_reg_276}};

assign or_ln46_fu_412_p2 = (icmp_ln46_reg_890 | and_ln45_fu_406_p2);

assign select_ln46_4_fu_357_p3 = ((icmp_ln46_fu_345_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_351_p2);

assign select_ln46_fu_417_p3 = ((or_ln46_fu_412_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_t_load);

assign t_4_fu_431_p2 = (select_ln46_fu_417_p3 + 3'd1);

assign trunc_ln50_fu_519_p1 = mac_sm_dout[11:0];

assign xor_ln45_fu_395_p2 = (icmp_ln46_reg_890 ^ 1'd1);

endmodule //ATTN11_do_adapt_6
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        q_sm_din,
        q_sm_num_data_valid,
        q_sm_fifo_cap,
        q_sm_full_n,
        q_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [287:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [23:0] q_sm_din;
input  [2:0] q_sm_num_data_valid;
input  [2:0] q_sm_fifo_cap;
input   q_sm_full_n;
output   q_sm_write;

reg ap_idle;
reg mac_sm_read;
reg q_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_1546;
reg   [0:0] icmp_ln45_reg_1546_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1556;
reg    ap_predicate_op122_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_543_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    q_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_549_p2;
reg   [0:0] icmp_ln46_reg_1550;
wire   [0:0] icmp_ln50_fu_629_p2;
wire   [11:0] trunc_ln50_fu_807_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [11:0] ap_phi_mux_empty_phi_fu_274_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_empty_reg_271;
reg   [11:0] ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
reg   [11:0] ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
reg   [11:0] ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
reg   [11:0] ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
reg   [11:0] ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
reg   [11:0] ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
reg   [11:0] ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
reg   [11:0] ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
reg   [11:0] ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
reg   [11:0] ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
reg   [11:0] ap_phi_mux_empty_1243_phi_fu_374_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_empty_1243_reg_371;
reg   [11:0] ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
reg   [11:0] ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
reg   [11:0] ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
reg   [11:0] ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
reg   [11:0] ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
reg   [11:0] ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
reg   [11:0] ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
reg   [11:0] ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
reg   [11:0] ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
reg   [11:0] ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4;
wire   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
wire   [11:0] ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471;
reg   [11:0] ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471;
reg   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471;
reg   [11:0] ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471;
wire   [11:0] ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480;
reg   [11:0] ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480;
reg   [11:0] ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480;
reg   [11:0] ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480;
reg   [3:0] t_fu_158;
wire   [3:0] t_3_fu_635_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [3:0] ap_sig_allocacmp_t_load;
reg   [8:0] indvar_flatten_fu_162;
wire   [8:0] select_ln46_3_fu_561_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten54_fu_166;
wire   [14:0] add_ln45_fu_537_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten54_load;
reg   [11:0] p_0_0_0134_fu_170;
reg   [11:0] p_0_0_0_126136_fu_174;
reg   [11:0] p_0_0_0_2138_fu_178;
reg   [11:0] p_0_0_0_3140_fu_182;
reg   [11:0] p_0_0_0_4142_fu_186;
reg   [11:0] p_0_0_0_5144_fu_190;
reg   [11:0] p_0_0_0_6146_fu_194;
reg   [11:0] p_0_0_0_7148_fu_198;
reg   [11:0] p_0_0_0_8150_fu_202;
reg   [11:0] p_0_0_0_9152_fu_206;
reg   [11:0] p_0_0_0_10154_fu_210;
reg   [11:0] p_0_0_0_1156_fu_214;
reg   [11:0] p_0_0_0_1_1158_fu_218;
reg   [11:0] p_0_0_0_1_2160_fu_222;
reg   [11:0] p_0_0_0_1_3162_fu_226;
reg   [11:0] p_0_0_0_1_4164_fu_230;
reg   [11:0] p_0_0_0_1_5166_fu_234;
reg   [11:0] p_0_0_0_1_6168_fu_238;
reg   [11:0] p_0_0_0_1_7170_fu_242;
reg   [11:0] p_0_0_0_1_8172_fu_246;
reg   [11:0] p_0_0_0_1_9174_fu_250;
reg   [11:0] p_0_0_0_1_10176_fu_254;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln46_fu_555_p2;
wire   [0:0] icmp_ln47_fu_604_p2;
wire   [0:0] xor_ln45_fu_599_p2;
wire   [0:0] and_ln45_fu_610_p2;
wire   [0:0] or_ln46_fu_616_p2;
wire   [3:0] select_ln46_fu_621_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_336;
reg    ap_condition_340;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_158 = 4'd0;
//#0 indvar_flatten_fu_162 = 9'd0;
//#0 indvar_flatten54_fu_166 = 15'd0;
//#0 p_0_0_0134_fu_170 = 12'd0;
//#0 p_0_0_0_126136_fu_174 = 12'd0;
//#0 p_0_0_0_2138_fu_178 = 12'd0;
//#0 p_0_0_0_3140_fu_182 = 12'd0;
//#0 p_0_0_0_4142_fu_186 = 12'd0;
//#0 p_0_0_0_5144_fu_190 = 12'd0;
//#0 p_0_0_0_6146_fu_194 = 12'd0;
//#0 p_0_0_0_7148_fu_198 = 12'd0;
//#0 p_0_0_0_8150_fu_202 = 12'd0;
//#0 p_0_0_0_9152_fu_206 = 12'd0;
//#0 p_0_0_0_10154_fu_210 = 12'd0;
//#0 p_0_0_0_1156_fu_214 = 12'd0;
//#0 p_0_0_0_1_1158_fu_218 = 12'd0;
//#0 p_0_0_0_1_2160_fu_222 = 12'd0;
//#0 p_0_0_0_1_3162_fu_226 = 12'd0;
//#0 p_0_0_0_1_4164_fu_230 = 12'd0;
//#0 p_0_0_0_1_5166_fu_234 = 12'd0;
//#0 p_0_0_0_1_6168_fu_238 = 12'd0;
//#0 p_0_0_0_1_7170_fu_242 = 12'd0;
//#0 p_0_0_0_1_8172_fu_246 = 12'd0;
//#0 p_0_0_0_1_9174_fu_250 = 12'd0;
//#0 p_0_0_0_1_10176_fu_254 = 12'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1556 == 1'd0) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= p_0_0_0134_fu_170;
        end else if (((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= trunc_ln50_fu_807_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1556 == 1'd0) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= p_0_0_0_1156_fu_214;
        end else if (((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= {{mac_sm_dout[155:144]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_336)) begin
        if ((icmp_ln45_fu_543_p2 == 1'd0)) begin
            indvar_flatten54_fu_166 <= add_ln45_fu_537_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten54_fu_166 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_336)) begin
        if ((icmp_ln45_fu_543_p2 == 1'd0)) begin
            indvar_flatten_fu_162 <= select_ln46_3_fu_561_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_162 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_340)) begin
        if ((icmp_ln45_reg_1546 == 1'd0)) begin
            t_fu_158 <= t_3_fu_635_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_158 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_1546 <= icmp_ln45_fu_543_p2;
        icmp_ln45_reg_1546_pp0_iter1_reg <= icmp_ln45_reg_1546;
        icmp_ln46_reg_1550 <= icmp_ln46_fu_549_p2;
        icmp_ln50_reg_1556 <= icmp_ln50_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480;
        ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_0135_reg_480 <= ap_phi_reg_pp0_iter1_p_0_0_0135_reg_480;
        ap_phi_reg_pp0_iter2_p_0_0_0_1157_reg_471 <= ap_phi_reg_pp0_iter1_p_0_0_0_1157_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_0134_fu_170 <= ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4;
        p_0_0_0_10154_fu_210 <= ap_phi_mux_empty_1243_phi_fu_374_p4;
        p_0_0_0_1156_fu_214 <= ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4;
        p_0_0_0_126136_fu_174 <= ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4;
        p_0_0_0_1_10176_fu_254 <= ap_phi_mux_empty_phi_fu_274_p4;
        p_0_0_0_1_1158_fu_218 <= ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4;
        p_0_0_0_1_2160_fu_222 <= ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4;
        p_0_0_0_1_3162_fu_226 <= ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4;
        p_0_0_0_1_4164_fu_230 <= ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4;
        p_0_0_0_1_5166_fu_234 <= ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4;
        p_0_0_0_1_6168_fu_238 <= ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4;
        p_0_0_0_1_7170_fu_242 <= ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4;
        p_0_0_0_1_8172_fu_246 <= ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4;
        p_0_0_0_1_9174_fu_250 <= ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4;
        p_0_0_0_2138_fu_178 <= ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4;
        p_0_0_0_3140_fu_182 <= ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4;
        p_0_0_0_4142_fu_186 <= ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4;
        p_0_0_0_5144_fu_190 <= ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4;
        p_0_0_0_6146_fu_194 <= ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4;
        p_0_0_0_7148_fu_198 <= ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4;
        p_0_0_0_8150_fu_202 <= ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4;
        p_0_0_0_9152_fu_206 <= ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_543_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_empty_1243_phi_fu_374_p4 = 12'd0;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_empty_1243_phi_fu_374_p4 = {{mac_sm_dout[143:132]}};
        end else begin
            ap_phi_mux_empty_1243_phi_fu_374_p4 = ap_phi_reg_pp0_iter2_empty_1243_reg_371;
        end
    end else begin
        ap_phi_mux_empty_1243_phi_fu_374_p4 = ap_phi_reg_pp0_iter2_empty_1243_reg_371;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_274_p4 = 12'd0;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_274_p4 = {{mac_sm_dout[287:276]}};
        end else begin
            ap_phi_mux_empty_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_reg_271;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_reg_271;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = p_0_0_0_10154_fu_210;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = {{mac_sm_dout[131:120]}};
        end else begin
            ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
        end
    end else begin
        ap_phi_mux_p_0_0_0_10155_phi_fu_384_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = p_0_0_0_126136_fu_174;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = {{mac_sm_dout[23:12]}};
        end else begin
            ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
        end
    end else begin
        ap_phi_mux_p_0_0_0_126137_phi_fu_465_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = p_0_0_0_1_10176_fu_254;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = {{mac_sm_dout[275:264]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_10177_phi_fu_284_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = p_0_0_0_1_1158_fu_218;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = {{mac_sm_dout[167:156]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_1159_phi_fu_365_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = p_0_0_0_1_2160_fu_222;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = {{mac_sm_dout[179:168]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_2161_phi_fu_356_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = p_0_0_0_1_3162_fu_226;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = {{mac_sm_dout[191:180]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_3163_phi_fu_347_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = p_0_0_0_1_4164_fu_230;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = {{mac_sm_dout[203:192]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_4165_phi_fu_338_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = p_0_0_0_1_5166_fu_234;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = {{mac_sm_dout[215:204]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_5167_phi_fu_329_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = p_0_0_0_1_6168_fu_238;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = {{mac_sm_dout[227:216]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_6169_phi_fu_320_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = p_0_0_0_1_7170_fu_242;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = {{mac_sm_dout[239:228]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_7171_phi_fu_311_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = p_0_0_0_1_8172_fu_246;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = {{mac_sm_dout[251:240]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_8173_phi_fu_302_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = p_0_0_0_1_9174_fu_250;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = {{mac_sm_dout[263:252]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_9175_phi_fu_293_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = p_0_0_0_2138_fu_178;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = {{mac_sm_dout[35:24]}};
        end else begin
            ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
        end
    end else begin
        ap_phi_mux_p_0_0_0_2139_phi_fu_456_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = p_0_0_0_3140_fu_182;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = {{mac_sm_dout[47:36]}};
        end else begin
            ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
        end
    end else begin
        ap_phi_mux_p_0_0_0_3141_phi_fu_447_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = p_0_0_0_4142_fu_186;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = {{mac_sm_dout[59:48]}};
        end else begin
            ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
        end
    end else begin
        ap_phi_mux_p_0_0_0_4143_phi_fu_438_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = p_0_0_0_5144_fu_190;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = {{mac_sm_dout[71:60]}};
        end else begin
            ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
        end
    end else begin
        ap_phi_mux_p_0_0_0_5145_phi_fu_429_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = p_0_0_0_6146_fu_194;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = {{mac_sm_dout[83:72]}};
        end else begin
            ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
        end
    end else begin
        ap_phi_mux_p_0_0_0_6147_phi_fu_420_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = p_0_0_0_7148_fu_198;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = {{mac_sm_dout[95:84]}};
        end else begin
            ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
        end
    end else begin
        ap_phi_mux_p_0_0_0_7149_phi_fu_411_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = p_0_0_0_8150_fu_202;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = {{mac_sm_dout[107:96]}};
        end else begin
            ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
        end
    end else begin
        ap_phi_mux_p_0_0_0_8151_phi_fu_402_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1556 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = p_0_0_0_9152_fu_206;
        end else if ((icmp_ln50_reg_1556 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = {{mac_sm_dout[119:108]}};
        end else begin
            ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
        end
    end else begin
        ap_phi_mux_p_0_0_0_9153_phi_fu_393_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten54_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten54_load = indvar_flatten54_fu_166;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 4'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op122_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op122_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        q_sm_blk_n = q_sm_full_n;
    end else begin
        q_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        q_sm_write = 1'b1;
    end else begin
        q_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_537_p2 = (ap_sig_allocacmp_indvar_flatten54_load + 15'd1);

assign add_ln46_fu_555_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign and_ln45_fu_610_p2 = (xor_ln45_fu_599_p2 & icmp_ln47_fu_604_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op122_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (q_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_336 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_340 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_0135_reg_480 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1157_reg_471 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1243_reg_371 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_271 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_10155_reg_381 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_126137_reg_462 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_10177_reg_281 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_1159_reg_362 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_2161_reg_353 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_3163_reg_344 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_4165_reg_335 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_5167_reg_326 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_6169_reg_317 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_7171_reg_308 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_8173_reg_299 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_9175_reg_290 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_2139_reg_453 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_3141_reg_444 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_4143_reg_435 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_5145_reg_426 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_6147_reg_417 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_7149_reg_408 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_8151_reg_399 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_9153_reg_390 = 'bx;

always @ (*) begin
    ap_predicate_op122_read_state3 = ((icmp_ln50_reg_1556 == 1'd1) & (icmp_ln45_reg_1546_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_543_p2 = ((ap_sig_allocacmp_indvar_flatten54_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_549_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_604_p2 = ((ap_sig_allocacmp_t_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_629_p2 = ((select_ln46_fu_621_p3 == 4'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_616_p2 = (icmp_ln46_reg_1550 | and_ln45_fu_610_p2);

assign q_sm_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_1157_reg_471}, {ap_phi_reg_pp0_iter3_p_0_0_0135_reg_480}};

assign select_ln46_3_fu_561_p3 = ((icmp_ln46_fu_549_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_555_p2);

assign select_ln46_fu_621_p3 = ((or_ln46_fu_616_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_t_load);

assign t_3_fu_635_p2 = (select_ln46_fu_621_p3 + 4'd1);

assign trunc_ln50_fu_807_p1 = mac_sm_dout[11:0];

assign xor_ln45_fu_599_p2 = (icmp_ln46_reg_1550 ^ 1'd1);

endmodule //ATTN11_do_adapt_7
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        a_sm_head3_din,
        a_sm_head3_num_data_valid,
        a_sm_head3_fifo_cap,
        a_sm_head3_full_n,
        a_sm_head3_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [79:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] a_sm_head3_din;
input  [6:0] a_sm_head3_num_data_valid;
input  [6:0] a_sm_head3_fifo_cap;
input   a_sm_head3_full_n;
output   a_sm_head3_write;

reg ap_idle;
reg mac_sm_read;
reg a_sm_head3_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_666;
reg   [0:0] icmp_ln45_reg_666_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_676;
reg    ap_predicate_op74_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_271_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    a_sm_head3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_277_p2;
reg   [0:0] icmp_ln46_reg_670;
wire   [0:0] icmp_ln50_fu_357_p2;
wire   [9:0] trunc_ln50_fu_423_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_146_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_143;
reg   [9:0] ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
reg   [9:0] ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
reg   [9:0] ap_phi_mux_empty_1242_phi_fu_174_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1242_reg_171;
reg   [9:0] ap_phi_mux_p_0_0_0_275_phi_fu_184_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
reg   [9:0] ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_071_reg_208;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_071_reg_208;
reg   [2:0] t_fu_94;
wire   [2:0] t_2_fu_363_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [7:0] indvar_flatten_fu_98;
wire   [7:0] select_ln46_2_fu_289_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [12:0] indvar_flatten22_fu_102;
wire   [12:0] add_ln45_fu_265_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten22_load;
reg   [9:0] p_0_0_070_fu_106;
reg   [9:0] p_0_0_0_12672_fu_110;
reg   [9:0] p_0_0_0_274_fu_114;
reg   [9:0] p_0_0_0_176_fu_118;
reg   [9:0] p_0_0_0_1_178_fu_122;
reg   [9:0] p_0_0_0_1_280_fu_126;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_283_p2;
wire   [0:0] icmp_ln47_fu_332_p2;
wire   [0:0] xor_ln45_fu_327_p2;
wire   [0:0] and_ln45_fu_338_p2;
wire   [0:0] or_ln46_fu_344_p2;
wire   [2:0] select_ln46_fu_349_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_192;
reg    ap_condition_196;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_94 = 3'd0;
//#0 indvar_flatten_fu_98 = 8'd0;
//#0 indvar_flatten22_fu_102 = 13'd0;
//#0 p_0_0_070_fu_106 = 10'd0;
//#0 p_0_0_0_12672_fu_110 = 10'd0;
//#0 p_0_0_0_274_fu_114 = 10'd0;
//#0 p_0_0_0_176_fu_118 = 10'd0;
//#0 p_0_0_0_1_178_fu_122 = 10'd0;
//#0 p_0_0_0_1_280_fu_126 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_676 == 1'd0) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= p_0_0_070_fu_106;
        end else if (((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= trunc_ln50_fu_423_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter2_p_0_0_071_reg_208;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_676 == 1'd0) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= p_0_0_0_176_fu_118;
        end else if (((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= {{mac_sm_dout[49:40]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln45_fu_271_p2 == 1'd0)) begin
            indvar_flatten22_fu_102 <= add_ln45_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten22_fu_102 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if ((icmp_ln45_fu_271_p2 == 1'd0)) begin
            indvar_flatten_fu_98 <= select_ln46_2_fu_289_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_196)) begin
        if ((icmp_ln45_reg_666 == 1'd0)) begin
            t_fu_94 <= t_2_fu_363_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_94 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_666 <= icmp_ln45_fu_271_p2;
        icmp_ln45_reg_666_pp0_iter1_reg <= icmp_ln45_reg_666;
        icmp_ln46_reg_670 <= icmp_ln46_fu_277_p2;
        icmp_ln50_reg_676 <= icmp_ln50_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter0_p_0_0_071_reg_208;
        ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_071_reg_208 <= ap_phi_reg_pp0_iter1_p_0_0_071_reg_208;
        ap_phi_reg_pp0_iter2_p_0_0_0_177_reg_199 <= ap_phi_reg_pp0_iter1_p_0_0_0_177_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_070_fu_106 <= ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4;
        p_0_0_0_12672_fu_110 <= ap_phi_mux_p_0_0_0_275_phi_fu_184_p4;
        p_0_0_0_176_fu_118 <= ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4;
        p_0_0_0_1_178_fu_122 <= ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4;
        p_0_0_0_1_280_fu_126 <= ap_phi_mux_empty_phi_fu_146_p4;
        p_0_0_0_274_fu_114 <= ap_phi_mux_empty_1242_phi_fu_174_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_sm_head3_blk_n = a_sm_head3_full_n;
    end else begin
        a_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        a_sm_head3_write = 1'b1;
    end else begin
        a_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_empty_1242_phi_fu_174_p4 = 10'd0;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_empty_1242_phi_fu_174_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_empty_1242_phi_fu_174_p4 = ap_phi_reg_pp0_iter2_empty_1242_reg_171;
        end
    end else begin
        ap_phi_mux_empty_1242_phi_fu_174_p4 = ap_phi_reg_pp0_iter2_empty_1242_reg_171;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_146_p4 = 10'd0;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_146_p4 = {{mac_sm_dout[79:70]}};
        end else begin
            ap_phi_mux_empty_phi_fu_146_p4 = ap_phi_reg_pp0_iter2_empty_reg_143;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_146_p4 = ap_phi_reg_pp0_iter2_empty_reg_143;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = p_0_0_0_12672_fu_110;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
        end
    end else begin
        ap_phi_mux_p_0_0_0_12673_phi_fu_193_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = p_0_0_0_1_178_fu_122;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_179_phi_fu_165_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = p_0_0_0_1_280_fu_126;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_281_phi_fu_156_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_676 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = p_0_0_0_274_fu_114;
        end else if ((icmp_ln50_reg_676 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
        end
    end else begin
        ap_phi_mux_p_0_0_0_275_phi_fu_184_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten22_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten22_load = indvar_flatten22_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op74_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op74_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_head3_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_177_reg_199}, {ap_phi_reg_pp0_iter3_p_0_0_071_reg_208}};

assign add_ln45_fu_265_p2 = (ap_sig_allocacmp_indvar_flatten22_load + 13'd1);

assign add_ln46_fu_283_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln45_fu_338_p2 = (xor_ln45_fu_327_p2 & icmp_ln47_fu_332_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op74_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (1'b0 == a_sm_head3_full_n);
end

always @ (*) begin
    ap_condition_192 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_196 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_071_reg_208 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_177_reg_199 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1242_reg_171 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_143 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_12673_reg_190 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_179_reg_162 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_281_reg_153 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_275_reg_181 = 'bx;

always @ (*) begin
    ap_predicate_op74_read_state3 = ((icmp_ln50_reg_676 == 1'd1) & (icmp_ln45_reg_666_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_271_p2 = ((ap_sig_allocacmp_indvar_flatten22_load == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_277_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_332_p2 = ((ap_sig_allocacmp_t_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_357_p2 = ((select_ln46_fu_349_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_344_p2 = (icmp_ln46_reg_670 | and_ln45_fu_338_p2);

assign select_ln46_2_fu_289_p3 = ((icmp_ln46_fu_277_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_283_p2);

assign select_ln46_fu_349_p3 = ((or_ln46_fu_344_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_t_load);

assign t_2_fu_363_p2 = (select_ln46_fu_349_p3 + 3'd1);

assign trunc_ln50_fu_423_p1 = mac_sm_dout[9:0];

assign xor_ln45_fu_327_p2 = (icmp_ln46_reg_670 ^ 1'd1);

endmodule //ATTN11_do_adapt_8
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_adapt_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_empty_n,
        mac_sm_read,
        r_sm_head3_din,
        r_sm_head3_num_data_valid,
        r_sm_head3_fifo_cap,
        r_sm_head3_full_n,
        r_sm_head3_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [139:0] mac_sm_dout;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [19:0] r_sm_head3_din;
input  [9:0] r_sm_head3_num_data_valid;
input  [9:0] r_sm_head3_fifo_cap;
input   r_sm_head3_full_n;
output   r_sm_head3_write;

reg ap_idle;
reg mac_sm_read;
reg r_sm_head3_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln45_reg_996;
reg   [0:0] icmp_ln45_reg_996_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_1006;
reg    ap_predicate_op92_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_373_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mac_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    r_sm_head3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_379_p2;
reg   [0:0] icmp_ln46_reg_1000;
wire   [0:0] icmp_ln50_fu_459_p2;
wire   [9:0] trunc_ln50_fu_567_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [9:0] ap_phi_mux_empty_phi_fu_194_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_reg_191;
reg   [9:0] ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
reg   [9:0] ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
reg   [9:0] ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
reg   [9:0] ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
reg   [9:0] ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
reg   [9:0] ap_phi_mux_empty_1241_phi_fu_249_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_empty_1241_reg_246;
reg   [9:0] ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
reg   [9:0] ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
reg   [9:0] ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
reg   [9:0] ap_phi_mux_p_0_0_0_299_phi_fu_286_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
reg   [9:0] ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4;
wire   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301;
wire   [9:0] ap_phi_reg_pp0_iter0_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter1_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter2_p_0_0_095_reg_310;
reg   [9:0] ap_phi_reg_pp0_iter3_p_0_0_095_reg_310;
reg   [2:0] t_fu_118;
wire   [2:0] t_1_fu_465_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [2:0] ap_sig_allocacmp_t_load;
reg   [7:0] indvar_flatten_fu_122;
wire   [7:0] select_ln46_1_fu_391_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten34_fu_126;
wire   [14:0] add_ln45_fu_367_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [9:0] p_0_0_094_fu_130;
reg   [9:0] p_0_0_0_12696_fu_134;
reg   [9:0] p_0_0_0_298_fu_138;
reg   [9:0] p_0_0_0_3100_fu_142;
reg   [9:0] p_0_0_0_4102_fu_146;
reg   [9:0] p_0_0_0_5104_fu_150;
reg   [9:0] p_0_0_0_1106_fu_154;
reg   [9:0] p_0_0_0_1_1108_fu_158;
reg   [9:0] p_0_0_0_1_2110_fu_162;
reg   [9:0] p_0_0_0_1_3112_fu_166;
reg   [9:0] p_0_0_0_1_4114_fu_170;
reg   [9:0] p_0_0_0_1_5116_fu_174;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_385_p2;
wire   [0:0] icmp_ln47_fu_434_p2;
wire   [0:0] xor_ln45_fu_429_p2;
wire   [0:0] and_ln45_fu_440_p2;
wire   [0:0] or_ln46_fu_446_p2;
wire   [2:0] select_ln46_fu_451_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_246;
reg    ap_condition_250;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 t_fu_118 = 3'd0;
//#0 indvar_flatten_fu_122 = 8'd0;
//#0 indvar_flatten34_fu_126 = 15'd0;
//#0 p_0_0_094_fu_130 = 10'd0;
//#0 p_0_0_0_12696_fu_134 = 10'd0;
//#0 p_0_0_0_298_fu_138 = 10'd0;
//#0 p_0_0_0_3100_fu_142 = 10'd0;
//#0 p_0_0_0_4102_fu_146 = 10'd0;
//#0 p_0_0_0_5104_fu_150 = 10'd0;
//#0 p_0_0_0_1106_fu_154 = 10'd0;
//#0 p_0_0_0_1_1108_fu_158 = 10'd0;
//#0 p_0_0_0_1_2110_fu_162 = 10'd0;
//#0 p_0_0_0_1_3112_fu_166 = 10'd0;
//#0 p_0_0_0_1_4114_fu_170 = 10'd0;
//#0 p_0_0_0_1_5116_fu_174 = 10'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1006 == 1'd0) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= p_0_0_094_fu_130;
        end else if (((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= trunc_ln50_fu_567_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter2_p_0_0_095_reg_310;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_1006 == 1'd0) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= p_0_0_0_1106_fu_154;
        end else if (((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= {{mac_sm_dout[79:70]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_246)) begin
        if ((icmp_ln45_fu_373_p2 == 1'd0)) begin
            indvar_flatten34_fu_126 <= add_ln45_fu_367_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_126 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_246)) begin
        if ((icmp_ln45_fu_373_p2 == 1'd0)) begin
            indvar_flatten_fu_122 <= select_ln46_1_fu_391_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_122 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_250)) begin
        if ((icmp_ln45_reg_996 == 1'd0)) begin
            t_fu_118 <= t_1_fu_465_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            t_fu_118 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln45_reg_996 <= icmp_ln45_fu_373_p2;
        icmp_ln45_reg_996_pp0_iter1_reg <= icmp_ln45_reg_996;
        icmp_ln46_reg_1000 <= icmp_ln46_fu_379_p2;
        icmp_ln50_reg_1006 <= icmp_ln50_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter0_p_0_0_095_reg_310;
        ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_p_0_0_095_reg_310 <= ap_phi_reg_pp0_iter1_p_0_0_095_reg_310;
        ap_phi_reg_pp0_iter2_p_0_0_0_1107_reg_301 <= ap_phi_reg_pp0_iter1_p_0_0_0_1107_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_094_fu_130 <= ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4;
        p_0_0_0_1106_fu_154 <= ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4;
        p_0_0_0_12696_fu_134 <= ap_phi_mux_p_0_0_0_299_phi_fu_286_p4;
        p_0_0_0_1_1108_fu_158 <= ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4;
        p_0_0_0_1_2110_fu_162 <= ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4;
        p_0_0_0_1_3112_fu_166 <= ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4;
        p_0_0_0_1_4114_fu_170 <= ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4;
        p_0_0_0_1_5116_fu_174 <= ap_phi_mux_empty_phi_fu_194_p4;
        p_0_0_0_298_fu_138 <= ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4;
        p_0_0_0_3100_fu_142 <= ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4;
        p_0_0_0_4102_fu_146 <= ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4;
        p_0_0_0_5104_fu_150 <= ap_phi_mux_empty_1241_phi_fu_249_p4;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_373_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_empty_1241_phi_fu_249_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_empty_1241_phi_fu_249_p4 = {{mac_sm_dout[69:60]}};
        end else begin
            ap_phi_mux_empty_1241_phi_fu_249_p4 = ap_phi_reg_pp0_iter2_empty_1241_reg_246;
        end
    end else begin
        ap_phi_mux_empty_1241_phi_fu_249_p4 = ap_phi_reg_pp0_iter2_empty_1241_reg_246;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_194_p4 = 10'd0;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_194_p4 = {{mac_sm_dout[139:130]}};
        end else begin
            ap_phi_mux_empty_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_empty_reg_191;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_empty_reg_191;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = p_0_0_0_12696_fu_134;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = {{mac_sm_dout[19:10]}};
        end else begin
            ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
        end
    end else begin
        ap_phi_mux_p_0_0_0_12697_phi_fu_295_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = p_0_0_0_1_1108_fu_158;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = {{mac_sm_dout[89:80]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_1109_phi_fu_240_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = p_0_0_0_1_2110_fu_162;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = {{mac_sm_dout[99:90]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_2111_phi_fu_231_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = p_0_0_0_1_3112_fu_166;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = {{mac_sm_dout[109:100]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_3113_phi_fu_222_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = p_0_0_0_1_4114_fu_170;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = {{mac_sm_dout[119:110]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_4115_phi_fu_213_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = p_0_0_0_1_5116_fu_174;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = {{mac_sm_dout[129:120]}};
        end else begin
            ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
        end
    end else begin
        ap_phi_mux_p_0_0_0_1_5117_phi_fu_204_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = p_0_0_0_298_fu_138;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = {{mac_sm_dout[29:20]}};
        end else begin
            ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
        end
    end else begin
        ap_phi_mux_p_0_0_0_299_phi_fu_286_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = p_0_0_0_3100_fu_142;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = {{mac_sm_dout[39:30]}};
        end else begin
            ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
        end
    end else begin
        ap_phi_mux_p_0_0_0_3101_phi_fu_277_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = p_0_0_0_4102_fu_146;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = {{mac_sm_dout[49:40]}};
        end else begin
            ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
        end
    end else begin
        ap_phi_mux_p_0_0_0_4103_phi_fu_268_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_996_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_1006 == 1'd0)) begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = p_0_0_0_5104_fu_150;
        end else if ((icmp_ln50_reg_1006 == 1'd1)) begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = {{mac_sm_dout[59:50]}};
        end else begin
            ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
        end
    end else begin
        ap_phi_mux_p_0_0_0_5105_phi_fu_259_p4 = ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_t_load = 3'd0;
    end else begin
        ap_sig_allocacmp_t_load = t_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op92_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op92_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_sm_head3_blk_n = r_sm_head3_full_n;
    end else begin
        r_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_sm_head3_write = 1'b1;
    end else begin
        r_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_367_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 15'd1);

assign add_ln46_fu_385_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign and_ln45_fu_440_p2 = (xor_ln45_fu_429_p2 & icmp_ln47_fu_434_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op92_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (r_sm_head3_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_246 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_250 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_p_0_0_095_reg_310 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0_0_0_1107_reg_301 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_1241_reg_246 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_reg_191 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_12697_reg_292 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_1109_reg_237 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_2111_reg_228 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_3113_reg_219 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_4115_reg_210 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_1_5117_reg_201 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_299_reg_283 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_3101_reg_274 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_4103_reg_265 = 'bx;

assign ap_phi_reg_pp0_iter2_p_0_0_0_5105_reg_256 = 'bx;

always @ (*) begin
    ap_predicate_op92_read_state3 = ((icmp_ln50_reg_1006 == 1'd1) & (icmp_ln45_reg_996_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_373_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_379_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_434_p2 = ((ap_sig_allocacmp_t_load == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_459_p2 = ((select_ln46_fu_451_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_446_p2 = (icmp_ln46_reg_1000 | and_ln45_fu_440_p2);

assign r_sm_head3_din = {{ap_phi_reg_pp0_iter3_p_0_0_0_1107_reg_301}, {ap_phi_reg_pp0_iter3_p_0_0_095_reg_310}};

assign select_ln46_1_fu_391_p3 = ((icmp_ln46_fu_379_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_385_p2);

assign select_ln46_fu_451_p3 = ((or_ln46_fu_446_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_t_load);

assign t_1_fu_465_p2 = (select_ln46_fu_451_p3 + 3'd1);

assign trunc_ln50_fu_567_p1 = mac_sm_dout[9:0];

assign xor_ln45_fu_429_p2 = (icmp_ln46_reg_1000 ^ 1'd1);

endmodule //ATTN11_do_adapt_9
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_attn (
        i_stream_TDATA,
        o_stream_TDATA,
        ap_clk,
        ap_rst,
        i_stream_TVALID,
        i_stream_TREADY,
        ap_start,
        o_stream_TVALID,
        o_stream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_TDATA;
output  [31:0] o_stream_TDATA;
input   ap_clk;
input   ap_rst;
input   i_stream_TVALID;
output   i_stream_TREADY;
input   ap_start;
output   o_stream_TVALID;
input   o_stream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    stream_copy2_U0_ap_start;
wire    stream_copy2_U0_start_full_n;
wire    stream_copy2_U0_ap_done;
wire    stream_copy2_U0_ap_continue;
wire    stream_copy2_U0_ap_idle;
wire    stream_copy2_U0_ap_ready;
wire   [25:0] stream_copy2_U0_main_sm_din;
wire    stream_copy2_U0_main_sm_write;
wire   [25:0] stream_copy2_U0_resi_i_sm_din;
wire    stream_copy2_U0_resi_i_sm_write;
wire    stream_copy2_U0_start_out;
wire    stream_copy2_U0_start_write;
wire    stream_copy2_U0_i_stream_TREADY;
wire    do_adapt_5_U0_ap_start;
wire    do_adapt_5_U0_ap_done;
wire    do_adapt_5_U0_ap_continue;
wire    do_adapt_5_U0_ap_idle;
wire    do_adapt_5_U0_ap_ready;
wire    do_adapt_5_U0_resi_i_sm_read;
wire   [51:0] do_adapt_5_U0_resi_sm_din;
wire    do_adapt_5_U0_resi_sm_write;
wire    do_adapt_5_U0_start_out;
wire    do_adapt_5_U0_start_write;
wire    do_adapt_4_U0_ap_start;
wire    do_adapt_4_U0_ap_done;
wire    do_adapt_4_U0_ap_continue;
wire    do_adapt_4_U0_ap_idle;
wire    do_adapt_4_U0_ap_ready;
wire    do_adapt_4_U0_resi_sm_read;
wire   [25:0] do_adapt_4_U0_resi_o_sm_din;
wire    do_adapt_4_U0_resi_o_sm_write;
wire    do_adapt_4_U0_start_out;
wire    do_adapt_4_U0_start_write;
wire    do_layernorm_U0_ap_start;
wire    do_layernorm_U0_ap_done;
wire    do_layernorm_U0_ap_continue;
wire    do_layernorm_U0_ap_idle;
wire    do_layernorm_U0_ap_ready;
wire    do_layernorm_U0_main_sm_read;
wire   [5:0] do_layernorm_U0_lnq_sm_din;
wire    do_layernorm_U0_lnq_sm_write;
wire    do_layernorm_U0_start_out;
wire    do_layernorm_U0_start_write;
wire    stream_copy3_U0_ap_start;
wire    stream_copy3_U0_start_full_n;
wire    stream_copy3_U0_ap_done;
wire    stream_copy3_U0_ap_continue;
wire    stream_copy3_U0_ap_idle;
wire    stream_copy3_U0_ap_ready;
wire    stream_copy3_U0_lnq_sm_read;
wire   [5:0] stream_copy3_U0_lnq_sm_cp1_din;
wire    stream_copy3_U0_lnq_sm_cp1_write;
wire   [5:0] stream_copy3_U0_lnq_sm_cp2_din;
wire    stream_copy3_U0_lnq_sm_cp2_write;
wire   [5:0] stream_copy3_U0_lnq_sm_cp3_din;
wire    stream_copy3_U0_lnq_sm_cp3_write;
wire    stream_copy3_U0_start_out;
wire    stream_copy3_U0_start_write;
wire    do_matmul_2_U0_ap_start;
wire    do_matmul_2_U0_start_out;
wire    do_matmul_2_U0_start_write;
wire    do_matmul_2_U0_lnq_sm_cp1_read;
wire   [23:0] do_matmul_2_U0_q_sm_din;
wire    do_matmul_2_U0_q_sm_write;
wire    do_matmul_2_U0_ap_done;
wire    do_matmul_2_U0_ap_ready;
wire    do_matmul_2_U0_ap_idle;
wire    do_matmul_2_U0_ap_continue;
wire    do_matmul_1_1_U0_ap_start;
wire    do_matmul_1_1_U0_start_out;
wire    do_matmul_1_1_U0_start_write;
wire    do_matmul_1_1_U0_lnq_sm_cp2_read;
wire   [19:0] do_matmul_1_1_U0_k_sm_din;
wire    do_matmul_1_1_U0_k_sm_write;
wire    do_matmul_1_1_U0_ap_done;
wire    do_matmul_1_1_U0_ap_ready;
wire    do_matmul_1_1_U0_ap_idle;
wire    do_matmul_1_1_U0_ap_continue;
wire    do_matmul_4_U0_ap_start;
wire    do_matmul_4_U0_start_out;
wire    do_matmul_4_U0_start_write;
wire    do_matmul_4_U0_lnq_sm_cp3_read;
wire   [19:0] do_matmul_4_U0_v_sm_din;
wire    do_matmul_4_U0_v_sm_write;
wire    do_matmul_4_U0_ap_done;
wire    do_matmul_4_U0_ap_ready;
wire    do_matmul_4_U0_ap_idle;
wire    do_matmul_4_U0_ap_continue;
wire    do_quant_U0_ap_start;
wire    do_quant_U0_ap_done;
wire    do_quant_U0_ap_continue;
wire    do_quant_U0_ap_idle;
wire    do_quant_U0_ap_ready;
wire    do_quant_U0_q_sm_read;
wire   [5:0] do_quant_U0_qq_sm_din;
wire    do_quant_U0_qq_sm_write;
wire    do_quant_U0_start_out;
wire    do_quant_U0_start_write;
wire    do_quant_2_U0_ap_start;
wire    do_quant_2_U0_ap_done;
wire    do_quant_2_U0_ap_continue;
wire    do_quant_2_U0_ap_idle;
wire    do_quant_2_U0_ap_ready;
wire    do_quant_2_U0_k_sm_read;
wire   [5:0] do_quant_2_U0_kq_sm_din;
wire    do_quant_2_U0_kq_sm_write;
wire    do_quant_2_U0_start_out;
wire    do_quant_2_U0_start_write;
wire    do_quant_1_U0_ap_start;
wire    do_quant_1_U0_ap_done;
wire    do_quant_1_U0_ap_continue;
wire    do_quant_1_U0_ap_idle;
wire    do_quant_1_U0_ap_ready;
wire    do_quant_1_U0_v_sm_read;
wire   [5:0] do_quant_1_U0_vq_sm_din;
wire    do_quant_1_U0_vq_sm_write;
wire    do_quant_1_U0_start_out;
wire    do_quant_1_U0_start_write;
wire    do_split_3_U0_ap_start;
wire    do_split_3_U0_start_full_n;
wire    do_split_3_U0_ap_done;
wire    do_split_3_U0_ap_continue;
wire    do_split_3_U0_ap_idle;
wire    do_split_3_U0_ap_ready;
wire    do_split_3_U0_qq_sm_read;
wire   [5:0] do_split_3_U0_qq_sm_head2_din;
wire    do_split_3_U0_qq_sm_head2_write;
wire   [5:0] do_split_3_U0_qq_sm_head3_din;
wire    do_split_3_U0_qq_sm_head3_write;
wire   [5:0] do_split_3_U0_qq_sm_head1_din;
wire    do_split_3_U0_qq_sm_head1_write;
wire    do_split_3_U0_start_out;
wire    do_split_3_U0_start_write;
wire    do_split_4_U0_ap_start;
wire    do_split_4_U0_start_full_n;
wire    do_split_4_U0_ap_done;
wire    do_split_4_U0_ap_continue;
wire    do_split_4_U0_ap_idle;
wire    do_split_4_U0_ap_ready;
wire    do_split_4_U0_kq_sm_read;
wire   [5:0] do_split_4_U0_kq_sm_head2_din;
wire    do_split_4_U0_kq_sm_head2_write;
wire   [5:0] do_split_4_U0_kq_sm_head3_din;
wire    do_split_4_U0_kq_sm_head3_write;
wire   [5:0] do_split_4_U0_kq_sm_head1_din;
wire    do_split_4_U0_kq_sm_head1_write;
wire    do_split_4_U0_start_out;
wire    do_split_4_U0_start_write;
wire    do_split_U0_ap_start;
wire    do_split_U0_start_full_n;
wire    do_split_U0_ap_done;
wire    do_split_U0_ap_continue;
wire    do_split_U0_ap_idle;
wire    do_split_U0_ap_ready;
wire    do_split_U0_vq_sm_read;
wire   [5:0] do_split_U0_vq_sm_head2_din;
wire    do_split_U0_vq_sm_head2_write;
wire   [5:0] do_split_U0_vq_sm_head3_din;
wire    do_split_U0_vq_sm_head3_write;
wire   [5:0] do_split_U0_vq_sm_head1_din;
wire    do_split_U0_vq_sm_head1_write;
wire    do_split_U0_start_out;
wire    do_split_U0_start_write;
wire    do_reshape_5_U0_kq_sm_head1_read;
wire   [83:0] do_reshape_5_U0_kq_sm_reshape_head1_din;
wire    do_reshape_5_U0_kq_sm_reshape_head1_write;
wire    do_reshape_5_U0_ap_start;
wire    do_reshape_5_U0_ap_done;
wire    do_reshape_5_U0_ap_ready;
wire    do_reshape_5_U0_ap_idle;
wire    do_reshape_5_U0_ap_continue;
wire    do_reshape_6_U0_kq_sm_head2_read;
wire   [83:0] do_reshape_6_U0_kq_sm_reshape_head2_din;
wire    do_reshape_6_U0_kq_sm_reshape_head2_write;
wire    do_reshape_6_U0_ap_start;
wire    do_reshape_6_U0_ap_done;
wire    do_reshape_6_U0_ap_ready;
wire    do_reshape_6_U0_ap_idle;
wire    do_reshape_6_U0_ap_continue;
wire    do_reshape_7_U0_kq_sm_head3_read;
wire   [83:0] do_reshape_7_U0_kq_sm_reshape_head3_din;
wire    do_reshape_7_U0_kq_sm_reshape_head3_write;
wire    do_reshape_7_U0_ap_start;
wire    do_reshape_7_U0_ap_done;
wire    do_reshape_7_U0_ap_ready;
wire    do_reshape_7_U0_ap_idle;
wire    do_reshape_7_U0_ap_continue;
wire    do_matmul_8_U0_ap_start;
wire    do_matmul_8_U0_start_out;
wire    do_matmul_8_U0_start_write;
wire    do_matmul_8_U0_qq_sm_head1_read;
wire    do_matmul_8_U0_kq_sm_reshape_head1_read;
wire   [19:0] do_matmul_8_U0_r_sm_head1_din;
wire    do_matmul_8_U0_r_sm_head1_write;
wire    do_matmul_8_U0_ap_done;
wire    do_matmul_8_U0_ap_ready;
wire    do_matmul_8_U0_ap_idle;
wire    do_matmul_8_U0_ap_continue;
wire    do_matmul_9_U0_ap_start;
wire    do_matmul_9_U0_start_out;
wire    do_matmul_9_U0_start_write;
wire    do_matmul_9_U0_qq_sm_head2_read;
wire    do_matmul_9_U0_kq_sm_reshape_head2_read;
wire   [19:0] do_matmul_9_U0_r_sm_head2_din;
wire    do_matmul_9_U0_r_sm_head2_write;
wire    do_matmul_9_U0_ap_done;
wire    do_matmul_9_U0_ap_ready;
wire    do_matmul_9_U0_ap_idle;
wire    do_matmul_9_U0_ap_continue;
wire    do_matmul_1_U0_ap_start;
wire    do_matmul_1_U0_start_out;
wire    do_matmul_1_U0_start_write;
wire    do_matmul_1_U0_qq_sm_head3_read;
wire    do_matmul_1_U0_kq_sm_reshape_head3_read;
wire   [19:0] do_matmul_1_U0_r_sm_head3_din;
wire    do_matmul_1_U0_r_sm_head3_write;
wire    do_matmul_1_U0_ap_done;
wire    do_matmul_1_U0_ap_ready;
wire    do_matmul_1_U0_ap_idle;
wire    do_matmul_1_U0_ap_continue;
wire    do_softmax_10_U0_ap_start;
wire    do_softmax_10_U0_ap_done;
wire    do_softmax_10_U0_ap_continue;
wire    do_softmax_10_U0_ap_idle;
wire    do_softmax_10_U0_ap_ready;
wire    do_softmax_10_U0_r_sm_head1_read;
wire   [5:0] do_softmax_10_U0_rq_sm_head1_din;
wire    do_softmax_10_U0_rq_sm_head1_write;
wire    do_softmax_11_U0_ap_start;
wire    do_softmax_11_U0_ap_done;
wire    do_softmax_11_U0_ap_continue;
wire    do_softmax_11_U0_ap_idle;
wire    do_softmax_11_U0_ap_ready;
wire    do_softmax_11_U0_r_sm_head2_read;
wire   [5:0] do_softmax_11_U0_rq_sm_head2_din;
wire    do_softmax_11_U0_rq_sm_head2_write;
wire    do_softmax_U0_ap_start;
wire    do_softmax_U0_ap_done;
wire    do_softmax_U0_ap_continue;
wire    do_softmax_U0_ap_idle;
wire    do_softmax_U0_ap_ready;
wire    do_softmax_U0_r_sm_head3_read;
wire   [5:0] do_softmax_U0_rq_sm_head3_din;
wire    do_softmax_U0_rq_sm_head3_write;
wire    do_reshape_12_U0_ap_start;
wire    do_reshape_12_U0_start_out;
wire    do_reshape_12_U0_start_write;
wire    do_reshape_12_U0_vq_sm_head1_read;
wire   [83:0] do_reshape_12_U0_vq_sm_transpose_head1_din;
wire    do_reshape_12_U0_vq_sm_transpose_head1_write;
wire    do_reshape_12_U0_ap_done;
wire    do_reshape_12_U0_ap_ready;
wire    do_reshape_12_U0_ap_idle;
wire    do_reshape_12_U0_ap_continue;
wire    do_reshape_13_U0_ap_start;
wire    do_reshape_13_U0_start_out;
wire    do_reshape_13_U0_start_write;
wire    do_reshape_13_U0_vq_sm_head2_read;
wire   [83:0] do_reshape_13_U0_vq_sm_transpose_head2_din;
wire    do_reshape_13_U0_vq_sm_transpose_head2_write;
wire    do_reshape_13_U0_ap_done;
wire    do_reshape_13_U0_ap_ready;
wire    do_reshape_13_U0_ap_idle;
wire    do_reshape_13_U0_ap_continue;
wire    do_reshape_U0_ap_start;
wire    do_reshape_U0_start_out;
wire    do_reshape_U0_start_write;
wire    do_reshape_U0_vq_sm_head3_read;
wire   [83:0] do_reshape_U0_vq_sm_transpose_head3_din;
wire    do_reshape_U0_vq_sm_transpose_head3_write;
wire    do_reshape_U0_ap_done;
wire    do_reshape_U0_ap_ready;
wire    do_reshape_U0_ap_idle;
wire    do_reshape_U0_ap_continue;
wire    do_matmul_14_U0_ap_start;
wire    do_matmul_14_U0_start_out;
wire    do_matmul_14_U0_start_write;
wire    do_matmul_14_U0_rq_sm_head1_read;
wire    do_matmul_14_U0_vq_sm_transpose_head1_read;
wire   [19:0] do_matmul_14_U0_a_sm_head1_din;
wire    do_matmul_14_U0_a_sm_head1_write;
wire    do_matmul_14_U0_ap_done;
wire    do_matmul_14_U0_ap_ready;
wire    do_matmul_14_U0_ap_idle;
wire    do_matmul_14_U0_ap_continue;
wire    do_matmul_15_U0_rq_sm_head2_read;
wire    do_matmul_15_U0_vq_sm_transpose_head2_read;
wire   [19:0] do_matmul_15_U0_a_sm_head2_din;
wire    do_matmul_15_U0_a_sm_head2_write;
wire    do_matmul_15_U0_ap_start;
wire    do_matmul_15_U0_ap_done;
wire    do_matmul_15_U0_ap_ready;
wire    do_matmul_15_U0_ap_idle;
wire    do_matmul_15_U0_ap_continue;
wire    do_matmul_U0_rq_sm_head3_read;
wire    do_matmul_U0_vq_sm_transpose_head3_read;
wire   [19:0] do_matmul_U0_a_sm_head3_din;
wire    do_matmul_U0_a_sm_head3_write;
wire    do_matmul_U0_ap_start;
wire    do_matmul_U0_ap_done;
wire    do_matmul_U0_ap_ready;
wire    do_matmul_U0_ap_idle;
wire    do_matmul_U0_ap_continue;
wire    do_merge_U0_ap_start;
wire    do_merge_U0_ap_done;
wire    do_merge_U0_ap_continue;
wire    do_merge_U0_ap_idle;
wire    do_merge_U0_ap_ready;
wire    do_merge_U0_a_sm_head2_read;
wire    do_merge_U0_a_sm_head3_read;
wire    do_merge_U0_a_sm_head1_read;
wire   [19:0] do_merge_U0_a_sm_din;
wire    do_merge_U0_a_sm_write;
wire    do_merge_U0_start_out;
wire    do_merge_U0_start_write;
wire    do_quant_2_1_U0_ap_start;
wire    do_quant_2_1_U0_ap_done;
wire    do_quant_2_1_U0_ap_continue;
wire    do_quant_2_1_U0_ap_idle;
wire    do_quant_2_1_U0_ap_ready;
wire    do_quant_2_1_U0_a_sm_read;
wire   [5:0] do_quant_2_1_U0_aq_sm_din;
wire    do_quant_2_1_U0_aq_sm_write;
wire    do_quant_2_1_U0_start_out;
wire    do_quant_2_1_U0_start_write;
wire    do_matmul_3_U0_aq_sm_read;
wire   [23:0] do_matmul_3_U0_o_sm_din;
wire    do_matmul_3_U0_o_sm_write;
wire    do_matmul_3_U0_ap_start;
wire    do_matmul_3_U0_ap_done;
wire    do_matmul_3_U0_ap_ready;
wire    do_matmul_3_U0_ap_idle;
wire    do_matmul_3_U0_ap_continue;
wire    stream_merge_U0_ap_start;
wire    stream_merge_U0_ap_done;
wire    stream_merge_U0_ap_continue;
wire    stream_merge_U0_ap_idle;
wire    stream_merge_U0_ap_ready;
wire    stream_merge_U0_resi_o_sm_read;
wire    stream_merge_U0_o_sm_read;
wire   [31:0] stream_merge_U0_o_stream_TDATA;
wire    stream_merge_U0_o_stream_TVALID;
wire    main_sm_full_n;
wire   [25:0] main_sm_dout;
wire   [2:0] main_sm_num_data_valid;
wire   [2:0] main_sm_fifo_cap;
wire    main_sm_empty_n;
wire    resi_i_sm_full_n;
wire   [25:0] resi_i_sm_dout;
wire   [9:0] resi_i_sm_num_data_valid;
wire   [9:0] resi_i_sm_fifo_cap;
wire    resi_i_sm_empty_n;
wire    resi_sm_full_n;
wire   [51:0] resi_sm_dout;
wire   [14:0] resi_sm_num_data_valid;
wire   [14:0] resi_sm_fifo_cap;
wire    resi_sm_empty_n;
wire    resi_o_sm_full_n;
wire   [25:0] resi_o_sm_dout;
wire   [9:0] resi_o_sm_num_data_valid;
wire   [9:0] resi_o_sm_fifo_cap;
wire    resi_o_sm_empty_n;
wire    lnq_sm_full_n;
wire   [5:0] lnq_sm_dout;
wire   [2:0] lnq_sm_num_data_valid;
wire   [2:0] lnq_sm_fifo_cap;
wire    lnq_sm_empty_n;
wire    lnq_sm_cp1_full_n;
wire   [5:0] lnq_sm_cp1_dout;
wire   [2:0] lnq_sm_cp1_num_data_valid;
wire   [2:0] lnq_sm_cp1_fifo_cap;
wire    lnq_sm_cp1_empty_n;
wire    lnq_sm_cp2_full_n;
wire   [5:0] lnq_sm_cp2_dout;
wire   [2:0] lnq_sm_cp2_num_data_valid;
wire   [2:0] lnq_sm_cp2_fifo_cap;
wire    lnq_sm_cp2_empty_n;
wire    lnq_sm_cp3_full_n;
wire   [5:0] lnq_sm_cp3_dout;
wire   [2:0] lnq_sm_cp3_num_data_valid;
wire   [2:0] lnq_sm_cp3_fifo_cap;
wire    lnq_sm_cp3_empty_n;
wire    q_sm_full_n;
wire   [23:0] q_sm_dout;
wire   [2:0] q_sm_num_data_valid;
wire   [2:0] q_sm_fifo_cap;
wire    q_sm_empty_n;
wire    k_sm_full_n;
wire   [19:0] k_sm_dout;
wire   [2:0] k_sm_num_data_valid;
wire   [2:0] k_sm_fifo_cap;
wire    k_sm_empty_n;
wire    v_sm_full_n;
wire   [19:0] v_sm_dout;
wire   [2:0] v_sm_num_data_valid;
wire   [2:0] v_sm_fifo_cap;
wire    v_sm_empty_n;
wire    qq_sm_full_n;
wire   [5:0] qq_sm_dout;
wire   [2:0] qq_sm_num_data_valid;
wire   [2:0] qq_sm_fifo_cap;
wire    qq_sm_empty_n;
wire    kq_sm_full_n;
wire   [5:0] kq_sm_dout;
wire   [2:0] kq_sm_num_data_valid;
wire   [2:0] kq_sm_fifo_cap;
wire    kq_sm_empty_n;
wire    vq_sm_full_n;
wire   [5:0] vq_sm_dout;
wire   [2:0] vq_sm_num_data_valid;
wire   [2:0] vq_sm_fifo_cap;
wire    vq_sm_empty_n;
wire    qq_sm_head1_full_n;
wire   [5:0] qq_sm_head1_dout;
wire   [13:0] qq_sm_head1_num_data_valid;
wire   [13:0] qq_sm_head1_fifo_cap;
wire    qq_sm_head1_empty_n;
wire    qq_sm_head2_full_n;
wire   [5:0] qq_sm_head2_dout;
wire   [13:0] qq_sm_head2_num_data_valid;
wire   [13:0] qq_sm_head2_fifo_cap;
wire    qq_sm_head2_empty_n;
wire    qq_sm_head3_full_n;
wire   [5:0] qq_sm_head3_dout;
wire   [13:0] qq_sm_head3_num_data_valid;
wire   [13:0] qq_sm_head3_fifo_cap;
wire    qq_sm_head3_empty_n;
wire    kq_sm_head1_full_n;
wire   [5:0] kq_sm_head1_dout;
wire   [6:0] kq_sm_head1_num_data_valid;
wire   [6:0] kq_sm_head1_fifo_cap;
wire    kq_sm_head1_empty_n;
wire    kq_sm_head2_full_n;
wire   [5:0] kq_sm_head2_dout;
wire   [6:0] kq_sm_head2_num_data_valid;
wire   [6:0] kq_sm_head2_fifo_cap;
wire    kq_sm_head2_empty_n;
wire    kq_sm_head3_full_n;
wire   [5:0] kq_sm_head3_dout;
wire   [6:0] kq_sm_head3_num_data_valid;
wire   [6:0] kq_sm_head3_fifo_cap;
wire    kq_sm_head3_empty_n;
wire    vq_sm_head1_full_n;
wire   [5:0] vq_sm_head1_dout;
wire   [6:0] vq_sm_head1_num_data_valid;
wire   [6:0] vq_sm_head1_fifo_cap;
wire    vq_sm_head1_empty_n;
wire    vq_sm_head2_full_n;
wire   [5:0] vq_sm_head2_dout;
wire   [6:0] vq_sm_head2_num_data_valid;
wire   [6:0] vq_sm_head2_fifo_cap;
wire    vq_sm_head2_empty_n;
wire    vq_sm_head3_full_n;
wire   [5:0] vq_sm_head3_dout;
wire   [6:0] vq_sm_head3_num_data_valid;
wire   [6:0] vq_sm_head3_fifo_cap;
wire    vq_sm_head3_empty_n;
wire    kq_sm_reshape_head1_full_n;
wire   [83:0] kq_sm_reshape_head1_dout;
wire   [9:0] kq_sm_reshape_head1_num_data_valid;
wire   [9:0] kq_sm_reshape_head1_fifo_cap;
wire    kq_sm_reshape_head1_empty_n;
wire    kq_sm_reshape_head2_full_n;
wire   [83:0] kq_sm_reshape_head2_dout;
wire   [9:0] kq_sm_reshape_head2_num_data_valid;
wire   [9:0] kq_sm_reshape_head2_fifo_cap;
wire    kq_sm_reshape_head2_empty_n;
wire    kq_sm_reshape_head3_full_n;
wire   [83:0] kq_sm_reshape_head3_dout;
wire   [9:0] kq_sm_reshape_head3_num_data_valid;
wire   [9:0] kq_sm_reshape_head3_fifo_cap;
wire    kq_sm_reshape_head3_empty_n;
wire    r_sm_head1_full_n;
wire   [19:0] r_sm_head1_dout;
wire   [9:0] r_sm_head1_num_data_valid;
wire   [9:0] r_sm_head1_fifo_cap;
wire    r_sm_head1_empty_n;
wire    r_sm_head2_full_n;
wire   [19:0] r_sm_head2_dout;
wire   [9:0] r_sm_head2_num_data_valid;
wire   [9:0] r_sm_head2_fifo_cap;
wire    r_sm_head2_empty_n;
wire    r_sm_head3_full_n;
wire   [19:0] r_sm_head3_dout;
wire   [9:0] r_sm_head3_num_data_valid;
wire   [9:0] r_sm_head3_fifo_cap;
wire    r_sm_head3_empty_n;
wire    rq_sm_head1_full_n;
wire   [5:0] rq_sm_head1_dout;
wire   [9:0] rq_sm_head1_num_data_valid;
wire   [9:0] rq_sm_head1_fifo_cap;
wire    rq_sm_head1_empty_n;
wire    rq_sm_head2_full_n;
wire   [5:0] rq_sm_head2_dout;
wire   [9:0] rq_sm_head2_num_data_valid;
wire   [9:0] rq_sm_head2_fifo_cap;
wire    rq_sm_head2_empty_n;
wire    rq_sm_head3_full_n;
wire   [5:0] rq_sm_head3_dout;
wire   [9:0] rq_sm_head3_num_data_valid;
wire   [9:0] rq_sm_head3_fifo_cap;
wire    rq_sm_head3_empty_n;
wire    vq_sm_transpose_head1_full_n;
wire   [83:0] vq_sm_transpose_head1_dout;
wire   [9:0] vq_sm_transpose_head1_num_data_valid;
wire   [9:0] vq_sm_transpose_head1_fifo_cap;
wire    vq_sm_transpose_head1_empty_n;
wire    vq_sm_transpose_head2_full_n;
wire   [83:0] vq_sm_transpose_head2_dout;
wire   [9:0] vq_sm_transpose_head2_num_data_valid;
wire   [9:0] vq_sm_transpose_head2_fifo_cap;
wire    vq_sm_transpose_head2_empty_n;
wire    vq_sm_transpose_head3_full_n;
wire   [83:0] vq_sm_transpose_head3_dout;
wire   [9:0] vq_sm_transpose_head3_num_data_valid;
wire   [9:0] vq_sm_transpose_head3_fifo_cap;
wire    vq_sm_transpose_head3_empty_n;
wire    a_sm_head1_full_n;
wire   [19:0] a_sm_head1_dout;
wire   [6:0] a_sm_head1_num_data_valid;
wire   [6:0] a_sm_head1_fifo_cap;
wire    a_sm_head1_empty_n;
wire    a_sm_head2_full_n;
wire   [19:0] a_sm_head2_dout;
wire   [6:0] a_sm_head2_num_data_valid;
wire   [6:0] a_sm_head2_fifo_cap;
wire    a_sm_head2_empty_n;
wire    a_sm_head3_full_n;
wire   [19:0] a_sm_head3_dout;
wire   [6:0] a_sm_head3_num_data_valid;
wire   [6:0] a_sm_head3_fifo_cap;
wire    a_sm_head3_empty_n;
wire    a_sm_full_n;
wire   [19:0] a_sm_dout;
wire   [2:0] a_sm_num_data_valid;
wire   [2:0] a_sm_fifo_cap;
wire    a_sm_empty_n;
wire    aq_sm_full_n;
wire   [5:0] aq_sm_dout;
wire   [2:0] aq_sm_num_data_valid;
wire   [2:0] aq_sm_fifo_cap;
wire    aq_sm_empty_n;
wire    o_sm_full_n;
wire   [23:0] o_sm_dout;
wire   [2:0] o_sm_num_data_valid;
wire   [2:0] o_sm_fifo_cap;
wire    o_sm_empty_n;
wire   [0:0] start_for_do_adapt_5_U0_din;
wire    start_for_do_adapt_5_U0_full_n;
wire   [0:0] start_for_do_adapt_5_U0_dout;
wire    start_for_do_adapt_5_U0_empty_n;
wire   [0:0] start_for_do_layernorm_U0_din;
wire    start_for_do_layernorm_U0_full_n;
wire   [0:0] start_for_do_layernorm_U0_dout;
wire    start_for_do_layernorm_U0_empty_n;
wire   [0:0] start_for_do_adapt_4_U0_din;
wire    start_for_do_adapt_4_U0_full_n;
wire   [0:0] start_for_do_adapt_4_U0_dout;
wire    start_for_do_adapt_4_U0_empty_n;
wire   [0:0] start_for_stream_merge_U0_din;
wire    start_for_stream_merge_U0_full_n;
wire   [0:0] start_for_stream_merge_U0_dout;
wire    start_for_stream_merge_U0_empty_n;
wire   [0:0] start_for_stream_copy3_U0_din;
wire    start_for_stream_copy3_U0_full_n;
wire   [0:0] start_for_stream_copy3_U0_dout;
wire    start_for_stream_copy3_U0_empty_n;
wire   [0:0] start_for_do_matmul_2_U0_din;
wire    start_for_do_matmul_2_U0_full_n;
wire   [0:0] start_for_do_matmul_2_U0_dout;
wire    start_for_do_matmul_2_U0_empty_n;
wire   [0:0] start_for_do_matmul_1_1_U0_din;
wire    start_for_do_matmul_1_1_U0_full_n;
wire   [0:0] start_for_do_matmul_1_1_U0_dout;
wire    start_for_do_matmul_1_1_U0_empty_n;
wire   [0:0] start_for_do_matmul_4_U0_din;
wire    start_for_do_matmul_4_U0_full_n;
wire   [0:0] start_for_do_matmul_4_U0_dout;
wire    start_for_do_matmul_4_U0_empty_n;
wire   [0:0] start_for_do_quant_U0_din;
wire    start_for_do_quant_U0_full_n;
wire   [0:0] start_for_do_quant_U0_dout;
wire    start_for_do_quant_U0_empty_n;
wire   [0:0] start_for_do_quant_2_U0_din;
wire    start_for_do_quant_2_U0_full_n;
wire   [0:0] start_for_do_quant_2_U0_dout;
wire    start_for_do_quant_2_U0_empty_n;
wire   [0:0] start_for_do_quant_1_U0_din;
wire    start_for_do_quant_1_U0_full_n;
wire   [0:0] start_for_do_quant_1_U0_dout;
wire    start_for_do_quant_1_U0_empty_n;
wire   [0:0] start_for_do_split_3_U0_din;
wire    start_for_do_split_3_U0_full_n;
wire   [0:0] start_for_do_split_3_U0_dout;
wire    start_for_do_split_3_U0_empty_n;
wire   [0:0] start_for_do_split_4_U0_din;
wire    start_for_do_split_4_U0_full_n;
wire   [0:0] start_for_do_split_4_U0_dout;
wire    start_for_do_split_4_U0_empty_n;
wire   [0:0] start_for_do_split_U0_din;
wire    start_for_do_split_U0_full_n;
wire   [0:0] start_for_do_split_U0_dout;
wire    start_for_do_split_U0_empty_n;
wire   [0:0] start_for_do_matmul_8_U0_din;
wire    start_for_do_matmul_8_U0_full_n;
wire   [0:0] start_for_do_matmul_8_U0_dout;
wire    start_for_do_matmul_8_U0_empty_n;
wire   [0:0] start_for_do_matmul_9_U0_din;
wire    start_for_do_matmul_9_U0_full_n;
wire   [0:0] start_for_do_matmul_9_U0_dout;
wire    start_for_do_matmul_9_U0_empty_n;
wire   [0:0] start_for_do_matmul_1_U0_din;
wire    start_for_do_matmul_1_U0_full_n;
wire   [0:0] start_for_do_matmul_1_U0_dout;
wire    start_for_do_matmul_1_U0_empty_n;
wire   [0:0] start_for_do_reshape_5_U0_din;
wire    start_for_do_reshape_5_U0_full_n;
wire   [0:0] start_for_do_reshape_5_U0_dout;
wire    start_for_do_reshape_5_U0_empty_n;
wire   [0:0] start_for_do_reshape_6_U0_din;
wire    start_for_do_reshape_6_U0_full_n;
wire   [0:0] start_for_do_reshape_6_U0_dout;
wire    start_for_do_reshape_6_U0_empty_n;
wire   [0:0] start_for_do_reshape_7_U0_din;
wire    start_for_do_reshape_7_U0_full_n;
wire   [0:0] start_for_do_reshape_7_U0_dout;
wire    start_for_do_reshape_7_U0_empty_n;
wire   [0:0] start_for_do_reshape_12_U0_din;
wire    start_for_do_reshape_12_U0_full_n;
wire   [0:0] start_for_do_reshape_12_U0_dout;
wire    start_for_do_reshape_12_U0_empty_n;
wire   [0:0] start_for_do_reshape_13_U0_din;
wire    start_for_do_reshape_13_U0_full_n;
wire   [0:0] start_for_do_reshape_13_U0_dout;
wire    start_for_do_reshape_13_U0_empty_n;
wire   [0:0] start_for_do_reshape_U0_din;
wire    start_for_do_reshape_U0_full_n;
wire   [0:0] start_for_do_reshape_U0_dout;
wire    start_for_do_reshape_U0_empty_n;
wire   [0:0] start_for_do_softmax_10_U0_din;
wire    start_for_do_softmax_10_U0_full_n;
wire   [0:0] start_for_do_softmax_10_U0_dout;
wire    start_for_do_softmax_10_U0_empty_n;
wire   [0:0] start_for_do_softmax_11_U0_din;
wire    start_for_do_softmax_11_U0_full_n;
wire   [0:0] start_for_do_softmax_11_U0_dout;
wire    start_for_do_softmax_11_U0_empty_n;
wire   [0:0] start_for_do_softmax_U0_din;
wire    start_for_do_softmax_U0_full_n;
wire   [0:0] start_for_do_softmax_U0_dout;
wire    start_for_do_softmax_U0_empty_n;
wire   [0:0] start_for_do_matmul_14_U0_din;
wire    start_for_do_matmul_14_U0_full_n;
wire   [0:0] start_for_do_matmul_14_U0_dout;
wire    start_for_do_matmul_14_U0_empty_n;
wire   [0:0] start_for_do_matmul_15_U0_din;
wire    start_for_do_matmul_15_U0_full_n;
wire   [0:0] start_for_do_matmul_15_U0_dout;
wire    start_for_do_matmul_15_U0_empty_n;
wire   [0:0] start_for_do_matmul_U0_din;
wire    start_for_do_matmul_U0_full_n;
wire   [0:0] start_for_do_matmul_U0_dout;
wire    start_for_do_matmul_U0_empty_n;
wire   [0:0] start_for_do_merge_U0_din;
wire    start_for_do_merge_U0_full_n;
wire   [0:0] start_for_do_merge_U0_dout;
wire    start_for_do_merge_U0_empty_n;
wire   [0:0] start_for_do_quant_2_1_U0_din;
wire    start_for_do_quant_2_1_U0_full_n;
wire   [0:0] start_for_do_quant_2_1_U0_dout;
wire    start_for_do_quant_2_1_U0_empty_n;
wire   [0:0] start_for_do_matmul_3_U0_din;
wire    start_for_do_matmul_3_U0_full_n;
wire   [0:0] start_for_do_matmul_3_U0_dout;
wire    start_for_do_matmul_3_U0_empty_n;

ATTN11_stream_copy2 stream_copy2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_copy2_U0_ap_start),
    .start_full_n(stream_copy2_U0_start_full_n),
    .ap_done(stream_copy2_U0_ap_done),
    .ap_continue(stream_copy2_U0_ap_continue),
    .ap_idle(stream_copy2_U0_ap_idle),
    .ap_ready(stream_copy2_U0_ap_ready),
    .i_stream_TVALID(i_stream_TVALID),
    .main_sm_din(stream_copy2_U0_main_sm_din),
    .main_sm_num_data_valid(main_sm_num_data_valid),
    .main_sm_fifo_cap(main_sm_fifo_cap),
    .main_sm_full_n(main_sm_full_n),
    .main_sm_write(stream_copy2_U0_main_sm_write),
    .resi_i_sm_din(stream_copy2_U0_resi_i_sm_din),
    .resi_i_sm_num_data_valid(resi_i_sm_num_data_valid),
    .resi_i_sm_fifo_cap(resi_i_sm_fifo_cap),
    .resi_i_sm_full_n(resi_i_sm_full_n),
    .resi_i_sm_write(stream_copy2_U0_resi_i_sm_write),
    .start_out(stream_copy2_U0_start_out),
    .start_write(stream_copy2_U0_start_write),
    .i_stream_TDATA(i_stream_TDATA),
    .i_stream_TREADY(stream_copy2_U0_i_stream_TREADY)
);

ATTN11_do_adapt_5 do_adapt_5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_5_U0_ap_start),
    .start_full_n(start_for_do_adapt_4_U0_full_n),
    .ap_done(do_adapt_5_U0_ap_done),
    .ap_continue(do_adapt_5_U0_ap_continue),
    .ap_idle(do_adapt_5_U0_ap_idle),
    .ap_ready(do_adapt_5_U0_ap_ready),
    .resi_i_sm_dout(resi_i_sm_dout),
    .resi_i_sm_num_data_valid(resi_i_sm_num_data_valid),
    .resi_i_sm_fifo_cap(resi_i_sm_fifo_cap),
    .resi_i_sm_empty_n(resi_i_sm_empty_n),
    .resi_i_sm_read(do_adapt_5_U0_resi_i_sm_read),
    .resi_sm_din(do_adapt_5_U0_resi_sm_din),
    .resi_sm_num_data_valid(resi_sm_num_data_valid),
    .resi_sm_fifo_cap(resi_sm_fifo_cap),
    .resi_sm_full_n(resi_sm_full_n),
    .resi_sm_write(do_adapt_5_U0_resi_sm_write),
    .start_out(do_adapt_5_U0_start_out),
    .start_write(do_adapt_5_U0_start_write)
);

ATTN11_do_adapt_4 do_adapt_4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_4_U0_ap_start),
    .start_full_n(start_for_stream_merge_U0_full_n),
    .ap_done(do_adapt_4_U0_ap_done),
    .ap_continue(do_adapt_4_U0_ap_continue),
    .ap_idle(do_adapt_4_U0_ap_idle),
    .ap_ready(do_adapt_4_U0_ap_ready),
    .resi_sm_dout(resi_sm_dout),
    .resi_sm_num_data_valid(resi_sm_num_data_valid),
    .resi_sm_fifo_cap(resi_sm_fifo_cap),
    .resi_sm_empty_n(resi_sm_empty_n),
    .resi_sm_read(do_adapt_4_U0_resi_sm_read),
    .resi_o_sm_din(do_adapt_4_U0_resi_o_sm_din),
    .resi_o_sm_num_data_valid(resi_o_sm_num_data_valid),
    .resi_o_sm_fifo_cap(resi_o_sm_fifo_cap),
    .resi_o_sm_full_n(resi_o_sm_full_n),
    .resi_o_sm_write(do_adapt_4_U0_resi_o_sm_write),
    .start_out(do_adapt_4_U0_start_out),
    .start_write(do_adapt_4_U0_start_write)
);

ATTN11_do_layernorm do_layernorm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_layernorm_U0_ap_start),
    .start_full_n(start_for_stream_copy3_U0_full_n),
    .ap_done(do_layernorm_U0_ap_done),
    .ap_continue(do_layernorm_U0_ap_continue),
    .ap_idle(do_layernorm_U0_ap_idle),
    .ap_ready(do_layernorm_U0_ap_ready),
    .main_sm_dout(main_sm_dout),
    .main_sm_num_data_valid(main_sm_num_data_valid),
    .main_sm_fifo_cap(main_sm_fifo_cap),
    .main_sm_empty_n(main_sm_empty_n),
    .main_sm_read(do_layernorm_U0_main_sm_read),
    .lnq_sm_din(do_layernorm_U0_lnq_sm_din),
    .lnq_sm_num_data_valid(lnq_sm_num_data_valid),
    .lnq_sm_fifo_cap(lnq_sm_fifo_cap),
    .lnq_sm_full_n(lnq_sm_full_n),
    .lnq_sm_write(do_layernorm_U0_lnq_sm_write),
    .start_out(do_layernorm_U0_start_out),
    .start_write(do_layernorm_U0_start_write)
);

ATTN11_stream_copy3 stream_copy3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_copy3_U0_ap_start),
    .start_full_n(stream_copy3_U0_start_full_n),
    .ap_done(stream_copy3_U0_ap_done),
    .ap_continue(stream_copy3_U0_ap_continue),
    .ap_idle(stream_copy3_U0_ap_idle),
    .ap_ready(stream_copy3_U0_ap_ready),
    .lnq_sm_dout(lnq_sm_dout),
    .lnq_sm_num_data_valid(lnq_sm_num_data_valid),
    .lnq_sm_fifo_cap(lnq_sm_fifo_cap),
    .lnq_sm_empty_n(lnq_sm_empty_n),
    .lnq_sm_read(stream_copy3_U0_lnq_sm_read),
    .lnq_sm_cp1_din(stream_copy3_U0_lnq_sm_cp1_din),
    .lnq_sm_cp1_num_data_valid(lnq_sm_cp1_num_data_valid),
    .lnq_sm_cp1_fifo_cap(lnq_sm_cp1_fifo_cap),
    .lnq_sm_cp1_full_n(lnq_sm_cp1_full_n),
    .lnq_sm_cp1_write(stream_copy3_U0_lnq_sm_cp1_write),
    .lnq_sm_cp2_din(stream_copy3_U0_lnq_sm_cp2_din),
    .lnq_sm_cp2_num_data_valid(lnq_sm_cp2_num_data_valid),
    .lnq_sm_cp2_fifo_cap(lnq_sm_cp2_fifo_cap),
    .lnq_sm_cp2_full_n(lnq_sm_cp2_full_n),
    .lnq_sm_cp2_write(stream_copy3_U0_lnq_sm_cp2_write),
    .lnq_sm_cp3_din(stream_copy3_U0_lnq_sm_cp3_din),
    .lnq_sm_cp3_num_data_valid(lnq_sm_cp3_num_data_valid),
    .lnq_sm_cp3_fifo_cap(lnq_sm_cp3_fifo_cap),
    .lnq_sm_cp3_full_n(lnq_sm_cp3_full_n),
    .lnq_sm_cp3_write(stream_copy3_U0_lnq_sm_cp3_write),
    .start_out(stream_copy3_U0_start_out),
    .start_write(stream_copy3_U0_start_write)
);

ATTN11_do_matmul_2 do_matmul_2_U0(
    .ap_start(do_matmul_2_U0_ap_start),
    .start_full_n(start_for_do_quant_U0_full_n),
    .start_out(do_matmul_2_U0_start_out),
    .start_write(do_matmul_2_U0_start_write),
    .lnq_sm_cp1_dout(lnq_sm_cp1_dout),
    .lnq_sm_cp1_empty_n(lnq_sm_cp1_empty_n),
    .lnq_sm_cp1_read(do_matmul_2_U0_lnq_sm_cp1_read),
    .q_sm_din(do_matmul_2_U0_q_sm_din),
    .q_sm_full_n(q_sm_full_n),
    .q_sm_write(do_matmul_2_U0_q_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_2_U0_ap_done),
    .ap_ready(do_matmul_2_U0_ap_ready),
    .ap_idle(do_matmul_2_U0_ap_idle),
    .ap_continue(do_matmul_2_U0_ap_continue)
);

ATTN11_do_matmul_1_1 do_matmul_1_1_U0(
    .ap_start(do_matmul_1_1_U0_ap_start),
    .start_full_n(start_for_do_quant_2_U0_full_n),
    .start_out(do_matmul_1_1_U0_start_out),
    .start_write(do_matmul_1_1_U0_start_write),
    .lnq_sm_cp2_dout(lnq_sm_cp2_dout),
    .lnq_sm_cp2_empty_n(lnq_sm_cp2_empty_n),
    .lnq_sm_cp2_read(do_matmul_1_1_U0_lnq_sm_cp2_read),
    .k_sm_din(do_matmul_1_1_U0_k_sm_din),
    .k_sm_full_n(k_sm_full_n),
    .k_sm_write(do_matmul_1_1_U0_k_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_1_1_U0_ap_done),
    .ap_ready(do_matmul_1_1_U0_ap_ready),
    .ap_idle(do_matmul_1_1_U0_ap_idle),
    .ap_continue(do_matmul_1_1_U0_ap_continue)
);

ATTN11_do_matmul_4 do_matmul_4_U0(
    .ap_start(do_matmul_4_U0_ap_start),
    .start_full_n(start_for_do_quant_1_U0_full_n),
    .start_out(do_matmul_4_U0_start_out),
    .start_write(do_matmul_4_U0_start_write),
    .lnq_sm_cp3_dout(lnq_sm_cp3_dout),
    .lnq_sm_cp3_empty_n(lnq_sm_cp3_empty_n),
    .lnq_sm_cp3_read(do_matmul_4_U0_lnq_sm_cp3_read),
    .v_sm_din(do_matmul_4_U0_v_sm_din),
    .v_sm_full_n(v_sm_full_n),
    .v_sm_write(do_matmul_4_U0_v_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_4_U0_ap_done),
    .ap_ready(do_matmul_4_U0_ap_ready),
    .ap_idle(do_matmul_4_U0_ap_idle),
    .ap_continue(do_matmul_4_U0_ap_continue)
);

ATTN11_do_quant do_quant_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_U0_ap_start),
    .start_full_n(start_for_do_split_3_U0_full_n),
    .ap_done(do_quant_U0_ap_done),
    .ap_continue(do_quant_U0_ap_continue),
    .ap_idle(do_quant_U0_ap_idle),
    .ap_ready(do_quant_U0_ap_ready),
    .q_sm_dout(q_sm_dout),
    .q_sm_num_data_valid(q_sm_num_data_valid),
    .q_sm_fifo_cap(q_sm_fifo_cap),
    .q_sm_empty_n(q_sm_empty_n),
    .q_sm_read(do_quant_U0_q_sm_read),
    .qq_sm_din(do_quant_U0_qq_sm_din),
    .qq_sm_num_data_valid(qq_sm_num_data_valid),
    .qq_sm_fifo_cap(qq_sm_fifo_cap),
    .qq_sm_full_n(qq_sm_full_n),
    .qq_sm_write(do_quant_U0_qq_sm_write),
    .start_out(do_quant_U0_start_out),
    .start_write(do_quant_U0_start_write)
);

ATTN11_do_quant_2 do_quant_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_2_U0_ap_start),
    .start_full_n(start_for_do_split_4_U0_full_n),
    .ap_done(do_quant_2_U0_ap_done),
    .ap_continue(do_quant_2_U0_ap_continue),
    .ap_idle(do_quant_2_U0_ap_idle),
    .ap_ready(do_quant_2_U0_ap_ready),
    .k_sm_dout(k_sm_dout),
    .k_sm_num_data_valid(k_sm_num_data_valid),
    .k_sm_fifo_cap(k_sm_fifo_cap),
    .k_sm_empty_n(k_sm_empty_n),
    .k_sm_read(do_quant_2_U0_k_sm_read),
    .kq_sm_din(do_quant_2_U0_kq_sm_din),
    .kq_sm_num_data_valid(kq_sm_num_data_valid),
    .kq_sm_fifo_cap(kq_sm_fifo_cap),
    .kq_sm_full_n(kq_sm_full_n),
    .kq_sm_write(do_quant_2_U0_kq_sm_write),
    .start_out(do_quant_2_U0_start_out),
    .start_write(do_quant_2_U0_start_write)
);

ATTN11_do_quant_1 do_quant_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_1_U0_ap_start),
    .start_full_n(start_for_do_split_U0_full_n),
    .ap_done(do_quant_1_U0_ap_done),
    .ap_continue(do_quant_1_U0_ap_continue),
    .ap_idle(do_quant_1_U0_ap_idle),
    .ap_ready(do_quant_1_U0_ap_ready),
    .v_sm_dout(v_sm_dout),
    .v_sm_num_data_valid(v_sm_num_data_valid),
    .v_sm_fifo_cap(v_sm_fifo_cap),
    .v_sm_empty_n(v_sm_empty_n),
    .v_sm_read(do_quant_1_U0_v_sm_read),
    .vq_sm_din(do_quant_1_U0_vq_sm_din),
    .vq_sm_num_data_valid(vq_sm_num_data_valid),
    .vq_sm_fifo_cap(vq_sm_fifo_cap),
    .vq_sm_full_n(vq_sm_full_n),
    .vq_sm_write(do_quant_1_U0_vq_sm_write),
    .start_out(do_quant_1_U0_start_out),
    .start_write(do_quant_1_U0_start_write)
);

ATTN11_do_split_3 do_split_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_split_3_U0_ap_start),
    .start_full_n(do_split_3_U0_start_full_n),
    .ap_done(do_split_3_U0_ap_done),
    .ap_continue(do_split_3_U0_ap_continue),
    .ap_idle(do_split_3_U0_ap_idle),
    .ap_ready(do_split_3_U0_ap_ready),
    .qq_sm_dout(qq_sm_dout),
    .qq_sm_num_data_valid(qq_sm_num_data_valid),
    .qq_sm_fifo_cap(qq_sm_fifo_cap),
    .qq_sm_empty_n(qq_sm_empty_n),
    .qq_sm_read(do_split_3_U0_qq_sm_read),
    .qq_sm_head2_din(do_split_3_U0_qq_sm_head2_din),
    .qq_sm_head2_num_data_valid(qq_sm_head2_num_data_valid),
    .qq_sm_head2_fifo_cap(qq_sm_head2_fifo_cap),
    .qq_sm_head2_full_n(qq_sm_head2_full_n),
    .qq_sm_head2_write(do_split_3_U0_qq_sm_head2_write),
    .qq_sm_head3_din(do_split_3_U0_qq_sm_head3_din),
    .qq_sm_head3_num_data_valid(qq_sm_head3_num_data_valid),
    .qq_sm_head3_fifo_cap(qq_sm_head3_fifo_cap),
    .qq_sm_head3_full_n(qq_sm_head3_full_n),
    .qq_sm_head3_write(do_split_3_U0_qq_sm_head3_write),
    .qq_sm_head1_din(do_split_3_U0_qq_sm_head1_din),
    .qq_sm_head1_num_data_valid(qq_sm_head1_num_data_valid),
    .qq_sm_head1_fifo_cap(qq_sm_head1_fifo_cap),
    .qq_sm_head1_full_n(qq_sm_head1_full_n),
    .qq_sm_head1_write(do_split_3_U0_qq_sm_head1_write),
    .start_out(do_split_3_U0_start_out),
    .start_write(do_split_3_U0_start_write)
);

ATTN11_do_split_4 do_split_4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_split_4_U0_ap_start),
    .start_full_n(do_split_4_U0_start_full_n),
    .ap_done(do_split_4_U0_ap_done),
    .ap_continue(do_split_4_U0_ap_continue),
    .ap_idle(do_split_4_U0_ap_idle),
    .ap_ready(do_split_4_U0_ap_ready),
    .kq_sm_dout(kq_sm_dout),
    .kq_sm_num_data_valid(kq_sm_num_data_valid),
    .kq_sm_fifo_cap(kq_sm_fifo_cap),
    .kq_sm_empty_n(kq_sm_empty_n),
    .kq_sm_read(do_split_4_U0_kq_sm_read),
    .kq_sm_head2_din(do_split_4_U0_kq_sm_head2_din),
    .kq_sm_head2_num_data_valid(kq_sm_head2_num_data_valid),
    .kq_sm_head2_fifo_cap(kq_sm_head2_fifo_cap),
    .kq_sm_head2_full_n(kq_sm_head2_full_n),
    .kq_sm_head2_write(do_split_4_U0_kq_sm_head2_write),
    .kq_sm_head3_din(do_split_4_U0_kq_sm_head3_din),
    .kq_sm_head3_num_data_valid(kq_sm_head3_num_data_valid),
    .kq_sm_head3_fifo_cap(kq_sm_head3_fifo_cap),
    .kq_sm_head3_full_n(kq_sm_head3_full_n),
    .kq_sm_head3_write(do_split_4_U0_kq_sm_head3_write),
    .kq_sm_head1_din(do_split_4_U0_kq_sm_head1_din),
    .kq_sm_head1_num_data_valid(kq_sm_head1_num_data_valid),
    .kq_sm_head1_fifo_cap(kq_sm_head1_fifo_cap),
    .kq_sm_head1_full_n(kq_sm_head1_full_n),
    .kq_sm_head1_write(do_split_4_U0_kq_sm_head1_write),
    .start_out(do_split_4_U0_start_out),
    .start_write(do_split_4_U0_start_write)
);

ATTN11_do_split do_split_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_split_U0_ap_start),
    .start_full_n(do_split_U0_start_full_n),
    .ap_done(do_split_U0_ap_done),
    .ap_continue(do_split_U0_ap_continue),
    .ap_idle(do_split_U0_ap_idle),
    .ap_ready(do_split_U0_ap_ready),
    .vq_sm_dout(vq_sm_dout),
    .vq_sm_num_data_valid(vq_sm_num_data_valid),
    .vq_sm_fifo_cap(vq_sm_fifo_cap),
    .vq_sm_empty_n(vq_sm_empty_n),
    .vq_sm_read(do_split_U0_vq_sm_read),
    .vq_sm_head2_din(do_split_U0_vq_sm_head2_din),
    .vq_sm_head2_num_data_valid(vq_sm_head2_num_data_valid),
    .vq_sm_head2_fifo_cap(vq_sm_head2_fifo_cap),
    .vq_sm_head2_full_n(vq_sm_head2_full_n),
    .vq_sm_head2_write(do_split_U0_vq_sm_head2_write),
    .vq_sm_head3_din(do_split_U0_vq_sm_head3_din),
    .vq_sm_head3_num_data_valid(vq_sm_head3_num_data_valid),
    .vq_sm_head3_fifo_cap(vq_sm_head3_fifo_cap),
    .vq_sm_head3_full_n(vq_sm_head3_full_n),
    .vq_sm_head3_write(do_split_U0_vq_sm_head3_write),
    .vq_sm_head1_din(do_split_U0_vq_sm_head1_din),
    .vq_sm_head1_num_data_valid(vq_sm_head1_num_data_valid),
    .vq_sm_head1_fifo_cap(vq_sm_head1_fifo_cap),
    .vq_sm_head1_full_n(vq_sm_head1_full_n),
    .vq_sm_head1_write(do_split_U0_vq_sm_head1_write),
    .start_out(do_split_U0_start_out),
    .start_write(do_split_U0_start_write)
);

ATTN11_do_reshape_5 do_reshape_5_U0(
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(do_reshape_5_U0_kq_sm_head1_read),
    .kq_sm_reshape_head1_din(do_reshape_5_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(do_reshape_5_U0_kq_sm_reshape_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_reshape_5_U0_ap_start),
    .ap_done(do_reshape_5_U0_ap_done),
    .ap_ready(do_reshape_5_U0_ap_ready),
    .ap_idle(do_reshape_5_U0_ap_idle),
    .ap_continue(do_reshape_5_U0_ap_continue)
);

ATTN11_do_reshape_6 do_reshape_6_U0(
    .kq_sm_head2_dout(kq_sm_head2_dout),
    .kq_sm_head2_empty_n(kq_sm_head2_empty_n),
    .kq_sm_head2_read(do_reshape_6_U0_kq_sm_head2_read),
    .kq_sm_reshape_head2_din(do_reshape_6_U0_kq_sm_reshape_head2_din),
    .kq_sm_reshape_head2_full_n(kq_sm_reshape_head2_full_n),
    .kq_sm_reshape_head2_write(do_reshape_6_U0_kq_sm_reshape_head2_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_reshape_6_U0_ap_start),
    .ap_done(do_reshape_6_U0_ap_done),
    .ap_ready(do_reshape_6_U0_ap_ready),
    .ap_idle(do_reshape_6_U0_ap_idle),
    .ap_continue(do_reshape_6_U0_ap_continue)
);

ATTN11_do_reshape_7 do_reshape_7_U0(
    .kq_sm_head3_dout(kq_sm_head3_dout),
    .kq_sm_head3_empty_n(kq_sm_head3_empty_n),
    .kq_sm_head3_read(do_reshape_7_U0_kq_sm_head3_read),
    .kq_sm_reshape_head3_din(do_reshape_7_U0_kq_sm_reshape_head3_din),
    .kq_sm_reshape_head3_full_n(kq_sm_reshape_head3_full_n),
    .kq_sm_reshape_head3_write(do_reshape_7_U0_kq_sm_reshape_head3_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_reshape_7_U0_ap_start),
    .ap_done(do_reshape_7_U0_ap_done),
    .ap_ready(do_reshape_7_U0_ap_ready),
    .ap_idle(do_reshape_7_U0_ap_idle),
    .ap_continue(do_reshape_7_U0_ap_continue)
);

ATTN11_do_matmul_8 do_matmul_8_U0(
    .ap_start(do_matmul_8_U0_ap_start),
    .start_full_n(start_for_do_softmax_10_U0_full_n),
    .start_out(do_matmul_8_U0_start_out),
    .start_write(do_matmul_8_U0_start_write),
    .qq_sm_head1_dout(qq_sm_head1_dout),
    .qq_sm_head1_empty_n(qq_sm_head1_empty_n),
    .qq_sm_head1_read(do_matmul_8_U0_qq_sm_head1_read),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head1_dout),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head1_empty_n),
    .kq_sm_reshape_head1_read(do_matmul_8_U0_kq_sm_reshape_head1_read),
    .r_sm_head1_din(do_matmul_8_U0_r_sm_head1_din),
    .r_sm_head1_full_n(r_sm_head1_full_n),
    .r_sm_head1_write(do_matmul_8_U0_r_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_8_U0_ap_done),
    .ap_ready(do_matmul_8_U0_ap_ready),
    .ap_idle(do_matmul_8_U0_ap_idle),
    .ap_continue(do_matmul_8_U0_ap_continue)
);

ATTN11_do_matmul_9 do_matmul_9_U0(
    .ap_start(do_matmul_9_U0_ap_start),
    .start_full_n(start_for_do_softmax_11_U0_full_n),
    .start_out(do_matmul_9_U0_start_out),
    .start_write(do_matmul_9_U0_start_write),
    .qq_sm_head2_dout(qq_sm_head2_dout),
    .qq_sm_head2_empty_n(qq_sm_head2_empty_n),
    .qq_sm_head2_read(do_matmul_9_U0_qq_sm_head2_read),
    .kq_sm_reshape_head2_dout(kq_sm_reshape_head2_dout),
    .kq_sm_reshape_head2_empty_n(kq_sm_reshape_head2_empty_n),
    .kq_sm_reshape_head2_read(do_matmul_9_U0_kq_sm_reshape_head2_read),
    .r_sm_head2_din(do_matmul_9_U0_r_sm_head2_din),
    .r_sm_head2_full_n(r_sm_head2_full_n),
    .r_sm_head2_write(do_matmul_9_U0_r_sm_head2_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_9_U0_ap_done),
    .ap_ready(do_matmul_9_U0_ap_ready),
    .ap_idle(do_matmul_9_U0_ap_idle),
    .ap_continue(do_matmul_9_U0_ap_continue)
);

ATTN11_do_matmul_1 do_matmul_1_U0(
    .ap_start(do_matmul_1_U0_ap_start),
    .start_full_n(start_for_do_softmax_U0_full_n),
    .start_out(do_matmul_1_U0_start_out),
    .start_write(do_matmul_1_U0_start_write),
    .qq_sm_head3_dout(qq_sm_head3_dout),
    .qq_sm_head3_empty_n(qq_sm_head3_empty_n),
    .qq_sm_head3_read(do_matmul_1_U0_qq_sm_head3_read),
    .kq_sm_reshape_head3_dout(kq_sm_reshape_head3_dout),
    .kq_sm_reshape_head3_empty_n(kq_sm_reshape_head3_empty_n),
    .kq_sm_reshape_head3_read(do_matmul_1_U0_kq_sm_reshape_head3_read),
    .r_sm_head3_din(do_matmul_1_U0_r_sm_head3_din),
    .r_sm_head3_full_n(r_sm_head3_full_n),
    .r_sm_head3_write(do_matmul_1_U0_r_sm_head3_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_1_U0_ap_done),
    .ap_ready(do_matmul_1_U0_ap_ready),
    .ap_idle(do_matmul_1_U0_ap_idle),
    .ap_continue(do_matmul_1_U0_ap_continue)
);

ATTN11_do_softmax_10 do_softmax_10_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_softmax_10_U0_ap_start),
    .ap_done(do_softmax_10_U0_ap_done),
    .ap_continue(do_softmax_10_U0_ap_continue),
    .ap_idle(do_softmax_10_U0_ap_idle),
    .ap_ready(do_softmax_10_U0_ap_ready),
    .r_sm_head1_dout(r_sm_head1_dout),
    .r_sm_head1_num_data_valid(r_sm_head1_num_data_valid),
    .r_sm_head1_fifo_cap(r_sm_head1_fifo_cap),
    .r_sm_head1_empty_n(r_sm_head1_empty_n),
    .r_sm_head1_read(do_softmax_10_U0_r_sm_head1_read),
    .rq_sm_head1_din(do_softmax_10_U0_rq_sm_head1_din),
    .rq_sm_head1_num_data_valid(rq_sm_head1_num_data_valid),
    .rq_sm_head1_fifo_cap(rq_sm_head1_fifo_cap),
    .rq_sm_head1_full_n(rq_sm_head1_full_n),
    .rq_sm_head1_write(do_softmax_10_U0_rq_sm_head1_write)
);

ATTN11_do_softmax_11 do_softmax_11_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_softmax_11_U0_ap_start),
    .ap_done(do_softmax_11_U0_ap_done),
    .ap_continue(do_softmax_11_U0_ap_continue),
    .ap_idle(do_softmax_11_U0_ap_idle),
    .ap_ready(do_softmax_11_U0_ap_ready),
    .r_sm_head2_dout(r_sm_head2_dout),
    .r_sm_head2_num_data_valid(r_sm_head2_num_data_valid),
    .r_sm_head2_fifo_cap(r_sm_head2_fifo_cap),
    .r_sm_head2_empty_n(r_sm_head2_empty_n),
    .r_sm_head2_read(do_softmax_11_U0_r_sm_head2_read),
    .rq_sm_head2_din(do_softmax_11_U0_rq_sm_head2_din),
    .rq_sm_head2_num_data_valid(rq_sm_head2_num_data_valid),
    .rq_sm_head2_fifo_cap(rq_sm_head2_fifo_cap),
    .rq_sm_head2_full_n(rq_sm_head2_full_n),
    .rq_sm_head2_write(do_softmax_11_U0_rq_sm_head2_write)
);

ATTN11_do_softmax do_softmax_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_softmax_U0_ap_start),
    .ap_done(do_softmax_U0_ap_done),
    .ap_continue(do_softmax_U0_ap_continue),
    .ap_idle(do_softmax_U0_ap_idle),
    .ap_ready(do_softmax_U0_ap_ready),
    .r_sm_head3_dout(r_sm_head3_dout),
    .r_sm_head3_num_data_valid(r_sm_head3_num_data_valid),
    .r_sm_head3_fifo_cap(r_sm_head3_fifo_cap),
    .r_sm_head3_empty_n(r_sm_head3_empty_n),
    .r_sm_head3_read(do_softmax_U0_r_sm_head3_read),
    .rq_sm_head3_din(do_softmax_U0_rq_sm_head3_din),
    .rq_sm_head3_num_data_valid(rq_sm_head3_num_data_valid),
    .rq_sm_head3_fifo_cap(rq_sm_head3_fifo_cap),
    .rq_sm_head3_full_n(rq_sm_head3_full_n),
    .rq_sm_head3_write(do_softmax_U0_rq_sm_head3_write)
);

ATTN11_do_reshape_12 do_reshape_12_U0(
    .ap_start(do_reshape_12_U0_ap_start),
    .start_full_n(start_for_do_matmul_14_U0_full_n),
    .start_out(do_reshape_12_U0_start_out),
    .start_write(do_reshape_12_U0_start_write),
    .vq_sm_head1_dout(vq_sm_head1_dout),
    .vq_sm_head1_empty_n(vq_sm_head1_empty_n),
    .vq_sm_head1_read(do_reshape_12_U0_vq_sm_head1_read),
    .vq_sm_transpose_head1_din(do_reshape_12_U0_vq_sm_transpose_head1_din),
    .vq_sm_transpose_head1_full_n(vq_sm_transpose_head1_full_n),
    .vq_sm_transpose_head1_write(do_reshape_12_U0_vq_sm_transpose_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_reshape_12_U0_ap_done),
    .ap_ready(do_reshape_12_U0_ap_ready),
    .ap_idle(do_reshape_12_U0_ap_idle),
    .ap_continue(do_reshape_12_U0_ap_continue)
);

ATTN11_do_reshape_13 do_reshape_13_U0(
    .ap_start(do_reshape_13_U0_ap_start),
    .start_full_n(start_for_do_matmul_15_U0_full_n),
    .start_out(do_reshape_13_U0_start_out),
    .start_write(do_reshape_13_U0_start_write),
    .vq_sm_head2_dout(vq_sm_head2_dout),
    .vq_sm_head2_empty_n(vq_sm_head2_empty_n),
    .vq_sm_head2_read(do_reshape_13_U0_vq_sm_head2_read),
    .vq_sm_transpose_head2_din(do_reshape_13_U0_vq_sm_transpose_head2_din),
    .vq_sm_transpose_head2_full_n(vq_sm_transpose_head2_full_n),
    .vq_sm_transpose_head2_write(do_reshape_13_U0_vq_sm_transpose_head2_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_reshape_13_U0_ap_done),
    .ap_ready(do_reshape_13_U0_ap_ready),
    .ap_idle(do_reshape_13_U0_ap_idle),
    .ap_continue(do_reshape_13_U0_ap_continue)
);

ATTN11_do_reshape do_reshape_U0(
    .ap_start(do_reshape_U0_ap_start),
    .start_full_n(start_for_do_matmul_U0_full_n),
    .start_out(do_reshape_U0_start_out),
    .start_write(do_reshape_U0_start_write),
    .vq_sm_head3_dout(vq_sm_head3_dout),
    .vq_sm_head3_empty_n(vq_sm_head3_empty_n),
    .vq_sm_head3_read(do_reshape_U0_vq_sm_head3_read),
    .vq_sm_transpose_head3_din(do_reshape_U0_vq_sm_transpose_head3_din),
    .vq_sm_transpose_head3_full_n(vq_sm_transpose_head3_full_n),
    .vq_sm_transpose_head3_write(do_reshape_U0_vq_sm_transpose_head3_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_reshape_U0_ap_done),
    .ap_ready(do_reshape_U0_ap_ready),
    .ap_idle(do_reshape_U0_ap_idle),
    .ap_continue(do_reshape_U0_ap_continue)
);

ATTN11_do_matmul_14 do_matmul_14_U0(
    .ap_start(do_matmul_14_U0_ap_start),
    .start_full_n(start_for_do_merge_U0_full_n),
    .start_out(do_matmul_14_U0_start_out),
    .start_write(do_matmul_14_U0_start_write),
    .rq_sm_head1_dout(rq_sm_head1_dout),
    .rq_sm_head1_empty_n(rq_sm_head1_empty_n),
    .rq_sm_head1_read(do_matmul_14_U0_rq_sm_head1_read),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head1_dout),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head1_empty_n),
    .vq_sm_transpose_head1_read(do_matmul_14_U0_vq_sm_transpose_head1_read),
    .a_sm_head1_din(do_matmul_14_U0_a_sm_head1_din),
    .a_sm_head1_full_n(a_sm_head1_full_n),
    .a_sm_head1_write(do_matmul_14_U0_a_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_14_U0_ap_done),
    .ap_ready(do_matmul_14_U0_ap_ready),
    .ap_idle(do_matmul_14_U0_ap_idle),
    .ap_continue(do_matmul_14_U0_ap_continue)
);

ATTN11_do_matmul_15 do_matmul_15_U0(
    .rq_sm_head2_dout(rq_sm_head2_dout),
    .rq_sm_head2_empty_n(rq_sm_head2_empty_n),
    .rq_sm_head2_read(do_matmul_15_U0_rq_sm_head2_read),
    .vq_sm_transpose_head2_dout(vq_sm_transpose_head2_dout),
    .vq_sm_transpose_head2_empty_n(vq_sm_transpose_head2_empty_n),
    .vq_sm_transpose_head2_read(do_matmul_15_U0_vq_sm_transpose_head2_read),
    .a_sm_head2_din(do_matmul_15_U0_a_sm_head2_din),
    .a_sm_head2_full_n(a_sm_head2_full_n),
    .a_sm_head2_write(do_matmul_15_U0_a_sm_head2_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_matmul_15_U0_ap_start),
    .ap_done(do_matmul_15_U0_ap_done),
    .ap_ready(do_matmul_15_U0_ap_ready),
    .ap_idle(do_matmul_15_U0_ap_idle),
    .ap_continue(do_matmul_15_U0_ap_continue)
);

ATTN11_do_matmul do_matmul_U0(
    .rq_sm_head3_dout(rq_sm_head3_dout),
    .rq_sm_head3_empty_n(rq_sm_head3_empty_n),
    .rq_sm_head3_read(do_matmul_U0_rq_sm_head3_read),
    .vq_sm_transpose_head3_dout(vq_sm_transpose_head3_dout),
    .vq_sm_transpose_head3_empty_n(vq_sm_transpose_head3_empty_n),
    .vq_sm_transpose_head3_read(do_matmul_U0_vq_sm_transpose_head3_read),
    .a_sm_head3_din(do_matmul_U0_a_sm_head3_din),
    .a_sm_head3_full_n(a_sm_head3_full_n),
    .a_sm_head3_write(do_matmul_U0_a_sm_head3_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_matmul_U0_ap_start),
    .ap_done(do_matmul_U0_ap_done),
    .ap_ready(do_matmul_U0_ap_ready),
    .ap_idle(do_matmul_U0_ap_idle),
    .ap_continue(do_matmul_U0_ap_continue)
);

ATTN11_do_merge do_merge_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_merge_U0_ap_start),
    .start_full_n(start_for_do_quant_2_1_U0_full_n),
    .ap_done(do_merge_U0_ap_done),
    .ap_continue(do_merge_U0_ap_continue),
    .ap_idle(do_merge_U0_ap_idle),
    .ap_ready(do_merge_U0_ap_ready),
    .a_sm_head2_dout(a_sm_head2_dout),
    .a_sm_head2_num_data_valid(a_sm_head2_num_data_valid),
    .a_sm_head2_fifo_cap(a_sm_head2_fifo_cap),
    .a_sm_head2_empty_n(a_sm_head2_empty_n),
    .a_sm_head2_read(do_merge_U0_a_sm_head2_read),
    .a_sm_head3_dout(a_sm_head3_dout),
    .a_sm_head3_num_data_valid(a_sm_head3_num_data_valid),
    .a_sm_head3_fifo_cap(a_sm_head3_fifo_cap),
    .a_sm_head3_empty_n(a_sm_head3_empty_n),
    .a_sm_head3_read(do_merge_U0_a_sm_head3_read),
    .a_sm_head1_dout(a_sm_head1_dout),
    .a_sm_head1_num_data_valid(a_sm_head1_num_data_valid),
    .a_sm_head1_fifo_cap(a_sm_head1_fifo_cap),
    .a_sm_head1_empty_n(a_sm_head1_empty_n),
    .a_sm_head1_read(do_merge_U0_a_sm_head1_read),
    .a_sm_din(do_merge_U0_a_sm_din),
    .a_sm_num_data_valid(a_sm_num_data_valid),
    .a_sm_fifo_cap(a_sm_fifo_cap),
    .a_sm_full_n(a_sm_full_n),
    .a_sm_write(do_merge_U0_a_sm_write),
    .start_out(do_merge_U0_start_out),
    .start_write(do_merge_U0_start_write)
);

ATTN11_do_quant_2_1 do_quant_2_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_2_1_U0_ap_start),
    .start_full_n(start_for_do_matmul_3_U0_full_n),
    .ap_done(do_quant_2_1_U0_ap_done),
    .ap_continue(do_quant_2_1_U0_ap_continue),
    .ap_idle(do_quant_2_1_U0_ap_idle),
    .ap_ready(do_quant_2_1_U0_ap_ready),
    .a_sm_dout(a_sm_dout),
    .a_sm_num_data_valid(a_sm_num_data_valid),
    .a_sm_fifo_cap(a_sm_fifo_cap),
    .a_sm_empty_n(a_sm_empty_n),
    .a_sm_read(do_quant_2_1_U0_a_sm_read),
    .aq_sm_din(do_quant_2_1_U0_aq_sm_din),
    .aq_sm_num_data_valid(aq_sm_num_data_valid),
    .aq_sm_fifo_cap(aq_sm_fifo_cap),
    .aq_sm_full_n(aq_sm_full_n),
    .aq_sm_write(do_quant_2_1_U0_aq_sm_write),
    .start_out(do_quant_2_1_U0_start_out),
    .start_write(do_quant_2_1_U0_start_write)
);

ATTN11_do_matmul_3 do_matmul_3_U0(
    .aq_sm_dout(aq_sm_dout),
    .aq_sm_empty_n(aq_sm_empty_n),
    .aq_sm_read(do_matmul_3_U0_aq_sm_read),
    .o_sm_din(do_matmul_3_U0_o_sm_din),
    .o_sm_full_n(o_sm_full_n),
    .o_sm_write(do_matmul_3_U0_o_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_matmul_3_U0_ap_start),
    .ap_done(do_matmul_3_U0_ap_done),
    .ap_ready(do_matmul_3_U0_ap_ready),
    .ap_idle(do_matmul_3_U0_ap_idle),
    .ap_continue(do_matmul_3_U0_ap_continue)
);

ATTN11_stream_merge stream_merge_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_merge_U0_ap_start),
    .ap_done(stream_merge_U0_ap_done),
    .ap_continue(stream_merge_U0_ap_continue),
    .ap_idle(stream_merge_U0_ap_idle),
    .ap_ready(stream_merge_U0_ap_ready),
    .resi_o_sm_dout(resi_o_sm_dout),
    .resi_o_sm_num_data_valid(resi_o_sm_num_data_valid),
    .resi_o_sm_fifo_cap(resi_o_sm_fifo_cap),
    .resi_o_sm_empty_n(resi_o_sm_empty_n),
    .resi_o_sm_read(stream_merge_U0_resi_o_sm_read),
    .o_sm_dout(o_sm_dout),
    .o_sm_num_data_valid(o_sm_num_data_valid),
    .o_sm_fifo_cap(o_sm_fifo_cap),
    .o_sm_empty_n(o_sm_empty_n),
    .o_sm_read(stream_merge_U0_o_sm_read),
    .o_stream_TREADY(o_stream_TREADY),
    .o_stream_TDATA(stream_merge_U0_o_stream_TDATA),
    .o_stream_TVALID(stream_merge_U0_o_stream_TVALID)
);

ATTN11_fifo_w26_d2_S main_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy2_U0_main_sm_din),
    .if_full_n(main_sm_full_n),
    .if_write(stream_copy2_U0_main_sm_write),
    .if_dout(main_sm_dout),
    .if_num_data_valid(main_sm_num_data_valid),
    .if_fifo_cap(main_sm_fifo_cap),
    .if_empty_n(main_sm_empty_n),
    .if_read(do_layernorm_U0_main_sm_read)
);

ATTN11_fifo_w26_d512_A resi_i_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy2_U0_resi_i_sm_din),
    .if_full_n(resi_i_sm_full_n),
    .if_write(stream_copy2_U0_resi_i_sm_write),
    .if_dout(resi_i_sm_dout),
    .if_num_data_valid(resi_i_sm_num_data_valid),
    .if_fifo_cap(resi_i_sm_fifo_cap),
    .if_empty_n(resi_i_sm_empty_n),
    .if_read(do_adapt_5_U0_resi_i_sm_read)
);

ATTN11_fifo_w52_d12288_A resi_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_5_U0_resi_sm_din),
    .if_full_n(resi_sm_full_n),
    .if_write(do_adapt_5_U0_resi_sm_write),
    .if_dout(resi_sm_dout),
    .if_num_data_valid(resi_sm_num_data_valid),
    .if_fifo_cap(resi_sm_fifo_cap),
    .if_empty_n(resi_sm_empty_n),
    .if_read(do_adapt_4_U0_resi_sm_read)
);

ATTN11_fifo_w26_d512_A resi_o_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_4_U0_resi_o_sm_din),
    .if_full_n(resi_o_sm_full_n),
    .if_write(do_adapt_4_U0_resi_o_sm_write),
    .if_dout(resi_o_sm_dout),
    .if_num_data_valid(resi_o_sm_num_data_valid),
    .if_fifo_cap(resi_o_sm_fifo_cap),
    .if_empty_n(resi_o_sm_empty_n),
    .if_read(stream_merge_U0_resi_o_sm_read)
);

ATTN11_fifo_w6_d2_S lnq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_layernorm_U0_lnq_sm_din),
    .if_full_n(lnq_sm_full_n),
    .if_write(do_layernorm_U0_lnq_sm_write),
    .if_dout(lnq_sm_dout),
    .if_num_data_valid(lnq_sm_num_data_valid),
    .if_fifo_cap(lnq_sm_fifo_cap),
    .if_empty_n(lnq_sm_empty_n),
    .if_read(stream_copy3_U0_lnq_sm_read)
);

ATTN11_fifo_w6_d2_S lnq_sm_cp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy3_U0_lnq_sm_cp1_din),
    .if_full_n(lnq_sm_cp1_full_n),
    .if_write(stream_copy3_U0_lnq_sm_cp1_write),
    .if_dout(lnq_sm_cp1_dout),
    .if_num_data_valid(lnq_sm_cp1_num_data_valid),
    .if_fifo_cap(lnq_sm_cp1_fifo_cap),
    .if_empty_n(lnq_sm_cp1_empty_n),
    .if_read(do_matmul_2_U0_lnq_sm_cp1_read)
);

ATTN11_fifo_w6_d2_S lnq_sm_cp2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy3_U0_lnq_sm_cp2_din),
    .if_full_n(lnq_sm_cp2_full_n),
    .if_write(stream_copy3_U0_lnq_sm_cp2_write),
    .if_dout(lnq_sm_cp2_dout),
    .if_num_data_valid(lnq_sm_cp2_num_data_valid),
    .if_fifo_cap(lnq_sm_cp2_fifo_cap),
    .if_empty_n(lnq_sm_cp2_empty_n),
    .if_read(do_matmul_1_1_U0_lnq_sm_cp2_read)
);

ATTN11_fifo_w6_d2_S lnq_sm_cp3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy3_U0_lnq_sm_cp3_din),
    .if_full_n(lnq_sm_cp3_full_n),
    .if_write(stream_copy3_U0_lnq_sm_cp3_write),
    .if_dout(lnq_sm_cp3_dout),
    .if_num_data_valid(lnq_sm_cp3_num_data_valid),
    .if_fifo_cap(lnq_sm_cp3_fifo_cap),
    .if_empty_n(lnq_sm_cp3_empty_n),
    .if_read(do_matmul_4_U0_lnq_sm_cp3_read)
);

ATTN11_fifo_w24_d2_S_x1 q_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_2_U0_q_sm_din),
    .if_full_n(q_sm_full_n),
    .if_write(do_matmul_2_U0_q_sm_write),
    .if_dout(q_sm_dout),
    .if_num_data_valid(q_sm_num_data_valid),
    .if_fifo_cap(q_sm_fifo_cap),
    .if_empty_n(q_sm_empty_n),
    .if_read(do_quant_U0_q_sm_read)
);

ATTN11_fifo_w20_d2_S k_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_1_1_U0_k_sm_din),
    .if_full_n(k_sm_full_n),
    .if_write(do_matmul_1_1_U0_k_sm_write),
    .if_dout(k_sm_dout),
    .if_num_data_valid(k_sm_num_data_valid),
    .if_fifo_cap(k_sm_fifo_cap),
    .if_empty_n(k_sm_empty_n),
    .if_read(do_quant_2_U0_k_sm_read)
);

ATTN11_fifo_w20_d2_S v_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_4_U0_v_sm_din),
    .if_full_n(v_sm_full_n),
    .if_write(do_matmul_4_U0_v_sm_write),
    .if_dout(v_sm_dout),
    .if_num_data_valid(v_sm_num_data_valid),
    .if_fifo_cap(v_sm_fifo_cap),
    .if_empty_n(v_sm_empty_n),
    .if_read(do_quant_1_U0_v_sm_read)
);

ATTN11_fifo_w6_d2_S qq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_U0_qq_sm_din),
    .if_full_n(qq_sm_full_n),
    .if_write(do_quant_U0_qq_sm_write),
    .if_dout(qq_sm_dout),
    .if_num_data_valid(qq_sm_num_data_valid),
    .if_fifo_cap(qq_sm_fifo_cap),
    .if_empty_n(qq_sm_empty_n),
    .if_read(do_split_3_U0_qq_sm_read)
);

ATTN11_fifo_w6_d2_S kq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_2_U0_kq_sm_din),
    .if_full_n(kq_sm_full_n),
    .if_write(do_quant_2_U0_kq_sm_write),
    .if_dout(kq_sm_dout),
    .if_num_data_valid(kq_sm_num_data_valid),
    .if_fifo_cap(kq_sm_fifo_cap),
    .if_empty_n(kq_sm_empty_n),
    .if_read(do_split_4_U0_kq_sm_read)
);

ATTN11_fifo_w6_d2_S vq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_1_U0_vq_sm_din),
    .if_full_n(vq_sm_full_n),
    .if_write(do_quant_1_U0_vq_sm_write),
    .if_dout(vq_sm_dout),
    .if_num_data_valid(vq_sm_num_data_valid),
    .if_fifo_cap(vq_sm_fifo_cap),
    .if_empty_n(vq_sm_empty_n),
    .if_read(do_split_U0_vq_sm_read)
);

ATTN11_fifo_w6_d8000_A qq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_3_U0_qq_sm_head1_din),
    .if_full_n(qq_sm_head1_full_n),
    .if_write(do_split_3_U0_qq_sm_head1_write),
    .if_dout(qq_sm_head1_dout),
    .if_num_data_valid(qq_sm_head1_num_data_valid),
    .if_fifo_cap(qq_sm_head1_fifo_cap),
    .if_empty_n(qq_sm_head1_empty_n),
    .if_read(do_matmul_8_U0_qq_sm_head1_read)
);

ATTN11_fifo_w6_d8000_A qq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_3_U0_qq_sm_head2_din),
    .if_full_n(qq_sm_head2_full_n),
    .if_write(do_split_3_U0_qq_sm_head2_write),
    .if_dout(qq_sm_head2_dout),
    .if_num_data_valid(qq_sm_head2_num_data_valid),
    .if_fifo_cap(qq_sm_head2_fifo_cap),
    .if_empty_n(qq_sm_head2_empty_n),
    .if_read(do_matmul_9_U0_qq_sm_head2_read)
);

ATTN11_fifo_w6_d8000_A qq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_3_U0_qq_sm_head3_din),
    .if_full_n(qq_sm_head3_full_n),
    .if_write(do_split_3_U0_qq_sm_head3_write),
    .if_dout(qq_sm_head3_dout),
    .if_num_data_valid(qq_sm_head3_num_data_valid),
    .if_fifo_cap(qq_sm_head3_fifo_cap),
    .if_empty_n(qq_sm_head3_empty_n),
    .if_read(do_matmul_1_U0_qq_sm_head3_read)
);

ATTN11_fifo_w6_d64_S kq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_4_U0_kq_sm_head1_din),
    .if_full_n(kq_sm_head1_full_n),
    .if_write(do_split_4_U0_kq_sm_head1_write),
    .if_dout(kq_sm_head1_dout),
    .if_num_data_valid(kq_sm_head1_num_data_valid),
    .if_fifo_cap(kq_sm_head1_fifo_cap),
    .if_empty_n(kq_sm_head1_empty_n),
    .if_read(do_reshape_5_U0_kq_sm_head1_read)
);

ATTN11_fifo_w6_d64_S kq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_4_U0_kq_sm_head2_din),
    .if_full_n(kq_sm_head2_full_n),
    .if_write(do_split_4_U0_kq_sm_head2_write),
    .if_dout(kq_sm_head2_dout),
    .if_num_data_valid(kq_sm_head2_num_data_valid),
    .if_fifo_cap(kq_sm_head2_fifo_cap),
    .if_empty_n(kq_sm_head2_empty_n),
    .if_read(do_reshape_6_U0_kq_sm_head2_read)
);

ATTN11_fifo_w6_d64_S kq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_4_U0_kq_sm_head3_din),
    .if_full_n(kq_sm_head3_full_n),
    .if_write(do_split_4_U0_kq_sm_head3_write),
    .if_dout(kq_sm_head3_dout),
    .if_num_data_valid(kq_sm_head3_num_data_valid),
    .if_fifo_cap(kq_sm_head3_fifo_cap),
    .if_empty_n(kq_sm_head3_empty_n),
    .if_read(do_reshape_7_U0_kq_sm_head3_read)
);

ATTN11_fifo_w6_d64_S vq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_U0_vq_sm_head1_din),
    .if_full_n(vq_sm_head1_full_n),
    .if_write(do_split_U0_vq_sm_head1_write),
    .if_dout(vq_sm_head1_dout),
    .if_num_data_valid(vq_sm_head1_num_data_valid),
    .if_fifo_cap(vq_sm_head1_fifo_cap),
    .if_empty_n(vq_sm_head1_empty_n),
    .if_read(do_reshape_12_U0_vq_sm_head1_read)
);

ATTN11_fifo_w6_d64_S vq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_U0_vq_sm_head2_din),
    .if_full_n(vq_sm_head2_full_n),
    .if_write(do_split_U0_vq_sm_head2_write),
    .if_dout(vq_sm_head2_dout),
    .if_num_data_valid(vq_sm_head2_num_data_valid),
    .if_fifo_cap(vq_sm_head2_fifo_cap),
    .if_empty_n(vq_sm_head2_empty_n),
    .if_read(do_reshape_13_U0_vq_sm_head2_read)
);

ATTN11_fifo_w6_d64_S vq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_U0_vq_sm_head3_din),
    .if_full_n(vq_sm_head3_full_n),
    .if_write(do_split_U0_vq_sm_head3_write),
    .if_dout(vq_sm_head3_dout),
    .if_num_data_valid(vq_sm_head3_num_data_valid),
    .if_fifo_cap(vq_sm_head3_fifo_cap),
    .if_empty_n(vq_sm_head3_empty_n),
    .if_read(do_reshape_U0_vq_sm_head3_read)
);

ATTN11_fifo_w84_d512_A kq_sm_reshape_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape_5_U0_kq_sm_reshape_head1_din),
    .if_full_n(kq_sm_reshape_head1_full_n),
    .if_write(do_reshape_5_U0_kq_sm_reshape_head1_write),
    .if_dout(kq_sm_reshape_head1_dout),
    .if_num_data_valid(kq_sm_reshape_head1_num_data_valid),
    .if_fifo_cap(kq_sm_reshape_head1_fifo_cap),
    .if_empty_n(kq_sm_reshape_head1_empty_n),
    .if_read(do_matmul_8_U0_kq_sm_reshape_head1_read)
);

ATTN11_fifo_w84_d512_A kq_sm_reshape_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape_6_U0_kq_sm_reshape_head2_din),
    .if_full_n(kq_sm_reshape_head2_full_n),
    .if_write(do_reshape_6_U0_kq_sm_reshape_head2_write),
    .if_dout(kq_sm_reshape_head2_dout),
    .if_num_data_valid(kq_sm_reshape_head2_num_data_valid),
    .if_fifo_cap(kq_sm_reshape_head2_fifo_cap),
    .if_empty_n(kq_sm_reshape_head2_empty_n),
    .if_read(do_matmul_9_U0_kq_sm_reshape_head2_read)
);

ATTN11_fifo_w84_d512_A kq_sm_reshape_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape_7_U0_kq_sm_reshape_head3_din),
    .if_full_n(kq_sm_reshape_head3_full_n),
    .if_write(do_reshape_7_U0_kq_sm_reshape_head3_write),
    .if_dout(kq_sm_reshape_head3_dout),
    .if_num_data_valid(kq_sm_reshape_head3_num_data_valid),
    .if_fifo_cap(kq_sm_reshape_head3_fifo_cap),
    .if_empty_n(kq_sm_reshape_head3_empty_n),
    .if_read(do_matmul_1_U0_kq_sm_reshape_head3_read)
);

ATTN11_fifo_w20_d512_A r_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_8_U0_r_sm_head1_din),
    .if_full_n(r_sm_head1_full_n),
    .if_write(do_matmul_8_U0_r_sm_head1_write),
    .if_dout(r_sm_head1_dout),
    .if_num_data_valid(r_sm_head1_num_data_valid),
    .if_fifo_cap(r_sm_head1_fifo_cap),
    .if_empty_n(r_sm_head1_empty_n),
    .if_read(do_softmax_10_U0_r_sm_head1_read)
);

ATTN11_fifo_w20_d512_A r_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_9_U0_r_sm_head2_din),
    .if_full_n(r_sm_head2_full_n),
    .if_write(do_matmul_9_U0_r_sm_head2_write),
    .if_dout(r_sm_head2_dout),
    .if_num_data_valid(r_sm_head2_num_data_valid),
    .if_fifo_cap(r_sm_head2_fifo_cap),
    .if_empty_n(r_sm_head2_empty_n),
    .if_read(do_softmax_11_U0_r_sm_head2_read)
);

ATTN11_fifo_w20_d512_A r_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_1_U0_r_sm_head3_din),
    .if_full_n(r_sm_head3_full_n),
    .if_write(do_matmul_1_U0_r_sm_head3_write),
    .if_dout(r_sm_head3_dout),
    .if_num_data_valid(r_sm_head3_num_data_valid),
    .if_fifo_cap(r_sm_head3_fifo_cap),
    .if_empty_n(r_sm_head3_empty_n),
    .if_read(do_softmax_U0_r_sm_head3_read)
);

ATTN11_fifo_w6_d512_A rq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax_10_U0_rq_sm_head1_din),
    .if_full_n(rq_sm_head1_full_n),
    .if_write(do_softmax_10_U0_rq_sm_head1_write),
    .if_dout(rq_sm_head1_dout),
    .if_num_data_valid(rq_sm_head1_num_data_valid),
    .if_fifo_cap(rq_sm_head1_fifo_cap),
    .if_empty_n(rq_sm_head1_empty_n),
    .if_read(do_matmul_14_U0_rq_sm_head1_read)
);

ATTN11_fifo_w6_d512_A rq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax_11_U0_rq_sm_head2_din),
    .if_full_n(rq_sm_head2_full_n),
    .if_write(do_softmax_11_U0_rq_sm_head2_write),
    .if_dout(rq_sm_head2_dout),
    .if_num_data_valid(rq_sm_head2_num_data_valid),
    .if_fifo_cap(rq_sm_head2_fifo_cap),
    .if_empty_n(rq_sm_head2_empty_n),
    .if_read(do_matmul_15_U0_rq_sm_head2_read)
);

ATTN11_fifo_w6_d512_A rq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax_U0_rq_sm_head3_din),
    .if_full_n(rq_sm_head3_full_n),
    .if_write(do_softmax_U0_rq_sm_head3_write),
    .if_dout(rq_sm_head3_dout),
    .if_num_data_valid(rq_sm_head3_num_data_valid),
    .if_fifo_cap(rq_sm_head3_fifo_cap),
    .if_empty_n(rq_sm_head3_empty_n),
    .if_read(do_matmul_U0_rq_sm_head3_read)
);

ATTN11_fifo_w84_d512_A vq_sm_transpose_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape_12_U0_vq_sm_transpose_head1_din),
    .if_full_n(vq_sm_transpose_head1_full_n),
    .if_write(do_reshape_12_U0_vq_sm_transpose_head1_write),
    .if_dout(vq_sm_transpose_head1_dout),
    .if_num_data_valid(vq_sm_transpose_head1_num_data_valid),
    .if_fifo_cap(vq_sm_transpose_head1_fifo_cap),
    .if_empty_n(vq_sm_transpose_head1_empty_n),
    .if_read(do_matmul_14_U0_vq_sm_transpose_head1_read)
);

ATTN11_fifo_w84_d512_A vq_sm_transpose_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape_13_U0_vq_sm_transpose_head2_din),
    .if_full_n(vq_sm_transpose_head2_full_n),
    .if_write(do_reshape_13_U0_vq_sm_transpose_head2_write),
    .if_dout(vq_sm_transpose_head2_dout),
    .if_num_data_valid(vq_sm_transpose_head2_num_data_valid),
    .if_fifo_cap(vq_sm_transpose_head2_fifo_cap),
    .if_empty_n(vq_sm_transpose_head2_empty_n),
    .if_read(do_matmul_15_U0_vq_sm_transpose_head2_read)
);

ATTN11_fifo_w84_d512_A vq_sm_transpose_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape_U0_vq_sm_transpose_head3_din),
    .if_full_n(vq_sm_transpose_head3_full_n),
    .if_write(do_reshape_U0_vq_sm_transpose_head3_write),
    .if_dout(vq_sm_transpose_head3_dout),
    .if_num_data_valid(vq_sm_transpose_head3_num_data_valid),
    .if_fifo_cap(vq_sm_transpose_head3_fifo_cap),
    .if_empty_n(vq_sm_transpose_head3_empty_n),
    .if_read(do_matmul_U0_vq_sm_transpose_head3_read)
);

ATTN11_fifo_w20_d64_A a_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_14_U0_a_sm_head1_din),
    .if_full_n(a_sm_head1_full_n),
    .if_write(do_matmul_14_U0_a_sm_head1_write),
    .if_dout(a_sm_head1_dout),
    .if_num_data_valid(a_sm_head1_num_data_valid),
    .if_fifo_cap(a_sm_head1_fifo_cap),
    .if_empty_n(a_sm_head1_empty_n),
    .if_read(do_merge_U0_a_sm_head1_read)
);

ATTN11_fifo_w20_d64_A a_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_15_U0_a_sm_head2_din),
    .if_full_n(a_sm_head2_full_n),
    .if_write(do_matmul_15_U0_a_sm_head2_write),
    .if_dout(a_sm_head2_dout),
    .if_num_data_valid(a_sm_head2_num_data_valid),
    .if_fifo_cap(a_sm_head2_fifo_cap),
    .if_empty_n(a_sm_head2_empty_n),
    .if_read(do_merge_U0_a_sm_head2_read)
);

ATTN11_fifo_w20_d64_A a_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_U0_a_sm_head3_din),
    .if_full_n(a_sm_head3_full_n),
    .if_write(do_matmul_U0_a_sm_head3_write),
    .if_dout(a_sm_head3_dout),
    .if_num_data_valid(a_sm_head3_num_data_valid),
    .if_fifo_cap(a_sm_head3_fifo_cap),
    .if_empty_n(a_sm_head3_empty_n),
    .if_read(do_merge_U0_a_sm_head3_read)
);

ATTN11_fifo_w20_d2_S a_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_merge_U0_a_sm_din),
    .if_full_n(a_sm_full_n),
    .if_write(do_merge_U0_a_sm_write),
    .if_dout(a_sm_dout),
    .if_num_data_valid(a_sm_num_data_valid),
    .if_fifo_cap(a_sm_fifo_cap),
    .if_empty_n(a_sm_empty_n),
    .if_read(do_quant_2_1_U0_a_sm_read)
);

ATTN11_fifo_w6_d2_S aq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_2_1_U0_aq_sm_din),
    .if_full_n(aq_sm_full_n),
    .if_write(do_quant_2_1_U0_aq_sm_write),
    .if_dout(aq_sm_dout),
    .if_num_data_valid(aq_sm_num_data_valid),
    .if_fifo_cap(aq_sm_fifo_cap),
    .if_empty_n(aq_sm_empty_n),
    .if_read(do_matmul_3_U0_aq_sm_read)
);

ATTN11_fifo_w24_d2_S_x1 o_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_3_U0_o_sm_din),
    .if_full_n(o_sm_full_n),
    .if_write(do_matmul_3_U0_o_sm_write),
    .if_dout(o_sm_dout),
    .if_num_data_valid(o_sm_num_data_valid),
    .if_fifo_cap(o_sm_fifo_cap),
    .if_empty_n(o_sm_empty_n),
    .if_read(stream_merge_U0_o_sm_read)
);

ATTN11_start_for_do_adapt_5_U0 start_for_do_adapt_5_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_5_U0_din),
    .if_full_n(start_for_do_adapt_5_U0_full_n),
    .if_write(stream_copy2_U0_start_write),
    .if_dout(start_for_do_adapt_5_U0_dout),
    .if_empty_n(start_for_do_adapt_5_U0_empty_n),
    .if_read(do_adapt_5_U0_ap_ready)
);

ATTN11_start_for_do_layernorm_U0 start_for_do_layernorm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_layernorm_U0_din),
    .if_full_n(start_for_do_layernorm_U0_full_n),
    .if_write(stream_copy2_U0_start_write),
    .if_dout(start_for_do_layernorm_U0_dout),
    .if_empty_n(start_for_do_layernorm_U0_empty_n),
    .if_read(do_layernorm_U0_ap_ready)
);

ATTN11_start_for_do_adapt_4_U0 start_for_do_adapt_4_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_4_U0_din),
    .if_full_n(start_for_do_adapt_4_U0_full_n),
    .if_write(do_adapt_5_U0_start_write),
    .if_dout(start_for_do_adapt_4_U0_dout),
    .if_empty_n(start_for_do_adapt_4_U0_empty_n),
    .if_read(do_adapt_4_U0_ap_ready)
);

ATTN11_start_for_stream_merge_U0 start_for_stream_merge_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stream_merge_U0_din),
    .if_full_n(start_for_stream_merge_U0_full_n),
    .if_write(do_adapt_4_U0_start_write),
    .if_dout(start_for_stream_merge_U0_dout),
    .if_empty_n(start_for_stream_merge_U0_empty_n),
    .if_read(stream_merge_U0_ap_ready)
);

ATTN11_start_for_stream_copy3_U0 start_for_stream_copy3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stream_copy3_U0_din),
    .if_full_n(start_for_stream_copy3_U0_full_n),
    .if_write(do_layernorm_U0_start_write),
    .if_dout(start_for_stream_copy3_U0_dout),
    .if_empty_n(start_for_stream_copy3_U0_empty_n),
    .if_read(stream_copy3_U0_ap_ready)
);

ATTN11_start_for_do_matmul_2_U0 start_for_do_matmul_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_2_U0_din),
    .if_full_n(start_for_do_matmul_2_U0_full_n),
    .if_write(stream_copy3_U0_start_write),
    .if_dout(start_for_do_matmul_2_U0_dout),
    .if_empty_n(start_for_do_matmul_2_U0_empty_n),
    .if_read(do_matmul_2_U0_ap_ready)
);

ATTN11_start_for_do_matmul_1_1_U0 start_for_do_matmul_1_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_1_1_U0_din),
    .if_full_n(start_for_do_matmul_1_1_U0_full_n),
    .if_write(stream_copy3_U0_start_write),
    .if_dout(start_for_do_matmul_1_1_U0_dout),
    .if_empty_n(start_for_do_matmul_1_1_U0_empty_n),
    .if_read(do_matmul_1_1_U0_ap_ready)
);

ATTN11_start_for_do_matmul_4_U0 start_for_do_matmul_4_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_4_U0_din),
    .if_full_n(start_for_do_matmul_4_U0_full_n),
    .if_write(stream_copy3_U0_start_write),
    .if_dout(start_for_do_matmul_4_U0_dout),
    .if_empty_n(start_for_do_matmul_4_U0_empty_n),
    .if_read(do_matmul_4_U0_ap_ready)
);

ATTN11_start_for_do_quant_U0 start_for_do_quant_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_U0_din),
    .if_full_n(start_for_do_quant_U0_full_n),
    .if_write(do_matmul_2_U0_start_write),
    .if_dout(start_for_do_quant_U0_dout),
    .if_empty_n(start_for_do_quant_U0_empty_n),
    .if_read(do_quant_U0_ap_ready)
);

ATTN11_start_for_do_quant_2_U0 start_for_do_quant_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_2_U0_din),
    .if_full_n(start_for_do_quant_2_U0_full_n),
    .if_write(do_matmul_1_1_U0_start_write),
    .if_dout(start_for_do_quant_2_U0_dout),
    .if_empty_n(start_for_do_quant_2_U0_empty_n),
    .if_read(do_quant_2_U0_ap_ready)
);

ATTN11_start_for_do_quant_1_U0 start_for_do_quant_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_1_U0_din),
    .if_full_n(start_for_do_quant_1_U0_full_n),
    .if_write(do_matmul_4_U0_start_write),
    .if_dout(start_for_do_quant_1_U0_dout),
    .if_empty_n(start_for_do_quant_1_U0_empty_n),
    .if_read(do_quant_1_U0_ap_ready)
);

ATTN11_start_for_do_split_3_U0 start_for_do_split_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_split_3_U0_din),
    .if_full_n(start_for_do_split_3_U0_full_n),
    .if_write(do_quant_U0_start_write),
    .if_dout(start_for_do_split_3_U0_dout),
    .if_empty_n(start_for_do_split_3_U0_empty_n),
    .if_read(do_split_3_U0_ap_ready)
);

ATTN11_start_for_do_split_4_U0 start_for_do_split_4_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_split_4_U0_din),
    .if_full_n(start_for_do_split_4_U0_full_n),
    .if_write(do_quant_2_U0_start_write),
    .if_dout(start_for_do_split_4_U0_dout),
    .if_empty_n(start_for_do_split_4_U0_empty_n),
    .if_read(do_split_4_U0_ap_ready)
);

ATTN11_start_for_do_split_U0 start_for_do_split_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_split_U0_din),
    .if_full_n(start_for_do_split_U0_full_n),
    .if_write(do_quant_1_U0_start_write),
    .if_dout(start_for_do_split_U0_dout),
    .if_empty_n(start_for_do_split_U0_empty_n),
    .if_read(do_split_U0_ap_ready)
);

ATTN11_start_for_do_matmul_8_U0 start_for_do_matmul_8_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_8_U0_din),
    .if_full_n(start_for_do_matmul_8_U0_full_n),
    .if_write(do_split_3_U0_start_write),
    .if_dout(start_for_do_matmul_8_U0_dout),
    .if_empty_n(start_for_do_matmul_8_U0_empty_n),
    .if_read(do_matmul_8_U0_ap_ready)
);

ATTN11_start_for_do_matmul_9_U0 start_for_do_matmul_9_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_9_U0_din),
    .if_full_n(start_for_do_matmul_9_U0_full_n),
    .if_write(do_split_3_U0_start_write),
    .if_dout(start_for_do_matmul_9_U0_dout),
    .if_empty_n(start_for_do_matmul_9_U0_empty_n),
    .if_read(do_matmul_9_U0_ap_ready)
);

ATTN11_start_for_do_matmul_1_U0 start_for_do_matmul_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_1_U0_din),
    .if_full_n(start_for_do_matmul_1_U0_full_n),
    .if_write(do_split_3_U0_start_write),
    .if_dout(start_for_do_matmul_1_U0_dout),
    .if_empty_n(start_for_do_matmul_1_U0_empty_n),
    .if_read(do_matmul_1_U0_ap_ready)
);

ATTN11_start_for_do_reshape_5_U0 start_for_do_reshape_5_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape_5_U0_din),
    .if_full_n(start_for_do_reshape_5_U0_full_n),
    .if_write(do_split_4_U0_start_write),
    .if_dout(start_for_do_reshape_5_U0_dout),
    .if_empty_n(start_for_do_reshape_5_U0_empty_n),
    .if_read(do_reshape_5_U0_ap_ready)
);

ATTN11_start_for_do_reshape_6_U0 start_for_do_reshape_6_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape_6_U0_din),
    .if_full_n(start_for_do_reshape_6_U0_full_n),
    .if_write(do_split_4_U0_start_write),
    .if_dout(start_for_do_reshape_6_U0_dout),
    .if_empty_n(start_for_do_reshape_6_U0_empty_n),
    .if_read(do_reshape_6_U0_ap_ready)
);

ATTN11_start_for_do_reshape_7_U0 start_for_do_reshape_7_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape_7_U0_din),
    .if_full_n(start_for_do_reshape_7_U0_full_n),
    .if_write(do_split_4_U0_start_write),
    .if_dout(start_for_do_reshape_7_U0_dout),
    .if_empty_n(start_for_do_reshape_7_U0_empty_n),
    .if_read(do_reshape_7_U0_ap_ready)
);

ATTN11_start_for_do_reshape_12_U0 start_for_do_reshape_12_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape_12_U0_din),
    .if_full_n(start_for_do_reshape_12_U0_full_n),
    .if_write(do_split_U0_start_write),
    .if_dout(start_for_do_reshape_12_U0_dout),
    .if_empty_n(start_for_do_reshape_12_U0_empty_n),
    .if_read(do_reshape_12_U0_ap_ready)
);

ATTN11_start_for_do_reshape_13_U0 start_for_do_reshape_13_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape_13_U0_din),
    .if_full_n(start_for_do_reshape_13_U0_full_n),
    .if_write(do_split_U0_start_write),
    .if_dout(start_for_do_reshape_13_U0_dout),
    .if_empty_n(start_for_do_reshape_13_U0_empty_n),
    .if_read(do_reshape_13_U0_ap_ready)
);

ATTN11_start_for_do_reshape_U0 start_for_do_reshape_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape_U0_din),
    .if_full_n(start_for_do_reshape_U0_full_n),
    .if_write(do_split_U0_start_write),
    .if_dout(start_for_do_reshape_U0_dout),
    .if_empty_n(start_for_do_reshape_U0_empty_n),
    .if_read(do_reshape_U0_ap_ready)
);

ATTN11_start_for_do_softmax_10_U0 start_for_do_softmax_10_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_softmax_10_U0_din),
    .if_full_n(start_for_do_softmax_10_U0_full_n),
    .if_write(do_matmul_8_U0_start_write),
    .if_dout(start_for_do_softmax_10_U0_dout),
    .if_empty_n(start_for_do_softmax_10_U0_empty_n),
    .if_read(do_softmax_10_U0_ap_ready)
);

ATTN11_start_for_do_softmax_11_U0 start_for_do_softmax_11_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_softmax_11_U0_din),
    .if_full_n(start_for_do_softmax_11_U0_full_n),
    .if_write(do_matmul_9_U0_start_write),
    .if_dout(start_for_do_softmax_11_U0_dout),
    .if_empty_n(start_for_do_softmax_11_U0_empty_n),
    .if_read(do_softmax_11_U0_ap_ready)
);

ATTN11_start_for_do_softmax_U0 start_for_do_softmax_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_softmax_U0_din),
    .if_full_n(start_for_do_softmax_U0_full_n),
    .if_write(do_matmul_1_U0_start_write),
    .if_dout(start_for_do_softmax_U0_dout),
    .if_empty_n(start_for_do_softmax_U0_empty_n),
    .if_read(do_softmax_U0_ap_ready)
);

ATTN11_start_for_do_matmul_14_U0 start_for_do_matmul_14_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_14_U0_din),
    .if_full_n(start_for_do_matmul_14_U0_full_n),
    .if_write(do_reshape_12_U0_start_write),
    .if_dout(start_for_do_matmul_14_U0_dout),
    .if_empty_n(start_for_do_matmul_14_U0_empty_n),
    .if_read(do_matmul_14_U0_ap_ready)
);

ATTN11_start_for_do_matmul_15_U0 start_for_do_matmul_15_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_15_U0_din),
    .if_full_n(start_for_do_matmul_15_U0_full_n),
    .if_write(do_reshape_13_U0_start_write),
    .if_dout(start_for_do_matmul_15_U0_dout),
    .if_empty_n(start_for_do_matmul_15_U0_empty_n),
    .if_read(do_matmul_15_U0_ap_ready)
);

ATTN11_start_for_do_matmul_U0 start_for_do_matmul_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_U0_din),
    .if_full_n(start_for_do_matmul_U0_full_n),
    .if_write(do_reshape_U0_start_write),
    .if_dout(start_for_do_matmul_U0_dout),
    .if_empty_n(start_for_do_matmul_U0_empty_n),
    .if_read(do_matmul_U0_ap_ready)
);

ATTN11_start_for_do_merge_U0 start_for_do_merge_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_merge_U0_din),
    .if_full_n(start_for_do_merge_U0_full_n),
    .if_write(do_matmul_14_U0_start_write),
    .if_dout(start_for_do_merge_U0_dout),
    .if_empty_n(start_for_do_merge_U0_empty_n),
    .if_read(do_merge_U0_ap_ready)
);

ATTN11_start_for_do_quant_2_1_U0 start_for_do_quant_2_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_2_1_U0_din),
    .if_full_n(start_for_do_quant_2_1_U0_full_n),
    .if_write(do_merge_U0_start_write),
    .if_dout(start_for_do_quant_2_1_U0_dout),
    .if_empty_n(start_for_do_quant_2_1_U0_empty_n),
    .if_read(do_quant_2_1_U0_ap_ready)
);

ATTN11_start_for_do_matmul_3_U0 start_for_do_matmul_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_3_U0_din),
    .if_full_n(start_for_do_matmul_3_U0_full_n),
    .if_write(do_quant_2_1_U0_start_write),
    .if_dout(start_for_do_matmul_3_U0_dout),
    .if_empty_n(start_for_do_matmul_3_U0_empty_n),
    .if_read(do_matmul_3_U0_ap_ready)
);

assign ap_done = stream_merge_U0_ap_done;

assign ap_idle = (stream_merge_U0_ap_idle & stream_copy3_U0_ap_idle & stream_copy2_U0_ap_idle & do_split_U0_ap_idle & do_split_4_U0_ap_idle & do_split_3_U0_ap_idle & do_softmax_U0_ap_idle & do_softmax_11_U0_ap_idle & do_softmax_10_U0_ap_idle & do_reshape_U0_ap_idle & do_reshape_7_U0_ap_idle & do_reshape_6_U0_ap_idle & do_reshape_5_U0_ap_idle & do_reshape_13_U0_ap_idle & do_reshape_12_U0_ap_idle & do_quant_U0_ap_idle & do_quant_2_U0_ap_idle & do_quant_2_1_U0_ap_idle & do_quant_1_U0_ap_idle & do_merge_U0_ap_idle & do_matmul_U0_ap_idle & do_matmul_9_U0_ap_idle & do_matmul_8_U0_ap_idle & do_matmul_4_U0_ap_idle & do_matmul_3_U0_ap_idle & do_matmul_2_U0_ap_idle & do_matmul_1_U0_ap_idle & do_matmul_1_1_U0_ap_idle & do_matmul_15_U0_ap_idle & do_matmul_14_U0_ap_idle & do_layernorm_U0_ap_idle & do_adapt_5_U0_ap_idle & do_adapt_4_U0_ap_idle);

assign ap_ready = stream_copy2_U0_ap_ready;

assign do_adapt_4_U0_ap_continue = 1'b1;

assign do_adapt_4_U0_ap_start = start_for_do_adapt_4_U0_empty_n;

assign do_adapt_5_U0_ap_continue = 1'b1;

assign do_adapt_5_U0_ap_start = start_for_do_adapt_5_U0_empty_n;

assign do_layernorm_U0_ap_continue = 1'b1;

assign do_layernorm_U0_ap_start = start_for_do_layernorm_U0_empty_n;

assign do_matmul_14_U0_ap_continue = 1'b1;

assign do_matmul_14_U0_ap_start = start_for_do_matmul_14_U0_empty_n;

assign do_matmul_15_U0_ap_continue = 1'b1;

assign do_matmul_15_U0_ap_start = start_for_do_matmul_15_U0_empty_n;

assign do_matmul_1_1_U0_ap_continue = 1'b1;

assign do_matmul_1_1_U0_ap_start = start_for_do_matmul_1_1_U0_empty_n;

assign do_matmul_1_U0_ap_continue = 1'b1;

assign do_matmul_1_U0_ap_start = start_for_do_matmul_1_U0_empty_n;

assign do_matmul_2_U0_ap_continue = 1'b1;

assign do_matmul_2_U0_ap_start = start_for_do_matmul_2_U0_empty_n;

assign do_matmul_3_U0_ap_continue = 1'b1;

assign do_matmul_3_U0_ap_start = start_for_do_matmul_3_U0_empty_n;

assign do_matmul_4_U0_ap_continue = 1'b1;

assign do_matmul_4_U0_ap_start = start_for_do_matmul_4_U0_empty_n;

assign do_matmul_8_U0_ap_continue = 1'b1;

assign do_matmul_8_U0_ap_start = start_for_do_matmul_8_U0_empty_n;

assign do_matmul_9_U0_ap_continue = 1'b1;

assign do_matmul_9_U0_ap_start = start_for_do_matmul_9_U0_empty_n;

assign do_matmul_U0_ap_continue = 1'b1;

assign do_matmul_U0_ap_start = start_for_do_matmul_U0_empty_n;

assign do_merge_U0_ap_continue = 1'b1;

assign do_merge_U0_ap_start = start_for_do_merge_U0_empty_n;

assign do_quant_1_U0_ap_continue = 1'b1;

assign do_quant_1_U0_ap_start = start_for_do_quant_1_U0_empty_n;

assign do_quant_2_1_U0_ap_continue = 1'b1;

assign do_quant_2_1_U0_ap_start = start_for_do_quant_2_1_U0_empty_n;

assign do_quant_2_U0_ap_continue = 1'b1;

assign do_quant_2_U0_ap_start = start_for_do_quant_2_U0_empty_n;

assign do_quant_U0_ap_continue = 1'b1;

assign do_quant_U0_ap_start = start_for_do_quant_U0_empty_n;

assign do_reshape_12_U0_ap_continue = 1'b1;

assign do_reshape_12_U0_ap_start = start_for_do_reshape_12_U0_empty_n;

assign do_reshape_13_U0_ap_continue = 1'b1;

assign do_reshape_13_U0_ap_start = start_for_do_reshape_13_U0_empty_n;

assign do_reshape_5_U0_ap_continue = 1'b1;

assign do_reshape_5_U0_ap_start = start_for_do_reshape_5_U0_empty_n;

assign do_reshape_6_U0_ap_continue = 1'b1;

assign do_reshape_6_U0_ap_start = start_for_do_reshape_6_U0_empty_n;

assign do_reshape_7_U0_ap_continue = 1'b1;

assign do_reshape_7_U0_ap_start = start_for_do_reshape_7_U0_empty_n;

assign do_reshape_U0_ap_continue = 1'b1;

assign do_reshape_U0_ap_start = start_for_do_reshape_U0_empty_n;

assign do_softmax_10_U0_ap_continue = 1'b1;

assign do_softmax_10_U0_ap_start = start_for_do_softmax_10_U0_empty_n;

assign do_softmax_11_U0_ap_continue = 1'b1;

assign do_softmax_11_U0_ap_start = start_for_do_softmax_11_U0_empty_n;

assign do_softmax_U0_ap_continue = 1'b1;

assign do_softmax_U0_ap_start = start_for_do_softmax_U0_empty_n;

assign do_split_3_U0_ap_continue = 1'b1;

assign do_split_3_U0_ap_start = start_for_do_split_3_U0_empty_n;

assign do_split_3_U0_start_full_n = (start_for_do_matmul_9_U0_full_n & start_for_do_matmul_8_U0_full_n & start_for_do_matmul_1_U0_full_n);

assign do_split_4_U0_ap_continue = 1'b1;

assign do_split_4_U0_ap_start = start_for_do_split_4_U0_empty_n;

assign do_split_4_U0_start_full_n = (start_for_do_reshape_7_U0_full_n & start_for_do_reshape_6_U0_full_n & start_for_do_reshape_5_U0_full_n);

assign do_split_U0_ap_continue = 1'b1;

assign do_split_U0_ap_start = start_for_do_split_U0_empty_n;

assign do_split_U0_start_full_n = (start_for_do_reshape_U0_full_n & start_for_do_reshape_13_U0_full_n & start_for_do_reshape_12_U0_full_n);

assign i_stream_TREADY = stream_copy2_U0_i_stream_TREADY;

assign o_stream_TDATA = stream_merge_U0_o_stream_TDATA;

assign o_stream_TVALID = stream_merge_U0_o_stream_TVALID;

assign start_for_do_adapt_4_U0_din = 1'b1;

assign start_for_do_adapt_5_U0_din = 1'b1;

assign start_for_do_layernorm_U0_din = 1'b1;

assign start_for_do_matmul_14_U0_din = 1'b1;

assign start_for_do_matmul_15_U0_din = 1'b1;

assign start_for_do_matmul_1_1_U0_din = 1'b1;

assign start_for_do_matmul_1_U0_din = 1'b1;

assign start_for_do_matmul_2_U0_din = 1'b1;

assign start_for_do_matmul_3_U0_din = 1'b1;

assign start_for_do_matmul_4_U0_din = 1'b1;

assign start_for_do_matmul_8_U0_din = 1'b1;

assign start_for_do_matmul_9_U0_din = 1'b1;

assign start_for_do_matmul_U0_din = 1'b1;

assign start_for_do_merge_U0_din = 1'b1;

assign start_for_do_quant_1_U0_din = 1'b1;

assign start_for_do_quant_2_1_U0_din = 1'b1;

assign start_for_do_quant_2_U0_din = 1'b1;

assign start_for_do_quant_U0_din = 1'b1;

assign start_for_do_reshape_12_U0_din = 1'b1;

assign start_for_do_reshape_13_U0_din = 1'b1;

assign start_for_do_reshape_5_U0_din = 1'b1;

assign start_for_do_reshape_6_U0_din = 1'b1;

assign start_for_do_reshape_7_U0_din = 1'b1;

assign start_for_do_reshape_U0_din = 1'b1;

assign start_for_do_softmax_10_U0_din = 1'b1;

assign start_for_do_softmax_11_U0_din = 1'b1;

assign start_for_do_softmax_U0_din = 1'b1;

assign start_for_do_split_3_U0_din = 1'b1;

assign start_for_do_split_4_U0_din = 1'b1;

assign start_for_do_split_U0_din = 1'b1;

assign start_for_stream_copy3_U0_din = 1'b1;

assign start_for_stream_merge_U0_din = 1'b1;

assign stream_copy2_U0_ap_continue = 1'b1;

assign stream_copy2_U0_ap_start = ap_start;

assign stream_copy2_U0_start_full_n = (start_for_do_layernorm_U0_full_n & start_for_do_adapt_5_U0_full_n);

assign stream_copy3_U0_ap_continue = 1'b1;

assign stream_copy3_U0_ap_start = start_for_stream_copy3_U0_empty_n;

assign stream_copy3_U0_start_full_n = (start_for_do_matmul_4_U0_full_n & start_for_do_matmul_2_U0_full_n & start_for_do_matmul_1_1_U0_full_n);

assign stream_merge_U0_ap_continue = ap_continue;

assign stream_merge_U0_ap_start = start_for_stream_merge_U0_empty_n;

endmodule //ATTN11_do_attn
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_layernorm (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        main_sm_dout,
        main_sm_num_data_valid,
        main_sm_fifo_cap,
        main_sm_empty_n,
        main_sm_read,
        lnq_sm_din,
        lnq_sm_num_data_valid,
        lnq_sm_fifo_cap,
        lnq_sm_full_n,
        lnq_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [25:0] main_sm_dout;
input  [2:0] main_sm_num_data_valid;
input  [2:0] main_sm_fifo_cap;
input   main_sm_empty_n;
output   main_sm_read;
output  [5:0] lnq_sm_din;
input  [2:0] lnq_sm_num_data_valid;
input  [2:0] lnq_sm_fifo_cap;
input   lnq_sm_full_n;
output   lnq_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg main_sm_read;
reg lnq_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] select_ln108_1_reg_1275;
reg    ap_predicate_op100_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter11_reg;
reg    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln107_fu_337_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] attn_inst_lnq_rsqrt_table_address0;
reg    attn_inst_lnq_rsqrt_table_ce0;
wire   [11:0] attn_inst_lnq_rsqrt_table_q0;
wire   [6:0] attn_inst_lnq_rsqrt_table_address1;
reg    attn_inst_lnq_rsqrt_table_ce1;
wire   [11:0] attn_inst_lnq_rsqrt_table_q1;
wire   [7:0] attn_inst_lnq_lnw_address0;
reg    attn_inst_lnq_lnw_ce0;
wire   [15:0] attn_inst_lnq_lnw_q0;
wire   [7:0] attn_inst_lnq_lnb_address0;
reg    attn_inst_lnq_lnb_ce0;
wire   [33:0] attn_inst_lnq_lnb_q0;
reg    main_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    lnq_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln108_fu_343_p2;
reg   [0:0] icmp_ln108_reg_1261;
wire   [7:0] select_ln108_fu_434_p3;
reg   [7:0] select_ln108_reg_1268;
wire   [1:0] select_ln108_1_fu_442_p3;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter2_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter3_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter4_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter5_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter6_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter7_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter8_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter9_reg;
reg   [1:0] select_ln108_1_reg_1275_pp0_iter10_reg;
wire   [0:0] grp_fu_249_p2;
reg   [0:0] cmp89_reg_1284;
reg   [0:0] cmp89_reg_1284_pp0_iter3_reg;
reg   [0:0] cmp89_reg_1284_pp0_iter4_reg;
reg   [0:0] cmp89_reg_1284_pp0_iter5_reg;
wire   [0:0] grp_fu_254_p2;
reg   [0:0] icmp_ln163_reg_1290;
reg   [0:0] icmp_ln163_reg_1290_pp0_iter3_reg;
reg   [0:0] icmp_ln163_reg_1290_pp0_iter4_reg;
reg   [0:0] icmp_ln163_reg_1290_pp0_iter5_reg;
reg   [0:0] icmp_ln163_reg_1290_pp0_iter6_reg;
reg   [0:0] icmp_ln163_reg_1290_pp0_iter7_reg;
reg   [0:0] icmp_ln137_reg_1304;
reg   [0:0] icmp_ln137_reg_1304_pp0_iter3_reg;
reg   [0:0] icmp_ln137_reg_1304_pp0_iter4_reg;
wire   [25:0] buffer_q1;
reg   [25:0] buffer_load_reg_1318;
reg   [25:0] buffer_load_reg_1318_pp0_iter4_reg;
reg   [25:0] buffer_load_reg_1318_pp0_iter5_reg;
reg   [15:0] attn_inst_lnq_lnw_load_reg_1326;
reg   [15:0] attn_inst_lnq_lnw_load_reg_1326_pp0_iter4_reg;
reg   [15:0] attn_inst_lnq_lnw_load_reg_1326_pp0_iter5_reg;
reg   [15:0] attn_inst_lnq_lnw_load_reg_1326_pp0_iter6_reg;
reg   [15:0] attn_inst_lnq_lnw_load_reg_1326_pp0_iter7_reg;
reg   [15:0] attn_inst_lnq_lnw_load_reg_1326_pp0_iter8_reg;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331_pp0_iter4_reg;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331_pp0_iter5_reg;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331_pp0_iter6_reg;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331_pp0_iter7_reg;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331_pp0_iter8_reg;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331_pp0_iter9_reg;
reg   [33:0] attn_inst_lnq_lnb_load_reg_1331_pp0_iter10_reg;
wire  signed [23:0] sext_ln156_fu_637_p1;
wire  signed [23:0] sext_ln156_1_fu_660_p1;
wire   [23:0] empty_1199_fu_752_p3;
reg   [23:0] empty_1199_reg_1348;
wire   [23:0] empty_1200_fu_759_p3;
reg   [23:0] empty_1200_reg_1353;
wire   [12:0] diff_1_fu_809_p2;
reg   [12:0] diff_1_reg_1358;
reg  signed [12:0] diff_1_reg_1358_pp0_iter7_reg;
wire   [12:0] diff_2_fu_828_p2;
reg   [12:0] diff_2_reg_1363;
reg  signed [12:0] diff_2_reg_1363_pp0_iter7_reg;
wire   [35:0] zext_ln185_fu_952_p1;
wire  signed [35:0] sext_ln185_4_fu_975_p1;
wire   [7:0] buffer_address1;
reg    buffer_ce1;
reg    buffer_we1;
wire   [63:0] zext_ln109_fu_480_p1;
wire   [63:0] zext_ln168_fu_849_p1;
wire   [63:0] zext_ln168_1_fu_873_p1;
reg   [7:0] ct_fu_116;
wire   [7:0] add_ln109_fu_450_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [7:0] ap_sig_allocacmp_ct_load;
reg   [1:0] state_fu_120;
reg   [1:0] ap_sig_allocacmp_state_load;
reg   [9:0] indvar_flatten_fu_124;
wire   [9:0] select_ln108_2_fu_355_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten33_fu_128;
wire   [15:0] add_ln107_fu_331_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten33_load;
reg   [8:0] empty_fu_132;
reg   [11:0] empty_1192_fu_136;
reg   [8:0] empty_1193_fu_140;
reg   [11:0] empty_1194_fu_144;
reg   [23:0] empty_1195_fu_148;
reg   [23:0] empty_1196_fu_152;
reg   [15:0] empty_1197_fu_156;
wire  signed [15:0] add_ln132_fu_546_p2;
reg   [15:0] empty_1198_fu_160;
wire  signed [15:0] add_ln132_1_fu_564_p2;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln108_1_fu_349_p2;
wire   [0:0] icmp_ln109_fu_411_p2;
wire   [0:0] xor_ln107_fu_406_p2;
wire   [1:0] select_ln107_fu_399_p3;
wire   [0:0] and_ln107_fu_417_p2;
wire   [0:0] or_ln108_fu_429_p2;
wire   [1:0] state_6_fu_423_p2;
wire   [12:0] trunc_ln116_fu_512_p1;
wire   [15:0] select_ln119_1_fu_534_p3;
wire  signed [15:0] sext_ln132_fu_542_p1;
wire   [12:0] trunc_ln116_1_fu_516_p4;
wire   [15:0] select_ln119_fu_526_p3;
wire  signed [15:0] sext_ln132_1_fu_560_p1;
wire   [12:0] trunc_ln155_fu_624_p1;
wire  signed [12:0] sext_ln155_fu_627_p1;
wire   [12:0] diff_fu_631_p2;
wire   [12:0] tmp_s_fu_641_p4;
wire  signed [12:0] sext_ln155_1_fu_650_p1;
wire   [12:0] diff_3_fu_654_p2;
wire  signed [12:0] grp_fu_672_p0;
wire  signed [12:0] grp_fu_672_p1;
wire  signed [12:0] grp_fu_686_p0;
wire  signed [12:0] grp_fu_686_p1;
wire  signed [31:0] trunc_ln1_fu_692_p1;
wire   [31:0] grp_fu_1113_p3;
wire  signed [31:0] trunc_ln142_1_fu_701_p1;
wire   [31:0] grp_fu_1122_p3;
wire   [23:0] grp_fu_672_p2;
wire   [23:0] grp_fu_686_p2;
wire   [23:0] add_ln158_fu_740_p2;
wire   [23:0] add_ln158_1_fu_746_p2;
wire   [12:0] trunc_ln182_fu_802_p1;
wire  signed [12:0] sext_ln182_fu_805_p1;
wire   [12:0] tmp_68_fu_815_p4;
wire  signed [12:0] sext_ln182_1_fu_824_p1;
wire   [23:0] add_ln166_fu_834_p2;
wire   [6:0] cursor_fu_839_p4;
wire   [23:0] add_ln166_1_fu_858_p2;
wire   [6:0] cursor_s_fu_863_p4;
wire   [11:0] grp_fu_921_p1;
wire   [11:0] grp_fu_942_p1;
wire  signed [24:0] grp_fu_921_p2;
wire  signed [24:0] grp_fu_942_p2;
wire  signed [35:0] grp_fu_1131_p3;
wire   [4:0] rel_fu_978_p4;
wire   [2:0] tmp_34_fu_993_p4;
wire   [0:0] icmp_ln7_fu_987_p2;
wire   [0:0] icmp_ln8_fu_1002_p2;
wire   [0:0] or_ln187_fu_1025_p2;
wire   [2:0] select_ln187_fu_1017_p3;
wire   [2:0] trunc_ln_fu_1008_p4;
wire  signed [35:0] grp_fu_1142_p3;
wire   [4:0] rel_4_fu_1039_p4;
wire   [2:0] tmp_35_fu_1054_p4;
wire   [0:0] icmp_ln7_1_fu_1048_p2;
wire   [0:0] icmp_ln8_8_fu_1063_p2;
wire   [0:0] or_ln187_1_fu_1078_p2;
wire   [2:0] select_ln187_2_fu_1084_p3;
wire   [2:0] trunc_ln187_1_fu_1069_p4;
wire   [2:0] select_ln187_3_fu_1092_p3;
wire   [2:0] select_ln187_1_fu_1031_p3;
wire   [15:0] grp_fu_1113_p1;
wire   [22:0] grp_fu_1113_p2;
wire   [15:0] grp_fu_1122_p1;
wire   [22:0] grp_fu_1122_p2;
wire   [15:0] grp_fu_1131_p1;
wire  signed [33:0] grp_fu_1131_p2;
wire   [15:0] grp_fu_1142_p1;
wire  signed [33:0] grp_fu_1142_p2;
reg    grp_fu_672_ce;
reg    grp_fu_686_ce;
reg    grp_fu_921_ce;
reg    grp_fu_942_ce;
reg    grp_fu_1113_ce;
reg    grp_fu_1122_ce;
reg    grp_fu_1131_ce;
reg    grp_fu_1142_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [24:0] grp_fu_921_p10;
wire   [24:0] grp_fu_942_p10;
reg    ap_condition_376;
reg    ap_condition_395;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_enable_reg_pp0_iter9 = 1'b0;
//#0 ap_enable_reg_pp0_iter10 = 1'b0;
//#0 ap_enable_reg_pp0_iter11 = 1'b0;
//#0 ap_enable_reg_pp0_iter12 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ct_fu_116 = 8'd0;
//#0 state_fu_120 = 2'd0;
//#0 indvar_flatten_fu_124 = 10'd0;
//#0 indvar_flatten33_fu_128 = 16'd0;
//#0 empty_fu_132 = 9'd0;
//#0 empty_1192_fu_136 = 12'd0;
//#0 empty_1193_fu_140 = 9'd0;
//#0 empty_1194_fu_144 = 12'd0;
//#0 empty_1195_fu_148 = 24'd0;
//#0 empty_1196_fu_152 = 24'd0;
//#0 empty_1197_fu_156 = 16'd0;
//#0 empty_1198_fu_160 = 16'd0;
end

ATTN11_do_layernorm_attn_inst_lnq_rsqrt_table_ROM_AUTO_1R #(
    .DataWidth( 12 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
attn_inst_lnq_rsqrt_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_lnq_rsqrt_table_address0),
    .ce0(attn_inst_lnq_rsqrt_table_ce0),
    .q0(attn_inst_lnq_rsqrt_table_q0),
    .address1(attn_inst_lnq_rsqrt_table_address1),
    .ce1(attn_inst_lnq_rsqrt_table_ce1),
    .q1(attn_inst_lnq_rsqrt_table_q1)
);

ATTN11_do_layernorm_attn_inst_lnq_lnw_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
attn_inst_lnq_lnw_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_lnq_lnw_address0),
    .ce0(attn_inst_lnq_lnw_ce0),
    .q0(attn_inst_lnq_lnw_q0)
);

ATTN11_do_layernorm_attn_inst_lnq_lnb_ROM_AUTO_1R #(
    .DataWidth( 34 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
attn_inst_lnq_lnb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_lnq_lnb_address0),
    .ce0(attn_inst_lnq_lnb_ce0),
    .q0(attn_inst_lnq_lnb_q0)
);

ATTN11_do_layernorm_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 26 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(main_sm_dout),
    .q1(buffer_q1)
);

ATTN11_mul_13s_13s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
mul_13s_13s_24_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_672_p0),
    .din1(grp_fu_672_p1),
    .ce(grp_fu_672_ce),
    .dout(grp_fu_672_p2)
);

ATTN11_mul_13s_13s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
mul_13s_13s_24_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_686_p0),
    .din1(grp_fu_686_p1),
    .ce(grp_fu_686_ce),
    .dout(grp_fu_686_p2)
);

ATTN11_mul_13s_12ns_25_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 25 ))
mul_13s_12ns_25_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(diff_1_reg_1358_pp0_iter7_reg),
    .din1(grp_fu_921_p1),
    .ce(grp_fu_921_ce),
    .dout(grp_fu_921_p2)
);

ATTN11_mul_13s_12ns_25_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 25 ))
mul_13s_12ns_25_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(diff_2_reg_1363_pp0_iter7_reg),
    .din1(grp_fu_942_p1),
    .ce(grp_fu_942_ce),
    .dout(grp_fu_942_p2)
);

ATTN11_mac_muladd_16s_16ns_23ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 32 ))
mac_muladd_16s_16ns_23ns_32_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln132_fu_546_p2),
    .din1(grp_fu_1113_p1),
    .din2(grp_fu_1113_p2),
    .ce(grp_fu_1113_ce),
    .dout(grp_fu_1113_p3)
);

ATTN11_mac_muladd_16s_16ns_23ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 32 ))
mac_muladd_16s_16ns_23ns_32_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln132_1_fu_564_p2),
    .din1(grp_fu_1122_p1),
    .din2(grp_fu_1122_p2),
    .ce(grp_fu_1122_ce),
    .dout(grp_fu_1122_p3)
);

ATTN11_mac_muladd_25s_16ns_34s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 36 ))
mac_muladd_25s_16ns_34s_36_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_921_p2),
    .din1(grp_fu_1131_p1),
    .din2(grp_fu_1131_p2),
    .ce(grp_fu_1131_ce),
    .dout(grp_fu_1131_p3)
);

ATTN11_mac_muladd_25s_16ns_34s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 36 ))
mac_muladd_25s_16ns_34s_36_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_942_p2),
    .din1(grp_fu_1142_p1),
    .din2(grp_fu_1142_p2),
    .ce(grp_fu_1142_ce),
    .dout(grp_fu_1142_p3)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_376)) begin
        ct_fu_116 <= add_ln109_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_395)) begin
    if ((icmp_ln107_fu_337_p2 == 1'd0)) begin
        indvar_flatten33_fu_128 <= add_ln107_fu_331_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten33_fu_128 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_395)) begin
    if ((icmp_ln107_fu_337_p2 == 1'd0)) begin
        indvar_flatten_fu_124 <= select_ln108_2_fu_355_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_124 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_376)) begin
    state_fu_120 <= select_ln108_1_fu_442_p3;
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        attn_inst_lnq_lnb_load_reg_1331 <= attn_inst_lnq_lnb_q0;
        attn_inst_lnq_lnb_load_reg_1331_pp0_iter10_reg <= attn_inst_lnq_lnb_load_reg_1331_pp0_iter9_reg;
        attn_inst_lnq_lnb_load_reg_1331_pp0_iter4_reg <= attn_inst_lnq_lnb_load_reg_1331;
        attn_inst_lnq_lnb_load_reg_1331_pp0_iter5_reg <= attn_inst_lnq_lnb_load_reg_1331_pp0_iter4_reg;
        attn_inst_lnq_lnb_load_reg_1331_pp0_iter6_reg <= attn_inst_lnq_lnb_load_reg_1331_pp0_iter5_reg;
        attn_inst_lnq_lnb_load_reg_1331_pp0_iter7_reg <= attn_inst_lnq_lnb_load_reg_1331_pp0_iter6_reg;
        attn_inst_lnq_lnb_load_reg_1331_pp0_iter8_reg <= attn_inst_lnq_lnb_load_reg_1331_pp0_iter7_reg;
        attn_inst_lnq_lnb_load_reg_1331_pp0_iter9_reg <= attn_inst_lnq_lnb_load_reg_1331_pp0_iter8_reg;
        attn_inst_lnq_lnw_load_reg_1326 <= attn_inst_lnq_lnw_q0;
        attn_inst_lnq_lnw_load_reg_1326_pp0_iter4_reg <= attn_inst_lnq_lnw_load_reg_1326;
        attn_inst_lnq_lnw_load_reg_1326_pp0_iter5_reg <= attn_inst_lnq_lnw_load_reg_1326_pp0_iter4_reg;
        attn_inst_lnq_lnw_load_reg_1326_pp0_iter6_reg <= attn_inst_lnq_lnw_load_reg_1326_pp0_iter5_reg;
        attn_inst_lnq_lnw_load_reg_1326_pp0_iter7_reg <= attn_inst_lnq_lnw_load_reg_1326_pp0_iter6_reg;
        attn_inst_lnq_lnw_load_reg_1326_pp0_iter8_reg <= attn_inst_lnq_lnw_load_reg_1326_pp0_iter7_reg;
        buffer_load_reg_1318_pp0_iter4_reg <= buffer_load_reg_1318;
        buffer_load_reg_1318_pp0_iter5_reg <= buffer_load_reg_1318_pp0_iter4_reg;
        cmp89_reg_1284_pp0_iter3_reg <= cmp89_reg_1284;
        cmp89_reg_1284_pp0_iter4_reg <= cmp89_reg_1284_pp0_iter3_reg;
        cmp89_reg_1284_pp0_iter5_reg <= cmp89_reg_1284_pp0_iter4_reg;
        diff_1_reg_1358 <= diff_1_fu_809_p2;
        diff_1_reg_1358_pp0_iter7_reg <= diff_1_reg_1358;
        diff_2_reg_1363 <= diff_2_fu_828_p2;
        diff_2_reg_1363_pp0_iter7_reg <= diff_2_reg_1363;
        empty_1199_reg_1348 <= empty_1199_fu_752_p3;
        empty_1200_reg_1353 <= empty_1200_fu_759_p3;
        icmp_ln137_reg_1304_pp0_iter3_reg <= icmp_ln137_reg_1304;
        icmp_ln137_reg_1304_pp0_iter4_reg <= icmp_ln137_reg_1304_pp0_iter3_reg;
        icmp_ln163_reg_1290_pp0_iter3_reg <= icmp_ln163_reg_1290;
        icmp_ln163_reg_1290_pp0_iter4_reg <= icmp_ln163_reg_1290_pp0_iter3_reg;
        icmp_ln163_reg_1290_pp0_iter5_reg <= icmp_ln163_reg_1290_pp0_iter4_reg;
        icmp_ln163_reg_1290_pp0_iter6_reg <= icmp_ln163_reg_1290_pp0_iter5_reg;
        icmp_ln163_reg_1290_pp0_iter7_reg <= icmp_ln163_reg_1290_pp0_iter6_reg;
        select_ln108_1_reg_1275_pp0_iter10_reg <= select_ln108_1_reg_1275_pp0_iter9_reg;
        select_ln108_1_reg_1275_pp0_iter11_reg <= select_ln108_1_reg_1275_pp0_iter10_reg;
        select_ln108_1_reg_1275_pp0_iter2_reg <= select_ln108_1_reg_1275;
        select_ln108_1_reg_1275_pp0_iter3_reg <= select_ln108_1_reg_1275_pp0_iter2_reg;
        select_ln108_1_reg_1275_pp0_iter4_reg <= select_ln108_1_reg_1275_pp0_iter3_reg;
        select_ln108_1_reg_1275_pp0_iter5_reg <= select_ln108_1_reg_1275_pp0_iter4_reg;
        select_ln108_1_reg_1275_pp0_iter6_reg <= select_ln108_1_reg_1275_pp0_iter5_reg;
        select_ln108_1_reg_1275_pp0_iter7_reg <= select_ln108_1_reg_1275_pp0_iter6_reg;
        select_ln108_1_reg_1275_pp0_iter8_reg <= select_ln108_1_reg_1275_pp0_iter7_reg;
        select_ln108_1_reg_1275_pp0_iter9_reg <= select_ln108_1_reg_1275_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln108_reg_1261 <= icmp_ln108_fu_343_p2;
        select_ln108_1_reg_1275 <= select_ln108_1_fu_442_p3;
        select_ln108_reg_1268 <= select_ln108_fu_434_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_load_reg_1318 <= buffer_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cmp89_reg_1284 <= grp_fu_249_p2;
        icmp_ln137_reg_1304 <= grp_fu_254_p2;
        icmp_ln163_reg_1290 <= grp_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln163_reg_1290_pp0_iter7_reg == 1'd1) & (select_ln108_1_reg_1275_pp0_iter7_reg == 2'd1))) begin
        empty_1192_fu_136 <= attn_inst_lnq_rsqrt_table_q1;
        empty_1194_fu_144 <= attn_inst_lnq_rsqrt_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln108_1_reg_1275_pp0_iter4_reg == 2'd1) & ~(select_ln108_1_reg_1275_pp0_iter4_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln137_reg_1304_pp0_iter4_reg == 1'd1))) begin
        empty_1193_fu_140 <= {{trunc_ln142_1_fu_701_p1[31:23]}};
        empty_fu_132 <= {{trunc_ln1_fu_692_p1[31:23]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln108_1_reg_1275_pp0_iter5_reg == 2'd1))) begin
        empty_1195_fu_148 <= empty_1199_fu_752_p3;
        empty_1196_fu_152 <= empty_1200_fu_759_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln108_1_reg_1275 == 2'd1) & ~(select_ln108_1_reg_1275 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_1197_fu_156 <= add_ln132_fu_546_p2;
        empty_1198_fu_160 <= add_ln132_1_fu_564_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_337_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ct_load = 8'd0;
    end else begin
        ap_sig_allocacmp_ct_load = ct_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_state_load = 2'd0;
    end else begin
        ap_sig_allocacmp_state_load = state_fu_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_lnq_lnb_ce0 = 1'b1;
    end else begin
        attn_inst_lnq_lnb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_lnq_lnw_ce0 = 1'b1;
    end else begin
        attn_inst_lnq_lnw_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_lnq_rsqrt_table_ce0 = 1'b1;
    end else begin
        attn_inst_lnq_rsqrt_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_lnq_rsqrt_table_ce1 = 1'b1;
    end else begin
        attn_inst_lnq_rsqrt_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln108_1_reg_1275 == 2'd1) & ~(select_ln108_1_reg_1275 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_we1 = 1'b1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1113_ce = 1'b1;
    end else begin
        grp_fu_1113_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1122_ce = 1'b1;
    end else begin
        grp_fu_1122_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1131_ce = 1'b1;
    end else begin
        grp_fu_1131_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1142_ce = 1'b1;
    end else begin
        grp_fu_1142_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_672_ce = 1'b1;
    end else begin
        grp_fu_672_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_686_ce = 1'b1;
    end else begin
        grp_fu_686_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_921_ce = 1'b1;
    end else begin
        grp_fu_921_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_942_ce = 1'b1;
    end else begin
        grp_fu_942_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (select_ln108_1_reg_1275_pp0_iter11_reg == 2'd2))) begin
        lnq_sm_blk_n = lnq_sm_full_n;
    end else begin
        lnq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1) & (select_ln108_1_reg_1275_pp0_iter11_reg == 2'd2))) begin
        lnq_sm_write = 1'b1;
    end else begin
        lnq_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op100_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        main_sm_blk_n = main_sm_empty_n;
    end else begin
        main_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op100_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        main_sm_read = 1'b1;
    end else begin
        main_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_fu_331_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 16'd1);

assign add_ln108_1_fu_349_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln109_fu_450_p2 = (select_ln108_fu_434_p3 + 8'd1);

assign add_ln132_1_fu_564_p2 = ($signed(select_ln119_fu_526_p3) + $signed(sext_ln132_1_fu_560_p1));

assign add_ln132_fu_546_p2 = ($signed(select_ln119_1_fu_534_p3) + $signed(sext_ln132_fu_542_p1));

assign add_ln158_1_fu_746_p2 = (grp_fu_686_p2 + empty_1196_fu_152);

assign add_ln158_fu_740_p2 = (grp_fu_672_p2 + empty_1195_fu_148);

assign add_ln166_1_fu_858_p2 = ($signed(empty_1200_reg_1353) + $signed(24'd16121667));

assign add_ln166_fu_834_p2 = ($signed(empty_1199_reg_1348) + $signed(24'd16121667));

assign and_ln107_fu_417_p2 = (xor_ln107_fu_406_p2 & icmp_ln109_fu_411_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter12)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter12)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter12)));
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = ((select_ln108_1_reg_1275_pp0_iter11_reg == 2'd2) & (lnq_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op100_read_state3 == 1'b1) & (main_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_376 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_395 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op100_read_state3 = (~(select_ln108_1_reg_1275 == 2'd1) & ~(select_ln108_1_reg_1275 == 2'd2));
end

assign ap_ready = internal_ap_ready;

assign attn_inst_lnq_lnb_address0 = zext_ln109_fu_480_p1;

assign attn_inst_lnq_lnw_address0 = zext_ln109_fu_480_p1;

assign attn_inst_lnq_rsqrt_table_address0 = zext_ln168_1_fu_873_p1;

assign attn_inst_lnq_rsqrt_table_address1 = zext_ln168_fu_849_p1;

assign buffer_address1 = zext_ln109_fu_480_p1;

assign cursor_fu_839_p4 = {{add_ln166_fu_834_p2[23:17]}};

assign cursor_s_fu_863_p4 = {{add_ln166_1_fu_858_p2[23:17]}};

assign diff_1_fu_809_p2 = ($signed(trunc_ln182_fu_802_p1) - $signed(sext_ln182_fu_805_p1));

assign diff_2_fu_828_p2 = ($signed(tmp_68_fu_815_p4) - $signed(sext_ln182_1_fu_824_p1));

assign diff_3_fu_654_p2 = ($signed(tmp_s_fu_641_p4) - $signed(sext_ln155_1_fu_650_p1));

assign diff_fu_631_p2 = ($signed(trunc_ln155_fu_624_p1) - $signed(sext_ln155_fu_627_p1));

assign empty_1199_fu_752_p3 = ((cmp89_reg_1284_pp0_iter5_reg[0:0] == 1'b1) ? grp_fu_672_p2 : add_ln158_fu_740_p2);

assign empty_1200_fu_759_p3 = ((cmp89_reg_1284_pp0_iter5_reg[0:0] == 1'b1) ? grp_fu_686_p2 : add_ln158_1_fu_746_p2);

assign grp_fu_1113_p1 = 32'd43691;

assign grp_fu_1113_p2 = 32'd4194304;

assign grp_fu_1122_p1 = 32'd43691;

assign grp_fu_1122_p2 = 32'd4194304;

assign grp_fu_1131_p1 = zext_ln185_fu_952_p1;

assign grp_fu_1131_p2 = sext_ln185_4_fu_975_p1;

assign grp_fu_1142_p1 = zext_ln185_fu_952_p1;

assign grp_fu_1142_p2 = sext_ln185_4_fu_975_p1;

assign grp_fu_249_p2 = ((select_ln108_reg_1268 == 8'd0) ? 1'b1 : 1'b0);

assign grp_fu_254_p2 = ((select_ln108_reg_1268 == 8'd191) ? 1'b1 : 1'b0);

assign grp_fu_672_p0 = sext_ln156_fu_637_p1;

assign grp_fu_672_p1 = sext_ln156_fu_637_p1;

assign grp_fu_686_p0 = sext_ln156_1_fu_660_p1;

assign grp_fu_686_p1 = sext_ln156_1_fu_660_p1;

assign grp_fu_921_p1 = grp_fu_921_p10;

assign grp_fu_921_p10 = empty_1192_fu_136;

assign grp_fu_942_p1 = grp_fu_942_p10;

assign grp_fu_942_p10 = empty_1194_fu_144;

assign icmp_ln107_fu_337_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 16'd56448) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_343_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_411_p2 = ((ap_sig_allocacmp_ct_load == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_1048_p2 = (($signed(rel_4_fu_1039_p4) < $signed(5'd28)) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_987_p2 = (($signed(rel_fu_978_p4) < $signed(5'd28)) ? 1'b1 : 1'b0);

assign icmp_ln8_8_fu_1063_p2 = (($signed(tmp_35_fu_1054_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_1002_p2 = (($signed(tmp_34_fu_993_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign lnq_sm_din = {{select_ln187_3_fu_1092_p3}, {select_ln187_1_fu_1031_p3}};

assign or_ln108_fu_429_p2 = (icmp_ln108_reg_1261 | and_ln107_fu_417_p2);

assign or_ln187_1_fu_1078_p2 = (icmp_ln8_8_fu_1063_p2 | icmp_ln7_1_fu_1048_p2);

assign or_ln187_fu_1025_p2 = (icmp_ln8_fu_1002_p2 | icmp_ln7_fu_987_p2);

assign rel_4_fu_1039_p4 = {{grp_fu_1142_p3[35:31]}};

assign rel_fu_978_p4 = {{grp_fu_1131_p3[35:31]}};

assign select_ln107_fu_399_p3 = ((icmp_ln108_reg_1261[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_state_load);

assign select_ln108_1_fu_442_p3 = ((and_ln107_fu_417_p2[0:0] == 1'b1) ? state_6_fu_423_p2 : select_ln107_fu_399_p3);

assign select_ln108_2_fu_355_p3 = ((icmp_ln108_fu_343_p2[0:0] == 1'b1) ? 10'd1 : add_ln108_1_fu_349_p2);

assign select_ln108_fu_434_p3 = ((or_ln108_fu_429_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_ct_load);

assign select_ln119_1_fu_534_p3 = ((grp_fu_249_p2[0:0] == 1'b1) ? 16'd0 : empty_1197_fu_156);

assign select_ln119_fu_526_p3 = ((grp_fu_249_p2[0:0] == 1'b1) ? 16'd0 : empty_1198_fu_160);

assign select_ln187_1_fu_1031_p3 = ((or_ln187_fu_1025_p2[0:0] == 1'b1) ? select_ln187_fu_1017_p3 : trunc_ln_fu_1008_p4);

assign select_ln187_2_fu_1084_p3 = ((icmp_ln7_1_fu_1048_p2[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign select_ln187_3_fu_1092_p3 = ((or_ln187_1_fu_1078_p2[0:0] == 1'b1) ? select_ln187_2_fu_1084_p3 : trunc_ln187_1_fu_1069_p4);

assign select_ln187_fu_1017_p3 = ((icmp_ln7_fu_987_p2[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign sext_ln132_1_fu_560_p1 = $signed(trunc_ln116_1_fu_516_p4);

assign sext_ln132_fu_542_p1 = $signed(trunc_ln116_fu_512_p1);

assign sext_ln155_1_fu_650_p1 = $signed(empty_1193_fu_140);

assign sext_ln155_fu_627_p1 = $signed(empty_fu_132);

assign sext_ln156_1_fu_660_p1 = $signed(diff_3_fu_654_p2);

assign sext_ln156_fu_637_p1 = $signed(diff_fu_631_p2);

assign sext_ln182_1_fu_824_p1 = $signed(empty_1193_fu_140);

assign sext_ln182_fu_805_p1 = $signed(empty_fu_132);

assign sext_ln185_4_fu_975_p1 = $signed(attn_inst_lnq_lnb_load_reg_1331_pp0_iter10_reg);

assign start_out = real_start;

assign state_6_fu_423_p2 = (select_ln107_fu_399_p3 + 2'd1);

assign tmp_34_fu_993_p4 = {{grp_fu_1131_p3[35:33]}};

assign tmp_35_fu_1054_p4 = {{grp_fu_1142_p3[35:33]}};

assign tmp_68_fu_815_p4 = {{buffer_load_reg_1318_pp0_iter5_reg[25:13]}};

assign tmp_s_fu_641_p4 = {{buffer_load_reg_1318_pp0_iter4_reg[25:13]}};

assign trunc_ln116_1_fu_516_p4 = {{main_sm_dout[25:13]}};

assign trunc_ln116_fu_512_p1 = main_sm_dout[12:0];

assign trunc_ln142_1_fu_701_p1 = grp_fu_1122_p3;

assign trunc_ln155_fu_624_p1 = buffer_load_reg_1318_pp0_iter4_reg[12:0];

assign trunc_ln182_fu_802_p1 = buffer_load_reg_1318_pp0_iter5_reg[12:0];

assign trunc_ln187_1_fu_1069_p4 = {{grp_fu_1142_p3[33:31]}};

assign trunc_ln1_fu_692_p1 = grp_fu_1113_p3;

assign trunc_ln_fu_1008_p4 = {{grp_fu_1131_p3[33:31]}};

assign xor_ln107_fu_406_p2 = (icmp_ln108_reg_1261 ^ 1'd1);

assign zext_ln109_fu_480_p1 = select_ln108_reg_1268;

assign zext_ln168_1_fu_873_p1 = cursor_s_fu_863_p4;

assign zext_ln168_fu_849_p1 = cursor_fu_839_p4;

assign zext_ln185_fu_952_p1 = attn_inst_lnq_lnw_load_reg_1326_pp0_iter8_reg;

endmodule //ATTN11_do_layernorm
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_layernorm_attn_inst_lnq_lnb_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 34;
parameter AddressWidth = 8;
parameter AddressRange = 192;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_layernorm_attn_inst_lnq_lnb_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_layernorm_attn_inst_lnq_lnw_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 16;
parameter AddressWidth = 8;
parameter AddressRange = 192;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_layernorm_attn_inst_lnq_lnw_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_layernorm_attn_inst_lnq_rsqrt_table_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 12;
parameter AddressWidth = 7;
parameter AddressRange = 128;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_layernorm_attn_inst_lnq_rsqrt_table_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_layernorm_buffer_RAM_2P_LUTRAM_1R1W (
       
    address1, ce1,
    d1, we1, 
    q1, 
     
    reset, clk);

parameter DataWidth = 26;
parameter AddressWidth = 8;
parameter AddressRange = 192;
  
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 
output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


   





//read first
always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
        q1 <= ram[address1];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul (
        rq_sm_head3_dout,
        rq_sm_head3_empty_n,
        rq_sm_head3_read,
        vq_sm_transpose_head3_dout,
        vq_sm_transpose_head3_empty_n,
        vq_sm_transpose_head3_read,
        a_sm_head3_din,
        a_sm_head3_full_n,
        a_sm_head3_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [5:0] rq_sm_head3_dout;
input   rq_sm_head3_empty_n;
output   rq_sm_head3_read;
input  [83:0] vq_sm_transpose_head3_dout;
input   vq_sm_transpose_head3_empty_n;
output   vq_sm_transpose_head3_read;
output  [19:0] a_sm_head3_din;
input   a_sm_head3_full_n;
output   a_sm_head3_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_U0_ap_start;
wire    do_adapt_U0_ap_done;
wire    do_adapt_U0_ap_continue;
wire    do_adapt_U0_ap_idle;
wire    do_adapt_U0_ap_ready;
wire    do_adapt_U0_rq_sm_head3_read;
wire   [41:0] do_adapt_U0_adpt_sm_din;
wire    do_adapt_U0_adpt_sm_write;
wire    do_adapt_U0_start_out;
wire    do_adapt_U0_start_write;
wire    matmul_step1_cache_window_U0_ap_start;
wire    matmul_step1_cache_window_U0_ap_done;
wire    matmul_step1_cache_window_U0_ap_continue;
wire    matmul_step1_cache_window_U0_ap_idle;
wire    matmul_step1_cache_window_U0_ap_ready;
wire    matmul_step1_cache_window_U0_adpt_sm_read;
wire   [41:0] matmul_step1_cache_window_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_transposed_U0_ap_start;
wire    matmul_step1_cache_weight_transposed_U0_ap_done;
wire    matmul_step1_cache_weight_transposed_U0_ap_continue;
wire    matmul_step1_cache_weight_transposed_U0_ap_idle;
wire    matmul_step1_cache_weight_transposed_U0_ap_ready;
wire    matmul_step1_cache_weight_transposed_U0_start_out;
wire    matmul_step1_cache_weight_transposed_U0_start_write;
wire    matmul_step1_cache_weight_transposed_U0_vq_sm_transpose_head3_read;
wire   [83:0] matmul_step1_cache_weight_transposed_U0_weight_sm_din;
wire    matmul_step1_cache_weight_transposed_U0_weight_sm_write;
wire    matmul_step2_mac_U0_ap_start;
wire    matmul_step2_mac_U0_ap_done;
wire    matmul_step2_mac_U0_ap_continue;
wire    matmul_step2_mac_U0_ap_idle;
wire    matmul_step2_mac_U0_ap_ready;
wire    matmul_step2_mac_U0_cache_window_sm_read;
wire    matmul_step2_mac_U0_weight_sm_read;
wire   [79:0] matmul_step2_mac_U0_mac_sm_din;
wire    matmul_step2_mac_U0_mac_sm_write;
wire    matmul_step2_mac_U0_start_out;
wire    matmul_step2_mac_U0_start_write;
wire    do_adapt_8_U0_ap_start;
wire    do_adapt_8_U0_ap_done;
wire    do_adapt_8_U0_ap_continue;
wire    do_adapt_8_U0_ap_idle;
wire    do_adapt_8_U0_ap_ready;
wire    do_adapt_8_U0_mac_sm_read;
wire   [19:0] do_adapt_8_U0_a_sm_head3_din;
wire    do_adapt_8_U0_a_sm_head3_write;
wire    adpt_sm_full_n;
wire   [41:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [41:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [83:0] weight_sm_dout;
wire   [2:0] weight_sm_num_data_valid;
wire   [2:0] weight_sm_fifo_cap;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [79:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_U0_ap_ready;
wire    ap_sync_do_adapt_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_U0_din;
wire    start_for_matmul_step1_cache_window_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_U0_dout;
wire    start_for_matmul_step1_cache_window_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_U0_din;
wire    start_for_matmul_step2_mac_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_U0_dout;
wire    start_for_matmul_step2_mac_U0_empty_n;
wire   [0:0] start_for_do_adapt_8_U0_din;
wire    start_for_do_adapt_8_U0_full_n;
wire   [0:0] start_for_do_adapt_8_U0_dout;
wire    start_for_do_adapt_8_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_do_adapt_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready = 1'b0;
end

ATTN11_do_adapt do_adapt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_U0_full_n),
    .ap_done(do_adapt_U0_ap_done),
    .ap_continue(do_adapt_U0_ap_continue),
    .ap_idle(do_adapt_U0_ap_idle),
    .ap_ready(do_adapt_U0_ap_ready),
    .rq_sm_head3_dout(rq_sm_head3_dout),
    .rq_sm_head3_num_data_valid(10'd0),
    .rq_sm_head3_fifo_cap(10'd0),
    .rq_sm_head3_empty_n(rq_sm_head3_empty_n),
    .rq_sm_head3_read(do_adapt_U0_rq_sm_head3_read),
    .adpt_sm_din(do_adapt_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_U0_adpt_sm_write),
    .start_out(do_adapt_U0_start_out),
    .start_write(do_adapt_U0_start_write)
);

ATTN11_matmul_step1_cache_window matmul_step1_cache_window_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_U0_ap_start),
    .ap_done(matmul_step1_cache_window_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_U0_cache_window_sm_write)
);

ATTN11_matmul_step1_cache_weight_transposed matmul_step1_cache_weight_transposed_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_transposed_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_U0_full_n),
    .ap_done(matmul_step1_cache_weight_transposed_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_transposed_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_transposed_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_transposed_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_transposed_U0_start_out),
    .start_write(matmul_step1_cache_weight_transposed_U0_start_write),
    .vq_sm_transpose_head3_dout(vq_sm_transpose_head3_dout),
    .vq_sm_transpose_head3_num_data_valid(10'd0),
    .vq_sm_transpose_head3_fifo_cap(10'd0),
    .vq_sm_transpose_head3_empty_n(vq_sm_transpose_head3_empty_n),
    .vq_sm_transpose_head3_read(matmul_step1_cache_weight_transposed_U0_vq_sm_transpose_head3_read),
    .weight_sm_din(matmul_step1_cache_weight_transposed_U0_weight_sm_din),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_transposed_U0_weight_sm_write)
);

ATTN11_matmul_step2_mac matmul_step2_mac_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_U0_ap_start),
    .start_full_n(start_for_do_adapt_8_U0_full_n),
    .ap_done(matmul_step2_mac_U0_ap_done),
    .ap_continue(matmul_step2_mac_U0_ap_continue),
    .ap_idle(matmul_step2_mac_U0_ap_idle),
    .ap_ready(matmul_step2_mac_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_U0_mac_sm_write),
    .start_out(matmul_step2_mac_U0_start_out),
    .start_write(matmul_step2_mac_U0_start_write)
);

ATTN11_do_adapt_8 do_adapt_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_8_U0_ap_start),
    .ap_done(do_adapt_8_U0_ap_done),
    .ap_continue(do_adapt_8_U0_ap_continue),
    .ap_idle(do_adapt_8_U0_ap_idle),
    .ap_ready(do_adapt_8_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_8_U0_mac_sm_read),
    .a_sm_head3_din(do_adapt_8_U0_a_sm_head3_din),
    .a_sm_head3_num_data_valid(7'd0),
    .a_sm_head3_fifo_cap(7'd0),
    .a_sm_head3_full_n(a_sm_head3_full_n),
    .a_sm_head3_write(do_adapt_8_U0_a_sm_head3_write)
);

ATTN11_fifo_w42_d32_A_x0 adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_U0_adpt_sm_read)
);

ATTN11_fifo_w42_d2_S_x0 cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_U0_cache_window_sm_read)
);

ATTN11_fifo_w84_d2_S_x3 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_transposed_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_transposed_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_num_data_valid(weight_sm_num_data_valid),
    .if_fifo_cap(weight_sm_fifo_cap),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_U0_weight_sm_read)
);

ATTN11_fifo_w80_d2_S_x0 mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_8_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_U0 start_for_matmul_step1_cache_window_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_U0_full_n),
    .if_write(do_adapt_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_U0_empty_n),
    .if_read(matmul_step1_cache_window_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_U0 start_for_matmul_step2_mac_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_U0_din),
    .if_full_n(start_for_matmul_step2_mac_U0_full_n),
    .if_write(matmul_step1_cache_weight_transposed_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_U0_empty_n),
    .if_read(matmul_step2_mac_U0_ap_ready)
);

ATTN11_start_for_do_adapt_8_U0 start_for_do_adapt_8_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_8_U0_din),
    .if_full_n(start_for_do_adapt_8_U0_full_n),
    .if_write(matmul_step2_mac_U0_start_write),
    .if_dout(start_for_do_adapt_8_U0_dout),
    .if_empty_n(start_for_do_adapt_8_U0_empty_n),
    .if_read(do_adapt_8_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_do_adapt_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_U0_ap_ready <= ap_sync_do_adapt_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready;
        end
    end
end

assign a_sm_head3_din = do_adapt_8_U0_a_sm_head3_din;

assign a_sm_head3_write = do_adapt_8_U0_a_sm_head3_write;

assign ap_done = do_adapt_8_U0_ap_done;

assign ap_idle = (matmul_step2_mac_U0_ap_idle & matmul_step1_cache_window_U0_ap_idle & matmul_step1_cache_weight_transposed_U0_ap_idle & do_adapt_U0_ap_idle & do_adapt_8_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_do_adapt_U0_ap_ready = (do_adapt_U0_ap_ready | ap_sync_reg_do_adapt_U0_ap_ready);

assign ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready = (matmul_step1_cache_weight_transposed_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready & ap_sync_do_adapt_U0_ap_ready);

assign do_adapt_8_U0_ap_continue = ap_continue;

assign do_adapt_8_U0_ap_start = start_for_do_adapt_8_U0_empty_n;

assign do_adapt_U0_ap_continue = 1'b1;

assign do_adapt_U0_ap_start = ((ap_sync_reg_do_adapt_U0_ap_ready ^ 1'b1) & ap_start);

assign matmul_step1_cache_weight_transposed_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_transposed_U0_ap_start = ((ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready ^ 1'b1) & ap_start);

assign matmul_step1_cache_window_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_U0_ap_start = start_for_matmul_step1_cache_window_U0_empty_n;

assign matmul_step2_mac_U0_ap_continue = 1'b1;

assign matmul_step2_mac_U0_ap_start = start_for_matmul_step2_mac_U0_empty_n;

assign rq_sm_head3_read = do_adapt_U0_rq_sm_head3_read;

assign start_for_do_adapt_8_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_U0_din = 1'b1;

assign start_for_matmul_step2_mac_U0_din = 1'b1;

assign vq_sm_transpose_head3_read = matmul_step1_cache_weight_transposed_U0_vq_sm_transpose_head3_read;

endmodule //ATTN11_do_matmul
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_1 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qq_sm_head3_dout,
        qq_sm_head3_empty_n,
        qq_sm_head3_read,
        kq_sm_reshape_head3_dout,
        kq_sm_reshape_head3_empty_n,
        kq_sm_reshape_head3_read,
        r_sm_head3_din,
        r_sm_head3_full_n,
        r_sm_head3_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] qq_sm_head3_dout;
input   qq_sm_head3_empty_n;
output   qq_sm_head3_read;
input  [83:0] kq_sm_reshape_head3_dout;
input   kq_sm_reshape_head3_empty_n;
output   kq_sm_reshape_head3_read;
output  [19:0] r_sm_head3_din;
input   r_sm_head3_full_n;
output   r_sm_head3_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_1_U0_ap_start;
wire    do_adapt_1_U0_ap_done;
wire    do_adapt_1_U0_ap_continue;
wire    do_adapt_1_U0_ap_idle;
wire    do_adapt_1_U0_ap_ready;
wire    do_adapt_1_U0_qq_sm_head3_read;
wire   [23:0] do_adapt_1_U0_adpt_sm_din;
wire    do_adapt_1_U0_adpt_sm_write;
wire    do_adapt_1_U0_start_out;
wire    do_adapt_1_U0_start_write;
wire    matmul_step1_cache_window_1_U0_ap_start;
wire    matmul_step1_cache_window_1_U0_ap_done;
wire    matmul_step1_cache_window_1_U0_ap_continue;
wire    matmul_step1_cache_window_1_U0_ap_idle;
wire    matmul_step1_cache_window_1_U0_ap_ready;
wire    matmul_step1_cache_window_1_U0_adpt_sm_read;
wire   [23:0] matmul_step1_cache_window_1_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_1_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_U0_ap_start;
wire    matmul_step1_cache_weight_U0_ap_done;
wire    matmul_step1_cache_weight_U0_ap_continue;
wire    matmul_step1_cache_weight_U0_ap_idle;
wire    matmul_step1_cache_weight_U0_ap_ready;
wire    matmul_step1_cache_weight_U0_start_out;
wire    matmul_step1_cache_weight_U0_start_write;
wire    matmul_step1_cache_weight_U0_kq_sm_reshape_head3_read;
wire   [83:0] matmul_step1_cache_weight_U0_weight_sm_din;
wire    matmul_step1_cache_weight_U0_weight_sm_write;
wire    matmul_step2_mac_1_U0_ap_start;
wire    matmul_step2_mac_1_U0_ap_done;
wire    matmul_step2_mac_1_U0_ap_continue;
wire    matmul_step2_mac_1_U0_ap_idle;
wire    matmul_step2_mac_1_U0_ap_ready;
wire    matmul_step2_mac_1_U0_cache_window_sm_read;
wire    matmul_step2_mac_1_U0_weight_sm_read;
wire   [139:0] matmul_step2_mac_1_U0_mac_sm_din;
wire    matmul_step2_mac_1_U0_mac_sm_write;
wire    matmul_step2_mac_1_U0_start_out;
wire    matmul_step2_mac_1_U0_start_write;
wire    do_adapt_9_U0_ap_start;
wire    do_adapt_9_U0_ap_done;
wire    do_adapt_9_U0_ap_continue;
wire    do_adapt_9_U0_ap_idle;
wire    do_adapt_9_U0_ap_ready;
wire    do_adapt_9_U0_mac_sm_read;
wire   [19:0] do_adapt_9_U0_r_sm_head3_din;
wire    do_adapt_9_U0_r_sm_head3_write;
wire    adpt_sm_full_n;
wire   [23:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [23:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [83:0] weight_sm_dout;
wire   [2:0] weight_sm_num_data_valid;
wire   [2:0] weight_sm_fifo_cap;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [139:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_1_U0_ap_ready;
wire    ap_sync_do_adapt_1_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_1_U0_din;
wire    start_for_matmul_step1_cache_window_1_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_1_U0_dout;
wire    start_for_matmul_step1_cache_window_1_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_1_U0_din;
wire    start_for_matmul_step2_mac_1_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_1_U0_dout;
wire    start_for_matmul_step2_mac_1_U0_empty_n;
wire   [0:0] start_for_do_adapt_9_U0_din;
wire    start_for_do_adapt_9_U0_full_n;
wire   [0:0] start_for_do_adapt_9_U0_dout;
wire    start_for_do_adapt_9_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt_1_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready = 1'b0;
end

ATTN11_do_adapt_1 do_adapt_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_1_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_1_U0_full_n),
    .ap_done(do_adapt_1_U0_ap_done),
    .ap_continue(do_adapt_1_U0_ap_continue),
    .ap_idle(do_adapt_1_U0_ap_idle),
    .ap_ready(do_adapt_1_U0_ap_ready),
    .qq_sm_head3_dout(qq_sm_head3_dout),
    .qq_sm_head3_num_data_valid(14'd0),
    .qq_sm_head3_fifo_cap(14'd0),
    .qq_sm_head3_empty_n(qq_sm_head3_empty_n),
    .qq_sm_head3_read(do_adapt_1_U0_qq_sm_head3_read),
    .adpt_sm_din(do_adapt_1_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_1_U0_adpt_sm_write),
    .start_out(do_adapt_1_U0_start_out),
    .start_write(do_adapt_1_U0_start_write)
);

ATTN11_matmul_step1_cache_window_1 matmul_step1_cache_window_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_1_U0_ap_start),
    .ap_done(matmul_step1_cache_window_1_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_1_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_1_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_1_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_1_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_1_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_1_U0_cache_window_sm_write)
);

ATTN11_matmul_step1_cache_weight matmul_step1_cache_weight_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_1_U0_full_n),
    .ap_done(matmul_step1_cache_weight_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_U0_start_out),
    .start_write(matmul_step1_cache_weight_U0_start_write),
    .kq_sm_reshape_head3_dout(kq_sm_reshape_head3_dout),
    .kq_sm_reshape_head3_num_data_valid(10'd0),
    .kq_sm_reshape_head3_fifo_cap(10'd0),
    .kq_sm_reshape_head3_empty_n(kq_sm_reshape_head3_empty_n),
    .kq_sm_reshape_head3_read(matmul_step1_cache_weight_U0_kq_sm_reshape_head3_read),
    .weight_sm_din(matmul_step1_cache_weight_U0_weight_sm_din),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_U0_weight_sm_write)
);

ATTN11_matmul_step2_mac_1 matmul_step2_mac_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_1_U0_ap_start),
    .start_full_n(start_for_do_adapt_9_U0_full_n),
    .ap_done(matmul_step2_mac_1_U0_ap_done),
    .ap_continue(matmul_step2_mac_1_U0_ap_continue),
    .ap_idle(matmul_step2_mac_1_U0_ap_idle),
    .ap_ready(matmul_step2_mac_1_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_1_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_1_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_1_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_1_U0_mac_sm_write),
    .start_out(matmul_step2_mac_1_U0_start_out),
    .start_write(matmul_step2_mac_1_U0_start_write)
);

ATTN11_do_adapt_9 do_adapt_9_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_9_U0_ap_start),
    .ap_done(do_adapt_9_U0_ap_done),
    .ap_continue(do_adapt_9_U0_ap_continue),
    .ap_idle(do_adapt_9_U0_ap_idle),
    .ap_ready(do_adapt_9_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_9_U0_mac_sm_read),
    .r_sm_head3_din(do_adapt_9_U0_r_sm_head3_din),
    .r_sm_head3_num_data_valid(10'd0),
    .r_sm_head3_fifo_cap(10'd0),
    .r_sm_head3_full_n(r_sm_head3_full_n),
    .r_sm_head3_write(do_adapt_9_U0_r_sm_head3_write)
);

ATTN11_fifo_w24_d32_S_x0 adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_1_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_1_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_1_U0_adpt_sm_read)
);

ATTN11_fifo_w24_d2_S_x0 cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_1_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_1_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_1_U0_cache_window_sm_read)
);

ATTN11_fifo_w84_d2_S_x0 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_num_data_valid(weight_sm_num_data_valid),
    .if_fifo_cap(weight_sm_fifo_cap),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_1_U0_weight_sm_read)
);

ATTN11_fifo_w140_d2_S_x0 mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_1_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_1_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_9_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_1_U0 start_for_matmul_step1_cache_window_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_1_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_1_U0_full_n),
    .if_write(do_adapt_1_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_1_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_1_U0_empty_n),
    .if_read(matmul_step1_cache_window_1_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_1_U0 start_for_matmul_step2_mac_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_1_U0_din),
    .if_full_n(start_for_matmul_step2_mac_1_U0_full_n),
    .if_write(matmul_step1_cache_weight_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_1_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_1_U0_empty_n),
    .if_read(matmul_step2_mac_1_U0_ap_ready)
);

ATTN11_start_for_do_adapt_9_U0 start_for_do_adapt_9_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_9_U0_din),
    .if_full_n(start_for_do_adapt_9_U0_full_n),
    .if_write(matmul_step2_mac_1_U0_start_write),
    .if_dout(start_for_do_adapt_9_U0_dout),
    .if_empty_n(start_for_do_adapt_9_U0_empty_n),
    .if_read(do_adapt_9_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_1_U0_ap_ready <= ap_sync_do_adapt_1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_9_U0_ap_done;

assign ap_idle = (matmul_step2_mac_1_U0_ap_idle & matmul_step1_cache_window_1_U0_ap_idle & matmul_step1_cache_weight_U0_ap_idle & do_adapt_9_U0_ap_idle & do_adapt_1_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_do_adapt_1_U0_ap_ready = (do_adapt_1_U0_ap_ready | ap_sync_reg_do_adapt_1_U0_ap_ready);

assign ap_sync_matmul_step1_cache_weight_U0_ap_ready = (matmul_step1_cache_weight_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_U0_ap_ready & ap_sync_do_adapt_1_U0_ap_ready);

assign do_adapt_1_U0_ap_continue = 1'b1;

assign do_adapt_1_U0_ap_start = (real_start & (ap_sync_reg_do_adapt_1_U0_ap_ready ^ 1'b1));

assign do_adapt_9_U0_ap_continue = ap_continue;

assign do_adapt_9_U0_ap_start = start_for_do_adapt_9_U0_empty_n;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_reshape_head3_read = matmul_step1_cache_weight_U0_kq_sm_reshape_head3_read;

assign matmul_step1_cache_weight_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window_1_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_1_U0_ap_start = start_for_matmul_step1_cache_window_1_U0_empty_n;

assign matmul_step2_mac_1_U0_ap_continue = 1'b1;

assign matmul_step2_mac_1_U0_ap_start = start_for_matmul_step2_mac_1_U0_empty_n;

assign qq_sm_head3_read = do_adapt_1_U0_qq_sm_head3_read;

assign r_sm_head3_din = do_adapt_9_U0_r_sm_head3_din;

assign r_sm_head3_write = do_adapt_9_U0_r_sm_head3_write;

assign start_for_do_adapt_9_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_1_U0_din = 1'b1;

assign start_for_matmul_step2_mac_1_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN11_do_matmul_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_14 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        rq_sm_head1_dout,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        a_sm_head1_din,
        a_sm_head1_full_n,
        a_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] rq_sm_head1_dout;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
input  [83:0] vq_sm_transpose_head1_dout;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [19:0] a_sm_head1_din;
input   a_sm_head1_full_n;
output   a_sm_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_16_U0_ap_start;
wire    do_adapt_16_U0_ap_done;
wire    do_adapt_16_U0_ap_continue;
wire    do_adapt_16_U0_ap_idle;
wire    do_adapt_16_U0_ap_ready;
wire    do_adapt_16_U0_rq_sm_head1_read;
wire   [41:0] do_adapt_16_U0_adpt_sm_din;
wire    do_adapt_16_U0_adpt_sm_write;
wire    do_adapt_16_U0_start_out;
wire    do_adapt_16_U0_start_write;
wire    matmul_step1_cache_window_17_U0_ap_start;
wire    matmul_step1_cache_window_17_U0_ap_done;
wire    matmul_step1_cache_window_17_U0_ap_continue;
wire    matmul_step1_cache_window_17_U0_ap_idle;
wire    matmul_step1_cache_window_17_U0_ap_ready;
wire    matmul_step1_cache_window_17_U0_adpt_sm_read;
wire   [41:0] matmul_step1_cache_window_17_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_17_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_transposed_18_U0_ap_start;
wire    matmul_step1_cache_weight_transposed_18_U0_ap_done;
wire    matmul_step1_cache_weight_transposed_18_U0_ap_continue;
wire    matmul_step1_cache_weight_transposed_18_U0_ap_idle;
wire    matmul_step1_cache_weight_transposed_18_U0_ap_ready;
wire    matmul_step1_cache_weight_transposed_18_U0_start_out;
wire    matmul_step1_cache_weight_transposed_18_U0_start_write;
wire    matmul_step1_cache_weight_transposed_18_U0_vq_sm_transpose_head1_read;
wire   [83:0] matmul_step1_cache_weight_transposed_18_U0_weight_sm_din;
wire    matmul_step1_cache_weight_transposed_18_U0_weight_sm_write;
wire    matmul_step2_mac_19_U0_ap_start;
wire    matmul_step2_mac_19_U0_ap_done;
wire    matmul_step2_mac_19_U0_ap_continue;
wire    matmul_step2_mac_19_U0_ap_idle;
wire    matmul_step2_mac_19_U0_ap_ready;
wire    matmul_step2_mac_19_U0_cache_window_sm_read;
wire    matmul_step2_mac_19_U0_weight_sm_read;
wire   [79:0] matmul_step2_mac_19_U0_mac_sm_din;
wire    matmul_step2_mac_19_U0_mac_sm_write;
wire    matmul_step2_mac_19_U0_start_out;
wire    matmul_step2_mac_19_U0_start_write;
wire    do_adapt_20_U0_ap_start;
wire    do_adapt_20_U0_ap_done;
wire    do_adapt_20_U0_ap_continue;
wire    do_adapt_20_U0_ap_idle;
wire    do_adapt_20_U0_ap_ready;
wire    do_adapt_20_U0_mac_sm_read;
wire   [19:0] do_adapt_20_U0_a_sm_head1_din;
wire    do_adapt_20_U0_a_sm_head1_write;
wire    adpt_sm_full_n;
wire   [41:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [41:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [83:0] weight_sm_dout;
wire   [2:0] weight_sm_num_data_valid;
wire   [2:0] weight_sm_fifo_cap;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [79:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_16_U0_ap_ready;
wire    ap_sync_do_adapt_16_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_transposed_18_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_transposed_18_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_17_U0_din;
wire    start_for_matmul_step1_cache_window_17_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_17_U0_dout;
wire    start_for_matmul_step1_cache_window_17_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_19_U0_din;
wire    start_for_matmul_step2_mac_19_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_19_U0_dout;
wire    start_for_matmul_step2_mac_19_U0_empty_n;
wire   [0:0] start_for_do_adapt_20_U0_din;
wire    start_for_do_adapt_20_U0_full_n;
wire   [0:0] start_for_do_adapt_20_U0_dout;
wire    start_for_do_adapt_20_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt_16_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_transposed_18_U0_ap_ready = 1'b0;
end

ATTN11_do_adapt_16 do_adapt_16_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_16_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_17_U0_full_n),
    .ap_done(do_adapt_16_U0_ap_done),
    .ap_continue(do_adapt_16_U0_ap_continue),
    .ap_idle(do_adapt_16_U0_ap_idle),
    .ap_ready(do_adapt_16_U0_ap_ready),
    .rq_sm_head1_dout(rq_sm_head1_dout),
    .rq_sm_head1_num_data_valid(10'd0),
    .rq_sm_head1_fifo_cap(10'd0),
    .rq_sm_head1_empty_n(rq_sm_head1_empty_n),
    .rq_sm_head1_read(do_adapt_16_U0_rq_sm_head1_read),
    .adpt_sm_din(do_adapt_16_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_16_U0_adpt_sm_write),
    .start_out(do_adapt_16_U0_start_out),
    .start_write(do_adapt_16_U0_start_write)
);

ATTN11_matmul_step1_cache_window_17 matmul_step1_cache_window_17_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_17_U0_ap_start),
    .ap_done(matmul_step1_cache_window_17_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_17_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_17_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_17_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_17_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_17_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_17_U0_cache_window_sm_write)
);

ATTN11_matmul_step1_cache_weight_transposed_18 matmul_step1_cache_weight_transposed_18_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_transposed_18_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_19_U0_full_n),
    .ap_done(matmul_step1_cache_weight_transposed_18_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_transposed_18_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_transposed_18_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_transposed_18_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_transposed_18_U0_start_out),
    .start_write(matmul_step1_cache_weight_transposed_18_U0_start_write),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head1_dout),
    .vq_sm_transpose_head1_num_data_valid(10'd0),
    .vq_sm_transpose_head1_fifo_cap(10'd0),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head1_empty_n),
    .vq_sm_transpose_head1_read(matmul_step1_cache_weight_transposed_18_U0_vq_sm_transpose_head1_read),
    .weight_sm_din(matmul_step1_cache_weight_transposed_18_U0_weight_sm_din),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_transposed_18_U0_weight_sm_write)
);

ATTN11_matmul_step2_mac_19 matmul_step2_mac_19_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_19_U0_ap_start),
    .start_full_n(start_for_do_adapt_20_U0_full_n),
    .ap_done(matmul_step2_mac_19_U0_ap_done),
    .ap_continue(matmul_step2_mac_19_U0_ap_continue),
    .ap_idle(matmul_step2_mac_19_U0_ap_idle),
    .ap_ready(matmul_step2_mac_19_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_19_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_19_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_19_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_19_U0_mac_sm_write),
    .start_out(matmul_step2_mac_19_U0_start_out),
    .start_write(matmul_step2_mac_19_U0_start_write)
);

ATTN11_do_adapt_20 do_adapt_20_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_20_U0_ap_start),
    .ap_done(do_adapt_20_U0_ap_done),
    .ap_continue(do_adapt_20_U0_ap_continue),
    .ap_idle(do_adapt_20_U0_ap_idle),
    .ap_ready(do_adapt_20_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_20_U0_mac_sm_read),
    .a_sm_head1_din(do_adapt_20_U0_a_sm_head1_din),
    .a_sm_head1_num_data_valid(7'd0),
    .a_sm_head1_fifo_cap(7'd0),
    .a_sm_head1_full_n(a_sm_head1_full_n),
    .a_sm_head1_write(do_adapt_20_U0_a_sm_head1_write)
);

ATTN11_fifo_w42_d32_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_16_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_16_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_17_U0_adpt_sm_read)
);

ATTN11_fifo_w42_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_17_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_17_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_19_U0_cache_window_sm_read)
);

ATTN11_fifo_w84_d2_S_x1 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_transposed_18_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_transposed_18_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_num_data_valid(weight_sm_num_data_valid),
    .if_fifo_cap(weight_sm_fifo_cap),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_19_U0_weight_sm_read)
);

ATTN11_fifo_w80_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_19_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_19_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_20_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_17_U0 start_for_matmul_step1_cache_window_17_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_17_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_17_U0_full_n),
    .if_write(do_adapt_16_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_17_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_17_U0_empty_n),
    .if_read(matmul_step1_cache_window_17_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_19_U0 start_for_matmul_step2_mac_19_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_19_U0_din),
    .if_full_n(start_for_matmul_step2_mac_19_U0_full_n),
    .if_write(matmul_step1_cache_weight_transposed_18_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_19_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_19_U0_empty_n),
    .if_read(matmul_step2_mac_19_U0_ap_ready)
);

ATTN11_start_for_do_adapt_20_U0 start_for_do_adapt_20_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_20_U0_din),
    .if_full_n(start_for_do_adapt_20_U0_full_n),
    .if_write(matmul_step2_mac_19_U0_start_write),
    .if_dout(start_for_do_adapt_20_U0_dout),
    .if_empty_n(start_for_do_adapt_20_U0_empty_n),
    .if_read(do_adapt_20_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_16_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt_16_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_16_U0_ap_ready <= ap_sync_do_adapt_16_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_transposed_18_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_18_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_18_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_transposed_18_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign a_sm_head1_din = do_adapt_20_U0_a_sm_head1_din;

assign a_sm_head1_write = do_adapt_20_U0_a_sm_head1_write;

assign ap_done = do_adapt_20_U0_ap_done;

assign ap_idle = (matmul_step2_mac_19_U0_ap_idle & matmul_step1_cache_window_17_U0_ap_idle & matmul_step1_cache_weight_transposed_18_U0_ap_idle & do_adapt_20_U0_ap_idle & do_adapt_16_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_do_adapt_16_U0_ap_ready = (do_adapt_16_U0_ap_ready | ap_sync_reg_do_adapt_16_U0_ap_ready);

assign ap_sync_matmul_step1_cache_weight_transposed_18_U0_ap_ready = (matmul_step1_cache_weight_transposed_18_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_transposed_18_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_transposed_18_U0_ap_ready & ap_sync_do_adapt_16_U0_ap_ready);

assign do_adapt_16_U0_ap_continue = 1'b1;

assign do_adapt_16_U0_ap_start = (real_start & (ap_sync_reg_do_adapt_16_U0_ap_ready ^ 1'b1));

assign do_adapt_20_U0_ap_continue = ap_continue;

assign do_adapt_20_U0_ap_start = start_for_do_adapt_20_U0_empty_n;

assign internal_ap_ready = ap_sync_ready;

assign matmul_step1_cache_weight_transposed_18_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_transposed_18_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight_transposed_18_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window_17_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_17_U0_ap_start = start_for_matmul_step1_cache_window_17_U0_empty_n;

assign matmul_step2_mac_19_U0_ap_continue = 1'b1;

assign matmul_step2_mac_19_U0_ap_start = start_for_matmul_step2_mac_19_U0_empty_n;

assign rq_sm_head1_read = do_adapt_16_U0_rq_sm_head1_read;

assign start_for_do_adapt_20_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_17_U0_din = 1'b1;

assign start_for_matmul_step2_mac_19_U0_din = 1'b1;

assign start_out = real_start;

assign vq_sm_transpose_head1_read = matmul_step1_cache_weight_transposed_18_U0_vq_sm_transpose_head1_read;

endmodule //ATTN11_do_matmul_14
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_15 (
        rq_sm_head2_dout,
        rq_sm_head2_empty_n,
        rq_sm_head2_read,
        vq_sm_transpose_head2_dout,
        vq_sm_transpose_head2_empty_n,
        vq_sm_transpose_head2_read,
        a_sm_head2_din,
        a_sm_head2_full_n,
        a_sm_head2_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [5:0] rq_sm_head2_dout;
input   rq_sm_head2_empty_n;
output   rq_sm_head2_read;
input  [83:0] vq_sm_transpose_head2_dout;
input   vq_sm_transpose_head2_empty_n;
output   vq_sm_transpose_head2_read;
output  [19:0] a_sm_head2_din;
input   a_sm_head2_full_n;
output   a_sm_head2_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_21_U0_ap_start;
wire    do_adapt_21_U0_ap_done;
wire    do_adapt_21_U0_ap_continue;
wire    do_adapt_21_U0_ap_idle;
wire    do_adapt_21_U0_ap_ready;
wire    do_adapt_21_U0_rq_sm_head2_read;
wire   [41:0] do_adapt_21_U0_adpt_sm_din;
wire    do_adapt_21_U0_adpt_sm_write;
wire    do_adapt_21_U0_start_out;
wire    do_adapt_21_U0_start_write;
wire    matmul_step1_cache_window_22_U0_ap_start;
wire    matmul_step1_cache_window_22_U0_ap_done;
wire    matmul_step1_cache_window_22_U0_ap_continue;
wire    matmul_step1_cache_window_22_U0_ap_idle;
wire    matmul_step1_cache_window_22_U0_ap_ready;
wire    matmul_step1_cache_window_22_U0_adpt_sm_read;
wire   [41:0] matmul_step1_cache_window_22_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_22_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_transposed_23_U0_ap_start;
wire    matmul_step1_cache_weight_transposed_23_U0_ap_done;
wire    matmul_step1_cache_weight_transposed_23_U0_ap_continue;
wire    matmul_step1_cache_weight_transposed_23_U0_ap_idle;
wire    matmul_step1_cache_weight_transposed_23_U0_ap_ready;
wire    matmul_step1_cache_weight_transposed_23_U0_start_out;
wire    matmul_step1_cache_weight_transposed_23_U0_start_write;
wire    matmul_step1_cache_weight_transposed_23_U0_vq_sm_transpose_head2_read;
wire   [83:0] matmul_step1_cache_weight_transposed_23_U0_weight_sm_din;
wire    matmul_step1_cache_weight_transposed_23_U0_weight_sm_write;
wire    matmul_step2_mac_24_U0_ap_start;
wire    matmul_step2_mac_24_U0_ap_done;
wire    matmul_step2_mac_24_U0_ap_continue;
wire    matmul_step2_mac_24_U0_ap_idle;
wire    matmul_step2_mac_24_U0_ap_ready;
wire    matmul_step2_mac_24_U0_cache_window_sm_read;
wire    matmul_step2_mac_24_U0_weight_sm_read;
wire   [79:0] matmul_step2_mac_24_U0_mac_sm_din;
wire    matmul_step2_mac_24_U0_mac_sm_write;
wire    matmul_step2_mac_24_U0_start_out;
wire    matmul_step2_mac_24_U0_start_write;
wire    do_adapt_25_U0_ap_start;
wire    do_adapt_25_U0_ap_done;
wire    do_adapt_25_U0_ap_continue;
wire    do_adapt_25_U0_ap_idle;
wire    do_adapt_25_U0_ap_ready;
wire    do_adapt_25_U0_mac_sm_read;
wire   [19:0] do_adapt_25_U0_a_sm_head2_din;
wire    do_adapt_25_U0_a_sm_head2_write;
wire    adpt_sm_full_n;
wire   [41:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [41:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [83:0] weight_sm_dout;
wire   [2:0] weight_sm_num_data_valid;
wire   [2:0] weight_sm_fifo_cap;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [79:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_21_U0_ap_ready;
wire    ap_sync_do_adapt_21_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_transposed_23_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_transposed_23_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_22_U0_din;
wire    start_for_matmul_step1_cache_window_22_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_22_U0_dout;
wire    start_for_matmul_step1_cache_window_22_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_24_U0_din;
wire    start_for_matmul_step2_mac_24_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_24_U0_dout;
wire    start_for_matmul_step2_mac_24_U0_empty_n;
wire   [0:0] start_for_do_adapt_25_U0_din;
wire    start_for_do_adapt_25_U0_full_n;
wire   [0:0] start_for_do_adapt_25_U0_dout;
wire    start_for_do_adapt_25_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_do_adapt_21_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_transposed_23_U0_ap_ready = 1'b0;
end

ATTN11_do_adapt_21 do_adapt_21_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_21_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_22_U0_full_n),
    .ap_done(do_adapt_21_U0_ap_done),
    .ap_continue(do_adapt_21_U0_ap_continue),
    .ap_idle(do_adapt_21_U0_ap_idle),
    .ap_ready(do_adapt_21_U0_ap_ready),
    .rq_sm_head2_dout(rq_sm_head2_dout),
    .rq_sm_head2_num_data_valid(10'd0),
    .rq_sm_head2_fifo_cap(10'd0),
    .rq_sm_head2_empty_n(rq_sm_head2_empty_n),
    .rq_sm_head2_read(do_adapt_21_U0_rq_sm_head2_read),
    .adpt_sm_din(do_adapt_21_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_21_U0_adpt_sm_write),
    .start_out(do_adapt_21_U0_start_out),
    .start_write(do_adapt_21_U0_start_write)
);

ATTN11_matmul_step1_cache_window_22 matmul_step1_cache_window_22_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_22_U0_ap_start),
    .ap_done(matmul_step1_cache_window_22_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_22_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_22_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_22_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_22_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_22_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_22_U0_cache_window_sm_write)
);

ATTN11_matmul_step1_cache_weight_transposed_23 matmul_step1_cache_weight_transposed_23_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_transposed_23_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_24_U0_full_n),
    .ap_done(matmul_step1_cache_weight_transposed_23_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_transposed_23_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_transposed_23_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_transposed_23_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_transposed_23_U0_start_out),
    .start_write(matmul_step1_cache_weight_transposed_23_U0_start_write),
    .vq_sm_transpose_head2_dout(vq_sm_transpose_head2_dout),
    .vq_sm_transpose_head2_num_data_valid(10'd0),
    .vq_sm_transpose_head2_fifo_cap(10'd0),
    .vq_sm_transpose_head2_empty_n(vq_sm_transpose_head2_empty_n),
    .vq_sm_transpose_head2_read(matmul_step1_cache_weight_transposed_23_U0_vq_sm_transpose_head2_read),
    .weight_sm_din(matmul_step1_cache_weight_transposed_23_U0_weight_sm_din),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_transposed_23_U0_weight_sm_write)
);

ATTN11_matmul_step2_mac_24 matmul_step2_mac_24_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_24_U0_ap_start),
    .start_full_n(start_for_do_adapt_25_U0_full_n),
    .ap_done(matmul_step2_mac_24_U0_ap_done),
    .ap_continue(matmul_step2_mac_24_U0_ap_continue),
    .ap_idle(matmul_step2_mac_24_U0_ap_idle),
    .ap_ready(matmul_step2_mac_24_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_24_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_24_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_24_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_24_U0_mac_sm_write),
    .start_out(matmul_step2_mac_24_U0_start_out),
    .start_write(matmul_step2_mac_24_U0_start_write)
);

ATTN11_do_adapt_25 do_adapt_25_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_25_U0_ap_start),
    .ap_done(do_adapt_25_U0_ap_done),
    .ap_continue(do_adapt_25_U0_ap_continue),
    .ap_idle(do_adapt_25_U0_ap_idle),
    .ap_ready(do_adapt_25_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_25_U0_mac_sm_read),
    .a_sm_head2_din(do_adapt_25_U0_a_sm_head2_din),
    .a_sm_head2_num_data_valid(7'd0),
    .a_sm_head2_fifo_cap(7'd0),
    .a_sm_head2_full_n(a_sm_head2_full_n),
    .a_sm_head2_write(do_adapt_25_U0_a_sm_head2_write)
);

ATTN11_fifo_w42_d32_A_x adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_21_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_21_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_22_U0_adpt_sm_read)
);

ATTN11_fifo_w42_d2_S_x cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_22_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_22_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_24_U0_cache_window_sm_read)
);

ATTN11_fifo_w84_d2_S_x2 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_transposed_23_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_transposed_23_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_num_data_valid(weight_sm_num_data_valid),
    .if_fifo_cap(weight_sm_fifo_cap),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_24_U0_weight_sm_read)
);

ATTN11_fifo_w80_d2_S_x mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_24_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_24_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_25_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_22_U0 start_for_matmul_step1_cache_window_22_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_22_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_22_U0_full_n),
    .if_write(do_adapt_21_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_22_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_22_U0_empty_n),
    .if_read(matmul_step1_cache_window_22_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_24_U0 start_for_matmul_step2_mac_24_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_24_U0_din),
    .if_full_n(start_for_matmul_step2_mac_24_U0_full_n),
    .if_write(matmul_step1_cache_weight_transposed_23_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_24_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_24_U0_empty_n),
    .if_read(matmul_step2_mac_24_U0_ap_ready)
);

ATTN11_start_for_do_adapt_25_U0 start_for_do_adapt_25_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_25_U0_din),
    .if_full_n(start_for_do_adapt_25_U0_full_n),
    .if_write(matmul_step2_mac_24_U0_start_write),
    .if_dout(start_for_do_adapt_25_U0_dout),
    .if_empty_n(start_for_do_adapt_25_U0_empty_n),
    .if_read(do_adapt_25_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_21_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_do_adapt_21_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_21_U0_ap_ready <= ap_sync_do_adapt_21_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_transposed_23_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_23_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_23_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_transposed_23_U0_ap_ready;
        end
    end
end

assign a_sm_head2_din = do_adapt_25_U0_a_sm_head2_din;

assign a_sm_head2_write = do_adapt_25_U0_a_sm_head2_write;

assign ap_done = do_adapt_25_U0_ap_done;

assign ap_idle = (matmul_step2_mac_24_U0_ap_idle & matmul_step1_cache_window_22_U0_ap_idle & matmul_step1_cache_weight_transposed_23_U0_ap_idle & do_adapt_25_U0_ap_idle & do_adapt_21_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_do_adapt_21_U0_ap_ready = (do_adapt_21_U0_ap_ready | ap_sync_reg_do_adapt_21_U0_ap_ready);

assign ap_sync_matmul_step1_cache_weight_transposed_23_U0_ap_ready = (matmul_step1_cache_weight_transposed_23_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_transposed_23_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_transposed_23_U0_ap_ready & ap_sync_do_adapt_21_U0_ap_ready);

assign do_adapt_21_U0_ap_continue = 1'b1;

assign do_adapt_21_U0_ap_start = ((ap_sync_reg_do_adapt_21_U0_ap_ready ^ 1'b1) & ap_start);

assign do_adapt_25_U0_ap_continue = ap_continue;

assign do_adapt_25_U0_ap_start = start_for_do_adapt_25_U0_empty_n;

assign matmul_step1_cache_weight_transposed_23_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_transposed_23_U0_ap_start = ((ap_sync_reg_matmul_step1_cache_weight_transposed_23_U0_ap_ready ^ 1'b1) & ap_start);

assign matmul_step1_cache_window_22_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_22_U0_ap_start = start_for_matmul_step1_cache_window_22_U0_empty_n;

assign matmul_step2_mac_24_U0_ap_continue = 1'b1;

assign matmul_step2_mac_24_U0_ap_start = start_for_matmul_step2_mac_24_U0_empty_n;

assign rq_sm_head2_read = do_adapt_21_U0_rq_sm_head2_read;

assign start_for_do_adapt_25_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_22_U0_din = 1'b1;

assign start_for_matmul_step2_mac_24_U0_din = 1'b1;

assign vq_sm_transpose_head2_read = matmul_step1_cache_weight_transposed_23_U0_vq_sm_transpose_head2_read;

endmodule //ATTN11_do_matmul_15
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_1_1 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        lnq_sm_cp2_dout,
        lnq_sm_cp2_empty_n,
        lnq_sm_cp2_read,
        k_sm_din,
        k_sm_full_n,
        k_sm_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] lnq_sm_cp2_dout;
input   lnq_sm_cp2_empty_n;
output   lnq_sm_cp2_read;
output  [19:0] k_sm_din;
input   k_sm_full_n;
output   k_sm_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_46_U0_ap_start;
wire    do_adapt_46_U0_ap_done;
wire    do_adapt_46_U0_ap_continue;
wire    do_adapt_46_U0_ap_idle;
wire    do_adapt_46_U0_ap_ready;
wire    do_adapt_46_U0_lnq_sm_cp2_read;
wire   [35:0] do_adapt_46_U0_adpt_sm_din;
wire    do_adapt_46_U0_adpt_sm_write;
wire    do_adapt_46_U0_start_out;
wire    do_adapt_46_U0_start_write;
wire    matmul_step1_cache_window_47_U0_ap_start;
wire    matmul_step1_cache_window_47_U0_ap_done;
wire    matmul_step1_cache_window_47_U0_ap_continue;
wire    matmul_step1_cache_window_47_U0_ap_idle;
wire    matmul_step1_cache_window_47_U0_ap_ready;
wire    matmul_step1_cache_window_47_U0_adpt_sm_read;
wire   [35:0] matmul_step1_cache_window_47_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_47_U0_cache_window_sm_write;
wire    matmul_step1_cache_window_47_U0_start_out;
wire    matmul_step1_cache_window_47_U0_start_write;
wire    matmul_step2_mac_48_U0_ap_start;
wire    matmul_step2_mac_48_U0_ap_done;
wire    matmul_step2_mac_48_U0_ap_continue;
wire    matmul_step2_mac_48_U0_ap_idle;
wire    matmul_step2_mac_48_U0_ap_ready;
wire    matmul_step2_mac_48_U0_cache_window_sm_read;
wire   [239:0] matmul_step2_mac_48_U0_mac_sm_din;
wire    matmul_step2_mac_48_U0_mac_sm_write;
wire    matmul_step2_mac_48_U0_start_out;
wire    matmul_step2_mac_48_U0_start_write;
wire    do_adapt_49_U0_ap_start;
wire    do_adapt_49_U0_ap_done;
wire    do_adapt_49_U0_ap_continue;
wire    do_adapt_49_U0_ap_idle;
wire    do_adapt_49_U0_ap_ready;
wire    do_adapt_49_U0_mac_sm_read;
wire   [19:0] do_adapt_49_U0_k_sm_din;
wire    do_adapt_49_U0_k_sm_write;
wire    adpt_sm_full_n;
wire   [35:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [35:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [239:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window_47_U0_din;
wire    start_for_matmul_step1_cache_window_47_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_47_U0_dout;
wire    start_for_matmul_step1_cache_window_47_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_48_U0_din;
wire    start_for_matmul_step2_mac_48_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_48_U0_dout;
wire    start_for_matmul_step2_mac_48_U0_empty_n;
wire   [0:0] start_for_do_adapt_49_U0_din;
wire    start_for_do_adapt_49_U0_full_n;
wire   [0:0] start_for_do_adapt_49_U0_dout;
wire    start_for_do_adapt_49_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN11_do_adapt_46 do_adapt_46_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_46_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_47_U0_full_n),
    .ap_done(do_adapt_46_U0_ap_done),
    .ap_continue(do_adapt_46_U0_ap_continue),
    .ap_idle(do_adapt_46_U0_ap_idle),
    .ap_ready(do_adapt_46_U0_ap_ready),
    .lnq_sm_cp2_dout(lnq_sm_cp2_dout),
    .lnq_sm_cp2_num_data_valid(3'd0),
    .lnq_sm_cp2_fifo_cap(3'd0),
    .lnq_sm_cp2_empty_n(lnq_sm_cp2_empty_n),
    .lnq_sm_cp2_read(do_adapt_46_U0_lnq_sm_cp2_read),
    .adpt_sm_din(do_adapt_46_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_46_U0_adpt_sm_write),
    .start_out(do_adapt_46_U0_start_out),
    .start_write(do_adapt_46_U0_start_write)
);

ATTN11_matmul_step1_cache_window_47 matmul_step1_cache_window_47_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_47_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_48_U0_full_n),
    .ap_done(matmul_step1_cache_window_47_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_47_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_47_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_47_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_47_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_47_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_47_U0_cache_window_sm_write),
    .start_out(matmul_step1_cache_window_47_U0_start_out),
    .start_write(matmul_step1_cache_window_47_U0_start_write)
);

ATTN11_matmul_step2_mac_48 matmul_step2_mac_48_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_48_U0_ap_start),
    .start_full_n(start_for_do_adapt_49_U0_full_n),
    .ap_done(matmul_step2_mac_48_U0_ap_done),
    .ap_continue(matmul_step2_mac_48_U0_ap_continue),
    .ap_idle(matmul_step2_mac_48_U0_ap_idle),
    .ap_ready(matmul_step2_mac_48_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_48_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac_48_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_48_U0_mac_sm_write),
    .start_out(matmul_step2_mac_48_U0_start_out),
    .start_write(matmul_step2_mac_48_U0_start_write)
);

ATTN11_do_adapt_49 do_adapt_49_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_49_U0_ap_start),
    .ap_done(do_adapt_49_U0_ap_done),
    .ap_continue(do_adapt_49_U0_ap_continue),
    .ap_idle(do_adapt_49_U0_ap_idle),
    .ap_ready(do_adapt_49_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_49_U0_mac_sm_read),
    .k_sm_din(do_adapt_49_U0_k_sm_din),
    .k_sm_num_data_valid(3'd0),
    .k_sm_fifo_cap(3'd0),
    .k_sm_full_n(k_sm_full_n),
    .k_sm_write(do_adapt_49_U0_k_sm_write)
);

ATTN11_fifo_w36_d32_A_x adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_46_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_46_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_47_U0_adpt_sm_read)
);

ATTN11_fifo_w36_d2_S_x cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_47_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_47_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_48_U0_cache_window_sm_read)
);

ATTN11_fifo_w240_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_48_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_48_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_49_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_47_U0 start_for_matmul_step1_cache_window_47_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_47_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_47_U0_full_n),
    .if_write(do_adapt_46_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_47_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_47_U0_empty_n),
    .if_read(matmul_step1_cache_window_47_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_48_U0 start_for_matmul_step2_mac_48_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_48_U0_din),
    .if_full_n(start_for_matmul_step2_mac_48_U0_full_n),
    .if_write(matmul_step1_cache_window_47_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_48_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_48_U0_empty_n),
    .if_read(matmul_step2_mac_48_U0_ap_ready)
);

ATTN11_start_for_do_adapt_49_U0 start_for_do_adapt_49_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_49_U0_din),
    .if_full_n(start_for_do_adapt_49_U0_full_n),
    .if_write(matmul_step2_mac_48_U0_start_write),
    .if_dout(start_for_do_adapt_49_U0_dout),
    .if_empty_n(start_for_do_adapt_49_U0_empty_n),
    .if_read(do_adapt_49_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_49_U0_ap_done;

assign ap_idle = (matmul_step2_mac_48_U0_ap_idle & matmul_step1_cache_window_47_U0_ap_idle & do_adapt_49_U0_ap_idle & do_adapt_46_U0_ap_idle);

assign ap_ready = do_adapt_46_U0_ap_ready;

assign ap_sync_ready = do_adapt_46_U0_ap_ready;

assign do_adapt_46_U0_ap_continue = 1'b1;

assign do_adapt_46_U0_ap_start = real_start;

assign do_adapt_49_U0_ap_continue = ap_continue;

assign do_adapt_49_U0_ap_start = start_for_do_adapt_49_U0_empty_n;

assign internal_ap_ready = ap_sync_ready;

assign k_sm_din = do_adapt_49_U0_k_sm_din;

assign k_sm_write = do_adapt_49_U0_k_sm_write;

assign lnq_sm_cp2_read = do_adapt_46_U0_lnq_sm_cp2_read;

assign matmul_step1_cache_window_47_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_47_U0_ap_start = start_for_matmul_step1_cache_window_47_U0_empty_n;

assign matmul_step2_mac_48_U0_ap_continue = 1'b1;

assign matmul_step2_mac_48_U0_ap_start = start_for_matmul_step2_mac_48_U0_empty_n;

assign start_for_do_adapt_49_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_47_U0_din = 1'b1;

assign start_for_matmul_step2_mac_48_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN11_do_matmul_1_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_2 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        q_sm_din,
        q_sm_full_n,
        q_sm_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] lnq_sm_cp1_dout;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [23:0] q_sm_din;
input   q_sm_full_n;
output   q_sm_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_2_U0_ap_start;
wire    do_adapt_2_U0_ap_done;
wire    do_adapt_2_U0_ap_continue;
wire    do_adapt_2_U0_ap_idle;
wire    do_adapt_2_U0_ap_ready;
wire    do_adapt_2_U0_lnq_sm_cp1_read;
wire   [35:0] do_adapt_2_U0_adpt_sm_din;
wire    do_adapt_2_U0_adpt_sm_write;
wire    do_adapt_2_U0_start_out;
wire    do_adapt_2_U0_start_write;
wire    matmul_step1_cache_window_2_U0_ap_start;
wire    matmul_step1_cache_window_2_U0_ap_done;
wire    matmul_step1_cache_window_2_U0_ap_continue;
wire    matmul_step1_cache_window_2_U0_ap_idle;
wire    matmul_step1_cache_window_2_U0_ap_ready;
wire    matmul_step1_cache_window_2_U0_adpt_sm_read;
wire   [35:0] matmul_step1_cache_window_2_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_2_U0_cache_window_sm_write;
wire    matmul_step1_cache_window_2_U0_start_out;
wire    matmul_step1_cache_window_2_U0_start_write;
wire    matmul_step2_mac_2_U0_ap_start;
wire    matmul_step2_mac_2_U0_ap_done;
wire    matmul_step2_mac_2_U0_ap_continue;
wire    matmul_step2_mac_2_U0_ap_idle;
wire    matmul_step2_mac_2_U0_ap_ready;
wire    matmul_step2_mac_2_U0_cache_window_sm_read;
wire   [287:0] matmul_step2_mac_2_U0_mac_sm_din;
wire    matmul_step2_mac_2_U0_mac_sm_write;
wire    matmul_step2_mac_2_U0_start_out;
wire    matmul_step2_mac_2_U0_start_write;
wire    do_adapt_7_U0_ap_start;
wire    do_adapt_7_U0_ap_done;
wire    do_adapt_7_U0_ap_continue;
wire    do_adapt_7_U0_ap_idle;
wire    do_adapt_7_U0_ap_ready;
wire    do_adapt_7_U0_mac_sm_read;
wire   [23:0] do_adapt_7_U0_q_sm_din;
wire    do_adapt_7_U0_q_sm_write;
wire    adpt_sm_full_n;
wire   [35:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [35:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [287:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window_2_U0_din;
wire    start_for_matmul_step1_cache_window_2_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_2_U0_dout;
wire    start_for_matmul_step1_cache_window_2_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_2_U0_din;
wire    start_for_matmul_step2_mac_2_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_2_U0_dout;
wire    start_for_matmul_step2_mac_2_U0_empty_n;
wire   [0:0] start_for_do_adapt_7_U0_din;
wire    start_for_do_adapt_7_U0_full_n;
wire   [0:0] start_for_do_adapt_7_U0_dout;
wire    start_for_do_adapt_7_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN11_do_adapt_2 do_adapt_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_2_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_2_U0_full_n),
    .ap_done(do_adapt_2_U0_ap_done),
    .ap_continue(do_adapt_2_U0_ap_continue),
    .ap_idle(do_adapt_2_U0_ap_idle),
    .ap_ready(do_adapt_2_U0_ap_ready),
    .lnq_sm_cp1_dout(lnq_sm_cp1_dout),
    .lnq_sm_cp1_num_data_valid(3'd0),
    .lnq_sm_cp1_fifo_cap(3'd0),
    .lnq_sm_cp1_empty_n(lnq_sm_cp1_empty_n),
    .lnq_sm_cp1_read(do_adapt_2_U0_lnq_sm_cp1_read),
    .adpt_sm_din(do_adapt_2_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_2_U0_adpt_sm_write),
    .start_out(do_adapt_2_U0_start_out),
    .start_write(do_adapt_2_U0_start_write)
);

ATTN11_matmul_step1_cache_window_2 matmul_step1_cache_window_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_2_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_2_U0_full_n),
    .ap_done(matmul_step1_cache_window_2_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_2_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_2_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_2_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_2_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_2_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_2_U0_cache_window_sm_write),
    .start_out(matmul_step1_cache_window_2_U0_start_out),
    .start_write(matmul_step1_cache_window_2_U0_start_write)
);

ATTN11_matmul_step2_mac_2 matmul_step2_mac_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_2_U0_ap_start),
    .start_full_n(start_for_do_adapt_7_U0_full_n),
    .ap_done(matmul_step2_mac_2_U0_ap_done),
    .ap_continue(matmul_step2_mac_2_U0_ap_continue),
    .ap_idle(matmul_step2_mac_2_U0_ap_idle),
    .ap_ready(matmul_step2_mac_2_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_2_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac_2_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_2_U0_mac_sm_write),
    .start_out(matmul_step2_mac_2_U0_start_out),
    .start_write(matmul_step2_mac_2_U0_start_write)
);

ATTN11_do_adapt_7 do_adapt_7_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_7_U0_ap_start),
    .ap_done(do_adapt_7_U0_ap_done),
    .ap_continue(do_adapt_7_U0_ap_continue),
    .ap_idle(do_adapt_7_U0_ap_idle),
    .ap_ready(do_adapt_7_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_7_U0_mac_sm_read),
    .q_sm_din(do_adapt_7_U0_q_sm_din),
    .q_sm_num_data_valid(3'd0),
    .q_sm_fifo_cap(3'd0),
    .q_sm_full_n(q_sm_full_n),
    .q_sm_write(do_adapt_7_U0_q_sm_write)
);

ATTN11_fifo_w36_d32_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_2_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_2_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_2_U0_adpt_sm_read)
);

ATTN11_fifo_w36_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_2_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_2_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_2_U0_cache_window_sm_read)
);

ATTN11_fifo_w288_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_2_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_2_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_7_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_2_U0 start_for_matmul_step1_cache_window_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_2_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_2_U0_full_n),
    .if_write(do_adapt_2_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_2_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_2_U0_empty_n),
    .if_read(matmul_step1_cache_window_2_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_2_U0 start_for_matmul_step2_mac_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_2_U0_din),
    .if_full_n(start_for_matmul_step2_mac_2_U0_full_n),
    .if_write(matmul_step1_cache_window_2_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_2_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_2_U0_empty_n),
    .if_read(matmul_step2_mac_2_U0_ap_ready)
);

ATTN11_start_for_do_adapt_7_U0 start_for_do_adapt_7_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_7_U0_din),
    .if_full_n(start_for_do_adapt_7_U0_full_n),
    .if_write(matmul_step2_mac_2_U0_start_write),
    .if_dout(start_for_do_adapt_7_U0_dout),
    .if_empty_n(start_for_do_adapt_7_U0_empty_n),
    .if_read(do_adapt_7_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_7_U0_ap_done;

assign ap_idle = (matmul_step2_mac_2_U0_ap_idle & matmul_step1_cache_window_2_U0_ap_idle & do_adapt_7_U0_ap_idle & do_adapt_2_U0_ap_idle);

assign ap_ready = do_adapt_2_U0_ap_ready;

assign ap_sync_ready = do_adapt_2_U0_ap_ready;

assign do_adapt_2_U0_ap_continue = 1'b1;

assign do_adapt_2_U0_ap_start = real_start;

assign do_adapt_7_U0_ap_continue = ap_continue;

assign do_adapt_7_U0_ap_start = start_for_do_adapt_7_U0_empty_n;

assign internal_ap_ready = ap_sync_ready;

assign lnq_sm_cp1_read = do_adapt_2_U0_lnq_sm_cp1_read;

assign matmul_step1_cache_window_2_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_2_U0_ap_start = start_for_matmul_step1_cache_window_2_U0_empty_n;

assign matmul_step2_mac_2_U0_ap_continue = 1'b1;

assign matmul_step2_mac_2_U0_ap_start = start_for_matmul_step2_mac_2_U0_empty_n;

assign q_sm_din = do_adapt_7_U0_q_sm_din;

assign q_sm_write = do_adapt_7_U0_q_sm_write;

assign start_for_do_adapt_7_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_2_U0_din = 1'b1;

assign start_for_matmul_step2_mac_2_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN11_do_matmul_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_3 (
        aq_sm_dout,
        aq_sm_empty_n,
        aq_sm_read,
        o_sm_din,
        o_sm_full_n,
        o_sm_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [5:0] aq_sm_dout;
input   aq_sm_empty_n;
output   aq_sm_read;
output  [23:0] o_sm_din;
input   o_sm_full_n;
output   o_sm_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_3_U0_ap_start;
wire    do_adapt_3_U0_ap_done;
wire    do_adapt_3_U0_ap_continue;
wire    do_adapt_3_U0_ap_idle;
wire    do_adapt_3_U0_ap_ready;
wire    do_adapt_3_U0_aq_sm_read;
wire   [71:0] do_adapt_3_U0_adpt_sm_din;
wire    do_adapt_3_U0_adpt_sm_write;
wire    do_adapt_3_U0_start_out;
wire    do_adapt_3_U0_start_write;
wire    matmul_step1_cache_window_3_U0_ap_start;
wire    matmul_step1_cache_window_3_U0_ap_done;
wire    matmul_step1_cache_window_3_U0_ap_continue;
wire    matmul_step1_cache_window_3_U0_ap_idle;
wire    matmul_step1_cache_window_3_U0_ap_ready;
wire    matmul_step1_cache_window_3_U0_adpt_sm_read;
wire   [71:0] matmul_step1_cache_window_3_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_3_U0_cache_window_sm_write;
wire    matmul_step1_cache_window_3_U0_start_out;
wire    matmul_step1_cache_window_3_U0_start_write;
wire    matmul_step2_mac_3_U0_ap_start;
wire    matmul_step2_mac_3_U0_ap_done;
wire    matmul_step2_mac_3_U0_ap_continue;
wire    matmul_step2_mac_3_U0_ap_idle;
wire    matmul_step2_mac_3_U0_ap_ready;
wire    matmul_step2_mac_3_U0_cache_window_sm_read;
wire   [143:0] matmul_step2_mac_3_U0_mac_sm_din;
wire    matmul_step2_mac_3_U0_mac_sm_write;
wire    matmul_step2_mac_3_U0_start_out;
wire    matmul_step2_mac_3_U0_start_write;
wire    do_adapt_6_U0_ap_start;
wire    do_adapt_6_U0_ap_done;
wire    do_adapt_6_U0_ap_continue;
wire    do_adapt_6_U0_ap_idle;
wire    do_adapt_6_U0_ap_ready;
wire    do_adapt_6_U0_mac_sm_read;
wire   [23:0] do_adapt_6_U0_o_sm_din;
wire    do_adapt_6_U0_o_sm_write;
wire    adpt_sm_full_n;
wire   [71:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [71:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [143:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire   [0:0] start_for_matmul_step1_cache_window_3_U0_din;
wire    start_for_matmul_step1_cache_window_3_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_3_U0_dout;
wire    start_for_matmul_step1_cache_window_3_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_3_U0_din;
wire    start_for_matmul_step2_mac_3_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_3_U0_dout;
wire    start_for_matmul_step2_mac_3_U0_empty_n;
wire   [0:0] start_for_do_adapt_6_U0_din;
wire    start_for_do_adapt_6_U0_full_n;
wire   [0:0] start_for_do_adapt_6_U0_dout;
wire    start_for_do_adapt_6_U0_empty_n;

ATTN11_do_adapt_3 do_adapt_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_3_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_3_U0_full_n),
    .ap_done(do_adapt_3_U0_ap_done),
    .ap_continue(do_adapt_3_U0_ap_continue),
    .ap_idle(do_adapt_3_U0_ap_idle),
    .ap_ready(do_adapt_3_U0_ap_ready),
    .aq_sm_dout(aq_sm_dout),
    .aq_sm_num_data_valid(3'd0),
    .aq_sm_fifo_cap(3'd0),
    .aq_sm_empty_n(aq_sm_empty_n),
    .aq_sm_read(do_adapt_3_U0_aq_sm_read),
    .adpt_sm_din(do_adapt_3_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_3_U0_adpt_sm_write),
    .start_out(do_adapt_3_U0_start_out),
    .start_write(do_adapt_3_U0_start_write)
);

ATTN11_matmul_step1_cache_window_3 matmul_step1_cache_window_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_3_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_3_U0_full_n),
    .ap_done(matmul_step1_cache_window_3_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_3_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_3_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_3_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_3_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_3_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_3_U0_cache_window_sm_write),
    .start_out(matmul_step1_cache_window_3_U0_start_out),
    .start_write(matmul_step1_cache_window_3_U0_start_write)
);

ATTN11_matmul_step2_mac_3 matmul_step2_mac_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_3_U0_ap_start),
    .start_full_n(start_for_do_adapt_6_U0_full_n),
    .ap_done(matmul_step2_mac_3_U0_ap_done),
    .ap_continue(matmul_step2_mac_3_U0_ap_continue),
    .ap_idle(matmul_step2_mac_3_U0_ap_idle),
    .ap_ready(matmul_step2_mac_3_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_3_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac_3_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_3_U0_mac_sm_write),
    .start_out(matmul_step2_mac_3_U0_start_out),
    .start_write(matmul_step2_mac_3_U0_start_write)
);

ATTN11_do_adapt_6 do_adapt_6_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_6_U0_ap_start),
    .ap_done(do_adapt_6_U0_ap_done),
    .ap_continue(do_adapt_6_U0_ap_continue),
    .ap_idle(do_adapt_6_U0_ap_idle),
    .ap_ready(do_adapt_6_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_6_U0_mac_sm_read),
    .o_sm_din(do_adapt_6_U0_o_sm_din),
    .o_sm_num_data_valid(3'd0),
    .o_sm_fifo_cap(3'd0),
    .o_sm_full_n(o_sm_full_n),
    .o_sm_write(do_adapt_6_U0_o_sm_write)
);

ATTN11_fifo_w72_d32_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_3_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_3_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_3_U0_adpt_sm_read)
);

ATTN11_fifo_w72_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_3_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_3_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_3_U0_cache_window_sm_read)
);

ATTN11_fifo_w144_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_3_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_3_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_6_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_3_U0 start_for_matmul_step1_cache_window_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_3_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_3_U0_full_n),
    .if_write(do_adapt_3_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_3_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_3_U0_empty_n),
    .if_read(matmul_step1_cache_window_3_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_3_U0 start_for_matmul_step2_mac_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_3_U0_din),
    .if_full_n(start_for_matmul_step2_mac_3_U0_full_n),
    .if_write(matmul_step1_cache_window_3_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_3_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_3_U0_empty_n),
    .if_read(matmul_step2_mac_3_U0_ap_ready)
);

ATTN11_start_for_do_adapt_6_U0 start_for_do_adapt_6_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_6_U0_din),
    .if_full_n(start_for_do_adapt_6_U0_full_n),
    .if_write(matmul_step2_mac_3_U0_start_write),
    .if_dout(start_for_do_adapt_6_U0_dout),
    .if_empty_n(start_for_do_adapt_6_U0_empty_n),
    .if_read(do_adapt_6_U0_ap_ready)
);

assign ap_done = do_adapt_6_U0_ap_done;

assign ap_idle = (matmul_step2_mac_3_U0_ap_idle & matmul_step1_cache_window_3_U0_ap_idle & do_adapt_6_U0_ap_idle & do_adapt_3_U0_ap_idle);

assign ap_ready = do_adapt_3_U0_ap_ready;

assign aq_sm_read = do_adapt_3_U0_aq_sm_read;

assign do_adapt_3_U0_ap_continue = 1'b1;

assign do_adapt_3_U0_ap_start = ap_start;

assign do_adapt_6_U0_ap_continue = ap_continue;

assign do_adapt_6_U0_ap_start = start_for_do_adapt_6_U0_empty_n;

assign matmul_step1_cache_window_3_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_3_U0_ap_start = start_for_matmul_step1_cache_window_3_U0_empty_n;

assign matmul_step2_mac_3_U0_ap_continue = 1'b1;

assign matmul_step2_mac_3_U0_ap_start = start_for_matmul_step2_mac_3_U0_empty_n;

assign o_sm_din = do_adapt_6_U0_o_sm_din;

assign o_sm_write = do_adapt_6_U0_o_sm_write;

assign start_for_do_adapt_6_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_3_U0_din = 1'b1;

assign start_for_matmul_step2_mac_3_U0_din = 1'b1;

endmodule //ATTN11_do_matmul_3
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_4 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        lnq_sm_cp3_dout,
        lnq_sm_cp3_empty_n,
        lnq_sm_cp3_read,
        v_sm_din,
        v_sm_full_n,
        v_sm_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] lnq_sm_cp3_dout;
input   lnq_sm_cp3_empty_n;
output   lnq_sm_cp3_read;
output  [19:0] v_sm_din;
input   v_sm_full_n;
output   v_sm_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_50_U0_ap_start;
wire    do_adapt_50_U0_ap_done;
wire    do_adapt_50_U0_ap_continue;
wire    do_adapt_50_U0_ap_idle;
wire    do_adapt_50_U0_ap_ready;
wire    do_adapt_50_U0_lnq_sm_cp3_read;
wire   [35:0] do_adapt_50_U0_adpt_sm_din;
wire    do_adapt_50_U0_adpt_sm_write;
wire    do_adapt_50_U0_start_out;
wire    do_adapt_50_U0_start_write;
wire    matmul_step1_cache_window_4_U0_ap_start;
wire    matmul_step1_cache_window_4_U0_ap_done;
wire    matmul_step1_cache_window_4_U0_ap_continue;
wire    matmul_step1_cache_window_4_U0_ap_idle;
wire    matmul_step1_cache_window_4_U0_ap_ready;
wire    matmul_step1_cache_window_4_U0_adpt_sm_read;
wire   [35:0] matmul_step1_cache_window_4_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_4_U0_cache_window_sm_write;
wire    matmul_step1_cache_window_4_U0_start_out;
wire    matmul_step1_cache_window_4_U0_start_write;
wire    matmul_step2_mac_4_U0_ap_start;
wire    matmul_step2_mac_4_U0_ap_done;
wire    matmul_step2_mac_4_U0_ap_continue;
wire    matmul_step2_mac_4_U0_ap_idle;
wire    matmul_step2_mac_4_U0_ap_ready;
wire    matmul_step2_mac_4_U0_cache_window_sm_read;
wire   [239:0] matmul_step2_mac_4_U0_mac_sm_din;
wire    matmul_step2_mac_4_U0_mac_sm_write;
wire    matmul_step2_mac_4_U0_start_out;
wire    matmul_step2_mac_4_U0_start_write;
wire    do_adapt_10_U0_ap_start;
wire    do_adapt_10_U0_ap_done;
wire    do_adapt_10_U0_ap_continue;
wire    do_adapt_10_U0_ap_idle;
wire    do_adapt_10_U0_ap_ready;
wire    do_adapt_10_U0_mac_sm_read;
wire   [19:0] do_adapt_10_U0_v_sm_din;
wire    do_adapt_10_U0_v_sm_write;
wire    adpt_sm_full_n;
wire   [35:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [35:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [239:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window_4_U0_din;
wire    start_for_matmul_step1_cache_window_4_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_4_U0_dout;
wire    start_for_matmul_step1_cache_window_4_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_4_U0_din;
wire    start_for_matmul_step2_mac_4_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_4_U0_dout;
wire    start_for_matmul_step2_mac_4_U0_empty_n;
wire   [0:0] start_for_do_adapt_10_U0_din;
wire    start_for_do_adapt_10_U0_full_n;
wire   [0:0] start_for_do_adapt_10_U0_dout;
wire    start_for_do_adapt_10_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN11_do_adapt_50 do_adapt_50_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_50_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_4_U0_full_n),
    .ap_done(do_adapt_50_U0_ap_done),
    .ap_continue(do_adapt_50_U0_ap_continue),
    .ap_idle(do_adapt_50_U0_ap_idle),
    .ap_ready(do_adapt_50_U0_ap_ready),
    .lnq_sm_cp3_dout(lnq_sm_cp3_dout),
    .lnq_sm_cp3_num_data_valid(3'd0),
    .lnq_sm_cp3_fifo_cap(3'd0),
    .lnq_sm_cp3_empty_n(lnq_sm_cp3_empty_n),
    .lnq_sm_cp3_read(do_adapt_50_U0_lnq_sm_cp3_read),
    .adpt_sm_din(do_adapt_50_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_50_U0_adpt_sm_write),
    .start_out(do_adapt_50_U0_start_out),
    .start_write(do_adapt_50_U0_start_write)
);

ATTN11_matmul_step1_cache_window_4 matmul_step1_cache_window_4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_4_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_4_U0_full_n),
    .ap_done(matmul_step1_cache_window_4_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_4_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_4_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_4_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_4_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_4_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_4_U0_cache_window_sm_write),
    .start_out(matmul_step1_cache_window_4_U0_start_out),
    .start_write(matmul_step1_cache_window_4_U0_start_write)
);

ATTN11_matmul_step2_mac_4 matmul_step2_mac_4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_4_U0_ap_start),
    .start_full_n(start_for_do_adapt_10_U0_full_n),
    .ap_done(matmul_step2_mac_4_U0_ap_done),
    .ap_continue(matmul_step2_mac_4_U0_ap_continue),
    .ap_idle(matmul_step2_mac_4_U0_ap_idle),
    .ap_ready(matmul_step2_mac_4_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_4_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac_4_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_4_U0_mac_sm_write),
    .start_out(matmul_step2_mac_4_U0_start_out),
    .start_write(matmul_step2_mac_4_U0_start_write)
);

ATTN11_do_adapt_10 do_adapt_10_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_10_U0_ap_start),
    .ap_done(do_adapt_10_U0_ap_done),
    .ap_continue(do_adapt_10_U0_ap_continue),
    .ap_idle(do_adapt_10_U0_ap_idle),
    .ap_ready(do_adapt_10_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_10_U0_mac_sm_read),
    .v_sm_din(do_adapt_10_U0_v_sm_din),
    .v_sm_num_data_valid(3'd0),
    .v_sm_fifo_cap(3'd0),
    .v_sm_full_n(v_sm_full_n),
    .v_sm_write(do_adapt_10_U0_v_sm_write)
);

ATTN11_fifo_w36_d32_A_x0 adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_50_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_50_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_4_U0_adpt_sm_read)
);

ATTN11_fifo_w36_d2_S_x0 cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_4_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_4_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_4_U0_cache_window_sm_read)
);

ATTN11_fifo_w240_d2_S_x mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_4_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_4_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_10_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_4_U0 start_for_matmul_step1_cache_window_4_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_4_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_4_U0_full_n),
    .if_write(do_adapt_50_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_4_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_4_U0_empty_n),
    .if_read(matmul_step1_cache_window_4_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_4_U0 start_for_matmul_step2_mac_4_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_4_U0_din),
    .if_full_n(start_for_matmul_step2_mac_4_U0_full_n),
    .if_write(matmul_step1_cache_window_4_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_4_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_4_U0_empty_n),
    .if_read(matmul_step2_mac_4_U0_ap_ready)
);

ATTN11_start_for_do_adapt_10_U0 start_for_do_adapt_10_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_10_U0_din),
    .if_full_n(start_for_do_adapt_10_U0_full_n),
    .if_write(matmul_step2_mac_4_U0_start_write),
    .if_dout(start_for_do_adapt_10_U0_dout),
    .if_empty_n(start_for_do_adapt_10_U0_empty_n),
    .if_read(do_adapt_10_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_10_U0_ap_done;

assign ap_idle = (matmul_step2_mac_4_U0_ap_idle & matmul_step1_cache_window_4_U0_ap_idle & do_adapt_50_U0_ap_idle & do_adapt_10_U0_ap_idle);

assign ap_ready = do_adapt_50_U0_ap_ready;

assign ap_sync_ready = do_adapt_50_U0_ap_ready;

assign do_adapt_10_U0_ap_continue = ap_continue;

assign do_adapt_10_U0_ap_start = start_for_do_adapt_10_U0_empty_n;

assign do_adapt_50_U0_ap_continue = 1'b1;

assign do_adapt_50_U0_ap_start = real_start;

assign internal_ap_ready = ap_sync_ready;

assign lnq_sm_cp3_read = do_adapt_50_U0_lnq_sm_cp3_read;

assign matmul_step1_cache_window_4_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_4_U0_ap_start = start_for_matmul_step1_cache_window_4_U0_empty_n;

assign matmul_step2_mac_4_U0_ap_continue = 1'b1;

assign matmul_step2_mac_4_U0_ap_start = start_for_matmul_step2_mac_4_U0_empty_n;

assign start_for_do_adapt_10_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_4_U0_din = 1'b1;

assign start_for_matmul_step2_mac_4_U0_din = 1'b1;

assign start_out = real_start;

assign v_sm_din = do_adapt_10_U0_v_sm_din;

assign v_sm_write = do_adapt_10_U0_v_sm_write;

endmodule //ATTN11_do_matmul_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_8 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qq_sm_head1_dout,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        r_sm_head1_din,
        r_sm_head1_full_n,
        r_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] qq_sm_head1_dout;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
input  [83:0] kq_sm_reshape_head1_dout;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [19:0] r_sm_head1_din;
input   r_sm_head1_full_n;
output   r_sm_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_26_U0_ap_start;
wire    do_adapt_26_U0_ap_done;
wire    do_adapt_26_U0_ap_continue;
wire    do_adapt_26_U0_ap_idle;
wire    do_adapt_26_U0_ap_ready;
wire    do_adapt_26_U0_qq_sm_head1_read;
wire   [23:0] do_adapt_26_U0_adpt_sm_din;
wire    do_adapt_26_U0_adpt_sm_write;
wire    do_adapt_26_U0_start_out;
wire    do_adapt_26_U0_start_write;
wire    matmul_step1_cache_window_27_U0_ap_start;
wire    matmul_step1_cache_window_27_U0_ap_done;
wire    matmul_step1_cache_window_27_U0_ap_continue;
wire    matmul_step1_cache_window_27_U0_ap_idle;
wire    matmul_step1_cache_window_27_U0_ap_ready;
wire    matmul_step1_cache_window_27_U0_adpt_sm_read;
wire   [23:0] matmul_step1_cache_window_27_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_27_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_28_U0_ap_start;
wire    matmul_step1_cache_weight_28_U0_ap_done;
wire    matmul_step1_cache_weight_28_U0_ap_continue;
wire    matmul_step1_cache_weight_28_U0_ap_idle;
wire    matmul_step1_cache_weight_28_U0_ap_ready;
wire    matmul_step1_cache_weight_28_U0_start_out;
wire    matmul_step1_cache_weight_28_U0_start_write;
wire    matmul_step1_cache_weight_28_U0_kq_sm_reshape_head1_read;
wire   [83:0] matmul_step1_cache_weight_28_U0_weight_sm_din;
wire    matmul_step1_cache_weight_28_U0_weight_sm_write;
wire    matmul_step2_mac_29_U0_ap_start;
wire    matmul_step2_mac_29_U0_ap_done;
wire    matmul_step2_mac_29_U0_ap_continue;
wire    matmul_step2_mac_29_U0_ap_idle;
wire    matmul_step2_mac_29_U0_ap_ready;
wire    matmul_step2_mac_29_U0_cache_window_sm_read;
wire    matmul_step2_mac_29_U0_weight_sm_read;
wire   [139:0] matmul_step2_mac_29_U0_mac_sm_din;
wire    matmul_step2_mac_29_U0_mac_sm_write;
wire    matmul_step2_mac_29_U0_start_out;
wire    matmul_step2_mac_29_U0_start_write;
wire    do_adapt_30_U0_ap_start;
wire    do_adapt_30_U0_ap_done;
wire    do_adapt_30_U0_ap_continue;
wire    do_adapt_30_U0_ap_idle;
wire    do_adapt_30_U0_ap_ready;
wire    do_adapt_30_U0_mac_sm_read;
wire   [19:0] do_adapt_30_U0_r_sm_head1_din;
wire    do_adapt_30_U0_r_sm_head1_write;
wire    adpt_sm_full_n;
wire   [23:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [23:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [83:0] weight_sm_dout;
wire   [2:0] weight_sm_num_data_valid;
wire   [2:0] weight_sm_fifo_cap;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [139:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_26_U0_ap_ready;
wire    ap_sync_do_adapt_26_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_28_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_28_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_27_U0_din;
wire    start_for_matmul_step1_cache_window_27_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_27_U0_dout;
wire    start_for_matmul_step1_cache_window_27_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_29_U0_din;
wire    start_for_matmul_step2_mac_29_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_29_U0_dout;
wire    start_for_matmul_step2_mac_29_U0_empty_n;
wire   [0:0] start_for_do_adapt_30_U0_din;
wire    start_for_do_adapt_30_U0_full_n;
wire   [0:0] start_for_do_adapt_30_U0_dout;
wire    start_for_do_adapt_30_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt_26_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_28_U0_ap_ready = 1'b0;
end

ATTN11_do_adapt_26 do_adapt_26_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_26_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_27_U0_full_n),
    .ap_done(do_adapt_26_U0_ap_done),
    .ap_continue(do_adapt_26_U0_ap_continue),
    .ap_idle(do_adapt_26_U0_ap_idle),
    .ap_ready(do_adapt_26_U0_ap_ready),
    .qq_sm_head1_dout(qq_sm_head1_dout),
    .qq_sm_head1_num_data_valid(14'd0),
    .qq_sm_head1_fifo_cap(14'd0),
    .qq_sm_head1_empty_n(qq_sm_head1_empty_n),
    .qq_sm_head1_read(do_adapt_26_U0_qq_sm_head1_read),
    .adpt_sm_din(do_adapt_26_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_26_U0_adpt_sm_write),
    .start_out(do_adapt_26_U0_start_out),
    .start_write(do_adapt_26_U0_start_write)
);

ATTN11_matmul_step1_cache_window_27 matmul_step1_cache_window_27_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_27_U0_ap_start),
    .ap_done(matmul_step1_cache_window_27_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_27_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_27_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_27_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_27_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_27_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_27_U0_cache_window_sm_write)
);

ATTN11_matmul_step1_cache_weight_28 matmul_step1_cache_weight_28_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_28_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_29_U0_full_n),
    .ap_done(matmul_step1_cache_weight_28_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_28_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_28_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_28_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_28_U0_start_out),
    .start_write(matmul_step1_cache_weight_28_U0_start_write),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head1_dout),
    .kq_sm_reshape_head1_num_data_valid(10'd0),
    .kq_sm_reshape_head1_fifo_cap(10'd0),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head1_empty_n),
    .kq_sm_reshape_head1_read(matmul_step1_cache_weight_28_U0_kq_sm_reshape_head1_read),
    .weight_sm_din(matmul_step1_cache_weight_28_U0_weight_sm_din),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_28_U0_weight_sm_write)
);

ATTN11_matmul_step2_mac_29 matmul_step2_mac_29_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_29_U0_ap_start),
    .start_full_n(start_for_do_adapt_30_U0_full_n),
    .ap_done(matmul_step2_mac_29_U0_ap_done),
    .ap_continue(matmul_step2_mac_29_U0_ap_continue),
    .ap_idle(matmul_step2_mac_29_U0_ap_idle),
    .ap_ready(matmul_step2_mac_29_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_29_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_29_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_29_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_29_U0_mac_sm_write),
    .start_out(matmul_step2_mac_29_U0_start_out),
    .start_write(matmul_step2_mac_29_U0_start_write)
);

ATTN11_do_adapt_30 do_adapt_30_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_30_U0_ap_start),
    .ap_done(do_adapt_30_U0_ap_done),
    .ap_continue(do_adapt_30_U0_ap_continue),
    .ap_idle(do_adapt_30_U0_ap_idle),
    .ap_ready(do_adapt_30_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_30_U0_mac_sm_read),
    .r_sm_head1_din(do_adapt_30_U0_r_sm_head1_din),
    .r_sm_head1_num_data_valid(10'd0),
    .r_sm_head1_fifo_cap(10'd0),
    .r_sm_head1_full_n(r_sm_head1_full_n),
    .r_sm_head1_write(do_adapt_30_U0_r_sm_head1_write)
);

ATTN11_fifo_w24_d32_S adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_26_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_26_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_27_U0_adpt_sm_read)
);

ATTN11_fifo_w24_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_27_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_27_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_29_U0_cache_window_sm_read)
);

ATTN11_fifo_w84_d2_S weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_28_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_28_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_num_data_valid(weight_sm_num_data_valid),
    .if_fifo_cap(weight_sm_fifo_cap),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_29_U0_weight_sm_read)
);

ATTN11_fifo_w140_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_29_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_29_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_30_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_27_U0 start_for_matmul_step1_cache_window_27_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_27_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_27_U0_full_n),
    .if_write(do_adapt_26_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_27_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_27_U0_empty_n),
    .if_read(matmul_step1_cache_window_27_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_29_U0 start_for_matmul_step2_mac_29_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_29_U0_din),
    .if_full_n(start_for_matmul_step2_mac_29_U0_full_n),
    .if_write(matmul_step1_cache_weight_28_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_29_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_29_U0_empty_n),
    .if_read(matmul_step2_mac_29_U0_ap_ready)
);

ATTN11_start_for_do_adapt_30_U0 start_for_do_adapt_30_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_30_U0_din),
    .if_full_n(start_for_do_adapt_30_U0_full_n),
    .if_write(matmul_step2_mac_29_U0_start_write),
    .if_dout(start_for_do_adapt_30_U0_dout),
    .if_empty_n(start_for_do_adapt_30_U0_empty_n),
    .if_read(do_adapt_30_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_26_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt_26_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_26_U0_ap_ready <= ap_sync_do_adapt_26_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_28_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_28_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_28_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_28_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_30_U0_ap_done;

assign ap_idle = (matmul_step2_mac_29_U0_ap_idle & matmul_step1_cache_window_27_U0_ap_idle & matmul_step1_cache_weight_28_U0_ap_idle & do_adapt_30_U0_ap_idle & do_adapt_26_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_do_adapt_26_U0_ap_ready = (do_adapt_26_U0_ap_ready | ap_sync_reg_do_adapt_26_U0_ap_ready);

assign ap_sync_matmul_step1_cache_weight_28_U0_ap_ready = (matmul_step1_cache_weight_28_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_28_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_28_U0_ap_ready & ap_sync_do_adapt_26_U0_ap_ready);

assign do_adapt_26_U0_ap_continue = 1'b1;

assign do_adapt_26_U0_ap_start = (real_start & (ap_sync_reg_do_adapt_26_U0_ap_ready ^ 1'b1));

assign do_adapt_30_U0_ap_continue = ap_continue;

assign do_adapt_30_U0_ap_start = start_for_do_adapt_30_U0_empty_n;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_reshape_head1_read = matmul_step1_cache_weight_28_U0_kq_sm_reshape_head1_read;

assign matmul_step1_cache_weight_28_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_28_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight_28_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window_27_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_27_U0_ap_start = start_for_matmul_step1_cache_window_27_U0_empty_n;

assign matmul_step2_mac_29_U0_ap_continue = 1'b1;

assign matmul_step2_mac_29_U0_ap_start = start_for_matmul_step2_mac_29_U0_empty_n;

assign qq_sm_head1_read = do_adapt_26_U0_qq_sm_head1_read;

assign r_sm_head1_din = do_adapt_30_U0_r_sm_head1_din;

assign r_sm_head1_write = do_adapt_30_U0_r_sm_head1_write;

assign start_for_do_adapt_30_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_27_U0_din = 1'b1;

assign start_for_matmul_step2_mac_29_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN11_do_matmul_8
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_matmul_9 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qq_sm_head2_dout,
        qq_sm_head2_empty_n,
        qq_sm_head2_read,
        kq_sm_reshape_head2_dout,
        kq_sm_reshape_head2_empty_n,
        kq_sm_reshape_head2_read,
        r_sm_head2_din,
        r_sm_head2_full_n,
        r_sm_head2_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] qq_sm_head2_dout;
input   qq_sm_head2_empty_n;
output   qq_sm_head2_read;
input  [83:0] kq_sm_reshape_head2_dout;
input   kq_sm_reshape_head2_empty_n;
output   kq_sm_reshape_head2_read;
output  [19:0] r_sm_head2_din;
input   r_sm_head2_full_n;
output   r_sm_head2_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_31_U0_ap_start;
wire    do_adapt_31_U0_ap_done;
wire    do_adapt_31_U0_ap_continue;
wire    do_adapt_31_U0_ap_idle;
wire    do_adapt_31_U0_ap_ready;
wire    do_adapt_31_U0_qq_sm_head2_read;
wire   [23:0] do_adapt_31_U0_adpt_sm_din;
wire    do_adapt_31_U0_adpt_sm_write;
wire    do_adapt_31_U0_start_out;
wire    do_adapt_31_U0_start_write;
wire    matmul_step1_cache_window_32_U0_ap_start;
wire    matmul_step1_cache_window_32_U0_ap_done;
wire    matmul_step1_cache_window_32_U0_ap_continue;
wire    matmul_step1_cache_window_32_U0_ap_idle;
wire    matmul_step1_cache_window_32_U0_ap_ready;
wire    matmul_step1_cache_window_32_U0_adpt_sm_read;
wire   [23:0] matmul_step1_cache_window_32_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_32_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_33_U0_ap_start;
wire    matmul_step1_cache_weight_33_U0_ap_done;
wire    matmul_step1_cache_weight_33_U0_ap_continue;
wire    matmul_step1_cache_weight_33_U0_ap_idle;
wire    matmul_step1_cache_weight_33_U0_ap_ready;
wire    matmul_step1_cache_weight_33_U0_start_out;
wire    matmul_step1_cache_weight_33_U0_start_write;
wire    matmul_step1_cache_weight_33_U0_kq_sm_reshape_head2_read;
wire   [83:0] matmul_step1_cache_weight_33_U0_weight_sm_din;
wire    matmul_step1_cache_weight_33_U0_weight_sm_write;
wire    matmul_step2_mac_34_U0_ap_start;
wire    matmul_step2_mac_34_U0_ap_done;
wire    matmul_step2_mac_34_U0_ap_continue;
wire    matmul_step2_mac_34_U0_ap_idle;
wire    matmul_step2_mac_34_U0_ap_ready;
wire    matmul_step2_mac_34_U0_cache_window_sm_read;
wire    matmul_step2_mac_34_U0_weight_sm_read;
wire   [139:0] matmul_step2_mac_34_U0_mac_sm_din;
wire    matmul_step2_mac_34_U0_mac_sm_write;
wire    matmul_step2_mac_34_U0_start_out;
wire    matmul_step2_mac_34_U0_start_write;
wire    do_adapt_35_U0_ap_start;
wire    do_adapt_35_U0_ap_done;
wire    do_adapt_35_U0_ap_continue;
wire    do_adapt_35_U0_ap_idle;
wire    do_adapt_35_U0_ap_ready;
wire    do_adapt_35_U0_mac_sm_read;
wire   [19:0] do_adapt_35_U0_r_sm_head2_din;
wire    do_adapt_35_U0_r_sm_head2_write;
wire    adpt_sm_full_n;
wire   [23:0] adpt_sm_dout;
wire   [5:0] adpt_sm_num_data_valid;
wire   [5:0] adpt_sm_fifo_cap;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [23:0] cache_window_sm_dout;
wire   [2:0] cache_window_sm_num_data_valid;
wire   [2:0] cache_window_sm_fifo_cap;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [83:0] weight_sm_dout;
wire   [2:0] weight_sm_num_data_valid;
wire   [2:0] weight_sm_fifo_cap;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [139:0] mac_sm_dout;
wire   [2:0] mac_sm_num_data_valid;
wire   [2:0] mac_sm_fifo_cap;
wire    mac_sm_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_31_U0_ap_ready;
wire    ap_sync_do_adapt_31_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_33_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_33_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_32_U0_din;
wire    start_for_matmul_step1_cache_window_32_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_32_U0_dout;
wire    start_for_matmul_step1_cache_window_32_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_34_U0_din;
wire    start_for_matmul_step2_mac_34_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_34_U0_dout;
wire    start_for_matmul_step2_mac_34_U0_empty_n;
wire   [0:0] start_for_do_adapt_35_U0_din;
wire    start_for_do_adapt_35_U0_full_n;
wire   [0:0] start_for_do_adapt_35_U0_dout;
wire    start_for_do_adapt_35_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt_31_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_33_U0_ap_ready = 1'b0;
end

ATTN11_do_adapt_31 do_adapt_31_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_31_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_32_U0_full_n),
    .ap_done(do_adapt_31_U0_ap_done),
    .ap_continue(do_adapt_31_U0_ap_continue),
    .ap_idle(do_adapt_31_U0_ap_idle),
    .ap_ready(do_adapt_31_U0_ap_ready),
    .qq_sm_head2_dout(qq_sm_head2_dout),
    .qq_sm_head2_num_data_valid(14'd0),
    .qq_sm_head2_fifo_cap(14'd0),
    .qq_sm_head2_empty_n(qq_sm_head2_empty_n),
    .qq_sm_head2_read(do_adapt_31_U0_qq_sm_head2_read),
    .adpt_sm_din(do_adapt_31_U0_adpt_sm_din),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_31_U0_adpt_sm_write),
    .start_out(do_adapt_31_U0_start_out),
    .start_write(do_adapt_31_U0_start_write)
);

ATTN11_matmul_step1_cache_window_32 matmul_step1_cache_window_32_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_32_U0_ap_start),
    .ap_done(matmul_step1_cache_window_32_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_32_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_32_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_32_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_num_data_valid(adpt_sm_num_data_valid),
    .adpt_sm_fifo_cap(adpt_sm_fifo_cap),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_32_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_32_U0_cache_window_sm_din),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_32_U0_cache_window_sm_write)
);

ATTN11_matmul_step1_cache_weight_33 matmul_step1_cache_weight_33_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_33_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_34_U0_full_n),
    .ap_done(matmul_step1_cache_weight_33_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_33_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_33_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_33_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_33_U0_start_out),
    .start_write(matmul_step1_cache_weight_33_U0_start_write),
    .kq_sm_reshape_head2_dout(kq_sm_reshape_head2_dout),
    .kq_sm_reshape_head2_num_data_valid(10'd0),
    .kq_sm_reshape_head2_fifo_cap(10'd0),
    .kq_sm_reshape_head2_empty_n(kq_sm_reshape_head2_empty_n),
    .kq_sm_reshape_head2_read(matmul_step1_cache_weight_33_U0_kq_sm_reshape_head2_read),
    .weight_sm_din(matmul_step1_cache_weight_33_U0_weight_sm_din),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_33_U0_weight_sm_write)
);

ATTN11_matmul_step2_mac_34 matmul_step2_mac_34_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_34_U0_ap_start),
    .start_full_n(start_for_do_adapt_35_U0_full_n),
    .ap_done(matmul_step2_mac_34_U0_ap_done),
    .ap_continue(matmul_step2_mac_34_U0_ap_continue),
    .ap_idle(matmul_step2_mac_34_U0_ap_idle),
    .ap_ready(matmul_step2_mac_34_U0_ap_ready),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_num_data_valid(cache_window_sm_num_data_valid),
    .cache_window_sm_fifo_cap(cache_window_sm_fifo_cap),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_34_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_num_data_valid(weight_sm_num_data_valid),
    .weight_sm_fifo_cap(weight_sm_fifo_cap),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_34_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_34_U0_mac_sm_din),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_34_U0_mac_sm_write),
    .start_out(matmul_step2_mac_34_U0_start_out),
    .start_write(matmul_step2_mac_34_U0_start_write)
);

ATTN11_do_adapt_35 do_adapt_35_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_35_U0_ap_start),
    .ap_done(do_adapt_35_U0_ap_done),
    .ap_continue(do_adapt_35_U0_ap_continue),
    .ap_idle(do_adapt_35_U0_ap_idle),
    .ap_ready(do_adapt_35_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_num_data_valid(mac_sm_num_data_valid),
    .mac_sm_fifo_cap(mac_sm_fifo_cap),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_35_U0_mac_sm_read),
    .r_sm_head2_din(do_adapt_35_U0_r_sm_head2_din),
    .r_sm_head2_num_data_valid(10'd0),
    .r_sm_head2_fifo_cap(10'd0),
    .r_sm_head2_full_n(r_sm_head2_full_n),
    .r_sm_head2_write(do_adapt_35_U0_r_sm_head2_write)
);

ATTN11_fifo_w24_d32_S_x adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_31_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_31_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_num_data_valid(adpt_sm_num_data_valid),
    .if_fifo_cap(adpt_sm_fifo_cap),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_32_U0_adpt_sm_read)
);

ATTN11_fifo_w24_d2_S_x cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_32_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_32_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_num_data_valid(cache_window_sm_num_data_valid),
    .if_fifo_cap(cache_window_sm_fifo_cap),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_34_U0_cache_window_sm_read)
);

ATTN11_fifo_w84_d2_S_x weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_33_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_33_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_num_data_valid(weight_sm_num_data_valid),
    .if_fifo_cap(weight_sm_fifo_cap),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_34_U0_weight_sm_read)
);

ATTN11_fifo_w140_d2_S_x mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_34_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_34_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_num_data_valid(mac_sm_num_data_valid),
    .if_fifo_cap(mac_sm_fifo_cap),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_35_U0_mac_sm_read)
);

ATTN11_start_for_matmul_step1_cache_window_32_U0 start_for_matmul_step1_cache_window_32_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_32_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_32_U0_full_n),
    .if_write(do_adapt_31_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_32_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_32_U0_empty_n),
    .if_read(matmul_step1_cache_window_32_U0_ap_ready)
);

ATTN11_start_for_matmul_step2_mac_34_U0 start_for_matmul_step2_mac_34_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_34_U0_din),
    .if_full_n(start_for_matmul_step2_mac_34_U0_full_n),
    .if_write(matmul_step1_cache_weight_33_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_34_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_34_U0_empty_n),
    .if_read(matmul_step2_mac_34_U0_ap_ready)
);

ATTN11_start_for_do_adapt_35_U0 start_for_do_adapt_35_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_35_U0_din),
    .if_full_n(start_for_do_adapt_35_U0_full_n),
    .if_write(matmul_step2_mac_34_U0_start_write),
    .if_dout(start_for_do_adapt_35_U0_dout),
    .if_empty_n(start_for_do_adapt_35_U0_empty_n),
    .if_read(do_adapt_35_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_31_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt_31_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_31_U0_ap_ready <= ap_sync_do_adapt_31_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_33_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_33_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_33_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_33_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_35_U0_ap_done;

assign ap_idle = (matmul_step2_mac_34_U0_ap_idle & matmul_step1_cache_window_32_U0_ap_idle & matmul_step1_cache_weight_33_U0_ap_idle & do_adapt_35_U0_ap_idle & do_adapt_31_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_do_adapt_31_U0_ap_ready = (do_adapt_31_U0_ap_ready | ap_sync_reg_do_adapt_31_U0_ap_ready);

assign ap_sync_matmul_step1_cache_weight_33_U0_ap_ready = (matmul_step1_cache_weight_33_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_33_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_33_U0_ap_ready & ap_sync_do_adapt_31_U0_ap_ready);

assign do_adapt_31_U0_ap_continue = 1'b1;

assign do_adapt_31_U0_ap_start = (real_start & (ap_sync_reg_do_adapt_31_U0_ap_ready ^ 1'b1));

assign do_adapt_35_U0_ap_continue = ap_continue;

assign do_adapt_35_U0_ap_start = start_for_do_adapt_35_U0_empty_n;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_reshape_head2_read = matmul_step1_cache_weight_33_U0_kq_sm_reshape_head2_read;

assign matmul_step1_cache_weight_33_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_33_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight_33_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window_32_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_32_U0_ap_start = start_for_matmul_step1_cache_window_32_U0_empty_n;

assign matmul_step2_mac_34_U0_ap_continue = 1'b1;

assign matmul_step2_mac_34_U0_ap_start = start_for_matmul_step2_mac_34_U0_empty_n;

assign qq_sm_head2_read = do_adapt_31_U0_qq_sm_head2_read;

assign r_sm_head2_din = do_adapt_35_U0_r_sm_head2_din;

assign r_sm_head2_write = do_adapt_35_U0_r_sm_head2_write;

assign start_for_do_adapt_35_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_32_U0_din = 1'b1;

assign start_for_matmul_step2_mac_34_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN11_do_matmul_9
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_merge (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        a_sm_head2_dout,
        a_sm_head2_num_data_valid,
        a_sm_head2_fifo_cap,
        a_sm_head2_empty_n,
        a_sm_head2_read,
        a_sm_head3_dout,
        a_sm_head3_num_data_valid,
        a_sm_head3_fifo_cap,
        a_sm_head3_empty_n,
        a_sm_head3_read,
        a_sm_head1_dout,
        a_sm_head1_num_data_valid,
        a_sm_head1_fifo_cap,
        a_sm_head1_empty_n,
        a_sm_head1_read,
        a_sm_din,
        a_sm_num_data_valid,
        a_sm_fifo_cap,
        a_sm_full_n,
        a_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] a_sm_head2_dout;
input  [6:0] a_sm_head2_num_data_valid;
input  [6:0] a_sm_head2_fifo_cap;
input   a_sm_head2_empty_n;
output   a_sm_head2_read;
input  [19:0] a_sm_head3_dout;
input  [6:0] a_sm_head3_num_data_valid;
input  [6:0] a_sm_head3_fifo_cap;
input   a_sm_head3_empty_n;
output   a_sm_head3_read;
input  [19:0] a_sm_head1_dout;
input  [6:0] a_sm_head1_num_data_valid;
input  [6:0] a_sm_head1_fifo_cap;
input   a_sm_head1_empty_n;
output   a_sm_head1_read;
output  [19:0] a_sm_din;
input  [2:0] a_sm_num_data_valid;
input  [2:0] a_sm_fifo_cap;
input   a_sm_full_n;
output   a_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg a_sm_head2_read;
reg a_sm_head3_read;
reg a_sm_head1_read;
reg a_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln62_reg_477;
reg   [0:0] icmp_ln62_reg_477_pp0_iter1_reg;
reg   [1:0] select_ln63_reg_488;
reg    ap_predicate_op68_read_state3;
reg    ap_predicate_op72_read_state3;
reg    ap_predicate_op76_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln62_fu_198_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    a_sm_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    a_sm_head2_blk_n;
reg    a_sm_head3_blk_n;
reg    a_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln62_reg_477_pp0_iter2_reg;
wire   [0:0] icmp_ln63_fu_204_p2;
reg   [0:0] icmp_ln63_reg_481;
wire   [1:0] select_ln63_fu_290_p3;
reg   [1:0] select_ln63_reg_488_pp0_iter2_reg;
wire   [9:0] trunc_ln72_fu_341_p1;
reg   [9:0] trunc_ln72_reg_492;
reg   [9:0] trunc_ln72_1_reg_497;
wire   [9:0] trunc_ln74_fu_355_p1;
reg   [9:0] trunc_ln74_reg_502;
reg   [9:0] trunc_ln74_1_reg_507;
wire   [9:0] trunc_ln70_fu_369_p1;
reg   [9:0] trunc_ln70_reg_512;
reg   [9:0] trunc_ln70_1_reg_517;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [25:0] ap_phi_mux_vec_o_2_in_phi_fu_122_p6;
wire   [25:0] tmp_fu_401_p4;
wire   [25:0] ap_phi_reg_pp0_iter3_vec_o_2_in_reg_119;
wire   [25:0] tmp_167_fu_383_p4;
wire   [25:0] tmp_166_fu_392_p4;
reg   [6:0] cht_03_fu_78;
wire   [6:0] cht_fu_309_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [6:0] ap_sig_allocacmp_cht_8;
reg   [1:0] h_fu_82;
reg   [1:0] ap_sig_allocacmp_h_load;
reg   [8:0] indvar_flatten_fu_86;
wire   [8:0] select_ln63_1_fu_216_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten10_fu_90;
wire   [14:0] add_ln62_fu_192_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten10_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln63_1_fu_210_p2;
wire   [0:0] icmp_ln64_fu_272_p2;
wire   [0:0] xor_ln62_fu_267_p2;
wire   [1:0] select_ln62_fu_260_p3;
wire   [0:0] and_ln62_fu_278_p2;
wire   [1:0] h_6_fu_284_p2;
wire   [0:0] or_ln64_fu_304_p2;
wire   [6:0] add_ln64_fu_298_p2;
wire   [9:0] trunc_ln77_1_fu_414_p4;
wire   [9:0] trunc_ln77_fu_410_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_207;
reg    ap_condition_229;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cht_03_fu_78 = 7'd0;
//#0 h_fu_82 = 2'd0;
//#0 indvar_flatten_fu_86 = 9'd0;
//#0 indvar_flatten10_fu_90 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_207)) begin
        if ((icmp_ln62_reg_477 == 1'd0)) begin
            cht_03_fu_78 <= cht_fu_309_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            cht_03_fu_78 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_207)) begin
        if ((icmp_ln62_reg_477 == 1'd0)) begin
            h_fu_82 <= select_ln63_fu_290_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            h_fu_82 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_229)) begin
        if ((icmp_ln62_fu_198_p2 == 1'd0)) begin
            indvar_flatten10_fu_90 <= add_ln62_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_90 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_229)) begin
        if ((icmp_ln62_fu_198_p2 == 1'd0)) begin
            indvar_flatten_fu_86 <= select_ln63_1_fu_216_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln62_reg_477 <= icmp_ln62_fu_198_p2;
        icmp_ln62_reg_477_pp0_iter1_reg <= icmp_ln62_reg_477;
        icmp_ln63_reg_481 <= icmp_ln63_fu_204_p2;
        select_ln63_reg_488 <= select_ln63_fu_290_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln62_reg_477_pp0_iter2_reg <= icmp_ln62_reg_477_pp0_iter1_reg;
        select_ln63_reg_488_pp0_iter2_reg <= select_ln63_reg_488;
        trunc_ln70_1_reg_517 <= {{a_sm_head1_dout[19:10]}};
        trunc_ln70_reg_512 <= trunc_ln70_fu_369_p1;
        trunc_ln72_1_reg_497 <= {{a_sm_head2_dout[19:10]}};
        trunc_ln72_reg_492 <= trunc_ln72_fu_341_p1;
        trunc_ln74_1_reg_507 <= {{a_sm_head3_dout[19:10]}};
        trunc_ln74_reg_502 <= trunc_ln74_fu_355_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_blk_n = a_sm_full_n;
    end else begin
        a_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op76_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_head1_blk_n = a_sm_head1_empty_n;
    end else begin
        a_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op76_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_head1_read = 1'b1;
    end else begin
        a_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op68_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_head2_blk_n = a_sm_head2_empty_n;
    end else begin
        a_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op68_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_head2_read = 1'b1;
    end else begin
        a_sm_head2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op72_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_head3_blk_n = a_sm_head3_empty_n;
    end else begin
        a_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op72_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_head3_read = 1'b1;
    end else begin
        a_sm_head3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_write = 1'b1;
    end else begin
        a_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln62_fu_198_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_477 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln62_reg_477_pp0_iter2_reg == 1'd0)) begin
        if ((select_ln63_reg_488_pp0_iter2_reg == 2'd2)) begin
            ap_phi_mux_vec_o_2_in_phi_fu_122_p6 = tmp_166_fu_392_p4;
        end else if ((select_ln63_reg_488_pp0_iter2_reg == 2'd1)) begin
            ap_phi_mux_vec_o_2_in_phi_fu_122_p6 = tmp_167_fu_383_p4;
        end else if ((~(select_ln63_reg_488_pp0_iter2_reg == 2'd1) & ~(select_ln63_reg_488_pp0_iter2_reg == 2'd2))) begin
            ap_phi_mux_vec_o_2_in_phi_fu_122_p6 = tmp_fu_401_p4;
        end else begin
            ap_phi_mux_vec_o_2_in_phi_fu_122_p6 = ap_phi_reg_pp0_iter3_vec_o_2_in_reg_119;
        end
    end else begin
        ap_phi_mux_vec_o_2_in_phi_fu_122_p6 = ap_phi_reg_pp0_iter3_vec_o_2_in_reg_119;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cht_8 = 7'd0;
    end else begin
        ap_sig_allocacmp_cht_8 = cht_03_fu_78;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_h_load = 2'd0;
    end else begin
        ap_sig_allocacmp_h_load = h_fu_82;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_90;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_86;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_din = {{trunc_ln77_1_fu_414_p4}, {trunc_ln77_fu_410_p1}};

assign add_ln62_fu_192_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 15'd1);

assign add_ln63_1_fu_210_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln64_fu_298_p2 = (ap_sig_allocacmp_cht_8 + 7'd1);

assign and_ln62_fu_278_p2 = (xor_ln62_fu_267_p2 & icmp_ln64_fu_272_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op76_read_state3 == 1'b1) & (1'b0 == a_sm_head1_empty_n)) | ((ap_predicate_op72_read_state3 == 1'b1) & (1'b0 == a_sm_head3_empty_n)) | ((ap_predicate_op68_read_state3 == 1'b1) & (1'b0 == a_sm_head2_empty_n)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (1'b0 == a_sm_full_n);
end

always @ (*) begin
    ap_condition_207 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_229 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter3_vec_o_2_in_reg_119 = 'bx;

always @ (*) begin
    ap_predicate_op68_read_state3 = ((select_ln63_reg_488 == 2'd1) & (icmp_ln62_reg_477_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op72_read_state3 = ((select_ln63_reg_488 == 2'd2) & (icmp_ln62_reg_477_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op76_read_state3 = (~(select_ln63_reg_488 == 2'd2) & ~(select_ln63_reg_488 == 2'd1) & (icmp_ln62_reg_477_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cht_fu_309_p3 = ((or_ln64_fu_304_p2[0:0] == 1'b1) ? 7'd1 : add_ln64_fu_298_p2);

assign h_6_fu_284_p2 = (select_ln62_fu_260_p3 + 2'd1);

assign icmp_ln62_fu_198_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_204_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_272_p2 = ((ap_sig_allocacmp_cht_8 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln64_fu_304_p2 = (icmp_ln63_reg_481 | and_ln62_fu_278_p2);

assign select_ln62_fu_260_p3 = ((icmp_ln63_reg_481[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_h_load);

assign select_ln63_1_fu_216_p3 = ((icmp_ln63_fu_204_p2[0:0] == 1'b1) ? 9'd1 : add_ln63_1_fu_210_p2);

assign select_ln63_fu_290_p3 = ((and_ln62_fu_278_p2[0:0] == 1'b1) ? h_6_fu_284_p2 : select_ln62_fu_260_p3);

assign start_out = real_start;

assign tmp_166_fu_392_p4 = {{{trunc_ln74_1_reg_507}, {6'd0}}, {trunc_ln74_reg_502}};

assign tmp_167_fu_383_p4 = {{{trunc_ln72_1_reg_497}, {6'd0}}, {trunc_ln72_reg_492}};

assign tmp_fu_401_p4 = {{{trunc_ln70_1_reg_517}, {6'd0}}, {trunc_ln70_reg_512}};

assign trunc_ln70_fu_369_p1 = a_sm_head1_dout[9:0];

assign trunc_ln72_fu_341_p1 = a_sm_head2_dout[9:0];

assign trunc_ln74_fu_355_p1 = a_sm_head3_dout[9:0];

assign trunc_ln77_1_fu_414_p4 = {{ap_phi_mux_vec_o_2_in_phi_fu_122_p6[25:16]}};

assign trunc_ln77_fu_410_p1 = ap_phi_mux_vec_o_2_in_phi_fu_122_p6[9:0];

assign xor_ln62_fu_267_p2 = (icmp_ln63_reg_481 ^ 1'd1);

endmodule //ATTN11_do_merge
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_quant (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        q_sm_dout,
        q_sm_num_data_valid,
        q_sm_fifo_cap,
        q_sm_empty_n,
        q_sm_read,
        qq_sm_din,
        qq_sm_num_data_valid,
        qq_sm_fifo_cap,
        qq_sm_full_n,
        qq_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] q_sm_dout;
input  [2:0] q_sm_num_data_valid;
input  [2:0] q_sm_fifo_cap;
input   q_sm_empty_n;
output   q_sm_read;
output  [5:0] qq_sm_din;
input  [2:0] qq_sm_num_data_valid;
input  [2:0] qq_sm_fifo_cap;
input   qq_sm_full_n;
output   qq_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg q_sm_read;
reg qq_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_138_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] attn_inst_quant_q_table_address0;
reg    attn_inst_quant_q_table_ce0;
wire   [2:0] attn_inst_quant_q_table_q0;
wire   [5:0] attn_inst_quant_q_table_address1;
reg    attn_inst_quant_q_table_ce1;
wire   [2:0] attn_inst_quant_q_table_q1;
reg    q_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    qq_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] add_ln67_fu_162_p2;
reg   [11:0] add_ln67_reg_345;
reg   [0:0] tmp_reg_350;
reg   [2:0] tmp_31_reg_356;
wire   [11:0] add_ln67_1_fu_196_p2;
reg   [11:0] add_ln67_1_reg_361;
reg   [0:0] tmp_32_reg_366;
reg   [2:0] tmp_33_reg_372;
wire   [63:0] zext_ln69_fu_260_p1;
wire   [63:0] zext_ln69_1_fu_309_p1;
reg   [14:0] indvar_flatten_fu_72;
wire   [14:0] add_ln54_fu_132_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] trunc_ln59_fu_158_p1;
wire   [11:0] trunc_ln_fu_186_p4;
wire   [0:0] xor_ln7_fu_234_p2;
wire   [0:0] icmp_ln8_fu_229_p2;
wire   [0:0] or_ln7_fu_247_p2;
wire   [5:0] select_ln7_fu_239_p3;
wire   [5:0] trunc_ln67_1_fu_220_p4;
wire   [5:0] cursor_fu_252_p3;
wire   [0:0] xor_ln7_1_fu_283_p2;
wire   [0:0] icmp_ln8_7_fu_278_p2;
wire   [0:0] or_ln7_1_fu_296_p2;
wire   [5:0] select_ln7_11_fu_288_p3;
wire   [5:0] trunc_ln67_3_fu_269_p4;
wire   [5:0] cursor_4_fu_301_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_72 = 15'd0;
end

ATTN11_do_quant_attn_inst_quant_q_table_ROM_AUTO_1R #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_q_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_q_table_address0),
    .ce0(attn_inst_quant_q_table_ce0),
    .q0(attn_inst_quant_q_table_q0),
    .address1(attn_inst_quant_q_table_address1),
    .ce1(attn_inst_quant_q_table_ce1),
    .q1(attn_inst_quant_q_table_q1)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln54_fu_138_p2 == 1'd0)) begin
            indvar_flatten_fu_72 <= add_ln54_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln67_1_reg_361 <= add_ln67_1_fu_196_p2;
        add_ln67_reg_345 <= add_ln67_fu_162_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_31_reg_356 <= {{add_ln67_fu_162_p2[11:9]}};
        tmp_32_reg_366 <= add_ln67_1_fu_196_p2[32'd11];
        tmp_33_reg_372 <= {{add_ln67_1_fu_196_p2[11:9]}};
        tmp_reg_350 <= add_ln67_fu_162_p2[32'd11];
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_q_table_ce0 = 1'b1;
    end else begin
        attn_inst_quant_q_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_q_table_ce1 = 1'b1;
    end else begin
        attn_inst_quant_q_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_sm_blk_n = q_sm_empty_n;
    end else begin
        q_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_sm_read = 1'b1;
    end else begin
        q_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        qq_sm_blk_n = qq_sm_full_n;
    end else begin
        qq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        qq_sm_write = 1'b1;
    end else begin
        qq_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_132_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln67_1_fu_196_p2 = (trunc_ln_fu_186_p4 + 12'd189);

assign add_ln67_fu_162_p2 = (trunc_ln59_fu_158_p1 + 12'd189);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (q_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (qq_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign attn_inst_quant_q_table_address0 = zext_ln69_1_fu_309_p1;

assign attn_inst_quant_q_table_address1 = zext_ln69_fu_260_p1;

assign cursor_4_fu_301_p3 = ((or_ln7_1_fu_296_p2[0:0] == 1'b1) ? select_ln7_11_fu_288_p3 : trunc_ln67_3_fu_269_p4);

assign cursor_fu_252_p3 = ((or_ln7_fu_247_p2[0:0] == 1'b1) ? select_ln7_fu_239_p3 : trunc_ln67_1_fu_220_p4);

assign icmp_ln54_fu_138_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln8_7_fu_278_p2 = (($signed(tmp_33_reg_372) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_229_p2 = (($signed(tmp_31_reg_356) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign or_ln7_1_fu_296_p2 = (tmp_32_reg_366 | icmp_ln8_7_fu_278_p2);

assign or_ln7_fu_247_p2 = (tmp_reg_350 | icmp_ln8_fu_229_p2);

assign qq_sm_din = {{attn_inst_quant_q_table_q0}, {attn_inst_quant_q_table_q1}};

assign select_ln7_11_fu_288_p3 = ((xor_ln7_1_fu_283_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_239_p3 = ((xor_ln7_fu_234_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign start_out = real_start;

assign trunc_ln59_fu_158_p1 = q_sm_dout[11:0];

assign trunc_ln67_1_fu_220_p4 = {{add_ln67_reg_345[8:3]}};

assign trunc_ln67_3_fu_269_p4 = {{add_ln67_1_reg_361[8:3]}};

assign trunc_ln_fu_186_p4 = {{q_sm_dout[23:12]}};

assign xor_ln7_1_fu_283_p2 = (tmp_32_reg_366 ^ 1'd1);

assign xor_ln7_fu_234_p2 = (tmp_reg_350 ^ 1'd1);

assign zext_ln69_1_fu_309_p1 = cursor_4_fu_301_p3;

assign zext_ln69_fu_260_p1 = cursor_fu_252_p3;

endmodule //ATTN11_do_quant
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_quant_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        v_sm_dout,
        v_sm_num_data_valid,
        v_sm_fifo_cap,
        v_sm_empty_n,
        v_sm_read,
        vq_sm_din,
        vq_sm_num_data_valid,
        vq_sm_fifo_cap,
        vq_sm_full_n,
        vq_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] v_sm_dout;
input  [2:0] v_sm_num_data_valid;
input  [2:0] v_sm_fifo_cap;
input   v_sm_empty_n;
output   v_sm_read;
output  [5:0] vq_sm_din;
input  [2:0] vq_sm_num_data_valid;
input  [2:0] vq_sm_fifo_cap;
input   vq_sm_full_n;
output   vq_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg v_sm_read;
reg vq_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] attn_inst_quant_v_table_address0;
reg    attn_inst_quant_v_table_ce0;
wire   [2:0] attn_inst_quant_v_table_q0;
wire   [5:0] attn_inst_quant_v_table_address1;
reg    attn_inst_quant_v_table_ce1;
wire   [2:0] attn_inst_quant_v_table_q1;
reg    v_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    vq_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln67_fu_174_p2;
reg   [10:0] add_ln67_reg_351;
reg   [0:0] tmp_reg_356;
reg   [2:0] tmp_28_reg_362;
wire   [10:0] add_ln67_3_fu_202_p2;
reg   [10:0] add_ln67_3_reg_367;
reg   [0:0] tmp_29_reg_372;
reg   [2:0] tmp_30_reg_378;
wire   [63:0] zext_ln69_fu_266_p1;
wire   [63:0] zext_ln69_3_fu_315_p1;
reg   [14:0] indvar_flatten_fu_70;
wire   [14:0] add_ln54_fu_130_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln59_fu_156_p1;
wire  signed [10:0] sext_ln67_fu_170_p1;
wire   [9:0] trunc_ln59_2_fu_160_p4;
wire  signed [10:0] sext_ln67_2_fu_198_p1;
wire   [0:0] xor_ln7_fu_240_p2;
wire   [0:0] icmp_ln8_fu_235_p2;
wire   [0:0] or_ln7_fu_253_p2;
wire   [5:0] select_ln7_fu_245_p3;
wire   [5:0] trunc_ln67_6_fu_226_p4;
wire   [5:0] cursor_fu_258_p3;
wire   [0:0] xor_ln7_3_fu_289_p2;
wire   [0:0] icmp_ln8_6_fu_284_p2;
wire   [0:0] or_ln7_3_fu_302_p2;
wire   [5:0] select_ln7_8_fu_294_p3;
wire   [5:0] trunc_ln67_7_fu_275_p4;
wire   [5:0] cursor_3_fu_307_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_70 = 15'd0;
end

ATTN11_do_quant_1_attn_inst_quant_v_table_ROM_AUTO_1R #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_v_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_v_table_address0),
    .ce0(attn_inst_quant_v_table_ce0),
    .q0(attn_inst_quant_v_table_q0),
    .address1(attn_inst_quant_v_table_address1),
    .ce1(attn_inst_quant_v_table_ce1),
    .q1(attn_inst_quant_v_table_q1)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln54_fu_136_p2 == 1'd0)) begin
            indvar_flatten_fu_70 <= add_ln54_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln67_3_reg_367 <= add_ln67_3_fu_202_p2;
        add_ln67_reg_351 <= add_ln67_fu_174_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_28_reg_362 <= {{add_ln67_fu_174_p2[10:8]}};
        tmp_29_reg_372 <= add_ln67_3_fu_202_p2[32'd10];
        tmp_30_reg_378 <= {{add_ln67_3_fu_202_p2[10:8]}};
        tmp_reg_356 <= add_ln67_fu_174_p2[32'd10];
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_v_table_ce0 = 1'b1;
    end else begin
        attn_inst_quant_v_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_v_table_ce1 = 1'b1;
    end else begin
        attn_inst_quant_v_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_sm_blk_n = v_sm_empty_n;
    end else begin
        v_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_sm_read = 1'b1;
    end else begin
        v_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        vq_sm_blk_n = vq_sm_full_n;
    end else begin
        vq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        vq_sm_write = 1'b1;
    end else begin
        vq_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln67_3_fu_202_p2 = ($signed(sext_ln67_2_fu_198_p1) + $signed(11'd110));

assign add_ln67_fu_174_p2 = ($signed(sext_ln67_fu_170_p1) + $signed(11'd110));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (v_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (vq_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign attn_inst_quant_v_table_address0 = zext_ln69_3_fu_315_p1;

assign attn_inst_quant_v_table_address1 = zext_ln69_fu_266_p1;

assign cursor_3_fu_307_p3 = ((or_ln7_3_fu_302_p2[0:0] == 1'b1) ? select_ln7_8_fu_294_p3 : trunc_ln67_7_fu_275_p4);

assign cursor_fu_258_p3 = ((or_ln7_fu_253_p2[0:0] == 1'b1) ? select_ln7_fu_245_p3 : trunc_ln67_6_fu_226_p4);

assign icmp_ln54_fu_136_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln8_6_fu_284_p2 = (($signed(tmp_30_reg_378) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_235_p2 = (($signed(tmp_28_reg_362) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign or_ln7_3_fu_302_p2 = (tmp_29_reg_372 | icmp_ln8_6_fu_284_p2);

assign or_ln7_fu_253_p2 = (tmp_reg_356 | icmp_ln8_fu_235_p2);

assign select_ln7_8_fu_294_p3 = ((xor_ln7_3_fu_289_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_245_p3 = ((xor_ln7_fu_240_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign sext_ln67_2_fu_198_p1 = $signed(trunc_ln59_2_fu_160_p4);

assign sext_ln67_fu_170_p1 = $signed(trunc_ln59_fu_156_p1);

assign start_out = real_start;

assign trunc_ln59_2_fu_160_p4 = {{v_sm_dout[19:10]}};

assign trunc_ln59_fu_156_p1 = v_sm_dout[9:0];

assign trunc_ln67_6_fu_226_p4 = {{add_ln67_reg_351[7:2]}};

assign trunc_ln67_7_fu_275_p4 = {{add_ln67_3_reg_367[7:2]}};

assign vq_sm_din = {{attn_inst_quant_v_table_q0}, {attn_inst_quant_v_table_q1}};

assign xor_ln7_3_fu_289_p2 = (tmp_29_reg_372 ^ 1'd1);

assign xor_ln7_fu_240_p2 = (tmp_reg_356 ^ 1'd1);

assign zext_ln69_3_fu_315_p1 = cursor_3_fu_307_p3;

assign zext_ln69_fu_266_p1 = cursor_fu_258_p3;

endmodule //ATTN11_do_quant_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_quant_1_attn_inst_quant_v_table_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 3;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_quant_1_attn_inst_quant_v_table_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_quant_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        k_sm_dout,
        k_sm_num_data_valid,
        k_sm_fifo_cap,
        k_sm_empty_n,
        k_sm_read,
        kq_sm_din,
        kq_sm_num_data_valid,
        kq_sm_fifo_cap,
        kq_sm_full_n,
        kq_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] k_sm_dout;
input  [2:0] k_sm_num_data_valid;
input  [2:0] k_sm_fifo_cap;
input   k_sm_empty_n;
output   k_sm_read;
output  [5:0] kq_sm_din;
input  [2:0] kq_sm_num_data_valid;
input  [2:0] kq_sm_fifo_cap;
input   kq_sm_full_n;
output   kq_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg k_sm_read;
reg kq_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] attn_inst_quant_k_table_address0;
reg    attn_inst_quant_k_table_ce0;
wire   [2:0] attn_inst_quant_k_table_q0;
wire   [5:0] attn_inst_quant_k_table_address1;
reg    attn_inst_quant_k_table_ce1;
wire   [2:0] attn_inst_quant_k_table_q1;
reg    k_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    kq_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln67_fu_174_p2;
reg   [10:0] add_ln67_reg_351;
reg   [0:0] tmp_reg_356;
reg   [2:0] tmp_25_reg_362;
wire   [10:0] add_ln67_2_fu_202_p2;
reg   [10:0] add_ln67_2_reg_367;
reg   [0:0] tmp_26_reg_372;
reg   [2:0] tmp_27_reg_378;
wire   [63:0] zext_ln69_fu_266_p1;
wire   [63:0] zext_ln69_2_fu_315_p1;
reg   [14:0] indvar_flatten_fu_70;
wire   [14:0] add_ln54_fu_130_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln59_fu_156_p1;
wire  signed [10:0] sext_ln67_fu_170_p1;
wire   [9:0] trunc_ln59_1_fu_160_p4;
wire  signed [10:0] sext_ln67_1_fu_198_p1;
wire   [0:0] xor_ln7_fu_240_p2;
wire   [0:0] icmp_ln8_fu_235_p2;
wire   [0:0] or_ln7_fu_253_p2;
wire   [5:0] select_ln7_fu_245_p3;
wire   [5:0] trunc_ln67_4_fu_226_p4;
wire   [5:0] cursor_fu_258_p3;
wire   [0:0] xor_ln7_2_fu_289_p2;
wire   [0:0] icmp_ln8_5_fu_284_p2;
wire   [0:0] or_ln7_2_fu_302_p2;
wire   [5:0] select_ln7_5_fu_294_p3;
wire   [5:0] trunc_ln67_5_fu_275_p4;
wire   [5:0] cursor_2_fu_307_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_70 = 15'd0;
end

ATTN11_do_quant_2_attn_inst_quant_k_table_ROM_AUTO_1R #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_k_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_k_table_address0),
    .ce0(attn_inst_quant_k_table_ce0),
    .q0(attn_inst_quant_k_table_q0),
    .address1(attn_inst_quant_k_table_address1),
    .ce1(attn_inst_quant_k_table_ce1),
    .q1(attn_inst_quant_k_table_q1)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln54_fu_136_p2 == 1'd0)) begin
            indvar_flatten_fu_70 <= add_ln54_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln67_2_reg_367 <= add_ln67_2_fu_202_p2;
        add_ln67_reg_351 <= add_ln67_fu_174_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_25_reg_362 <= {{add_ln67_fu_174_p2[10:8]}};
        tmp_26_reg_372 <= add_ln67_2_fu_202_p2[32'd10];
        tmp_27_reg_378 <= {{add_ln67_2_fu_202_p2[10:8]}};
        tmp_reg_356 <= add_ln67_fu_174_p2[32'd10];
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_k_table_ce0 = 1'b1;
    end else begin
        attn_inst_quant_k_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_k_table_ce1 = 1'b1;
    end else begin
        attn_inst_quant_k_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_sm_blk_n = k_sm_empty_n;
    end else begin
        k_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_sm_read = 1'b1;
    end else begin
        k_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        kq_sm_blk_n = kq_sm_full_n;
    end else begin
        kq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        kq_sm_write = 1'b1;
    end else begin
        kq_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln67_2_fu_202_p2 = ($signed(sext_ln67_1_fu_198_p1) + $signed(11'd77));

assign add_ln67_fu_174_p2 = ($signed(sext_ln67_fu_170_p1) + $signed(11'd77));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (k_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (kq_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign attn_inst_quant_k_table_address0 = zext_ln69_2_fu_315_p1;

assign attn_inst_quant_k_table_address1 = zext_ln69_fu_266_p1;

assign cursor_2_fu_307_p3 = ((or_ln7_2_fu_302_p2[0:0] == 1'b1) ? select_ln7_5_fu_294_p3 : trunc_ln67_5_fu_275_p4);

assign cursor_fu_258_p3 = ((or_ln7_fu_253_p2[0:0] == 1'b1) ? select_ln7_fu_245_p3 : trunc_ln67_4_fu_226_p4);

assign icmp_ln54_fu_136_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln8_5_fu_284_p2 = (($signed(tmp_27_reg_378) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_235_p2 = (($signed(tmp_25_reg_362) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign kq_sm_din = {{attn_inst_quant_k_table_q0}, {attn_inst_quant_k_table_q1}};

assign or_ln7_2_fu_302_p2 = (tmp_26_reg_372 | icmp_ln8_5_fu_284_p2);

assign or_ln7_fu_253_p2 = (tmp_reg_356 | icmp_ln8_fu_235_p2);

assign select_ln7_5_fu_294_p3 = ((xor_ln7_2_fu_289_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_245_p3 = ((xor_ln7_fu_240_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign sext_ln67_1_fu_198_p1 = $signed(trunc_ln59_1_fu_160_p4);

assign sext_ln67_fu_170_p1 = $signed(trunc_ln59_fu_156_p1);

assign start_out = real_start;

assign trunc_ln59_1_fu_160_p4 = {{k_sm_dout[19:10]}};

assign trunc_ln59_fu_156_p1 = k_sm_dout[9:0];

assign trunc_ln67_4_fu_226_p4 = {{add_ln67_reg_351[7:2]}};

assign trunc_ln67_5_fu_275_p4 = {{add_ln67_2_reg_367[7:2]}};

assign xor_ln7_2_fu_289_p2 = (tmp_26_reg_372 ^ 1'd1);

assign xor_ln7_fu_240_p2 = (tmp_reg_356 ^ 1'd1);

assign zext_ln69_2_fu_315_p1 = cursor_2_fu_307_p3;

assign zext_ln69_fu_266_p1 = cursor_fu_258_p3;

endmodule //ATTN11_do_quant_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_quant_2_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        a_sm_dout,
        a_sm_num_data_valid,
        a_sm_fifo_cap,
        a_sm_empty_n,
        a_sm_read,
        aq_sm_din,
        aq_sm_num_data_valid,
        aq_sm_fifo_cap,
        aq_sm_full_n,
        aq_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] a_sm_dout;
input  [2:0] a_sm_num_data_valid;
input  [2:0] a_sm_fifo_cap;
input   a_sm_empty_n;
output   a_sm_read;
output  [5:0] aq_sm_din;
input  [2:0] aq_sm_num_data_valid;
input  [2:0] aq_sm_fifo_cap;
input   aq_sm_full_n;
output   aq_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg a_sm_read;
reg aq_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_138_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] attn_inst_quant_a_table_address0;
reg    attn_inst_quant_a_table_ce0;
wire   [2:0] attn_inst_quant_a_table_q0;
wire   [5:0] attn_inst_quant_a_table_address1;
reg    attn_inst_quant_a_table_ce1;
wire   [2:0] attn_inst_quant_a_table_q1;
reg    a_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    aq_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln67_fu_162_p2;
reg   [9:0] add_ln67_reg_345;
reg   [0:0] tmp_reg_350;
reg   [1:0] tmp_22_reg_356;
wire   [9:0] add_ln67_1_fu_196_p2;
reg   [9:0] add_ln67_1_reg_361;
reg   [0:0] tmp_23_reg_366;
reg   [1:0] tmp_24_reg_372;
wire   [63:0] zext_ln69_fu_260_p1;
wire   [63:0] zext_ln69_1_fu_309_p1;
reg   [14:0] indvar_flatten_fu_72;
wire   [14:0] add_ln54_fu_132_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln59_fu_158_p1;
wire   [9:0] trunc_ln_fu_186_p4;
wire   [0:0] xor_ln7_fu_234_p2;
wire   [0:0] icmp_ln8_fu_229_p2;
wire   [0:0] or_ln7_fu_247_p2;
wire   [5:0] select_ln7_fu_239_p3;
wire   [5:0] trunc_ln67_8_fu_220_p4;
wire   [5:0] cursor_fu_252_p3;
wire   [0:0] xor_ln7_1_fu_283_p2;
wire   [0:0] icmp_ln8_4_fu_278_p2;
wire   [0:0] or_ln7_1_fu_296_p2;
wire   [5:0] select_ln7_2_fu_288_p3;
wire   [5:0] trunc_ln67_s_fu_269_p4;
wire   [5:0] cursor_1_fu_301_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_72 = 15'd0;
end

ATTN11_do_quant_2_1_attn_inst_quant_a_table_ROM_AUTO_1R #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_a_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_a_table_address0),
    .ce0(attn_inst_quant_a_table_ce0),
    .q0(attn_inst_quant_a_table_q0),
    .address1(attn_inst_quant_a_table_address1),
    .ce1(attn_inst_quant_a_table_ce1),
    .q1(attn_inst_quant_a_table_q1)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln54_fu_138_p2 == 1'd0)) begin
            indvar_flatten_fu_72 <= add_ln54_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln67_1_reg_361 <= add_ln67_1_fu_196_p2;
        add_ln67_reg_345 <= add_ln67_fu_162_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_22_reg_356 <= {{add_ln67_fu_162_p2[9:8]}};
        tmp_23_reg_366 <= add_ln67_1_fu_196_p2[32'd9];
        tmp_24_reg_372 <= {{add_ln67_1_fu_196_p2[9:8]}};
        tmp_reg_350 <= add_ln67_fu_162_p2[32'd9];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_sm_blk_n = a_sm_empty_n;
    end else begin
        a_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_sm_read = 1'b1;
    end else begin
        a_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        aq_sm_blk_n = aq_sm_full_n;
    end else begin
        aq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        aq_sm_write = 1'b1;
    end else begin
        aq_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_a_table_ce0 = 1'b1;
    end else begin
        attn_inst_quant_a_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_quant_a_table_ce1 = 1'b1;
    end else begin
        attn_inst_quant_a_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_132_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln67_1_fu_196_p2 = (trunc_ln_fu_186_p4 + 10'd102);

assign add_ln67_fu_162_p2 = (trunc_ln59_fu_158_p1 + 10'd102);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == a_sm_empty_n);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (aq_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign aq_sm_din = {{attn_inst_quant_a_table_q0}, {attn_inst_quant_a_table_q1}};

assign attn_inst_quant_a_table_address0 = zext_ln69_1_fu_309_p1;

assign attn_inst_quant_a_table_address1 = zext_ln69_fu_260_p1;

assign cursor_1_fu_301_p3 = ((or_ln7_1_fu_296_p2[0:0] == 1'b1) ? select_ln7_2_fu_288_p3 : trunc_ln67_s_fu_269_p4);

assign cursor_fu_252_p3 = ((or_ln7_fu_247_p2[0:0] == 1'b1) ? select_ln7_fu_239_p3 : trunc_ln67_8_fu_220_p4);

assign icmp_ln54_fu_138_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln8_4_fu_278_p2 = ((tmp_24_reg_372 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_229_p2 = ((tmp_22_reg_356 == 2'd1) ? 1'b1 : 1'b0);

assign or_ln7_1_fu_296_p2 = (tmp_23_reg_366 | icmp_ln8_4_fu_278_p2);

assign or_ln7_fu_247_p2 = (tmp_reg_350 | icmp_ln8_fu_229_p2);

assign select_ln7_2_fu_288_p3 = ((xor_ln7_1_fu_283_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_239_p3 = ((xor_ln7_fu_234_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign start_out = real_start;

assign trunc_ln59_fu_158_p1 = a_sm_dout[9:0];

assign trunc_ln67_8_fu_220_p4 = {{add_ln67_reg_345[7:2]}};

assign trunc_ln67_s_fu_269_p4 = {{add_ln67_1_reg_361[7:2]}};

assign trunc_ln_fu_186_p4 = {{a_sm_dout[19:10]}};

assign xor_ln7_1_fu_283_p2 = (tmp_23_reg_366 ^ 1'd1);

assign xor_ln7_fu_234_p2 = (tmp_reg_350 ^ 1'd1);

assign zext_ln69_1_fu_309_p1 = cursor_1_fu_301_p3;

assign zext_ln69_fu_260_p1 = cursor_fu_252_p3;

endmodule //ATTN11_do_quant_2_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_quant_2_1_attn_inst_quant_a_table_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 3;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_quant_2_1_attn_inst_quant_a_table_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_quant_2_attn_inst_quant_k_table_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 3;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_quant_2_attn_inst_quant_k_table_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_quant_attn_inst_quant_q_table_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 3;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_quant_attn_inst_quant_q_table_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_reshape (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        vq_sm_head3_dout,
        vq_sm_head3_empty_n,
        vq_sm_head3_read,
        vq_sm_transpose_head3_din,
        vq_sm_transpose_head3_full_n,
        vq_sm_transpose_head3_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] vq_sm_head3_dout;
input   vq_sm_head3_empty_n;
output   vq_sm_head3_read;
output  [83:0] vq_sm_transpose_head3_din;
input   vq_sm_transpose_head3_full_n;
output   vq_sm_transpose_head3_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    unpack_U0_ap_start;
wire    unpack_U0_ap_done;
wire    unpack_U0_ap_continue;
wire    unpack_U0_ap_idle;
wire    unpack_U0_ap_ready;
wire   [2:0] unpack_U0_unpacked_stream_din;
wire    unpack_U0_unpacked_stream_write;
wire    unpack_U0_vq_sm_head3_read;
wire    unpack_U0_start_out;
wire    unpack_U0_start_write;
wire    reorder_U0_ap_start;
wire    reorder_U0_ap_done;
wire    reorder_U0_ap_continue;
wire    reorder_U0_ap_idle;
wire    reorder_U0_ap_ready;
wire    reorder_U0_unpacked_stream_read;
wire   [83:0] reorder_U0_vq_sm_transpose_head3_din;
wire    reorder_U0_vq_sm_transpose_head3_write;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire   [2:0] unpacked_stream_num_data_valid;
wire   [2:0] unpacked_stream_fifo_cap;
wire    unpacked_stream_empty_n;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder_U0_din;
wire    start_for_reorder_U0_full_n;
wire   [0:0] start_for_reorder_U0_dout;
wire    start_for_reorder_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN11_unpack unpack_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack_U0_ap_start),
    .start_full_n(start_for_reorder_U0_full_n),
    .ap_done(unpack_U0_ap_done),
    .ap_continue(unpack_U0_ap_continue),
    .ap_idle(unpack_U0_ap_idle),
    .ap_ready(unpack_U0_ap_ready),
    .unpacked_stream_din(unpack_U0_unpacked_stream_din),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_full_n(unpacked_stream_full_n),
    .unpacked_stream_write(unpack_U0_unpacked_stream_write),
    .vq_sm_head3_dout(vq_sm_head3_dout),
    .vq_sm_head3_num_data_valid(7'd0),
    .vq_sm_head3_fifo_cap(7'd0),
    .vq_sm_head3_empty_n(vq_sm_head3_empty_n),
    .vq_sm_head3_read(unpack_U0_vq_sm_head3_read),
    .start_out(unpack_U0_start_out),
    .start_write(unpack_U0_start_write)
);

ATTN11_reorder reorder_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder_U0_ap_start),
    .ap_done(reorder_U0_ap_done),
    .ap_continue(reorder_U0_ap_continue),
    .ap_idle(reorder_U0_ap_idle),
    .ap_ready(reorder_U0_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(reorder_U0_unpacked_stream_read),
    .vq_sm_transpose_head3_din(reorder_U0_vq_sm_transpose_head3_din),
    .vq_sm_transpose_head3_num_data_valid(10'd0),
    .vq_sm_transpose_head3_fifo_cap(10'd0),
    .vq_sm_transpose_head3_full_n(vq_sm_transpose_head3_full_n),
    .vq_sm_transpose_head3_write(reorder_U0_vq_sm_transpose_head3_write)
);

ATTN11_fifo_w3_d2_S_x3 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack_U0_unpacked_stream_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack_U0_unpacked_stream_write),
    .if_dout(unpacked_stream_dout),
    .if_num_data_valid(unpacked_stream_num_data_valid),
    .if_fifo_cap(unpacked_stream_fifo_cap),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder_U0_unpacked_stream_read)
);

ATTN11_start_for_reorder_U0 start_for_reorder_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder_U0_din),
    .if_full_n(start_for_reorder_U0_full_n),
    .if_write(unpack_U0_start_write),
    .if_dout(start_for_reorder_U0_dout),
    .if_empty_n(start_for_reorder_U0_empty_n),
    .if_read(reorder_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = reorder_U0_ap_done;

assign ap_idle = (unpack_U0_ap_idle & reorder_U0_ap_idle);

assign ap_ready = unpack_U0_ap_ready;

assign ap_sync_ready = unpack_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign reorder_U0_ap_continue = ap_continue;

assign reorder_U0_ap_start = start_for_reorder_U0_empty_n;

assign start_for_reorder_U0_din = 1'b1;

assign start_out = real_start;

assign unpack_U0_ap_continue = 1'b1;

assign unpack_U0_ap_start = real_start;

assign vq_sm_head3_read = unpack_U0_vq_sm_head3_read;

assign vq_sm_transpose_head3_din = reorder_U0_vq_sm_transpose_head3_din;

assign vq_sm_transpose_head3_write = reorder_U0_vq_sm_transpose_head3_write;

endmodule //ATTN11_do_reshape
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_reshape_12 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        vq_sm_head1_dout,
        vq_sm_head1_empty_n,
        vq_sm_head1_read,
        vq_sm_transpose_head1_din,
        vq_sm_transpose_head1_full_n,
        vq_sm_transpose_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] vq_sm_head1_dout;
input   vq_sm_head1_empty_n;
output   vq_sm_head1_read;
output  [83:0] vq_sm_transpose_head1_din;
input   vq_sm_transpose_head1_full_n;
output   vq_sm_transpose_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    unpack_42_U0_ap_start;
wire    unpack_42_U0_ap_done;
wire    unpack_42_U0_ap_continue;
wire    unpack_42_U0_ap_idle;
wire    unpack_42_U0_ap_ready;
wire   [2:0] unpack_42_U0_unpacked_stream_din;
wire    unpack_42_U0_unpacked_stream_write;
wire    unpack_42_U0_vq_sm_head1_read;
wire    unpack_42_U0_start_out;
wire    unpack_42_U0_start_write;
wire    reorder_43_U0_ap_start;
wire    reorder_43_U0_ap_done;
wire    reorder_43_U0_ap_continue;
wire    reorder_43_U0_ap_idle;
wire    reorder_43_U0_ap_ready;
wire    reorder_43_U0_unpacked_stream_read;
wire   [83:0] reorder_43_U0_vq_sm_transpose_head1_din;
wire    reorder_43_U0_vq_sm_transpose_head1_write;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire   [2:0] unpacked_stream_num_data_valid;
wire   [2:0] unpacked_stream_fifo_cap;
wire    unpacked_stream_empty_n;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder_43_U0_din;
wire    start_for_reorder_43_U0_full_n;
wire   [0:0] start_for_reorder_43_U0_dout;
wire    start_for_reorder_43_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN11_unpack_42 unpack_42_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack_42_U0_ap_start),
    .start_full_n(start_for_reorder_43_U0_full_n),
    .ap_done(unpack_42_U0_ap_done),
    .ap_continue(unpack_42_U0_ap_continue),
    .ap_idle(unpack_42_U0_ap_idle),
    .ap_ready(unpack_42_U0_ap_ready),
    .unpacked_stream_din(unpack_42_U0_unpacked_stream_din),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_full_n(unpacked_stream_full_n),
    .unpacked_stream_write(unpack_42_U0_unpacked_stream_write),
    .vq_sm_head1_dout(vq_sm_head1_dout),
    .vq_sm_head1_num_data_valid(7'd0),
    .vq_sm_head1_fifo_cap(7'd0),
    .vq_sm_head1_empty_n(vq_sm_head1_empty_n),
    .vq_sm_head1_read(unpack_42_U0_vq_sm_head1_read),
    .start_out(unpack_42_U0_start_out),
    .start_write(unpack_42_U0_start_write)
);

ATTN11_reorder_43 reorder_43_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder_43_U0_ap_start),
    .ap_done(reorder_43_U0_ap_done),
    .ap_continue(reorder_43_U0_ap_continue),
    .ap_idle(reorder_43_U0_ap_idle),
    .ap_ready(reorder_43_U0_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(reorder_43_U0_unpacked_stream_read),
    .vq_sm_transpose_head1_din(reorder_43_U0_vq_sm_transpose_head1_din),
    .vq_sm_transpose_head1_num_data_valid(10'd0),
    .vq_sm_transpose_head1_fifo_cap(10'd0),
    .vq_sm_transpose_head1_full_n(vq_sm_transpose_head1_full_n),
    .vq_sm_transpose_head1_write(reorder_43_U0_vq_sm_transpose_head1_write)
);

ATTN11_fifo_w3_d2_S_x1 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack_42_U0_unpacked_stream_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack_42_U0_unpacked_stream_write),
    .if_dout(unpacked_stream_dout),
    .if_num_data_valid(unpacked_stream_num_data_valid),
    .if_fifo_cap(unpacked_stream_fifo_cap),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder_43_U0_unpacked_stream_read)
);

ATTN11_start_for_reorder_43_U0 start_for_reorder_43_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder_43_U0_din),
    .if_full_n(start_for_reorder_43_U0_full_n),
    .if_write(unpack_42_U0_start_write),
    .if_dout(start_for_reorder_43_U0_dout),
    .if_empty_n(start_for_reorder_43_U0_empty_n),
    .if_read(reorder_43_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = reorder_43_U0_ap_done;

assign ap_idle = (unpack_42_U0_ap_idle & reorder_43_U0_ap_idle);

assign ap_ready = unpack_42_U0_ap_ready;

assign ap_sync_ready = unpack_42_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign reorder_43_U0_ap_continue = ap_continue;

assign reorder_43_U0_ap_start = start_for_reorder_43_U0_empty_n;

assign start_for_reorder_43_U0_din = 1'b1;

assign start_out = real_start;

assign unpack_42_U0_ap_continue = 1'b1;

assign unpack_42_U0_ap_start = real_start;

assign vq_sm_head1_read = unpack_42_U0_vq_sm_head1_read;

assign vq_sm_transpose_head1_din = reorder_43_U0_vq_sm_transpose_head1_din;

assign vq_sm_transpose_head1_write = reorder_43_U0_vq_sm_transpose_head1_write;

endmodule //ATTN11_do_reshape_12
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_reshape_13 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        vq_sm_head2_dout,
        vq_sm_head2_empty_n,
        vq_sm_head2_read,
        vq_sm_transpose_head2_din,
        vq_sm_transpose_head2_full_n,
        vq_sm_transpose_head2_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [5:0] vq_sm_head2_dout;
input   vq_sm_head2_empty_n;
output   vq_sm_head2_read;
output  [83:0] vq_sm_transpose_head2_din;
input   vq_sm_transpose_head2_full_n;
output   vq_sm_transpose_head2_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    unpack_44_U0_ap_start;
wire    unpack_44_U0_ap_done;
wire    unpack_44_U0_ap_continue;
wire    unpack_44_U0_ap_idle;
wire    unpack_44_U0_ap_ready;
wire   [2:0] unpack_44_U0_unpacked_stream_din;
wire    unpack_44_U0_unpacked_stream_write;
wire    unpack_44_U0_vq_sm_head2_read;
wire    unpack_44_U0_start_out;
wire    unpack_44_U0_start_write;
wire    reorder_45_U0_ap_start;
wire    reorder_45_U0_ap_done;
wire    reorder_45_U0_ap_continue;
wire    reorder_45_U0_ap_idle;
wire    reorder_45_U0_ap_ready;
wire    reorder_45_U0_unpacked_stream_read;
wire   [83:0] reorder_45_U0_vq_sm_transpose_head2_din;
wire    reorder_45_U0_vq_sm_transpose_head2_write;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire   [2:0] unpacked_stream_num_data_valid;
wire   [2:0] unpacked_stream_fifo_cap;
wire    unpacked_stream_empty_n;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder_45_U0_din;
wire    start_for_reorder_45_U0_full_n;
wire   [0:0] start_for_reorder_45_U0_dout;
wire    start_for_reorder_45_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN11_unpack_44 unpack_44_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack_44_U0_ap_start),
    .start_full_n(start_for_reorder_45_U0_full_n),
    .ap_done(unpack_44_U0_ap_done),
    .ap_continue(unpack_44_U0_ap_continue),
    .ap_idle(unpack_44_U0_ap_idle),
    .ap_ready(unpack_44_U0_ap_ready),
    .unpacked_stream_din(unpack_44_U0_unpacked_stream_din),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_full_n(unpacked_stream_full_n),
    .unpacked_stream_write(unpack_44_U0_unpacked_stream_write),
    .vq_sm_head2_dout(vq_sm_head2_dout),
    .vq_sm_head2_num_data_valid(7'd0),
    .vq_sm_head2_fifo_cap(7'd0),
    .vq_sm_head2_empty_n(vq_sm_head2_empty_n),
    .vq_sm_head2_read(unpack_44_U0_vq_sm_head2_read),
    .start_out(unpack_44_U0_start_out),
    .start_write(unpack_44_U0_start_write)
);

ATTN11_reorder_45 reorder_45_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder_45_U0_ap_start),
    .ap_done(reorder_45_U0_ap_done),
    .ap_continue(reorder_45_U0_ap_continue),
    .ap_idle(reorder_45_U0_ap_idle),
    .ap_ready(reorder_45_U0_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(reorder_45_U0_unpacked_stream_read),
    .vq_sm_transpose_head2_din(reorder_45_U0_vq_sm_transpose_head2_din),
    .vq_sm_transpose_head2_num_data_valid(10'd0),
    .vq_sm_transpose_head2_fifo_cap(10'd0),
    .vq_sm_transpose_head2_full_n(vq_sm_transpose_head2_full_n),
    .vq_sm_transpose_head2_write(reorder_45_U0_vq_sm_transpose_head2_write)
);

ATTN11_fifo_w3_d2_S_x2 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack_44_U0_unpacked_stream_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack_44_U0_unpacked_stream_write),
    .if_dout(unpacked_stream_dout),
    .if_num_data_valid(unpacked_stream_num_data_valid),
    .if_fifo_cap(unpacked_stream_fifo_cap),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder_45_U0_unpacked_stream_read)
);

ATTN11_start_for_reorder_45_U0 start_for_reorder_45_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder_45_U0_din),
    .if_full_n(start_for_reorder_45_U0_full_n),
    .if_write(unpack_44_U0_start_write),
    .if_dout(start_for_reorder_45_U0_dout),
    .if_empty_n(start_for_reorder_45_U0_empty_n),
    .if_read(reorder_45_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = reorder_45_U0_ap_done;

assign ap_idle = (unpack_44_U0_ap_idle & reorder_45_U0_ap_idle);

assign ap_ready = unpack_44_U0_ap_ready;

assign ap_sync_ready = unpack_44_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign reorder_45_U0_ap_continue = ap_continue;

assign reorder_45_U0_ap_start = start_for_reorder_45_U0_empty_n;

assign start_for_reorder_45_U0_din = 1'b1;

assign start_out = real_start;

assign unpack_44_U0_ap_continue = 1'b1;

assign unpack_44_U0_ap_start = real_start;

assign vq_sm_head2_read = unpack_44_U0_vq_sm_head2_read;

assign vq_sm_transpose_head2_din = reorder_45_U0_vq_sm_transpose_head2_din;

assign vq_sm_transpose_head2_write = reorder_45_U0_vq_sm_transpose_head2_write;

endmodule //ATTN11_do_reshape_13
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_reshape_5 (
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [5:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [83:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    unpack_36_U0_ap_start;
wire    unpack_36_U0_ap_done;
wire    unpack_36_U0_ap_continue;
wire    unpack_36_U0_ap_idle;
wire    unpack_36_U0_ap_ready;
wire   [2:0] unpack_36_U0_unpacked_stream_din;
wire    unpack_36_U0_unpacked_stream_write;
wire    unpack_36_U0_kq_sm_head1_read;
wire    unpack_36_U0_start_out;
wire    unpack_36_U0_start_write;
wire    reorder_37_U0_ap_start;
wire    reorder_37_U0_ap_done;
wire    reorder_37_U0_ap_continue;
wire    reorder_37_U0_ap_idle;
wire    reorder_37_U0_ap_ready;
wire    reorder_37_U0_unpacked_stream_read;
wire   [83:0] reorder_37_U0_kq_sm_reshape_head1_din;
wire    reorder_37_U0_kq_sm_reshape_head1_write;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire   [2:0] unpacked_stream_num_data_valid;
wire   [2:0] unpacked_stream_fifo_cap;
wire    unpacked_stream_empty_n;
wire   [0:0] start_for_reorder_37_U0_din;
wire    start_for_reorder_37_U0_full_n;
wire   [0:0] start_for_reorder_37_U0_dout;
wire    start_for_reorder_37_U0_empty_n;

ATTN11_unpack_36 unpack_36_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack_36_U0_ap_start),
    .start_full_n(start_for_reorder_37_U0_full_n),
    .ap_done(unpack_36_U0_ap_done),
    .ap_continue(unpack_36_U0_ap_continue),
    .ap_idle(unpack_36_U0_ap_idle),
    .ap_ready(unpack_36_U0_ap_ready),
    .unpacked_stream_din(unpack_36_U0_unpacked_stream_din),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_full_n(unpacked_stream_full_n),
    .unpacked_stream_write(unpack_36_U0_unpacked_stream_write),
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_num_data_valid(7'd0),
    .kq_sm_head1_fifo_cap(7'd0),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(unpack_36_U0_kq_sm_head1_read),
    .start_out(unpack_36_U0_start_out),
    .start_write(unpack_36_U0_start_write)
);

ATTN11_reorder_37 reorder_37_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder_37_U0_ap_start),
    .ap_done(reorder_37_U0_ap_done),
    .ap_continue(reorder_37_U0_ap_continue),
    .ap_idle(reorder_37_U0_ap_idle),
    .ap_ready(reorder_37_U0_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(reorder_37_U0_unpacked_stream_read),
    .kq_sm_reshape_head1_din(reorder_37_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_num_data_valid(10'd0),
    .kq_sm_reshape_head1_fifo_cap(10'd0),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(reorder_37_U0_kq_sm_reshape_head1_write)
);

ATTN11_fifo_w3_d2_S unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack_36_U0_unpacked_stream_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack_36_U0_unpacked_stream_write),
    .if_dout(unpacked_stream_dout),
    .if_num_data_valid(unpacked_stream_num_data_valid),
    .if_fifo_cap(unpacked_stream_fifo_cap),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder_37_U0_unpacked_stream_read)
);

ATTN11_start_for_reorder_37_U0 start_for_reorder_37_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder_37_U0_din),
    .if_full_n(start_for_reorder_37_U0_full_n),
    .if_write(unpack_36_U0_start_write),
    .if_dout(start_for_reorder_37_U0_dout),
    .if_empty_n(start_for_reorder_37_U0_empty_n),
    .if_read(reorder_37_U0_ap_ready)
);

assign ap_done = reorder_37_U0_ap_done;

assign ap_idle = (unpack_36_U0_ap_idle & reorder_37_U0_ap_idle);

assign ap_ready = unpack_36_U0_ap_ready;

assign kq_sm_head1_read = unpack_36_U0_kq_sm_head1_read;

assign kq_sm_reshape_head1_din = reorder_37_U0_kq_sm_reshape_head1_din;

assign kq_sm_reshape_head1_write = reorder_37_U0_kq_sm_reshape_head1_write;

assign reorder_37_U0_ap_continue = ap_continue;

assign reorder_37_U0_ap_start = start_for_reorder_37_U0_empty_n;

assign start_for_reorder_37_U0_din = 1'b1;

assign unpack_36_U0_ap_continue = 1'b1;

assign unpack_36_U0_ap_start = ap_start;

endmodule //ATTN11_do_reshape_5
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_reshape_6 (
        kq_sm_head2_dout,
        kq_sm_head2_empty_n,
        kq_sm_head2_read,
        kq_sm_reshape_head2_din,
        kq_sm_reshape_head2_full_n,
        kq_sm_reshape_head2_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [5:0] kq_sm_head2_dout;
input   kq_sm_head2_empty_n;
output   kq_sm_head2_read;
output  [83:0] kq_sm_reshape_head2_din;
input   kq_sm_reshape_head2_full_n;
output   kq_sm_reshape_head2_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    unpack_38_U0_ap_start;
wire    unpack_38_U0_ap_done;
wire    unpack_38_U0_ap_continue;
wire    unpack_38_U0_ap_idle;
wire    unpack_38_U0_ap_ready;
wire   [2:0] unpack_38_U0_unpacked_stream_din;
wire    unpack_38_U0_unpacked_stream_write;
wire    unpack_38_U0_kq_sm_head2_read;
wire    unpack_38_U0_start_out;
wire    unpack_38_U0_start_write;
wire    reorder_39_U0_ap_start;
wire    reorder_39_U0_ap_done;
wire    reorder_39_U0_ap_continue;
wire    reorder_39_U0_ap_idle;
wire    reorder_39_U0_ap_ready;
wire    reorder_39_U0_unpacked_stream_read;
wire   [83:0] reorder_39_U0_kq_sm_reshape_head2_din;
wire    reorder_39_U0_kq_sm_reshape_head2_write;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire   [2:0] unpacked_stream_num_data_valid;
wire   [2:0] unpacked_stream_fifo_cap;
wire    unpacked_stream_empty_n;
wire   [0:0] start_for_reorder_39_U0_din;
wire    start_for_reorder_39_U0_full_n;
wire   [0:0] start_for_reorder_39_U0_dout;
wire    start_for_reorder_39_U0_empty_n;

ATTN11_unpack_38 unpack_38_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack_38_U0_ap_start),
    .start_full_n(start_for_reorder_39_U0_full_n),
    .ap_done(unpack_38_U0_ap_done),
    .ap_continue(unpack_38_U0_ap_continue),
    .ap_idle(unpack_38_U0_ap_idle),
    .ap_ready(unpack_38_U0_ap_ready),
    .unpacked_stream_din(unpack_38_U0_unpacked_stream_din),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_full_n(unpacked_stream_full_n),
    .unpacked_stream_write(unpack_38_U0_unpacked_stream_write),
    .kq_sm_head2_dout(kq_sm_head2_dout),
    .kq_sm_head2_num_data_valid(7'd0),
    .kq_sm_head2_fifo_cap(7'd0),
    .kq_sm_head2_empty_n(kq_sm_head2_empty_n),
    .kq_sm_head2_read(unpack_38_U0_kq_sm_head2_read),
    .start_out(unpack_38_U0_start_out),
    .start_write(unpack_38_U0_start_write)
);

ATTN11_reorder_39 reorder_39_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder_39_U0_ap_start),
    .ap_done(reorder_39_U0_ap_done),
    .ap_continue(reorder_39_U0_ap_continue),
    .ap_idle(reorder_39_U0_ap_idle),
    .ap_ready(reorder_39_U0_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(reorder_39_U0_unpacked_stream_read),
    .kq_sm_reshape_head2_din(reorder_39_U0_kq_sm_reshape_head2_din),
    .kq_sm_reshape_head2_num_data_valid(10'd0),
    .kq_sm_reshape_head2_fifo_cap(10'd0),
    .kq_sm_reshape_head2_full_n(kq_sm_reshape_head2_full_n),
    .kq_sm_reshape_head2_write(reorder_39_U0_kq_sm_reshape_head2_write)
);

ATTN11_fifo_w3_d2_S_x unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack_38_U0_unpacked_stream_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack_38_U0_unpacked_stream_write),
    .if_dout(unpacked_stream_dout),
    .if_num_data_valid(unpacked_stream_num_data_valid),
    .if_fifo_cap(unpacked_stream_fifo_cap),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder_39_U0_unpacked_stream_read)
);

ATTN11_start_for_reorder_39_U0 start_for_reorder_39_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder_39_U0_din),
    .if_full_n(start_for_reorder_39_U0_full_n),
    .if_write(unpack_38_U0_start_write),
    .if_dout(start_for_reorder_39_U0_dout),
    .if_empty_n(start_for_reorder_39_U0_empty_n),
    .if_read(reorder_39_U0_ap_ready)
);

assign ap_done = reorder_39_U0_ap_done;

assign ap_idle = (unpack_38_U0_ap_idle & reorder_39_U0_ap_idle);

assign ap_ready = unpack_38_U0_ap_ready;

assign kq_sm_head2_read = unpack_38_U0_kq_sm_head2_read;

assign kq_sm_reshape_head2_din = reorder_39_U0_kq_sm_reshape_head2_din;

assign kq_sm_reshape_head2_write = reorder_39_U0_kq_sm_reshape_head2_write;

assign reorder_39_U0_ap_continue = ap_continue;

assign reorder_39_U0_ap_start = start_for_reorder_39_U0_empty_n;

assign start_for_reorder_39_U0_din = 1'b1;

assign unpack_38_U0_ap_continue = 1'b1;

assign unpack_38_U0_ap_start = ap_start;

endmodule //ATTN11_do_reshape_6
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_reshape_7 (
        kq_sm_head3_dout,
        kq_sm_head3_empty_n,
        kq_sm_head3_read,
        kq_sm_reshape_head3_din,
        kq_sm_reshape_head3_full_n,
        kq_sm_reshape_head3_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [5:0] kq_sm_head3_dout;
input   kq_sm_head3_empty_n;
output   kq_sm_head3_read;
output  [83:0] kq_sm_reshape_head3_din;
input   kq_sm_reshape_head3_full_n;
output   kq_sm_reshape_head3_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    unpack_40_U0_ap_start;
wire    unpack_40_U0_ap_done;
wire    unpack_40_U0_ap_continue;
wire    unpack_40_U0_ap_idle;
wire    unpack_40_U0_ap_ready;
wire   [2:0] unpack_40_U0_unpacked_stream_din;
wire    unpack_40_U0_unpacked_stream_write;
wire    unpack_40_U0_kq_sm_head3_read;
wire    unpack_40_U0_start_out;
wire    unpack_40_U0_start_write;
wire    reorder_41_U0_ap_start;
wire    reorder_41_U0_ap_done;
wire    reorder_41_U0_ap_continue;
wire    reorder_41_U0_ap_idle;
wire    reorder_41_U0_ap_ready;
wire    reorder_41_U0_unpacked_stream_read;
wire   [83:0] reorder_41_U0_kq_sm_reshape_head3_din;
wire    reorder_41_U0_kq_sm_reshape_head3_write;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire   [2:0] unpacked_stream_num_data_valid;
wire   [2:0] unpacked_stream_fifo_cap;
wire    unpacked_stream_empty_n;
wire   [0:0] start_for_reorder_41_U0_din;
wire    start_for_reorder_41_U0_full_n;
wire   [0:0] start_for_reorder_41_U0_dout;
wire    start_for_reorder_41_U0_empty_n;

ATTN11_unpack_40 unpack_40_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack_40_U0_ap_start),
    .start_full_n(start_for_reorder_41_U0_full_n),
    .ap_done(unpack_40_U0_ap_done),
    .ap_continue(unpack_40_U0_ap_continue),
    .ap_idle(unpack_40_U0_ap_idle),
    .ap_ready(unpack_40_U0_ap_ready),
    .unpacked_stream_din(unpack_40_U0_unpacked_stream_din),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_full_n(unpacked_stream_full_n),
    .unpacked_stream_write(unpack_40_U0_unpacked_stream_write),
    .kq_sm_head3_dout(kq_sm_head3_dout),
    .kq_sm_head3_num_data_valid(7'd0),
    .kq_sm_head3_fifo_cap(7'd0),
    .kq_sm_head3_empty_n(kq_sm_head3_empty_n),
    .kq_sm_head3_read(unpack_40_U0_kq_sm_head3_read),
    .start_out(unpack_40_U0_start_out),
    .start_write(unpack_40_U0_start_write)
);

ATTN11_reorder_41 reorder_41_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder_41_U0_ap_start),
    .ap_done(reorder_41_U0_ap_done),
    .ap_continue(reorder_41_U0_ap_continue),
    .ap_idle(reorder_41_U0_ap_idle),
    .ap_ready(reorder_41_U0_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(unpacked_stream_num_data_valid),
    .unpacked_stream_fifo_cap(unpacked_stream_fifo_cap),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(reorder_41_U0_unpacked_stream_read),
    .kq_sm_reshape_head3_din(reorder_41_U0_kq_sm_reshape_head3_din),
    .kq_sm_reshape_head3_num_data_valid(10'd0),
    .kq_sm_reshape_head3_fifo_cap(10'd0),
    .kq_sm_reshape_head3_full_n(kq_sm_reshape_head3_full_n),
    .kq_sm_reshape_head3_write(reorder_41_U0_kq_sm_reshape_head3_write)
);

ATTN11_fifo_w3_d2_S_x0 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack_40_U0_unpacked_stream_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack_40_U0_unpacked_stream_write),
    .if_dout(unpacked_stream_dout),
    .if_num_data_valid(unpacked_stream_num_data_valid),
    .if_fifo_cap(unpacked_stream_fifo_cap),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder_41_U0_unpacked_stream_read)
);

ATTN11_start_for_reorder_41_U0 start_for_reorder_41_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder_41_U0_din),
    .if_full_n(start_for_reorder_41_U0_full_n),
    .if_write(unpack_40_U0_start_write),
    .if_dout(start_for_reorder_41_U0_dout),
    .if_empty_n(start_for_reorder_41_U0_empty_n),
    .if_read(reorder_41_U0_ap_ready)
);

assign ap_done = reorder_41_U0_ap_done;

assign ap_idle = (unpack_40_U0_ap_idle & reorder_41_U0_ap_idle);

assign ap_ready = unpack_40_U0_ap_ready;

assign kq_sm_head3_read = unpack_40_U0_kq_sm_head3_read;

assign kq_sm_reshape_head3_din = reorder_41_U0_kq_sm_reshape_head3_din;

assign kq_sm_reshape_head3_write = reorder_41_U0_kq_sm_reshape_head3_write;

assign reorder_41_U0_ap_continue = ap_continue;

assign reorder_41_U0_ap_start = start_for_reorder_41_U0_empty_n;

assign start_for_reorder_41_U0_din = 1'b1;

assign unpack_40_U0_ap_continue = 1'b1;

assign unpack_40_U0_ap_start = ap_start;

endmodule //ATTN11_do_reshape_7
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r_sm_head3_dout,
        r_sm_head3_num_data_valid,
        r_sm_head3_fifo_cap,
        r_sm_head3_empty_n,
        r_sm_head3_read,
        rq_sm_head3_din,
        rq_sm_head3_num_data_valid,
        rq_sm_head3_fifo_cap,
        rq_sm_head3_full_n,
        rq_sm_head3_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] r_sm_head3_dout;
input  [9:0] r_sm_head3_num_data_valid;
input  [9:0] r_sm_head3_fifo_cap;
input   r_sm_head3_empty_n;
output   r_sm_head3_read;
output  [5:0] rq_sm_head3_din;
input  [9:0] rq_sm_head3_num_data_valid;
input  [9:0] rq_sm_head3_fifo_cap;
input   rq_sm_head3_full_n;
output   rq_sm_head3_write;

reg ap_idle;
reg r_sm_head3_read;
reg rq_sm_head3_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] select_ln113_reg_1444;
reg    ap_predicate_op87_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] select_ln113_reg_1444_pp0_iter7_reg;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_427_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] attn_inst_softmax_qk_head3_buffer_668_address0;
reg    attn_inst_softmax_qk_head3_buffer_668_ce0;
reg    attn_inst_softmax_qk_head3_buffer_668_we0;
wire   [19:0] attn_inst_softmax_qk_head3_buffer_668_q0;
wire   [4:0] attn_inst_softmax_qk_head3_exp_table_address0;
reg    attn_inst_softmax_qk_head3_exp_table_ce0;
wire   [15:0] attn_inst_softmax_qk_head3_exp_table_q0;
wire   [4:0] attn_inst_softmax_qk_head3_exp_table_address1;
reg    attn_inst_softmax_qk_head3_exp_table_ce1;
wire   [15:0] attn_inst_softmax_qk_head3_exp_table_q1;
wire   [7:0] attn_inst_softmax_qk_head3_exp_score_669_address0;
reg    attn_inst_softmax_qk_head3_exp_score_669_ce0;
reg    attn_inst_softmax_qk_head3_exp_score_669_we0;
wire   [31:0] attn_inst_softmax_qk_head3_exp_score_669_d0;
wire   [7:0] attn_inst_softmax_qk_head3_exp_score_669_address1;
reg    attn_inst_softmax_qk_head3_exp_score_669_ce1;
wire   [31:0] attn_inst_softmax_qk_head3_exp_score_669_q1;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_two_address0;
reg    attn_inst_softmax_qk_head3_recip_table_two_ce0;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_two_q0;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_two_address1;
reg    attn_inst_softmax_qk_head3_recip_table_two_ce1;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_two_q1;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_one_address0;
reg    attn_inst_softmax_qk_head3_recip_table_one_ce0;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_one_q0;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_one_address1;
reg    attn_inst_softmax_qk_head3_recip_table_one_ce1;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_one_q1;
reg    r_sm_head3_blk_n;
wire    ap_block_pp0_stage0;
reg    rq_sm_head3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln113_fu_433_p2;
reg   [0:0] icmp_ln113_reg_1430;
wire   [7:0] select_ln110_3_fu_524_p3;
reg   [7:0] select_ln110_3_reg_1437;
wire   [1:0] select_ln113_fu_532_p3;
reg   [1:0] select_ln113_reg_1444_pp0_iter2_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter3_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter4_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter5_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter6_reg;
wire   [63:0] zext_ln114_fu_570_p1;
reg   [63:0] zext_ln114_reg_1448;
reg   [63:0] zext_ln114_reg_1448_pp0_iter3_reg;
reg   [63:0] zext_ln114_reg_1448_pp0_iter4_reg;
wire   [0:0] grp_fu_323_p2;
reg   [0:0] icmp_ln149_reg_1454;
reg   [0:0] icmp_ln149_reg_1454_pp0_iter3_reg;
reg   [0:0] icmp_ln149_reg_1454_pp0_iter4_reg;
wire   [0:0] icmp_ln169_fu_579_p2;
reg   [0:0] icmp_ln169_reg_1465;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter3_reg;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter4_reg;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter5_reg;
wire   [9:0] trunc_ln121_fu_586_p1;
reg   [9:0] trunc_ln121_reg_1469;
reg   [9:0] trunc_ln121_3_reg_1476;
reg   [0:0] icmp_ln124_reg_1483;
reg   [15:0] attn_inst_softmax_qk_head3_exp_table_load_reg_1499;
reg   [15:0] attn_inst_softmax_qk_head3_exp_table_load_1_reg_1504;
reg   [2:0] tmp_18_reg_1509;
wire   [0:0] icmp_ln172_fu_927_p2;
reg   [0:0] icmp_ln172_reg_1524;
wire   [2:0] trunc_ln205_fu_1203_p1;
reg   [2:0] trunc_ln205_reg_1563;
reg   [3:0] tmp_16_reg_1568;
wire   [2:0] trunc_ln205_3_fu_1267_p1;
reg   [2:0] trunc_ln205_3_reg_1573;
reg   [3:0] tmp_17_reg_1578;
wire   [7:0] attn_inst_softmax_qk_head3_buffer_668_addr_gep_fu_214_p3;
wire   [63:0] zext_ln164_fu_634_p1;
wire   [63:0] zext_ln164_3_fu_675_p1;
wire   [63:0] zext_ln176_fu_879_p1;
wire   [63:0] zext_ln180_fu_888_p1;
wire   [63:0] zext_ln176_3_fu_965_p1;
wire   [63:0] zext_ln180_3_fu_984_p1;
reg   [7:0] ct_fu_140;
wire   [7:0] add_ln114_fu_540_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [7:0] ap_sig_allocacmp_ct_load;
reg   [1:0] state_fu_144;
reg   [1:0] ap_sig_allocacmp_state_load;
reg   [9:0] indvar_flatten_fu_148;
wire   [9:0] select_ln113_3_fu_445_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten27_fu_152;
wire   [15:0] add_ln112_fu_421_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten27_load;
reg   [9:0] retval_0_i15921_fu_156;
wire   [9:0] select_ln139_fu_701_p3;
reg   [9:0] retval_0_i5816424_fu_160;
wire   [9:0] select_ln139_3_fu_713_p3;
reg   [0:0] in_two_fu_164;
wire   [0:0] in_two_6_fu_1007_p2;
reg   [0:0] in_two_5_fu_168;
reg   [7:0] recip_val_fu_172;
wire   [7:0] recip_val_17_fu_1012_p3;
reg   [7:0] recip_val_14_fu_176;
reg   [21:0] empty_fu_180;
wire   [21:0] add_ln165_fu_790_p2;
reg   [21:0] empty_1165_fu_184;
wire   [21:0] add_ln165_3_fu_800_p2;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln113_3_fu_439_p2;
wire   [0:0] icmp_ln114_fu_501_p2;
wire   [0:0] xor_ln110_fu_496_p2;
wire   [1:0] select_ln110_fu_489_p3;
wire   [0:0] and_ln110_fu_507_p2;
wire   [0:0] or_ln110_fu_519_p2;
wire   [1:0] state_5_fu_513_p2;
wire   [9:0] trunc_ln161_fu_608_p1;
wire   [9:0] minus_fu_612_p2;
wire   [9:0] add_ln162_fu_618_p2;
wire   [4:0] cursor_fu_624_p4;
wire   [9:0] tmp_306_fu_643_p4;
wire   [9:0] minus_3_fu_653_p2;
wire   [9:0] add_ln162_3_fu_659_p2;
wire   [4:0] cursor_3_fu_665_p4;
wire   [9:0] select_ln124_3_fu_690_p3;
wire   [0:0] icmp_ln224_fu_696_p2;
wire   [9:0] select_ln124_fu_684_p3;
wire   [0:0] icmp_ln224_3_fu_708_p2;
wire   [21:0] select_ln149_3_fu_780_p3;
wire   [21:0] zext_ln165_fu_787_p1;
wire   [21:0] select_ln149_fu_773_p3;
wire   [21:0] zext_ln165_3_fu_797_p1;
wire   [21:0] add_ln171_fu_821_p2;
wire   [22:0] zext_ln171_fu_817_p1;
wire   [22:0] add_ln174_fu_847_p2;
wire   [0:0] tmp_19_fu_863_p3;
wire   [5:0] trunc_ln174_5_fu_853_p4;
wire   [5:0] cursor_two_fu_871_p3;
wire   [8:0] cursor_one_fu_827_p4;
wire   [21:0] add_ln171_3_fu_901_p2;
wire   [2:0] tmp_20_fu_917_p4;
wire   [22:0] zext_ln171_3_fu_897_p1;
wire   [22:0] add_ln174_3_fu_933_p2;
wire   [0:0] tmp_21_fu_949_p3;
wire   [5:0] trunc_ln174_6_fu_939_p4;
wire   [5:0] cursor_two_3_fu_957_p3;
wire   [8:0] cursor_one_3_fu_907_p4;
wire   [15:0] trunc_ln198_fu_1087_p1;
wire   [15:0] grp_fu_1103_p0;
wire   [7:0] grp_fu_1103_p1;
wire   [15:0] tmp_s_fu_1113_p4;
wire   [15:0] grp_fu_1135_p0;
wire   [7:0] grp_fu_1135_p1;
wire   [22:0] grp_fu_1103_p2;
wire   [23:0] select_ln204_fu_1157_p3;
wire   [23:0] zext_ln204_fu_1153_p1;
wire   [23:0] add_ln204_fu_1165_p2;
wire   [4:0] tmp_fu_1171_p4;
wire   [6:0] zext_ln204_6_fu_1181_p1;
wire   [6:0] trunc_ln204_s_fu_1185_p4;
wire   [6:0] rel_fu_1195_p3;
wire   [22:0] grp_fu_1135_p2;
wire   [23:0] select_ln204_8_fu_1221_p3;
wire   [23:0] zext_ln204_3_fu_1217_p1;
wire   [23:0] add_ln204_3_fu_1229_p2;
wire   [4:0] tmp_121_fu_1235_p4;
wire   [6:0] zext_ln204_7_fu_1245_p1;
wire   [6:0] trunc_ln204_1_fu_1249_p4;
wire   [6:0] rel_3_fu_1259_p3;
wire   [0:0] icmp_ln8_fu_1281_p2;
wire   [0:0] icmp_ln8_3_fu_1293_p2;
wire   [2:0] select_ln205_3_fu_1298_p3;
wire   [2:0] select_ln205_fu_1286_p3;
reg    grp_fu_1103_ce;
reg    grp_fu_1135_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [22:0] grp_fu_1103_p00;
wire   [22:0] grp_fu_1103_p10;
wire   [22:0] grp_fu_1135_p00;
wire   [22:0] grp_fu_1135_p10;
reg    ap_condition_357;
reg    ap_condition_415;
reg    ap_condition_375;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ct_fu_140 = 8'd0;
//#0 state_fu_144 = 2'd0;
//#0 indvar_flatten_fu_148 = 10'd0;
//#0 indvar_flatten27_fu_152 = 16'd0;
//#0 retval_0_i15921_fu_156 = 10'd0;
//#0 retval_0_i5816424_fu_160 = 10'd0;
//#0 in_two_fu_164 = 1'd0;
//#0 in_two_5_fu_168 = 1'd0;
//#0 recip_val_fu_172 = 8'd0;
//#0 recip_val_14_fu_176 = 8'd0;
//#0 empty_fu_180 = 22'd0;
//#0 empty_1165_fu_184 = 22'd0;
end

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_buffer_664_RAM_AUTO_1R1W #(
    .DataWidth( 20 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head3_buffer_668_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_buffer_668_address0),
    .ce0(attn_inst_softmax_qk_head3_buffer_668_ce0),
    .we0(attn_inst_softmax_qk_head3_buffer_668_we0),
    .d0(r_sm_head3_dout),
    .q0(attn_inst_softmax_qk_head3_buffer_668_q0)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_table_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_softmax_qk_head3_exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_exp_table_address0),
    .ce0(attn_inst_softmax_qk_head3_exp_table_ce0),
    .q0(attn_inst_softmax_qk_head3_exp_table_q0),
    .address1(attn_inst_softmax_qk_head3_exp_table_address1),
    .ce1(attn_inst_softmax_qk_head3_exp_table_ce1),
    .q1(attn_inst_softmax_qk_head3_exp_table_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_score_665_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head3_exp_score_669_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_exp_score_669_address0),
    .ce0(attn_inst_softmax_qk_head3_exp_score_669_ce0),
    .we0(attn_inst_softmax_qk_head3_exp_score_669_we0),
    .d0(attn_inst_softmax_qk_head3_exp_score_669_d0),
    .address1(attn_inst_softmax_qk_head3_exp_score_669_address1),
    .ce1(attn_inst_softmax_qk_head3_exp_score_669_ce1),
    .q1(attn_inst_softmax_qk_head3_exp_score_669_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_two_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head3_recip_table_two_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_recip_table_two_address0),
    .ce0(attn_inst_softmax_qk_head3_recip_table_two_ce0),
    .q0(attn_inst_softmax_qk_head3_recip_table_two_q0),
    .address1(attn_inst_softmax_qk_head3_recip_table_two_address1),
    .ce1(attn_inst_softmax_qk_head3_recip_table_two_ce1),
    .q1(attn_inst_softmax_qk_head3_recip_table_two_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_one_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head3_recip_table_one_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_recip_table_one_address0),
    .ce0(attn_inst_softmax_qk_head3_recip_table_one_ce0),
    .q0(attn_inst_softmax_qk_head3_recip_table_one_q0),
    .address1(attn_inst_softmax_qk_head3_recip_table_one_address1),
    .ce1(attn_inst_softmax_qk_head3_recip_table_one_ce1),
    .q1(attn_inst_softmax_qk_head3_recip_table_one_q1)
);

ATTN11_mul_16ns_8ns_23_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_16ns_8ns_23_2_1_U839(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1103_p0),
    .din1(grp_fu_1103_p1),
    .ce(grp_fu_1103_ce),
    .dout(grp_fu_1103_p2)
);

ATTN11_mul_16ns_8ns_23_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_16ns_8ns_23_2_1_U840(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1135_p0),
    .din1(grp_fu_1135_p1),
    .ce(grp_fu_1135_ce),
    .dout(grp_fu_1135_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_357)) begin
        ct_fu_140 <= add_ln114_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_415)) begin
    if ((icmp_ln172_reg_1524 == 1'd1)) begin
        in_two_5_fu_168 <= 1'd0;
    end else if ((icmp_ln172_reg_1524 == 1'd0)) begin
        in_two_5_fu_168 <= 1'd1;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_375)) begin
    if ((icmp_ln112_fu_427_p2 == 1'd0)) begin
        indvar_flatten27_fu_152 <= add_ln112_fu_421_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten27_fu_152 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_375)) begin
    if ((icmp_ln112_fu_427_p2 == 1'd0)) begin
        indvar_flatten_fu_148 <= select_ln113_3_fu_445_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_148 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_415)) begin
    if ((icmp_ln172_reg_1524 == 1'd1)) begin
        recip_val_14_fu_176 <= attn_inst_softmax_qk_head3_recip_table_one_q0;
    end else if ((icmp_ln172_reg_1524 == 1'd0)) begin
        recip_val_14_fu_176 <= attn_inst_softmax_qk_head3_recip_table_two_q0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_357)) begin
    state_fu_144 <= select_ln113_fu_532_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln113_reg_1430 <= icmp_ln113_fu_433_p2;
        select_ln110_3_reg_1437 <= select_ln110_3_fu_524_p3;
        select_ln113_reg_1444 <= select_ln113_fu_532_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln149_reg_1454_pp0_iter3_reg <= icmp_ln149_reg_1454;
        icmp_ln149_reg_1454_pp0_iter4_reg <= icmp_ln149_reg_1454_pp0_iter3_reg;
        icmp_ln169_reg_1465 <= icmp_ln169_fu_579_p2;
        icmp_ln169_reg_1465_pp0_iter3_reg <= icmp_ln169_reg_1465;
        icmp_ln169_reg_1465_pp0_iter4_reg <= icmp_ln169_reg_1465_pp0_iter3_reg;
        icmp_ln169_reg_1465_pp0_iter5_reg <= icmp_ln169_reg_1465_pp0_iter4_reg;
        icmp_ln172_reg_1524 <= icmp_ln172_fu_927_p2;
        select_ln113_reg_1444_pp0_iter2_reg <= select_ln113_reg_1444;
        select_ln113_reg_1444_pp0_iter3_reg <= select_ln113_reg_1444_pp0_iter2_reg;
        select_ln113_reg_1444_pp0_iter4_reg <= select_ln113_reg_1444_pp0_iter3_reg;
        select_ln113_reg_1444_pp0_iter5_reg <= select_ln113_reg_1444_pp0_iter4_reg;
        select_ln113_reg_1444_pp0_iter6_reg <= select_ln113_reg_1444_pp0_iter5_reg;
        select_ln113_reg_1444_pp0_iter7_reg <= select_ln113_reg_1444_pp0_iter6_reg;
        tmp_16_reg_1568 <= {{rel_fu_1195_p3[6:3]}};
        tmp_17_reg_1578 <= {{rel_3_fu_1259_p3[6:3]}};
        tmp_18_reg_1509 <= {{add_ln171_fu_821_p2[21:19]}};
        trunc_ln121_3_reg_1476 <= {{r_sm_head3_dout[19:10]}};
        trunc_ln121_reg_1469 <= trunc_ln121_fu_586_p1;
        trunc_ln205_3_reg_1573 <= trunc_ln205_3_fu_1267_p1;
        trunc_ln205_reg_1563 <= trunc_ln205_fu_1203_p1;
        zext_ln114_reg_1448[7 : 0] <= zext_ln114_fu_570_p1[7 : 0];
        zext_ln114_reg_1448_pp0_iter3_reg[7 : 0] <= zext_ln114_reg_1448[7 : 0];
        zext_ln114_reg_1448_pp0_iter4_reg[7 : 0] <= zext_ln114_reg_1448_pp0_iter3_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_table_load_1_reg_1504 <= attn_inst_softmax_qk_head3_exp_table_q0;
        attn_inst_softmax_qk_head3_exp_table_load_reg_1499 <= attn_inst_softmax_qk_head3_exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd0) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln172_fu_927_p2 == 1'd1) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln172_fu_927_p2 == 1'd0) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)))) begin
        empty_1165_fu_184 <= add_ln165_3_fu_800_p2;
        empty_fu_180 <= add_ln165_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        icmp_ln124_reg_1483 <= grp_fu_323_p2;
        icmp_ln149_reg_1454 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter5_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter5_reg == 2'd1))) begin
        in_two_fu_164 <= in_two_6_fu_1007_p2;
        recip_val_fu_172 <= recip_val_17_fu_1012_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln113_reg_1444_pp0_iter2_reg == 2'd2) & ~(select_ln113_reg_1444_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        retval_0_i15921_fu_156 <= select_ln139_fu_701_p3;
        retval_0_i5816424_fu_160 <= select_ln139_3_fu_713_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_427_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ct_load = 8'd0;
    end else begin
        ap_sig_allocacmp_ct_load = ct_fu_140;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten27_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten27_load = indvar_flatten27_fu_152;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_state_load = 2'd0;
    end else begin
        ap_sig_allocacmp_state_load = state_fu_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2))) begin
            attn_inst_softmax_qk_head3_buffer_668_address0 = attn_inst_softmax_qk_head3_buffer_668_addr_gep_fu_214_p3;
        end else if ((select_ln113_reg_1444 == 2'd1)) begin
            attn_inst_softmax_qk_head3_buffer_668_address0 = zext_ln114_fu_570_p1;
        end else begin
            attn_inst_softmax_qk_head3_buffer_668_address0 = 'bx;
        end
    end else begin
        attn_inst_softmax_qk_head3_buffer_668_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_reg_1444 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        attn_inst_softmax_qk_head3_buffer_668_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_buffer_668_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head3_buffer_668_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_buffer_668_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_score_669_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_score_669_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_score_669_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_score_669_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (select_ln113_reg_1444_pp0_iter3_reg == 2'd1))) begin
        attn_inst_softmax_qk_head3_exp_score_669_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_score_669_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_table_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_table_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_one_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_one_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_one_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_one_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_two_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_two_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_two_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_two_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1103_ce = 1'b1;
    end else begin
        grp_fu_1103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1135_ce = 1'b1;
    end else begin
        grp_fu_1135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op87_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head3_blk_n = r_sm_head3_empty_n;
    end else begin
        r_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op87_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head3_read = 1'b1;
    end else begin
        r_sm_head3_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        rq_sm_head3_blk_n = rq_sm_head3_full_n;
    end else begin
        rq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        rq_sm_head3_write = 1'b1;
    end else begin
        rq_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_421_p2 = (ap_sig_allocacmp_indvar_flatten27_load + 16'd1);

assign add_ln113_3_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln114_fu_540_p2 = (select_ln110_3_fu_524_p3 + 8'd1);

assign add_ln162_3_fu_659_p2 = (minus_3_fu_653_p2 + 10'd16);

assign add_ln162_fu_618_p2 = (minus_fu_612_p2 + 10'd16);

assign add_ln165_3_fu_800_p2 = (select_ln149_fu_773_p3 + zext_ln165_3_fu_797_p1);

assign add_ln165_fu_790_p2 = (select_ln149_3_fu_780_p3 + zext_ln165_fu_787_p1);

assign add_ln171_3_fu_901_p2 = ($signed(add_ln165_3_fu_800_p2) + $signed(22'd4160626));

assign add_ln171_fu_821_p2 = ($signed(add_ln165_fu_790_p2) + $signed(22'd4160626));

assign add_ln174_3_fu_933_p2 = ($signed(zext_ln171_3_fu_897_p1) + $signed(23'd7974548));

assign add_ln174_fu_847_p2 = ($signed(zext_ln171_fu_817_p1) + $signed(23'd7974548));

assign add_ln204_3_fu_1229_p2 = (select_ln204_8_fu_1221_p3 + zext_ln204_3_fu_1217_p1);

assign add_ln204_fu_1165_p2 = (select_ln204_fu_1157_p3 + zext_ln204_fu_1153_p1);

assign and_ln110_fu_507_p2 = (xor_ln110_fu_496_p2 & icmp_ln114_fu_501_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op87_read_state3 == 1'b1) & (r_sm_head3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (rq_sm_head3_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_357 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_375 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_415 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter5_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter5_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op87_read_state3 = (~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2));
end

assign attn_inst_softmax_qk_head3_buffer_668_addr_gep_fu_214_p3 = zext_ln114_fu_570_p1;

assign attn_inst_softmax_qk_head3_exp_score_669_address0 = zext_ln114_reg_1448_pp0_iter3_reg;

assign attn_inst_softmax_qk_head3_exp_score_669_address1 = zext_ln114_reg_1448_pp0_iter4_reg;

assign attn_inst_softmax_qk_head3_exp_score_669_d0 = {{attn_inst_softmax_qk_head3_exp_table_q0}, {attn_inst_softmax_qk_head3_exp_table_q1}};

assign attn_inst_softmax_qk_head3_exp_table_address0 = zext_ln164_3_fu_675_p1;

assign attn_inst_softmax_qk_head3_exp_table_address1 = zext_ln164_fu_634_p1;

assign attn_inst_softmax_qk_head3_recip_table_one_address0 = zext_ln180_3_fu_984_p1;

assign attn_inst_softmax_qk_head3_recip_table_one_address1 = zext_ln180_fu_888_p1;

assign attn_inst_softmax_qk_head3_recip_table_two_address0 = zext_ln176_3_fu_965_p1;

assign attn_inst_softmax_qk_head3_recip_table_two_address1 = zext_ln176_fu_879_p1;

assign cursor_3_fu_665_p4 = {{add_ln162_3_fu_659_p2[9:5]}};

assign cursor_fu_624_p4 = {{add_ln162_fu_618_p2[9:5]}};

assign cursor_one_3_fu_907_p4 = {{add_ln171_3_fu_901_p2[21:13]}};

assign cursor_one_fu_827_p4 = {{add_ln171_fu_821_p2[21:13]}};

assign cursor_two_3_fu_957_p3 = ((tmp_21_fu_949_p3[0:0] == 1'b1) ? 6'd0 : trunc_ln174_6_fu_939_p4);

assign cursor_two_fu_871_p3 = ((tmp_19_fu_863_p3[0:0] == 1'b1) ? 6'd0 : trunc_ln174_5_fu_853_p4);

assign grp_fu_1103_p0 = grp_fu_1103_p00;

assign grp_fu_1103_p00 = trunc_ln198_fu_1087_p1;

assign grp_fu_1103_p1 = grp_fu_1103_p10;

assign grp_fu_1103_p10 = recip_val_fu_172;

assign grp_fu_1135_p0 = grp_fu_1135_p00;

assign grp_fu_1135_p00 = tmp_s_fu_1113_p4;

assign grp_fu_1135_p1 = grp_fu_1135_p10;

assign grp_fu_1135_p10 = recip_val_14_fu_176;

assign grp_fu_323_p2 = ((select_ln110_3_reg_1437 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_427_p2 = ((ap_sig_allocacmp_indvar_flatten27_load == 16'd57624) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_433_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd588) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_501_p2 = ((ap_sig_allocacmp_ct_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_579_p2 = ((select_ln110_3_reg_1437 == 8'd195) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_927_p2 = ((tmp_20_fu_917_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln224_3_fu_708_p2 = (($signed(select_ln124_fu_684_p3) < $signed(trunc_ln121_3_reg_1476)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_696_p2 = (($signed(select_ln124_3_fu_690_p3) < $signed(trunc_ln121_reg_1469)) ? 1'b1 : 1'b0);

assign icmp_ln8_3_fu_1293_p2 = ((tmp_17_reg_1578 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_1281_p2 = ((tmp_16_reg_1568 != 4'd0) ? 1'b1 : 1'b0);

assign in_two_6_fu_1007_p2 = ((tmp_18_reg_1509 != 3'd0) ? 1'b1 : 1'b0);

assign minus_3_fu_653_p2 = (retval_0_i5816424_fu_160 - tmp_306_fu_643_p4);

assign minus_fu_612_p2 = (retval_0_i15921_fu_156 - trunc_ln161_fu_608_p1);

assign or_ln110_fu_519_p2 = (icmp_ln113_reg_1430 | and_ln110_fu_507_p2);

assign recip_val_17_fu_1012_p3 = ((in_two_6_fu_1007_p2[0:0] == 1'b1) ? attn_inst_softmax_qk_head3_recip_table_two_q1 : attn_inst_softmax_qk_head3_recip_table_one_q1);

assign rel_3_fu_1259_p3 = ((in_two_5_fu_168[0:0] == 1'b1) ? zext_ln204_7_fu_1245_p1 : trunc_ln204_1_fu_1249_p4);

assign rel_fu_1195_p3 = ((in_two_fu_164[0:0] == 1'b1) ? zext_ln204_6_fu_1181_p1 : trunc_ln204_s_fu_1185_p4);

assign rq_sm_head3_din = {{select_ln205_3_fu_1298_p3}, {select_ln205_fu_1286_p3}};

assign select_ln110_3_fu_524_p3 = ((or_ln110_fu_519_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_ct_load);

assign select_ln110_fu_489_p3 = ((icmp_ln113_reg_1430[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_state_load);

assign select_ln113_3_fu_445_p3 = ((icmp_ln113_fu_433_p2[0:0] == 1'b1) ? 10'd1 : add_ln113_3_fu_439_p2);

assign select_ln113_fu_532_p3 = ((and_ln110_fu_507_p2[0:0] == 1'b1) ? state_5_fu_513_p2 : select_ln110_fu_489_p3);

assign select_ln124_3_fu_690_p3 = ((icmp_ln124_reg_1483[0:0] == 1'b1) ? trunc_ln121_reg_1469 : retval_0_i15921_fu_156);

assign select_ln124_fu_684_p3 = ((icmp_ln124_reg_1483[0:0] == 1'b1) ? trunc_ln121_3_reg_1476 : retval_0_i5816424_fu_160);

assign select_ln139_3_fu_713_p3 = ((icmp_ln224_3_fu_708_p2[0:0] == 1'b1) ? trunc_ln121_3_reg_1476 : select_ln124_fu_684_p3);

assign select_ln139_fu_701_p3 = ((icmp_ln224_fu_696_p2[0:0] == 1'b1) ? trunc_ln121_reg_1469 : select_ln124_3_fu_690_p3);

assign select_ln149_3_fu_780_p3 = ((icmp_ln149_reg_1454_pp0_iter4_reg[0:0] == 1'b1) ? 22'd0 : empty_fu_180);

assign select_ln149_fu_773_p3 = ((icmp_ln149_reg_1454_pp0_iter4_reg[0:0] == 1'b1) ? 22'd0 : empty_1165_fu_184);

assign select_ln204_8_fu_1221_p3 = ((in_two_5_fu_168[0:0] == 1'b1) ? 24'd262144 : 24'd32768);

assign select_ln204_fu_1157_p3 = ((in_two_fu_164[0:0] == 1'b1) ? 24'd262144 : 24'd32768);

assign select_ln205_3_fu_1298_p3 = ((icmp_ln8_3_fu_1293_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln205_3_reg_1573);

assign select_ln205_fu_1286_p3 = ((icmp_ln8_fu_1281_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln205_reg_1563);

assign state_5_fu_513_p2 = (select_ln110_fu_489_p3 + 2'd1);

assign tmp_121_fu_1235_p4 = {{add_ln204_3_fu_1229_p2[23:19]}};

assign tmp_19_fu_863_p3 = add_ln174_fu_847_p2[32'd22];

assign tmp_20_fu_917_p4 = {{add_ln171_3_fu_901_p2[21:19]}};

assign tmp_21_fu_949_p3 = add_ln174_3_fu_933_p2[32'd22];

assign tmp_306_fu_643_p4 = {{attn_inst_softmax_qk_head3_buffer_668_q0[19:10]}};

assign tmp_fu_1171_p4 = {{add_ln204_fu_1165_p2[23:19]}};

assign tmp_s_fu_1113_p4 = {{attn_inst_softmax_qk_head3_exp_score_669_q1[31:16]}};

assign trunc_ln121_fu_586_p1 = r_sm_head3_dout[9:0];

assign trunc_ln161_fu_608_p1 = attn_inst_softmax_qk_head3_buffer_668_q0[9:0];

assign trunc_ln174_5_fu_853_p4 = {{add_ln174_fu_847_p2[21:16]}};

assign trunc_ln174_6_fu_939_p4 = {{add_ln174_3_fu_933_p2[21:16]}};

assign trunc_ln198_fu_1087_p1 = attn_inst_softmax_qk_head3_exp_score_669_q1[15:0];

assign trunc_ln204_1_fu_1249_p4 = {{add_ln204_3_fu_1229_p2[22:16]}};

assign trunc_ln204_s_fu_1185_p4 = {{add_ln204_fu_1165_p2[22:16]}};

assign trunc_ln205_3_fu_1267_p1 = rel_3_fu_1259_p3[2:0];

assign trunc_ln205_fu_1203_p1 = rel_fu_1195_p3[2:0];

assign xor_ln110_fu_496_p2 = (icmp_ln113_reg_1430 ^ 1'd1);

assign zext_ln114_fu_570_p1 = select_ln110_3_reg_1437;

assign zext_ln164_3_fu_675_p1 = cursor_3_fu_665_p4;

assign zext_ln164_fu_634_p1 = cursor_fu_624_p4;

assign zext_ln165_3_fu_797_p1 = attn_inst_softmax_qk_head3_exp_table_load_1_reg_1504;

assign zext_ln165_fu_787_p1 = attn_inst_softmax_qk_head3_exp_table_load_reg_1499;

assign zext_ln171_3_fu_897_p1 = add_ln165_3_fu_800_p2;

assign zext_ln171_fu_817_p1 = add_ln165_fu_790_p2;

assign zext_ln176_3_fu_965_p1 = cursor_two_3_fu_957_p3;

assign zext_ln176_fu_879_p1 = cursor_two_fu_871_p3;

assign zext_ln180_3_fu_984_p1 = cursor_one_3_fu_907_p4;

assign zext_ln180_fu_888_p1 = cursor_one_fu_827_p4;

assign zext_ln204_3_fu_1217_p1 = grp_fu_1135_p2;

assign zext_ln204_6_fu_1181_p1 = tmp_fu_1171_p4;

assign zext_ln204_7_fu_1245_p1 = tmp_121_fu_1235_p4;

assign zext_ln204_fu_1153_p1 = grp_fu_1103_p2;

always @ (posedge ap_clk) begin
    zext_ln114_reg_1448[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1448_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1448_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //ATTN11_do_softmax
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_softmax_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r_sm_head1_dout,
        r_sm_head1_num_data_valid,
        r_sm_head1_fifo_cap,
        r_sm_head1_empty_n,
        r_sm_head1_read,
        rq_sm_head1_din,
        rq_sm_head1_num_data_valid,
        rq_sm_head1_fifo_cap,
        rq_sm_head1_full_n,
        rq_sm_head1_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] r_sm_head1_dout;
input  [9:0] r_sm_head1_num_data_valid;
input  [9:0] r_sm_head1_fifo_cap;
input   r_sm_head1_empty_n;
output   r_sm_head1_read;
output  [5:0] rq_sm_head1_din;
input  [9:0] rq_sm_head1_num_data_valid;
input  [9:0] rq_sm_head1_fifo_cap;
input   rq_sm_head1_full_n;
output   rq_sm_head1_write;

reg ap_idle;
reg r_sm_head1_read;
reg rq_sm_head1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] select_ln113_reg_1444;
reg    ap_predicate_op87_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] select_ln113_reg_1444_pp0_iter7_reg;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_427_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] attn_inst_softmax_qk_head1_buffer_664_address0;
reg    attn_inst_softmax_qk_head1_buffer_664_ce0;
reg    attn_inst_softmax_qk_head1_buffer_664_we0;
wire   [19:0] attn_inst_softmax_qk_head1_buffer_664_q0;
wire   [4:0] attn_inst_softmax_qk_head1_exp_table_address0;
reg    attn_inst_softmax_qk_head1_exp_table_ce0;
wire   [15:0] attn_inst_softmax_qk_head1_exp_table_q0;
wire   [4:0] attn_inst_softmax_qk_head1_exp_table_address1;
reg    attn_inst_softmax_qk_head1_exp_table_ce1;
wire   [15:0] attn_inst_softmax_qk_head1_exp_table_q1;
wire   [7:0] attn_inst_softmax_qk_head1_exp_score_665_address0;
reg    attn_inst_softmax_qk_head1_exp_score_665_ce0;
reg    attn_inst_softmax_qk_head1_exp_score_665_we0;
wire   [31:0] attn_inst_softmax_qk_head1_exp_score_665_d0;
wire   [7:0] attn_inst_softmax_qk_head1_exp_score_665_address1;
reg    attn_inst_softmax_qk_head1_exp_score_665_ce1;
wire   [31:0] attn_inst_softmax_qk_head1_exp_score_665_q1;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_two_address0;
reg    attn_inst_softmax_qk_head1_recip_table_two_ce0;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_two_q0;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_two_address1;
reg    attn_inst_softmax_qk_head1_recip_table_two_ce1;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_two_q1;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_one_address0;
reg    attn_inst_softmax_qk_head1_recip_table_one_ce0;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_one_q0;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_one_address1;
reg    attn_inst_softmax_qk_head1_recip_table_one_ce1;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_one_q1;
reg    r_sm_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    rq_sm_head1_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln113_fu_433_p2;
reg   [0:0] icmp_ln113_reg_1430;
wire   [7:0] select_ln110_2_fu_524_p3;
reg   [7:0] select_ln110_2_reg_1437;
wire   [1:0] select_ln113_fu_532_p3;
reg   [1:0] select_ln113_reg_1444_pp0_iter2_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter3_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter4_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter5_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter6_reg;
wire   [63:0] zext_ln114_fu_570_p1;
reg   [63:0] zext_ln114_reg_1448;
reg   [63:0] zext_ln114_reg_1448_pp0_iter3_reg;
reg   [63:0] zext_ln114_reg_1448_pp0_iter4_reg;
wire   [0:0] grp_fu_323_p2;
reg   [0:0] icmp_ln149_reg_1454;
reg   [0:0] icmp_ln149_reg_1454_pp0_iter3_reg;
reg   [0:0] icmp_ln149_reg_1454_pp0_iter4_reg;
wire   [0:0] icmp_ln169_fu_579_p2;
reg   [0:0] icmp_ln169_reg_1465;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter3_reg;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter4_reg;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter5_reg;
wire   [9:0] trunc_ln121_fu_586_p1;
reg   [9:0] trunc_ln121_reg_1469;
reg   [9:0] trunc_ln121_2_reg_1476;
reg   [0:0] icmp_ln124_reg_1483;
reg   [15:0] attn_inst_softmax_qk_head1_exp_table_load_reg_1499;
reg   [15:0] attn_inst_softmax_qk_head1_exp_table_load_1_reg_1504;
reg   [2:0] tmp_12_reg_1509;
wire   [0:0] icmp_ln172_fu_927_p2;
reg   [0:0] icmp_ln172_reg_1524;
wire   [2:0] trunc_ln205_fu_1203_p1;
reg   [2:0] trunc_ln205_reg_1563;
reg   [3:0] tmp_10_reg_1568;
wire   [2:0] trunc_ln205_2_fu_1267_p1;
reg   [2:0] trunc_ln205_2_reg_1573;
reg   [3:0] tmp_11_reg_1578;
wire   [7:0] attn_inst_softmax_qk_head1_buffer_664_addr_gep_fu_214_p3;
wire   [63:0] zext_ln164_fu_634_p1;
wire   [63:0] zext_ln164_2_fu_675_p1;
wire   [63:0] zext_ln176_fu_879_p1;
wire   [63:0] zext_ln180_fu_888_p1;
wire   [63:0] zext_ln176_2_fu_965_p1;
wire   [63:0] zext_ln180_2_fu_984_p1;
reg   [7:0] ct_fu_140;
wire   [7:0] add_ln114_fu_540_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [7:0] ap_sig_allocacmp_ct_load;
reg   [1:0] state_fu_144;
reg   [1:0] ap_sig_allocacmp_state_load;
reg   [9:0] indvar_flatten_fu_148;
wire   [9:0] select_ln113_2_fu_445_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten27_fu_152;
wire   [15:0] add_ln112_fu_421_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten27_load;
reg   [9:0] max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156;
wire   [9:0] select_ln139_fu_701_p3;
reg   [9:0] max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160;
wire   [9:0] select_ln139_2_fu_713_p3;
reg   [0:0] in_two_fu_164;
wire   [0:0] in_two_4_fu_1007_p2;
reg   [0:0] in_two_3_fu_168;
reg   [7:0] recip_val_fu_172;
wire   [7:0] recip_val_11_fu_1012_p3;
reg   [7:0] recip_val_8_fu_176;
reg   [21:0] empty_fu_180;
wire   [21:0] add_ln165_fu_790_p2;
reg   [21:0] empty_1164_fu_184;
wire   [21:0] add_ln165_2_fu_800_p2;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln113_2_fu_439_p2;
wire   [0:0] icmp_ln114_fu_501_p2;
wire   [0:0] xor_ln110_fu_496_p2;
wire   [1:0] select_ln110_fu_489_p3;
wire   [0:0] and_ln110_fu_507_p2;
wire   [0:0] or_ln110_fu_519_p2;
wire   [1:0] state_4_fu_513_p2;
wire   [9:0] trunc_ln161_fu_608_p1;
wire   [9:0] minus_fu_612_p2;
wire   [9:0] add_ln162_fu_618_p2;
wire   [4:0] cursor_fu_624_p4;
wire   [9:0] tmp_s_fu_643_p4;
wire   [9:0] minus_2_fu_653_p2;
wire   [9:0] add_ln162_2_fu_659_p2;
wire   [4:0] cursor_2_fu_665_p4;
wire   [9:0] select_ln124_2_fu_690_p3;
wire   [0:0] icmp_ln224_fu_696_p2;
wire   [9:0] select_ln124_fu_684_p3;
wire   [0:0] icmp_ln224_2_fu_708_p2;
wire   [21:0] select_ln149_2_fu_780_p3;
wire   [21:0] zext_ln165_fu_787_p1;
wire   [21:0] select_ln149_fu_773_p3;
wire   [21:0] zext_ln165_2_fu_797_p1;
wire   [21:0] add_ln171_fu_821_p2;
wire   [22:0] zext_ln171_fu_817_p1;
wire   [22:0] add_ln174_fu_847_p2;
wire   [0:0] tmp_13_fu_863_p3;
wire   [5:0] trunc_ln174_3_fu_853_p4;
wire   [5:0] cursor_two_fu_871_p3;
wire   [8:0] cursor_one_fu_827_p4;
wire   [21:0] add_ln171_2_fu_901_p2;
wire   [2:0] tmp_14_fu_917_p4;
wire   [22:0] zext_ln171_2_fu_897_p1;
wire   [22:0] add_ln174_2_fu_933_p2;
wire   [0:0] tmp_15_fu_949_p3;
wire   [5:0] trunc_ln174_4_fu_939_p4;
wire   [5:0] cursor_two_2_fu_957_p3;
wire   [8:0] cursor_one_2_fu_907_p4;
wire   [15:0] trunc_ln198_fu_1087_p1;
wire   [15:0] grp_fu_1103_p0;
wire   [7:0] grp_fu_1103_p1;
wire   [15:0] tmp_99_fu_1113_p4;
wire   [15:0] grp_fu_1135_p0;
wire   [7:0] grp_fu_1135_p1;
wire   [22:0] grp_fu_1103_p2;
wire   [23:0] select_ln204_fu_1157_p3;
wire   [23:0] zext_ln204_fu_1153_p1;
wire   [23:0] add_ln204_fu_1165_p2;
wire   [4:0] tmp_fu_1171_p4;
wire   [6:0] zext_ln204_4_fu_1181_p1;
wire   [6:0] trunc_ln204_7_fu_1185_p4;
wire   [6:0] rel_fu_1195_p3;
wire   [22:0] grp_fu_1135_p2;
wire   [23:0] select_ln204_5_fu_1221_p3;
wire   [23:0] zext_ln204_2_fu_1217_p1;
wire   [23:0] add_ln204_2_fu_1229_p2;
wire   [4:0] tmp_120_fu_1235_p4;
wire   [6:0] zext_ln204_5_fu_1245_p1;
wire   [6:0] trunc_ln204_s_fu_1249_p4;
wire   [6:0] rel_2_fu_1259_p3;
wire   [0:0] icmp_ln8_fu_1281_p2;
wire   [0:0] icmp_ln8_2_fu_1293_p2;
wire   [2:0] select_ln205_2_fu_1298_p3;
wire   [2:0] select_ln205_fu_1286_p3;
reg    grp_fu_1103_ce;
reg    grp_fu_1135_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [22:0] grp_fu_1103_p00;
wire   [22:0] grp_fu_1103_p10;
wire   [22:0] grp_fu_1135_p00;
wire   [22:0] grp_fu_1135_p10;
reg    ap_condition_357;
reg    ap_condition_415;
reg    ap_condition_375;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ct_fu_140 = 8'd0;
//#0 state_fu_144 = 2'd0;
//#0 indvar_flatten_fu_148 = 10'd0;
//#0 indvar_flatten27_fu_152 = 16'd0;
//#0 max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156 = 10'd0;
//#0 max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160 = 10'd0;
//#0 in_two_fu_164 = 1'd0;
//#0 in_two_3_fu_168 = 1'd0;
//#0 recip_val_fu_172 = 8'd0;
//#0 recip_val_8_fu_176 = 8'd0;
//#0 empty_fu_180 = 22'd0;
//#0 empty_1164_fu_184 = 22'd0;
end

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_buffer_664_RAM_AUTO_1R1W #(
    .DataWidth( 20 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head1_buffer_664_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_buffer_664_address0),
    .ce0(attn_inst_softmax_qk_head1_buffer_664_ce0),
    .we0(attn_inst_softmax_qk_head1_buffer_664_we0),
    .d0(r_sm_head1_dout),
    .q0(attn_inst_softmax_qk_head1_buffer_664_q0)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_table_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_softmax_qk_head1_exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_exp_table_address0),
    .ce0(attn_inst_softmax_qk_head1_exp_table_ce0),
    .q0(attn_inst_softmax_qk_head1_exp_table_q0),
    .address1(attn_inst_softmax_qk_head1_exp_table_address1),
    .ce1(attn_inst_softmax_qk_head1_exp_table_ce1),
    .q1(attn_inst_softmax_qk_head1_exp_table_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_score_665_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head1_exp_score_665_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_exp_score_665_address0),
    .ce0(attn_inst_softmax_qk_head1_exp_score_665_ce0),
    .we0(attn_inst_softmax_qk_head1_exp_score_665_we0),
    .d0(attn_inst_softmax_qk_head1_exp_score_665_d0),
    .address1(attn_inst_softmax_qk_head1_exp_score_665_address1),
    .ce1(attn_inst_softmax_qk_head1_exp_score_665_ce1),
    .q1(attn_inst_softmax_qk_head1_exp_score_665_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_two_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head1_recip_table_two_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_recip_table_two_address0),
    .ce0(attn_inst_softmax_qk_head1_recip_table_two_ce0),
    .q0(attn_inst_softmax_qk_head1_recip_table_two_q0),
    .address1(attn_inst_softmax_qk_head1_recip_table_two_address1),
    .ce1(attn_inst_softmax_qk_head1_recip_table_two_ce1),
    .q1(attn_inst_softmax_qk_head1_recip_table_two_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_one_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head1_recip_table_one_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_recip_table_one_address0),
    .ce0(attn_inst_softmax_qk_head1_recip_table_one_ce0),
    .q0(attn_inst_softmax_qk_head1_recip_table_one_q0),
    .address1(attn_inst_softmax_qk_head1_recip_table_one_address1),
    .ce1(attn_inst_softmax_qk_head1_recip_table_one_ce1),
    .q1(attn_inst_softmax_qk_head1_recip_table_one_q1)
);

ATTN11_mul_16ns_8ns_23_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_16ns_8ns_23_2_1_U825(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1103_p0),
    .din1(grp_fu_1103_p1),
    .ce(grp_fu_1103_ce),
    .dout(grp_fu_1103_p2)
);

ATTN11_mul_16ns_8ns_23_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_16ns_8ns_23_2_1_U826(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1135_p0),
    .din1(grp_fu_1135_p1),
    .ce(grp_fu_1135_ce),
    .dout(grp_fu_1135_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_357)) begin
        ct_fu_140 <= add_ln114_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_415)) begin
    if ((icmp_ln172_reg_1524 == 1'd1)) begin
        in_two_3_fu_168 <= 1'd0;
    end else if ((icmp_ln172_reg_1524 == 1'd0)) begin
        in_two_3_fu_168 <= 1'd1;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_375)) begin
    if ((icmp_ln112_fu_427_p2 == 1'd0)) begin
        indvar_flatten27_fu_152 <= add_ln112_fu_421_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten27_fu_152 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_375)) begin
    if ((icmp_ln112_fu_427_p2 == 1'd0)) begin
        indvar_flatten_fu_148 <= select_ln113_2_fu_445_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_148 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_415)) begin
    if ((icmp_ln172_reg_1524 == 1'd1)) begin
        recip_val_8_fu_176 <= attn_inst_softmax_qk_head1_recip_table_one_q0;
    end else if ((icmp_ln172_reg_1524 == 1'd0)) begin
        recip_val_8_fu_176 <= attn_inst_softmax_qk_head1_recip_table_two_q0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_357)) begin
    state_fu_144 <= select_ln113_fu_532_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln113_reg_1430 <= icmp_ln113_fu_433_p2;
        select_ln110_2_reg_1437 <= select_ln110_2_fu_524_p3;
        select_ln113_reg_1444 <= select_ln113_fu_532_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln149_reg_1454_pp0_iter3_reg <= icmp_ln149_reg_1454;
        icmp_ln149_reg_1454_pp0_iter4_reg <= icmp_ln149_reg_1454_pp0_iter3_reg;
        icmp_ln169_reg_1465 <= icmp_ln169_fu_579_p2;
        icmp_ln169_reg_1465_pp0_iter3_reg <= icmp_ln169_reg_1465;
        icmp_ln169_reg_1465_pp0_iter4_reg <= icmp_ln169_reg_1465_pp0_iter3_reg;
        icmp_ln169_reg_1465_pp0_iter5_reg <= icmp_ln169_reg_1465_pp0_iter4_reg;
        icmp_ln172_reg_1524 <= icmp_ln172_fu_927_p2;
        select_ln113_reg_1444_pp0_iter2_reg <= select_ln113_reg_1444;
        select_ln113_reg_1444_pp0_iter3_reg <= select_ln113_reg_1444_pp0_iter2_reg;
        select_ln113_reg_1444_pp0_iter4_reg <= select_ln113_reg_1444_pp0_iter3_reg;
        select_ln113_reg_1444_pp0_iter5_reg <= select_ln113_reg_1444_pp0_iter4_reg;
        select_ln113_reg_1444_pp0_iter6_reg <= select_ln113_reg_1444_pp0_iter5_reg;
        select_ln113_reg_1444_pp0_iter7_reg <= select_ln113_reg_1444_pp0_iter6_reg;
        tmp_10_reg_1568 <= {{rel_fu_1195_p3[6:3]}};
        tmp_11_reg_1578 <= {{rel_2_fu_1259_p3[6:3]}};
        tmp_12_reg_1509 <= {{add_ln171_fu_821_p2[21:19]}};
        trunc_ln121_2_reg_1476 <= {{r_sm_head1_dout[19:10]}};
        trunc_ln121_reg_1469 <= trunc_ln121_fu_586_p1;
        trunc_ln205_2_reg_1573 <= trunc_ln205_2_fu_1267_p1;
        trunc_ln205_reg_1563 <= trunc_ln205_fu_1203_p1;
        zext_ln114_reg_1448[7 : 0] <= zext_ln114_fu_570_p1[7 : 0];
        zext_ln114_reg_1448_pp0_iter3_reg[7 : 0] <= zext_ln114_reg_1448[7 : 0];
        zext_ln114_reg_1448_pp0_iter4_reg[7 : 0] <= zext_ln114_reg_1448_pp0_iter3_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_table_load_1_reg_1504 <= attn_inst_softmax_qk_head1_exp_table_q0;
        attn_inst_softmax_qk_head1_exp_table_load_reg_1499 <= attn_inst_softmax_qk_head1_exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd0) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln172_fu_927_p2 == 1'd1) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln172_fu_927_p2 == 1'd0) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)))) begin
        empty_1164_fu_184 <= add_ln165_2_fu_800_p2;
        empty_fu_180 <= add_ln165_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        icmp_ln124_reg_1483 <= grp_fu_323_p2;
        icmp_ln149_reg_1454 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter5_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter5_reg == 2'd1))) begin
        in_two_fu_164 <= in_two_4_fu_1007_p2;
        recip_val_fu_172 <= recip_val_11_fu_1012_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln113_reg_1444_pp0_iter2_reg == 2'd2) & ~(select_ln113_reg_1444_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156 <= select_ln139_fu_701_p3;
        max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160 <= select_ln139_2_fu_713_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_427_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ct_load = 8'd0;
    end else begin
        ap_sig_allocacmp_ct_load = ct_fu_140;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten27_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten27_load = indvar_flatten27_fu_152;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_state_load = 2'd0;
    end else begin
        ap_sig_allocacmp_state_load = state_fu_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2))) begin
            attn_inst_softmax_qk_head1_buffer_664_address0 = attn_inst_softmax_qk_head1_buffer_664_addr_gep_fu_214_p3;
        end else if ((select_ln113_reg_1444 == 2'd1)) begin
            attn_inst_softmax_qk_head1_buffer_664_address0 = zext_ln114_fu_570_p1;
        end else begin
            attn_inst_softmax_qk_head1_buffer_664_address0 = 'bx;
        end
    end else begin
        attn_inst_softmax_qk_head1_buffer_664_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_reg_1444 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        attn_inst_softmax_qk_head1_buffer_664_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_buffer_664_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head1_buffer_664_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_buffer_664_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_score_665_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_score_665_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_score_665_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_score_665_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (select_ln113_reg_1444_pp0_iter3_reg == 2'd1))) begin
        attn_inst_softmax_qk_head1_exp_score_665_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_score_665_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_table_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_table_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_one_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_one_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_one_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_one_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_two_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_two_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_two_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_two_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1103_ce = 1'b1;
    end else begin
        grp_fu_1103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1135_ce = 1'b1;
    end else begin
        grp_fu_1135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op87_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_blk_n = r_sm_head1_empty_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op87_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_read = 1'b1;
    end else begin
        r_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        rq_sm_head1_blk_n = rq_sm_head1_full_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        rq_sm_head1_write = 1'b1;
    end else begin
        rq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_421_p2 = (ap_sig_allocacmp_indvar_flatten27_load + 16'd1);

assign add_ln113_2_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln114_fu_540_p2 = (select_ln110_2_fu_524_p3 + 8'd1);

assign add_ln162_2_fu_659_p2 = (minus_2_fu_653_p2 + 10'd16);

assign add_ln162_fu_618_p2 = (minus_fu_612_p2 + 10'd16);

assign add_ln165_2_fu_800_p2 = (select_ln149_fu_773_p3 + zext_ln165_2_fu_797_p1);

assign add_ln165_fu_790_p2 = (select_ln149_2_fu_780_p3 + zext_ln165_fu_787_p1);

assign add_ln171_2_fu_901_p2 = ($signed(add_ln165_2_fu_800_p2) + $signed(22'd4160626));

assign add_ln171_fu_821_p2 = ($signed(add_ln165_fu_790_p2) + $signed(22'd4160626));

assign add_ln174_2_fu_933_p2 = ($signed(zext_ln171_2_fu_897_p1) + $signed(23'd7974548));

assign add_ln174_fu_847_p2 = ($signed(zext_ln171_fu_817_p1) + $signed(23'd7974548));

assign add_ln204_2_fu_1229_p2 = (select_ln204_5_fu_1221_p3 + zext_ln204_2_fu_1217_p1);

assign add_ln204_fu_1165_p2 = (select_ln204_fu_1157_p3 + zext_ln204_fu_1153_p1);

assign and_ln110_fu_507_p2 = (xor_ln110_fu_496_p2 & icmp_ln114_fu_501_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op87_read_state3 == 1'b1) & (r_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (rq_sm_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_357 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_375 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_415 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter5_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter5_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op87_read_state3 = (~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2));
end

assign attn_inst_softmax_qk_head1_buffer_664_addr_gep_fu_214_p3 = zext_ln114_fu_570_p1;

assign attn_inst_softmax_qk_head1_exp_score_665_address0 = zext_ln114_reg_1448_pp0_iter3_reg;

assign attn_inst_softmax_qk_head1_exp_score_665_address1 = zext_ln114_reg_1448_pp0_iter4_reg;

assign attn_inst_softmax_qk_head1_exp_score_665_d0 = {{attn_inst_softmax_qk_head1_exp_table_q0}, {attn_inst_softmax_qk_head1_exp_table_q1}};

assign attn_inst_softmax_qk_head1_exp_table_address0 = zext_ln164_2_fu_675_p1;

assign attn_inst_softmax_qk_head1_exp_table_address1 = zext_ln164_fu_634_p1;

assign attn_inst_softmax_qk_head1_recip_table_one_address0 = zext_ln180_2_fu_984_p1;

assign attn_inst_softmax_qk_head1_recip_table_one_address1 = zext_ln180_fu_888_p1;

assign attn_inst_softmax_qk_head1_recip_table_two_address0 = zext_ln176_2_fu_965_p1;

assign attn_inst_softmax_qk_head1_recip_table_two_address1 = zext_ln176_fu_879_p1;

assign cursor_2_fu_665_p4 = {{add_ln162_2_fu_659_p2[9:5]}};

assign cursor_fu_624_p4 = {{add_ln162_fu_618_p2[9:5]}};

assign cursor_one_2_fu_907_p4 = {{add_ln171_2_fu_901_p2[21:13]}};

assign cursor_one_fu_827_p4 = {{add_ln171_fu_821_p2[21:13]}};

assign cursor_two_2_fu_957_p3 = ((tmp_15_fu_949_p3[0:0] == 1'b1) ? 6'd0 : trunc_ln174_4_fu_939_p4);

assign cursor_two_fu_871_p3 = ((tmp_13_fu_863_p3[0:0] == 1'b1) ? 6'd0 : trunc_ln174_3_fu_853_p4);

assign grp_fu_1103_p0 = grp_fu_1103_p00;

assign grp_fu_1103_p00 = trunc_ln198_fu_1087_p1;

assign grp_fu_1103_p1 = grp_fu_1103_p10;

assign grp_fu_1103_p10 = recip_val_fu_172;

assign grp_fu_1135_p0 = grp_fu_1135_p00;

assign grp_fu_1135_p00 = tmp_99_fu_1113_p4;

assign grp_fu_1135_p1 = grp_fu_1135_p10;

assign grp_fu_1135_p10 = recip_val_8_fu_176;

assign grp_fu_323_p2 = ((select_ln110_2_reg_1437 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_427_p2 = ((ap_sig_allocacmp_indvar_flatten27_load == 16'd57624) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_433_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd588) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_501_p2 = ((ap_sig_allocacmp_ct_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_579_p2 = ((select_ln110_2_reg_1437 == 8'd195) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_927_p2 = ((tmp_14_fu_917_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln224_2_fu_708_p2 = (($signed(select_ln124_fu_684_p3) < $signed(trunc_ln121_2_reg_1476)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_696_p2 = (($signed(select_ln124_2_fu_690_p3) < $signed(trunc_ln121_reg_1469)) ? 1'b1 : 1'b0);

assign icmp_ln8_2_fu_1293_p2 = ((tmp_11_reg_1578 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_1281_p2 = ((tmp_10_reg_1568 != 4'd0) ? 1'b1 : 1'b0);

assign in_two_4_fu_1007_p2 = ((tmp_12_reg_1509 != 3'd0) ? 1'b1 : 1'b0);

assign minus_2_fu_653_p2 = (max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160 - tmp_s_fu_643_p4);

assign minus_fu_612_p2 = (max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156 - trunc_ln161_fu_608_p1);

assign or_ln110_fu_519_p2 = (icmp_ln113_reg_1430 | and_ln110_fu_507_p2);

assign recip_val_11_fu_1012_p3 = ((in_two_4_fu_1007_p2[0:0] == 1'b1) ? attn_inst_softmax_qk_head1_recip_table_two_q1 : attn_inst_softmax_qk_head1_recip_table_one_q1);

assign rel_2_fu_1259_p3 = ((in_two_3_fu_168[0:0] == 1'b1) ? zext_ln204_5_fu_1245_p1 : trunc_ln204_s_fu_1249_p4);

assign rel_fu_1195_p3 = ((in_two_fu_164[0:0] == 1'b1) ? zext_ln204_4_fu_1181_p1 : trunc_ln204_7_fu_1185_p4);

assign rq_sm_head1_din = {{select_ln205_2_fu_1298_p3}, {select_ln205_fu_1286_p3}};

assign select_ln110_2_fu_524_p3 = ((or_ln110_fu_519_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_ct_load);

assign select_ln110_fu_489_p3 = ((icmp_ln113_reg_1430[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_state_load);

assign select_ln113_2_fu_445_p3 = ((icmp_ln113_fu_433_p2[0:0] == 1'b1) ? 10'd1 : add_ln113_2_fu_439_p2);

assign select_ln113_fu_532_p3 = ((and_ln110_fu_507_p2[0:0] == 1'b1) ? state_4_fu_513_p2 : select_ln110_fu_489_p3);

assign select_ln124_2_fu_690_p3 = ((icmp_ln124_reg_1483[0:0] == 1'b1) ? trunc_ln121_reg_1469 : max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156);

assign select_ln124_fu_684_p3 = ((icmp_ln124_reg_1483[0:0] == 1'b1) ? trunc_ln121_2_reg_1476 : max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160);

assign select_ln139_2_fu_713_p3 = ((icmp_ln224_2_fu_708_p2[0:0] == 1'b1) ? trunc_ln121_2_reg_1476 : select_ln124_fu_684_p3);

assign select_ln139_fu_701_p3 = ((icmp_ln224_fu_696_p2[0:0] == 1'b1) ? trunc_ln121_reg_1469 : select_ln124_2_fu_690_p3);

assign select_ln149_2_fu_780_p3 = ((icmp_ln149_reg_1454_pp0_iter4_reg[0:0] == 1'b1) ? 22'd0 : empty_fu_180);

assign select_ln149_fu_773_p3 = ((icmp_ln149_reg_1454_pp0_iter4_reg[0:0] == 1'b1) ? 22'd0 : empty_1164_fu_184);

assign select_ln204_5_fu_1221_p3 = ((in_two_3_fu_168[0:0] == 1'b1) ? 24'd262144 : 24'd32768);

assign select_ln204_fu_1157_p3 = ((in_two_fu_164[0:0] == 1'b1) ? 24'd262144 : 24'd32768);

assign select_ln205_2_fu_1298_p3 = ((icmp_ln8_2_fu_1293_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln205_2_reg_1573);

assign select_ln205_fu_1286_p3 = ((icmp_ln8_fu_1281_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln205_reg_1563);

assign state_4_fu_513_p2 = (select_ln110_fu_489_p3 + 2'd1);

assign tmp_120_fu_1235_p4 = {{add_ln204_2_fu_1229_p2[23:19]}};

assign tmp_13_fu_863_p3 = add_ln174_fu_847_p2[32'd22];

assign tmp_14_fu_917_p4 = {{add_ln171_2_fu_901_p2[21:19]}};

assign tmp_15_fu_949_p3 = add_ln174_2_fu_933_p2[32'd22];

assign tmp_99_fu_1113_p4 = {{attn_inst_softmax_qk_head1_exp_score_665_q1[31:16]}};

assign tmp_fu_1171_p4 = {{add_ln204_fu_1165_p2[23:19]}};

assign tmp_s_fu_643_p4 = {{attn_inst_softmax_qk_head1_buffer_664_q0[19:10]}};

assign trunc_ln121_fu_586_p1 = r_sm_head1_dout[9:0];

assign trunc_ln161_fu_608_p1 = attn_inst_softmax_qk_head1_buffer_664_q0[9:0];

assign trunc_ln174_3_fu_853_p4 = {{add_ln174_fu_847_p2[21:16]}};

assign trunc_ln174_4_fu_939_p4 = {{add_ln174_2_fu_933_p2[21:16]}};

assign trunc_ln198_fu_1087_p1 = attn_inst_softmax_qk_head1_exp_score_665_q1[15:0];

assign trunc_ln204_7_fu_1185_p4 = {{add_ln204_fu_1165_p2[22:16]}};

assign trunc_ln204_s_fu_1249_p4 = {{add_ln204_2_fu_1229_p2[22:16]}};

assign trunc_ln205_2_fu_1267_p1 = rel_2_fu_1259_p3[2:0];

assign trunc_ln205_fu_1203_p1 = rel_fu_1195_p3[2:0];

assign xor_ln110_fu_496_p2 = (icmp_ln113_reg_1430 ^ 1'd1);

assign zext_ln114_fu_570_p1 = select_ln110_2_reg_1437;

assign zext_ln164_2_fu_675_p1 = cursor_2_fu_665_p4;

assign zext_ln164_fu_634_p1 = cursor_fu_624_p4;

assign zext_ln165_2_fu_797_p1 = attn_inst_softmax_qk_head1_exp_table_load_1_reg_1504;

assign zext_ln165_fu_787_p1 = attn_inst_softmax_qk_head1_exp_table_load_reg_1499;

assign zext_ln171_2_fu_897_p1 = add_ln165_2_fu_800_p2;

assign zext_ln171_fu_817_p1 = add_ln165_fu_790_p2;

assign zext_ln176_2_fu_965_p1 = cursor_two_2_fu_957_p3;

assign zext_ln176_fu_879_p1 = cursor_two_fu_871_p3;

assign zext_ln180_2_fu_984_p1 = cursor_one_2_fu_907_p4;

assign zext_ln180_fu_888_p1 = cursor_one_fu_827_p4;

assign zext_ln204_2_fu_1217_p1 = grp_fu_1135_p2;

assign zext_ln204_4_fu_1181_p1 = tmp_fu_1171_p4;

assign zext_ln204_5_fu_1245_p1 = tmp_120_fu_1235_p4;

assign zext_ln204_fu_1153_p1 = grp_fu_1103_p2;

always @ (posedge ap_clk) begin
    zext_ln114_reg_1448[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1448_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1448_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //ATTN11_do_softmax_10
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_buffer_664_RAM_AUTO_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 20;
parameter AddressWidth = 8;
parameter AddressRange = 196;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "auto"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_buffer_664_RAM_AUTO_1R1W.dat", ram);
end 

 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_score_665_RAM_AUTO_1R1W (
     
    address0, ce0,
    d0, we0, 
    
      
    address1, ce1,
    
    q1, 
     
    reset, clk);

parameter DataWidth = 32;
parameter AddressWidth = 8;
parameter AddressRange = 196;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 

 
input[AddressWidth-1:0] address1;
input ce1;

output reg[DataWidth-1:0] q1; 

input reset;
input clk;

(* ram_style = "auto"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];

initial begin
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_score_665_RAM_AUTO_1R1W.dat", ram);
end 

 

always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
    end
end 



 
  



always @(posedge clk) 
begin 
    if (ce1) begin
        q1 <= ram[address1];
    end
end 

 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_table_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 16;
parameter AddressWidth = 5;
parameter AddressRange = 32;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_table_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_one_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 8;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_one_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_two_ROM_AUTO_1R (
    address0, ce0, q0, 
    address1, ce1, q1, 
    reset, clk);

parameter DataWidth = 8;
parameter AddressWidth = 6;
parameter AddressRange = 64;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;
 
input[AddressWidth-1:0] address1;
input ce1;
output reg[DataWidth-1:0] q1;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_two_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end
  
always @(posedge clk) 
begin 
    if (ce1) 
    begin
        q1 <= rom0[address1];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_softmax_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r_sm_head2_dout,
        r_sm_head2_num_data_valid,
        r_sm_head2_fifo_cap,
        r_sm_head2_empty_n,
        r_sm_head2_read,
        rq_sm_head2_din,
        rq_sm_head2_num_data_valid,
        rq_sm_head2_fifo_cap,
        rq_sm_head2_full_n,
        rq_sm_head2_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [19:0] r_sm_head2_dout;
input  [9:0] r_sm_head2_num_data_valid;
input  [9:0] r_sm_head2_fifo_cap;
input   r_sm_head2_empty_n;
output   r_sm_head2_read;
output  [5:0] rq_sm_head2_din;
input  [9:0] rq_sm_head2_num_data_valid;
input  [9:0] rq_sm_head2_fifo_cap;
input   rq_sm_head2_full_n;
output   rq_sm_head2_write;

reg ap_idle;
reg r_sm_head2_read;
reg rq_sm_head2_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] select_ln113_reg_1444;
reg    ap_predicate_op87_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] select_ln113_reg_1444_pp0_iter7_reg;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_427_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] attn_inst_softmax_qk_head2_buffer_666_address0;
reg    attn_inst_softmax_qk_head2_buffer_666_ce0;
reg    attn_inst_softmax_qk_head2_buffer_666_we0;
wire   [19:0] attn_inst_softmax_qk_head2_buffer_666_q0;
wire   [4:0] attn_inst_softmax_qk_head2_exp_table_address0;
reg    attn_inst_softmax_qk_head2_exp_table_ce0;
wire   [15:0] attn_inst_softmax_qk_head2_exp_table_q0;
wire   [4:0] attn_inst_softmax_qk_head2_exp_table_address1;
reg    attn_inst_softmax_qk_head2_exp_table_ce1;
wire   [15:0] attn_inst_softmax_qk_head2_exp_table_q1;
wire   [7:0] attn_inst_softmax_qk_head2_exp_score_667_address0;
reg    attn_inst_softmax_qk_head2_exp_score_667_ce0;
reg    attn_inst_softmax_qk_head2_exp_score_667_we0;
wire   [31:0] attn_inst_softmax_qk_head2_exp_score_667_d0;
wire   [7:0] attn_inst_softmax_qk_head2_exp_score_667_address1;
reg    attn_inst_softmax_qk_head2_exp_score_667_ce1;
wire   [31:0] attn_inst_softmax_qk_head2_exp_score_667_q1;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_two_address0;
reg    attn_inst_softmax_qk_head2_recip_table_two_ce0;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_two_q0;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_two_address1;
reg    attn_inst_softmax_qk_head2_recip_table_two_ce1;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_two_q1;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_one_address0;
reg    attn_inst_softmax_qk_head2_recip_table_one_ce0;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_one_q0;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_one_address1;
reg    attn_inst_softmax_qk_head2_recip_table_one_ce1;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_one_q1;
reg    r_sm_head2_blk_n;
wire    ap_block_pp0_stage0;
reg    rq_sm_head2_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln113_fu_433_p2;
reg   [0:0] icmp_ln113_reg_1430;
wire   [7:0] select_ln110_1_fu_524_p3;
reg   [7:0] select_ln110_1_reg_1437;
wire   [1:0] select_ln113_fu_532_p3;
reg   [1:0] select_ln113_reg_1444_pp0_iter2_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter3_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter4_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter5_reg;
reg   [1:0] select_ln113_reg_1444_pp0_iter6_reg;
wire   [63:0] zext_ln114_fu_570_p1;
reg   [63:0] zext_ln114_reg_1448;
reg   [63:0] zext_ln114_reg_1448_pp0_iter3_reg;
reg   [63:0] zext_ln114_reg_1448_pp0_iter4_reg;
wire   [0:0] grp_fu_323_p2;
reg   [0:0] icmp_ln149_reg_1454;
reg   [0:0] icmp_ln149_reg_1454_pp0_iter3_reg;
reg   [0:0] icmp_ln149_reg_1454_pp0_iter4_reg;
wire   [0:0] icmp_ln169_fu_579_p2;
reg   [0:0] icmp_ln169_reg_1465;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter3_reg;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter4_reg;
reg   [0:0] icmp_ln169_reg_1465_pp0_iter5_reg;
wire   [9:0] trunc_ln121_fu_586_p1;
reg   [9:0] trunc_ln121_reg_1469;
reg   [9:0] trunc_ln121_1_reg_1476;
reg   [0:0] icmp_ln124_reg_1483;
reg   [15:0] attn_inst_softmax_qk_head2_exp_table_load_reg_1499;
reg   [15:0] attn_inst_softmax_qk_head2_exp_table_load_1_reg_1504;
reg   [2:0] tmp_4_reg_1509;
wire   [0:0] icmp_ln172_fu_927_p2;
reg   [0:0] icmp_ln172_reg_1524;
wire   [2:0] trunc_ln205_fu_1203_p1;
reg   [2:0] trunc_ln205_reg_1563;
reg   [3:0] tmp_1_reg_1568;
wire   [2:0] trunc_ln205_1_fu_1267_p1;
reg   [2:0] trunc_ln205_1_reg_1573;
reg   [3:0] tmp_2_reg_1578;
wire   [7:0] attn_inst_softmax_qk_head2_buffer_666_addr_gep_fu_214_p3;
wire   [63:0] zext_ln164_fu_634_p1;
wire   [63:0] zext_ln164_1_fu_675_p1;
wire   [63:0] zext_ln176_fu_879_p1;
wire   [63:0] zext_ln180_fu_888_p1;
wire   [63:0] zext_ln176_1_fu_965_p1;
wire   [63:0] zext_ln180_1_fu_984_p1;
reg   [7:0] ct_fu_140;
wire   [7:0] add_ln114_fu_540_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [7:0] ap_sig_allocacmp_ct_load;
reg   [1:0] state_fu_144;
reg   [1:0] ap_sig_allocacmp_state_load;
reg   [9:0] indvar_flatten_fu_148;
wire   [9:0] select_ln113_1_fu_445_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten27_fu_152;
wire   [15:0] add_ln112_fu_421_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten27_load;
reg   [9:0] max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156;
wire   [9:0] select_ln139_fu_701_p3;
reg   [9:0] max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160;
wire   [9:0] select_ln139_1_fu_713_p3;
reg   [0:0] in_two_fu_164;
wire   [0:0] in_two_2_fu_1007_p2;
reg   [0:0] in_two_1_fu_168;
reg   [7:0] recip_val_fu_172;
wire   [7:0] recip_val_4_fu_1012_p3;
reg   [7:0] recip_val_1_fu_176;
reg   [21:0] empty_fu_180;
wire   [21:0] add_ln165_fu_790_p2;
reg   [21:0] empty_1163_fu_184;
wire   [21:0] add_ln165_1_fu_800_p2;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln113_1_fu_439_p2;
wire   [0:0] icmp_ln114_fu_501_p2;
wire   [0:0] xor_ln110_fu_496_p2;
wire   [1:0] select_ln110_fu_489_p3;
wire   [0:0] and_ln110_fu_507_p2;
wire   [0:0] or_ln110_fu_519_p2;
wire   [1:0] state_2_fu_513_p2;
wire   [9:0] trunc_ln161_fu_608_p1;
wire   [9:0] minus_fu_612_p2;
wire   [9:0] add_ln162_fu_618_p2;
wire   [4:0] cursor_fu_624_p4;
wire   [9:0] tmp_291_fu_643_p4;
wire   [9:0] minus_1_fu_653_p2;
wire   [9:0] add_ln162_1_fu_659_p2;
wire   [4:0] cursor_1_fu_665_p4;
wire   [9:0] select_ln124_1_fu_690_p3;
wire   [0:0] icmp_ln224_fu_696_p2;
wire   [9:0] select_ln124_fu_684_p3;
wire   [0:0] icmp_ln224_1_fu_708_p2;
wire   [21:0] select_ln149_1_fu_780_p3;
wire   [21:0] zext_ln165_fu_787_p1;
wire   [21:0] select_ln149_fu_773_p3;
wire   [21:0] zext_ln165_1_fu_797_p1;
wire   [21:0] add_ln171_fu_821_p2;
wire   [22:0] zext_ln171_fu_817_p1;
wire   [22:0] add_ln174_fu_847_p2;
wire   [0:0] tmp_5_fu_863_p3;
wire   [5:0] trunc_ln174_1_fu_853_p4;
wire   [5:0] cursor_two_fu_871_p3;
wire   [8:0] cursor_one_fu_827_p4;
wire   [21:0] add_ln171_1_fu_901_p2;
wire   [2:0] tmp_7_fu_917_p4;
wire   [22:0] zext_ln171_1_fu_897_p1;
wire   [22:0] add_ln174_1_fu_933_p2;
wire   [0:0] tmp_8_fu_949_p3;
wire   [5:0] trunc_ln174_2_fu_939_p4;
wire   [5:0] cursor_two_1_fu_957_p3;
wire   [8:0] cursor_one_1_fu_907_p4;
wire   [15:0] trunc_ln198_fu_1087_p1;
wire   [15:0] grp_fu_1103_p0;
wire   [7:0] grp_fu_1103_p1;
wire   [15:0] tmp_s_fu_1113_p4;
wire   [15:0] grp_fu_1135_p0;
wire   [7:0] grp_fu_1135_p1;
wire   [22:0] grp_fu_1103_p2;
wire   [23:0] select_ln204_fu_1157_p3;
wire   [23:0] zext_ln204_fu_1153_p1;
wire   [23:0] add_ln204_fu_1165_p2;
wire   [4:0] tmp_fu_1171_p4;
wire   [6:0] zext_ln204_2_fu_1181_p1;
wire   [6:0] trunc_ln204_2_fu_1185_p4;
wire   [6:0] rel_fu_1195_p3;
wire   [22:0] grp_fu_1135_p2;
wire   [23:0] select_ln204_2_fu_1221_p3;
wire   [23:0] zext_ln204_1_fu_1217_p1;
wire   [23:0] add_ln204_1_fu_1229_p2;
wire   [4:0] tmp_119_fu_1235_p4;
wire   [6:0] zext_ln204_3_fu_1245_p1;
wire   [6:0] trunc_ln204_5_fu_1249_p4;
wire   [6:0] rel_1_fu_1259_p3;
wire   [0:0] icmp_ln8_fu_1281_p2;
wire   [0:0] icmp_ln8_1_fu_1293_p2;
wire   [2:0] select_ln205_1_fu_1298_p3;
wire   [2:0] select_ln205_fu_1286_p3;
reg    grp_fu_1103_ce;
reg    grp_fu_1135_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [22:0] grp_fu_1103_p00;
wire   [22:0] grp_fu_1103_p10;
wire   [22:0] grp_fu_1135_p00;
wire   [22:0] grp_fu_1135_p10;
reg    ap_condition_357;
reg    ap_condition_415;
reg    ap_condition_375;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ct_fu_140 = 8'd0;
//#0 state_fu_144 = 2'd0;
//#0 indvar_flatten_fu_148 = 10'd0;
//#0 indvar_flatten27_fu_152 = 16'd0;
//#0 max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156 = 10'd0;
//#0 max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160 = 10'd0;
//#0 in_two_fu_164 = 1'd0;
//#0 in_two_1_fu_168 = 1'd0;
//#0 recip_val_fu_172 = 8'd0;
//#0 recip_val_1_fu_176 = 8'd0;
//#0 empty_fu_180 = 22'd0;
//#0 empty_1163_fu_184 = 22'd0;
end

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_buffer_664_RAM_AUTO_1R1W #(
    .DataWidth( 20 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head2_buffer_666_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_buffer_666_address0),
    .ce0(attn_inst_softmax_qk_head2_buffer_666_ce0),
    .we0(attn_inst_softmax_qk_head2_buffer_666_we0),
    .d0(r_sm_head2_dout),
    .q0(attn_inst_softmax_qk_head2_buffer_666_q0)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_table_ROM_AUTO_1R #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_softmax_qk_head2_exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_exp_table_address0),
    .ce0(attn_inst_softmax_qk_head2_exp_table_ce0),
    .q0(attn_inst_softmax_qk_head2_exp_table_q0),
    .address1(attn_inst_softmax_qk_head2_exp_table_address1),
    .ce1(attn_inst_softmax_qk_head2_exp_table_ce1),
    .q1(attn_inst_softmax_qk_head2_exp_table_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_exp_score_665_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head2_exp_score_667_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_exp_score_667_address0),
    .ce0(attn_inst_softmax_qk_head2_exp_score_667_ce0),
    .we0(attn_inst_softmax_qk_head2_exp_score_667_we0),
    .d0(attn_inst_softmax_qk_head2_exp_score_667_d0),
    .address1(attn_inst_softmax_qk_head2_exp_score_667_address1),
    .ce1(attn_inst_softmax_qk_head2_exp_score_667_ce1),
    .q1(attn_inst_softmax_qk_head2_exp_score_667_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_two_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head2_recip_table_two_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_recip_table_two_address0),
    .ce0(attn_inst_softmax_qk_head2_recip_table_two_ce0),
    .q0(attn_inst_softmax_qk_head2_recip_table_two_q0),
    .address1(attn_inst_softmax_qk_head2_recip_table_two_address1),
    .ce1(attn_inst_softmax_qk_head2_recip_table_two_ce1),
    .q1(attn_inst_softmax_qk_head2_recip_table_two_q1)
);

ATTN11_do_softmax_10_attn_inst_softmax_qk_head1_recip_table_one_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head2_recip_table_one_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_recip_table_one_address0),
    .ce0(attn_inst_softmax_qk_head2_recip_table_one_ce0),
    .q0(attn_inst_softmax_qk_head2_recip_table_one_q0),
    .address1(attn_inst_softmax_qk_head2_recip_table_one_address1),
    .ce1(attn_inst_softmax_qk_head2_recip_table_one_ce1),
    .q1(attn_inst_softmax_qk_head2_recip_table_one_q1)
);

ATTN11_mul_16ns_8ns_23_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_16ns_8ns_23_2_1_U835(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1103_p0),
    .din1(grp_fu_1103_p1),
    .ce(grp_fu_1103_ce),
    .dout(grp_fu_1103_p2)
);

ATTN11_mul_16ns_8ns_23_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_16ns_8ns_23_2_1_U836(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1135_p0),
    .din1(grp_fu_1135_p1),
    .ce(grp_fu_1135_ce),
    .dout(grp_fu_1135_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_357)) begin
        ct_fu_140 <= add_ln114_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_415)) begin
    if ((icmp_ln172_reg_1524 == 1'd1)) begin
        in_two_1_fu_168 <= 1'd0;
    end else if ((icmp_ln172_reg_1524 == 1'd0)) begin
        in_two_1_fu_168 <= 1'd1;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_375)) begin
    if ((icmp_ln112_fu_427_p2 == 1'd0)) begin
        indvar_flatten27_fu_152 <= add_ln112_fu_421_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten27_fu_152 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_375)) begin
    if ((icmp_ln112_fu_427_p2 == 1'd0)) begin
        indvar_flatten_fu_148 <= select_ln113_1_fu_445_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_148 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_415)) begin
    if ((icmp_ln172_reg_1524 == 1'd1)) begin
        recip_val_1_fu_176 <= attn_inst_softmax_qk_head2_recip_table_one_q0;
    end else if ((icmp_ln172_reg_1524 == 1'd0)) begin
        recip_val_1_fu_176 <= attn_inst_softmax_qk_head2_recip_table_two_q0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_357)) begin
    state_fu_144 <= select_ln113_fu_532_p3;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln113_reg_1430 <= icmp_ln113_fu_433_p2;
        select_ln110_1_reg_1437 <= select_ln110_1_fu_524_p3;
        select_ln113_reg_1444 <= select_ln113_fu_532_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln149_reg_1454_pp0_iter3_reg <= icmp_ln149_reg_1454;
        icmp_ln149_reg_1454_pp0_iter4_reg <= icmp_ln149_reg_1454_pp0_iter3_reg;
        icmp_ln169_reg_1465 <= icmp_ln169_fu_579_p2;
        icmp_ln169_reg_1465_pp0_iter3_reg <= icmp_ln169_reg_1465;
        icmp_ln169_reg_1465_pp0_iter4_reg <= icmp_ln169_reg_1465_pp0_iter3_reg;
        icmp_ln169_reg_1465_pp0_iter5_reg <= icmp_ln169_reg_1465_pp0_iter4_reg;
        icmp_ln172_reg_1524 <= icmp_ln172_fu_927_p2;
        select_ln113_reg_1444_pp0_iter2_reg <= select_ln113_reg_1444;
        select_ln113_reg_1444_pp0_iter3_reg <= select_ln113_reg_1444_pp0_iter2_reg;
        select_ln113_reg_1444_pp0_iter4_reg <= select_ln113_reg_1444_pp0_iter3_reg;
        select_ln113_reg_1444_pp0_iter5_reg <= select_ln113_reg_1444_pp0_iter4_reg;
        select_ln113_reg_1444_pp0_iter6_reg <= select_ln113_reg_1444_pp0_iter5_reg;
        select_ln113_reg_1444_pp0_iter7_reg <= select_ln113_reg_1444_pp0_iter6_reg;
        tmp_1_reg_1568 <= {{rel_fu_1195_p3[6:3]}};
        tmp_2_reg_1578 <= {{rel_1_fu_1259_p3[6:3]}};
        tmp_4_reg_1509 <= {{add_ln171_fu_821_p2[21:19]}};
        trunc_ln121_1_reg_1476 <= {{r_sm_head2_dout[19:10]}};
        trunc_ln121_reg_1469 <= trunc_ln121_fu_586_p1;
        trunc_ln205_1_reg_1573 <= trunc_ln205_1_fu_1267_p1;
        trunc_ln205_reg_1563 <= trunc_ln205_fu_1203_p1;
        zext_ln114_reg_1448[7 : 0] <= zext_ln114_fu_570_p1[7 : 0];
        zext_ln114_reg_1448_pp0_iter3_reg[7 : 0] <= zext_ln114_reg_1448[7 : 0];
        zext_ln114_reg_1448_pp0_iter4_reg[7 : 0] <= zext_ln114_reg_1448_pp0_iter3_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_table_load_1_reg_1504 <= attn_inst_softmax_qk_head2_exp_table_q0;
        attn_inst_softmax_qk_head2_exp_table_load_reg_1499 <= attn_inst_softmax_qk_head2_exp_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd0) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln172_fu_927_p2 == 1'd1) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln172_fu_927_p2 == 1'd0) & (icmp_ln169_reg_1465_pp0_iter4_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter4_reg == 2'd1)))) begin
        empty_1163_fu_184 <= add_ln165_1_fu_800_p2;
        empty_fu_180 <= add_ln165_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        icmp_ln124_reg_1483 <= grp_fu_323_p2;
        icmp_ln149_reg_1454 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter5_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter5_reg == 2'd1))) begin
        in_two_fu_164 <= in_two_2_fu_1007_p2;
        recip_val_fu_172 <= recip_val_4_fu_1012_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln113_reg_1444_pp0_iter2_reg == 2'd2) & ~(select_ln113_reg_1444_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156 <= select_ln139_fu_701_p3;
        max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160 <= select_ln139_1_fu_713_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_427_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ct_load = 8'd0;
    end else begin
        ap_sig_allocacmp_ct_load = ct_fu_140;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten27_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten27_load = indvar_flatten27_fu_152;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_state_load = 2'd0;
    end else begin
        ap_sig_allocacmp_state_load = state_fu_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2))) begin
            attn_inst_softmax_qk_head2_buffer_666_address0 = attn_inst_softmax_qk_head2_buffer_666_addr_gep_fu_214_p3;
        end else if ((select_ln113_reg_1444 == 2'd1)) begin
            attn_inst_softmax_qk_head2_buffer_666_address0 = zext_ln114_fu_570_p1;
        end else begin
            attn_inst_softmax_qk_head2_buffer_666_address0 = 'bx;
        end
    end else begin
        attn_inst_softmax_qk_head2_buffer_666_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_reg_1444 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        attn_inst_softmax_qk_head2_buffer_666_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_buffer_666_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head2_buffer_666_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_buffer_666_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_score_667_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_score_667_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_score_667_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_score_667_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (select_ln113_reg_1444_pp0_iter3_reg == 2'd1))) begin
        attn_inst_softmax_qk_head2_exp_score_667_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_score_667_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_table_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_table_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_one_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_one_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_one_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_one_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_two_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_two_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_two_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_two_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1103_ce = 1'b1;
    end else begin
        grp_fu_1103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1135_ce = 1'b1;
    end else begin
        grp_fu_1135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op87_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head2_blk_n = r_sm_head2_empty_n;
    end else begin
        r_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op87_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head2_read = 1'b1;
    end else begin
        r_sm_head2_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        rq_sm_head2_blk_n = rq_sm_head2_full_n;
    end else begin
        rq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        rq_sm_head2_write = 1'b1;
    end else begin
        rq_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_421_p2 = (ap_sig_allocacmp_indvar_flatten27_load + 16'd1);

assign add_ln113_1_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln114_fu_540_p2 = (select_ln110_1_fu_524_p3 + 8'd1);

assign add_ln162_1_fu_659_p2 = (minus_1_fu_653_p2 + 10'd16);

assign add_ln162_fu_618_p2 = (minus_fu_612_p2 + 10'd16);

assign add_ln165_1_fu_800_p2 = (select_ln149_fu_773_p3 + zext_ln165_1_fu_797_p1);

assign add_ln165_fu_790_p2 = (select_ln149_1_fu_780_p3 + zext_ln165_fu_787_p1);

assign add_ln171_1_fu_901_p2 = ($signed(add_ln165_1_fu_800_p2) + $signed(22'd4160626));

assign add_ln171_fu_821_p2 = ($signed(add_ln165_fu_790_p2) + $signed(22'd4160626));

assign add_ln174_1_fu_933_p2 = ($signed(zext_ln171_1_fu_897_p1) + $signed(23'd7974548));

assign add_ln174_fu_847_p2 = ($signed(zext_ln171_fu_817_p1) + $signed(23'd7974548));

assign add_ln204_1_fu_1229_p2 = (select_ln204_2_fu_1221_p3 + zext_ln204_1_fu_1217_p1);

assign add_ln204_fu_1165_p2 = (select_ln204_fu_1157_p3 + zext_ln204_fu_1153_p1);

assign and_ln110_fu_507_p2 = (xor_ln110_fu_496_p2 & icmp_ln114_fu_501_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op87_read_state3 == 1'b1) & (r_sm_head2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((select_ln113_reg_1444_pp0_iter7_reg == 2'd2) & (rq_sm_head2_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_357 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_375 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_415 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1465_pp0_iter5_reg == 1'd1) & (select_ln113_reg_1444_pp0_iter5_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op87_read_state3 = (~(select_ln113_reg_1444 == 2'd1) & ~(select_ln113_reg_1444 == 2'd2));
end

assign attn_inst_softmax_qk_head2_buffer_666_addr_gep_fu_214_p3 = zext_ln114_fu_570_p1;

assign attn_inst_softmax_qk_head2_exp_score_667_address0 = zext_ln114_reg_1448_pp0_iter3_reg;

assign attn_inst_softmax_qk_head2_exp_score_667_address1 = zext_ln114_reg_1448_pp0_iter4_reg;

assign attn_inst_softmax_qk_head2_exp_score_667_d0 = {{attn_inst_softmax_qk_head2_exp_table_q0}, {attn_inst_softmax_qk_head2_exp_table_q1}};

assign attn_inst_softmax_qk_head2_exp_table_address0 = zext_ln164_1_fu_675_p1;

assign attn_inst_softmax_qk_head2_exp_table_address1 = zext_ln164_fu_634_p1;

assign attn_inst_softmax_qk_head2_recip_table_one_address0 = zext_ln180_1_fu_984_p1;

assign attn_inst_softmax_qk_head2_recip_table_one_address1 = zext_ln180_fu_888_p1;

assign attn_inst_softmax_qk_head2_recip_table_two_address0 = zext_ln176_1_fu_965_p1;

assign attn_inst_softmax_qk_head2_recip_table_two_address1 = zext_ln176_fu_879_p1;

assign cursor_1_fu_665_p4 = {{add_ln162_1_fu_659_p2[9:5]}};

assign cursor_fu_624_p4 = {{add_ln162_fu_618_p2[9:5]}};

assign cursor_one_1_fu_907_p4 = {{add_ln171_1_fu_901_p2[21:13]}};

assign cursor_one_fu_827_p4 = {{add_ln171_fu_821_p2[21:13]}};

assign cursor_two_1_fu_957_p3 = ((tmp_8_fu_949_p3[0:0] == 1'b1) ? 6'd0 : trunc_ln174_2_fu_939_p4);

assign cursor_two_fu_871_p3 = ((tmp_5_fu_863_p3[0:0] == 1'b1) ? 6'd0 : trunc_ln174_1_fu_853_p4);

assign grp_fu_1103_p0 = grp_fu_1103_p00;

assign grp_fu_1103_p00 = trunc_ln198_fu_1087_p1;

assign grp_fu_1103_p1 = grp_fu_1103_p10;

assign grp_fu_1103_p10 = recip_val_fu_172;

assign grp_fu_1135_p0 = grp_fu_1135_p00;

assign grp_fu_1135_p00 = tmp_s_fu_1113_p4;

assign grp_fu_1135_p1 = grp_fu_1135_p10;

assign grp_fu_1135_p10 = recip_val_1_fu_176;

assign grp_fu_323_p2 = ((select_ln110_1_reg_1437 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_427_p2 = ((ap_sig_allocacmp_indvar_flatten27_load == 16'd57624) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_433_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd588) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_501_p2 = ((ap_sig_allocacmp_ct_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_579_p2 = ((select_ln110_1_reg_1437 == 8'd195) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_927_p2 = ((tmp_7_fu_917_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln224_1_fu_708_p2 = (($signed(select_ln124_fu_684_p3) < $signed(trunc_ln121_1_reg_1476)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_696_p2 = (($signed(select_ln124_1_fu_690_p3) < $signed(trunc_ln121_reg_1469)) ? 1'b1 : 1'b0);

assign icmp_ln8_1_fu_1293_p2 = ((tmp_2_reg_1578 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_1281_p2 = ((tmp_1_reg_1568 != 4'd0) ? 1'b1 : 1'b0);

assign in_two_2_fu_1007_p2 = ((tmp_4_reg_1509 != 3'd0) ? 1'b1 : 1'b0);

assign minus_1_fu_653_p2 = (max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160 - tmp_291_fu_643_p4);

assign minus_fu_612_p2 = (max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156 - trunc_ln161_fu_608_p1);

assign or_ln110_fu_519_p2 = (icmp_ln113_reg_1430 | and_ln110_fu_507_p2);

assign recip_val_4_fu_1012_p3 = ((in_two_2_fu_1007_p2[0:0] == 1'b1) ? attn_inst_softmax_qk_head2_recip_table_two_q1 : attn_inst_softmax_qk_head2_recip_table_one_q1);

assign rel_1_fu_1259_p3 = ((in_two_1_fu_168[0:0] == 1'b1) ? zext_ln204_3_fu_1245_p1 : trunc_ln204_5_fu_1249_p4);

assign rel_fu_1195_p3 = ((in_two_fu_164[0:0] == 1'b1) ? zext_ln204_2_fu_1181_p1 : trunc_ln204_2_fu_1185_p4);

assign rq_sm_head2_din = {{select_ln205_1_fu_1298_p3}, {select_ln205_fu_1286_p3}};

assign select_ln110_1_fu_524_p3 = ((or_ln110_fu_519_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_ct_load);

assign select_ln110_fu_489_p3 = ((icmp_ln113_reg_1430[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_state_load);

assign select_ln113_1_fu_445_p3 = ((icmp_ln113_fu_433_p2[0:0] == 1'b1) ? 10'd1 : add_ln113_1_fu_439_p2);

assign select_ln113_fu_532_p3 = ((and_ln110_fu_507_p2[0:0] == 1'b1) ? state_2_fu_513_p2 : select_ln110_fu_489_p3);

assign select_ln124_1_fu_690_p3 = ((icmp_ln124_reg_1483[0:0] == 1'b1) ? trunc_ln121_reg_1469 : max_val_sroa_0_0_max_val_sroa_0_0_max_val_sroa_0_0_21_fu_156);

assign select_ln124_fu_684_p3 = ((icmp_ln124_reg_1483[0:0] == 1'b1) ? trunc_ln121_1_reg_1476 : max_val_sroa_5_0_max_val_sroa_5_0_max_val_sroa_5_2_24_fu_160);

assign select_ln139_1_fu_713_p3 = ((icmp_ln224_1_fu_708_p2[0:0] == 1'b1) ? trunc_ln121_1_reg_1476 : select_ln124_fu_684_p3);

assign select_ln139_fu_701_p3 = ((icmp_ln224_fu_696_p2[0:0] == 1'b1) ? trunc_ln121_reg_1469 : select_ln124_1_fu_690_p3);

assign select_ln149_1_fu_780_p3 = ((icmp_ln149_reg_1454_pp0_iter4_reg[0:0] == 1'b1) ? 22'd0 : empty_fu_180);

assign select_ln149_fu_773_p3 = ((icmp_ln149_reg_1454_pp0_iter4_reg[0:0] == 1'b1) ? 22'd0 : empty_1163_fu_184);

assign select_ln204_2_fu_1221_p3 = ((in_two_1_fu_168[0:0] == 1'b1) ? 24'd262144 : 24'd32768);

assign select_ln204_fu_1157_p3 = ((in_two_fu_164[0:0] == 1'b1) ? 24'd262144 : 24'd32768);

assign select_ln205_1_fu_1298_p3 = ((icmp_ln8_1_fu_1293_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln205_1_reg_1573);

assign select_ln205_fu_1286_p3 = ((icmp_ln8_fu_1281_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln205_reg_1563);

assign state_2_fu_513_p2 = (select_ln110_fu_489_p3 + 2'd1);

assign tmp_119_fu_1235_p4 = {{add_ln204_1_fu_1229_p2[23:19]}};

assign tmp_291_fu_643_p4 = {{attn_inst_softmax_qk_head2_buffer_666_q0[19:10]}};

assign tmp_5_fu_863_p3 = add_ln174_fu_847_p2[32'd22];

assign tmp_7_fu_917_p4 = {{add_ln171_1_fu_901_p2[21:19]}};

assign tmp_8_fu_949_p3 = add_ln174_1_fu_933_p2[32'd22];

assign tmp_fu_1171_p4 = {{add_ln204_fu_1165_p2[23:19]}};

assign tmp_s_fu_1113_p4 = {{attn_inst_softmax_qk_head2_exp_score_667_q1[31:16]}};

assign trunc_ln121_fu_586_p1 = r_sm_head2_dout[9:0];

assign trunc_ln161_fu_608_p1 = attn_inst_softmax_qk_head2_buffer_666_q0[9:0];

assign trunc_ln174_1_fu_853_p4 = {{add_ln174_fu_847_p2[21:16]}};

assign trunc_ln174_2_fu_939_p4 = {{add_ln174_1_fu_933_p2[21:16]}};

assign trunc_ln198_fu_1087_p1 = attn_inst_softmax_qk_head2_exp_score_667_q1[15:0];

assign trunc_ln204_2_fu_1185_p4 = {{add_ln204_fu_1165_p2[22:16]}};

assign trunc_ln204_5_fu_1249_p4 = {{add_ln204_1_fu_1229_p2[22:16]}};

assign trunc_ln205_1_fu_1267_p1 = rel_1_fu_1259_p3[2:0];

assign trunc_ln205_fu_1203_p1 = rel_fu_1195_p3[2:0];

assign xor_ln110_fu_496_p2 = (icmp_ln113_reg_1430 ^ 1'd1);

assign zext_ln114_fu_570_p1 = select_ln110_1_reg_1437;

assign zext_ln164_1_fu_675_p1 = cursor_1_fu_665_p4;

assign zext_ln164_fu_634_p1 = cursor_fu_624_p4;

assign zext_ln165_1_fu_797_p1 = attn_inst_softmax_qk_head2_exp_table_load_1_reg_1504;

assign zext_ln165_fu_787_p1 = attn_inst_softmax_qk_head2_exp_table_load_reg_1499;

assign zext_ln171_1_fu_897_p1 = add_ln165_1_fu_800_p2;

assign zext_ln171_fu_817_p1 = add_ln165_fu_790_p2;

assign zext_ln176_1_fu_965_p1 = cursor_two_1_fu_957_p3;

assign zext_ln176_fu_879_p1 = cursor_two_fu_871_p3;

assign zext_ln180_1_fu_984_p1 = cursor_one_1_fu_907_p4;

assign zext_ln180_fu_888_p1 = cursor_one_fu_827_p4;

assign zext_ln204_1_fu_1217_p1 = grp_fu_1135_p2;

assign zext_ln204_2_fu_1181_p1 = tmp_fu_1171_p4;

assign zext_ln204_3_fu_1245_p1 = tmp_119_fu_1235_p4;

assign zext_ln204_fu_1153_p1 = grp_fu_1103_p2;

always @ (posedge ap_clk) begin
    zext_ln114_reg_1448[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1448_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1448_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //ATTN11_do_softmax_11
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_split (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        vq_sm_dout,
        vq_sm_num_data_valid,
        vq_sm_fifo_cap,
        vq_sm_empty_n,
        vq_sm_read,
        vq_sm_head2_din,
        vq_sm_head2_num_data_valid,
        vq_sm_head2_fifo_cap,
        vq_sm_head2_full_n,
        vq_sm_head2_write,
        vq_sm_head3_din,
        vq_sm_head3_num_data_valid,
        vq_sm_head3_fifo_cap,
        vq_sm_head3_full_n,
        vq_sm_head3_write,
        vq_sm_head1_din,
        vq_sm_head1_num_data_valid,
        vq_sm_head1_fifo_cap,
        vq_sm_head1_full_n,
        vq_sm_head1_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] vq_sm_dout;
input  [2:0] vq_sm_num_data_valid;
input  [2:0] vq_sm_fifo_cap;
input   vq_sm_empty_n;
output   vq_sm_read;
output  [5:0] vq_sm_head2_din;
input  [6:0] vq_sm_head2_num_data_valid;
input  [6:0] vq_sm_head2_fifo_cap;
input   vq_sm_head2_full_n;
output   vq_sm_head2_write;
output  [5:0] vq_sm_head3_din;
input  [6:0] vq_sm_head3_num_data_valid;
input  [6:0] vq_sm_head3_fifo_cap;
input   vq_sm_head3_full_n;
output   vq_sm_head3_write;
output  [5:0] vq_sm_head1_din;
input  [6:0] vq_sm_head1_num_data_valid;
input  [6:0] vq_sm_head1_fifo_cap;
input   vq_sm_head1_full_n;
output   vq_sm_head1_write;
output   start_out;
output   start_write;

reg ap_idle;
reg vq_sm_read;
reg vq_sm_head2_write;
reg vq_sm_head3_write;
reg vq_sm_head1_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln35_reg_357;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [1:0] select_ln36_reg_368;
reg    ap_predicate_op77_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln35_fu_172_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    vq_sm_head1_blk_n;
reg    vq_sm_head2_blk_n;
reg    vq_sm_head3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln36_fu_178_p2;
reg   [0:0] icmp_ln36_reg_361;
wire   [1:0] select_ln36_fu_264_p3;
reg   [5:0] vq_sm_read_reg_372;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [6:0] cht_fu_60;
wire   [6:0] cht_7_fu_285_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [6:0] ap_sig_allocacmp_cht_6;
reg   [1:0] h_fu_64;
reg   [1:0] ap_sig_allocacmp_h_load;
reg   [8:0] indvar_flatten_fu_68;
wire   [8:0] select_ln36_3_fu_190_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten10_fu_72;
wire   [14:0] add_ln35_fu_166_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten10_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln36_3_fu_184_p2;
wire   [0:0] icmp_ln37_fu_246_p2;
wire   [0:0] xor_ln35_fu_241_p2;
wire   [1:0] select_ln35_fu_234_p3;
wire   [0:0] and_ln35_fu_252_p2;
wire   [1:0] h_5_fu_258_p2;
wire   [0:0] or_ln37_fu_280_p2;
wire   [6:0] add_ln37_fu_274_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_161;
reg    ap_condition_181;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cht_fu_60 = 7'd0;
//#0 h_fu_64 = 2'd0;
//#0 indvar_flatten_fu_68 = 9'd0;
//#0 indvar_flatten10_fu_72 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if ((icmp_ln35_reg_357 == 1'd0)) begin
            cht_fu_60 <= cht_7_fu_285_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            cht_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if ((icmp_ln35_reg_357 == 1'd0)) begin
            h_fu_64 <= select_ln36_fu_264_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            h_fu_64 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_181)) begin
        if ((icmp_ln35_fu_172_p2 == 1'd0)) begin
            indvar_flatten10_fu_72 <= add_ln35_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_72 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_181)) begin
        if ((icmp_ln35_fu_172_p2 == 1'd0)) begin
            indvar_flatten_fu_68 <= select_ln36_3_fu_190_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln35_reg_357 <= icmp_ln35_fu_172_p2;
        icmp_ln36_reg_361 <= icmp_ln36_fu_178_p2;
        select_ln36_reg_368 <= select_ln36_fu_264_p3;
        vq_sm_read_reg_372 <= vq_sm_dout;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_172_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cht_6 = 7'd0;
    end else begin
        ap_sig_allocacmp_cht_6 = cht_fu_60;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_h_load = 2'd0;
    end else begin
        ap_sig_allocacmp_h_load = h_fu_64;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_72;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_68;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        vq_sm_blk_n = vq_sm_empty_n;
    end else begin
        vq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op77_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        vq_sm_head1_blk_n = vq_sm_head1_full_n;
    end else begin
        vq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op77_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vq_sm_head1_write = 1'b1;
    end else begin
        vq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        vq_sm_head2_blk_n = vq_sm_head2_full_n;
    end else begin
        vq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vq_sm_head2_write = 1'b1;
    end else begin
        vq_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        vq_sm_head3_blk_n = vq_sm_head3_full_n;
    end else begin
        vq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vq_sm_head3_write = 1'b1;
    end else begin
        vq_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vq_sm_read = 1'b1;
    end else begin
        vq_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 15'd1);

assign add_ln36_3_fu_184_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln37_fu_274_p2 = (ap_sig_allocacmp_cht_6 + 7'd1);

assign and_ln35_fu_252_p2 = (xor_ln35_fu_241_p2 & icmp_ln37_fu_246_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln35_reg_357 == 1'd0) & (vq_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op77_write_state3 == 1'b1) & (vq_sm_head1_full_n == 1'b0)) | ((vq_sm_head3_full_n == 1'b0) & (select_ln36_reg_368 == 2'd2)) | ((select_ln36_reg_368 == 2'd1) & (vq_sm_head2_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_161 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_181 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op77_write_state3 = (~(select_ln36_reg_368 == 2'd2) & ~(select_ln36_reg_368 == 2'd1));
end

assign ap_ready = internal_ap_ready;

assign cht_7_fu_285_p3 = ((or_ln37_fu_280_p2[0:0] == 1'b1) ? 7'd1 : add_ln37_fu_274_p2);

assign h_5_fu_258_p2 = (select_ln35_fu_234_p3 + 2'd1);

assign icmp_ln35_fu_172_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_178_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_246_p2 = ((ap_sig_allocacmp_cht_6 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln37_fu_280_p2 = (icmp_ln36_reg_361 | and_ln35_fu_252_p2);

assign select_ln35_fu_234_p3 = ((icmp_ln36_reg_361[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_h_load);

assign select_ln36_3_fu_190_p3 = ((icmp_ln36_fu_178_p2[0:0] == 1'b1) ? 9'd1 : add_ln36_3_fu_184_p2);

assign select_ln36_fu_264_p3 = ((and_ln35_fu_252_p2[0:0] == 1'b1) ? h_5_fu_258_p2 : select_ln35_fu_234_p3);

assign start_out = real_start;

assign vq_sm_head1_din = vq_sm_read_reg_372;

assign vq_sm_head2_din = vq_sm_read_reg_372;

assign vq_sm_head3_din = vq_sm_read_reg_372;

assign xor_ln35_fu_241_p2 = (icmp_ln36_reg_361 ^ 1'd1);

endmodule //ATTN11_do_split
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_split_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        qq_sm_dout,
        qq_sm_num_data_valid,
        qq_sm_fifo_cap,
        qq_sm_empty_n,
        qq_sm_read,
        qq_sm_head2_din,
        qq_sm_head2_num_data_valid,
        qq_sm_head2_fifo_cap,
        qq_sm_head2_full_n,
        qq_sm_head2_write,
        qq_sm_head3_din,
        qq_sm_head3_num_data_valid,
        qq_sm_head3_fifo_cap,
        qq_sm_head3_full_n,
        qq_sm_head3_write,
        qq_sm_head1_din,
        qq_sm_head1_num_data_valid,
        qq_sm_head1_fifo_cap,
        qq_sm_head1_full_n,
        qq_sm_head1_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] qq_sm_dout;
input  [2:0] qq_sm_num_data_valid;
input  [2:0] qq_sm_fifo_cap;
input   qq_sm_empty_n;
output   qq_sm_read;
output  [5:0] qq_sm_head2_din;
input  [13:0] qq_sm_head2_num_data_valid;
input  [13:0] qq_sm_head2_fifo_cap;
input   qq_sm_head2_full_n;
output   qq_sm_head2_write;
output  [5:0] qq_sm_head3_din;
input  [13:0] qq_sm_head3_num_data_valid;
input  [13:0] qq_sm_head3_fifo_cap;
input   qq_sm_head3_full_n;
output   qq_sm_head3_write;
output  [5:0] qq_sm_head1_din;
input  [13:0] qq_sm_head1_num_data_valid;
input  [13:0] qq_sm_head1_fifo_cap;
input   qq_sm_head1_full_n;
output   qq_sm_head1_write;
output   start_out;
output   start_write;

reg ap_idle;
reg qq_sm_read;
reg qq_sm_head2_write;
reg qq_sm_head3_write;
reg qq_sm_head1_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln35_reg_357;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [1:0] select_ln36_reg_368;
reg    ap_predicate_op77_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln35_fu_172_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    qq_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    qq_sm_head1_blk_n;
reg    qq_sm_head2_blk_n;
reg    qq_sm_head3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln36_fu_178_p2;
reg   [0:0] icmp_ln36_reg_361;
wire   [1:0] select_ln36_fu_264_p3;
reg   [5:0] qq_sm_read_reg_372;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [6:0] cht_fu_60;
wire   [6:0] cht_5_fu_285_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [6:0] ap_sig_allocacmp_cht_4;
reg   [1:0] h_fu_64;
reg   [1:0] ap_sig_allocacmp_h_load;
reg   [8:0] indvar_flatten_fu_68;
wire   [8:0] select_ln36_2_fu_190_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten10_fu_72;
wire   [14:0] add_ln35_fu_166_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten10_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln36_2_fu_184_p2;
wire   [0:0] icmp_ln37_fu_246_p2;
wire   [0:0] xor_ln35_fu_241_p2;
wire   [1:0] select_ln35_fu_234_p3;
wire   [0:0] and_ln35_fu_252_p2;
wire   [1:0] h_4_fu_258_p2;
wire   [0:0] or_ln37_fu_280_p2;
wire   [6:0] add_ln37_fu_274_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_161;
reg    ap_condition_181;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cht_fu_60 = 7'd0;
//#0 h_fu_64 = 2'd0;
//#0 indvar_flatten_fu_68 = 9'd0;
//#0 indvar_flatten10_fu_72 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if ((icmp_ln35_reg_357 == 1'd0)) begin
            cht_fu_60 <= cht_5_fu_285_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            cht_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if ((icmp_ln35_reg_357 == 1'd0)) begin
            h_fu_64 <= select_ln36_fu_264_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            h_fu_64 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_181)) begin
        if ((icmp_ln35_fu_172_p2 == 1'd0)) begin
            indvar_flatten10_fu_72 <= add_ln35_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_72 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_181)) begin
        if ((icmp_ln35_fu_172_p2 == 1'd0)) begin
            indvar_flatten_fu_68 <= select_ln36_2_fu_190_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln35_reg_357 <= icmp_ln35_fu_172_p2;
        icmp_ln36_reg_361 <= icmp_ln36_fu_178_p2;
        qq_sm_read_reg_372 <= qq_sm_dout;
        select_ln36_reg_368 <= select_ln36_fu_264_p3;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_172_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cht_4 = 7'd0;
    end else begin
        ap_sig_allocacmp_cht_4 = cht_fu_60;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_h_load = 2'd0;
    end else begin
        ap_sig_allocacmp_h_load = h_fu_64;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_72;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_68;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        qq_sm_blk_n = qq_sm_empty_n;
    end else begin
        qq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op77_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        qq_sm_head1_blk_n = qq_sm_head1_full_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op77_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        qq_sm_head1_write = 1'b1;
    end else begin
        qq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        qq_sm_head2_blk_n = qq_sm_head2_full_n;
    end else begin
        qq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        qq_sm_head2_write = 1'b1;
    end else begin
        qq_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        qq_sm_head3_blk_n = qq_sm_head3_full_n;
    end else begin
        qq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        qq_sm_head3_write = 1'b1;
    end else begin
        qq_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        qq_sm_read = 1'b1;
    end else begin
        qq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 15'd1);

assign add_ln36_2_fu_184_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln37_fu_274_p2 = (ap_sig_allocacmp_cht_4 + 7'd1);

assign and_ln35_fu_252_p2 = (xor_ln35_fu_241_p2 & icmp_ln37_fu_246_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln35_reg_357 == 1'd0) & (qq_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op77_write_state3 == 1'b1) & (qq_sm_head1_full_n == 1'b0)) | ((qq_sm_head3_full_n == 1'b0) & (select_ln36_reg_368 == 2'd2)) | ((select_ln36_reg_368 == 2'd1) & (qq_sm_head2_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_161 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_181 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op77_write_state3 = (~(select_ln36_reg_368 == 2'd2) & ~(select_ln36_reg_368 == 2'd1));
end

assign ap_ready = internal_ap_ready;

assign cht_5_fu_285_p3 = ((or_ln37_fu_280_p2[0:0] == 1'b1) ? 7'd1 : add_ln37_fu_274_p2);

assign h_4_fu_258_p2 = (select_ln35_fu_234_p3 + 2'd1);

assign icmp_ln35_fu_172_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_178_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_246_p2 = ((ap_sig_allocacmp_cht_4 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln37_fu_280_p2 = (icmp_ln36_reg_361 | and_ln35_fu_252_p2);

assign qq_sm_head1_din = qq_sm_read_reg_372;

assign qq_sm_head2_din = qq_sm_read_reg_372;

assign qq_sm_head3_din = qq_sm_read_reg_372;

assign select_ln35_fu_234_p3 = ((icmp_ln36_reg_361[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_h_load);

assign select_ln36_2_fu_190_p3 = ((icmp_ln36_fu_178_p2[0:0] == 1'b1) ? 9'd1 : add_ln36_2_fu_184_p2);

assign select_ln36_fu_264_p3 = ((and_ln35_fu_252_p2[0:0] == 1'b1) ? h_4_fu_258_p2 : select_ln35_fu_234_p3);

assign start_out = real_start;

assign xor_ln35_fu_241_p2 = (icmp_ln36_reg_361 ^ 1'd1);

endmodule //ATTN11_do_split_3
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_do_split_4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        kq_sm_dout,
        kq_sm_num_data_valid,
        kq_sm_fifo_cap,
        kq_sm_empty_n,
        kq_sm_read,
        kq_sm_head2_din,
        kq_sm_head2_num_data_valid,
        kq_sm_head2_fifo_cap,
        kq_sm_head2_full_n,
        kq_sm_head2_write,
        kq_sm_head3_din,
        kq_sm_head3_num_data_valid,
        kq_sm_head3_fifo_cap,
        kq_sm_head3_full_n,
        kq_sm_head3_write,
        kq_sm_head1_din,
        kq_sm_head1_num_data_valid,
        kq_sm_head1_fifo_cap,
        kq_sm_head1_full_n,
        kq_sm_head1_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] kq_sm_dout;
input  [2:0] kq_sm_num_data_valid;
input  [2:0] kq_sm_fifo_cap;
input   kq_sm_empty_n;
output   kq_sm_read;
output  [5:0] kq_sm_head2_din;
input  [6:0] kq_sm_head2_num_data_valid;
input  [6:0] kq_sm_head2_fifo_cap;
input   kq_sm_head2_full_n;
output   kq_sm_head2_write;
output  [5:0] kq_sm_head3_din;
input  [6:0] kq_sm_head3_num_data_valid;
input  [6:0] kq_sm_head3_fifo_cap;
input   kq_sm_head3_full_n;
output   kq_sm_head3_write;
output  [5:0] kq_sm_head1_din;
input  [6:0] kq_sm_head1_num_data_valid;
input  [6:0] kq_sm_head1_fifo_cap;
input   kq_sm_head1_full_n;
output   kq_sm_head1_write;
output   start_out;
output   start_write;

reg ap_idle;
reg kq_sm_read;
reg kq_sm_head2_write;
reg kq_sm_head3_write;
reg kq_sm_head1_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln35_reg_357;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [1:0] select_ln36_reg_368;
reg    ap_predicate_op77_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln35_fu_172_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    kq_sm_head1_blk_n;
reg    kq_sm_head2_blk_n;
reg    kq_sm_head3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln36_fu_178_p2;
reg   [0:0] icmp_ln36_reg_361;
wire   [1:0] select_ln36_fu_264_p3;
reg   [5:0] kq_sm_read_reg_372;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [6:0] cht_fu_60;
wire   [6:0] cht_3_fu_285_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [6:0] ap_sig_allocacmp_cht_2;
reg   [1:0] h_fu_64;
reg   [1:0] ap_sig_allocacmp_h_load;
reg   [8:0] indvar_flatten_fu_68;
wire   [8:0] select_ln36_1_fu_190_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [14:0] indvar_flatten10_fu_72;
wire   [14:0] add_ln35_fu_166_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten10_load;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln36_1_fu_184_p2;
wire   [0:0] icmp_ln37_fu_246_p2;
wire   [0:0] xor_ln35_fu_241_p2;
wire   [1:0] select_ln35_fu_234_p3;
wire   [0:0] and_ln35_fu_252_p2;
wire   [1:0] h_2_fu_258_p2;
wire   [0:0] or_ln37_fu_280_p2;
wire   [6:0] add_ln37_fu_274_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_161;
reg    ap_condition_181;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cht_fu_60 = 7'd0;
//#0 h_fu_64 = 2'd0;
//#0 indvar_flatten_fu_68 = 9'd0;
//#0 indvar_flatten10_fu_72 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if ((icmp_ln35_reg_357 == 1'd0)) begin
            cht_fu_60 <= cht_3_fu_285_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            cht_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_161)) begin
        if ((icmp_ln35_reg_357 == 1'd0)) begin
            h_fu_64 <= select_ln36_fu_264_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            h_fu_64 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_181)) begin
        if ((icmp_ln35_fu_172_p2 == 1'd0)) begin
            indvar_flatten10_fu_72 <= add_ln35_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_72 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_181)) begin
        if ((icmp_ln35_fu_172_p2 == 1'd0)) begin
            indvar_flatten_fu_68 <= select_ln36_1_fu_190_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln35_reg_357 <= icmp_ln35_fu_172_p2;
        icmp_ln36_reg_361 <= icmp_ln36_fu_178_p2;
        kq_sm_read_reg_372 <= kq_sm_dout;
        select_ln36_reg_368 <= select_ln36_fu_264_p3;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_172_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_cht_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_cht_2 = cht_fu_60;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_h_load = 2'd0;
    end else begin
        ap_sig_allocacmp_h_load = h_fu_64;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_72;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_68;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        kq_sm_blk_n = kq_sm_empty_n;
    end else begin
        kq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op77_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kq_sm_head1_blk_n = kq_sm_head1_full_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op77_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kq_sm_head1_write = 1'b1;
    end else begin
        kq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kq_sm_head2_blk_n = kq_sm_head2_full_n;
    end else begin
        kq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kq_sm_head2_write = 1'b1;
    end else begin
        kq_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kq_sm_head3_blk_n = kq_sm_head3_full_n;
    end else begin
        kq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_368 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kq_sm_head3_write = 1'b1;
    end else begin
        kq_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kq_sm_read = 1'b1;
    end else begin
        kq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 15'd1);

assign add_ln36_1_fu_184_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln37_fu_274_p2 = (ap_sig_allocacmp_cht_2 + 7'd1);

assign and_ln35_fu_252_p2 = (xor_ln35_fu_241_p2 & icmp_ln37_fu_246_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln35_reg_357 == 1'd0) & (kq_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op77_write_state3 == 1'b1) & (kq_sm_head1_full_n == 1'b0)) | ((kq_sm_head3_full_n == 1'b0) & (select_ln36_reg_368 == 2'd2)) | ((select_ln36_reg_368 == 2'd1) & (kq_sm_head2_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_161 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_181 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op77_write_state3 = (~(select_ln36_reg_368 == 2'd2) & ~(select_ln36_reg_368 == 2'd1));
end

assign ap_ready = internal_ap_ready;

assign cht_3_fu_285_p3 = ((or_ln37_fu_280_p2[0:0] == 1'b1) ? 7'd1 : add_ln37_fu_274_p2);

assign h_2_fu_258_p2 = (select_ln35_fu_234_p3 + 2'd1);

assign icmp_ln35_fu_172_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_178_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_246_p2 = ((ap_sig_allocacmp_cht_2 == 7'd64) ? 1'b1 : 1'b0);

assign kq_sm_head1_din = kq_sm_read_reg_372;

assign kq_sm_head2_din = kq_sm_read_reg_372;

assign kq_sm_head3_din = kq_sm_read_reg_372;

assign or_ln37_fu_280_p2 = (icmp_ln36_reg_361 | and_ln35_fu_252_p2);

assign select_ln35_fu_234_p3 = ((icmp_ln36_reg_361[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_h_load);

assign select_ln36_1_fu_190_p3 = ((icmp_ln36_fu_178_p2[0:0] == 1'b1) ? 9'd1 : add_ln36_1_fu_184_p2);

assign select_ln36_fu_264_p3 = ((and_ln35_fu_252_p2[0:0] == 1'b1) ? h_2_fu_258_p2 : select_ln35_fu_234_p3);

assign start_out = real_start;

assign xor_ln35_fu_241_p2 = (icmp_ln36_reg_361 ^ 1'd1);

endmodule //ATTN11_do_split_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w140_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 140,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w140_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w140_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w140_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 140,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w140_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 140,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w140_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w140_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w140_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 140,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w140_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 140,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w140_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w140_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w140_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 140,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w144_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 144,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w144_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w144_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w144_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 144,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w20_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 20,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w20_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w20_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w20_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 20,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w20_d512_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 20,
    ADDR_WIDTH   = 9,
    DEPTH        = 511)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w20_d512_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w20_d512_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w20_d512_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 20,
    ADDR_WIDTH  = 9,
    DEPTH       = 511)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w20_d64_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 20,
    ADDR_WIDTH   = 6,
    DEPTH        = 63)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w20_d64_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w20_d64_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w20_d64_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 20,
    ADDR_WIDTH  = 6,
    DEPTH       = 63)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w240_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 240,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w240_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w240_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w240_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 240,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w240_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 240,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w240_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w240_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w240_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 240,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w24_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 24,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w24_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w24_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w24_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 24,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w24_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 24,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w24_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w24_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w24_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 24,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w24_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 24,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w24_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w24_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w24_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 24,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w24_d2_S_x1
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 24,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w24_d2_S_x1_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w24_d2_S_x1_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w24_d2_S_x1_ShiftReg
#(parameter
    DATA_WIDTH  = 24,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w24_d32_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 24,
    ADDR_WIDTH   = 5,
    DEPTH        = 32)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w24_d32_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w24_d32_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w24_d32_S_ShiftReg
#(parameter
    DATA_WIDTH  = 24,
    ADDR_WIDTH  = 5,
    DEPTH       = 32)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w24_d32_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 24,
    ADDR_WIDTH   = 5,
    DEPTH        = 32)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w24_d32_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w24_d32_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w24_d32_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 24,
    ADDR_WIDTH  = 5,
    DEPTH       = 32)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w24_d32_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 24,
    ADDR_WIDTH   = 5,
    DEPTH        = 32)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w24_d32_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w24_d32_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w24_d32_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 24,
    ADDR_WIDTH  = 5,
    DEPTH       = 32)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w26_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 26,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w26_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w26_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w26_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 26,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w26_d512_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 26,
    ADDR_WIDTH   = 9,
    DEPTH        = 511)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w26_d512_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w26_d512_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w26_d512_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 26,
    ADDR_WIDTH  = 9,
    DEPTH       = 511)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w288_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 288,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w288_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w288_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w288_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 288,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w36_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 36,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w36_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w36_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w36_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 36,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w36_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 36,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w36_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w36_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w36_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 36,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w36_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 36,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w36_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w36_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w36_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 36,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w36_d32_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 36,
    ADDR_WIDTH   = 5,
    DEPTH        = 31)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w36_d32_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w36_d32_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w36_d32_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 36,
    ADDR_WIDTH  = 5,
    DEPTH       = 31)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w36_d32_A_x
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 36,
    ADDR_WIDTH   = 5,
    DEPTH        = 31)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w36_d32_A_x_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w36_d32_A_x_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w36_d32_A_x_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 36,
    ADDR_WIDTH  = 5,
    DEPTH       = 31)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w36_d32_A_x0
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 36,
    ADDR_WIDTH   = 5,
    DEPTH        = 31)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w36_d32_A_x0_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w36_d32_A_x0_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w36_d32_A_x0_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 36,
    ADDR_WIDTH  = 5,
    DEPTH       = 31)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w3_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 3,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w3_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w3_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w3_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 3,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w3_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 3,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w3_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w3_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w3_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 3,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w3_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 3,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w3_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w3_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w3_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 3,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w3_d2_S_x1
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 3,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w3_d2_S_x1_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w3_d2_S_x1_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w3_d2_S_x1_ShiftReg
#(parameter
    DATA_WIDTH  = 3,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w3_d2_S_x2
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 3,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w3_d2_S_x2_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w3_d2_S_x2_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w3_d2_S_x2_ShiftReg
#(parameter
    DATA_WIDTH  = 3,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w3_d2_S_x3
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 3,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w3_d2_S_x3_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w3_d2_S_x3_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w3_d2_S_x3_ShiftReg
#(parameter
    DATA_WIDTH  = 3,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w42_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 42,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w42_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w42_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w42_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 42,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w42_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 42,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w42_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w42_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w42_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 42,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w42_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 42,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w42_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w42_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w42_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 42,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w42_d32_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 42,
    ADDR_WIDTH   = 5,
    DEPTH        = 31)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w42_d32_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w42_d32_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w42_d32_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 42,
    ADDR_WIDTH  = 5,
    DEPTH       = 31)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w42_d32_A_x
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 42,
    ADDR_WIDTH   = 5,
    DEPTH        = 31)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w42_d32_A_x_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w42_d32_A_x_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w42_d32_A_x_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 42,
    ADDR_WIDTH  = 5,
    DEPTH       = 31)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w42_d32_A_x0
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 42,
    ADDR_WIDTH   = 5,
    DEPTH        = 31)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w42_d32_A_x0_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w42_d32_A_x0_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w42_d32_A_x0_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 42,
    ADDR_WIDTH  = 5,
    DEPTH       = 31)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w52_d12288_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 52,
    ADDR_WIDTH   = 14,
    DEPTH        = 12287)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w52_d12288_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w52_d12288_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w52_d12288_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 52,
    ADDR_WIDTH  = 14,
    DEPTH       = 12287)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w6_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 6,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w6_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w6_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w6_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 6,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w6_d512_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 6,
    ADDR_WIDTH   = 9,
    DEPTH        = 511)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w6_d512_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w6_d512_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w6_d512_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 6,
    ADDR_WIDTH  = 9,
    DEPTH       = 511)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w6_d64_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 6,
    ADDR_WIDTH   = 6,
    DEPTH        = 64)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w6_d64_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w6_d64_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w6_d64_S_ShiftReg
#(parameter
    DATA_WIDTH  = 6,
    ADDR_WIDTH  = 6,
    DEPTH       = 64)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w6_d8000_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 6,
    ADDR_WIDTH   = 13,
    DEPTH        = 7999)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w6_d8000_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w6_d8000_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w6_d8000_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 6,
    ADDR_WIDTH  = 13,
    DEPTH       = 7999)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w72_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 72,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w72_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w72_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w72_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 72,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w72_d32_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 72,
    ADDR_WIDTH   = 5,
    DEPTH        = 31)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w72_d32_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w72_d32_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w72_d32_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 72,
    ADDR_WIDTH  = 5,
    DEPTH       = 31)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w80_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 80,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w80_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w80_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w80_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 80,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w80_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 80,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w80_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w80_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w80_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 80,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w80_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 80,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w80_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w80_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w80_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 80,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w84_d2_S
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 84,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w84_d2_S_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w84_d2_S_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w84_d2_S_ShiftReg
#(parameter
    DATA_WIDTH  = 84,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w84_d2_S_x
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 84,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w84_d2_S_x_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w84_d2_S_x_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w84_d2_S_x_ShiftReg
#(parameter
    DATA_WIDTH  = 84,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w84_d2_S_x0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 84,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w84_d2_S_x0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w84_d2_S_x0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w84_d2_S_x0_ShiftReg
#(parameter
    DATA_WIDTH  = 84,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w84_d2_S_x1
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 84,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w84_d2_S_x1_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w84_d2_S_x1_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w84_d2_S_x1_ShiftReg
#(parameter
    DATA_WIDTH  = 84,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w84_d2_S_x2
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 84,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w84_d2_S_x2_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w84_d2_S_x2_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w84_d2_S_x2_ShiftReg
#(parameter
    DATA_WIDTH  = 84,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_fifo_w84_d2_S_x3
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 84,
    ADDR_WIDTH   = 2,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid? 
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 
//------------------------Instantiation------------------
    ATTN11_fifo_w84_d2_S_x3_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_fifo_w84_d2_S_x3_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap       = DEPTH;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop)
            num_data_valid <= num_data_valid + 1;
        else if (~push & pop)
            num_data_valid <= num_data_valid - 1;
    end // 

endmodule  


module ATTN11_fifo_w84_d2_S_x3_ShiftReg
#(parameter
    DATA_WIDTH  = 84,
    ADDR_WIDTH  = 2,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 2 

module ATTN11_fifo_w84_d512_A
#(parameter
    MEM_STYLE    = "auto",
    DATA_WIDTH   = 84,
    ADDR_WIDTH   = 9,
    DEPTH        = 511)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 
    output wire [ADDR_WIDTH:0]   if_num_data_valid, // for FRP
    output wire [ADDR_WIDTH:0]   if_fifo_cap,       // for FRP

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    reg  [ADDR_WIDTH-1:0] waddr;
    reg  [ADDR_WIDTH-1:0] raddr;
    wire [ADDR_WIDTH-1:0] wnext;
    wire [ADDR_WIDTH-1:0] rnext;
    wire                  push;
    wire                  pop;
    reg  [ADDR_WIDTH:0]   mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1;
    // has num_data_valid? 
    wire                  num_extra_words;//yes
    reg  [ADDR_WIDTH:0]   num_data_valid; //yes 

    wire                  pop_dout;
    reg  [ADDR_WIDTH:0]   num_data_cnt;
    reg                   dout_vld = 1'b0;

//------------------------Instantiation------------------
    ATTN11_fifo_w84_d512_A_ram 
    #(  .MEM_STYLE  (MEM_STYLE),
        .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH)
    ) U_ATTN11_fifo_w84_d512_A_ram (
        .clk        (clk),
        .reset      (reset),
        .we         (push),
        .waddr      (waddr),
        .din        (if_din),
        .raddr      (raddr),
        .rden       (pop),
        .dout       (if_dout)
    );

//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 
    assign if_num_data_valid = num_data_valid;
    assign if_fifo_cap = DEPTH + 1;

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n;
    assign if_empty_n = dout_vld;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & (pop_dout | ~dout_vld);
    assign pop_dout   = dout_vld & if_read_ce & if_read;
    
    assign wnext      = !push                ? waddr :
                        (waddr == DEPTH - 1) ? 1'b0  :
                        waddr + 1'b1;
    assign rnext      = !pop                 ? raddr :
                        (raddr == DEPTH - 1) ? 1'b0  :
                        raddr + 1'b1;

    // waddr
    always @(posedge clk) begin
        if (reset)
            waddr <= {ADDR_WIDTH{1'b0}};
        else
            waddr <= wnext;
    end

    // raddr
    always @(posedge clk) begin
        if (reset)
            raddr <= {ADDR_WIDTH{1'b0}};
        else
            raddr <= rnext;
    end

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b0}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n 
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop_dout) && (num_data_cnt == DEPTH))
            full_n <= 1'b0;
        else if (~push & pop_dout)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 1))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 

    // prog_empty_n 

    // num_data_cnt
    always @(posedge clk) begin
        if (reset)
            num_data_cnt <= {ADDR_WIDTH+1{1'b0}};
        else if ( push & ~pop_dout)
            num_data_cnt <= num_data_cnt + 1'b1;
        else if (~push & pop_dout)
            num_data_cnt <= num_data_cnt - 1'b1;
    end

    // num_data_valid 
    assign num_extra_words = (dout_vld & ~pop_dout) ? 1 : 0;
                             
    always @(posedge clk) begin
        if (reset)
            num_data_valid <= {ADDR_WIDTH+1{1'b0}};
        else if (empty_n | (dout_vld & ~pop_dout))
            num_data_valid <= push + mOutPtr + num_extra_words;
        else
            num_data_valid <= num_extra_words;
    end // 

    // dout_vld
    always @(posedge clk) begin
        if (reset)
            dout_vld <= 1'b0;
        else if (pop)
            dout_vld <= 1'b1;
        else if (pop_dout)
            dout_vld <= 1'b0;
    end

endmodule


module ATTN11_fifo_w84_d512_A_ram
#(parameter
    MEM_STYLE   = "auto",
    DATA_WIDTH  = 84,
    ADDR_WIDTH  = 9,
    DEPTH       = 511)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    input  wire                  rden,
    output wire [DATA_WIDTH-1:0] dout
);

    (* ram_style = MEM_STYLE *)
    reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
    reg  [DATA_WIDTH-1:0] mem_reg;

    always @(posedge clk) begin
        if (we)
            mem[waddr] <= din;
    end

    always @(posedge clk) begin
        if (reset)
            mem_reg <= 0;
        else if (rden)
            mem_reg <= mem[raddr];
    end
    
    assign dout = mem_reg;

endmodule// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN11_flow_control_loop_pipe(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_continue,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;
input   ap_continue;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
reg ap_loop_init;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init = 1'b1;
end

assign ap_start_int = ap_start;

assign ap_continue_int = ap_continue;

assign ap_done = ap_loop_exit_done;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_loop_exit_ready == 1'b1) begin
        ap_loop_init <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init <= 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN11_flow_control_loop_pipe_sequential_init(
        ap_clk,
        ap_rst,
        ap_start,
        ap_ready,
        ap_done,
        ap_start_int,
        ap_ready_int,
        ap_done_int,
        ap_continue_int,
        ap_loop_init,
        ap_loop_exit_ready,
        ap_loop_exit_done
);

input   ap_clk;
input   ap_rst;

//Block level handshake with outside loop
input   ap_start;
output  ap_ready;
output  ap_done;

//Block level handshake with loop body
output  ap_start_int;
input   ap_ready_int;
input   ap_done_int;
output  ap_continue_int;

//Init live in variables
output   ap_loop_init;
wire     ap_loop_init;
reg ap_loop_init_int;
reg ap_done;
reg ap_done_cache;

//Exit signal from loop body
input   ap_loop_exit_ready;
input   ap_loop_exit_done;

// power-on initialization
initial begin
//#0 ap_loop_init_int = 1'b1;
//#0 ap_done_cache = 1'b0;
end

assign ap_start_int = ap_start;

assign ap_continue_int = 1'b1;

assign ap_ready = ap_loop_exit_ready;

//ap_loop_init is valid for the first II
//of the first loop run so as to enable
//the init block ops which are pushed into
//the first state of the pipeline region
always @ (posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_loop_exit_done == 1'b1) begin
        ap_loop_init_int <= 1'b1;
    end else if(ap_ready_int == 1'b1) begin
        ap_loop_init_int <= 1'b0;
    end
end

assign ap_loop_init = ap_loop_init_int & ap_start;

// if no ap_continue port and current module is not ATTN11 module, 
// ap_done handshakes with ap_start. Internally, flow control sends out 
// ap_conintue_int = 1'b1 so the ap_done_int is asserted high for 1 clock cycle.
// ap_done_cache is used to record ap_done_int, and de-assert if ap_start_int
// is asserted, so DUT can start the next run
always @(posedge ap_clk)
begin
    if (ap_rst == 1'b1) begin
        ap_done_cache <= 1'b0;
    end else if (ap_done_int == 1'b1) begin
        ap_done_cache <= 1'b1;
    end else if (ap_start_int == 1'b1) begin
        ap_done_cache <= 1'b0;
    end
end

// if no ap_continue port and current module is not ATTN11 module, ap_done handshakes with ap_start
always @(*)
begin
    if ((ap_done_int == 1'b1) || ((ap_done_cache == 1'b1) && (ap_start_int == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

endmodule
        
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================
`timescale 1 ns / 1 ps

module ATTN11_mac_muladd_13s_20ns_19ns_32_4_1_DSP48_2(
    input clk,
    input rst,
    input ce,
    input  [13 - 1:0] in0,
    input  [20 - 1:0] in1,
    input  [19 - 1:0] in2,
    output [32 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [24 - 1:0]     b;
wire signed [58 - 1:0]     c;
wire signed [51 - 1:0]     m;
wire signed [58 - 1:0]     p;
reg  signed [51 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [24 - 1:0]     b_reg;
reg  signed [58 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $unsigned(in1);
assign c  = $unsigned(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN11_mac_muladd_13s_20ns_19ns_32_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



ATTN11_mac_muladd_13s_20ns_19ns_32_4_1_DSP48_2 ATTN11_mac_muladd_13s_20ns_19ns_32_4_1_DSP48_2_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================
`timescale 1 ns / 1 ps

module ATTN11_mac_muladd_16s_16ns_23ns_32_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [16 - 1:0] in0,
    input  [16 - 1:0] in1,
    input  [23 - 1:0] in2,
    output [32 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [24 - 1:0]     b;
wire signed [58 - 1:0]     c;
wire signed [51 - 1:0]     m;
wire signed [58 - 1:0]     p;
reg  signed [51 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [24 - 1:0]     b_reg;
reg  signed [58 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $unsigned(in1);
assign c  = $unsigned(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN11_mac_muladd_16s_16ns_23ns_32_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



ATTN11_mac_muladd_16s_16ns_23ns_32_4_1_DSP48_0 ATTN11_mac_muladd_16s_16ns_23ns_32_4_1_DSP48_0_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================
`timescale 1 ns / 1 ps

module ATTN11_mac_muladd_25s_16ns_34s_36_4_1_DSP48_1(
    input clk,
    input rst,
    input ce,
    input  [25 - 1:0] in0,
    input  [16 - 1:0] in1,
    input  [34 - 1:0] in2,
    output [36 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [24 - 1:0]     b;
wire signed [58 - 1:0]     c;
wire signed [51 - 1:0]     m;
wire signed [58 - 1:0]     p;
reg  signed [51 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [24 - 1:0]     b_reg;
reg  signed [58 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $unsigned(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN11_mac_muladd_25s_16ns_34s_36_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



ATTN11_mac_muladd_25s_16ns_34s_36_4_1_DSP48_1 ATTN11_mac_muladd_25s_16ns_34s_36_4_1_DSP48_1_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_reshape_head3_dout,
        kq_sm_reshape_head3_num_data_valid,
        kq_sm_reshape_head3_fifo_cap,
        kq_sm_reshape_head3_empty_n,
        kq_sm_reshape_head3_read,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [83:0] kq_sm_reshape_head3_dout;
input  [9:0] kq_sm_reshape_head3_num_data_valid;
input  [9:0] kq_sm_reshape_head3_fifo_cap;
input   kq_sm_reshape_head3_empty_n;
output   kq_sm_reshape_head3_read;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_reshape_head3_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [8:0] dynamic_weight_arr_address0;
reg    dynamic_weight_arr_ce0;
reg    dynamic_weight_arr_we0;
wire   [83:0] dynamic_weight_arr_q0;
wire    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start;
wire    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done;
wire    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_idle;
wire    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready;
wire    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head3_read;
wire   [8:0] grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0;
wire    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0;
wire   [83:0] grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0;
wire    grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start;
wire    grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done;
wire    grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle;
wire    grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready;
wire   [83:0] grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;
wire    grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
wire   [8:0] grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
reg    grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg = 1'b0;
//#0 grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg = 1'b0;
end

ATTN11_matmul_step1_cache_weight_28_dynamic_weight_arr_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_address0),
    .ce0(dynamic_weight_arr_ce0),
    .we0(dynamic_weight_arr_we0),
    .d0(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0),
    .q0(dynamic_weight_arr_q0)
);

ATTN11_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready),
    .kq_sm_reshape_head3_dout(kq_sm_reshape_head3_dout),
    .kq_sm_reshape_head3_num_data_valid(10'd0),
    .kq_sm_reshape_head3_fifo_cap(10'd0),
    .kq_sm_reshape_head3_empty_n(kq_sm_reshape_head3_empty_n),
    .kq_sm_reshape_head3_read(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head3_read),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_we0(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0),
    .dynamic_weight_arr_d0(grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0)
);

ATTN11_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready),
    .weight_sm_din(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din),
    .weight_sm_num_data_valid(3'd0),
    .weight_sm_fifo_cap(3'd0),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_q0(dynamic_weight_arr_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call5) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0;
    end else begin
        dynamic_weight_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_we0 = grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kq_sm_reshape_head3_read = grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head3_read;
    end else begin
        kq_sm_reshape_head3_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_sm_write = grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start = grp_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg;

assign grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start = grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;

assign start_out = real_start;

assign weight_sm_din = grp_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;

endmodule //ATTN11_matmul_step1_cache_weight
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_28 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_num_data_valid,
        kq_sm_reshape_head1_fifo_cap,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [83:0] kq_sm_reshape_head1_dout;
input  [9:0] kq_sm_reshape_head1_num_data_valid;
input  [9:0] kq_sm_reshape_head1_fifo_cap;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_reshape_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [8:0] dynamic_weight_arr_address0;
reg    dynamic_weight_arr_ce0;
reg    dynamic_weight_arr_we0;
wire   [83:0] dynamic_weight_arr_q0;
wire    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start;
wire    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done;
wire    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_idle;
wire    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready;
wire    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head1_read;
wire   [8:0] grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0;
wire    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0;
wire   [83:0] grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0;
wire    grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start;
wire    grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done;
wire    grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle;
wire    grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready;
wire   [83:0] grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;
wire    grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
wire   [8:0] grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
reg    grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg = 1'b0;
//#0 grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg = 1'b0;
end

ATTN11_matmul_step1_cache_weight_28_dynamic_weight_arr_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_address0),
    .ce0(dynamic_weight_arr_ce0),
    .we0(dynamic_weight_arr_we0),
    .d0(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0),
    .q0(dynamic_weight_arr_q0)
);

ATTN11_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head1_dout),
    .kq_sm_reshape_head1_num_data_valid(10'd0),
    .kq_sm_reshape_head1_fifo_cap(10'd0),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head1_empty_n),
    .kq_sm_reshape_head1_read(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head1_read),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_we0(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0),
    .dynamic_weight_arr_d0(grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0)
);

ATTN11_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready),
    .weight_sm_din(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din),
    .weight_sm_num_data_valid(3'd0),
    .weight_sm_fifo_cap(3'd0),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_q0(dynamic_weight_arr_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call5) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0;
    end else begin
        dynamic_weight_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_we0 = grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kq_sm_reshape_head1_read = grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head1_read;
    end else begin
        kq_sm_reshape_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_sm_write = grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start = grp_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg;

assign grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start = grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;

assign start_out = real_start;

assign weight_sm_din = grp_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;

endmodule //ATTN11_matmul_step1_cache_weight_28
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step1_cache_weight_28_dynamic_weight_arr_RAM_1P_LUTRAM_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 84;
parameter AddressWidth = 9;
parameter AddressRange = 448;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_num_data_valid,
        kq_sm_reshape_head1_fifo_cap,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_we0,
        dynamic_weight_arr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [83:0] kq_sm_reshape_head1_dout;
input  [9:0] kq_sm_reshape_head1_num_data_valid;
input  [9:0] kq_sm_reshape_head1_fifo_cap;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
output   dynamic_weight_arr_we0;
output  [83:0] dynamic_weight_arr_d0;

reg ap_idle;
reg kq_sm_reshape_head1_read;
reg dynamic_weight_arr_ce0;
reg dynamic_weight_arr_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln223_fu_133_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_sm_reshape_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln233_fu_203_p2;
reg   [8:0] add_ln233_reg_286;
reg   [83:0] kq_sm_reshape_head1_read_reg_291;
wire   [63:0] zext_ln233_3_fu_241_p1;
reg   [4:0] cit_fu_54;
wire   [4:0] add_ln224_fu_211_p2;
wire    ap_loop_init;
reg   [4:0] cot_fu_58;
wire   [4:0] select_ln223_2_fu_183_p3;
reg   [8:0] indvar_flatten_fu_62;
wire   [8:0] add_ln223_2_fu_127_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln224_fu_169_p2;
wire   [4:0] add_ln223_fu_163_p2;
wire   [4:0] select_ln223_fu_175_p3;
wire   [8:0] tmp_fu_191_p3;
wire   [8:0] zext_ln233_fu_199_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 cit_fu_54 = 5'd0;
//#0 cot_fu_58 = 5'd0;
//#0 indvar_flatten_fu_62 = 9'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_54 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_54 <= add_ln224_fu_211_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_fu_58 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_fu_58 <= select_ln223_2_fu_183_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln223_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln223_2_fu_127_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln233_reg_286 <= add_ln233_fu_203_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        kq_sm_reshape_head1_read_reg_291 <= kq_sm_reshape_head1_dout;
    end
end

always @ (*) begin
    if (((icmp_ln223_fu_133_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_empty_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_read = 1'b1;
    end else begin
        kq_sm_reshape_head1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_2_fu_127_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln223_fu_163_p2 = (cot_fu_58 + 5'd1);

assign add_ln224_fu_211_p2 = (select_ln223_fu_175_p3 + 5'd1);

assign add_ln233_fu_203_p2 = (tmp_fu_191_p3 + zext_ln233_fu_199_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (kq_sm_reshape_head1_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln233_3_fu_241_p1;

assign dynamic_weight_arr_d0 = kq_sm_reshape_head1_read_reg_291;

assign icmp_ln223_fu_133_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_169_p2 = ((cit_fu_54 == 5'd16) ? 1'b1 : 1'b0);

assign select_ln223_2_fu_183_p3 = ((icmp_ln224_fu_169_p2[0:0] == 1'b1) ? add_ln223_fu_163_p2 : cot_fu_58);

assign select_ln223_fu_175_p3 = ((icmp_ln224_fu_169_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_54);

assign tmp_fu_191_p3 = {{select_ln223_2_fu_183_p3}, {4'd0}};

assign zext_ln233_3_fu_241_p1 = add_ln233_reg_286;

assign zext_ln233_fu_199_p1 = select_ln223_fu_175_p3;

endmodule //ATTN11_matmul_step1_cache_weight_28_Pipeline_COT_LOOP_CIT_LOOP
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
input  [83:0] dynamic_weight_arr_q0;

reg ap_idle;
reg weight_sm_write;
reg dynamic_weight_arr_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln241_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    weight_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln242_fu_171_p2;
reg   [0:0] icmp_ln242_reg_381;
wire   [4:0] select_ln242_fu_262_p3;
reg   [4:0] select_ln242_reg_388;
wire   [4:0] select_ln242_3_fu_270_p3;
reg   [4:0] select_ln242_3_reg_393;
wire   [63:0] zext_ln253_3_fu_324_p1;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln243_fu_278_p2;
wire    ap_loop_init;
reg   [4:0] cot_fu_66;
reg   [9:0] indvar_flatten6_fu_70;
wire   [9:0] select_ln242_4_fu_183_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
reg   [15:0] indvar_flatten18_fu_74;
wire   [15:0] add_ln241_fu_153_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln242_2_fu_177_p2;
wire   [0:0] icmp_ln243_fu_239_p2;
wire   [0:0] xor_ln241_fu_234_p2;
wire   [4:0] select_ln241_fu_227_p3;
wire   [0:0] and_ln241_fu_245_p2;
wire   [0:0] or_ln242_fu_257_p2;
wire   [4:0] add_ln242_fu_251_p2;
wire   [8:0] tmp_117_fu_308_p3;
wire   [8:0] zext_ln253_fu_315_p1;
wire   [8:0] add_ln253_fu_318_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten6_fu_70 = 10'd0;
//#0 indvar_flatten18_fu_74 = 16'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_62 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_62 <= add_ln243_fu_278_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_fu_66 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_fu_66 <= select_ln242_3_fu_270_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln241_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten18_fu_74 <= add_ln241_fu_153_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_74 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln241_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_70 <= select_ln242_4_fu_183_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln242_reg_381 <= icmp_ln242_fu_171_p2;
        select_ln242_3_reg_393 <= select_ln242_3_fu_270_p3;
        select_ln242_reg_388 <= select_ln242_fu_262_p3;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_74;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln241_fu_153_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 16'd1);

assign add_ln242_2_fu_177_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln242_fu_251_p2 = (select_ln241_fu_227_p3 + 5'd1);

assign add_ln243_fu_278_p2 = (select_ln242_fu_262_p3 + 5'd1);

assign add_ln253_fu_318_p2 = (tmp_117_fu_308_p3 + zext_ln253_fu_315_p1);

assign and_ln241_fu_245_p2 = (xor_ln241_fu_234_p2 & icmp_ln243_fu_239_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (weight_sm_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln253_3_fu_324_p1;

assign icmp_ln241_fu_159_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_171_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_239_p2 = ((cit_fu_62 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln242_fu_257_p2 = (icmp_ln242_reg_381 | and_ln241_fu_245_p2);

assign select_ln241_fu_227_p3 = ((icmp_ln242_reg_381[0:0] == 1'b1) ? 5'd0 : cot_fu_66);

assign select_ln242_3_fu_270_p3 = ((and_ln241_fu_245_p2[0:0] == 1'b1) ? add_ln242_fu_251_p2 : select_ln241_fu_227_p3);

assign select_ln242_4_fu_183_p3 = ((icmp_ln242_fu_171_p2[0:0] == 1'b1) ? 10'd1 : add_ln242_2_fu_177_p2);

assign select_ln242_fu_262_p3 = ((or_ln242_fu_257_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_62);

assign tmp_117_fu_308_p3 = {{select_ln242_3_reg_393}, {4'd0}};

assign weight_sm_din = dynamic_weight_arr_q0;

assign xor_ln241_fu_234_p2 = (icmp_ln242_reg_381 ^ 1'd1);

assign zext_ln253_3_fu_324_p1 = add_ln253_fu_318_p2;

assign zext_ln253_fu_315_p1 = select_ln242_reg_388;

endmodule //ATTN11_matmul_step1_cache_weight_28_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_33 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_reshape_head2_dout,
        kq_sm_reshape_head2_num_data_valid,
        kq_sm_reshape_head2_fifo_cap,
        kq_sm_reshape_head2_empty_n,
        kq_sm_reshape_head2_read,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [83:0] kq_sm_reshape_head2_dout;
input  [9:0] kq_sm_reshape_head2_num_data_valid;
input  [9:0] kq_sm_reshape_head2_fifo_cap;
input   kq_sm_reshape_head2_empty_n;
output   kq_sm_reshape_head2_read;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_reshape_head2_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [8:0] dynamic_weight_arr_address0;
reg    dynamic_weight_arr_ce0;
reg    dynamic_weight_arr_we0;
wire   [83:0] dynamic_weight_arr_q0;
wire    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start;
wire    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done;
wire    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_idle;
wire    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready;
wire    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head2_read;
wire   [8:0] grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0;
wire    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0;
wire   [83:0] grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0;
wire    grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start;
wire    grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done;
wire    grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle;
wire    grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready;
wire   [83:0] grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;
wire    grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
wire   [8:0] grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
reg    grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg = 1'b0;
//#0 grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg = 1'b0;
end

ATTN11_matmul_step1_cache_weight_28_dynamic_weight_arr_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_address0),
    .ce0(dynamic_weight_arr_ce0),
    .we0(dynamic_weight_arr_we0),
    .d0(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0),
    .q0(dynamic_weight_arr_q0)
);

ATTN11_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready),
    .kq_sm_reshape_head2_dout(kq_sm_reshape_head2_dout),
    .kq_sm_reshape_head2_num_data_valid(10'd0),
    .kq_sm_reshape_head2_fifo_cap(10'd0),
    .kq_sm_reshape_head2_empty_n(kq_sm_reshape_head2_empty_n),
    .kq_sm_reshape_head2_read(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head2_read),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_we0(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0),
    .dynamic_weight_arr_d0(grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_d0)
);

ATTN11_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready),
    .weight_sm_din(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din),
    .weight_sm_num_data_valid(3'd0),
    .weight_sm_fifo_cap(3'd0),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_q0(dynamic_weight_arr_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call5) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_address0;
    end else begin
        dynamic_weight_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_ce0;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_we0 = grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_dynamic_weight_arr_we0;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kq_sm_reshape_head2_read = grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_kq_sm_reshape_head2_read;
    end else begin
        kq_sm_reshape_head2_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_sm_write = grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start = grp_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP_fu_34_ap_start_reg;

assign grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start = grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;

assign start_out = real_start;

assign weight_sm_din = grp_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;

endmodule //ATTN11_matmul_step1_cache_weight_33
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_sm_reshape_head2_dout,
        kq_sm_reshape_head2_num_data_valid,
        kq_sm_reshape_head2_fifo_cap,
        kq_sm_reshape_head2_empty_n,
        kq_sm_reshape_head2_read,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_we0,
        dynamic_weight_arr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [83:0] kq_sm_reshape_head2_dout;
input  [9:0] kq_sm_reshape_head2_num_data_valid;
input  [9:0] kq_sm_reshape_head2_fifo_cap;
input   kq_sm_reshape_head2_empty_n;
output   kq_sm_reshape_head2_read;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
output   dynamic_weight_arr_we0;
output  [83:0] dynamic_weight_arr_d0;

reg ap_idle;
reg kq_sm_reshape_head2_read;
reg dynamic_weight_arr_ce0;
reg dynamic_weight_arr_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln223_fu_133_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_sm_reshape_head2_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln233_fu_203_p2;
reg   [8:0] add_ln233_reg_286;
reg   [83:0] kq_sm_reshape_head2_read_reg_291;
wire   [63:0] zext_ln233_2_fu_241_p1;
reg   [4:0] cit_fu_54;
wire   [4:0] add_ln224_fu_211_p2;
wire    ap_loop_init;
reg   [4:0] cot_fu_58;
wire   [4:0] select_ln223_1_fu_183_p3;
reg   [8:0] indvar_flatten_fu_62;
wire   [8:0] add_ln223_1_fu_127_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln224_fu_169_p2;
wire   [4:0] add_ln223_fu_163_p2;
wire   [4:0] select_ln223_fu_175_p3;
wire   [8:0] tmp_fu_191_p3;
wire   [8:0] zext_ln233_fu_199_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 cit_fu_54 = 5'd0;
//#0 cot_fu_58 = 5'd0;
//#0 indvar_flatten_fu_62 = 9'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_54 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_54 <= add_ln224_fu_211_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_fu_58 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_fu_58 <= select_ln223_1_fu_183_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln223_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln223_1_fu_127_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln233_reg_286 <= add_ln233_fu_203_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        kq_sm_reshape_head2_read_reg_291 <= kq_sm_reshape_head2_dout;
    end
end

always @ (*) begin
    if (((icmp_ln223_fu_133_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head2_blk_n = kq_sm_reshape_head2_empty_n;
    end else begin
        kq_sm_reshape_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head2_read = 1'b1;
    end else begin
        kq_sm_reshape_head2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_1_fu_127_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln223_fu_163_p2 = (cot_fu_58 + 5'd1);

assign add_ln224_fu_211_p2 = (select_ln223_fu_175_p3 + 5'd1);

assign add_ln233_fu_203_p2 = (tmp_fu_191_p3 + zext_ln233_fu_199_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (kq_sm_reshape_head2_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln233_2_fu_241_p1;

assign dynamic_weight_arr_d0 = kq_sm_reshape_head2_read_reg_291;

assign icmp_ln223_fu_133_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_169_p2 = ((cit_fu_54 == 5'd16) ? 1'b1 : 1'b0);

assign select_ln223_1_fu_183_p3 = ((icmp_ln224_fu_169_p2[0:0] == 1'b1) ? add_ln223_fu_163_p2 : cot_fu_58);

assign select_ln223_fu_175_p3 = ((icmp_ln224_fu_169_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_54);

assign tmp_fu_191_p3 = {{select_ln223_1_fu_183_p3}, {4'd0}};

assign zext_ln233_2_fu_241_p1 = add_ln233_reg_286;

assign zext_ln233_fu_199_p1 = select_ln223_fu_175_p3;

endmodule //ATTN11_matmul_step1_cache_weight_33_Pipeline_COT_LOOP_CIT_LOOP
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
input  [83:0] dynamic_weight_arr_q0;

reg ap_idle;
reg weight_sm_write;
reg dynamic_weight_arr_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln241_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    weight_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln242_fu_171_p2;
reg   [0:0] icmp_ln242_reg_381;
wire   [4:0] select_ln242_fu_262_p3;
reg   [4:0] select_ln242_reg_388;
wire   [4:0] select_ln242_1_fu_270_p3;
reg   [4:0] select_ln242_1_reg_393;
wire   [63:0] zext_ln253_2_fu_324_p1;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln243_fu_278_p2;
wire    ap_loop_init;
reg   [4:0] cot_14_fu_66;
reg   [9:0] indvar_flatten6_fu_70;
wire   [9:0] select_ln242_2_fu_183_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
reg   [15:0] indvar_flatten18_fu_74;
wire   [15:0] add_ln241_fu_153_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln242_1_fu_177_p2;
wire   [0:0] icmp_ln243_fu_239_p2;
wire   [0:0] xor_ln241_fu_234_p2;
wire   [4:0] select_ln241_fu_227_p3;
wire   [0:0] and_ln241_fu_245_p2;
wire   [0:0] or_ln242_fu_257_p2;
wire   [4:0] add_ln242_fu_251_p2;
wire   [8:0] tmp_116_fu_308_p3;
wire   [8:0] zext_ln253_fu_315_p1;
wire   [8:0] add_ln253_fu_318_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_14_fu_66 = 5'd0;
//#0 indvar_flatten6_fu_70 = 10'd0;
//#0 indvar_flatten18_fu_74 = 16'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_62 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_62 <= add_ln243_fu_278_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_14_fu_66 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_14_fu_66 <= select_ln242_1_fu_270_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln241_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten18_fu_74 <= add_ln241_fu_153_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_74 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln241_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_70 <= select_ln242_2_fu_183_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln242_reg_381 <= icmp_ln242_fu_171_p2;
        select_ln242_1_reg_393 <= select_ln242_1_fu_270_p3;
        select_ln242_reg_388 <= select_ln242_fu_262_p3;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_74;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln241_fu_153_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 16'd1);

assign add_ln242_1_fu_177_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln242_fu_251_p2 = (select_ln241_fu_227_p3 + 5'd1);

assign add_ln243_fu_278_p2 = (select_ln242_fu_262_p3 + 5'd1);

assign add_ln253_fu_318_p2 = (tmp_116_fu_308_p3 + zext_ln253_fu_315_p1);

assign and_ln241_fu_245_p2 = (xor_ln241_fu_234_p2 & icmp_ln243_fu_239_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (weight_sm_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln253_2_fu_324_p1;

assign icmp_ln241_fu_159_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_171_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_239_p2 = ((cit_fu_62 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln242_fu_257_p2 = (icmp_ln242_reg_381 | and_ln241_fu_245_p2);

assign select_ln241_fu_227_p3 = ((icmp_ln242_reg_381[0:0] == 1'b1) ? 5'd0 : cot_14_fu_66);

assign select_ln242_1_fu_270_p3 = ((and_ln241_fu_245_p2[0:0] == 1'b1) ? add_ln242_fu_251_p2 : select_ln241_fu_227_p3);

assign select_ln242_2_fu_183_p3 = ((icmp_ln242_fu_171_p2[0:0] == 1'b1) ? 10'd1 : add_ln242_1_fu_177_p2);

assign select_ln242_fu_262_p3 = ((or_ln242_fu_257_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_62);

assign tmp_116_fu_308_p3 = {{select_ln242_1_reg_393}, {4'd0}};

assign weight_sm_din = dynamic_weight_arr_q0;

assign xor_ln241_fu_234_p2 = (icmp_ln242_reg_381 ^ 1'd1);

assign zext_ln253_2_fu_324_p1 = add_ln253_fu_318_p2;

assign zext_ln253_fu_315_p1 = select_ln242_reg_388;

endmodule //ATTN11_matmul_step1_cache_weight_33_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_sm_reshape_head3_dout,
        kq_sm_reshape_head3_num_data_valid,
        kq_sm_reshape_head3_fifo_cap,
        kq_sm_reshape_head3_empty_n,
        kq_sm_reshape_head3_read,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_we0,
        dynamic_weight_arr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [83:0] kq_sm_reshape_head3_dout;
input  [9:0] kq_sm_reshape_head3_num_data_valid;
input  [9:0] kq_sm_reshape_head3_fifo_cap;
input   kq_sm_reshape_head3_empty_n;
output   kq_sm_reshape_head3_read;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
output   dynamic_weight_arr_we0;
output  [83:0] dynamic_weight_arr_d0;

reg ap_idle;
reg kq_sm_reshape_head3_read;
reg dynamic_weight_arr_ce0;
reg dynamic_weight_arr_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln223_fu_133_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_sm_reshape_head3_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln233_fu_203_p2;
reg   [8:0] add_ln233_reg_286;
reg   [83:0] kq_sm_reshape_head3_read_reg_291;
wire   [63:0] zext_ln233_1_fu_241_p1;
reg   [4:0] cit_fu_54;
wire   [4:0] add_ln224_fu_211_p2;
wire    ap_loop_init;
reg   [4:0] cot_fu_58;
wire   [4:0] select_ln223_1_fu_183_p3;
reg   [8:0] indvar_flatten_fu_62;
wire   [8:0] add_ln223_1_fu_127_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln224_fu_169_p2;
wire   [4:0] add_ln223_fu_163_p2;
wire   [4:0] select_ln223_fu_175_p3;
wire   [8:0] tmp_fu_191_p3;
wire   [8:0] zext_ln233_fu_199_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 cit_fu_54 = 5'd0;
//#0 cot_fu_58 = 5'd0;
//#0 indvar_flatten_fu_62 = 9'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_54 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_54 <= add_ln224_fu_211_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_fu_58 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_fu_58 <= select_ln223_1_fu_183_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln223_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln223_1_fu_127_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln233_reg_286 <= add_ln233_fu_203_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        kq_sm_reshape_head3_read_reg_291 <= kq_sm_reshape_head3_dout;
    end
end

always @ (*) begin
    if (((icmp_ln223_fu_133_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head3_blk_n = kq_sm_reshape_head3_empty_n;
    end else begin
        kq_sm_reshape_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head3_read = 1'b1;
    end else begin
        kq_sm_reshape_head3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_1_fu_127_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln223_fu_163_p2 = (cot_fu_58 + 5'd1);

assign add_ln224_fu_211_p2 = (select_ln223_fu_175_p3 + 5'd1);

assign add_ln233_fu_203_p2 = (tmp_fu_191_p3 + zext_ln233_fu_199_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (kq_sm_reshape_head3_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln233_1_fu_241_p1;

assign dynamic_weight_arr_d0 = kq_sm_reshape_head3_read_reg_291;

assign icmp_ln223_fu_133_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_169_p2 = ((cit_fu_54 == 5'd16) ? 1'b1 : 1'b0);

assign select_ln223_1_fu_183_p3 = ((icmp_ln224_fu_169_p2[0:0] == 1'b1) ? add_ln223_fu_163_p2 : cot_fu_58);

assign select_ln223_fu_175_p3 = ((icmp_ln224_fu_169_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_54);

assign tmp_fu_191_p3 = {{select_ln223_1_fu_183_p3}, {4'd0}};

assign zext_ln233_1_fu_241_p1 = add_ln233_reg_286;

assign zext_ln233_fu_199_p1 = select_ln223_fu_175_p3;

endmodule //ATTN11_matmul_step1_cache_weight_Pipeline_COT_LOOP_CIT_LOOP
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
input  [83:0] dynamic_weight_arr_q0;

reg ap_idle;
reg weight_sm_write;
reg dynamic_weight_arr_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln241_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    weight_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln242_fu_171_p2;
reg   [0:0] icmp_ln242_reg_381;
wire   [4:0] select_ln242_fu_262_p3;
reg   [4:0] select_ln242_reg_388;
wire   [4:0] select_ln242_1_fu_270_p3;
reg   [4:0] select_ln242_1_reg_393;
wire   [63:0] zext_ln253_1_fu_324_p1;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln243_fu_278_p2;
wire    ap_loop_init;
reg   [4:0] cot_fu_66;
reg   [9:0] indvar_flatten6_fu_70;
wire   [9:0] select_ln242_2_fu_183_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
reg   [15:0] indvar_flatten18_fu_74;
wire   [15:0] add_ln241_fu_153_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln242_1_fu_177_p2;
wire   [0:0] icmp_ln243_fu_239_p2;
wire   [0:0] xor_ln241_fu_234_p2;
wire   [4:0] select_ln241_fu_227_p3;
wire   [0:0] and_ln241_fu_245_p2;
wire   [0:0] or_ln242_fu_257_p2;
wire   [4:0] add_ln242_fu_251_p2;
wire   [8:0] tmp_118_fu_308_p3;
wire   [8:0] zext_ln253_fu_315_p1;
wire   [8:0] add_ln253_fu_318_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten6_fu_70 = 10'd0;
//#0 indvar_flatten18_fu_74 = 16'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_62 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_62 <= add_ln243_fu_278_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_fu_66 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_fu_66 <= select_ln242_1_fu_270_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln241_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten18_fu_74 <= add_ln241_fu_153_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_74 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln241_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_70 <= select_ln242_2_fu_183_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln242_reg_381 <= icmp_ln242_fu_171_p2;
        select_ln242_1_reg_393 <= select_ln242_1_fu_270_p3;
        select_ln242_reg_388 <= select_ln242_fu_262_p3;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_74;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln241_fu_153_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 16'd1);

assign add_ln242_1_fu_177_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln242_fu_251_p2 = (select_ln241_fu_227_p3 + 5'd1);

assign add_ln243_fu_278_p2 = (select_ln242_fu_262_p3 + 5'd1);

assign add_ln253_fu_318_p2 = (tmp_118_fu_308_p3 + zext_ln253_fu_315_p1);

assign and_ln241_fu_245_p2 = (xor_ln241_fu_234_p2 & icmp_ln243_fu_239_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (weight_sm_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln253_1_fu_324_p1;

assign icmp_ln241_fu_159_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_171_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_239_p2 = ((cit_fu_62 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln242_fu_257_p2 = (icmp_ln242_reg_381 | and_ln241_fu_245_p2);

assign select_ln241_fu_227_p3 = ((icmp_ln242_reg_381[0:0] == 1'b1) ? 5'd0 : cot_fu_66);

assign select_ln242_1_fu_270_p3 = ((and_ln241_fu_245_p2[0:0] == 1'b1) ? add_ln242_fu_251_p2 : select_ln241_fu_227_p3);

assign select_ln242_2_fu_183_p3 = ((icmp_ln242_fu_171_p2[0:0] == 1'b1) ? 10'd1 : add_ln242_1_fu_177_p2);

assign select_ln242_fu_262_p3 = ((or_ln242_fu_257_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_62);

assign tmp_118_fu_308_p3 = {{select_ln242_1_reg_393}, {4'd0}};

assign weight_sm_din = dynamic_weight_arr_q0;

assign xor_ln241_fu_234_p2 = (icmp_ln242_reg_381 ^ 1'd1);

assign zext_ln253_1_fu_324_p1 = add_ln253_fu_318_p2;

assign zext_ln253_fu_315_p1 = select_ln242_reg_388;

endmodule //ATTN11_matmul_step1_cache_weight_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vq_sm_transpose_head3_dout,
        vq_sm_transpose_head3_num_data_valid,
        vq_sm_transpose_head3_fifo_cap,
        vq_sm_transpose_head3_empty_n,
        vq_sm_transpose_head3_read,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [83:0] vq_sm_transpose_head3_dout;
input  [9:0] vq_sm_transpose_head3_num_data_valid;
input  [9:0] vq_sm_transpose_head3_fifo_cap;
input   vq_sm_transpose_head3_empty_n;
output   vq_sm_transpose_head3_read;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg vq_sm_transpose_head3_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [8:0] dynamic_weight_arr_address0;
reg    dynamic_weight_arr_ce0;
reg    dynamic_weight_arr_we0;
wire   [83:0] dynamic_weight_arr_q0;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_idle;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head3_read;
wire   [8:0] grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0;
wire   [83:0] grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready;
wire   [83:0] grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
wire   [8:0] grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
reg    grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg = 1'b0;
//#0 grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg = 1'b0;
end

ATTN11_matmul_step1_cache_weight_28_dynamic_weight_arr_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_address0),
    .ce0(dynamic_weight_arr_ce0),
    .we0(dynamic_weight_arr_we0),
    .d0(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0),
    .q0(dynamic_weight_arr_q0)
);

ATTN11_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready),
    .vq_sm_transpose_head3_dout(vq_sm_transpose_head3_dout),
    .vq_sm_transpose_head3_num_data_valid(10'd0),
    .vq_sm_transpose_head3_fifo_cap(10'd0),
    .vq_sm_transpose_head3_empty_n(vq_sm_transpose_head3_empty_n),
    .vq_sm_transpose_head3_read(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head3_read),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_we0(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0),
    .dynamic_weight_arr_d0(grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0)
);

ATTN11_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready),
    .weight_sm_din(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din),
    .weight_sm_num_data_valid(3'd0),
    .weight_sm_fifo_cap(3'd0),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_q0(dynamic_weight_arr_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call5) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0;
    end else begin
        dynamic_weight_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_we0 = grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vq_sm_transpose_head3_read = grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head3_read;
    end else begin
        vq_sm_transpose_head3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_sm_write = grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start = grp_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg;

assign grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start = grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;

assign start_out = real_start;

assign weight_sm_din = grp_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;

endmodule //ATTN11_matmul_step1_cache_weight_transposed
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_18 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_num_data_valid,
        vq_sm_transpose_head1_fifo_cap,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [83:0] vq_sm_transpose_head1_dout;
input  [9:0] vq_sm_transpose_head1_num_data_valid;
input  [9:0] vq_sm_transpose_head1_fifo_cap;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg vq_sm_transpose_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [8:0] dynamic_weight_arr_address0;
reg    dynamic_weight_arr_ce0;
reg    dynamic_weight_arr_we0;
wire   [83:0] dynamic_weight_arr_q0;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_idle;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head1_read;
wire   [8:0] grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0;
wire   [83:0] grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready;
wire   [83:0] grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
wire   [8:0] grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
reg    grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg = 1'b0;
//#0 grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg = 1'b0;
end

ATTN11_matmul_step1_cache_weight_28_dynamic_weight_arr_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_address0),
    .ce0(dynamic_weight_arr_ce0),
    .we0(dynamic_weight_arr_we0),
    .d0(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0),
    .q0(dynamic_weight_arr_q0)
);

ATTN11_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head1_dout),
    .vq_sm_transpose_head1_num_data_valid(10'd0),
    .vq_sm_transpose_head1_fifo_cap(10'd0),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head1_empty_n),
    .vq_sm_transpose_head1_read(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head1_read),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_we0(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0),
    .dynamic_weight_arr_d0(grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0)
);

ATTN11_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready),
    .weight_sm_din(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din),
    .weight_sm_num_data_valid(3'd0),
    .weight_sm_fifo_cap(3'd0),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_q0(dynamic_weight_arr_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call5) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0;
    end else begin
        dynamic_weight_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_we0 = grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vq_sm_transpose_head1_read = grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head1_read;
    end else begin
        vq_sm_transpose_head1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_sm_write = grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start = grp_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg;

assign grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start = grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;

assign start_out = real_start;

assign weight_sm_din = grp_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_18
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_num_data_valid,
        vq_sm_transpose_head1_fifo_cap,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_we0,
        dynamic_weight_arr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [83:0] vq_sm_transpose_head1_dout;
input  [9:0] vq_sm_transpose_head1_num_data_valid;
input  [9:0] vq_sm_transpose_head1_fifo_cap;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
output   dynamic_weight_arr_we0;
output  [83:0] dynamic_weight_arr_d0;

reg ap_idle;
reg vq_sm_transpose_head1_read;
reg dynamic_weight_arr_ce0;
reg dynamic_weight_arr_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln286_fu_135_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_sm_transpose_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln286_fu_165_p3;
reg   [4:0] select_ln286_reg_307;
wire   [3:0] trunc_ln286_fu_173_p1;
reg   [3:0] trunc_ln286_reg_312;
wire   [4:0] select_ln286_2_fu_177_p3;
reg   [4:0] select_ln286_2_reg_317;
wire   [8:0] add_ln296_fu_254_p2;
reg   [8:0] add_ln296_reg_322;
reg   [83:0] vq_sm_transpose_head1_read_reg_327;
wire   [63:0] zext_ln296_6_fu_262_p1;
reg   [4:0] cot_fu_56;
wire   [4:0] add_ln287_fu_185_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [4:0] cit_fu_60;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_64;
wire   [8:0] add_ln286_2_fu_129_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln287_fu_159_p2;
wire   [4:0] add_ln286_fu_153_p2;
wire   [6:0] tmp_110_fu_237_p3;
wire   [8:0] tmp_fu_230_p3;
wire   [8:0] zext_ln296_5_fu_244_p1;
wire   [8:0] sub_ln296_fu_248_p2;
wire   [8:0] zext_ln296_fu_227_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 cot_fu_56 = 5'd0;
//#0 cit_fu_60 = 5'd0;
//#0 indvar_flatten_fu_64 = 9'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            cit_fu_60 <= select_ln286_2_fu_177_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            cit_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            cot_fu_56 <= add_ln287_fu_185_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            cot_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_64 <= add_ln286_2_fu_129_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln296_reg_322 <= add_ln296_fu_254_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln286_2_reg_317 <= select_ln286_2_fu_177_p3;
        select_ln286_reg_307 <= select_ln286_fu_165_p3;
        trunc_ln286_reg_312 <= trunc_ln286_fu_173_p1;
        vq_sm_transpose_head1_read_reg_327 <= vq_sm_transpose_head1_dout;
    end
end

always @ (*) begin
    if (((icmp_ln286_fu_135_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_blk_n = vq_sm_transpose_head1_empty_n;
    end else begin
        vq_sm_transpose_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_read = 1'b1;
    end else begin
        vq_sm_transpose_head1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln286_2_fu_129_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln286_fu_153_p2 = (ap_sig_allocacmp_cit_load + 5'd1);

assign add_ln287_fu_185_p2 = (select_ln286_fu_165_p3 + 5'd1);

assign add_ln296_fu_254_p2 = (sub_ln296_fu_248_p2 + zext_ln296_fu_227_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (vq_sm_transpose_head1_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln296_6_fu_262_p1;

assign dynamic_weight_arr_d0 = vq_sm_transpose_head1_read_reg_327;

assign icmp_ln286_fu_135_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_159_p2 = ((ap_sig_allocacmp_cot_load == 5'd16) ? 1'b1 : 1'b0);

assign select_ln286_2_fu_177_p3 = ((icmp_ln287_fu_159_p2[0:0] == 1'b1) ? add_ln286_fu_153_p2 : ap_sig_allocacmp_cit_load);

assign select_ln286_fu_165_p3 = ((icmp_ln287_fu_159_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign sub_ln296_fu_248_p2 = (tmp_fu_230_p3 - zext_ln296_5_fu_244_p1);

assign tmp_110_fu_237_p3 = {{select_ln286_reg_307}, {2'd0}};

assign tmp_fu_230_p3 = {{trunc_ln286_reg_312}, {5'd0}};

assign trunc_ln286_fu_173_p1 = select_ln286_fu_165_p3[3:0];

assign zext_ln296_5_fu_244_p1 = tmp_110_fu_237_p3;

assign zext_ln296_6_fu_262_p1 = add_ln296_reg_322;

assign zext_ln296_fu_227_p1 = select_ln286_2_reg_317;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_18_Pipeline_CIT_LOOP_COT_LOOP
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
input  [83:0] dynamic_weight_arr_q0;

reg ap_idle;
reg weight_sm_write;
reg dynamic_weight_arr_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln304_fu_161_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    weight_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln305_fu_173_p2;
reg   [0:0] icmp_ln305_reg_403;
wire   [4:0] select_ln305_fu_264_p3;
reg   [4:0] select_ln305_reg_410;
wire   [4:0] select_ln305_3_fu_272_p3;
reg   [4:0] select_ln305_3_reg_415;
wire   [3:0] trunc_ln316_fu_280_p1;
reg   [3:0] trunc_ln316_reg_420;
wire   [8:0] add_ln316_fu_341_p2;
reg   [8:0] add_ln316_reg_425;
wire   [63:0] zext_ln316_6_fu_347_p1;
reg   [4:0] cit_fu_64;
wire   [4:0] add_ln306_fu_284_p2;
wire    ap_loop_init;
reg   [4:0] cot_8_fu_68;
reg   [9:0] indvar_flatten6_fu_72;
wire   [9:0] select_ln305_4_fu_185_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
reg   [15:0] indvar_flatten18_fu_76;
wire   [15:0] add_ln304_fu_155_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln305_2_fu_179_p2;
wire   [0:0] icmp_ln306_fu_241_p2;
wire   [0:0] xor_ln304_fu_236_p2;
wire   [4:0] select_ln304_fu_229_p3;
wire   [0:0] and_ln304_fu_247_p2;
wire   [0:0] or_ln305_fu_259_p2;
wire   [4:0] add_ln305_fu_253_p2;
wire   [6:0] tmp_112_fu_321_p3;
wire   [8:0] tmp_111_fu_314_p3;
wire   [8:0] zext_ln316_fu_328_p1;
wire   [8:0] sub_ln316_fu_332_p2;
wire   [8:0] zext_ln316_5_fu_338_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 cit_fu_64 = 5'd0;
//#0 cot_8_fu_68 = 5'd0;
//#0 indvar_flatten6_fu_72 = 10'd0;
//#0 indvar_flatten18_fu_76 = 16'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_64 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_64 <= add_ln306_fu_284_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_8_fu_68 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_8_fu_68 <= select_ln305_3_fu_272_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten18_fu_76 <= add_ln304_fu_155_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_76 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_72 <= select_ln305_4_fu_185_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_72 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln316_reg_425 <= add_ln316_fu_341_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln305_reg_403 <= icmp_ln305_fu_173_p2;
        select_ln305_3_reg_415 <= select_ln305_3_fu_272_p3;
        select_ln305_reg_410 <= select_ln305_fu_264_p3;
        trunc_ln316_reg_420 <= trunc_ln316_fu_280_p1;
    end
end

always @ (*) begin
    if (((icmp_ln304_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln304_fu_155_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 16'd1);

assign add_ln305_2_fu_179_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln305_fu_253_p2 = (select_ln304_fu_229_p3 + 5'd1);

assign add_ln306_fu_284_p2 = (select_ln305_fu_264_p3 + 5'd1);

assign add_ln316_fu_341_p2 = (sub_ln316_fu_332_p2 + zext_ln316_5_fu_338_p1);

assign and_ln304_fu_247_p2 = (xor_ln304_fu_236_p2 & icmp_ln306_fu_241_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (weight_sm_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln316_6_fu_347_p1;

assign icmp_ln304_fu_161_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_173_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_241_p2 = ((cit_fu_64 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln305_fu_259_p2 = (icmp_ln305_reg_403 | and_ln304_fu_247_p2);

assign select_ln304_fu_229_p3 = ((icmp_ln305_reg_403[0:0] == 1'b1) ? 5'd0 : cot_8_fu_68);

assign select_ln305_3_fu_272_p3 = ((and_ln304_fu_247_p2[0:0] == 1'b1) ? add_ln305_fu_253_p2 : select_ln304_fu_229_p3);

assign select_ln305_4_fu_185_p3 = ((icmp_ln305_fu_173_p2[0:0] == 1'b1) ? 10'd1 : add_ln305_2_fu_179_p2);

assign select_ln305_fu_264_p3 = ((or_ln305_fu_259_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_64);

assign sub_ln316_fu_332_p2 = (tmp_111_fu_314_p3 - zext_ln316_fu_328_p1);

assign tmp_111_fu_314_p3 = {{trunc_ln316_reg_420}, {5'd0}};

assign tmp_112_fu_321_p3 = {{select_ln305_3_reg_415}, {2'd0}};

assign trunc_ln316_fu_280_p1 = select_ln305_3_fu_272_p3[3:0];

assign weight_sm_din = dynamic_weight_arr_q0;

assign xor_ln304_fu_236_p2 = (icmp_ln305_reg_403 ^ 1'd1);

assign zext_ln316_5_fu_338_p1 = select_ln305_reg_410;

assign zext_ln316_6_fu_347_p1 = add_ln316_reg_425;

assign zext_ln316_fu_328_p1 = tmp_112_fu_321_p3;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_18_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_23 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vq_sm_transpose_head2_dout,
        vq_sm_transpose_head2_num_data_valid,
        vq_sm_transpose_head2_fifo_cap,
        vq_sm_transpose_head2_empty_n,
        vq_sm_transpose_head2_read,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [83:0] vq_sm_transpose_head2_dout;
input  [9:0] vq_sm_transpose_head2_num_data_valid;
input  [9:0] vq_sm_transpose_head2_fifo_cap;
input   vq_sm_transpose_head2_empty_n;
output   vq_sm_transpose_head2_read;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg vq_sm_transpose_head2_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [8:0] dynamic_weight_arr_address0;
reg    dynamic_weight_arr_ce0;
reg    dynamic_weight_arr_we0;
wire   [83:0] dynamic_weight_arr_q0;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_idle;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head2_read;
wire   [8:0] grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0;
wire   [83:0] grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready;
wire   [83:0] grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
wire   [8:0] grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
wire    grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
reg    grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg = 1'b0;
//#0 grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg = 1'b0;
end

ATTN11_matmul_step1_cache_weight_28_dynamic_weight_arr_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_address0),
    .ce0(dynamic_weight_arr_ce0),
    .we0(dynamic_weight_arr_we0),
    .d0(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0),
    .q0(dynamic_weight_arr_q0)
);

ATTN11_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready),
    .vq_sm_transpose_head2_dout(vq_sm_transpose_head2_dout),
    .vq_sm_transpose_head2_num_data_valid(10'd0),
    .vq_sm_transpose_head2_fifo_cap(10'd0),
    .vq_sm_transpose_head2_empty_n(vq_sm_transpose_head2_empty_n),
    .vq_sm_transpose_head2_read(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head2_read),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_we0(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0),
    .dynamic_weight_arr_d0(grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_d0)
);

ATTN11_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start),
    .ap_done(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done),
    .ap_idle(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_idle),
    .ap_ready(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready),
    .weight_sm_din(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din),
    .weight_sm_num_data_valid(3'd0),
    .weight_sm_fifo_cap(3'd0),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write),
    .dynamic_weight_arr_address0(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0),
    .dynamic_weight_arr_ce0(grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0),
    .dynamic_weight_arr_q0(dynamic_weight_arr_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call5) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_ready == 1'b1)) begin
            grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_address0 = grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_address0;
    end else begin
        dynamic_weight_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_dynamic_weight_arr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_ce0 = grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_ce0;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dynamic_weight_arr_we0 = grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_dynamic_weight_arr_we0;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vq_sm_transpose_head2_read = grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_vq_sm_transpose_head2_read;
    end else begin
        vq_sm_transpose_head2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_sm_write = grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_write;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start = grp_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP_fu_34_ap_start_reg;

assign grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start = grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_ap_start_reg;

assign start_out = real_start;

assign weight_sm_din = grp_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2_fu_42_weight_sm_din;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_23
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_sm_transpose_head2_dout,
        vq_sm_transpose_head2_num_data_valid,
        vq_sm_transpose_head2_fifo_cap,
        vq_sm_transpose_head2_empty_n,
        vq_sm_transpose_head2_read,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_we0,
        dynamic_weight_arr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [83:0] vq_sm_transpose_head2_dout;
input  [9:0] vq_sm_transpose_head2_num_data_valid;
input  [9:0] vq_sm_transpose_head2_fifo_cap;
input   vq_sm_transpose_head2_empty_n;
output   vq_sm_transpose_head2_read;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
output   dynamic_weight_arr_we0;
output  [83:0] dynamic_weight_arr_d0;

reg ap_idle;
reg vq_sm_transpose_head2_read;
reg dynamic_weight_arr_ce0;
reg dynamic_weight_arr_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln286_fu_135_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_sm_transpose_head2_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln286_fu_165_p3;
reg   [4:0] select_ln286_reg_307;
wire   [3:0] trunc_ln286_fu_173_p1;
reg   [3:0] trunc_ln286_reg_312;
wire   [4:0] select_ln286_1_fu_177_p3;
reg   [4:0] select_ln286_1_reg_317;
wire   [8:0] add_ln296_fu_254_p2;
reg   [8:0] add_ln296_reg_322;
reg   [83:0] vq_sm_transpose_head2_read_reg_327;
wire   [63:0] zext_ln296_4_fu_262_p1;
reg   [4:0] cot_fu_56;
wire   [4:0] add_ln287_fu_185_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [4:0] cit_fu_60;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_64;
wire   [8:0] add_ln286_1_fu_129_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln287_fu_159_p2;
wire   [4:0] add_ln286_fu_153_p2;
wire   [6:0] tmp_107_fu_237_p3;
wire   [8:0] tmp_fu_230_p3;
wire   [8:0] zext_ln296_3_fu_244_p1;
wire   [8:0] sub_ln296_fu_248_p2;
wire   [8:0] zext_ln296_fu_227_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 cot_fu_56 = 5'd0;
//#0 cit_fu_60 = 5'd0;
//#0 indvar_flatten_fu_64 = 9'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            cit_fu_60 <= select_ln286_1_fu_177_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            cit_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            cot_fu_56 <= add_ln287_fu_185_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            cot_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_64 <= add_ln286_1_fu_129_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln296_reg_322 <= add_ln296_fu_254_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln286_1_reg_317 <= select_ln286_1_fu_177_p3;
        select_ln286_reg_307 <= select_ln286_fu_165_p3;
        trunc_ln286_reg_312 <= trunc_ln286_fu_173_p1;
        vq_sm_transpose_head2_read_reg_327 <= vq_sm_transpose_head2_dout;
    end
end

always @ (*) begin
    if (((icmp_ln286_fu_135_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head2_blk_n = vq_sm_transpose_head2_empty_n;
    end else begin
        vq_sm_transpose_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head2_read = 1'b1;
    end else begin
        vq_sm_transpose_head2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln286_1_fu_129_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln286_fu_153_p2 = (ap_sig_allocacmp_cit_load + 5'd1);

assign add_ln287_fu_185_p2 = (select_ln286_fu_165_p3 + 5'd1);

assign add_ln296_fu_254_p2 = (sub_ln296_fu_248_p2 + zext_ln296_fu_227_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (vq_sm_transpose_head2_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln296_4_fu_262_p1;

assign dynamic_weight_arr_d0 = vq_sm_transpose_head2_read_reg_327;

assign icmp_ln286_fu_135_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_159_p2 = ((ap_sig_allocacmp_cot_load == 5'd16) ? 1'b1 : 1'b0);

assign select_ln286_1_fu_177_p3 = ((icmp_ln287_fu_159_p2[0:0] == 1'b1) ? add_ln286_fu_153_p2 : ap_sig_allocacmp_cit_load);

assign select_ln286_fu_165_p3 = ((icmp_ln287_fu_159_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign sub_ln296_fu_248_p2 = (tmp_fu_230_p3 - zext_ln296_3_fu_244_p1);

assign tmp_107_fu_237_p3 = {{select_ln286_reg_307}, {2'd0}};

assign tmp_fu_230_p3 = {{trunc_ln286_reg_312}, {5'd0}};

assign trunc_ln286_fu_173_p1 = select_ln286_fu_165_p3[3:0];

assign zext_ln296_3_fu_244_p1 = tmp_107_fu_237_p3;

assign zext_ln296_4_fu_262_p1 = add_ln296_reg_322;

assign zext_ln296_fu_227_p1 = select_ln286_1_reg_317;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_23_Pipeline_CIT_LOOP_COT_LOOP
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
input  [83:0] dynamic_weight_arr_q0;

reg ap_idle;
reg weight_sm_write;
reg dynamic_weight_arr_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln304_fu_161_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    weight_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln305_fu_173_p2;
reg   [0:0] icmp_ln305_reg_403;
wire   [4:0] select_ln305_fu_264_p3;
reg   [4:0] select_ln305_reg_410;
wire   [4:0] select_ln305_1_fu_272_p3;
reg   [4:0] select_ln305_1_reg_415;
wire   [3:0] trunc_ln316_fu_280_p1;
reg   [3:0] trunc_ln316_reg_420;
wire   [8:0] add_ln316_fu_341_p2;
reg   [8:0] add_ln316_reg_425;
wire   [63:0] zext_ln316_4_fu_347_p1;
reg   [4:0] cit_fu_64;
wire   [4:0] add_ln306_fu_284_p2;
wire    ap_loop_init;
reg   [4:0] cot_7_fu_68;
reg   [9:0] indvar_flatten6_fu_72;
wire   [9:0] select_ln305_2_fu_185_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
reg   [15:0] indvar_flatten18_fu_76;
wire   [15:0] add_ln304_fu_155_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln305_1_fu_179_p2;
wire   [0:0] icmp_ln306_fu_241_p2;
wire   [0:0] xor_ln304_fu_236_p2;
wire   [4:0] select_ln304_fu_229_p3;
wire   [0:0] and_ln304_fu_247_p2;
wire   [0:0] or_ln305_fu_259_p2;
wire   [4:0] add_ln305_fu_253_p2;
wire   [6:0] tmp_109_fu_321_p3;
wire   [8:0] tmp_108_fu_314_p3;
wire   [8:0] zext_ln316_fu_328_p1;
wire   [8:0] sub_ln316_fu_332_p2;
wire   [8:0] zext_ln316_3_fu_338_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 cit_fu_64 = 5'd0;
//#0 cot_7_fu_68 = 5'd0;
//#0 indvar_flatten6_fu_72 = 10'd0;
//#0 indvar_flatten18_fu_76 = 16'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_64 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_64 <= add_ln306_fu_284_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_7_fu_68 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_7_fu_68 <= select_ln305_1_fu_272_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten18_fu_76 <= add_ln304_fu_155_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_76 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_72 <= select_ln305_2_fu_185_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_72 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln316_reg_425 <= add_ln316_fu_341_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln305_reg_403 <= icmp_ln305_fu_173_p2;
        select_ln305_1_reg_415 <= select_ln305_1_fu_272_p3;
        select_ln305_reg_410 <= select_ln305_fu_264_p3;
        trunc_ln316_reg_420 <= trunc_ln316_fu_280_p1;
    end
end

always @ (*) begin
    if (((icmp_ln304_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln304_fu_155_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 16'd1);

assign add_ln305_1_fu_179_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln305_fu_253_p2 = (select_ln304_fu_229_p3 + 5'd1);

assign add_ln306_fu_284_p2 = (select_ln305_fu_264_p3 + 5'd1);

assign add_ln316_fu_341_p2 = (sub_ln316_fu_332_p2 + zext_ln316_3_fu_338_p1);

assign and_ln304_fu_247_p2 = (xor_ln304_fu_236_p2 & icmp_ln306_fu_241_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (weight_sm_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln316_4_fu_347_p1;

assign icmp_ln304_fu_161_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_173_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_241_p2 = ((cit_fu_64 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln305_fu_259_p2 = (icmp_ln305_reg_403 | and_ln304_fu_247_p2);

assign select_ln304_fu_229_p3 = ((icmp_ln305_reg_403[0:0] == 1'b1) ? 5'd0 : cot_7_fu_68);

assign select_ln305_1_fu_272_p3 = ((and_ln304_fu_247_p2[0:0] == 1'b1) ? add_ln305_fu_253_p2 : select_ln304_fu_229_p3);

assign select_ln305_2_fu_185_p3 = ((icmp_ln305_fu_173_p2[0:0] == 1'b1) ? 10'd1 : add_ln305_1_fu_179_p2);

assign select_ln305_fu_264_p3 = ((or_ln305_fu_259_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_64);

assign sub_ln316_fu_332_p2 = (tmp_108_fu_314_p3 - zext_ln316_fu_328_p1);

assign tmp_108_fu_314_p3 = {{trunc_ln316_reg_420}, {5'd0}};

assign tmp_109_fu_321_p3 = {{select_ln305_1_reg_415}, {2'd0}};

assign trunc_ln316_fu_280_p1 = select_ln305_1_fu_272_p3[3:0];

assign weight_sm_din = dynamic_weight_arr_q0;

assign xor_ln304_fu_236_p2 = (icmp_ln305_reg_403 ^ 1'd1);

assign zext_ln316_3_fu_338_p1 = select_ln305_reg_410;

assign zext_ln316_4_fu_347_p1 = add_ln316_reg_425;

assign zext_ln316_fu_328_p1 = tmp_109_fu_321_p3;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_23_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_sm_transpose_head3_dout,
        vq_sm_transpose_head3_num_data_valid,
        vq_sm_transpose_head3_fifo_cap,
        vq_sm_transpose_head3_empty_n,
        vq_sm_transpose_head3_read,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_we0,
        dynamic_weight_arr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [83:0] vq_sm_transpose_head3_dout;
input  [9:0] vq_sm_transpose_head3_num_data_valid;
input  [9:0] vq_sm_transpose_head3_fifo_cap;
input   vq_sm_transpose_head3_empty_n;
output   vq_sm_transpose_head3_read;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
output   dynamic_weight_arr_we0;
output  [83:0] dynamic_weight_arr_d0;

reg ap_idle;
reg vq_sm_transpose_head3_read;
reg dynamic_weight_arr_ce0;
reg dynamic_weight_arr_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln286_fu_135_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_sm_transpose_head3_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln286_fu_165_p3;
reg   [4:0] select_ln286_reg_307;
wire   [3:0] trunc_ln286_fu_173_p1;
reg   [3:0] trunc_ln286_reg_312;
wire   [4:0] select_ln286_1_fu_177_p3;
reg   [4:0] select_ln286_1_reg_317;
wire   [8:0] add_ln296_fu_254_p2;
reg   [8:0] add_ln296_reg_322;
reg   [83:0] vq_sm_transpose_head3_read_reg_327;
wire   [63:0] zext_ln296_2_fu_262_p1;
reg   [4:0] cot_fu_56;
wire   [4:0] add_ln287_fu_185_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [4:0] cit_fu_60;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_64;
wire   [8:0] add_ln286_1_fu_129_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln287_fu_159_p2;
wire   [4:0] add_ln286_fu_153_p2;
wire   [6:0] tmp_113_fu_237_p3;
wire   [8:0] tmp_fu_230_p3;
wire   [8:0] zext_ln296_1_fu_244_p1;
wire   [8:0] sub_ln296_fu_248_p2;
wire   [8:0] zext_ln296_fu_227_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 cot_fu_56 = 5'd0;
//#0 cit_fu_60 = 5'd0;
//#0 indvar_flatten_fu_64 = 9'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            cit_fu_60 <= select_ln286_1_fu_177_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            cit_fu_60 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            cot_fu_56 <= add_ln287_fu_185_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            cot_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln286_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_64 <= add_ln286_1_fu_129_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln296_reg_322 <= add_ln296_fu_254_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln286_1_reg_317 <= select_ln286_1_fu_177_p3;
        select_ln286_reg_307 <= select_ln286_fu_165_p3;
        trunc_ln286_reg_312 <= trunc_ln286_fu_173_p1;
        vq_sm_transpose_head3_read_reg_327 <= vq_sm_transpose_head3_dout;
    end
end

always @ (*) begin
    if (((icmp_ln286_fu_135_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dynamic_weight_arr_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head3_blk_n = vq_sm_transpose_head3_empty_n;
    end else begin
        vq_sm_transpose_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head3_read = 1'b1;
    end else begin
        vq_sm_transpose_head3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln286_1_fu_129_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln286_fu_153_p2 = (ap_sig_allocacmp_cit_load + 5'd1);

assign add_ln287_fu_185_p2 = (select_ln286_fu_165_p3 + 5'd1);

assign add_ln296_fu_254_p2 = (sub_ln296_fu_248_p2 + zext_ln296_fu_227_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (vq_sm_transpose_head3_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln296_2_fu_262_p1;

assign dynamic_weight_arr_d0 = vq_sm_transpose_head3_read_reg_327;

assign icmp_ln286_fu_135_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_159_p2 = ((ap_sig_allocacmp_cot_load == 5'd16) ? 1'b1 : 1'b0);

assign select_ln286_1_fu_177_p3 = ((icmp_ln287_fu_159_p2[0:0] == 1'b1) ? add_ln286_fu_153_p2 : ap_sig_allocacmp_cit_load);

assign select_ln286_fu_165_p3 = ((icmp_ln287_fu_159_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign sub_ln296_fu_248_p2 = (tmp_fu_230_p3 - zext_ln296_1_fu_244_p1);

assign tmp_113_fu_237_p3 = {{select_ln286_reg_307}, {2'd0}};

assign tmp_fu_230_p3 = {{trunc_ln286_reg_312}, {5'd0}};

assign trunc_ln286_fu_173_p1 = select_ln286_fu_165_p3[3:0];

assign zext_ln296_1_fu_244_p1 = tmp_113_fu_237_p3;

assign zext_ln296_2_fu_262_p1 = add_ln296_reg_322;

assign zext_ln296_fu_227_p1 = select_ln286_1_reg_317;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_Pipeline_CIT_LOOP_COT_LOOP
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_sm_din,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_full_n,
        weight_sm_write,
        dynamic_weight_arr_address0,
        dynamic_weight_arr_ce0,
        dynamic_weight_arr_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] weight_sm_din;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_full_n;
output   weight_sm_write;
output  [8:0] dynamic_weight_arr_address0;
output   dynamic_weight_arr_ce0;
input  [83:0] dynamic_weight_arr_q0;

reg ap_idle;
reg weight_sm_write;
reg dynamic_weight_arr_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln304_fu_161_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    weight_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln305_fu_173_p2;
reg   [0:0] icmp_ln305_reg_403;
wire   [4:0] select_ln305_fu_264_p3;
reg   [4:0] select_ln305_reg_410;
wire   [4:0] select_ln305_1_fu_272_p3;
reg   [4:0] select_ln305_1_reg_415;
wire   [3:0] trunc_ln316_fu_280_p1;
reg   [3:0] trunc_ln316_reg_420;
wire   [8:0] add_ln316_fu_341_p2;
reg   [8:0] add_ln316_reg_425;
wire   [63:0] zext_ln316_2_fu_347_p1;
reg   [4:0] cit_fu_64;
wire   [4:0] add_ln306_fu_284_p2;
wire    ap_loop_init;
reg   [4:0] cot_9_fu_68;
reg   [9:0] indvar_flatten6_fu_72;
wire   [9:0] select_ln305_2_fu_185_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
reg   [15:0] indvar_flatten18_fu_76;
wire   [15:0] add_ln304_fu_155_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten18_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln305_1_fu_179_p2;
wire   [0:0] icmp_ln306_fu_241_p2;
wire   [0:0] xor_ln304_fu_236_p2;
wire   [4:0] select_ln304_fu_229_p3;
wire   [0:0] and_ln304_fu_247_p2;
wire   [0:0] or_ln305_fu_259_p2;
wire   [4:0] add_ln305_fu_253_p2;
wire   [6:0] tmp_115_fu_321_p3;
wire   [8:0] tmp_114_fu_314_p3;
wire   [8:0] zext_ln316_fu_328_p1;
wire   [8:0] sub_ln316_fu_332_p2;
wire   [8:0] zext_ln316_1_fu_338_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 cit_fu_64 = 5'd0;
//#0 cot_9_fu_68 = 5'd0;
//#0 indvar_flatten6_fu_72 = 10'd0;
//#0 indvar_flatten18_fu_76 = 16'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cit_fu_64 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cit_fu_64 <= add_ln306_fu_284_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            cot_9_fu_68 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            cot_9_fu_68 <= select_ln305_1_fu_272_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten18_fu_76 <= add_ln304_fu_155_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten18_fu_76 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_72 <= select_ln305_2_fu_185_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_72 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln316_reg_425 <= add_ln316_fu_341_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln305_reg_403 <= icmp_ln305_fu_173_p2;
        select_ln305_1_reg_415 <= select_ln305_1_fu_272_p3;
        select_ln305_reg_410 <= select_ln305_fu_264_p3;
        trunc_ln316_reg_420 <= trunc_ln316_fu_280_p1;
    end
end

always @ (*) begin
    if (((icmp_ln304_fu_161_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten18_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten18_load = indvar_flatten18_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dynamic_weight_arr_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln304_fu_155_p2 = (ap_sig_allocacmp_indvar_flatten18_load + 16'd1);

assign add_ln305_1_fu_179_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln305_fu_253_p2 = (select_ln304_fu_229_p3 + 5'd1);

assign add_ln306_fu_284_p2 = (select_ln305_fu_264_p3 + 5'd1);

assign add_ln316_fu_341_p2 = (sub_ln316_fu_332_p2 + zext_ln316_1_fu_338_p1);

assign and_ln304_fu_247_p2 = (xor_ln304_fu_236_p2 & icmp_ln306_fu_241_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (weight_sm_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dynamic_weight_arr_address0 = zext_ln316_2_fu_347_p1;

assign icmp_ln304_fu_161_p2 = ((ap_sig_allocacmp_indvar_flatten18_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_173_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_241_p2 = ((cit_fu_64 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln305_fu_259_p2 = (icmp_ln305_reg_403 | and_ln304_fu_247_p2);

assign select_ln304_fu_229_p3 = ((icmp_ln305_reg_403[0:0] == 1'b1) ? 5'd0 : cot_9_fu_68);

assign select_ln305_1_fu_272_p3 = ((and_ln304_fu_247_p2[0:0] == 1'b1) ? add_ln305_fu_253_p2 : select_ln304_fu_229_p3);

assign select_ln305_2_fu_185_p3 = ((icmp_ln305_fu_173_p2[0:0] == 1'b1) ? 10'd1 : add_ln305_1_fu_179_p2);

assign select_ln305_fu_264_p3 = ((or_ln305_fu_259_p2[0:0] == 1'b1) ? 5'd0 : cit_fu_64);

assign sub_ln316_fu_332_p2 = (tmp_114_fu_314_p3 - zext_ln316_fu_328_p1);

assign tmp_114_fu_314_p3 = {{trunc_ln316_reg_420}, {5'd0}};

assign tmp_115_fu_321_p3 = {{select_ln305_1_reg_415}, {2'd0}};

assign trunc_ln316_fu_280_p1 = select_ln305_1_fu_272_p3[3:0];

assign weight_sm_din = dynamic_weight_arr_q0;

assign xor_ln304_fu_236_p2 = (icmp_ln305_reg_403 ^ 1'd1);

assign zext_ln316_1_fu_338_p1 = select_ln305_reg_410;

assign zext_ln316_2_fu_347_p1 = add_ln316_reg_425;

assign zext_ln316_fu_328_p1 = tmp_115_fu_321_p3;

endmodule //ATTN11_matmul_step1_cache_weight_transposed_Pipeline_TT_LOOP_2_COT_LOOP_2_CIT_LOOP_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [41:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [41:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_404;
reg   [0:0] icmp_ln64_reg_404_pp0_iter1_reg;
reg   [0:0] cmp10_reg_420;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_404_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_198_p2;
reg   [0:0] icmp_ln65_reg_408;
wire   [4:0] select_ln65_fu_289_p3;
reg   [4:0] select_ln65_reg_415;
wire   [0:0] cmp10_fu_305_p2;
reg   [0:0] cmp10_reg_420_pp0_iter2_reg;
reg   [4:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [41:0] wb_q0;
reg   [41:0] ap_phi_mux_vec_o_0_phi_fu_118_p4;
wire   [41:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
wire   [63:0] zext_ln66_fu_341_p1;
wire   [4:0] wb_addr_gep_fu_107_p3;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln66_fu_311_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_fu_66;
wire   [4:0] select_ln65_19_fu_297_p3;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] select_ln65_20_fu_210_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_74;
wire   [15:0] add_ln64_fu_186_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln65_10_fu_204_p2;
wire   [0:0] icmp_ln66_fu_266_p2;
wire   [0:0] xor_ln64_fu_261_p2;
wire   [4:0] select_ln64_fu_254_p3;
wire   [0:0] and_ln64_fu_272_p2;
wire   [0:0] or_ln65_fu_284_p2;
wire   [4:0] cot_14_fu_278_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_137;
reg    ap_condition_133;
reg    ap_condition_310;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten_fu_70 = 10'd0;
//#0 indvar_flatten11_fu_74 = 16'd0;
end

ATTN11_matmul_step1_cache_window_17_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 42 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_137)) begin
        cit_fu_62 <= add_ln66_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_137)) begin
    cot_fu_66 <= select_ln65_19_fu_297_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten11_fu_74 <= add_ln64_fu_186_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_74 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten_fu_70 <= select_ln65_20_fu_210_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_70 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_420 <= cmp10_fu_305_p2;
        icmp_ln64_reg_404 <= icmp_ln64_fu_192_p2;
        icmp_ln64_reg_404_pp0_iter1_reg <= icmp_ln64_reg_404;
        icmp_ln65_reg_408 <= icmp_ln65_fu_198_p2;
        select_ln65_reg_415 <= select_ln65_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_420_pp0_iter2_reg <= cmp10_reg_420;
        icmp_ln64_reg_404_pp0_iter2_reg <= icmp_ln64_reg_404_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_420_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_404_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_310)) begin
        if ((cmp10_reg_420 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_107_p3;
        end else if ((cmp10_reg_420 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_341_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_10_fu_204_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln66_fu_311_p2 = (select_ln65_fu_289_p3 + 5'd1);

assign and_ln64_fu_272_p2 = (xor_ln64_fu_261_p2 & icmp_ln66_fu_266_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_137 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_310 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0));
end

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_118_p4;

assign cmp10_fu_305_p2 = ((select_ln65_19_fu_297_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_14_fu_278_p2 = (select_ln64_fu_254_p3 + 5'd1);

assign icmp_ln64_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_198_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_266_p2 = ((ap_sig_allocacmp_cit_load == 5'd28) ? 1'b1 : 1'b0);

assign or_ln65_fu_284_p2 = (icmp_ln65_reg_408 | and_ln64_fu_272_p2);

assign select_ln64_fu_254_p3 = ((icmp_ln65_reg_408[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln65_19_fu_297_p3 = ((and_ln64_fu_272_p2[0:0] == 1'b1) ? cot_14_fu_278_p2 : select_ln64_fu_254_p3);

assign select_ln65_20_fu_210_p3 = ((icmp_ln65_fu_198_p2[0:0] == 1'b1) ? 10'd1 : add_ln65_10_fu_204_p2);

assign select_ln65_fu_289_p3 = ((or_ln65_fu_284_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign wb_addr_gep_fu_107_p3 = zext_ln66_fu_341_p1;

assign xor_ln64_fu_261_p2 = (icmp_ln65_reg_408 ^ 1'd1);

assign zext_ln66_fu_341_p1 = select_ln65_reg_415;

endmodule //ATTN11_matmul_step1_cache_window
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [23:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_404;
reg   [0:0] icmp_ln64_reg_404_pp0_iter1_reg;
reg   [0:0] cmp10_reg_420;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_404_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_198_p2;
reg   [0:0] icmp_ln65_reg_408;
wire   [4:0] select_ln65_fu_289_p3;
reg   [4:0] select_ln65_reg_415;
wire   [0:0] cmp10_fu_305_p2;
reg   [0:0] cmp10_reg_420_pp0_iter2_reg;
reg   [3:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [23:0] wb_q0;
reg   [23:0] ap_phi_mux_vec_o_0_phi_fu_118_p4;
wire   [23:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
wire   [63:0] zext_ln66_fu_341_p1;
wire   [3:0] wb_addr_gep_fu_107_p3;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln66_fu_311_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_fu_66;
wire   [4:0] select_ln65_17_fu_297_p3;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] select_ln65_18_fu_210_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_74;
wire   [15:0] add_ln64_fu_186_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln65_9_fu_204_p2;
wire   [0:0] icmp_ln66_fu_266_p2;
wire   [0:0] xor_ln64_fu_261_p2;
wire   [4:0] select_ln64_fu_254_p3;
wire   [0:0] and_ln64_fu_272_p2;
wire   [0:0] or_ln65_fu_284_p2;
wire   [4:0] cot_13_fu_278_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_137;
reg    ap_condition_133;
reg    ap_condition_310;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten_fu_70 = 10'd0;
//#0 indvar_flatten11_fu_74 = 16'd0;
end

ATTN11_matmul_step1_cache_window_27_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 24 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_137)) begin
        cit_fu_62 <= add_ln66_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_137)) begin
    cot_fu_66 <= select_ln65_17_fu_297_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten11_fu_74 <= add_ln64_fu_186_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_74 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten_fu_70 <= select_ln65_18_fu_210_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_70 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_420 <= cmp10_fu_305_p2;
        icmp_ln64_reg_404 <= icmp_ln64_fu_192_p2;
        icmp_ln64_reg_404_pp0_iter1_reg <= icmp_ln64_reg_404;
        icmp_ln65_reg_408 <= icmp_ln65_fu_198_p2;
        select_ln65_reg_415 <= select_ln65_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_420_pp0_iter2_reg <= cmp10_reg_420;
        icmp_ln64_reg_404_pp0_iter2_reg <= icmp_ln64_reg_404_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_420_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_404_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_310)) begin
        if ((cmp10_reg_420 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_107_p3;
        end else if ((cmp10_reg_420 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_341_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_9_fu_204_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln66_fu_311_p2 = (select_ln65_fu_289_p3 + 5'd1);

assign and_ln64_fu_272_p2 = (xor_ln64_fu_261_p2 & icmp_ln66_fu_266_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_137 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_310 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0));
end

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_118_p4;

assign cmp10_fu_305_p2 = ((select_ln65_17_fu_297_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_13_fu_278_p2 = (select_ln64_fu_254_p3 + 5'd1);

assign icmp_ln64_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_198_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_266_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign or_ln65_fu_284_p2 = (icmp_ln65_reg_408 | and_ln64_fu_272_p2);

assign select_ln64_fu_254_p3 = ((icmp_ln65_reg_408[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln65_17_fu_297_p3 = ((and_ln64_fu_272_p2[0:0] == 1'b1) ? cot_13_fu_278_p2 : select_ln64_fu_254_p3);

assign select_ln65_18_fu_210_p3 = ((icmp_ln65_fu_198_p2[0:0] == 1'b1) ? 10'd1 : add_ln65_9_fu_204_p2);

assign select_ln65_fu_289_p3 = ((or_ln65_fu_284_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign wb_addr_gep_fu_107_p3 = zext_ln66_fu_341_p1;

assign xor_ln64_fu_261_p2 = (icmp_ln65_reg_408 ^ 1'd1);

assign zext_ln66_fu_341_p1 = select_ln65_reg_415;

endmodule //ATTN11_matmul_step1_cache_window_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_17 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [41:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [41:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_404;
reg   [0:0] icmp_ln64_reg_404_pp0_iter1_reg;
reg   [0:0] cmp10_reg_420;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_404_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_198_p2;
reg   [0:0] icmp_ln65_reg_408;
wire   [4:0] select_ln65_fu_289_p3;
reg   [4:0] select_ln65_reg_415;
wire   [0:0] cmp10_fu_305_p2;
reg   [0:0] cmp10_reg_420_pp0_iter2_reg;
reg   [4:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [41:0] wb_q0;
reg   [41:0] ap_phi_mux_vec_o_0_phi_fu_118_p4;
wire   [41:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
wire   [63:0] zext_ln66_fu_341_p1;
wire   [4:0] wb_addr_gep_fu_107_p3;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln66_fu_311_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_fu_66;
wire   [4:0] select_ln65_15_fu_297_p3;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] select_ln65_16_fu_210_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_74;
wire   [15:0] add_ln64_fu_186_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln65_8_fu_204_p2;
wire   [0:0] icmp_ln66_fu_266_p2;
wire   [0:0] xor_ln64_fu_261_p2;
wire   [4:0] select_ln64_fu_254_p3;
wire   [0:0] and_ln64_fu_272_p2;
wire   [0:0] or_ln65_fu_284_p2;
wire   [4:0] cot_11_fu_278_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_137;
reg    ap_condition_133;
reg    ap_condition_310;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten_fu_70 = 10'd0;
//#0 indvar_flatten11_fu_74 = 16'd0;
end

ATTN11_matmul_step1_cache_window_17_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 42 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_137)) begin
        cit_fu_62 <= add_ln66_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_137)) begin
    cot_fu_66 <= select_ln65_15_fu_297_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten11_fu_74 <= add_ln64_fu_186_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_74 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten_fu_70 <= select_ln65_16_fu_210_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_70 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_420 <= cmp10_fu_305_p2;
        icmp_ln64_reg_404 <= icmp_ln64_fu_192_p2;
        icmp_ln64_reg_404_pp0_iter1_reg <= icmp_ln64_reg_404;
        icmp_ln65_reg_408 <= icmp_ln65_fu_198_p2;
        select_ln65_reg_415 <= select_ln65_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_420_pp0_iter2_reg <= cmp10_reg_420;
        icmp_ln64_reg_404_pp0_iter2_reg <= icmp_ln64_reg_404_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_420_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_404_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_310)) begin
        if ((cmp10_reg_420 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_107_p3;
        end else if ((cmp10_reg_420 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_341_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_8_fu_204_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln66_fu_311_p2 = (select_ln65_fu_289_p3 + 5'd1);

assign and_ln64_fu_272_p2 = (xor_ln64_fu_261_p2 & icmp_ln66_fu_266_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_137 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_310 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0));
end

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_118_p4;

assign cmp10_fu_305_p2 = ((select_ln65_15_fu_297_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_11_fu_278_p2 = (select_ln64_fu_254_p3 + 5'd1);

assign icmp_ln64_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_198_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_266_p2 = ((ap_sig_allocacmp_cit_load == 5'd28) ? 1'b1 : 1'b0);

assign or_ln65_fu_284_p2 = (icmp_ln65_reg_408 | and_ln64_fu_272_p2);

assign select_ln64_fu_254_p3 = ((icmp_ln65_reg_408[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln65_15_fu_297_p3 = ((and_ln64_fu_272_p2[0:0] == 1'b1) ? cot_11_fu_278_p2 : select_ln64_fu_254_p3);

assign select_ln65_16_fu_210_p3 = ((icmp_ln65_fu_198_p2[0:0] == 1'b1) ? 10'd1 : add_ln65_8_fu_204_p2);

assign select_ln65_fu_289_p3 = ((or_ln65_fu_284_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign wb_addr_gep_fu_107_p3 = zext_ln66_fu_341_p1;

assign xor_ln64_fu_261_p2 = (icmp_ln65_reg_408 ^ 1'd1);

assign zext_ln66_fu_341_p1 = select_ln65_reg_415;

endmodule //ATTN11_matmul_step1_cache_window_17
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step1_cache_window_17_wb_RAM_1P_LUTRAM_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 42;
parameter AddressWidth = 5;
parameter AddressRange = 28;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [35:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [35:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_408;
reg   [0:0] icmp_ln64_reg_408_pp0_iter1_reg;
reg   [0:0] cmp10_reg_424;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_408_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_202_p2;
reg   [0:0] icmp_ln65_reg_412;
wire   [5:0] select_ln65_fu_293_p3;
reg   [5:0] select_ln65_reg_419;
wire   [0:0] cmp10_fu_309_p2;
reg   [0:0] cmp10_reg_424_pp0_iter2_reg;
reg   [4:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [35:0] wb_q0;
reg   [35:0] ap_phi_mux_vec_o_0_phi_fu_122_p4;
wire   [35:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
wire   [63:0] zext_ln66_fu_345_p1;
wire   [4:0] wb_addr_gep_fu_111_p3;
reg   [5:0] cit_fu_66;
wire   [5:0] add_ln66_fu_315_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_9_fu_70;
wire   [4:0] select_ln65_13_fu_301_p3;
reg   [4:0] ap_sig_allocacmp_cot_9_load;
reg   [10:0] indvar_flatten_fu_74;
wire   [10:0] select_ln65_14_fu_214_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_78;
wire   [15:0] add_ln64_fu_190_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln65_7_fu_208_p2;
wire   [0:0] icmp_ln66_fu_270_p2;
wire   [0:0] xor_ln64_fu_265_p2;
wire   [4:0] select_ln64_fu_258_p3;
wire   [0:0] and_ln64_fu_276_p2;
wire   [0:0] or_ln65_fu_288_p2;
wire   [4:0] cot_fu_282_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_151;
reg    ap_condition_147;
reg    ap_condition_324;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_66 = 6'd0;
//#0 cot_9_fu_70 = 5'd0;
//#0 indvar_flatten_fu_74 = 11'd0;
//#0 indvar_flatten11_fu_78 = 16'd0;
end

ATTN11_matmul_step1_cache_window_2_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 36 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        cit_fu_66 <= add_ln66_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_151)) begin
    cot_9_fu_70 <= select_ln65_13_fu_301_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten11_fu_78 <= add_ln64_fu_190_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_78 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten_fu_74 <= select_ln65_14_fu_214_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_74 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_424 <= cmp10_fu_309_p2;
        icmp_ln64_reg_408 <= icmp_ln64_fu_196_p2;
        icmp_ln64_reg_408_pp0_iter1_reg <= icmp_ln64_reg_408;
        icmp_ln65_reg_412 <= icmp_ln65_fu_202_p2;
        select_ln65_reg_419 <= select_ln65_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_424_pp0_iter2_reg <= cmp10_reg_424;
        icmp_ln64_reg_408_pp0_iter2_reg <= icmp_ln64_reg_408_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_424_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_408_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_9_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_9_load = cot_9_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_324)) begin
        if ((cmp10_reg_424 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_111_p3;
        end else if ((cmp10_reg_424 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_345_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_190_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_7_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln66_fu_315_p2 = (select_ln65_fu_293_p3 + 6'd1);

assign and_ln64_fu_276_p2 = (xor_ln64_fu_265_p2 & icmp_ln66_fu_270_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_147 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_151 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_324 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_119 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_122_p4;

assign cmp10_fu_309_p2 = ((select_ln65_13_fu_301_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_fu_282_p2 = (select_ln64_fu_258_p3 + 5'd1);

assign icmp_ln64_fu_196_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_270_p2 = ((ap_sig_allocacmp_cit_load == 6'd32) ? 1'b1 : 1'b0);

assign or_ln65_fu_288_p2 = (icmp_ln65_reg_412 | and_ln64_fu_276_p2);

assign select_ln64_fu_258_p3 = ((icmp_ln65_reg_412[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_9_load);

assign select_ln65_13_fu_301_p3 = ((and_ln64_fu_276_p2[0:0] == 1'b1) ? cot_fu_282_p2 : select_ln64_fu_258_p3);

assign select_ln65_14_fu_214_p3 = ((icmp_ln65_fu_202_p2[0:0] == 1'b1) ? 11'd1 : add_ln65_7_fu_208_p2);

assign select_ln65_fu_293_p3 = ((or_ln65_fu_288_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign start_out = real_start;

assign wb_addr_gep_fu_111_p3 = zext_ln66_fu_345_p1;

assign xor_ln64_fu_265_p2 = (icmp_ln65_reg_412 ^ 1'd1);

assign zext_ln66_fu_345_p1 = select_ln65_reg_419;

endmodule //ATTN11_matmul_step1_cache_window_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [41:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [41:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_404;
reg   [0:0] icmp_ln64_reg_404_pp0_iter1_reg;
reg   [0:0] cmp10_reg_420;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_404_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_198_p2;
reg   [0:0] icmp_ln65_reg_408;
wire   [4:0] select_ln65_fu_289_p3;
reg   [4:0] select_ln65_reg_415;
wire   [0:0] cmp10_fu_305_p2;
reg   [0:0] cmp10_reg_420_pp0_iter2_reg;
reg   [4:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [41:0] wb_q0;
reg   [41:0] ap_phi_mux_vec_o_0_phi_fu_118_p4;
wire   [41:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
reg   [41:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
wire   [63:0] zext_ln66_fu_341_p1;
wire   [4:0] wb_addr_gep_fu_107_p3;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln66_fu_311_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_fu_66;
wire   [4:0] select_ln65_11_fu_297_p3;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] select_ln65_12_fu_210_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_74;
wire   [15:0] add_ln64_fu_186_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln65_6_fu_204_p2;
wire   [0:0] icmp_ln66_fu_266_p2;
wire   [0:0] xor_ln64_fu_261_p2;
wire   [4:0] select_ln64_fu_254_p3;
wire   [0:0] and_ln64_fu_272_p2;
wire   [0:0] or_ln65_fu_284_p2;
wire   [4:0] cot_9_fu_278_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_137;
reg    ap_condition_133;
reg    ap_condition_310;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten_fu_70 = 10'd0;
//#0 indvar_flatten11_fu_74 = 16'd0;
end

ATTN11_matmul_step1_cache_window_17_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 42 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_137)) begin
        cit_fu_62 <= add_ln66_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_137)) begin
    cot_fu_66 <= select_ln65_11_fu_297_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten11_fu_74 <= add_ln64_fu_186_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_74 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten_fu_70 <= select_ln65_12_fu_210_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_70 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_420 <= cmp10_fu_305_p2;
        icmp_ln64_reg_404 <= icmp_ln64_fu_192_p2;
        icmp_ln64_reg_404_pp0_iter1_reg <= icmp_ln64_reg_404;
        icmp_ln65_reg_408 <= icmp_ln65_fu_198_p2;
        select_ln65_reg_415 <= select_ln65_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_420_pp0_iter2_reg <= cmp10_reg_420;
        icmp_ln64_reg_404_pp0_iter2_reg <= icmp_ln64_reg_404_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_420_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_404_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_310)) begin
        if ((cmp10_reg_420 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_107_p3;
        end else if ((cmp10_reg_420 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_341_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_6_fu_204_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln66_fu_311_p2 = (select_ln65_fu_289_p3 + 5'd1);

assign and_ln64_fu_272_p2 = (xor_ln64_fu_261_p2 & icmp_ln66_fu_266_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_137 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_310 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0));
end

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_118_p4;

assign cmp10_fu_305_p2 = ((select_ln65_11_fu_297_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_9_fu_278_p2 = (select_ln64_fu_254_p3 + 5'd1);

assign icmp_ln64_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_198_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_266_p2 = ((ap_sig_allocacmp_cit_load == 5'd28) ? 1'b1 : 1'b0);

assign or_ln65_fu_284_p2 = (icmp_ln65_reg_408 | and_ln64_fu_272_p2);

assign select_ln64_fu_254_p3 = ((icmp_ln65_reg_408[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln65_11_fu_297_p3 = ((and_ln64_fu_272_p2[0:0] == 1'b1) ? cot_9_fu_278_p2 : select_ln64_fu_254_p3);

assign select_ln65_12_fu_210_p3 = ((icmp_ln65_fu_198_p2[0:0] == 1'b1) ? 10'd1 : add_ln65_6_fu_204_p2);

assign select_ln65_fu_289_p3 = ((or_ln65_fu_284_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign wb_addr_gep_fu_107_p3 = zext_ln66_fu_341_p1;

assign xor_ln64_fu_261_p2 = (icmp_ln65_reg_408 ^ 1'd1);

assign zext_ln66_fu_341_p1 = select_ln65_reg_415;

endmodule //ATTN11_matmul_step1_cache_window_22
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_27 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [23:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_404;
reg   [0:0] icmp_ln64_reg_404_pp0_iter1_reg;
reg   [0:0] cmp10_reg_420;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_404_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_198_p2;
reg   [0:0] icmp_ln65_reg_408;
wire   [4:0] select_ln65_fu_289_p3;
reg   [4:0] select_ln65_reg_415;
wire   [0:0] cmp10_fu_305_p2;
reg   [0:0] cmp10_reg_420_pp0_iter2_reg;
reg   [3:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [23:0] wb_q0;
reg   [23:0] ap_phi_mux_vec_o_0_phi_fu_118_p4;
wire   [23:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
wire   [63:0] zext_ln66_fu_341_p1;
wire   [3:0] wb_addr_gep_fu_107_p3;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln66_fu_311_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_fu_66;
wire   [4:0] select_ln65_9_fu_297_p3;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] select_ln65_10_fu_210_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_74;
wire   [15:0] add_ln64_fu_186_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln65_5_fu_204_p2;
wire   [0:0] icmp_ln66_fu_266_p2;
wire   [0:0] xor_ln64_fu_261_p2;
wire   [4:0] select_ln64_fu_254_p3;
wire   [0:0] and_ln64_fu_272_p2;
wire   [0:0] or_ln65_fu_284_p2;
wire   [4:0] cot_7_fu_278_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_137;
reg    ap_condition_133;
reg    ap_condition_310;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten_fu_70 = 10'd0;
//#0 indvar_flatten11_fu_74 = 16'd0;
end

ATTN11_matmul_step1_cache_window_27_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 24 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_137)) begin
        cit_fu_62 <= add_ln66_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_137)) begin
    cot_fu_66 <= select_ln65_9_fu_297_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten11_fu_74 <= add_ln64_fu_186_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_74 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten_fu_70 <= select_ln65_10_fu_210_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_70 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_420 <= cmp10_fu_305_p2;
        icmp_ln64_reg_404 <= icmp_ln64_fu_192_p2;
        icmp_ln64_reg_404_pp0_iter1_reg <= icmp_ln64_reg_404;
        icmp_ln65_reg_408 <= icmp_ln65_fu_198_p2;
        select_ln65_reg_415 <= select_ln65_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_420_pp0_iter2_reg <= cmp10_reg_420;
        icmp_ln64_reg_404_pp0_iter2_reg <= icmp_ln64_reg_404_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_420_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_404_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_310)) begin
        if ((cmp10_reg_420 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_107_p3;
        end else if ((cmp10_reg_420 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_341_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_5_fu_204_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln66_fu_311_p2 = (select_ln65_fu_289_p3 + 5'd1);

assign and_ln64_fu_272_p2 = (xor_ln64_fu_261_p2 & icmp_ln66_fu_266_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_137 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_310 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0));
end

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_118_p4;

assign cmp10_fu_305_p2 = ((select_ln65_9_fu_297_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_7_fu_278_p2 = (select_ln64_fu_254_p3 + 5'd1);

assign icmp_ln64_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_198_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_266_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign or_ln65_fu_284_p2 = (icmp_ln65_reg_408 | and_ln64_fu_272_p2);

assign select_ln64_fu_254_p3 = ((icmp_ln65_reg_408[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln65_10_fu_210_p3 = ((icmp_ln65_fu_198_p2[0:0] == 1'b1) ? 10'd1 : add_ln65_5_fu_204_p2);

assign select_ln65_9_fu_297_p3 = ((and_ln64_fu_272_p2[0:0] == 1'b1) ? cot_7_fu_278_p2 : select_ln64_fu_254_p3);

assign select_ln65_fu_289_p3 = ((or_ln65_fu_284_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign wb_addr_gep_fu_107_p3 = zext_ln66_fu_341_p1;

assign xor_ln64_fu_261_p2 = (icmp_ln65_reg_408 ^ 1'd1);

assign zext_ln66_fu_341_p1 = select_ln65_reg_415;

endmodule //ATTN11_matmul_step1_cache_window_27
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step1_cache_window_27_wb_RAM_1P_LUTRAM_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 24;
parameter AddressWidth = 4;
parameter AddressRange = 16;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step1_cache_window_2_wb_RAM_1P_LUTRAM_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 36;
parameter AddressWidth = 5;
parameter AddressRange = 32;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [71:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [71:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_408;
reg   [0:0] icmp_ln64_reg_408_pp0_iter1_reg;
reg   [0:0] cmp10_reg_424;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_408_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_202_p2;
reg   [0:0] icmp_ln65_reg_412;
wire   [4:0] select_ln65_fu_293_p3;
reg   [4:0] select_ln65_reg_419;
wire   [0:0] cmp10_fu_309_p2;
reg   [0:0] cmp10_reg_424_pp0_iter2_reg;
reg   [3:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [71:0] wb_q0;
reg   [71:0] ap_phi_mux_vec_o_0_phi_fu_122_p4;
wire   [71:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
reg   [71:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
reg   [71:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
reg   [71:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
wire   [63:0] zext_ln66_fu_345_p1;
wire   [3:0] wb_addr_gep_fu_111_p3;
reg   [4:0] cit_fu_66;
wire   [4:0] add_ln66_fu_315_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [5:0] cot_5_fu_70;
wire   [5:0] select_ln65_7_fu_301_p3;
reg   [5:0] ap_sig_allocacmp_cot_5_load;
reg   [10:0] indvar_flatten_fu_74;
wire   [10:0] select_ln65_8_fu_214_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_78;
wire   [15:0] add_ln64_fu_190_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln65_4_fu_208_p2;
wire   [0:0] icmp_ln66_fu_270_p2;
wire   [0:0] xor_ln64_fu_265_p2;
wire   [5:0] select_ln64_fu_258_p3;
wire   [0:0] and_ln64_fu_276_p2;
wire   [0:0] or_ln65_fu_288_p2;
wire   [5:0] cot_fu_282_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_151;
reg    ap_condition_147;
reg    ap_condition_324;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_66 = 5'd0;
//#0 cot_5_fu_70 = 6'd0;
//#0 indvar_flatten_fu_74 = 11'd0;
//#0 indvar_flatten11_fu_78 = 16'd0;
end

ATTN11_matmul_step1_cache_window_3_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 72 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        cit_fu_66 <= add_ln66_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_151)) begin
    cot_5_fu_70 <= select_ln65_7_fu_301_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten11_fu_78 <= add_ln64_fu_190_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_78 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten_fu_74 <= select_ln65_8_fu_214_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_74 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_424 <= cmp10_fu_309_p2;
        icmp_ln64_reg_408 <= icmp_ln64_fu_196_p2;
        icmp_ln64_reg_408_pp0_iter1_reg <= icmp_ln64_reg_408;
        icmp_ln65_reg_412 <= icmp_ln65_fu_202_p2;
        select_ln65_reg_419 <= select_ln65_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_424_pp0_iter2_reg <= cmp10_reg_424;
        icmp_ln64_reg_408_pp0_iter2_reg <= icmp_ln64_reg_408_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_424_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_408_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_5_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cot_5_load = cot_5_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_324)) begin
        if ((cmp10_reg_424 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_111_p3;
        end else if ((cmp10_reg_424 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_345_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_190_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_4_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln66_fu_315_p2 = (select_ln65_fu_293_p3 + 5'd1);

assign and_ln64_fu_276_p2 = (xor_ln64_fu_265_p2 & icmp_ln66_fu_270_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_147 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_151 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_324 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_119 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_122_p4;

assign cmp10_fu_309_p2 = ((select_ln65_7_fu_301_p3 == 6'd0) ? 1'b1 : 1'b0);

assign cot_fu_282_p2 = (select_ln64_fu_258_p3 + 6'd1);

assign icmp_ln64_fu_196_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_270_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign or_ln65_fu_288_p2 = (icmp_ln65_reg_412 | and_ln64_fu_276_p2);

assign select_ln64_fu_258_p3 = ((icmp_ln65_reg_412[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cot_5_load);

assign select_ln65_7_fu_301_p3 = ((and_ln64_fu_276_p2[0:0] == 1'b1) ? cot_fu_282_p2 : select_ln64_fu_258_p3);

assign select_ln65_8_fu_214_p3 = ((icmp_ln65_fu_202_p2[0:0] == 1'b1) ? 11'd1 : add_ln65_4_fu_208_p2);

assign select_ln65_fu_293_p3 = ((or_ln65_fu_288_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign start_out = real_start;

assign wb_addr_gep_fu_111_p3 = zext_ln66_fu_345_p1;

assign xor_ln64_fu_265_p2 = (icmp_ln65_reg_412 ^ 1'd1);

assign zext_ln66_fu_345_p1 = select_ln65_reg_419;

endmodule //ATTN11_matmul_step1_cache_window_3
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_32 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [23:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_404;
reg   [0:0] icmp_ln64_reg_404_pp0_iter1_reg;
reg   [0:0] cmp10_reg_420;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_404_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_198_p2;
reg   [0:0] icmp_ln65_reg_408;
wire   [4:0] select_ln65_fu_289_p3;
reg   [4:0] select_ln65_reg_415;
wire   [0:0] cmp10_fu_305_p2;
reg   [0:0] cmp10_reg_420_pp0_iter2_reg;
reg   [3:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [23:0] wb_q0;
reg   [23:0] ap_phi_mux_vec_o_0_phi_fu_118_p4;
wire   [23:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
reg   [23:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
wire   [63:0] zext_ln66_fu_341_p1;
wire   [3:0] wb_addr_gep_fu_107_p3;
reg   [4:0] cit_fu_62;
wire   [4:0] add_ln66_fu_311_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_fu_66;
wire   [4:0] select_ln65_5_fu_297_p3;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] select_ln65_6_fu_210_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_74;
wire   [15:0] add_ln64_fu_186_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln65_3_fu_204_p2;
wire   [0:0] icmp_ln66_fu_266_p2;
wire   [0:0] xor_ln64_fu_261_p2;
wire   [4:0] select_ln64_fu_254_p3;
wire   [0:0] and_ln64_fu_272_p2;
wire   [0:0] or_ln65_fu_284_p2;
wire   [4:0] cot_4_fu_278_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_137;
reg    ap_condition_133;
reg    ap_condition_310;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_62 = 5'd0;
//#0 cot_fu_66 = 5'd0;
//#0 indvar_flatten_fu_70 = 10'd0;
//#0 indvar_flatten11_fu_74 = 16'd0;
end

ATTN11_matmul_step1_cache_window_27_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 24 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_115;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_137)) begin
        cit_fu_62 <= add_ln66_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_137)) begin
    cot_fu_66 <= select_ln65_5_fu_297_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten11_fu_74 <= add_ln64_fu_186_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_74 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_133)) begin
    if ((icmp_ln64_fu_192_p2 == 1'd0)) begin
        indvar_flatten_fu_70 <= select_ln65_6_fu_210_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_70 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_420 <= cmp10_fu_305_p2;
        icmp_ln64_reg_404 <= icmp_ln64_fu_192_p2;
        icmp_ln64_reg_404_pp0_iter1_reg <= icmp_ln64_reg_404;
        icmp_ln65_reg_408 <= icmp_ln65_fu_198_p2;
        select_ln65_reg_415 <= select_ln65_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_115 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_420_pp0_iter2_reg <= cmp10_reg_420;
        icmp_ln64_reg_404_pp0_iter2_reg <= icmp_ln64_reg_404_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_420_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_404_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_118_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_115;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_310)) begin
        if ((cmp10_reg_420 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_107_p3;
        end else if ((cmp10_reg_420 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_341_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_3_fu_204_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln66_fu_311_p2 = (select_ln65_fu_289_p3 + 5'd1);

assign and_ln64_fu_272_p2 = (xor_ln64_fu_261_p2 & icmp_ln66_fu_266_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_137 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_310 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_420 == 1'd1) & (icmp_ln64_reg_404_pp0_iter1_reg == 1'd0));
end

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_118_p4;

assign cmp10_fu_305_p2 = ((select_ln65_5_fu_297_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_4_fu_278_p2 = (select_ln64_fu_254_p3 + 5'd1);

assign icmp_ln64_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_198_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_266_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign or_ln65_fu_284_p2 = (icmp_ln65_reg_408 | and_ln64_fu_272_p2);

assign select_ln64_fu_254_p3 = ((icmp_ln65_reg_408[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln65_5_fu_297_p3 = ((and_ln64_fu_272_p2[0:0] == 1'b1) ? cot_4_fu_278_p2 : select_ln64_fu_254_p3);

assign select_ln65_6_fu_210_p3 = ((icmp_ln65_fu_198_p2[0:0] == 1'b1) ? 10'd1 : add_ln65_3_fu_204_p2);

assign select_ln65_fu_289_p3 = ((or_ln65_fu_284_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign wb_addr_gep_fu_107_p3 = zext_ln66_fu_341_p1;

assign xor_ln64_fu_261_p2 = (icmp_ln65_reg_408 ^ 1'd1);

assign zext_ln66_fu_341_p1 = select_ln65_reg_415;

endmodule //ATTN11_matmul_step1_cache_window_32
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step1_cache_window_3_wb_RAM_1P_LUTRAM_1R1W (
     
    address0, ce0,
    d0, we0, 
    q0, 
     
    reset, clk);

parameter DataWidth = 72;
parameter AddressWidth = 4;
parameter AddressRange = 16;
 
input[AddressWidth-1:0] address0;
input ce0;
input[DataWidth-1:0] d0;
input we0; 
output reg[DataWidth-1:0] q0; 

input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 





//read first
always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[address0] <= d0; 
        q0 <= ram[address0];

    end
end 
 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [35:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [35:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_408;
reg   [0:0] icmp_ln64_reg_408_pp0_iter1_reg;
reg   [0:0] cmp10_reg_424;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_408_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_202_p2;
reg   [0:0] icmp_ln65_reg_412;
wire   [5:0] select_ln65_fu_293_p3;
reg   [5:0] select_ln65_reg_419;
wire   [0:0] cmp10_fu_309_p2;
reg   [0:0] cmp10_reg_424_pp0_iter2_reg;
reg   [4:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [35:0] wb_q0;
reg   [35:0] ap_phi_mux_vec_o_0_phi_fu_122_p4;
wire   [35:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
wire   [63:0] zext_ln66_fu_345_p1;
wire   [4:0] wb_addr_gep_fu_111_p3;
reg   [5:0] cit_fu_66;
wire   [5:0] add_ln66_fu_315_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_2_fu_70;
wire   [4:0] select_ln65_3_fu_301_p3;
reg   [4:0] ap_sig_allocacmp_cot_2_load;
reg   [10:0] indvar_flatten_fu_74;
wire   [10:0] select_ln65_4_fu_214_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_78;
wire   [15:0] add_ln64_fu_190_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln65_2_fu_208_p2;
wire   [0:0] icmp_ln66_fu_270_p2;
wire   [0:0] xor_ln64_fu_265_p2;
wire   [4:0] select_ln64_fu_258_p3;
wire   [0:0] and_ln64_fu_276_p2;
wire   [0:0] or_ln65_fu_288_p2;
wire   [4:0] cot_fu_282_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_151;
reg    ap_condition_147;
reg    ap_condition_324;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_66 = 6'd0;
//#0 cot_2_fu_70 = 5'd0;
//#0 indvar_flatten_fu_74 = 11'd0;
//#0 indvar_flatten11_fu_78 = 16'd0;
end

ATTN11_matmul_step1_cache_window_2_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 36 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        cit_fu_66 <= add_ln66_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_151)) begin
    cot_2_fu_70 <= select_ln65_3_fu_301_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten11_fu_78 <= add_ln64_fu_190_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_78 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten_fu_74 <= select_ln65_4_fu_214_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_74 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_424 <= cmp10_fu_309_p2;
        icmp_ln64_reg_408 <= icmp_ln64_fu_196_p2;
        icmp_ln64_reg_408_pp0_iter1_reg <= icmp_ln64_reg_408;
        icmp_ln65_reg_412 <= icmp_ln65_fu_202_p2;
        select_ln65_reg_419 <= select_ln65_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_424_pp0_iter2_reg <= cmp10_reg_424;
        icmp_ln64_reg_408_pp0_iter2_reg <= icmp_ln64_reg_408_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_424_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_408_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_2_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_2_load = cot_2_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_324)) begin
        if ((cmp10_reg_424 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_111_p3;
        end else if ((cmp10_reg_424 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_345_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_190_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_2_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln66_fu_315_p2 = (select_ln65_fu_293_p3 + 6'd1);

assign and_ln64_fu_276_p2 = (xor_ln64_fu_265_p2 & icmp_ln66_fu_270_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_147 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_151 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_324 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_119 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_122_p4;

assign cmp10_fu_309_p2 = ((select_ln65_3_fu_301_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_fu_282_p2 = (select_ln64_fu_258_p3 + 5'd1);

assign icmp_ln64_fu_196_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_270_p2 = ((ap_sig_allocacmp_cit_load == 6'd32) ? 1'b1 : 1'b0);

assign or_ln65_fu_288_p2 = (icmp_ln65_reg_412 | and_ln64_fu_276_p2);

assign select_ln64_fu_258_p3 = ((icmp_ln65_reg_412[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_2_load);

assign select_ln65_3_fu_301_p3 = ((and_ln64_fu_276_p2[0:0] == 1'b1) ? cot_fu_282_p2 : select_ln64_fu_258_p3);

assign select_ln65_4_fu_214_p3 = ((icmp_ln65_fu_202_p2[0:0] == 1'b1) ? 11'd1 : add_ln65_2_fu_208_p2);

assign select_ln65_fu_293_p3 = ((or_ln65_fu_288_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign start_out = real_start;

assign wb_addr_gep_fu_111_p3 = zext_ln66_fu_345_p1;

assign xor_ln64_fu_265_p2 = (icmp_ln65_reg_412 ^ 1'd1);

assign zext_ln66_fu_345_p1 = select_ln65_reg_419;

endmodule //ATTN11_matmul_step1_cache_window_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step1_cache_window_47 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_num_data_valid,
        adpt_sm_fifo_cap,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_full_n,
        cache_window_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [35:0] adpt_sm_dout;
input  [5:0] adpt_sm_num_data_valid;
input  [5:0] adpt_sm_fifo_cap;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [35:0] cache_window_sm_din;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_full_n;
output   cache_window_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg adpt_sm_read;
reg cache_window_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln64_reg_408;
reg   [0:0] icmp_ln64_reg_408_pp0_iter1_reg;
reg   [0:0] cmp10_reg_424;
reg    ap_predicate_op73_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    adpt_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    cache_window_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_408_pp0_iter2_reg;
wire   [0:0] icmp_ln65_fu_202_p2;
reg   [0:0] icmp_ln65_reg_412;
wire   [5:0] select_ln65_fu_293_p3;
reg   [5:0] select_ln65_reg_419;
wire   [0:0] cmp10_fu_309_p2;
reg   [0:0] cmp10_reg_424_pp0_iter2_reg;
reg   [4:0] wb_address0;
reg    wb_ce0;
reg    wb_we0;
wire   [35:0] wb_q0;
reg   [35:0] ap_phi_mux_vec_o_0_phi_fu_122_p4;
wire   [35:0] ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
reg   [35:0] ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
wire   [63:0] zext_ln66_fu_345_p1;
wire   [4:0] wb_addr_gep_fu_111_p3;
reg   [5:0] cit_fu_66;
wire   [5:0] add_ln66_fu_315_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [4:0] cot_1_fu_70;
wire   [4:0] select_ln65_1_fu_301_p3;
reg   [4:0] ap_sig_allocacmp_cot_1_load;
reg   [10:0] indvar_flatten_fu_74;
wire   [10:0] select_ln65_2_fu_214_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten11_fu_78;
wire   [15:0] add_ln64_fu_190_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten11_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln65_1_fu_208_p2;
wire   [0:0] icmp_ln66_fu_270_p2;
wire   [0:0] xor_ln64_fu_265_p2;
wire   [4:0] select_ln64_fu_258_p3;
wire   [0:0] and_ln64_fu_276_p2;
wire   [0:0] or_ln65_fu_288_p2;
wire   [4:0] cot_fu_282_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_151;
reg    ap_condition_147;
reg    ap_condition_324;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_66 = 6'd0;
//#0 cot_1_fu_70 = 5'd0;
//#0 indvar_flatten_fu_74 = 11'd0;
//#0 indvar_flatten11_fu_78 = 16'd0;
end

ATTN11_matmul_step1_cache_window_2_wb_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 36 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
wb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_address0),
    .ce0(wb_ce0),
    .we0(wb_we0),
    .d0(adpt_sm_dout),
    .q0(wb_q0)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter2_vec_o_0_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        cit_fu_66 <= add_ln66_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_151)) begin
    cot_1_fu_70 <= select_ln65_1_fu_301_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten11_fu_78 <= add_ln64_fu_190_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten11_fu_78 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_147)) begin
    if ((icmp_ln64_fu_196_p2 == 1'd0)) begin
        indvar_flatten_fu_74 <= select_ln65_2_fu_214_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_74 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        cmp10_reg_424 <= cmp10_fu_309_p2;
        icmp_ln64_reg_408 <= icmp_ln64_fu_196_p2;
        icmp_ln64_reg_408_pp0_iter1_reg <= icmp_ln64_reg_408;
        icmp_ln65_reg_412 <= icmp_ln65_fu_202_p2;
        select_ln65_reg_419 <= select_ln65_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter0_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_vec_o_0_reg_119 <= ap_phi_reg_pp0_iter1_vec_o_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        cmp10_reg_424_pp0_iter2_reg <= cmp10_reg_424;
        icmp_ln64_reg_408_pp0_iter2_reg <= icmp_ln64_reg_408_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp10_reg_424_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_408_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = wb_q0;
    end else begin
        ap_phi_mux_vec_o_0_phi_fu_122_p4 = ap_phi_reg_pp0_iter3_vec_o_0_reg_119;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_cot_1_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_1_load = cot_1_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten11_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten11_load = indvar_flatten11_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_324)) begin
        if ((cmp10_reg_424 == 1'd1)) begin
            wb_address0 = wb_addr_gep_fu_111_p3;
        end else if ((cmp10_reg_424 == 1'd0)) begin
            wb_address0 = zext_ln66_fu_345_p1;
        end else begin
            wb_address0 = 'bx;
        end
    end else begin
        wb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        wb_ce0 = 1'b1;
    end else begin
        wb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        wb_we0 = 1'b1;
    end else begin
        wb_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_190_p2 = (ap_sig_allocacmp_indvar_flatten11_load + 16'd1);

assign add_ln65_1_fu_208_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln66_fu_315_p2 = (select_ln65_fu_293_p3 + 6'd1);

assign and_ln64_fu_276_p2 = (xor_ln64_fu_265_p2 & icmp_ln66_fu_270_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op73_read_state3 == 1'b1) & (1'b0 == adpt_sm_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_147 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_151 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_324 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_vec_o_0_reg_119 = 'bx;

always @ (*) begin
    ap_predicate_op73_read_state3 = ((cmp10_reg_424 == 1'd1) & (icmp_ln64_reg_408_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = ap_phi_mux_vec_o_0_phi_fu_122_p4;

assign cmp10_fu_309_p2 = ((select_ln65_1_fu_301_p3 == 5'd0) ? 1'b1 : 1'b0);

assign cot_fu_282_p2 = (select_ln64_fu_258_p3 + 5'd1);

assign icmp_ln64_fu_196_p2 = ((ap_sig_allocacmp_indvar_flatten11_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_202_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_270_p2 = ((ap_sig_allocacmp_cit_load == 6'd32) ? 1'b1 : 1'b0);

assign or_ln65_fu_288_p2 = (icmp_ln65_reg_412 | and_ln64_fu_276_p2);

assign select_ln64_fu_258_p3 = ((icmp_ln65_reg_412[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_1_load);

assign select_ln65_1_fu_301_p3 = ((and_ln64_fu_276_p2[0:0] == 1'b1) ? cot_fu_282_p2 : select_ln64_fu_258_p3);

assign select_ln65_2_fu_214_p3 = ((icmp_ln65_fu_202_p2[0:0] == 1'b1) ? 11'd1 : add_ln65_1_fu_208_p2);

assign select_ln65_fu_293_p3 = ((or_ln65_fu_288_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign start_out = real_start;

assign wb_addr_gep_fu_111_p3 = zext_ln66_fu_345_p1;

assign xor_ln64_fu_265_p2 = (icmp_ln65_reg_412 ^ 1'd1);

assign zext_ln66_fu_345_p1 = select_ln65_reg_419;

endmodule //ATTN11_matmul_step1_cache_window_47
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [41:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [83:0] weight_sm_dout;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [79:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln378_reg_3048;
reg   [0:0] icmp_ln378_reg_3048_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_419_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln337_fu_425_p2;
reg   [0:0] icmp_ln337_reg_2870;
wire   [0:0] icmp_ln342_fu_505_p2;
reg   [0:0] icmp_ln342_reg_2876;
wire  signed [5:0] mul_res_851_fu_953_p2;
reg  signed [5:0] mul_res_851_reg_2888;
wire   [6:0] add_ln370_111_fu_1031_p2;
reg   [6:0] add_ln370_111_reg_2893;
wire   [6:0] add_ln370_113_fu_1037_p2;
reg   [6:0] add_ln370_113_reg_2898;
wire   [6:0] add_ln370_114_fu_1043_p2;
reg   [6:0] add_ln370_114_reg_2903;
wire  signed [5:0] mul_res_858_fu_1149_p2;
reg  signed [5:0] mul_res_858_reg_2908;
wire   [6:0] add_ln370_118_fu_1199_p2;
reg   [6:0] add_ln370_118_reg_2913;
wire   [6:0] add_ln370_120_fu_1205_p2;
reg   [6:0] add_ln370_120_reg_2918;
wire   [6:0] add_ln370_121_fu_1211_p2;
reg   [6:0] add_ln370_121_reg_2923;
wire  signed [5:0] mul_res_865_fu_1317_p2;
reg  signed [5:0] mul_res_865_reg_2928;
wire   [6:0] add_ln370_125_fu_1367_p2;
reg   [6:0] add_ln370_125_reg_2933;
wire   [6:0] add_ln370_127_fu_1373_p2;
reg   [6:0] add_ln370_127_reg_2938;
wire   [6:0] add_ln370_128_fu_1379_p2;
reg   [6:0] add_ln370_128_reg_2943;
wire  signed [5:0] mul_res_872_fu_1485_p2;
reg  signed [5:0] mul_res_872_reg_2948;
wire   [6:0] add_ln370_132_fu_1535_p2;
reg   [6:0] add_ln370_132_reg_2953;
wire   [6:0] add_ln370_134_fu_1541_p2;
reg   [6:0] add_ln370_134_reg_2958;
wire   [6:0] add_ln370_135_fu_1547_p2;
reg   [6:0] add_ln370_135_reg_2963;
wire  signed [5:0] mul_res_879_fu_1703_p2;
reg  signed [5:0] mul_res_879_reg_2968;
wire   [6:0] add_ln370_139_fu_1773_p2;
reg   [6:0] add_ln370_139_reg_2973;
wire   [6:0] add_ln370_141_fu_1779_p2;
reg   [6:0] add_ln370_141_reg_2978;
wire   [6:0] add_ln370_142_fu_1785_p2;
reg   [6:0] add_ln370_142_reg_2983;
wire  signed [5:0] mul_res_886_fu_1871_p2;
reg  signed [5:0] mul_res_886_reg_2988;
wire   [6:0] add_ln370_146_fu_1913_p2;
reg   [6:0] add_ln370_146_reg_2993;
wire   [6:0] add_ln370_148_fu_1919_p2;
reg   [6:0] add_ln370_148_reg_2998;
wire   [6:0] add_ln370_149_fu_1925_p2;
reg   [6:0] add_ln370_149_reg_3003;
wire  signed [5:0] mul_res_893_fu_2011_p2;
reg  signed [5:0] mul_res_893_reg_3008;
wire   [6:0] add_ln370_153_fu_2053_p2;
reg   [6:0] add_ln370_153_reg_3013;
wire   [6:0] add_ln370_155_fu_2059_p2;
reg   [6:0] add_ln370_155_reg_3018;
wire   [6:0] add_ln370_156_fu_2065_p2;
reg   [6:0] add_ln370_156_reg_3023;
wire  signed [5:0] mul_res_900_fu_2151_p2;
reg  signed [5:0] mul_res_900_reg_3028;
wire   [6:0] add_ln370_160_fu_2193_p2;
reg   [6:0] add_ln370_160_reg_3033;
wire   [6:0] add_ln370_162_fu_2199_p2;
reg   [6:0] add_ln370_162_reg_3038;
wire   [6:0] add_ln370_163_fu_2205_p2;
reg   [6:0] add_ln370_163_reg_3043;
wire   [0:0] icmp_ln378_fu_2211_p2;
wire   [9:0] add_ln370_116_fu_2373_p2;
reg   [9:0] add_ln370_116_reg_3052;
wire   [9:0] add_ln370_123_fu_2413_p2;
reg   [9:0] add_ln370_123_reg_3057;
wire   [9:0] add_ln370_130_fu_2453_p2;
reg   [9:0] add_ln370_130_reg_3062;
wire   [9:0] add_ln370_137_fu_2493_p2;
reg   [9:0] add_ln370_137_reg_3067;
wire   [9:0] add_ln370_144_fu_2533_p2;
reg   [9:0] add_ln370_144_reg_3072;
wire   [9:0] add_ln370_151_fu_2573_p2;
reg   [9:0] add_ln370_151_reg_3077;
wire   [9:0] add_ln370_158_fu_2613_p2;
reg   [9:0] add_ln370_158_reg_3082;
wire   [9:0] add_ln370_165_fu_2653_p2;
reg   [9:0] add_ln370_165_reg_3087;
reg   [4:0] cit_fu_302;
wire   [4:0] cit_6_fu_2217_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [9:0] empty_fu_306;
reg   [9:0] empty_1144_fu_310;
reg   [9:0] empty_1145_fu_314;
reg   [9:0] empty_1146_fu_318;
reg   [9:0] empty_1147_fu_322;
reg   [9:0] empty_1148_fu_326;
reg   [9:0] empty_1149_fu_330;
reg   [9:0] empty_1150_fu_334;
reg   [9:0] indvar_flatten_fu_338;
wire   [9:0] select_ln337_6_fu_437_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten33_fu_342;
wire   [15:0] add_ln336_fu_413_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten33_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_431_p2;
wire   [0:0] icmp_ln338_fu_480_p2;
wire   [0:0] xor_ln336_fu_475_p2;
wire   [0:0] and_ln336_fu_486_p2;
wire   [0:0] or_ln337_fu_492_p2;
wire   [4:0] select_ln337_fu_497_p3;
wire   [2:0] lshr_ln_fu_517_p4;
wire   [2:0] trunc_ln353_fu_513_p1;
wire   [2:0] trunc_ln354_fu_533_p1;
wire  signed [2:0] mul_res_fu_823_p0;
wire  signed [5:0] sext_ln368_fu_811_p1;
wire   [2:0] mul_res_fu_823_p1;
wire   [5:0] zext_ln368_fu_807_p1;
wire  signed [5:0] mul_res_fu_823_p2;
wire   [2:0] trunc_ln354_55_fu_537_p4;
wire   [2:0] mul_res_848_fu_845_p0;
wire   [5:0] zext_ln353_fu_527_p1;
wire  signed [2:0] mul_res_848_fu_845_p1;
wire  signed [5:0] sext_ln368_55_fu_833_p1;
wire  signed [5:0] mul_res_848_fu_845_p2;
wire   [2:0] tmp_fu_855_p4;
wire   [2:0] trunc_ln354_56_fu_547_p4;
wire   [2:0] mul_res_849_fu_881_p0;
wire   [5:0] zext_ln368_25_fu_865_p1;
wire  signed [2:0] mul_res_849_fu_881_p1;
wire  signed [5:0] sext_ln368_56_fu_869_p1;
wire  signed [5:0] mul_res_849_fu_881_p2;
wire   [2:0] tmp_96_fu_891_p4;
wire   [2:0] trunc_ln354_57_fu_557_p4;
wire   [2:0] mul_res_850_fu_917_p0;
wire   [5:0] zext_ln368_26_fu_901_p1;
wire  signed [2:0] mul_res_850_fu_917_p1;
wire  signed [5:0] sext_ln368_57_fu_905_p1;
wire  signed [5:0] mul_res_850_fu_917_p2;
wire   [2:0] tmp_97_fu_927_p4;
wire   [2:0] trunc_ln354_58_fu_567_p4;
wire   [2:0] mul_res_851_fu_953_p0;
wire   [5:0] zext_ln368_27_fu_937_p1;
wire  signed [2:0] mul_res_851_fu_953_p1;
wire  signed [5:0] sext_ln368_58_fu_941_p1;
wire   [2:0] tmp_98_fu_959_p4;
wire   [2:0] trunc_ln354_59_fu_577_p4;
wire   [2:0] mul_res_852_fu_985_p0;
wire   [5:0] zext_ln368_28_fu_969_p1;
wire  signed [2:0] mul_res_852_fu_985_p1;
wire  signed [5:0] sext_ln368_59_fu_973_p1;
wire  signed [5:0] mul_res_852_fu_985_p2;
wire   [2:0] tmp_99_fu_995_p4;
wire   [2:0] trunc_ln354_60_fu_587_p4;
wire   [2:0] mul_res_853_fu_1021_p0;
wire   [5:0] zext_ln368_29_fu_1005_p1;
wire  signed [2:0] mul_res_853_fu_1021_p1;
wire  signed [5:0] sext_ln368_60_fu_1009_p1;
wire  signed [5:0] mul_res_853_fu_1021_p2;
wire  signed [6:0] sext_ln368_112_fu_991_p1;
wire  signed [6:0] sext_ln368_111_fu_923_p1;
wire  signed [6:0] sext_ln368_110_fu_887_p1;
wire  signed [6:0] sext_ln368_109_fu_851_p1;
wire  signed [6:0] sext_ln368_108_fu_829_p1;
wire  signed [6:0] sext_ln370_95_fu_1027_p1;
wire   [2:0] trunc_ln354_61_fu_597_p4;
wire  signed [2:0] mul_res_854_fu_1061_p0;
wire  signed [5:0] sext_ln368_61_fu_1049_p1;
wire   [2:0] mul_res_854_fu_1061_p1;
wire  signed [5:0] mul_res_854_fu_1061_p2;
wire   [2:0] trunc_ln354_62_fu_607_p4;
wire   [2:0] mul_res_855_fu_1083_p0;
wire  signed [2:0] mul_res_855_fu_1083_p1;
wire  signed [5:0] sext_ln368_62_fu_1071_p1;
wire  signed [5:0] mul_res_855_fu_1083_p2;
wire   [2:0] trunc_ln354_63_fu_617_p4;
wire   [2:0] mul_res_856_fu_1105_p0;
wire  signed [2:0] mul_res_856_fu_1105_p1;
wire  signed [5:0] sext_ln368_63_fu_1093_p1;
wire  signed [5:0] mul_res_856_fu_1105_p2;
wire   [2:0] trunc_ln354_64_fu_627_p4;
wire   [2:0] mul_res_857_fu_1127_p0;
wire  signed [2:0] mul_res_857_fu_1127_p1;
wire  signed [5:0] sext_ln368_64_fu_1115_p1;
wire  signed [5:0] mul_res_857_fu_1127_p2;
wire   [2:0] trunc_ln354_65_fu_637_p4;
wire   [2:0] mul_res_858_fu_1149_p0;
wire  signed [2:0] mul_res_858_fu_1149_p1;
wire  signed [5:0] sext_ln368_65_fu_1137_p1;
wire   [2:0] trunc_ln354_66_fu_647_p4;
wire   [2:0] mul_res_859_fu_1167_p0;
wire  signed [2:0] mul_res_859_fu_1167_p1;
wire  signed [5:0] sext_ln368_66_fu_1155_p1;
wire  signed [5:0] mul_res_859_fu_1167_p2;
wire   [2:0] trunc_ln354_67_fu_657_p4;
wire   [2:0] mul_res_860_fu_1189_p0;
wire  signed [2:0] mul_res_860_fu_1189_p1;
wire  signed [5:0] sext_ln368_67_fu_1177_p1;
wire  signed [5:0] mul_res_860_fu_1189_p2;
wire  signed [6:0] sext_ln368_117_fu_1173_p1;
wire  signed [6:0] sext_ln368_116_fu_1133_p1;
wire  signed [6:0] sext_ln368_115_fu_1111_p1;
wire  signed [6:0] sext_ln368_114_fu_1089_p1;
wire  signed [6:0] sext_ln368_113_fu_1067_p1;
wire  signed [6:0] sext_ln370_101_fu_1195_p1;
wire   [2:0] trunc_ln354_68_fu_667_p4;
wire  signed [2:0] mul_res_861_fu_1229_p0;
wire  signed [5:0] sext_ln368_68_fu_1217_p1;
wire   [2:0] mul_res_861_fu_1229_p1;
wire  signed [5:0] mul_res_861_fu_1229_p2;
wire   [2:0] trunc_ln354_69_fu_677_p4;
wire   [2:0] mul_res_862_fu_1251_p0;
wire  signed [2:0] mul_res_862_fu_1251_p1;
wire  signed [5:0] sext_ln368_69_fu_1239_p1;
wire  signed [5:0] mul_res_862_fu_1251_p2;
wire   [2:0] trunc_ln354_70_fu_687_p4;
wire   [2:0] mul_res_863_fu_1273_p0;
wire  signed [2:0] mul_res_863_fu_1273_p1;
wire  signed [5:0] sext_ln368_70_fu_1261_p1;
wire  signed [5:0] mul_res_863_fu_1273_p2;
wire   [2:0] trunc_ln354_71_fu_697_p4;
wire   [2:0] mul_res_864_fu_1295_p0;
wire  signed [2:0] mul_res_864_fu_1295_p1;
wire  signed [5:0] sext_ln368_71_fu_1283_p1;
wire  signed [5:0] mul_res_864_fu_1295_p2;
wire   [2:0] trunc_ln354_72_fu_707_p4;
wire   [2:0] mul_res_865_fu_1317_p0;
wire  signed [2:0] mul_res_865_fu_1317_p1;
wire  signed [5:0] sext_ln368_72_fu_1305_p1;
wire   [2:0] trunc_ln354_73_fu_717_p4;
wire   [2:0] mul_res_866_fu_1335_p0;
wire  signed [2:0] mul_res_866_fu_1335_p1;
wire  signed [5:0] sext_ln368_73_fu_1323_p1;
wire  signed [5:0] mul_res_866_fu_1335_p2;
wire   [2:0] trunc_ln354_74_fu_727_p4;
wire   [2:0] mul_res_867_fu_1357_p0;
wire  signed [2:0] mul_res_867_fu_1357_p1;
wire  signed [5:0] sext_ln368_74_fu_1345_p1;
wire  signed [5:0] mul_res_867_fu_1357_p2;
wire  signed [6:0] sext_ln368_122_fu_1341_p1;
wire  signed [6:0] sext_ln368_121_fu_1301_p1;
wire  signed [6:0] sext_ln368_120_fu_1279_p1;
wire  signed [6:0] sext_ln368_119_fu_1257_p1;
wire  signed [6:0] sext_ln368_118_fu_1235_p1;
wire  signed [6:0] sext_ln370_107_fu_1363_p1;
wire   [2:0] trunc_ln354_75_fu_737_p4;
wire  signed [2:0] mul_res_868_fu_1397_p0;
wire  signed [5:0] sext_ln368_75_fu_1385_p1;
wire   [2:0] mul_res_868_fu_1397_p1;
wire  signed [5:0] mul_res_868_fu_1397_p2;
wire   [2:0] trunc_ln354_76_fu_747_p4;
wire   [2:0] mul_res_869_fu_1419_p0;
wire  signed [2:0] mul_res_869_fu_1419_p1;
wire  signed [5:0] sext_ln368_76_fu_1407_p1;
wire  signed [5:0] mul_res_869_fu_1419_p2;
wire   [2:0] trunc_ln354_77_fu_757_p4;
wire   [2:0] mul_res_870_fu_1441_p0;
wire  signed [2:0] mul_res_870_fu_1441_p1;
wire  signed [5:0] sext_ln368_77_fu_1429_p1;
wire  signed [5:0] mul_res_870_fu_1441_p2;
wire   [2:0] trunc_ln354_78_fu_767_p4;
wire   [2:0] mul_res_871_fu_1463_p0;
wire  signed [2:0] mul_res_871_fu_1463_p1;
wire  signed [5:0] sext_ln368_78_fu_1451_p1;
wire  signed [5:0] mul_res_871_fu_1463_p2;
wire   [2:0] trunc_ln354_79_fu_777_p4;
wire   [2:0] mul_res_872_fu_1485_p0;
wire  signed [2:0] mul_res_872_fu_1485_p1;
wire  signed [5:0] sext_ln368_79_fu_1473_p1;
wire   [2:0] trunc_ln354_s_fu_787_p4;
wire   [2:0] mul_res_873_fu_1503_p0;
wire  signed [2:0] mul_res_873_fu_1503_p1;
wire  signed [5:0] sext_ln368_80_fu_1491_p1;
wire  signed [5:0] mul_res_873_fu_1503_p2;
wire   [2:0] trunc_ln354_80_fu_797_p4;
wire   [2:0] mul_res_874_fu_1525_p0;
wire  signed [2:0] mul_res_874_fu_1525_p1;
wire  signed [5:0] sext_ln368_81_fu_1513_p1;
wire  signed [5:0] mul_res_874_fu_1525_p2;
wire  signed [6:0] sext_ln368_127_fu_1509_p1;
wire  signed [6:0] sext_ln368_126_fu_1469_p1;
wire  signed [6:0] sext_ln368_125_fu_1447_p1;
wire  signed [6:0] sext_ln368_124_fu_1425_p1;
wire  signed [6:0] sext_ln368_123_fu_1403_p1;
wire  signed [6:0] sext_ln370_113_fu_1531_p1;
wire   [2:0] tmp_100_fu_1553_p4;
wire   [2:0] mul_res_875_fu_1575_p0;
wire   [5:0] zext_ln368_30_fu_1563_p1;
wire  signed [2:0] mul_res_875_fu_1575_p1;
wire  signed [5:0] mul_res_875_fu_1575_p2;
wire   [2:0] tmp_101_fu_1585_p4;
wire   [2:0] mul_res_876_fu_1607_p0;
wire   [5:0] zext_ln368_31_fu_1595_p1;
wire  signed [2:0] mul_res_876_fu_1607_p1;
wire  signed [5:0] mul_res_876_fu_1607_p2;
wire   [2:0] tmp_102_fu_1617_p4;
wire   [2:0] mul_res_877_fu_1639_p0;
wire   [5:0] zext_ln368_32_fu_1627_p1;
wire  signed [2:0] mul_res_877_fu_1639_p1;
wire  signed [5:0] mul_res_877_fu_1639_p2;
wire   [2:0] tmp_103_fu_1649_p4;
wire   [2:0] mul_res_878_fu_1671_p0;
wire   [5:0] zext_ln368_33_fu_1659_p1;
wire  signed [2:0] mul_res_878_fu_1671_p1;
wire  signed [5:0] mul_res_878_fu_1671_p2;
wire   [2:0] tmp_104_fu_1681_p4;
wire   [2:0] mul_res_879_fu_1703_p0;
wire   [5:0] zext_ln368_34_fu_1691_p1;
wire  signed [2:0] mul_res_879_fu_1703_p1;
wire   [2:0] tmp_105_fu_1709_p4;
wire   [2:0] mul_res_880_fu_1731_p0;
wire   [5:0] zext_ln368_35_fu_1719_p1;
wire  signed [2:0] mul_res_880_fu_1731_p1;
wire  signed [5:0] mul_res_880_fu_1731_p2;
wire   [2:0] tmp_106_fu_1741_p4;
wire   [2:0] mul_res_881_fu_1763_p0;
wire   [5:0] zext_ln368_36_fu_1751_p1;
wire  signed [2:0] mul_res_881_fu_1763_p1;
wire  signed [5:0] mul_res_881_fu_1763_p2;
wire  signed [6:0] sext_ln368_132_fu_1737_p1;
wire  signed [6:0] sext_ln368_131_fu_1677_p1;
wire  signed [6:0] sext_ln368_130_fu_1645_p1;
wire  signed [6:0] sext_ln368_129_fu_1613_p1;
wire  signed [6:0] sext_ln368_128_fu_1581_p1;
wire  signed [6:0] sext_ln370_119_fu_1769_p1;
wire   [2:0] mul_res_882_fu_1799_p0;
wire  signed [2:0] mul_res_882_fu_1799_p1;
wire  signed [5:0] mul_res_882_fu_1799_p2;
wire   [2:0] mul_res_883_fu_1817_p0;
wire  signed [2:0] mul_res_883_fu_1817_p1;
wire  signed [5:0] mul_res_883_fu_1817_p2;
wire   [2:0] mul_res_884_fu_1835_p0;
wire  signed [2:0] mul_res_884_fu_1835_p1;
wire  signed [5:0] mul_res_884_fu_1835_p2;
wire   [2:0] mul_res_885_fu_1853_p0;
wire  signed [2:0] mul_res_885_fu_1853_p1;
wire  signed [5:0] mul_res_885_fu_1853_p2;
wire   [2:0] mul_res_886_fu_1871_p0;
wire  signed [2:0] mul_res_886_fu_1871_p1;
wire   [2:0] mul_res_887_fu_1885_p0;
wire  signed [2:0] mul_res_887_fu_1885_p1;
wire  signed [5:0] mul_res_887_fu_1885_p2;
wire   [2:0] mul_res_888_fu_1903_p0;
wire  signed [2:0] mul_res_888_fu_1903_p1;
wire  signed [5:0] mul_res_888_fu_1903_p2;
wire  signed [6:0] sext_ln368_137_fu_1891_p1;
wire  signed [6:0] sext_ln368_136_fu_1859_p1;
wire  signed [6:0] sext_ln368_135_fu_1841_p1;
wire  signed [6:0] sext_ln368_134_fu_1823_p1;
wire  signed [6:0] sext_ln368_133_fu_1805_p1;
wire  signed [6:0] sext_ln370_125_fu_1909_p1;
wire   [2:0] mul_res_889_fu_1939_p0;
wire  signed [2:0] mul_res_889_fu_1939_p1;
wire  signed [5:0] mul_res_889_fu_1939_p2;
wire   [2:0] mul_res_890_fu_1957_p0;
wire  signed [2:0] mul_res_890_fu_1957_p1;
wire  signed [5:0] mul_res_890_fu_1957_p2;
wire   [2:0] mul_res_891_fu_1975_p0;
wire  signed [2:0] mul_res_891_fu_1975_p1;
wire  signed [5:0] mul_res_891_fu_1975_p2;
wire   [2:0] mul_res_892_fu_1993_p0;
wire  signed [2:0] mul_res_892_fu_1993_p1;
wire  signed [5:0] mul_res_892_fu_1993_p2;
wire   [2:0] mul_res_893_fu_2011_p0;
wire  signed [2:0] mul_res_893_fu_2011_p1;
wire   [2:0] mul_res_894_fu_2025_p0;
wire  signed [2:0] mul_res_894_fu_2025_p1;
wire  signed [5:0] mul_res_894_fu_2025_p2;
wire   [2:0] mul_res_895_fu_2043_p0;
wire  signed [2:0] mul_res_895_fu_2043_p1;
wire  signed [5:0] mul_res_895_fu_2043_p2;
wire  signed [6:0] sext_ln368_142_fu_2031_p1;
wire  signed [6:0] sext_ln368_141_fu_1999_p1;
wire  signed [6:0] sext_ln368_140_fu_1981_p1;
wire  signed [6:0] sext_ln368_139_fu_1963_p1;
wire  signed [6:0] sext_ln368_138_fu_1945_p1;
wire  signed [6:0] sext_ln370_131_fu_2049_p1;
wire   [2:0] mul_res_896_fu_2079_p0;
wire  signed [2:0] mul_res_896_fu_2079_p1;
wire  signed [5:0] mul_res_896_fu_2079_p2;
wire   [2:0] mul_res_897_fu_2097_p0;
wire  signed [2:0] mul_res_897_fu_2097_p1;
wire  signed [5:0] mul_res_897_fu_2097_p2;
wire   [2:0] mul_res_898_fu_2115_p0;
wire  signed [2:0] mul_res_898_fu_2115_p1;
wire  signed [5:0] mul_res_898_fu_2115_p2;
wire   [2:0] mul_res_899_fu_2133_p0;
wire  signed [2:0] mul_res_899_fu_2133_p1;
wire  signed [5:0] mul_res_899_fu_2133_p2;
wire   [2:0] mul_res_900_fu_2151_p0;
wire  signed [2:0] mul_res_900_fu_2151_p1;
wire   [2:0] mul_res_901_fu_2165_p0;
wire  signed [2:0] mul_res_901_fu_2165_p1;
wire  signed [5:0] mul_res_901_fu_2165_p2;
wire   [2:0] mul_res_902_fu_2183_p0;
wire  signed [2:0] mul_res_902_fu_2183_p1;
wire  signed [5:0] mul_res_902_fu_2183_p2;
wire  signed [6:0] sext_ln368_147_fu_2171_p1;
wire  signed [6:0] sext_ln368_146_fu_2139_p1;
wire  signed [6:0] sext_ln368_145_fu_2121_p1;
wire  signed [6:0] sext_ln368_144_fu_2103_p1;
wire  signed [6:0] sext_ln368_143_fu_2085_p1;
wire  signed [6:0] sext_ln370_137_fu_2189_p1;
wire  signed [9:0] sext_ln370_96_fu_2342_p1;
wire  signed [9:0] sext_ln370_fu_2339_p1;
wire  signed [7:0] sext_ln370_98_fu_2354_p1;
wire  signed [7:0] sext_ln370_97_fu_2351_p1;
wire   [7:0] add_ln370_115_fu_2357_p2;
wire  signed [9:0] sext_ln370_99_fu_2363_p1;
wire   [9:0] add_ln370_fu_2345_p2;
wire   [9:0] add_ln370_112_fu_2367_p2;
wire   [9:0] select_ln342_21_fu_2332_p3;
wire  signed [9:0] sext_ln370_102_fu_2382_p1;
wire  signed [9:0] sext_ln370_100_fu_2379_p1;
wire  signed [7:0] sext_ln370_104_fu_2394_p1;
wire  signed [7:0] sext_ln370_103_fu_2391_p1;
wire   [7:0] add_ln370_122_fu_2397_p2;
wire  signed [9:0] sext_ln370_105_fu_2403_p1;
wire   [9:0] add_ln370_117_fu_2385_p2;
wire   [9:0] add_ln370_119_fu_2407_p2;
wire   [9:0] select_ln342_20_fu_2325_p3;
wire  signed [9:0] sext_ln370_108_fu_2422_p1;
wire  signed [9:0] sext_ln370_106_fu_2419_p1;
wire  signed [7:0] sext_ln370_110_fu_2434_p1;
wire  signed [7:0] sext_ln370_109_fu_2431_p1;
wire   [7:0] add_ln370_129_fu_2437_p2;
wire  signed [9:0] sext_ln370_111_fu_2443_p1;
wire   [9:0] add_ln370_124_fu_2425_p2;
wire   [9:0] add_ln370_126_fu_2447_p2;
wire   [9:0] select_ln342_19_fu_2318_p3;
wire  signed [9:0] sext_ln370_114_fu_2462_p1;
wire  signed [9:0] sext_ln370_112_fu_2459_p1;
wire  signed [7:0] sext_ln370_116_fu_2474_p1;
wire  signed [7:0] sext_ln370_115_fu_2471_p1;
wire   [7:0] add_ln370_136_fu_2477_p2;
wire  signed [9:0] sext_ln370_117_fu_2483_p1;
wire   [9:0] add_ln370_131_fu_2465_p2;
wire   [9:0] add_ln370_133_fu_2487_p2;
wire   [9:0] select_ln342_18_fu_2311_p3;
wire  signed [9:0] sext_ln370_120_fu_2502_p1;
wire  signed [9:0] sext_ln370_118_fu_2499_p1;
wire  signed [7:0] sext_ln370_122_fu_2514_p1;
wire  signed [7:0] sext_ln370_121_fu_2511_p1;
wire   [7:0] add_ln370_143_fu_2517_p2;
wire  signed [9:0] sext_ln370_123_fu_2523_p1;
wire   [9:0] add_ln370_138_fu_2505_p2;
wire   [9:0] add_ln370_140_fu_2527_p2;
wire   [9:0] select_ln342_17_fu_2304_p3;
wire  signed [9:0] sext_ln370_126_fu_2542_p1;
wire  signed [9:0] sext_ln370_124_fu_2539_p1;
wire  signed [7:0] sext_ln370_128_fu_2554_p1;
wire  signed [7:0] sext_ln370_127_fu_2551_p1;
wire   [7:0] add_ln370_150_fu_2557_p2;
wire  signed [9:0] sext_ln370_129_fu_2563_p1;
wire   [9:0] add_ln370_145_fu_2545_p2;
wire   [9:0] add_ln370_147_fu_2567_p2;
wire   [9:0] select_ln342_16_fu_2297_p3;
wire  signed [9:0] sext_ln370_132_fu_2582_p1;
wire  signed [9:0] sext_ln370_130_fu_2579_p1;
wire  signed [7:0] sext_ln370_134_fu_2594_p1;
wire  signed [7:0] sext_ln370_133_fu_2591_p1;
wire   [7:0] add_ln370_157_fu_2597_p2;
wire  signed [9:0] sext_ln370_135_fu_2603_p1;
wire   [9:0] add_ln370_152_fu_2585_p2;
wire   [9:0] add_ln370_154_fu_2607_p2;
wire   [9:0] select_ln342_15_fu_2290_p3;
wire  signed [9:0] sext_ln370_138_fu_2622_p1;
wire  signed [9:0] sext_ln370_136_fu_2619_p1;
wire  signed [7:0] sext_ln370_140_fu_2634_p1;
wire  signed [7:0] sext_ln370_139_fu_2631_p1;
wire   [7:0] add_ln370_164_fu_2637_p2;
wire  signed [9:0] sext_ln370_141_fu_2643_p1;
wire   [9:0] add_ln370_159_fu_2625_p2;
wire   [9:0] add_ln370_161_fu_2647_p2;
wire   [9:0] select_ln342_fu_2283_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_245;
reg    ap_condition_286;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_302 = 5'd0;
//#0 empty_fu_306 = 10'd0;
//#0 empty_1144_fu_310 = 10'd0;
//#0 empty_1145_fu_314 = 10'd0;
//#0 empty_1146_fu_318 = 10'd0;
//#0 empty_1147_fu_322 = 10'd0;
//#0 empty_1148_fu_326 = 10'd0;
//#0 empty_1149_fu_330 = 10'd0;
//#0 empty_1150_fu_334 = 10'd0;
//#0 indvar_flatten_fu_338 = 10'd0;
//#0 indvar_flatten33_fu_342 = 16'd0;
end

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1057(
    .din0(mul_res_fu_823_p0),
    .din1(mul_res_fu_823_p1),
    .dout(mul_res_fu_823_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1058(
    .din0(mul_res_848_fu_845_p0),
    .din1(mul_res_848_fu_845_p1),
    .dout(mul_res_848_fu_845_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1059(
    .din0(mul_res_849_fu_881_p0),
    .din1(mul_res_849_fu_881_p1),
    .dout(mul_res_849_fu_881_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1060(
    .din0(mul_res_850_fu_917_p0),
    .din1(mul_res_850_fu_917_p1),
    .dout(mul_res_850_fu_917_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1061(
    .din0(mul_res_851_fu_953_p0),
    .din1(mul_res_851_fu_953_p1),
    .dout(mul_res_851_fu_953_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1062(
    .din0(mul_res_852_fu_985_p0),
    .din1(mul_res_852_fu_985_p1),
    .dout(mul_res_852_fu_985_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1063(
    .din0(mul_res_853_fu_1021_p0),
    .din1(mul_res_853_fu_1021_p1),
    .dout(mul_res_853_fu_1021_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1064(
    .din0(mul_res_854_fu_1061_p0),
    .din1(mul_res_854_fu_1061_p1),
    .dout(mul_res_854_fu_1061_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1065(
    .din0(mul_res_855_fu_1083_p0),
    .din1(mul_res_855_fu_1083_p1),
    .dout(mul_res_855_fu_1083_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1066(
    .din0(mul_res_856_fu_1105_p0),
    .din1(mul_res_856_fu_1105_p1),
    .dout(mul_res_856_fu_1105_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1067(
    .din0(mul_res_857_fu_1127_p0),
    .din1(mul_res_857_fu_1127_p1),
    .dout(mul_res_857_fu_1127_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1068(
    .din0(mul_res_858_fu_1149_p0),
    .din1(mul_res_858_fu_1149_p1),
    .dout(mul_res_858_fu_1149_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1069(
    .din0(mul_res_859_fu_1167_p0),
    .din1(mul_res_859_fu_1167_p1),
    .dout(mul_res_859_fu_1167_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1070(
    .din0(mul_res_860_fu_1189_p0),
    .din1(mul_res_860_fu_1189_p1),
    .dout(mul_res_860_fu_1189_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1071(
    .din0(mul_res_861_fu_1229_p0),
    .din1(mul_res_861_fu_1229_p1),
    .dout(mul_res_861_fu_1229_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1072(
    .din0(mul_res_862_fu_1251_p0),
    .din1(mul_res_862_fu_1251_p1),
    .dout(mul_res_862_fu_1251_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1073(
    .din0(mul_res_863_fu_1273_p0),
    .din1(mul_res_863_fu_1273_p1),
    .dout(mul_res_863_fu_1273_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1074(
    .din0(mul_res_864_fu_1295_p0),
    .din1(mul_res_864_fu_1295_p1),
    .dout(mul_res_864_fu_1295_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1075(
    .din0(mul_res_865_fu_1317_p0),
    .din1(mul_res_865_fu_1317_p1),
    .dout(mul_res_865_fu_1317_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1076(
    .din0(mul_res_866_fu_1335_p0),
    .din1(mul_res_866_fu_1335_p1),
    .dout(mul_res_866_fu_1335_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1077(
    .din0(mul_res_867_fu_1357_p0),
    .din1(mul_res_867_fu_1357_p1),
    .dout(mul_res_867_fu_1357_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1078(
    .din0(mul_res_868_fu_1397_p0),
    .din1(mul_res_868_fu_1397_p1),
    .dout(mul_res_868_fu_1397_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1079(
    .din0(mul_res_869_fu_1419_p0),
    .din1(mul_res_869_fu_1419_p1),
    .dout(mul_res_869_fu_1419_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1080(
    .din0(mul_res_870_fu_1441_p0),
    .din1(mul_res_870_fu_1441_p1),
    .dout(mul_res_870_fu_1441_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1081(
    .din0(mul_res_871_fu_1463_p0),
    .din1(mul_res_871_fu_1463_p1),
    .dout(mul_res_871_fu_1463_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1082(
    .din0(mul_res_872_fu_1485_p0),
    .din1(mul_res_872_fu_1485_p1),
    .dout(mul_res_872_fu_1485_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1083(
    .din0(mul_res_873_fu_1503_p0),
    .din1(mul_res_873_fu_1503_p1),
    .dout(mul_res_873_fu_1503_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1084(
    .din0(mul_res_874_fu_1525_p0),
    .din1(mul_res_874_fu_1525_p1),
    .dout(mul_res_874_fu_1525_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1085(
    .din0(mul_res_875_fu_1575_p0),
    .din1(mul_res_875_fu_1575_p1),
    .dout(mul_res_875_fu_1575_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1086(
    .din0(mul_res_876_fu_1607_p0),
    .din1(mul_res_876_fu_1607_p1),
    .dout(mul_res_876_fu_1607_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1087(
    .din0(mul_res_877_fu_1639_p0),
    .din1(mul_res_877_fu_1639_p1),
    .dout(mul_res_877_fu_1639_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1088(
    .din0(mul_res_878_fu_1671_p0),
    .din1(mul_res_878_fu_1671_p1),
    .dout(mul_res_878_fu_1671_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1089(
    .din0(mul_res_879_fu_1703_p0),
    .din1(mul_res_879_fu_1703_p1),
    .dout(mul_res_879_fu_1703_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1090(
    .din0(mul_res_880_fu_1731_p0),
    .din1(mul_res_880_fu_1731_p1),
    .dout(mul_res_880_fu_1731_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1091(
    .din0(mul_res_881_fu_1763_p0),
    .din1(mul_res_881_fu_1763_p1),
    .dout(mul_res_881_fu_1763_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1092(
    .din0(mul_res_882_fu_1799_p0),
    .din1(mul_res_882_fu_1799_p1),
    .dout(mul_res_882_fu_1799_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1093(
    .din0(mul_res_883_fu_1817_p0),
    .din1(mul_res_883_fu_1817_p1),
    .dout(mul_res_883_fu_1817_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1094(
    .din0(mul_res_884_fu_1835_p0),
    .din1(mul_res_884_fu_1835_p1),
    .dout(mul_res_884_fu_1835_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1095(
    .din0(mul_res_885_fu_1853_p0),
    .din1(mul_res_885_fu_1853_p1),
    .dout(mul_res_885_fu_1853_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1096(
    .din0(mul_res_886_fu_1871_p0),
    .din1(mul_res_886_fu_1871_p1),
    .dout(mul_res_886_fu_1871_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1097(
    .din0(mul_res_887_fu_1885_p0),
    .din1(mul_res_887_fu_1885_p1),
    .dout(mul_res_887_fu_1885_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1098(
    .din0(mul_res_888_fu_1903_p0),
    .din1(mul_res_888_fu_1903_p1),
    .dout(mul_res_888_fu_1903_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1099(
    .din0(mul_res_889_fu_1939_p0),
    .din1(mul_res_889_fu_1939_p1),
    .dout(mul_res_889_fu_1939_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1100(
    .din0(mul_res_890_fu_1957_p0),
    .din1(mul_res_890_fu_1957_p1),
    .dout(mul_res_890_fu_1957_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1101(
    .din0(mul_res_891_fu_1975_p0),
    .din1(mul_res_891_fu_1975_p1),
    .dout(mul_res_891_fu_1975_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1102(
    .din0(mul_res_892_fu_1993_p0),
    .din1(mul_res_892_fu_1993_p1),
    .dout(mul_res_892_fu_1993_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1103(
    .din0(mul_res_893_fu_2011_p0),
    .din1(mul_res_893_fu_2011_p1),
    .dout(mul_res_893_fu_2011_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1104(
    .din0(mul_res_894_fu_2025_p0),
    .din1(mul_res_894_fu_2025_p1),
    .dout(mul_res_894_fu_2025_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1105(
    .din0(mul_res_895_fu_2043_p0),
    .din1(mul_res_895_fu_2043_p1),
    .dout(mul_res_895_fu_2043_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1106(
    .din0(mul_res_896_fu_2079_p0),
    .din1(mul_res_896_fu_2079_p1),
    .dout(mul_res_896_fu_2079_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1107(
    .din0(mul_res_897_fu_2097_p0),
    .din1(mul_res_897_fu_2097_p1),
    .dout(mul_res_897_fu_2097_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1108(
    .din0(mul_res_898_fu_2115_p0),
    .din1(mul_res_898_fu_2115_p1),
    .dout(mul_res_898_fu_2115_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1109(
    .din0(mul_res_899_fu_2133_p0),
    .din1(mul_res_899_fu_2133_p1),
    .dout(mul_res_899_fu_2133_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1110(
    .din0(mul_res_900_fu_2151_p0),
    .din1(mul_res_900_fu_2151_p1),
    .dout(mul_res_900_fu_2151_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1111(
    .din0(mul_res_901_fu_2165_p0),
    .din1(mul_res_901_fu_2165_p1),
    .dout(mul_res_901_fu_2165_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1112(
    .din0(mul_res_902_fu_2183_p0),
    .din1(mul_res_902_fu_2183_p1),
    .dout(mul_res_902_fu_2183_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_245)) begin
        cit_fu_302 <= cit_6_fu_2217_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_286)) begin
    if ((icmp_ln336_fu_419_p2 == 1'd0)) begin
        indvar_flatten33_fu_342 <= add_ln336_fu_413_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten33_fu_342 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_286)) begin
    if ((icmp_ln336_fu_419_p2 == 1'd0)) begin
        indvar_flatten_fu_338 <= select_ln337_6_fu_437_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_338 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln370_111_reg_2893 <= add_ln370_111_fu_1031_p2;
        add_ln370_113_reg_2898 <= add_ln370_113_fu_1037_p2;
        add_ln370_114_reg_2903 <= add_ln370_114_fu_1043_p2;
        add_ln370_118_reg_2913 <= add_ln370_118_fu_1199_p2;
        add_ln370_120_reg_2918 <= add_ln370_120_fu_1205_p2;
        add_ln370_121_reg_2923 <= add_ln370_121_fu_1211_p2;
        add_ln370_125_reg_2933 <= add_ln370_125_fu_1367_p2;
        add_ln370_127_reg_2938 <= add_ln370_127_fu_1373_p2;
        add_ln370_128_reg_2943 <= add_ln370_128_fu_1379_p2;
        add_ln370_132_reg_2953 <= add_ln370_132_fu_1535_p2;
        add_ln370_134_reg_2958 <= add_ln370_134_fu_1541_p2;
        add_ln370_135_reg_2963 <= add_ln370_135_fu_1547_p2;
        add_ln370_139_reg_2973 <= add_ln370_139_fu_1773_p2;
        add_ln370_141_reg_2978 <= add_ln370_141_fu_1779_p2;
        add_ln370_142_reg_2983 <= add_ln370_142_fu_1785_p2;
        add_ln370_146_reg_2993 <= add_ln370_146_fu_1913_p2;
        add_ln370_148_reg_2998 <= add_ln370_148_fu_1919_p2;
        add_ln370_149_reg_3003 <= add_ln370_149_fu_1925_p2;
        add_ln370_153_reg_3013 <= add_ln370_153_fu_2053_p2;
        add_ln370_155_reg_3018 <= add_ln370_155_fu_2059_p2;
        add_ln370_156_reg_3023 <= add_ln370_156_fu_2065_p2;
        add_ln370_160_reg_3033 <= add_ln370_160_fu_2193_p2;
        add_ln370_162_reg_3038 <= add_ln370_162_fu_2199_p2;
        add_ln370_163_reg_3043 <= add_ln370_163_fu_2205_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln337_reg_2870 <= icmp_ln337_fu_425_p2;
        icmp_ln342_reg_2876 <= icmp_ln342_fu_505_p2;
        icmp_ln378_reg_3048 <= icmp_ln378_fu_2211_p2;
        mul_res_851_reg_2888 <= mul_res_851_fu_953_p2;
        mul_res_858_reg_2908 <= mul_res_858_fu_1149_p2;
        mul_res_865_reg_2928 <= mul_res_865_fu_1317_p2;
        mul_res_872_reg_2948 <= mul_res_872_fu_1485_p2;
        mul_res_879_reg_2968 <= mul_res_879_fu_1703_p2;
        mul_res_886_reg_2988 <= mul_res_886_fu_1871_p2;
        mul_res_893_reg_3008 <= mul_res_893_fu_2011_p2;
        mul_res_900_reg_3028 <= mul_res_900_fu_2151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln370_116_reg_3052 <= add_ln370_116_fu_2373_p2;
        add_ln370_123_reg_3057 <= add_ln370_123_fu_2413_p2;
        add_ln370_130_reg_3062 <= add_ln370_130_fu_2453_p2;
        add_ln370_137_reg_3067 <= add_ln370_137_fu_2493_p2;
        add_ln370_144_reg_3072 <= add_ln370_144_fu_2533_p2;
        add_ln370_151_reg_3077 <= add_ln370_151_fu_2573_p2;
        add_ln370_158_reg_3082 <= add_ln370_158_fu_2613_p2;
        add_ln370_165_reg_3087 <= add_ln370_165_fu_2653_p2;
        icmp_ln378_reg_3048_pp0_iter2_reg <= icmp_ln378_reg_3048;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_1144_fu_310 <= add_ln370_123_fu_2413_p2;
        empty_1145_fu_314 <= add_ln370_130_fu_2453_p2;
        empty_1146_fu_318 <= add_ln370_137_fu_2493_p2;
        empty_1147_fu_322 <= add_ln370_144_fu_2533_p2;
        empty_1148_fu_326 <= add_ln370_151_fu_2573_p2;
        empty_1149_fu_330 <= add_ln370_158_fu_2613_p2;
        empty_1150_fu_334 <= add_ln370_165_fu_2653_p2;
        empty_fu_306 <= add_ln370_116_fu_2373_p2;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_419_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_302;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_342;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_338;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_413_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 16'd1);

assign add_ln337_fu_431_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln370_111_fu_1031_p2 = ($signed(sext_ln368_112_fu_991_p1) + $signed(sext_ln368_111_fu_923_p1));

assign add_ln370_112_fu_2367_p2 = ($signed(sext_ln370_99_fu_2363_p1) + $signed(add_ln370_fu_2345_p2));

assign add_ln370_113_fu_1037_p2 = ($signed(sext_ln368_110_fu_887_p1) + $signed(sext_ln368_109_fu_851_p1));

assign add_ln370_114_fu_1043_p2 = ($signed(sext_ln368_108_fu_829_p1) + $signed(sext_ln370_95_fu_1027_p1));

assign add_ln370_115_fu_2357_p2 = ($signed(sext_ln370_98_fu_2354_p1) + $signed(sext_ln370_97_fu_2351_p1));

assign add_ln370_116_fu_2373_p2 = (add_ln370_112_fu_2367_p2 + select_ln342_21_fu_2332_p3);

assign add_ln370_117_fu_2385_p2 = ($signed(sext_ln370_102_fu_2382_p1) + $signed(sext_ln370_100_fu_2379_p1));

assign add_ln370_118_fu_1199_p2 = ($signed(sext_ln368_117_fu_1173_p1) + $signed(sext_ln368_116_fu_1133_p1));

assign add_ln370_119_fu_2407_p2 = ($signed(sext_ln370_105_fu_2403_p1) + $signed(add_ln370_117_fu_2385_p2));

assign add_ln370_120_fu_1205_p2 = ($signed(sext_ln368_115_fu_1111_p1) + $signed(sext_ln368_114_fu_1089_p1));

assign add_ln370_121_fu_1211_p2 = ($signed(sext_ln368_113_fu_1067_p1) + $signed(sext_ln370_101_fu_1195_p1));

assign add_ln370_122_fu_2397_p2 = ($signed(sext_ln370_104_fu_2394_p1) + $signed(sext_ln370_103_fu_2391_p1));

assign add_ln370_123_fu_2413_p2 = (add_ln370_119_fu_2407_p2 + select_ln342_20_fu_2325_p3);

assign add_ln370_124_fu_2425_p2 = ($signed(sext_ln370_108_fu_2422_p1) + $signed(sext_ln370_106_fu_2419_p1));

assign add_ln370_125_fu_1367_p2 = ($signed(sext_ln368_122_fu_1341_p1) + $signed(sext_ln368_121_fu_1301_p1));

assign add_ln370_126_fu_2447_p2 = ($signed(sext_ln370_111_fu_2443_p1) + $signed(add_ln370_124_fu_2425_p2));

assign add_ln370_127_fu_1373_p2 = ($signed(sext_ln368_120_fu_1279_p1) + $signed(sext_ln368_119_fu_1257_p1));

assign add_ln370_128_fu_1379_p2 = ($signed(sext_ln368_118_fu_1235_p1) + $signed(sext_ln370_107_fu_1363_p1));

assign add_ln370_129_fu_2437_p2 = ($signed(sext_ln370_110_fu_2434_p1) + $signed(sext_ln370_109_fu_2431_p1));

assign add_ln370_130_fu_2453_p2 = (add_ln370_126_fu_2447_p2 + select_ln342_19_fu_2318_p3);

assign add_ln370_131_fu_2465_p2 = ($signed(sext_ln370_114_fu_2462_p1) + $signed(sext_ln370_112_fu_2459_p1));

assign add_ln370_132_fu_1535_p2 = ($signed(sext_ln368_127_fu_1509_p1) + $signed(sext_ln368_126_fu_1469_p1));

assign add_ln370_133_fu_2487_p2 = ($signed(sext_ln370_117_fu_2483_p1) + $signed(add_ln370_131_fu_2465_p2));

assign add_ln370_134_fu_1541_p2 = ($signed(sext_ln368_125_fu_1447_p1) + $signed(sext_ln368_124_fu_1425_p1));

assign add_ln370_135_fu_1547_p2 = ($signed(sext_ln368_123_fu_1403_p1) + $signed(sext_ln370_113_fu_1531_p1));

assign add_ln370_136_fu_2477_p2 = ($signed(sext_ln370_116_fu_2474_p1) + $signed(sext_ln370_115_fu_2471_p1));

assign add_ln370_137_fu_2493_p2 = (add_ln370_133_fu_2487_p2 + select_ln342_18_fu_2311_p3);

assign add_ln370_138_fu_2505_p2 = ($signed(sext_ln370_120_fu_2502_p1) + $signed(sext_ln370_118_fu_2499_p1));

assign add_ln370_139_fu_1773_p2 = ($signed(sext_ln368_132_fu_1737_p1) + $signed(sext_ln368_131_fu_1677_p1));

assign add_ln370_140_fu_2527_p2 = ($signed(sext_ln370_123_fu_2523_p1) + $signed(add_ln370_138_fu_2505_p2));

assign add_ln370_141_fu_1779_p2 = ($signed(sext_ln368_130_fu_1645_p1) + $signed(sext_ln368_129_fu_1613_p1));

assign add_ln370_142_fu_1785_p2 = ($signed(sext_ln368_128_fu_1581_p1) + $signed(sext_ln370_119_fu_1769_p1));

assign add_ln370_143_fu_2517_p2 = ($signed(sext_ln370_122_fu_2514_p1) + $signed(sext_ln370_121_fu_2511_p1));

assign add_ln370_144_fu_2533_p2 = (add_ln370_140_fu_2527_p2 + select_ln342_17_fu_2304_p3);

assign add_ln370_145_fu_2545_p2 = ($signed(sext_ln370_126_fu_2542_p1) + $signed(sext_ln370_124_fu_2539_p1));

assign add_ln370_146_fu_1913_p2 = ($signed(sext_ln368_137_fu_1891_p1) + $signed(sext_ln368_136_fu_1859_p1));

assign add_ln370_147_fu_2567_p2 = ($signed(sext_ln370_129_fu_2563_p1) + $signed(add_ln370_145_fu_2545_p2));

assign add_ln370_148_fu_1919_p2 = ($signed(sext_ln368_135_fu_1841_p1) + $signed(sext_ln368_134_fu_1823_p1));

assign add_ln370_149_fu_1925_p2 = ($signed(sext_ln368_133_fu_1805_p1) + $signed(sext_ln370_125_fu_1909_p1));

assign add_ln370_150_fu_2557_p2 = ($signed(sext_ln370_128_fu_2554_p1) + $signed(sext_ln370_127_fu_2551_p1));

assign add_ln370_151_fu_2573_p2 = (add_ln370_147_fu_2567_p2 + select_ln342_16_fu_2297_p3);

assign add_ln370_152_fu_2585_p2 = ($signed(sext_ln370_132_fu_2582_p1) + $signed(sext_ln370_130_fu_2579_p1));

assign add_ln370_153_fu_2053_p2 = ($signed(sext_ln368_142_fu_2031_p1) + $signed(sext_ln368_141_fu_1999_p1));

assign add_ln370_154_fu_2607_p2 = ($signed(sext_ln370_135_fu_2603_p1) + $signed(add_ln370_152_fu_2585_p2));

assign add_ln370_155_fu_2059_p2 = ($signed(sext_ln368_140_fu_1981_p1) + $signed(sext_ln368_139_fu_1963_p1));

assign add_ln370_156_fu_2065_p2 = ($signed(sext_ln368_138_fu_1945_p1) + $signed(sext_ln370_131_fu_2049_p1));

assign add_ln370_157_fu_2597_p2 = ($signed(sext_ln370_134_fu_2594_p1) + $signed(sext_ln370_133_fu_2591_p1));

assign add_ln370_158_fu_2613_p2 = (add_ln370_154_fu_2607_p2 + select_ln342_15_fu_2290_p3);

assign add_ln370_159_fu_2625_p2 = ($signed(sext_ln370_138_fu_2622_p1) + $signed(sext_ln370_136_fu_2619_p1));

assign add_ln370_160_fu_2193_p2 = ($signed(sext_ln368_147_fu_2171_p1) + $signed(sext_ln368_146_fu_2139_p1));

assign add_ln370_161_fu_2647_p2 = ($signed(sext_ln370_141_fu_2643_p1) + $signed(add_ln370_159_fu_2625_p2));

assign add_ln370_162_fu_2199_p2 = ($signed(sext_ln368_145_fu_2121_p1) + $signed(sext_ln368_144_fu_2103_p1));

assign add_ln370_163_fu_2205_p2 = ($signed(sext_ln368_143_fu_2085_p1) + $signed(sext_ln370_137_fu_2189_p1));

assign add_ln370_164_fu_2637_p2 = ($signed(sext_ln370_140_fu_2634_p1) + $signed(sext_ln370_139_fu_2631_p1));

assign add_ln370_165_fu_2653_p2 = (add_ln370_161_fu_2647_p2 + select_ln342_fu_2283_p3);

assign add_ln370_fu_2345_p2 = ($signed(sext_ln370_96_fu_2342_p1) + $signed(sext_ln370_fu_2339_p1));

assign and_ln336_fu_486_p2 = (xor_ln336_fu_475_p2 & icmp_ln338_fu_480_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((weight_sm_empty_n == 1'b0) | (cache_window_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_245 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_286 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign cit_6_fu_2217_p2 = (select_ln337_fu_497_p3 + 5'd1);

assign icmp_ln336_fu_419_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_425_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_480_p2 = ((ap_sig_allocacmp_cit_load == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_505_p2 = ((select_ln337_fu_497_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_2211_p2 = ((select_ln337_fu_497_p3 == 5'd27) ? 1'b1 : 1'b0);

assign lshr_ln_fu_517_p4 = {{cache_window_sm_dout[5:3]}};

assign mac_sm_din = {{{{{{{{add_ln370_165_reg_3087}, {add_ln370_158_reg_3082}}, {add_ln370_151_reg_3077}}, {add_ln370_144_reg_3072}}, {add_ln370_137_reg_3067}}, {add_ln370_130_reg_3062}}, {add_ln370_123_reg_3057}}, {add_ln370_116_reg_3052}};

assign mul_res_848_fu_845_p0 = zext_ln353_fu_527_p1;

assign mul_res_848_fu_845_p1 = sext_ln368_55_fu_833_p1;

assign mul_res_849_fu_881_p0 = zext_ln368_25_fu_865_p1;

assign mul_res_849_fu_881_p1 = sext_ln368_56_fu_869_p1;

assign mul_res_850_fu_917_p0 = zext_ln368_26_fu_901_p1;

assign mul_res_850_fu_917_p1 = sext_ln368_57_fu_905_p1;

assign mul_res_851_fu_953_p0 = zext_ln368_27_fu_937_p1;

assign mul_res_851_fu_953_p1 = sext_ln368_58_fu_941_p1;

assign mul_res_852_fu_985_p0 = zext_ln368_28_fu_969_p1;

assign mul_res_852_fu_985_p1 = sext_ln368_59_fu_973_p1;

assign mul_res_853_fu_1021_p0 = zext_ln368_29_fu_1005_p1;

assign mul_res_853_fu_1021_p1 = sext_ln368_60_fu_1009_p1;

assign mul_res_854_fu_1061_p0 = sext_ln368_61_fu_1049_p1;

assign mul_res_854_fu_1061_p1 = zext_ln368_fu_807_p1;

assign mul_res_855_fu_1083_p0 = zext_ln353_fu_527_p1;

assign mul_res_855_fu_1083_p1 = sext_ln368_62_fu_1071_p1;

assign mul_res_856_fu_1105_p0 = zext_ln368_25_fu_865_p1;

assign mul_res_856_fu_1105_p1 = sext_ln368_63_fu_1093_p1;

assign mul_res_857_fu_1127_p0 = zext_ln368_26_fu_901_p1;

assign mul_res_857_fu_1127_p1 = sext_ln368_64_fu_1115_p1;

assign mul_res_858_fu_1149_p0 = zext_ln368_27_fu_937_p1;

assign mul_res_858_fu_1149_p1 = sext_ln368_65_fu_1137_p1;

assign mul_res_859_fu_1167_p0 = zext_ln368_28_fu_969_p1;

assign mul_res_859_fu_1167_p1 = sext_ln368_66_fu_1155_p1;

assign mul_res_860_fu_1189_p0 = zext_ln368_29_fu_1005_p1;

assign mul_res_860_fu_1189_p1 = sext_ln368_67_fu_1177_p1;

assign mul_res_861_fu_1229_p0 = sext_ln368_68_fu_1217_p1;

assign mul_res_861_fu_1229_p1 = zext_ln368_fu_807_p1;

assign mul_res_862_fu_1251_p0 = zext_ln353_fu_527_p1;

assign mul_res_862_fu_1251_p1 = sext_ln368_69_fu_1239_p1;

assign mul_res_863_fu_1273_p0 = zext_ln368_25_fu_865_p1;

assign mul_res_863_fu_1273_p1 = sext_ln368_70_fu_1261_p1;

assign mul_res_864_fu_1295_p0 = zext_ln368_26_fu_901_p1;

assign mul_res_864_fu_1295_p1 = sext_ln368_71_fu_1283_p1;

assign mul_res_865_fu_1317_p0 = zext_ln368_27_fu_937_p1;

assign mul_res_865_fu_1317_p1 = sext_ln368_72_fu_1305_p1;

assign mul_res_866_fu_1335_p0 = zext_ln368_28_fu_969_p1;

assign mul_res_866_fu_1335_p1 = sext_ln368_73_fu_1323_p1;

assign mul_res_867_fu_1357_p0 = zext_ln368_29_fu_1005_p1;

assign mul_res_867_fu_1357_p1 = sext_ln368_74_fu_1345_p1;

assign mul_res_868_fu_1397_p0 = sext_ln368_75_fu_1385_p1;

assign mul_res_868_fu_1397_p1 = zext_ln368_fu_807_p1;

assign mul_res_869_fu_1419_p0 = zext_ln353_fu_527_p1;

assign mul_res_869_fu_1419_p1 = sext_ln368_76_fu_1407_p1;

assign mul_res_870_fu_1441_p0 = zext_ln368_25_fu_865_p1;

assign mul_res_870_fu_1441_p1 = sext_ln368_77_fu_1429_p1;

assign mul_res_871_fu_1463_p0 = zext_ln368_26_fu_901_p1;

assign mul_res_871_fu_1463_p1 = sext_ln368_78_fu_1451_p1;

assign mul_res_872_fu_1485_p0 = zext_ln368_27_fu_937_p1;

assign mul_res_872_fu_1485_p1 = sext_ln368_79_fu_1473_p1;

assign mul_res_873_fu_1503_p0 = zext_ln368_28_fu_969_p1;

assign mul_res_873_fu_1503_p1 = sext_ln368_80_fu_1491_p1;

assign mul_res_874_fu_1525_p0 = zext_ln368_29_fu_1005_p1;

assign mul_res_874_fu_1525_p1 = sext_ln368_81_fu_1513_p1;

assign mul_res_875_fu_1575_p0 = zext_ln368_30_fu_1563_p1;

assign mul_res_875_fu_1575_p1 = sext_ln368_fu_811_p1;

assign mul_res_876_fu_1607_p0 = zext_ln368_31_fu_1595_p1;

assign mul_res_876_fu_1607_p1 = sext_ln368_55_fu_833_p1;

assign mul_res_877_fu_1639_p0 = zext_ln368_32_fu_1627_p1;

assign mul_res_877_fu_1639_p1 = sext_ln368_56_fu_869_p1;

assign mul_res_878_fu_1671_p0 = zext_ln368_33_fu_1659_p1;

assign mul_res_878_fu_1671_p1 = sext_ln368_57_fu_905_p1;

assign mul_res_879_fu_1703_p0 = zext_ln368_34_fu_1691_p1;

assign mul_res_879_fu_1703_p1 = sext_ln368_58_fu_941_p1;

assign mul_res_880_fu_1731_p0 = zext_ln368_35_fu_1719_p1;

assign mul_res_880_fu_1731_p1 = sext_ln368_59_fu_973_p1;

assign mul_res_881_fu_1763_p0 = zext_ln368_36_fu_1751_p1;

assign mul_res_881_fu_1763_p1 = sext_ln368_60_fu_1009_p1;

assign mul_res_882_fu_1799_p0 = zext_ln368_30_fu_1563_p1;

assign mul_res_882_fu_1799_p1 = sext_ln368_61_fu_1049_p1;

assign mul_res_883_fu_1817_p0 = zext_ln368_31_fu_1595_p1;

assign mul_res_883_fu_1817_p1 = sext_ln368_62_fu_1071_p1;

assign mul_res_884_fu_1835_p0 = zext_ln368_32_fu_1627_p1;

assign mul_res_884_fu_1835_p1 = sext_ln368_63_fu_1093_p1;

assign mul_res_885_fu_1853_p0 = zext_ln368_33_fu_1659_p1;

assign mul_res_885_fu_1853_p1 = sext_ln368_64_fu_1115_p1;

assign mul_res_886_fu_1871_p0 = zext_ln368_34_fu_1691_p1;

assign mul_res_886_fu_1871_p1 = sext_ln368_65_fu_1137_p1;

assign mul_res_887_fu_1885_p0 = zext_ln368_35_fu_1719_p1;

assign mul_res_887_fu_1885_p1 = sext_ln368_66_fu_1155_p1;

assign mul_res_888_fu_1903_p0 = zext_ln368_36_fu_1751_p1;

assign mul_res_888_fu_1903_p1 = sext_ln368_67_fu_1177_p1;

assign mul_res_889_fu_1939_p0 = zext_ln368_30_fu_1563_p1;

assign mul_res_889_fu_1939_p1 = sext_ln368_68_fu_1217_p1;

assign mul_res_890_fu_1957_p0 = zext_ln368_31_fu_1595_p1;

assign mul_res_890_fu_1957_p1 = sext_ln368_69_fu_1239_p1;

assign mul_res_891_fu_1975_p0 = zext_ln368_32_fu_1627_p1;

assign mul_res_891_fu_1975_p1 = sext_ln368_70_fu_1261_p1;

assign mul_res_892_fu_1993_p0 = zext_ln368_33_fu_1659_p1;

assign mul_res_892_fu_1993_p1 = sext_ln368_71_fu_1283_p1;

assign mul_res_893_fu_2011_p0 = zext_ln368_34_fu_1691_p1;

assign mul_res_893_fu_2011_p1 = sext_ln368_72_fu_1305_p1;

assign mul_res_894_fu_2025_p0 = zext_ln368_35_fu_1719_p1;

assign mul_res_894_fu_2025_p1 = sext_ln368_73_fu_1323_p1;

assign mul_res_895_fu_2043_p0 = zext_ln368_36_fu_1751_p1;

assign mul_res_895_fu_2043_p1 = sext_ln368_74_fu_1345_p1;

assign mul_res_896_fu_2079_p0 = zext_ln368_30_fu_1563_p1;

assign mul_res_896_fu_2079_p1 = sext_ln368_75_fu_1385_p1;

assign mul_res_897_fu_2097_p0 = zext_ln368_31_fu_1595_p1;

assign mul_res_897_fu_2097_p1 = sext_ln368_76_fu_1407_p1;

assign mul_res_898_fu_2115_p0 = zext_ln368_32_fu_1627_p1;

assign mul_res_898_fu_2115_p1 = sext_ln368_77_fu_1429_p1;

assign mul_res_899_fu_2133_p0 = zext_ln368_33_fu_1659_p1;

assign mul_res_899_fu_2133_p1 = sext_ln368_78_fu_1451_p1;

assign mul_res_900_fu_2151_p0 = zext_ln368_34_fu_1691_p1;

assign mul_res_900_fu_2151_p1 = sext_ln368_79_fu_1473_p1;

assign mul_res_901_fu_2165_p0 = zext_ln368_35_fu_1719_p1;

assign mul_res_901_fu_2165_p1 = sext_ln368_80_fu_1491_p1;

assign mul_res_902_fu_2183_p0 = zext_ln368_36_fu_1751_p1;

assign mul_res_902_fu_2183_p1 = sext_ln368_81_fu_1513_p1;

assign mul_res_fu_823_p0 = sext_ln368_fu_811_p1;

assign mul_res_fu_823_p1 = zext_ln368_fu_807_p1;

assign or_ln337_fu_492_p2 = (icmp_ln337_reg_2870 | and_ln336_fu_486_p2);

assign select_ln337_6_fu_437_p3 = ((icmp_ln337_fu_425_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_431_p2);

assign select_ln337_fu_497_p3 = ((or_ln337_fu_492_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign select_ln342_15_fu_2290_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1149_fu_330);

assign select_ln342_16_fu_2297_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1148_fu_326);

assign select_ln342_17_fu_2304_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1147_fu_322);

assign select_ln342_18_fu_2311_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1146_fu_318);

assign select_ln342_19_fu_2318_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1145_fu_314);

assign select_ln342_20_fu_2325_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1144_fu_310);

assign select_ln342_21_fu_2332_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_fu_306);

assign select_ln342_fu_2283_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1150_fu_334);

assign sext_ln368_108_fu_829_p1 = mul_res_fu_823_p2;

assign sext_ln368_109_fu_851_p1 = mul_res_848_fu_845_p2;

assign sext_ln368_110_fu_887_p1 = mul_res_849_fu_881_p2;

assign sext_ln368_111_fu_923_p1 = mul_res_850_fu_917_p2;

assign sext_ln368_112_fu_991_p1 = mul_res_852_fu_985_p2;

assign sext_ln368_113_fu_1067_p1 = mul_res_854_fu_1061_p2;

assign sext_ln368_114_fu_1089_p1 = mul_res_855_fu_1083_p2;

assign sext_ln368_115_fu_1111_p1 = mul_res_856_fu_1105_p2;

assign sext_ln368_116_fu_1133_p1 = mul_res_857_fu_1127_p2;

assign sext_ln368_117_fu_1173_p1 = mul_res_859_fu_1167_p2;

assign sext_ln368_118_fu_1235_p1 = mul_res_861_fu_1229_p2;

assign sext_ln368_119_fu_1257_p1 = mul_res_862_fu_1251_p2;

assign sext_ln368_120_fu_1279_p1 = mul_res_863_fu_1273_p2;

assign sext_ln368_121_fu_1301_p1 = mul_res_864_fu_1295_p2;

assign sext_ln368_122_fu_1341_p1 = mul_res_866_fu_1335_p2;

assign sext_ln368_123_fu_1403_p1 = mul_res_868_fu_1397_p2;

assign sext_ln368_124_fu_1425_p1 = mul_res_869_fu_1419_p2;

assign sext_ln368_125_fu_1447_p1 = mul_res_870_fu_1441_p2;

assign sext_ln368_126_fu_1469_p1 = mul_res_871_fu_1463_p2;

assign sext_ln368_127_fu_1509_p1 = mul_res_873_fu_1503_p2;

assign sext_ln368_128_fu_1581_p1 = mul_res_875_fu_1575_p2;

assign sext_ln368_129_fu_1613_p1 = mul_res_876_fu_1607_p2;

assign sext_ln368_130_fu_1645_p1 = mul_res_877_fu_1639_p2;

assign sext_ln368_131_fu_1677_p1 = mul_res_878_fu_1671_p2;

assign sext_ln368_132_fu_1737_p1 = mul_res_880_fu_1731_p2;

assign sext_ln368_133_fu_1805_p1 = mul_res_882_fu_1799_p2;

assign sext_ln368_134_fu_1823_p1 = mul_res_883_fu_1817_p2;

assign sext_ln368_135_fu_1841_p1 = mul_res_884_fu_1835_p2;

assign sext_ln368_136_fu_1859_p1 = mul_res_885_fu_1853_p2;

assign sext_ln368_137_fu_1891_p1 = mul_res_887_fu_1885_p2;

assign sext_ln368_138_fu_1945_p1 = mul_res_889_fu_1939_p2;

assign sext_ln368_139_fu_1963_p1 = mul_res_890_fu_1957_p2;

assign sext_ln368_140_fu_1981_p1 = mul_res_891_fu_1975_p2;

assign sext_ln368_141_fu_1999_p1 = mul_res_892_fu_1993_p2;

assign sext_ln368_142_fu_2031_p1 = mul_res_894_fu_2025_p2;

assign sext_ln368_143_fu_2085_p1 = mul_res_896_fu_2079_p2;

assign sext_ln368_144_fu_2103_p1 = mul_res_897_fu_2097_p2;

assign sext_ln368_145_fu_2121_p1 = mul_res_898_fu_2115_p2;

assign sext_ln368_146_fu_2139_p1 = mul_res_899_fu_2133_p2;

assign sext_ln368_147_fu_2171_p1 = mul_res_901_fu_2165_p2;

assign sext_ln368_55_fu_833_p1 = $signed(trunc_ln354_55_fu_537_p4);

assign sext_ln368_56_fu_869_p1 = $signed(trunc_ln354_56_fu_547_p4);

assign sext_ln368_57_fu_905_p1 = $signed(trunc_ln354_57_fu_557_p4);

assign sext_ln368_58_fu_941_p1 = $signed(trunc_ln354_58_fu_567_p4);

assign sext_ln368_59_fu_973_p1 = $signed(trunc_ln354_59_fu_577_p4);

assign sext_ln368_60_fu_1009_p1 = $signed(trunc_ln354_60_fu_587_p4);

assign sext_ln368_61_fu_1049_p1 = $signed(trunc_ln354_61_fu_597_p4);

assign sext_ln368_62_fu_1071_p1 = $signed(trunc_ln354_62_fu_607_p4);

assign sext_ln368_63_fu_1093_p1 = $signed(trunc_ln354_63_fu_617_p4);

assign sext_ln368_64_fu_1115_p1 = $signed(trunc_ln354_64_fu_627_p4);

assign sext_ln368_65_fu_1137_p1 = $signed(trunc_ln354_65_fu_637_p4);

assign sext_ln368_66_fu_1155_p1 = $signed(trunc_ln354_66_fu_647_p4);

assign sext_ln368_67_fu_1177_p1 = $signed(trunc_ln354_67_fu_657_p4);

assign sext_ln368_68_fu_1217_p1 = $signed(trunc_ln354_68_fu_667_p4);

assign sext_ln368_69_fu_1239_p1 = $signed(trunc_ln354_69_fu_677_p4);

assign sext_ln368_70_fu_1261_p1 = $signed(trunc_ln354_70_fu_687_p4);

assign sext_ln368_71_fu_1283_p1 = $signed(trunc_ln354_71_fu_697_p4);

assign sext_ln368_72_fu_1305_p1 = $signed(trunc_ln354_72_fu_707_p4);

assign sext_ln368_73_fu_1323_p1 = $signed(trunc_ln354_73_fu_717_p4);

assign sext_ln368_74_fu_1345_p1 = $signed(trunc_ln354_74_fu_727_p4);

assign sext_ln368_75_fu_1385_p1 = $signed(trunc_ln354_75_fu_737_p4);

assign sext_ln368_76_fu_1407_p1 = $signed(trunc_ln354_76_fu_747_p4);

assign sext_ln368_77_fu_1429_p1 = $signed(trunc_ln354_77_fu_757_p4);

assign sext_ln368_78_fu_1451_p1 = $signed(trunc_ln354_78_fu_767_p4);

assign sext_ln368_79_fu_1473_p1 = $signed(trunc_ln354_79_fu_777_p4);

assign sext_ln368_80_fu_1491_p1 = $signed(trunc_ln354_s_fu_787_p4);

assign sext_ln368_81_fu_1513_p1 = $signed(trunc_ln354_80_fu_797_p4);

assign sext_ln368_fu_811_p1 = $signed(trunc_ln354_fu_533_p1);

assign sext_ln370_100_fu_2379_p1 = mul_res_858_reg_2908;

assign sext_ln370_101_fu_1195_p1 = mul_res_860_fu_1189_p2;

assign sext_ln370_102_fu_2382_p1 = $signed(add_ln370_118_reg_2913);

assign sext_ln370_103_fu_2391_p1 = $signed(add_ln370_120_reg_2918);

assign sext_ln370_104_fu_2394_p1 = $signed(add_ln370_121_reg_2923);

assign sext_ln370_105_fu_2403_p1 = $signed(add_ln370_122_fu_2397_p2);

assign sext_ln370_106_fu_2419_p1 = mul_res_865_reg_2928;

assign sext_ln370_107_fu_1363_p1 = mul_res_867_fu_1357_p2;

assign sext_ln370_108_fu_2422_p1 = $signed(add_ln370_125_reg_2933);

assign sext_ln370_109_fu_2431_p1 = $signed(add_ln370_127_reg_2938);

assign sext_ln370_110_fu_2434_p1 = $signed(add_ln370_128_reg_2943);

assign sext_ln370_111_fu_2443_p1 = $signed(add_ln370_129_fu_2437_p2);

assign sext_ln370_112_fu_2459_p1 = mul_res_872_reg_2948;

assign sext_ln370_113_fu_1531_p1 = mul_res_874_fu_1525_p2;

assign sext_ln370_114_fu_2462_p1 = $signed(add_ln370_132_reg_2953);

assign sext_ln370_115_fu_2471_p1 = $signed(add_ln370_134_reg_2958);

assign sext_ln370_116_fu_2474_p1 = $signed(add_ln370_135_reg_2963);

assign sext_ln370_117_fu_2483_p1 = $signed(add_ln370_136_fu_2477_p2);

assign sext_ln370_118_fu_2499_p1 = mul_res_879_reg_2968;

assign sext_ln370_119_fu_1769_p1 = mul_res_881_fu_1763_p2;

assign sext_ln370_120_fu_2502_p1 = $signed(add_ln370_139_reg_2973);

assign sext_ln370_121_fu_2511_p1 = $signed(add_ln370_141_reg_2978);

assign sext_ln370_122_fu_2514_p1 = $signed(add_ln370_142_reg_2983);

assign sext_ln370_123_fu_2523_p1 = $signed(add_ln370_143_fu_2517_p2);

assign sext_ln370_124_fu_2539_p1 = mul_res_886_reg_2988;

assign sext_ln370_125_fu_1909_p1 = mul_res_888_fu_1903_p2;

assign sext_ln370_126_fu_2542_p1 = $signed(add_ln370_146_reg_2993);

assign sext_ln370_127_fu_2551_p1 = $signed(add_ln370_148_reg_2998);

assign sext_ln370_128_fu_2554_p1 = $signed(add_ln370_149_reg_3003);

assign sext_ln370_129_fu_2563_p1 = $signed(add_ln370_150_fu_2557_p2);

assign sext_ln370_130_fu_2579_p1 = mul_res_893_reg_3008;

assign sext_ln370_131_fu_2049_p1 = mul_res_895_fu_2043_p2;

assign sext_ln370_132_fu_2582_p1 = $signed(add_ln370_153_reg_3013);

assign sext_ln370_133_fu_2591_p1 = $signed(add_ln370_155_reg_3018);

assign sext_ln370_134_fu_2594_p1 = $signed(add_ln370_156_reg_3023);

assign sext_ln370_135_fu_2603_p1 = $signed(add_ln370_157_fu_2597_p2);

assign sext_ln370_136_fu_2619_p1 = mul_res_900_reg_3028;

assign sext_ln370_137_fu_2189_p1 = mul_res_902_fu_2183_p2;

assign sext_ln370_138_fu_2622_p1 = $signed(add_ln370_160_reg_3033);

assign sext_ln370_139_fu_2631_p1 = $signed(add_ln370_162_reg_3038);

assign sext_ln370_140_fu_2634_p1 = $signed(add_ln370_163_reg_3043);

assign sext_ln370_141_fu_2643_p1 = $signed(add_ln370_164_fu_2637_p2);

assign sext_ln370_95_fu_1027_p1 = mul_res_853_fu_1021_p2;

assign sext_ln370_96_fu_2342_p1 = $signed(add_ln370_111_reg_2893);

assign sext_ln370_97_fu_2351_p1 = $signed(add_ln370_113_reg_2898);

assign sext_ln370_98_fu_2354_p1 = $signed(add_ln370_114_reg_2903);

assign sext_ln370_99_fu_2363_p1 = $signed(add_ln370_115_fu_2357_p2);

assign sext_ln370_fu_2339_p1 = mul_res_851_reg_2888;

assign start_out = real_start;

assign tmp_100_fu_1553_p4 = {{cache_window_sm_dout[23:21]}};

assign tmp_101_fu_1585_p4 = {{cache_window_sm_dout[26:24]}};

assign tmp_102_fu_1617_p4 = {{cache_window_sm_dout[29:27]}};

assign tmp_103_fu_1649_p4 = {{cache_window_sm_dout[32:30]}};

assign tmp_104_fu_1681_p4 = {{cache_window_sm_dout[35:33]}};

assign tmp_105_fu_1709_p4 = {{cache_window_sm_dout[38:36]}};

assign tmp_106_fu_1741_p4 = {{cache_window_sm_dout[41:39]}};

assign tmp_96_fu_891_p4 = {{cache_window_sm_dout[11:9]}};

assign tmp_97_fu_927_p4 = {{cache_window_sm_dout[14:12]}};

assign tmp_98_fu_959_p4 = {{cache_window_sm_dout[17:15]}};

assign tmp_99_fu_995_p4 = {{cache_window_sm_dout[20:18]}};

assign tmp_fu_855_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln353_fu_513_p1 = cache_window_sm_dout[2:0];

assign trunc_ln354_55_fu_537_p4 = {{weight_sm_dout[5:3]}};

assign trunc_ln354_56_fu_547_p4 = {{weight_sm_dout[8:6]}};

assign trunc_ln354_57_fu_557_p4 = {{weight_sm_dout[11:9]}};

assign trunc_ln354_58_fu_567_p4 = {{weight_sm_dout[14:12]}};

assign trunc_ln354_59_fu_577_p4 = {{weight_sm_dout[17:15]}};

assign trunc_ln354_60_fu_587_p4 = {{weight_sm_dout[20:18]}};

assign trunc_ln354_61_fu_597_p4 = {{weight_sm_dout[23:21]}};

assign trunc_ln354_62_fu_607_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln354_63_fu_617_p4 = {{weight_sm_dout[29:27]}};

assign trunc_ln354_64_fu_627_p4 = {{weight_sm_dout[32:30]}};

assign trunc_ln354_65_fu_637_p4 = {{weight_sm_dout[35:33]}};

assign trunc_ln354_66_fu_647_p4 = {{weight_sm_dout[38:36]}};

assign trunc_ln354_67_fu_657_p4 = {{weight_sm_dout[41:39]}};

assign trunc_ln354_68_fu_667_p4 = {{weight_sm_dout[44:42]}};

assign trunc_ln354_69_fu_677_p4 = {{weight_sm_dout[47:45]}};

assign trunc_ln354_70_fu_687_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln354_71_fu_697_p4 = {{weight_sm_dout[53:51]}};

assign trunc_ln354_72_fu_707_p4 = {{weight_sm_dout[56:54]}};

assign trunc_ln354_73_fu_717_p4 = {{weight_sm_dout[59:57]}};

assign trunc_ln354_74_fu_727_p4 = {{weight_sm_dout[62:60]}};

assign trunc_ln354_75_fu_737_p4 = {{weight_sm_dout[65:63]}};

assign trunc_ln354_76_fu_747_p4 = {{weight_sm_dout[68:66]}};

assign trunc_ln354_77_fu_757_p4 = {{weight_sm_dout[71:69]}};

assign trunc_ln354_78_fu_767_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln354_79_fu_777_p4 = {{weight_sm_dout[77:75]}};

assign trunc_ln354_80_fu_797_p4 = {{weight_sm_dout[83:81]}};

assign trunc_ln354_fu_533_p1 = weight_sm_dout[2:0];

assign trunc_ln354_s_fu_787_p4 = {{weight_sm_dout[80:78]}};

assign xor_ln336_fu_475_p2 = (icmp_ln337_reg_2870 ^ 1'd1);

assign zext_ln353_fu_527_p1 = lshr_ln_fu_517_p4;

assign zext_ln368_25_fu_865_p1 = tmp_fu_855_p4;

assign zext_ln368_26_fu_901_p1 = tmp_96_fu_891_p4;

assign zext_ln368_27_fu_937_p1 = tmp_97_fu_927_p4;

assign zext_ln368_28_fu_969_p1 = tmp_98_fu_959_p4;

assign zext_ln368_29_fu_1005_p1 = tmp_99_fu_995_p4;

assign zext_ln368_30_fu_1563_p1 = tmp_100_fu_1553_p4;

assign zext_ln368_31_fu_1595_p1 = tmp_101_fu_1585_p4;

assign zext_ln368_32_fu_1627_p1 = tmp_102_fu_1617_p4;

assign zext_ln368_33_fu_1659_p1 = tmp_103_fu_1649_p4;

assign zext_ln368_34_fu_1691_p1 = tmp_104_fu_1681_p4;

assign zext_ln368_35_fu_1719_p1 = tmp_105_fu_1709_p4;

assign zext_ln368_36_fu_1751_p1 = tmp_106_fu_1741_p4;

assign zext_ln368_fu_807_p1 = trunc_ln353_fu_513_p1;

endmodule //ATTN11_matmul_step2_mac
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [83:0] weight_sm_dout;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [139:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln378_reg_3204;
reg   [0:0] icmp_ln378_reg_3204_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_445_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln337_fu_451_p2;
reg   [0:0] icmp_ln337_reg_2925;
wire   [0:0] icmp_ln342_fu_531_p2;
reg   [0:0] icmp_ln342_reg_2931;
reg   [2:0] trunc_ln353_s_reg_2949;
reg   [2:0] trunc_ln353_7_reg_2954;
reg   [2:0] trunc_ln354_s_reg_2959;
reg   [2:0] trunc_ln354_57_reg_2964;
reg   [2:0] trunc_ln354_61_reg_2969;
reg   [2:0] trunc_ln354_65_reg_2974;
reg   [2:0] trunc_ln354_69_reg_2979;
reg   [2:0] trunc_ln354_73_reg_2984;
reg   [2:0] trunc_ln354_77_reg_2989;
wire  signed [5:0] mul_res_fu_905_p2;
reg  signed [5:0] mul_res_reg_2994;
wire  signed [5:0] mul_res_794_fu_927_p2;
reg  signed [5:0] mul_res_794_reg_2999;
wire  signed [5:0] mul_res_795_fu_949_p2;
reg  signed [5:0] mul_res_795_reg_3004;
wire  signed [5:0] mul_res_796_fu_967_p2;
reg  signed [5:0] mul_res_796_reg_3009;
wire  signed [5:0] mul_res_798_fu_985_p2;
reg  signed [5:0] mul_res_798_reg_3014;
wire  signed [5:0] mul_res_799_fu_1003_p2;
reg  signed [5:0] mul_res_799_reg_3019;
wire  signed [5:0] mul_res_800_fu_1021_p2;
reg  signed [5:0] mul_res_800_reg_3024;
wire  signed [5:0] mul_res_802_fu_1039_p2;
reg  signed [5:0] mul_res_802_reg_3029;
wire  signed [5:0] mul_res_803_fu_1057_p2;
reg  signed [5:0] mul_res_803_reg_3034;
wire  signed [5:0] mul_res_804_fu_1075_p2;
reg  signed [5:0] mul_res_804_reg_3039;
wire  signed [5:0] mul_res_806_fu_1093_p2;
reg  signed [5:0] mul_res_806_reg_3044;
wire  signed [5:0] mul_res_807_fu_1111_p2;
reg  signed [5:0] mul_res_807_reg_3049;
wire  signed [5:0] mul_res_808_fu_1129_p2;
reg  signed [5:0] mul_res_808_reg_3054;
wire  signed [5:0] mul_res_810_fu_1147_p2;
reg  signed [5:0] mul_res_810_reg_3059;
wire  signed [5:0] mul_res_811_fu_1165_p2;
reg  signed [5:0] mul_res_811_reg_3064;
wire  signed [5:0] mul_res_812_fu_1183_p2;
reg  signed [5:0] mul_res_812_reg_3069;
wire  signed [5:0] mul_res_814_fu_1201_p2;
reg  signed [5:0] mul_res_814_reg_3074;
wire  signed [5:0] mul_res_815_fu_1219_p2;
reg  signed [5:0] mul_res_815_reg_3079;
wire  signed [5:0] mul_res_816_fu_1237_p2;
reg  signed [5:0] mul_res_816_reg_3084;
wire  signed [5:0] mul_res_818_fu_1255_p2;
reg  signed [5:0] mul_res_818_reg_3089;
wire  signed [5:0] mul_res_819_fu_1273_p2;
reg  signed [5:0] mul_res_819_reg_3094;
wire  signed [5:0] mul_res_820_fu_1291_p2;
reg  signed [5:0] mul_res_820_reg_3099;
wire  signed [5:0] mul_res_822_fu_1309_p2;
reg  signed [5:0] mul_res_822_reg_3104;
wire  signed [5:0] mul_res_823_fu_1327_p2;
reg  signed [5:0] mul_res_823_reg_3109;
wire  signed [5:0] mul_res_824_fu_1341_p2;
reg  signed [5:0] mul_res_824_reg_3114;
wire  signed [5:0] mul_res_826_fu_1355_p2;
reg  signed [5:0] mul_res_826_reg_3119;
wire  signed [5:0] mul_res_827_fu_1369_p2;
reg  signed [5:0] mul_res_827_reg_3124;
wire  signed [5:0] mul_res_828_fu_1383_p2;
reg  signed [5:0] mul_res_828_reg_3129;
wire  signed [5:0] mul_res_830_fu_1397_p2;
reg  signed [5:0] mul_res_830_reg_3134;
wire  signed [5:0] mul_res_831_fu_1411_p2;
reg  signed [5:0] mul_res_831_reg_3139;
wire  signed [5:0] mul_res_832_fu_1425_p2;
reg  signed [5:0] mul_res_832_reg_3144;
wire  signed [5:0] mul_res_834_fu_1439_p2;
reg  signed [5:0] mul_res_834_reg_3149;
wire  signed [5:0] mul_res_835_fu_1453_p2;
reg  signed [5:0] mul_res_835_reg_3154;
wire  signed [5:0] mul_res_836_fu_1467_p2;
reg  signed [5:0] mul_res_836_reg_3159;
wire  signed [5:0] mul_res_838_fu_1481_p2;
reg  signed [5:0] mul_res_838_reg_3164;
wire  signed [5:0] mul_res_839_fu_1495_p2;
reg  signed [5:0] mul_res_839_reg_3169;
wire  signed [5:0] mul_res_840_fu_1509_p2;
reg  signed [5:0] mul_res_840_reg_3174;
wire  signed [5:0] mul_res_842_fu_1523_p2;
reg  signed [5:0] mul_res_842_reg_3179;
wire  signed [5:0] mul_res_843_fu_1537_p2;
reg  signed [5:0] mul_res_843_reg_3184;
wire  signed [5:0] mul_res_844_fu_1551_p2;
reg  signed [5:0] mul_res_844_reg_3189;
wire  signed [5:0] mul_res_846_fu_1565_p2;
reg  signed [5:0] mul_res_846_reg_3194;
wire  signed [5:0] mul_res_847_fu_1579_p2;
reg  signed [5:0] mul_res_847_reg_3199;
wire   [0:0] icmp_ln378_fu_1585_p2;
wire   [9:0] add_ln370_113_fu_1846_p2;
reg   [9:0] add_ln370_113_reg_3208;
wire   [9:0] add_ln370_117_fu_1904_p2;
reg   [9:0] add_ln370_117_reg_3213;
wire   [9:0] add_ln370_121_fu_1962_p2;
reg   [9:0] add_ln370_121_reg_3218;
wire   [9:0] add_ln370_125_fu_2020_p2;
reg   [9:0] add_ln370_125_reg_3223;
wire   [9:0] add_ln370_129_fu_2078_p2;
reg   [9:0] add_ln370_129_reg_3228;
wire   [9:0] add_ln370_133_fu_2136_p2;
reg   [9:0] add_ln370_133_reg_3233;
wire   [9:0] add_ln370_137_fu_2194_p2;
reg   [9:0] add_ln370_137_reg_3238;
wire   [9:0] add_ln370_141_fu_2252_p2;
reg   [9:0] add_ln370_141_reg_3243;
wire   [9:0] add_ln370_145_fu_2307_p2;
reg   [9:0] add_ln370_145_reg_3248;
wire   [9:0] add_ln370_149_fu_2362_p2;
reg   [9:0] add_ln370_149_reg_3253;
wire   [9:0] add_ln370_153_fu_2417_p2;
reg   [9:0] add_ln370_153_reg_3258;
wire   [9:0] add_ln370_157_fu_2472_p2;
reg   [9:0] add_ln370_157_reg_3263;
wire   [9:0] add_ln370_161_fu_2527_p2;
reg   [9:0] add_ln370_161_reg_3268;
wire   [9:0] add_ln370_165_fu_2582_p2;
reg   [9:0] add_ln370_165_reg_3273;
reg   [4:0] cit_fu_304;
wire   [4:0] cit_5_fu_1591_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [9:0] empty_fu_308;
reg   [9:0] empty_1131_fu_312;
reg   [9:0] empty_1132_fu_316;
reg   [9:0] empty_1133_fu_320;
reg   [9:0] empty_1134_fu_324;
reg   [9:0] empty_1135_fu_328;
reg   [9:0] empty_1136_fu_332;
reg   [9:0] empty_1137_fu_336;
reg   [9:0] empty_1138_fu_340;
reg   [9:0] empty_1139_fu_344;
reg   [9:0] empty_1140_fu_348;
reg   [9:0] empty_1141_fu_352;
reg   [9:0] empty_1142_fu_356;
reg   [9:0] empty_1143_fu_360;
reg   [9:0] indvar_flatten_fu_364;
wire   [9:0] select_ln337_5_fu_463_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten51_fu_368;
wire   [15:0] add_ln336_fu_439_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten51_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_457_p2;
wire   [0:0] icmp_ln338_fu_506_p2;
wire   [0:0] xor_ln336_fu_501_p2;
wire   [0:0] and_ln336_fu_512_p2;
wire   [0:0] or_ln337_fu_518_p2;
wire   [4:0] select_ln337_fu_523_p3;
wire   [2:0] trunc_ln353_fu_539_p1;
wire   [2:0] trunc_ln354_fu_615_p1;
wire  signed [2:0] mul_res_fu_905_p0;
wire  signed [5:0] sext_ln368_127_fu_893_p1;
wire  signed [2:0] mul_res_fu_905_p1;
wire  signed [5:0] sext_ln368_fu_889_p1;
wire   [2:0] trunc_ln353_4_fu_553_p4;
wire   [2:0] trunc_ln354_54_fu_629_p4;
wire  signed [2:0] mul_res_794_fu_927_p0;
wire  signed [5:0] sext_ln368_132_fu_915_p1;
wire  signed [2:0] mul_res_794_fu_927_p1;
wire  signed [5:0] sext_ln368_131_fu_911_p1;
wire   [2:0] trunc_ln353_5_fu_563_p4;
wire   [2:0] trunc_ln354_55_fu_639_p4;
wire  signed [2:0] mul_res_795_fu_949_p0;
wire  signed [5:0] sext_ln368_135_fu_937_p1;
wire  signed [2:0] mul_res_795_fu_949_p1;
wire  signed [5:0] sext_ln368_134_fu_933_p1;
wire   [2:0] trunc_ln354_56_fu_649_p4;
wire  signed [2:0] mul_res_796_fu_967_p0;
wire  signed [5:0] sext_ln368_136_fu_955_p1;
wire  signed [2:0] mul_res_796_fu_967_p1;
wire   [2:0] trunc_ln354_58_fu_669_p4;
wire  signed [2:0] mul_res_798_fu_985_p0;
wire  signed [5:0] sext_ln368_139_fu_973_p1;
wire  signed [2:0] mul_res_798_fu_985_p1;
wire   [2:0] trunc_ln354_59_fu_679_p4;
wire  signed [2:0] mul_res_799_fu_1003_p0;
wire  signed [5:0] sext_ln368_141_fu_991_p1;
wire  signed [2:0] mul_res_799_fu_1003_p1;
wire   [2:0] trunc_ln354_60_fu_689_p4;
wire  signed [2:0] mul_res_800_fu_1021_p0;
wire  signed [5:0] sext_ln368_142_fu_1009_p1;
wire  signed [2:0] mul_res_800_fu_1021_p1;
wire   [2:0] trunc_ln354_62_fu_709_p4;
wire  signed [2:0] mul_res_802_fu_1039_p0;
wire  signed [5:0] sext_ln368_145_fu_1027_p1;
wire  signed [2:0] mul_res_802_fu_1039_p1;
wire   [2:0] trunc_ln354_63_fu_719_p4;
wire  signed [2:0] mul_res_803_fu_1057_p0;
wire  signed [5:0] sext_ln368_147_fu_1045_p1;
wire  signed [2:0] mul_res_803_fu_1057_p1;
wire   [2:0] trunc_ln354_64_fu_729_p4;
wire  signed [2:0] mul_res_804_fu_1075_p0;
wire  signed [5:0] sext_ln368_148_fu_1063_p1;
wire  signed [2:0] mul_res_804_fu_1075_p1;
wire   [2:0] trunc_ln354_66_fu_749_p4;
wire  signed [2:0] mul_res_806_fu_1093_p0;
wire  signed [5:0] sext_ln368_151_fu_1081_p1;
wire  signed [2:0] mul_res_806_fu_1093_p1;
wire   [2:0] trunc_ln354_67_fu_759_p4;
wire  signed [2:0] mul_res_807_fu_1111_p0;
wire  signed [5:0] sext_ln368_153_fu_1099_p1;
wire  signed [2:0] mul_res_807_fu_1111_p1;
wire   [2:0] trunc_ln354_68_fu_769_p4;
wire  signed [2:0] mul_res_808_fu_1129_p0;
wire  signed [5:0] sext_ln368_154_fu_1117_p1;
wire  signed [2:0] mul_res_808_fu_1129_p1;
wire   [2:0] trunc_ln354_70_fu_789_p4;
wire  signed [2:0] mul_res_810_fu_1147_p0;
wire  signed [5:0] sext_ln368_157_fu_1135_p1;
wire  signed [2:0] mul_res_810_fu_1147_p1;
wire   [2:0] trunc_ln354_71_fu_799_p4;
wire  signed [2:0] mul_res_811_fu_1165_p0;
wire  signed [5:0] sext_ln368_159_fu_1153_p1;
wire  signed [2:0] mul_res_811_fu_1165_p1;
wire   [2:0] trunc_ln354_72_fu_809_p4;
wire  signed [2:0] mul_res_812_fu_1183_p0;
wire  signed [5:0] sext_ln368_160_fu_1171_p1;
wire  signed [2:0] mul_res_812_fu_1183_p1;
wire   [2:0] trunc_ln354_74_fu_829_p4;
wire  signed [2:0] mul_res_814_fu_1201_p0;
wire  signed [5:0] sext_ln368_163_fu_1189_p1;
wire  signed [2:0] mul_res_814_fu_1201_p1;
wire   [2:0] trunc_ln354_75_fu_839_p4;
wire  signed [2:0] mul_res_815_fu_1219_p0;
wire  signed [5:0] sext_ln368_165_fu_1207_p1;
wire  signed [2:0] mul_res_815_fu_1219_p1;
wire   [2:0] trunc_ln354_76_fu_849_p4;
wire  signed [2:0] mul_res_816_fu_1237_p0;
wire  signed [5:0] sext_ln368_166_fu_1225_p1;
wire  signed [2:0] mul_res_816_fu_1237_p1;
wire   [2:0] trunc_ln354_78_fu_869_p4;
wire  signed [2:0] mul_res_818_fu_1255_p0;
wire  signed [5:0] sext_ln368_169_fu_1243_p1;
wire  signed [2:0] mul_res_818_fu_1255_p1;
wire   [2:0] trunc_ln354_79_fu_879_p4;
wire  signed [2:0] mul_res_819_fu_1273_p0;
wire  signed [5:0] sext_ln368_171_fu_1261_p1;
wire  signed [2:0] mul_res_819_fu_1273_p1;
wire   [2:0] trunc_ln353_6_fu_573_p4;
wire  signed [2:0] mul_res_820_fu_1291_p0;
wire  signed [2:0] mul_res_820_fu_1291_p1;
wire  signed [5:0] sext_ln368_172_fu_1279_p1;
wire   [2:0] trunc_ln353_8_fu_593_p4;
wire  signed [2:0] mul_res_822_fu_1309_p0;
wire  signed [2:0] mul_res_822_fu_1309_p1;
wire  signed [5:0] sext_ln368_175_fu_1297_p1;
wire   [2:0] trunc_ln353_9_fu_603_p4;
wire  signed [2:0] mul_res_823_fu_1327_p0;
wire  signed [2:0] mul_res_823_fu_1327_p1;
wire  signed [5:0] sext_ln368_177_fu_1315_p1;
wire  signed [2:0] mul_res_824_fu_1341_p0;
wire  signed [2:0] mul_res_824_fu_1341_p1;
wire  signed [2:0] mul_res_826_fu_1355_p0;
wire  signed [2:0] mul_res_826_fu_1355_p1;
wire  signed [2:0] mul_res_827_fu_1369_p0;
wire  signed [2:0] mul_res_827_fu_1369_p1;
wire  signed [2:0] mul_res_828_fu_1383_p0;
wire  signed [2:0] mul_res_828_fu_1383_p1;
wire  signed [2:0] mul_res_830_fu_1397_p0;
wire  signed [2:0] mul_res_830_fu_1397_p1;
wire  signed [2:0] mul_res_831_fu_1411_p0;
wire  signed [2:0] mul_res_831_fu_1411_p1;
wire  signed [2:0] mul_res_832_fu_1425_p0;
wire  signed [2:0] mul_res_832_fu_1425_p1;
wire  signed [2:0] mul_res_834_fu_1439_p0;
wire  signed [2:0] mul_res_834_fu_1439_p1;
wire  signed [2:0] mul_res_835_fu_1453_p0;
wire  signed [2:0] mul_res_835_fu_1453_p1;
wire  signed [2:0] mul_res_836_fu_1467_p0;
wire  signed [2:0] mul_res_836_fu_1467_p1;
wire  signed [2:0] mul_res_838_fu_1481_p0;
wire  signed [2:0] mul_res_838_fu_1481_p1;
wire  signed [2:0] mul_res_839_fu_1495_p0;
wire  signed [2:0] mul_res_839_fu_1495_p1;
wire  signed [2:0] mul_res_840_fu_1509_p0;
wire  signed [2:0] mul_res_840_fu_1509_p1;
wire  signed [2:0] mul_res_842_fu_1523_p0;
wire  signed [2:0] mul_res_842_fu_1523_p1;
wire  signed [2:0] mul_res_843_fu_1537_p0;
wire  signed [2:0] mul_res_843_fu_1537_p1;
wire  signed [2:0] mul_res_844_fu_1551_p0;
wire  signed [2:0] mul_res_844_fu_1551_p1;
wire  signed [2:0] mul_res_846_fu_1565_p0;
wire  signed [2:0] mul_res_846_fu_1565_p1;
wire  signed [2:0] mul_res_847_fu_1579_p0;
wire  signed [2:0] mul_res_847_fu_1579_p1;
wire  signed [2:0] mul_res_793_fu_1808_p0;
wire  signed [5:0] sext_ln368_130_fu_1797_p1;
wire  signed [2:0] mul_res_793_fu_1808_p1;
wire  signed [5:0] sext_ln368_129_fu_1794_p1;
wire  signed [5:0] mul_res_793_fu_1808_p2;
wire  signed [6:0] sext_ln368_128_fu_1791_p1;
wire  signed [6:0] sext_ln370_95_fu_1821_p1;
wire   [6:0] add_ln370_111_fu_1824_p2;
wire  signed [6:0] sext_ln368_133_fu_1818_p1;
wire   [6:0] add_ln370_112_fu_1830_p2;
wire  signed [9:0] sext_ln370_96_fu_1836_p1;
wire  signed [9:0] sext_ln370_fu_1814_p1;
wire   [9:0] add_ln370_fu_1840_p2;
wire   [9:0] select_ln342_39_fu_1784_p3;
wire  signed [2:0] mul_res_797_fu_1866_p0;
wire  signed [5:0] sext_ln368_138_fu_1855_p1;
wire  signed [2:0] mul_res_797_fu_1866_p1;
wire  signed [5:0] mul_res_797_fu_1866_p2;
wire  signed [6:0] sext_ln368_137_fu_1852_p1;
wire  signed [6:0] sext_ln370_98_fu_1879_p1;
wire   [6:0] add_ln370_115_fu_1882_p2;
wire  signed [6:0] sext_ln368_140_fu_1876_p1;
wire   [6:0] add_ln370_116_fu_1888_p2;
wire  signed [9:0] sext_ln370_99_fu_1894_p1;
wire  signed [9:0] sext_ln370_97_fu_1872_p1;
wire   [9:0] add_ln370_114_fu_1898_p2;
wire   [9:0] select_ln342_38_fu_1777_p3;
wire  signed [2:0] mul_res_801_fu_1924_p0;
wire  signed [5:0] sext_ln368_144_fu_1913_p1;
wire  signed [2:0] mul_res_801_fu_1924_p1;
wire  signed [5:0] mul_res_801_fu_1924_p2;
wire  signed [6:0] sext_ln368_143_fu_1910_p1;
wire  signed [6:0] sext_ln370_101_fu_1937_p1;
wire   [6:0] add_ln370_119_fu_1940_p2;
wire  signed [6:0] sext_ln368_146_fu_1934_p1;
wire   [6:0] add_ln370_120_fu_1946_p2;
wire  signed [9:0] sext_ln370_102_fu_1952_p1;
wire  signed [9:0] sext_ln370_100_fu_1930_p1;
wire   [9:0] add_ln370_118_fu_1956_p2;
wire   [9:0] select_ln342_37_fu_1770_p3;
wire  signed [2:0] mul_res_805_fu_1982_p0;
wire  signed [5:0] sext_ln368_150_fu_1971_p1;
wire  signed [2:0] mul_res_805_fu_1982_p1;
wire  signed [5:0] mul_res_805_fu_1982_p2;
wire  signed [6:0] sext_ln368_149_fu_1968_p1;
wire  signed [6:0] sext_ln370_104_fu_1995_p1;
wire   [6:0] add_ln370_123_fu_1998_p2;
wire  signed [6:0] sext_ln368_152_fu_1992_p1;
wire   [6:0] add_ln370_124_fu_2004_p2;
wire  signed [9:0] sext_ln370_105_fu_2010_p1;
wire  signed [9:0] sext_ln370_103_fu_1988_p1;
wire   [9:0] add_ln370_122_fu_2014_p2;
wire   [9:0] select_ln342_36_fu_1763_p3;
wire  signed [2:0] mul_res_809_fu_2040_p0;
wire  signed [5:0] sext_ln368_156_fu_2029_p1;
wire  signed [2:0] mul_res_809_fu_2040_p1;
wire  signed [5:0] mul_res_809_fu_2040_p2;
wire  signed [6:0] sext_ln368_155_fu_2026_p1;
wire  signed [6:0] sext_ln370_107_fu_2053_p1;
wire   [6:0] add_ln370_127_fu_2056_p2;
wire  signed [6:0] sext_ln368_158_fu_2050_p1;
wire   [6:0] add_ln370_128_fu_2062_p2;
wire  signed [9:0] sext_ln370_108_fu_2068_p1;
wire  signed [9:0] sext_ln370_106_fu_2046_p1;
wire   [9:0] add_ln370_126_fu_2072_p2;
wire   [9:0] select_ln342_35_fu_1756_p3;
wire  signed [2:0] mul_res_813_fu_2098_p0;
wire  signed [5:0] sext_ln368_162_fu_2087_p1;
wire  signed [2:0] mul_res_813_fu_2098_p1;
wire  signed [5:0] mul_res_813_fu_2098_p2;
wire  signed [6:0] sext_ln368_161_fu_2084_p1;
wire  signed [6:0] sext_ln370_110_fu_2111_p1;
wire   [6:0] add_ln370_131_fu_2114_p2;
wire  signed [6:0] sext_ln368_164_fu_2108_p1;
wire   [6:0] add_ln370_132_fu_2120_p2;
wire  signed [9:0] sext_ln370_111_fu_2126_p1;
wire  signed [9:0] sext_ln370_109_fu_2104_p1;
wire   [9:0] add_ln370_130_fu_2130_p2;
wire   [9:0] select_ln342_34_fu_1749_p3;
wire  signed [2:0] mul_res_817_fu_2156_p0;
wire  signed [5:0] sext_ln368_168_fu_2145_p1;
wire  signed [2:0] mul_res_817_fu_2156_p1;
wire  signed [5:0] mul_res_817_fu_2156_p2;
wire  signed [6:0] sext_ln368_167_fu_2142_p1;
wire  signed [6:0] sext_ln370_113_fu_2169_p1;
wire   [6:0] add_ln370_135_fu_2172_p2;
wire  signed [6:0] sext_ln368_170_fu_2166_p1;
wire   [6:0] add_ln370_136_fu_2178_p2;
wire  signed [9:0] sext_ln370_114_fu_2184_p1;
wire  signed [9:0] sext_ln370_112_fu_2162_p1;
wire   [9:0] add_ln370_134_fu_2188_p2;
wire   [9:0] select_ln342_33_fu_1742_p3;
wire  signed [2:0] mul_res_821_fu_2214_p0;
wire  signed [2:0] mul_res_821_fu_2214_p1;
wire  signed [5:0] sext_ln368_174_fu_2203_p1;
wire  signed [5:0] mul_res_821_fu_2214_p2;
wire  signed [6:0] sext_ln368_173_fu_2200_p1;
wire  signed [6:0] sext_ln370_116_fu_2227_p1;
wire   [6:0] add_ln370_139_fu_2230_p2;
wire  signed [6:0] sext_ln368_176_fu_2224_p1;
wire   [6:0] add_ln370_140_fu_2236_p2;
wire  signed [9:0] sext_ln370_117_fu_2242_p1;
wire  signed [9:0] sext_ln370_115_fu_2220_p1;
wire   [9:0] add_ln370_138_fu_2246_p2;
wire   [9:0] select_ln342_32_fu_1735_p3;
wire  signed [2:0] mul_res_825_fu_2269_p0;
wire  signed [2:0] mul_res_825_fu_2269_p1;
wire  signed [5:0] mul_res_825_fu_2269_p2;
wire  signed [6:0] sext_ln368_178_fu_2258_p1;
wire  signed [6:0] sext_ln370_119_fu_2282_p1;
wire   [6:0] add_ln370_143_fu_2285_p2;
wire  signed [6:0] sext_ln368_179_fu_2279_p1;
wire   [6:0] add_ln370_144_fu_2291_p2;
wire  signed [9:0] sext_ln370_120_fu_2297_p1;
wire  signed [9:0] sext_ln370_118_fu_2275_p1;
wire   [9:0] add_ln370_142_fu_2301_p2;
wire   [9:0] select_ln342_31_fu_1728_p3;
wire  signed [2:0] mul_res_829_fu_2324_p0;
wire  signed [2:0] mul_res_829_fu_2324_p1;
wire  signed [5:0] mul_res_829_fu_2324_p2;
wire  signed [6:0] sext_ln368_180_fu_2313_p1;
wire  signed [6:0] sext_ln370_122_fu_2337_p1;
wire   [6:0] add_ln370_147_fu_2340_p2;
wire  signed [6:0] sext_ln368_181_fu_2334_p1;
wire   [6:0] add_ln370_148_fu_2346_p2;
wire  signed [9:0] sext_ln370_123_fu_2352_p1;
wire  signed [9:0] sext_ln370_121_fu_2330_p1;
wire   [9:0] add_ln370_146_fu_2356_p2;
wire   [9:0] select_ln342_30_fu_1721_p3;
wire  signed [2:0] mul_res_833_fu_2379_p0;
wire  signed [2:0] mul_res_833_fu_2379_p1;
wire  signed [5:0] mul_res_833_fu_2379_p2;
wire   [9:0] select_ln342_29_fu_1714_p3;
wire  signed [9:0] sext_ln370_124_fu_2385_p1;
wire  signed [6:0] sext_ln368_182_fu_2368_p1;
wire  signed [6:0] sext_ln370_125_fu_2392_p1;
wire   [6:0] add_ln370_151_fu_2401_p2;
wire  signed [6:0] sext_ln368_183_fu_2389_p1;
wire   [6:0] add_ln370_152_fu_2407_p2;
wire  signed [9:0] sext_ln370_126_fu_2413_p1;
wire   [9:0] add_ln370_150_fu_2395_p2;
wire  signed [2:0] mul_res_837_fu_2434_p0;
wire  signed [2:0] mul_res_837_fu_2434_p1;
wire  signed [5:0] mul_res_837_fu_2434_p2;
wire   [9:0] select_ln342_28_fu_1707_p3;
wire  signed [9:0] sext_ln370_127_fu_2440_p1;
wire  signed [6:0] sext_ln368_184_fu_2423_p1;
wire  signed [6:0] sext_ln370_128_fu_2447_p1;
wire   [6:0] add_ln370_155_fu_2456_p2;
wire  signed [6:0] sext_ln368_185_fu_2444_p1;
wire   [6:0] add_ln370_156_fu_2462_p2;
wire  signed [9:0] sext_ln370_129_fu_2468_p1;
wire   [9:0] add_ln370_154_fu_2450_p2;
wire  signed [2:0] mul_res_841_fu_2489_p0;
wire  signed [2:0] mul_res_841_fu_2489_p1;
wire  signed [5:0] mul_res_841_fu_2489_p2;
wire   [9:0] select_ln342_27_fu_1700_p3;
wire  signed [9:0] sext_ln370_130_fu_2495_p1;
wire  signed [6:0] sext_ln368_186_fu_2478_p1;
wire  signed [6:0] sext_ln370_131_fu_2502_p1;
wire   [6:0] add_ln370_159_fu_2511_p2;
wire  signed [6:0] sext_ln368_187_fu_2499_p1;
wire   [6:0] add_ln370_160_fu_2517_p2;
wire  signed [9:0] sext_ln370_132_fu_2523_p1;
wire   [9:0] add_ln370_158_fu_2505_p2;
wire  signed [2:0] mul_res_845_fu_2544_p0;
wire  signed [2:0] mul_res_845_fu_2544_p1;
wire  signed [5:0] mul_res_845_fu_2544_p2;
wire   [9:0] select_ln342_fu_1693_p3;
wire  signed [9:0] sext_ln370_133_fu_2550_p1;
wire  signed [6:0] sext_ln368_188_fu_2533_p1;
wire  signed [6:0] sext_ln370_134_fu_2557_p1;
wire   [6:0] add_ln370_163_fu_2566_p2;
wire  signed [6:0] sext_ln368_189_fu_2554_p1;
wire   [6:0] add_ln370_164_fu_2572_p2;
wire  signed [9:0] sext_ln370_135_fu_2578_p1;
wire   [9:0] add_ln370_162_fu_2560_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_313;
reg    ap_condition_372;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_304 = 5'd0;
//#0 empty_fu_308 = 10'd0;
//#0 empty_1131_fu_312 = 10'd0;
//#0 empty_1132_fu_316 = 10'd0;
//#0 empty_1133_fu_320 = 10'd0;
//#0 empty_1134_fu_324 = 10'd0;
//#0 empty_1135_fu_328 = 10'd0;
//#0 empty_1136_fu_332 = 10'd0;
//#0 empty_1137_fu_336 = 10'd0;
//#0 empty_1138_fu_340 = 10'd0;
//#0 empty_1139_fu_344 = 10'd0;
//#0 empty_1140_fu_348 = 10'd0;
//#0 empty_1141_fu_352 = 10'd0;
//#0 empty_1142_fu_356 = 10'd0;
//#0 empty_1143_fu_360 = 10'd0;
//#0 indvar_flatten_fu_364 = 10'd0;
//#0 indvar_flatten51_fu_368 = 16'd0;
end

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U754(
    .din0(mul_res_fu_905_p0),
    .din1(mul_res_fu_905_p1),
    .dout(mul_res_fu_905_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U755(
    .din0(mul_res_794_fu_927_p0),
    .din1(mul_res_794_fu_927_p1),
    .dout(mul_res_794_fu_927_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U756(
    .din0(mul_res_795_fu_949_p0),
    .din1(mul_res_795_fu_949_p1),
    .dout(mul_res_795_fu_949_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U757(
    .din0(mul_res_796_fu_967_p0),
    .din1(mul_res_796_fu_967_p1),
    .dout(mul_res_796_fu_967_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U758(
    .din0(mul_res_798_fu_985_p0),
    .din1(mul_res_798_fu_985_p1),
    .dout(mul_res_798_fu_985_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U759(
    .din0(mul_res_799_fu_1003_p0),
    .din1(mul_res_799_fu_1003_p1),
    .dout(mul_res_799_fu_1003_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U760(
    .din0(mul_res_800_fu_1021_p0),
    .din1(mul_res_800_fu_1021_p1),
    .dout(mul_res_800_fu_1021_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U761(
    .din0(mul_res_802_fu_1039_p0),
    .din1(mul_res_802_fu_1039_p1),
    .dout(mul_res_802_fu_1039_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U762(
    .din0(mul_res_803_fu_1057_p0),
    .din1(mul_res_803_fu_1057_p1),
    .dout(mul_res_803_fu_1057_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U763(
    .din0(mul_res_804_fu_1075_p0),
    .din1(mul_res_804_fu_1075_p1),
    .dout(mul_res_804_fu_1075_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U764(
    .din0(mul_res_806_fu_1093_p0),
    .din1(mul_res_806_fu_1093_p1),
    .dout(mul_res_806_fu_1093_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U765(
    .din0(mul_res_807_fu_1111_p0),
    .din1(mul_res_807_fu_1111_p1),
    .dout(mul_res_807_fu_1111_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U766(
    .din0(mul_res_808_fu_1129_p0),
    .din1(mul_res_808_fu_1129_p1),
    .dout(mul_res_808_fu_1129_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U767(
    .din0(mul_res_810_fu_1147_p0),
    .din1(mul_res_810_fu_1147_p1),
    .dout(mul_res_810_fu_1147_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U768(
    .din0(mul_res_811_fu_1165_p0),
    .din1(mul_res_811_fu_1165_p1),
    .dout(mul_res_811_fu_1165_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U769(
    .din0(mul_res_812_fu_1183_p0),
    .din1(mul_res_812_fu_1183_p1),
    .dout(mul_res_812_fu_1183_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U770(
    .din0(mul_res_814_fu_1201_p0),
    .din1(mul_res_814_fu_1201_p1),
    .dout(mul_res_814_fu_1201_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U771(
    .din0(mul_res_815_fu_1219_p0),
    .din1(mul_res_815_fu_1219_p1),
    .dout(mul_res_815_fu_1219_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U772(
    .din0(mul_res_816_fu_1237_p0),
    .din1(mul_res_816_fu_1237_p1),
    .dout(mul_res_816_fu_1237_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U773(
    .din0(mul_res_818_fu_1255_p0),
    .din1(mul_res_818_fu_1255_p1),
    .dout(mul_res_818_fu_1255_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U774(
    .din0(mul_res_819_fu_1273_p0),
    .din1(mul_res_819_fu_1273_p1),
    .dout(mul_res_819_fu_1273_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U775(
    .din0(mul_res_820_fu_1291_p0),
    .din1(mul_res_820_fu_1291_p1),
    .dout(mul_res_820_fu_1291_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U776(
    .din0(mul_res_822_fu_1309_p0),
    .din1(mul_res_822_fu_1309_p1),
    .dout(mul_res_822_fu_1309_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U777(
    .din0(mul_res_823_fu_1327_p0),
    .din1(mul_res_823_fu_1327_p1),
    .dout(mul_res_823_fu_1327_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U778(
    .din0(mul_res_824_fu_1341_p0),
    .din1(mul_res_824_fu_1341_p1),
    .dout(mul_res_824_fu_1341_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U779(
    .din0(mul_res_826_fu_1355_p0),
    .din1(mul_res_826_fu_1355_p1),
    .dout(mul_res_826_fu_1355_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U780(
    .din0(mul_res_827_fu_1369_p0),
    .din1(mul_res_827_fu_1369_p1),
    .dout(mul_res_827_fu_1369_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U781(
    .din0(mul_res_828_fu_1383_p0),
    .din1(mul_res_828_fu_1383_p1),
    .dout(mul_res_828_fu_1383_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U782(
    .din0(mul_res_830_fu_1397_p0),
    .din1(mul_res_830_fu_1397_p1),
    .dout(mul_res_830_fu_1397_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U783(
    .din0(mul_res_831_fu_1411_p0),
    .din1(mul_res_831_fu_1411_p1),
    .dout(mul_res_831_fu_1411_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U784(
    .din0(mul_res_832_fu_1425_p0),
    .din1(mul_res_832_fu_1425_p1),
    .dout(mul_res_832_fu_1425_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U785(
    .din0(mul_res_834_fu_1439_p0),
    .din1(mul_res_834_fu_1439_p1),
    .dout(mul_res_834_fu_1439_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U786(
    .din0(mul_res_835_fu_1453_p0),
    .din1(mul_res_835_fu_1453_p1),
    .dout(mul_res_835_fu_1453_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U787(
    .din0(mul_res_836_fu_1467_p0),
    .din1(mul_res_836_fu_1467_p1),
    .dout(mul_res_836_fu_1467_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U788(
    .din0(mul_res_838_fu_1481_p0),
    .din1(mul_res_838_fu_1481_p1),
    .dout(mul_res_838_fu_1481_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U789(
    .din0(mul_res_839_fu_1495_p0),
    .din1(mul_res_839_fu_1495_p1),
    .dout(mul_res_839_fu_1495_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U790(
    .din0(mul_res_840_fu_1509_p0),
    .din1(mul_res_840_fu_1509_p1),
    .dout(mul_res_840_fu_1509_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U791(
    .din0(mul_res_842_fu_1523_p0),
    .din1(mul_res_842_fu_1523_p1),
    .dout(mul_res_842_fu_1523_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U792(
    .din0(mul_res_843_fu_1537_p0),
    .din1(mul_res_843_fu_1537_p1),
    .dout(mul_res_843_fu_1537_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U793(
    .din0(mul_res_844_fu_1551_p0),
    .din1(mul_res_844_fu_1551_p1),
    .dout(mul_res_844_fu_1551_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U794(
    .din0(mul_res_846_fu_1565_p0),
    .din1(mul_res_846_fu_1565_p1),
    .dout(mul_res_846_fu_1565_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U795(
    .din0(mul_res_847_fu_1579_p0),
    .din1(mul_res_847_fu_1579_p1),
    .dout(mul_res_847_fu_1579_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U796(
    .din0(mul_res_793_fu_1808_p0),
    .din1(mul_res_793_fu_1808_p1),
    .dout(mul_res_793_fu_1808_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U797(
    .din0(mul_res_797_fu_1866_p0),
    .din1(mul_res_797_fu_1866_p1),
    .dout(mul_res_797_fu_1866_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U798(
    .din0(mul_res_801_fu_1924_p0),
    .din1(mul_res_801_fu_1924_p1),
    .dout(mul_res_801_fu_1924_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U799(
    .din0(mul_res_805_fu_1982_p0),
    .din1(mul_res_805_fu_1982_p1),
    .dout(mul_res_805_fu_1982_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U800(
    .din0(mul_res_809_fu_2040_p0),
    .din1(mul_res_809_fu_2040_p1),
    .dout(mul_res_809_fu_2040_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U801(
    .din0(mul_res_813_fu_2098_p0),
    .din1(mul_res_813_fu_2098_p1),
    .dout(mul_res_813_fu_2098_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U802(
    .din0(mul_res_817_fu_2156_p0),
    .din1(mul_res_817_fu_2156_p1),
    .dout(mul_res_817_fu_2156_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U803(
    .din0(mul_res_821_fu_2214_p0),
    .din1(mul_res_821_fu_2214_p1),
    .dout(mul_res_821_fu_2214_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U804(
    .din0(mul_res_825_fu_2269_p0),
    .din1(mul_res_825_fu_2269_p1),
    .dout(mul_res_825_fu_2269_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U805(
    .din0(mul_res_829_fu_2324_p0),
    .din1(mul_res_829_fu_2324_p1),
    .dout(mul_res_829_fu_2324_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U806(
    .din0(mul_res_833_fu_2379_p0),
    .din1(mul_res_833_fu_2379_p1),
    .dout(mul_res_833_fu_2379_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U807(
    .din0(mul_res_837_fu_2434_p0),
    .din1(mul_res_837_fu_2434_p1),
    .dout(mul_res_837_fu_2434_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U808(
    .din0(mul_res_841_fu_2489_p0),
    .din1(mul_res_841_fu_2489_p1),
    .dout(mul_res_841_fu_2489_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U809(
    .din0(mul_res_845_fu_2544_p0),
    .din1(mul_res_845_fu_2544_p1),
    .dout(mul_res_845_fu_2544_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_313)) begin
        cit_fu_304 <= cit_5_fu_1591_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_372)) begin
    if ((icmp_ln336_fu_445_p2 == 1'd0)) begin
        indvar_flatten51_fu_368 <= add_ln336_fu_439_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten51_fu_368 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_372)) begin
    if ((icmp_ln336_fu_445_p2 == 1'd0)) begin
        indvar_flatten_fu_364 <= select_ln337_5_fu_463_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_364 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln370_113_reg_3208 <= add_ln370_113_fu_1846_p2;
        add_ln370_117_reg_3213 <= add_ln370_117_fu_1904_p2;
        add_ln370_121_reg_3218 <= add_ln370_121_fu_1962_p2;
        add_ln370_125_reg_3223 <= add_ln370_125_fu_2020_p2;
        add_ln370_129_reg_3228 <= add_ln370_129_fu_2078_p2;
        add_ln370_133_reg_3233 <= add_ln370_133_fu_2136_p2;
        add_ln370_137_reg_3238 <= add_ln370_137_fu_2194_p2;
        add_ln370_141_reg_3243 <= add_ln370_141_fu_2252_p2;
        add_ln370_145_reg_3248 <= add_ln370_145_fu_2307_p2;
        add_ln370_149_reg_3253 <= add_ln370_149_fu_2362_p2;
        add_ln370_153_reg_3258 <= add_ln370_153_fu_2417_p2;
        add_ln370_157_reg_3263 <= add_ln370_157_fu_2472_p2;
        add_ln370_161_reg_3268 <= add_ln370_161_fu_2527_p2;
        add_ln370_165_reg_3273 <= add_ln370_165_fu_2582_p2;
        icmp_ln378_reg_3204_pp0_iter2_reg <= icmp_ln378_reg_3204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln337_reg_2925 <= icmp_ln337_fu_451_p2;
        icmp_ln342_reg_2931 <= icmp_ln342_fu_531_p2;
        icmp_ln378_reg_3204 <= icmp_ln378_fu_1585_p2;
        mul_res_794_reg_2999 <= mul_res_794_fu_927_p2;
        mul_res_795_reg_3004 <= mul_res_795_fu_949_p2;
        mul_res_796_reg_3009 <= mul_res_796_fu_967_p2;
        mul_res_798_reg_3014 <= mul_res_798_fu_985_p2;
        mul_res_799_reg_3019 <= mul_res_799_fu_1003_p2;
        mul_res_800_reg_3024 <= mul_res_800_fu_1021_p2;
        mul_res_802_reg_3029 <= mul_res_802_fu_1039_p2;
        mul_res_803_reg_3034 <= mul_res_803_fu_1057_p2;
        mul_res_804_reg_3039 <= mul_res_804_fu_1075_p2;
        mul_res_806_reg_3044 <= mul_res_806_fu_1093_p2;
        mul_res_807_reg_3049 <= mul_res_807_fu_1111_p2;
        mul_res_808_reg_3054 <= mul_res_808_fu_1129_p2;
        mul_res_810_reg_3059 <= mul_res_810_fu_1147_p2;
        mul_res_811_reg_3064 <= mul_res_811_fu_1165_p2;
        mul_res_812_reg_3069 <= mul_res_812_fu_1183_p2;
        mul_res_814_reg_3074 <= mul_res_814_fu_1201_p2;
        mul_res_815_reg_3079 <= mul_res_815_fu_1219_p2;
        mul_res_816_reg_3084 <= mul_res_816_fu_1237_p2;
        mul_res_818_reg_3089 <= mul_res_818_fu_1255_p2;
        mul_res_819_reg_3094 <= mul_res_819_fu_1273_p2;
        mul_res_820_reg_3099 <= mul_res_820_fu_1291_p2;
        mul_res_822_reg_3104 <= mul_res_822_fu_1309_p2;
        mul_res_823_reg_3109 <= mul_res_823_fu_1327_p2;
        mul_res_824_reg_3114 <= mul_res_824_fu_1341_p2;
        mul_res_826_reg_3119 <= mul_res_826_fu_1355_p2;
        mul_res_827_reg_3124 <= mul_res_827_fu_1369_p2;
        mul_res_828_reg_3129 <= mul_res_828_fu_1383_p2;
        mul_res_830_reg_3134 <= mul_res_830_fu_1397_p2;
        mul_res_831_reg_3139 <= mul_res_831_fu_1411_p2;
        mul_res_832_reg_3144 <= mul_res_832_fu_1425_p2;
        mul_res_834_reg_3149 <= mul_res_834_fu_1439_p2;
        mul_res_835_reg_3154 <= mul_res_835_fu_1453_p2;
        mul_res_836_reg_3159 <= mul_res_836_fu_1467_p2;
        mul_res_838_reg_3164 <= mul_res_838_fu_1481_p2;
        mul_res_839_reg_3169 <= mul_res_839_fu_1495_p2;
        mul_res_840_reg_3174 <= mul_res_840_fu_1509_p2;
        mul_res_842_reg_3179 <= mul_res_842_fu_1523_p2;
        mul_res_843_reg_3184 <= mul_res_843_fu_1537_p2;
        mul_res_844_reg_3189 <= mul_res_844_fu_1551_p2;
        mul_res_846_reg_3194 <= mul_res_846_fu_1565_p2;
        mul_res_847_reg_3199 <= mul_res_847_fu_1579_p2;
        mul_res_reg_2994 <= mul_res_fu_905_p2;
        trunc_ln353_7_reg_2954 <= {{cache_window_sm_dout[17:15]}};
        trunc_ln353_s_reg_2949 <= {{cache_window_sm_dout[5:3]}};
        trunc_ln354_57_reg_2964 <= {{weight_sm_dout[17:15]}};
        trunc_ln354_61_reg_2969 <= {{weight_sm_dout[29:27]}};
        trunc_ln354_65_reg_2974 <= {{weight_sm_dout[41:39]}};
        trunc_ln354_69_reg_2979 <= {{weight_sm_dout[53:51]}};
        trunc_ln354_73_reg_2984 <= {{weight_sm_dout[65:63]}};
        trunc_ln354_77_reg_2989 <= {{weight_sm_dout[77:75]}};
        trunc_ln354_s_reg_2959 <= {{weight_sm_dout[5:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_1131_fu_312 <= add_ln370_117_fu_1904_p2;
        empty_1132_fu_316 <= add_ln370_121_fu_1962_p2;
        empty_1133_fu_320 <= add_ln370_125_fu_2020_p2;
        empty_1134_fu_324 <= add_ln370_129_fu_2078_p2;
        empty_1135_fu_328 <= add_ln370_133_fu_2136_p2;
        empty_1136_fu_332 <= add_ln370_137_fu_2194_p2;
        empty_1137_fu_336 <= add_ln370_141_fu_2252_p2;
        empty_1138_fu_340 <= add_ln370_145_fu_2307_p2;
        empty_1139_fu_344 <= add_ln370_149_fu_2362_p2;
        empty_1140_fu_348 <= add_ln370_153_fu_2417_p2;
        empty_1141_fu_352 <= add_ln370_157_fu_2472_p2;
        empty_1142_fu_356 <= add_ln370_161_fu_2527_p2;
        empty_1143_fu_360 <= add_ln370_165_fu_2582_p2;
        empty_fu_308 <= add_ln370_113_fu_1846_p2;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_445_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_304;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten51_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten51_load = indvar_flatten51_fu_368;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_364;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten51_load + 16'd1);

assign add_ln337_fu_457_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln370_111_fu_1824_p2 = ($signed(sext_ln368_128_fu_1791_p1) + $signed(sext_ln370_95_fu_1821_p1));

assign add_ln370_112_fu_1830_p2 = ($signed(add_ln370_111_fu_1824_p2) + $signed(sext_ln368_133_fu_1818_p1));

assign add_ln370_113_fu_1846_p2 = (add_ln370_fu_1840_p2 + select_ln342_39_fu_1784_p3);

assign add_ln370_114_fu_1898_p2 = ($signed(sext_ln370_99_fu_1894_p1) + $signed(sext_ln370_97_fu_1872_p1));

assign add_ln370_115_fu_1882_p2 = ($signed(sext_ln368_137_fu_1852_p1) + $signed(sext_ln370_98_fu_1879_p1));

assign add_ln370_116_fu_1888_p2 = ($signed(add_ln370_115_fu_1882_p2) + $signed(sext_ln368_140_fu_1876_p1));

assign add_ln370_117_fu_1904_p2 = (add_ln370_114_fu_1898_p2 + select_ln342_38_fu_1777_p3);

assign add_ln370_118_fu_1956_p2 = ($signed(sext_ln370_102_fu_1952_p1) + $signed(sext_ln370_100_fu_1930_p1));

assign add_ln370_119_fu_1940_p2 = ($signed(sext_ln368_143_fu_1910_p1) + $signed(sext_ln370_101_fu_1937_p1));

assign add_ln370_120_fu_1946_p2 = ($signed(add_ln370_119_fu_1940_p2) + $signed(sext_ln368_146_fu_1934_p1));

assign add_ln370_121_fu_1962_p2 = (add_ln370_118_fu_1956_p2 + select_ln342_37_fu_1770_p3);

assign add_ln370_122_fu_2014_p2 = ($signed(sext_ln370_105_fu_2010_p1) + $signed(sext_ln370_103_fu_1988_p1));

assign add_ln370_123_fu_1998_p2 = ($signed(sext_ln368_149_fu_1968_p1) + $signed(sext_ln370_104_fu_1995_p1));

assign add_ln370_124_fu_2004_p2 = ($signed(add_ln370_123_fu_1998_p2) + $signed(sext_ln368_152_fu_1992_p1));

assign add_ln370_125_fu_2020_p2 = (add_ln370_122_fu_2014_p2 + select_ln342_36_fu_1763_p3);

assign add_ln370_126_fu_2072_p2 = ($signed(sext_ln370_108_fu_2068_p1) + $signed(sext_ln370_106_fu_2046_p1));

assign add_ln370_127_fu_2056_p2 = ($signed(sext_ln368_155_fu_2026_p1) + $signed(sext_ln370_107_fu_2053_p1));

assign add_ln370_128_fu_2062_p2 = ($signed(add_ln370_127_fu_2056_p2) + $signed(sext_ln368_158_fu_2050_p1));

assign add_ln370_129_fu_2078_p2 = (add_ln370_126_fu_2072_p2 + select_ln342_35_fu_1756_p3);

assign add_ln370_130_fu_2130_p2 = ($signed(sext_ln370_111_fu_2126_p1) + $signed(sext_ln370_109_fu_2104_p1));

assign add_ln370_131_fu_2114_p2 = ($signed(sext_ln368_161_fu_2084_p1) + $signed(sext_ln370_110_fu_2111_p1));

assign add_ln370_132_fu_2120_p2 = ($signed(add_ln370_131_fu_2114_p2) + $signed(sext_ln368_164_fu_2108_p1));

assign add_ln370_133_fu_2136_p2 = (add_ln370_130_fu_2130_p2 + select_ln342_34_fu_1749_p3);

assign add_ln370_134_fu_2188_p2 = ($signed(sext_ln370_114_fu_2184_p1) + $signed(sext_ln370_112_fu_2162_p1));

assign add_ln370_135_fu_2172_p2 = ($signed(sext_ln368_167_fu_2142_p1) + $signed(sext_ln370_113_fu_2169_p1));

assign add_ln370_136_fu_2178_p2 = ($signed(add_ln370_135_fu_2172_p2) + $signed(sext_ln368_170_fu_2166_p1));

assign add_ln370_137_fu_2194_p2 = (add_ln370_134_fu_2188_p2 + select_ln342_33_fu_1742_p3);

assign add_ln370_138_fu_2246_p2 = ($signed(sext_ln370_117_fu_2242_p1) + $signed(sext_ln370_115_fu_2220_p1));

assign add_ln370_139_fu_2230_p2 = ($signed(sext_ln368_173_fu_2200_p1) + $signed(sext_ln370_116_fu_2227_p1));

assign add_ln370_140_fu_2236_p2 = ($signed(add_ln370_139_fu_2230_p2) + $signed(sext_ln368_176_fu_2224_p1));

assign add_ln370_141_fu_2252_p2 = (add_ln370_138_fu_2246_p2 + select_ln342_32_fu_1735_p3);

assign add_ln370_142_fu_2301_p2 = ($signed(sext_ln370_120_fu_2297_p1) + $signed(sext_ln370_118_fu_2275_p1));

assign add_ln370_143_fu_2285_p2 = ($signed(sext_ln368_178_fu_2258_p1) + $signed(sext_ln370_119_fu_2282_p1));

assign add_ln370_144_fu_2291_p2 = ($signed(add_ln370_143_fu_2285_p2) + $signed(sext_ln368_179_fu_2279_p1));

assign add_ln370_145_fu_2307_p2 = (add_ln370_142_fu_2301_p2 + select_ln342_31_fu_1728_p3);

assign add_ln370_146_fu_2356_p2 = ($signed(sext_ln370_123_fu_2352_p1) + $signed(sext_ln370_121_fu_2330_p1));

assign add_ln370_147_fu_2340_p2 = ($signed(sext_ln368_180_fu_2313_p1) + $signed(sext_ln370_122_fu_2337_p1));

assign add_ln370_148_fu_2346_p2 = ($signed(add_ln370_147_fu_2340_p2) + $signed(sext_ln368_181_fu_2334_p1));

assign add_ln370_149_fu_2362_p2 = (add_ln370_146_fu_2356_p2 + select_ln342_30_fu_1721_p3);

assign add_ln370_150_fu_2395_p2 = ($signed(select_ln342_29_fu_1714_p3) + $signed(sext_ln370_124_fu_2385_p1));

assign add_ln370_151_fu_2401_p2 = ($signed(sext_ln368_182_fu_2368_p1) + $signed(sext_ln370_125_fu_2392_p1));

assign add_ln370_152_fu_2407_p2 = ($signed(add_ln370_151_fu_2401_p2) + $signed(sext_ln368_183_fu_2389_p1));

assign add_ln370_153_fu_2417_p2 = ($signed(sext_ln370_126_fu_2413_p1) + $signed(add_ln370_150_fu_2395_p2));

assign add_ln370_154_fu_2450_p2 = ($signed(select_ln342_28_fu_1707_p3) + $signed(sext_ln370_127_fu_2440_p1));

assign add_ln370_155_fu_2456_p2 = ($signed(sext_ln368_184_fu_2423_p1) + $signed(sext_ln370_128_fu_2447_p1));

assign add_ln370_156_fu_2462_p2 = ($signed(add_ln370_155_fu_2456_p2) + $signed(sext_ln368_185_fu_2444_p1));

assign add_ln370_157_fu_2472_p2 = ($signed(sext_ln370_129_fu_2468_p1) + $signed(add_ln370_154_fu_2450_p2));

assign add_ln370_158_fu_2505_p2 = ($signed(select_ln342_27_fu_1700_p3) + $signed(sext_ln370_130_fu_2495_p1));

assign add_ln370_159_fu_2511_p2 = ($signed(sext_ln368_186_fu_2478_p1) + $signed(sext_ln370_131_fu_2502_p1));

assign add_ln370_160_fu_2517_p2 = ($signed(add_ln370_159_fu_2511_p2) + $signed(sext_ln368_187_fu_2499_p1));

assign add_ln370_161_fu_2527_p2 = ($signed(sext_ln370_132_fu_2523_p1) + $signed(add_ln370_158_fu_2505_p2));

assign add_ln370_162_fu_2560_p2 = ($signed(select_ln342_fu_1693_p3) + $signed(sext_ln370_133_fu_2550_p1));

assign add_ln370_163_fu_2566_p2 = ($signed(sext_ln368_188_fu_2533_p1) + $signed(sext_ln370_134_fu_2557_p1));

assign add_ln370_164_fu_2572_p2 = ($signed(add_ln370_163_fu_2566_p2) + $signed(sext_ln368_189_fu_2554_p1));

assign add_ln370_165_fu_2582_p2 = ($signed(sext_ln370_135_fu_2578_p1) + $signed(add_ln370_162_fu_2560_p2));

assign add_ln370_fu_1840_p2 = ($signed(sext_ln370_96_fu_1836_p1) + $signed(sext_ln370_fu_1814_p1));

assign and_ln336_fu_512_p2 = (xor_ln336_fu_501_p2 & icmp_ln338_fu_506_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((weight_sm_empty_n == 1'b0) | (cache_window_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_313 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_372 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign cit_5_fu_1591_p2 = (select_ln337_fu_523_p3 + 5'd1);

assign icmp_ln336_fu_445_p2 = ((ap_sig_allocacmp_indvar_flatten51_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_451_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_506_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_531_p2 = ((select_ln337_fu_523_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1585_p2 = ((select_ln337_fu_523_p3 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = {{{{{{{{{{{{{{add_ln370_165_reg_3273}, {add_ln370_161_reg_3268}}, {add_ln370_157_reg_3263}}, {add_ln370_153_reg_3258}}, {add_ln370_149_reg_3253}}, {add_ln370_145_reg_3248}}, {add_ln370_141_reg_3243}}, {add_ln370_137_reg_3238}}, {add_ln370_133_reg_3233}}, {add_ln370_129_reg_3228}}, {add_ln370_125_reg_3223}}, {add_ln370_121_reg_3218}}, {add_ln370_117_reg_3213}}, {add_ln370_113_reg_3208}};

assign mul_res_793_fu_1808_p0 = sext_ln368_130_fu_1797_p1;

assign mul_res_793_fu_1808_p1 = sext_ln368_129_fu_1794_p1;

assign mul_res_794_fu_927_p0 = sext_ln368_132_fu_915_p1;

assign mul_res_794_fu_927_p1 = sext_ln368_131_fu_911_p1;

assign mul_res_795_fu_949_p0 = sext_ln368_135_fu_937_p1;

assign mul_res_795_fu_949_p1 = sext_ln368_134_fu_933_p1;

assign mul_res_796_fu_967_p0 = sext_ln368_136_fu_955_p1;

assign mul_res_796_fu_967_p1 = sext_ln368_fu_889_p1;

assign mul_res_797_fu_1866_p0 = sext_ln368_138_fu_1855_p1;

assign mul_res_797_fu_1866_p1 = sext_ln368_129_fu_1794_p1;

assign mul_res_798_fu_985_p0 = sext_ln368_139_fu_973_p1;

assign mul_res_798_fu_985_p1 = sext_ln368_131_fu_911_p1;

assign mul_res_799_fu_1003_p0 = sext_ln368_141_fu_991_p1;

assign mul_res_799_fu_1003_p1 = sext_ln368_134_fu_933_p1;

assign mul_res_800_fu_1021_p0 = sext_ln368_142_fu_1009_p1;

assign mul_res_800_fu_1021_p1 = sext_ln368_fu_889_p1;

assign mul_res_801_fu_1924_p0 = sext_ln368_144_fu_1913_p1;

assign mul_res_801_fu_1924_p1 = sext_ln368_129_fu_1794_p1;

assign mul_res_802_fu_1039_p0 = sext_ln368_145_fu_1027_p1;

assign mul_res_802_fu_1039_p1 = sext_ln368_131_fu_911_p1;

assign mul_res_803_fu_1057_p0 = sext_ln368_147_fu_1045_p1;

assign mul_res_803_fu_1057_p1 = sext_ln368_134_fu_933_p1;

assign mul_res_804_fu_1075_p0 = sext_ln368_148_fu_1063_p1;

assign mul_res_804_fu_1075_p1 = sext_ln368_fu_889_p1;

assign mul_res_805_fu_1982_p0 = sext_ln368_150_fu_1971_p1;

assign mul_res_805_fu_1982_p1 = sext_ln368_129_fu_1794_p1;

assign mul_res_806_fu_1093_p0 = sext_ln368_151_fu_1081_p1;

assign mul_res_806_fu_1093_p1 = sext_ln368_131_fu_911_p1;

assign mul_res_807_fu_1111_p0 = sext_ln368_153_fu_1099_p1;

assign mul_res_807_fu_1111_p1 = sext_ln368_134_fu_933_p1;

assign mul_res_808_fu_1129_p0 = sext_ln368_154_fu_1117_p1;

assign mul_res_808_fu_1129_p1 = sext_ln368_fu_889_p1;

assign mul_res_809_fu_2040_p0 = sext_ln368_156_fu_2029_p1;

assign mul_res_809_fu_2040_p1 = sext_ln368_129_fu_1794_p1;

assign mul_res_810_fu_1147_p0 = sext_ln368_157_fu_1135_p1;

assign mul_res_810_fu_1147_p1 = sext_ln368_131_fu_911_p1;

assign mul_res_811_fu_1165_p0 = sext_ln368_159_fu_1153_p1;

assign mul_res_811_fu_1165_p1 = sext_ln368_134_fu_933_p1;

assign mul_res_812_fu_1183_p0 = sext_ln368_160_fu_1171_p1;

assign mul_res_812_fu_1183_p1 = sext_ln368_fu_889_p1;

assign mul_res_813_fu_2098_p0 = sext_ln368_162_fu_2087_p1;

assign mul_res_813_fu_2098_p1 = sext_ln368_129_fu_1794_p1;

assign mul_res_814_fu_1201_p0 = sext_ln368_163_fu_1189_p1;

assign mul_res_814_fu_1201_p1 = sext_ln368_131_fu_911_p1;

assign mul_res_815_fu_1219_p0 = sext_ln368_165_fu_1207_p1;

assign mul_res_815_fu_1219_p1 = sext_ln368_134_fu_933_p1;

assign mul_res_816_fu_1237_p0 = sext_ln368_166_fu_1225_p1;

assign mul_res_816_fu_1237_p1 = sext_ln368_fu_889_p1;

assign mul_res_817_fu_2156_p0 = sext_ln368_168_fu_2145_p1;

assign mul_res_817_fu_2156_p1 = sext_ln368_129_fu_1794_p1;

assign mul_res_818_fu_1255_p0 = sext_ln368_169_fu_1243_p1;

assign mul_res_818_fu_1255_p1 = sext_ln368_131_fu_911_p1;

assign mul_res_819_fu_1273_p0 = sext_ln368_171_fu_1261_p1;

assign mul_res_819_fu_1273_p1 = sext_ln368_134_fu_933_p1;

assign mul_res_820_fu_1291_p0 = sext_ln368_127_fu_893_p1;

assign mul_res_820_fu_1291_p1 = sext_ln368_172_fu_1279_p1;

assign mul_res_821_fu_2214_p0 = sext_ln368_130_fu_1797_p1;

assign mul_res_821_fu_2214_p1 = sext_ln368_174_fu_2203_p1;

assign mul_res_822_fu_1309_p0 = sext_ln368_132_fu_915_p1;

assign mul_res_822_fu_1309_p1 = sext_ln368_175_fu_1297_p1;

assign mul_res_823_fu_1327_p0 = sext_ln368_135_fu_937_p1;

assign mul_res_823_fu_1327_p1 = sext_ln368_177_fu_1315_p1;

assign mul_res_824_fu_1341_p0 = sext_ln368_136_fu_955_p1;

assign mul_res_824_fu_1341_p1 = sext_ln368_172_fu_1279_p1;

assign mul_res_825_fu_2269_p0 = sext_ln368_138_fu_1855_p1;

assign mul_res_825_fu_2269_p1 = sext_ln368_174_fu_2203_p1;

assign mul_res_826_fu_1355_p0 = sext_ln368_139_fu_973_p1;

assign mul_res_826_fu_1355_p1 = sext_ln368_175_fu_1297_p1;

assign mul_res_827_fu_1369_p0 = sext_ln368_141_fu_991_p1;

assign mul_res_827_fu_1369_p1 = sext_ln368_177_fu_1315_p1;

assign mul_res_828_fu_1383_p0 = sext_ln368_142_fu_1009_p1;

assign mul_res_828_fu_1383_p1 = sext_ln368_172_fu_1279_p1;

assign mul_res_829_fu_2324_p0 = sext_ln368_144_fu_1913_p1;

assign mul_res_829_fu_2324_p1 = sext_ln368_174_fu_2203_p1;

assign mul_res_830_fu_1397_p0 = sext_ln368_145_fu_1027_p1;

assign mul_res_830_fu_1397_p1 = sext_ln368_175_fu_1297_p1;

assign mul_res_831_fu_1411_p0 = sext_ln368_147_fu_1045_p1;

assign mul_res_831_fu_1411_p1 = sext_ln368_177_fu_1315_p1;

assign mul_res_832_fu_1425_p0 = sext_ln368_148_fu_1063_p1;

assign mul_res_832_fu_1425_p1 = sext_ln368_172_fu_1279_p1;

assign mul_res_833_fu_2379_p0 = sext_ln368_150_fu_1971_p1;

assign mul_res_833_fu_2379_p1 = sext_ln368_174_fu_2203_p1;

assign mul_res_834_fu_1439_p0 = sext_ln368_151_fu_1081_p1;

assign mul_res_834_fu_1439_p1 = sext_ln368_175_fu_1297_p1;

assign mul_res_835_fu_1453_p0 = sext_ln368_153_fu_1099_p1;

assign mul_res_835_fu_1453_p1 = sext_ln368_177_fu_1315_p1;

assign mul_res_836_fu_1467_p0 = sext_ln368_154_fu_1117_p1;

assign mul_res_836_fu_1467_p1 = sext_ln368_172_fu_1279_p1;

assign mul_res_837_fu_2434_p0 = sext_ln368_156_fu_2029_p1;

assign mul_res_837_fu_2434_p1 = sext_ln368_174_fu_2203_p1;

assign mul_res_838_fu_1481_p0 = sext_ln368_157_fu_1135_p1;

assign mul_res_838_fu_1481_p1 = sext_ln368_175_fu_1297_p1;

assign mul_res_839_fu_1495_p0 = sext_ln368_159_fu_1153_p1;

assign mul_res_839_fu_1495_p1 = sext_ln368_177_fu_1315_p1;

assign mul_res_840_fu_1509_p0 = sext_ln368_160_fu_1171_p1;

assign mul_res_840_fu_1509_p1 = sext_ln368_172_fu_1279_p1;

assign mul_res_841_fu_2489_p0 = sext_ln368_162_fu_2087_p1;

assign mul_res_841_fu_2489_p1 = sext_ln368_174_fu_2203_p1;

assign mul_res_842_fu_1523_p0 = sext_ln368_163_fu_1189_p1;

assign mul_res_842_fu_1523_p1 = sext_ln368_175_fu_1297_p1;

assign mul_res_843_fu_1537_p0 = sext_ln368_165_fu_1207_p1;

assign mul_res_843_fu_1537_p1 = sext_ln368_177_fu_1315_p1;

assign mul_res_844_fu_1551_p0 = sext_ln368_166_fu_1225_p1;

assign mul_res_844_fu_1551_p1 = sext_ln368_172_fu_1279_p1;

assign mul_res_845_fu_2544_p0 = sext_ln368_168_fu_2145_p1;

assign mul_res_845_fu_2544_p1 = sext_ln368_174_fu_2203_p1;

assign mul_res_846_fu_1565_p0 = sext_ln368_169_fu_1243_p1;

assign mul_res_846_fu_1565_p1 = sext_ln368_175_fu_1297_p1;

assign mul_res_847_fu_1579_p0 = sext_ln368_171_fu_1261_p1;

assign mul_res_847_fu_1579_p1 = sext_ln368_177_fu_1315_p1;

assign mul_res_fu_905_p0 = sext_ln368_127_fu_893_p1;

assign mul_res_fu_905_p1 = sext_ln368_fu_889_p1;

assign or_ln337_fu_518_p2 = (icmp_ln337_reg_2925 | and_ln336_fu_512_p2);

assign select_ln337_5_fu_463_p3 = ((icmp_ln337_fu_451_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_457_p2);

assign select_ln337_fu_523_p3 = ((or_ln337_fu_518_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign select_ln342_27_fu_1700_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1142_fu_356);

assign select_ln342_28_fu_1707_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1141_fu_352);

assign select_ln342_29_fu_1714_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1140_fu_348);

assign select_ln342_30_fu_1721_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1139_fu_344);

assign select_ln342_31_fu_1728_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1138_fu_340);

assign select_ln342_32_fu_1735_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1137_fu_336);

assign select_ln342_33_fu_1742_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1136_fu_332);

assign select_ln342_34_fu_1749_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1135_fu_328);

assign select_ln342_35_fu_1756_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1134_fu_324);

assign select_ln342_36_fu_1763_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1133_fu_320);

assign select_ln342_37_fu_1770_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1132_fu_316);

assign select_ln342_38_fu_1777_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1131_fu_312);

assign select_ln342_39_fu_1784_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_fu_308);

assign select_ln342_fu_1693_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1143_fu_360);

assign sext_ln368_127_fu_893_p1 = $signed(trunc_ln354_fu_615_p1);

assign sext_ln368_128_fu_1791_p1 = mul_res_reg_2994;

assign sext_ln368_129_fu_1794_p1 = $signed(trunc_ln353_s_reg_2949);

assign sext_ln368_130_fu_1797_p1 = $signed(trunc_ln354_s_reg_2959);

assign sext_ln368_131_fu_911_p1 = $signed(trunc_ln353_4_fu_553_p4);

assign sext_ln368_132_fu_915_p1 = $signed(trunc_ln354_54_fu_629_p4);

assign sext_ln368_133_fu_1818_p1 = mul_res_794_reg_2999;

assign sext_ln368_134_fu_933_p1 = $signed(trunc_ln353_5_fu_563_p4);

assign sext_ln368_135_fu_937_p1 = $signed(trunc_ln354_55_fu_639_p4);

assign sext_ln368_136_fu_955_p1 = $signed(trunc_ln354_56_fu_649_p4);

assign sext_ln368_137_fu_1852_p1 = mul_res_796_reg_3009;

assign sext_ln368_138_fu_1855_p1 = $signed(trunc_ln354_57_reg_2964);

assign sext_ln368_139_fu_973_p1 = $signed(trunc_ln354_58_fu_669_p4);

assign sext_ln368_140_fu_1876_p1 = mul_res_798_reg_3014;

assign sext_ln368_141_fu_991_p1 = $signed(trunc_ln354_59_fu_679_p4);

assign sext_ln368_142_fu_1009_p1 = $signed(trunc_ln354_60_fu_689_p4);

assign sext_ln368_143_fu_1910_p1 = mul_res_800_reg_3024;

assign sext_ln368_144_fu_1913_p1 = $signed(trunc_ln354_61_reg_2969);

assign sext_ln368_145_fu_1027_p1 = $signed(trunc_ln354_62_fu_709_p4);

assign sext_ln368_146_fu_1934_p1 = mul_res_802_reg_3029;

assign sext_ln368_147_fu_1045_p1 = $signed(trunc_ln354_63_fu_719_p4);

assign sext_ln368_148_fu_1063_p1 = $signed(trunc_ln354_64_fu_729_p4);

assign sext_ln368_149_fu_1968_p1 = mul_res_804_reg_3039;

assign sext_ln368_150_fu_1971_p1 = $signed(trunc_ln354_65_reg_2974);

assign sext_ln368_151_fu_1081_p1 = $signed(trunc_ln354_66_fu_749_p4);

assign sext_ln368_152_fu_1992_p1 = mul_res_806_reg_3044;

assign sext_ln368_153_fu_1099_p1 = $signed(trunc_ln354_67_fu_759_p4);

assign sext_ln368_154_fu_1117_p1 = $signed(trunc_ln354_68_fu_769_p4);

assign sext_ln368_155_fu_2026_p1 = mul_res_808_reg_3054;

assign sext_ln368_156_fu_2029_p1 = $signed(trunc_ln354_69_reg_2979);

assign sext_ln368_157_fu_1135_p1 = $signed(trunc_ln354_70_fu_789_p4);

assign sext_ln368_158_fu_2050_p1 = mul_res_810_reg_3059;

assign sext_ln368_159_fu_1153_p1 = $signed(trunc_ln354_71_fu_799_p4);

assign sext_ln368_160_fu_1171_p1 = $signed(trunc_ln354_72_fu_809_p4);

assign sext_ln368_161_fu_2084_p1 = mul_res_812_reg_3069;

assign sext_ln368_162_fu_2087_p1 = $signed(trunc_ln354_73_reg_2984);

assign sext_ln368_163_fu_1189_p1 = $signed(trunc_ln354_74_fu_829_p4);

assign sext_ln368_164_fu_2108_p1 = mul_res_814_reg_3074;

assign sext_ln368_165_fu_1207_p1 = $signed(trunc_ln354_75_fu_839_p4);

assign sext_ln368_166_fu_1225_p1 = $signed(trunc_ln354_76_fu_849_p4);

assign sext_ln368_167_fu_2142_p1 = mul_res_816_reg_3084;

assign sext_ln368_168_fu_2145_p1 = $signed(trunc_ln354_77_reg_2989);

assign sext_ln368_169_fu_1243_p1 = $signed(trunc_ln354_78_fu_869_p4);

assign sext_ln368_170_fu_2166_p1 = mul_res_818_reg_3089;

assign sext_ln368_171_fu_1261_p1 = $signed(trunc_ln354_79_fu_879_p4);

assign sext_ln368_172_fu_1279_p1 = $signed(trunc_ln353_6_fu_573_p4);

assign sext_ln368_173_fu_2200_p1 = mul_res_820_reg_3099;

assign sext_ln368_174_fu_2203_p1 = $signed(trunc_ln353_7_reg_2954);

assign sext_ln368_175_fu_1297_p1 = $signed(trunc_ln353_8_fu_593_p4);

assign sext_ln368_176_fu_2224_p1 = mul_res_822_reg_3104;

assign sext_ln368_177_fu_1315_p1 = $signed(trunc_ln353_9_fu_603_p4);

assign sext_ln368_178_fu_2258_p1 = mul_res_824_reg_3114;

assign sext_ln368_179_fu_2279_p1 = mul_res_826_reg_3119;

assign sext_ln368_180_fu_2313_p1 = mul_res_828_reg_3129;

assign sext_ln368_181_fu_2334_p1 = mul_res_830_reg_3134;

assign sext_ln368_182_fu_2368_p1 = mul_res_832_reg_3144;

assign sext_ln368_183_fu_2389_p1 = mul_res_834_reg_3149;

assign sext_ln368_184_fu_2423_p1 = mul_res_836_reg_3159;

assign sext_ln368_185_fu_2444_p1 = mul_res_838_reg_3164;

assign sext_ln368_186_fu_2478_p1 = mul_res_840_reg_3174;

assign sext_ln368_187_fu_2499_p1 = mul_res_842_reg_3179;

assign sext_ln368_188_fu_2533_p1 = mul_res_844_reg_3189;

assign sext_ln368_189_fu_2554_p1 = mul_res_846_reg_3194;

assign sext_ln368_fu_889_p1 = $signed(trunc_ln353_fu_539_p1);

assign sext_ln370_100_fu_1930_p1 = mul_res_801_fu_1924_p2;

assign sext_ln370_101_fu_1937_p1 = mul_res_803_reg_3034;

assign sext_ln370_102_fu_1952_p1 = $signed(add_ln370_120_fu_1946_p2);

assign sext_ln370_103_fu_1988_p1 = mul_res_805_fu_1982_p2;

assign sext_ln370_104_fu_1995_p1 = mul_res_807_reg_3049;

assign sext_ln370_105_fu_2010_p1 = $signed(add_ln370_124_fu_2004_p2);

assign sext_ln370_106_fu_2046_p1 = mul_res_809_fu_2040_p2;

assign sext_ln370_107_fu_2053_p1 = mul_res_811_reg_3064;

assign sext_ln370_108_fu_2068_p1 = $signed(add_ln370_128_fu_2062_p2);

assign sext_ln370_109_fu_2104_p1 = mul_res_813_fu_2098_p2;

assign sext_ln370_110_fu_2111_p1 = mul_res_815_reg_3079;

assign sext_ln370_111_fu_2126_p1 = $signed(add_ln370_132_fu_2120_p2);

assign sext_ln370_112_fu_2162_p1 = mul_res_817_fu_2156_p2;

assign sext_ln370_113_fu_2169_p1 = mul_res_819_reg_3094;

assign sext_ln370_114_fu_2184_p1 = $signed(add_ln370_136_fu_2178_p2);

assign sext_ln370_115_fu_2220_p1 = mul_res_821_fu_2214_p2;

assign sext_ln370_116_fu_2227_p1 = mul_res_823_reg_3109;

assign sext_ln370_117_fu_2242_p1 = $signed(add_ln370_140_fu_2236_p2);

assign sext_ln370_118_fu_2275_p1 = mul_res_825_fu_2269_p2;

assign sext_ln370_119_fu_2282_p1 = mul_res_827_reg_3124;

assign sext_ln370_120_fu_2297_p1 = $signed(add_ln370_144_fu_2291_p2);

assign sext_ln370_121_fu_2330_p1 = mul_res_829_fu_2324_p2;

assign sext_ln370_122_fu_2337_p1 = mul_res_831_reg_3139;

assign sext_ln370_123_fu_2352_p1 = $signed(add_ln370_148_fu_2346_p2);

assign sext_ln370_124_fu_2385_p1 = mul_res_833_fu_2379_p2;

assign sext_ln370_125_fu_2392_p1 = mul_res_835_reg_3154;

assign sext_ln370_126_fu_2413_p1 = $signed(add_ln370_152_fu_2407_p2);

assign sext_ln370_127_fu_2440_p1 = mul_res_837_fu_2434_p2;

assign sext_ln370_128_fu_2447_p1 = mul_res_839_reg_3169;

assign sext_ln370_129_fu_2468_p1 = $signed(add_ln370_156_fu_2462_p2);

assign sext_ln370_130_fu_2495_p1 = mul_res_841_fu_2489_p2;

assign sext_ln370_131_fu_2502_p1 = mul_res_843_reg_3184;

assign sext_ln370_132_fu_2523_p1 = $signed(add_ln370_160_fu_2517_p2);

assign sext_ln370_133_fu_2550_p1 = mul_res_845_fu_2544_p2;

assign sext_ln370_134_fu_2557_p1 = mul_res_847_reg_3199;

assign sext_ln370_135_fu_2578_p1 = $signed(add_ln370_164_fu_2572_p2);

assign sext_ln370_95_fu_1821_p1 = mul_res_795_reg_3004;

assign sext_ln370_96_fu_1836_p1 = $signed(add_ln370_112_fu_1830_p2);

assign sext_ln370_97_fu_1872_p1 = mul_res_797_fu_1866_p2;

assign sext_ln370_98_fu_1879_p1 = mul_res_799_reg_3019;

assign sext_ln370_99_fu_1894_p1 = $signed(add_ln370_116_fu_1888_p2);

assign sext_ln370_fu_1814_p1 = mul_res_793_fu_1808_p2;

assign start_out = real_start;

assign trunc_ln353_4_fu_553_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln353_5_fu_563_p4 = {{cache_window_sm_dout[11:9]}};

assign trunc_ln353_6_fu_573_p4 = {{cache_window_sm_dout[14:12]}};

assign trunc_ln353_8_fu_593_p4 = {{cache_window_sm_dout[20:18]}};

assign trunc_ln353_9_fu_603_p4 = {{cache_window_sm_dout[23:21]}};

assign trunc_ln353_fu_539_p1 = cache_window_sm_dout[2:0];

assign trunc_ln354_54_fu_629_p4 = {{weight_sm_dout[8:6]}};

assign trunc_ln354_55_fu_639_p4 = {{weight_sm_dout[11:9]}};

assign trunc_ln354_56_fu_649_p4 = {{weight_sm_dout[14:12]}};

assign trunc_ln354_58_fu_669_p4 = {{weight_sm_dout[20:18]}};

assign trunc_ln354_59_fu_679_p4 = {{weight_sm_dout[23:21]}};

assign trunc_ln354_60_fu_689_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln354_62_fu_709_p4 = {{weight_sm_dout[32:30]}};

assign trunc_ln354_63_fu_719_p4 = {{weight_sm_dout[35:33]}};

assign trunc_ln354_64_fu_729_p4 = {{weight_sm_dout[38:36]}};

assign trunc_ln354_66_fu_749_p4 = {{weight_sm_dout[44:42]}};

assign trunc_ln354_67_fu_759_p4 = {{weight_sm_dout[47:45]}};

assign trunc_ln354_68_fu_769_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln354_70_fu_789_p4 = {{weight_sm_dout[56:54]}};

assign trunc_ln354_71_fu_799_p4 = {{weight_sm_dout[59:57]}};

assign trunc_ln354_72_fu_809_p4 = {{weight_sm_dout[62:60]}};

assign trunc_ln354_74_fu_829_p4 = {{weight_sm_dout[68:66]}};

assign trunc_ln354_75_fu_839_p4 = {{weight_sm_dout[71:69]}};

assign trunc_ln354_76_fu_849_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln354_78_fu_869_p4 = {{weight_sm_dout[80:78]}};

assign trunc_ln354_79_fu_879_p4 = {{weight_sm_dout[83:81]}};

assign trunc_ln354_fu_615_p1 = weight_sm_dout[2:0];

assign xor_ln336_fu_501_p2 = (icmp_ln337_reg_2925 ^ 1'd1);

endmodule //ATTN11_matmul_step2_mac_1
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_19 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [41:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [83:0] weight_sm_dout;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [79:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln378_reg_3048;
reg   [0:0] icmp_ln378_reg_3048_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_419_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln337_fu_425_p2;
reg   [0:0] icmp_ln337_reg_2870;
wire   [0:0] icmp_ln342_fu_505_p2;
reg   [0:0] icmp_ln342_reg_2876;
wire  signed [5:0] mul_res_741_fu_953_p2;
reg  signed [5:0] mul_res_741_reg_2888;
wire   [6:0] add_ln370_56_fu_1031_p2;
reg   [6:0] add_ln370_56_reg_2893;
wire   [6:0] add_ln370_58_fu_1037_p2;
reg   [6:0] add_ln370_58_reg_2898;
wire   [6:0] add_ln370_59_fu_1043_p2;
reg   [6:0] add_ln370_59_reg_2903;
wire  signed [5:0] mul_res_748_fu_1149_p2;
reg  signed [5:0] mul_res_748_reg_2908;
wire   [6:0] add_ln370_63_fu_1199_p2;
reg   [6:0] add_ln370_63_reg_2913;
wire   [6:0] add_ln370_65_fu_1205_p2;
reg   [6:0] add_ln370_65_reg_2918;
wire   [6:0] add_ln370_66_fu_1211_p2;
reg   [6:0] add_ln370_66_reg_2923;
wire  signed [5:0] mul_res_755_fu_1317_p2;
reg  signed [5:0] mul_res_755_reg_2928;
wire   [6:0] add_ln370_70_fu_1367_p2;
reg   [6:0] add_ln370_70_reg_2933;
wire   [6:0] add_ln370_72_fu_1373_p2;
reg   [6:0] add_ln370_72_reg_2938;
wire   [6:0] add_ln370_73_fu_1379_p2;
reg   [6:0] add_ln370_73_reg_2943;
wire  signed [5:0] mul_res_762_fu_1485_p2;
reg  signed [5:0] mul_res_762_reg_2948;
wire   [6:0] add_ln370_77_fu_1535_p2;
reg   [6:0] add_ln370_77_reg_2953;
wire   [6:0] add_ln370_79_fu_1541_p2;
reg   [6:0] add_ln370_79_reg_2958;
wire   [6:0] add_ln370_80_fu_1547_p2;
reg   [6:0] add_ln370_80_reg_2963;
wire  signed [5:0] mul_res_769_fu_1703_p2;
reg  signed [5:0] mul_res_769_reg_2968;
wire   [6:0] add_ln370_84_fu_1773_p2;
reg   [6:0] add_ln370_84_reg_2973;
wire   [6:0] add_ln370_86_fu_1779_p2;
reg   [6:0] add_ln370_86_reg_2978;
wire   [6:0] add_ln370_87_fu_1785_p2;
reg   [6:0] add_ln370_87_reg_2983;
wire  signed [5:0] mul_res_776_fu_1871_p2;
reg  signed [5:0] mul_res_776_reg_2988;
wire   [6:0] add_ln370_91_fu_1913_p2;
reg   [6:0] add_ln370_91_reg_2993;
wire   [6:0] add_ln370_93_fu_1919_p2;
reg   [6:0] add_ln370_93_reg_2998;
wire   [6:0] add_ln370_94_fu_1925_p2;
reg   [6:0] add_ln370_94_reg_3003;
wire  signed [5:0] mul_res_783_fu_2011_p2;
reg  signed [5:0] mul_res_783_reg_3008;
wire   [6:0] add_ln370_98_fu_2053_p2;
reg   [6:0] add_ln370_98_reg_3013;
wire   [6:0] add_ln370_100_fu_2059_p2;
reg   [6:0] add_ln370_100_reg_3018;
wire   [6:0] add_ln370_101_fu_2065_p2;
reg   [6:0] add_ln370_101_reg_3023;
wire  signed [5:0] mul_res_790_fu_2151_p2;
reg  signed [5:0] mul_res_790_reg_3028;
wire   [6:0] add_ln370_105_fu_2193_p2;
reg   [6:0] add_ln370_105_reg_3033;
wire   [6:0] add_ln370_107_fu_2199_p2;
reg   [6:0] add_ln370_107_reg_3038;
wire   [6:0] add_ln370_108_fu_2205_p2;
reg   [6:0] add_ln370_108_reg_3043;
wire   [0:0] icmp_ln378_fu_2211_p2;
wire   [9:0] add_ln370_61_fu_2373_p2;
reg   [9:0] add_ln370_61_reg_3052;
wire   [9:0] add_ln370_68_fu_2413_p2;
reg   [9:0] add_ln370_68_reg_3057;
wire   [9:0] add_ln370_75_fu_2453_p2;
reg   [9:0] add_ln370_75_reg_3062;
wire   [9:0] add_ln370_82_fu_2493_p2;
reg   [9:0] add_ln370_82_reg_3067;
wire   [9:0] add_ln370_89_fu_2533_p2;
reg   [9:0] add_ln370_89_reg_3072;
wire   [9:0] add_ln370_96_fu_2573_p2;
reg   [9:0] add_ln370_96_reg_3077;
wire   [9:0] add_ln370_103_fu_2613_p2;
reg   [9:0] add_ln370_103_reg_3082;
wire   [9:0] add_ln370_110_fu_2653_p2;
reg   [9:0] add_ln370_110_reg_3087;
reg   [4:0] cit_fu_302;
wire   [4:0] cit_4_fu_2217_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [9:0] empty_fu_306;
reg   [9:0] empty_1124_fu_310;
reg   [9:0] empty_1125_fu_314;
reg   [9:0] empty_1126_fu_318;
reg   [9:0] empty_1127_fu_322;
reg   [9:0] empty_1128_fu_326;
reg   [9:0] empty_1129_fu_330;
reg   [9:0] empty_1130_fu_334;
reg   [9:0] indvar_flatten_fu_338;
wire   [9:0] select_ln337_4_fu_437_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten33_fu_342;
wire   [15:0] add_ln336_fu_413_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten33_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_431_p2;
wire   [0:0] icmp_ln338_fu_480_p2;
wire   [0:0] xor_ln336_fu_475_p2;
wire   [0:0] and_ln336_fu_486_p2;
wire   [0:0] or_ln337_fu_492_p2;
wire   [4:0] select_ln337_fu_497_p3;
wire   [2:0] lshr_ln_fu_517_p4;
wire   [2:0] trunc_ln353_fu_513_p1;
wire   [2:0] trunc_ln354_fu_533_p1;
wire  signed [2:0] mul_res_fu_823_p0;
wire  signed [5:0] sext_ln368_fu_811_p1;
wire   [2:0] mul_res_fu_823_p1;
wire   [5:0] zext_ln368_fu_807_p1;
wire  signed [5:0] mul_res_fu_823_p2;
wire   [2:0] trunc_ln354_28_fu_537_p4;
wire   [2:0] mul_res_738_fu_845_p0;
wire   [5:0] zext_ln353_fu_527_p1;
wire  signed [2:0] mul_res_738_fu_845_p1;
wire  signed [5:0] sext_ln368_28_fu_833_p1;
wire  signed [5:0] mul_res_738_fu_845_p2;
wire   [2:0] tmp_fu_855_p4;
wire   [2:0] trunc_ln354_29_fu_547_p4;
wire   [2:0] mul_res_739_fu_881_p0;
wire   [5:0] zext_ln368_13_fu_865_p1;
wire  signed [2:0] mul_res_739_fu_881_p1;
wire  signed [5:0] sext_ln368_29_fu_869_p1;
wire  signed [5:0] mul_res_739_fu_881_p2;
wire   [2:0] tmp_85_fu_891_p4;
wire   [2:0] trunc_ln354_30_fu_557_p4;
wire   [2:0] mul_res_740_fu_917_p0;
wire   [5:0] zext_ln368_14_fu_901_p1;
wire  signed [2:0] mul_res_740_fu_917_p1;
wire  signed [5:0] sext_ln368_30_fu_905_p1;
wire  signed [5:0] mul_res_740_fu_917_p2;
wire   [2:0] tmp_86_fu_927_p4;
wire   [2:0] trunc_ln354_31_fu_567_p4;
wire   [2:0] mul_res_741_fu_953_p0;
wire   [5:0] zext_ln368_15_fu_937_p1;
wire  signed [2:0] mul_res_741_fu_953_p1;
wire  signed [5:0] sext_ln368_31_fu_941_p1;
wire   [2:0] tmp_87_fu_959_p4;
wire   [2:0] trunc_ln354_32_fu_577_p4;
wire   [2:0] mul_res_742_fu_985_p0;
wire   [5:0] zext_ln368_16_fu_969_p1;
wire  signed [2:0] mul_res_742_fu_985_p1;
wire  signed [5:0] sext_ln368_32_fu_973_p1;
wire  signed [5:0] mul_res_742_fu_985_p2;
wire   [2:0] tmp_88_fu_995_p4;
wire   [2:0] trunc_ln354_33_fu_587_p4;
wire   [2:0] mul_res_743_fu_1021_p0;
wire   [5:0] zext_ln368_17_fu_1005_p1;
wire  signed [2:0] mul_res_743_fu_1021_p1;
wire  signed [5:0] sext_ln368_33_fu_1009_p1;
wire  signed [5:0] mul_res_743_fu_1021_p2;
wire  signed [6:0] sext_ln368_72_fu_991_p1;
wire  signed [6:0] sext_ln368_71_fu_923_p1;
wire  signed [6:0] sext_ln368_70_fu_887_p1;
wire  signed [6:0] sext_ln368_69_fu_851_p1;
wire  signed [6:0] sext_ln368_68_fu_829_p1;
wire  signed [6:0] sext_ln370_48_fu_1027_p1;
wire   [2:0] trunc_ln354_34_fu_597_p4;
wire  signed [2:0] mul_res_744_fu_1061_p0;
wire  signed [5:0] sext_ln368_34_fu_1049_p1;
wire   [2:0] mul_res_744_fu_1061_p1;
wire  signed [5:0] mul_res_744_fu_1061_p2;
wire   [2:0] trunc_ln354_35_fu_607_p4;
wire   [2:0] mul_res_745_fu_1083_p0;
wire  signed [2:0] mul_res_745_fu_1083_p1;
wire  signed [5:0] sext_ln368_35_fu_1071_p1;
wire  signed [5:0] mul_res_745_fu_1083_p2;
wire   [2:0] trunc_ln354_36_fu_617_p4;
wire   [2:0] mul_res_746_fu_1105_p0;
wire  signed [2:0] mul_res_746_fu_1105_p1;
wire  signed [5:0] sext_ln368_36_fu_1093_p1;
wire  signed [5:0] mul_res_746_fu_1105_p2;
wire   [2:0] trunc_ln354_37_fu_627_p4;
wire   [2:0] mul_res_747_fu_1127_p0;
wire  signed [2:0] mul_res_747_fu_1127_p1;
wire  signed [5:0] sext_ln368_37_fu_1115_p1;
wire  signed [5:0] mul_res_747_fu_1127_p2;
wire   [2:0] trunc_ln354_38_fu_637_p4;
wire   [2:0] mul_res_748_fu_1149_p0;
wire  signed [2:0] mul_res_748_fu_1149_p1;
wire  signed [5:0] sext_ln368_38_fu_1137_p1;
wire   [2:0] trunc_ln354_39_fu_647_p4;
wire   [2:0] mul_res_749_fu_1167_p0;
wire  signed [2:0] mul_res_749_fu_1167_p1;
wire  signed [5:0] sext_ln368_39_fu_1155_p1;
wire  signed [5:0] mul_res_749_fu_1167_p2;
wire   [2:0] trunc_ln354_40_fu_657_p4;
wire   [2:0] mul_res_750_fu_1189_p0;
wire  signed [2:0] mul_res_750_fu_1189_p1;
wire  signed [5:0] sext_ln368_40_fu_1177_p1;
wire  signed [5:0] mul_res_750_fu_1189_p2;
wire  signed [6:0] sext_ln368_77_fu_1173_p1;
wire  signed [6:0] sext_ln368_76_fu_1133_p1;
wire  signed [6:0] sext_ln368_75_fu_1111_p1;
wire  signed [6:0] sext_ln368_74_fu_1089_p1;
wire  signed [6:0] sext_ln368_73_fu_1067_p1;
wire  signed [6:0] sext_ln370_54_fu_1195_p1;
wire   [2:0] trunc_ln354_41_fu_667_p4;
wire  signed [2:0] mul_res_751_fu_1229_p0;
wire  signed [5:0] sext_ln368_41_fu_1217_p1;
wire   [2:0] mul_res_751_fu_1229_p1;
wire  signed [5:0] mul_res_751_fu_1229_p2;
wire   [2:0] trunc_ln354_42_fu_677_p4;
wire   [2:0] mul_res_752_fu_1251_p0;
wire  signed [2:0] mul_res_752_fu_1251_p1;
wire  signed [5:0] sext_ln368_42_fu_1239_p1;
wire  signed [5:0] mul_res_752_fu_1251_p2;
wire   [2:0] trunc_ln354_43_fu_687_p4;
wire   [2:0] mul_res_753_fu_1273_p0;
wire  signed [2:0] mul_res_753_fu_1273_p1;
wire  signed [5:0] sext_ln368_43_fu_1261_p1;
wire  signed [5:0] mul_res_753_fu_1273_p2;
wire   [2:0] trunc_ln354_44_fu_697_p4;
wire   [2:0] mul_res_754_fu_1295_p0;
wire  signed [2:0] mul_res_754_fu_1295_p1;
wire  signed [5:0] sext_ln368_44_fu_1283_p1;
wire  signed [5:0] mul_res_754_fu_1295_p2;
wire   [2:0] trunc_ln354_45_fu_707_p4;
wire   [2:0] mul_res_755_fu_1317_p0;
wire  signed [2:0] mul_res_755_fu_1317_p1;
wire  signed [5:0] sext_ln368_45_fu_1305_p1;
wire   [2:0] trunc_ln354_46_fu_717_p4;
wire   [2:0] mul_res_756_fu_1335_p0;
wire  signed [2:0] mul_res_756_fu_1335_p1;
wire  signed [5:0] sext_ln368_46_fu_1323_p1;
wire  signed [5:0] mul_res_756_fu_1335_p2;
wire   [2:0] trunc_ln354_47_fu_727_p4;
wire   [2:0] mul_res_757_fu_1357_p0;
wire  signed [2:0] mul_res_757_fu_1357_p1;
wire  signed [5:0] sext_ln368_47_fu_1345_p1;
wire  signed [5:0] mul_res_757_fu_1357_p2;
wire  signed [6:0] sext_ln368_82_fu_1341_p1;
wire  signed [6:0] sext_ln368_81_fu_1301_p1;
wire  signed [6:0] sext_ln368_80_fu_1279_p1;
wire  signed [6:0] sext_ln368_79_fu_1257_p1;
wire  signed [6:0] sext_ln368_78_fu_1235_p1;
wire  signed [6:0] sext_ln370_60_fu_1363_p1;
wire   [2:0] trunc_ln354_48_fu_737_p4;
wire  signed [2:0] mul_res_758_fu_1397_p0;
wire  signed [5:0] sext_ln368_48_fu_1385_p1;
wire   [2:0] mul_res_758_fu_1397_p1;
wire  signed [5:0] mul_res_758_fu_1397_p2;
wire   [2:0] trunc_ln354_49_fu_747_p4;
wire   [2:0] mul_res_759_fu_1419_p0;
wire  signed [2:0] mul_res_759_fu_1419_p1;
wire  signed [5:0] sext_ln368_49_fu_1407_p1;
wire  signed [5:0] mul_res_759_fu_1419_p2;
wire   [2:0] trunc_ln354_50_fu_757_p4;
wire   [2:0] mul_res_760_fu_1441_p0;
wire  signed [2:0] mul_res_760_fu_1441_p1;
wire  signed [5:0] sext_ln368_50_fu_1429_p1;
wire  signed [5:0] mul_res_760_fu_1441_p2;
wire   [2:0] trunc_ln354_51_fu_767_p4;
wire   [2:0] mul_res_761_fu_1463_p0;
wire  signed [2:0] mul_res_761_fu_1463_p1;
wire  signed [5:0] sext_ln368_51_fu_1451_p1;
wire  signed [5:0] mul_res_761_fu_1463_p2;
wire   [2:0] trunc_ln354_52_fu_777_p4;
wire   [2:0] mul_res_762_fu_1485_p0;
wire  signed [2:0] mul_res_762_fu_1485_p1;
wire  signed [5:0] sext_ln368_52_fu_1473_p1;
wire   [2:0] trunc_ln354_s_fu_787_p4;
wire   [2:0] mul_res_763_fu_1503_p0;
wire  signed [2:0] mul_res_763_fu_1503_p1;
wire  signed [5:0] sext_ln368_53_fu_1491_p1;
wire  signed [5:0] mul_res_763_fu_1503_p2;
wire   [2:0] trunc_ln354_53_fu_797_p4;
wire   [2:0] mul_res_764_fu_1525_p0;
wire  signed [2:0] mul_res_764_fu_1525_p1;
wire  signed [5:0] sext_ln368_54_fu_1513_p1;
wire  signed [5:0] mul_res_764_fu_1525_p2;
wire  signed [6:0] sext_ln368_87_fu_1509_p1;
wire  signed [6:0] sext_ln368_86_fu_1469_p1;
wire  signed [6:0] sext_ln368_85_fu_1447_p1;
wire  signed [6:0] sext_ln368_84_fu_1425_p1;
wire  signed [6:0] sext_ln368_83_fu_1403_p1;
wire  signed [6:0] sext_ln370_66_fu_1531_p1;
wire   [2:0] tmp_89_fu_1553_p4;
wire   [2:0] mul_res_765_fu_1575_p0;
wire   [5:0] zext_ln368_18_fu_1563_p1;
wire  signed [2:0] mul_res_765_fu_1575_p1;
wire  signed [5:0] mul_res_765_fu_1575_p2;
wire   [2:0] tmp_90_fu_1585_p4;
wire   [2:0] mul_res_766_fu_1607_p0;
wire   [5:0] zext_ln368_19_fu_1595_p1;
wire  signed [2:0] mul_res_766_fu_1607_p1;
wire  signed [5:0] mul_res_766_fu_1607_p2;
wire   [2:0] tmp_91_fu_1617_p4;
wire   [2:0] mul_res_767_fu_1639_p0;
wire   [5:0] zext_ln368_20_fu_1627_p1;
wire  signed [2:0] mul_res_767_fu_1639_p1;
wire  signed [5:0] mul_res_767_fu_1639_p2;
wire   [2:0] tmp_92_fu_1649_p4;
wire   [2:0] mul_res_768_fu_1671_p0;
wire   [5:0] zext_ln368_21_fu_1659_p1;
wire  signed [2:0] mul_res_768_fu_1671_p1;
wire  signed [5:0] mul_res_768_fu_1671_p2;
wire   [2:0] tmp_93_fu_1681_p4;
wire   [2:0] mul_res_769_fu_1703_p0;
wire   [5:0] zext_ln368_22_fu_1691_p1;
wire  signed [2:0] mul_res_769_fu_1703_p1;
wire   [2:0] tmp_94_fu_1709_p4;
wire   [2:0] mul_res_770_fu_1731_p0;
wire   [5:0] zext_ln368_23_fu_1719_p1;
wire  signed [2:0] mul_res_770_fu_1731_p1;
wire  signed [5:0] mul_res_770_fu_1731_p2;
wire   [2:0] tmp_95_fu_1741_p4;
wire   [2:0] mul_res_771_fu_1763_p0;
wire   [5:0] zext_ln368_24_fu_1751_p1;
wire  signed [2:0] mul_res_771_fu_1763_p1;
wire  signed [5:0] mul_res_771_fu_1763_p2;
wire  signed [6:0] sext_ln368_92_fu_1737_p1;
wire  signed [6:0] sext_ln368_91_fu_1677_p1;
wire  signed [6:0] sext_ln368_90_fu_1645_p1;
wire  signed [6:0] sext_ln368_89_fu_1613_p1;
wire  signed [6:0] sext_ln368_88_fu_1581_p1;
wire  signed [6:0] sext_ln370_72_fu_1769_p1;
wire   [2:0] mul_res_772_fu_1799_p0;
wire  signed [2:0] mul_res_772_fu_1799_p1;
wire  signed [5:0] mul_res_772_fu_1799_p2;
wire   [2:0] mul_res_773_fu_1817_p0;
wire  signed [2:0] mul_res_773_fu_1817_p1;
wire  signed [5:0] mul_res_773_fu_1817_p2;
wire   [2:0] mul_res_774_fu_1835_p0;
wire  signed [2:0] mul_res_774_fu_1835_p1;
wire  signed [5:0] mul_res_774_fu_1835_p2;
wire   [2:0] mul_res_775_fu_1853_p0;
wire  signed [2:0] mul_res_775_fu_1853_p1;
wire  signed [5:0] mul_res_775_fu_1853_p2;
wire   [2:0] mul_res_776_fu_1871_p0;
wire  signed [2:0] mul_res_776_fu_1871_p1;
wire   [2:0] mul_res_777_fu_1885_p0;
wire  signed [2:0] mul_res_777_fu_1885_p1;
wire  signed [5:0] mul_res_777_fu_1885_p2;
wire   [2:0] mul_res_778_fu_1903_p0;
wire  signed [2:0] mul_res_778_fu_1903_p1;
wire  signed [5:0] mul_res_778_fu_1903_p2;
wire  signed [6:0] sext_ln368_97_fu_1891_p1;
wire  signed [6:0] sext_ln368_96_fu_1859_p1;
wire  signed [6:0] sext_ln368_95_fu_1841_p1;
wire  signed [6:0] sext_ln368_94_fu_1823_p1;
wire  signed [6:0] sext_ln368_93_fu_1805_p1;
wire  signed [6:0] sext_ln370_78_fu_1909_p1;
wire   [2:0] mul_res_779_fu_1939_p0;
wire  signed [2:0] mul_res_779_fu_1939_p1;
wire  signed [5:0] mul_res_779_fu_1939_p2;
wire   [2:0] mul_res_780_fu_1957_p0;
wire  signed [2:0] mul_res_780_fu_1957_p1;
wire  signed [5:0] mul_res_780_fu_1957_p2;
wire   [2:0] mul_res_781_fu_1975_p0;
wire  signed [2:0] mul_res_781_fu_1975_p1;
wire  signed [5:0] mul_res_781_fu_1975_p2;
wire   [2:0] mul_res_782_fu_1993_p0;
wire  signed [2:0] mul_res_782_fu_1993_p1;
wire  signed [5:0] mul_res_782_fu_1993_p2;
wire   [2:0] mul_res_783_fu_2011_p0;
wire  signed [2:0] mul_res_783_fu_2011_p1;
wire   [2:0] mul_res_784_fu_2025_p0;
wire  signed [2:0] mul_res_784_fu_2025_p1;
wire  signed [5:0] mul_res_784_fu_2025_p2;
wire   [2:0] mul_res_785_fu_2043_p0;
wire  signed [2:0] mul_res_785_fu_2043_p1;
wire  signed [5:0] mul_res_785_fu_2043_p2;
wire  signed [6:0] sext_ln368_102_fu_2031_p1;
wire  signed [6:0] sext_ln368_101_fu_1999_p1;
wire  signed [6:0] sext_ln368_100_fu_1981_p1;
wire  signed [6:0] sext_ln368_99_fu_1963_p1;
wire  signed [6:0] sext_ln368_98_fu_1945_p1;
wire  signed [6:0] sext_ln370_84_fu_2049_p1;
wire   [2:0] mul_res_786_fu_2079_p0;
wire  signed [2:0] mul_res_786_fu_2079_p1;
wire  signed [5:0] mul_res_786_fu_2079_p2;
wire   [2:0] mul_res_787_fu_2097_p0;
wire  signed [2:0] mul_res_787_fu_2097_p1;
wire  signed [5:0] mul_res_787_fu_2097_p2;
wire   [2:0] mul_res_788_fu_2115_p0;
wire  signed [2:0] mul_res_788_fu_2115_p1;
wire  signed [5:0] mul_res_788_fu_2115_p2;
wire   [2:0] mul_res_789_fu_2133_p0;
wire  signed [2:0] mul_res_789_fu_2133_p1;
wire  signed [5:0] mul_res_789_fu_2133_p2;
wire   [2:0] mul_res_790_fu_2151_p0;
wire  signed [2:0] mul_res_790_fu_2151_p1;
wire   [2:0] mul_res_791_fu_2165_p0;
wire  signed [2:0] mul_res_791_fu_2165_p1;
wire  signed [5:0] mul_res_791_fu_2165_p2;
wire   [2:0] mul_res_792_fu_2183_p0;
wire  signed [2:0] mul_res_792_fu_2183_p1;
wire  signed [5:0] mul_res_792_fu_2183_p2;
wire  signed [6:0] sext_ln368_107_fu_2171_p1;
wire  signed [6:0] sext_ln368_106_fu_2139_p1;
wire  signed [6:0] sext_ln368_105_fu_2121_p1;
wire  signed [6:0] sext_ln368_104_fu_2103_p1;
wire  signed [6:0] sext_ln368_103_fu_2085_p1;
wire  signed [6:0] sext_ln370_90_fu_2189_p1;
wire  signed [9:0] sext_ln370_49_fu_2342_p1;
wire  signed [9:0] sext_ln370_fu_2339_p1;
wire  signed [7:0] sext_ln370_51_fu_2354_p1;
wire  signed [7:0] sext_ln370_50_fu_2351_p1;
wire   [7:0] add_ln370_60_fu_2357_p2;
wire  signed [9:0] sext_ln370_52_fu_2363_p1;
wire   [9:0] add_ln370_fu_2345_p2;
wire   [9:0] add_ln370_57_fu_2367_p2;
wire   [9:0] select_ln342_14_fu_2332_p3;
wire  signed [9:0] sext_ln370_55_fu_2382_p1;
wire  signed [9:0] sext_ln370_53_fu_2379_p1;
wire  signed [7:0] sext_ln370_57_fu_2394_p1;
wire  signed [7:0] sext_ln370_56_fu_2391_p1;
wire   [7:0] add_ln370_67_fu_2397_p2;
wire  signed [9:0] sext_ln370_58_fu_2403_p1;
wire   [9:0] add_ln370_62_fu_2385_p2;
wire   [9:0] add_ln370_64_fu_2407_p2;
wire   [9:0] select_ln342_13_fu_2325_p3;
wire  signed [9:0] sext_ln370_61_fu_2422_p1;
wire  signed [9:0] sext_ln370_59_fu_2419_p1;
wire  signed [7:0] sext_ln370_63_fu_2434_p1;
wire  signed [7:0] sext_ln370_62_fu_2431_p1;
wire   [7:0] add_ln370_74_fu_2437_p2;
wire  signed [9:0] sext_ln370_64_fu_2443_p1;
wire   [9:0] add_ln370_69_fu_2425_p2;
wire   [9:0] add_ln370_71_fu_2447_p2;
wire   [9:0] select_ln342_12_fu_2318_p3;
wire  signed [9:0] sext_ln370_67_fu_2462_p1;
wire  signed [9:0] sext_ln370_65_fu_2459_p1;
wire  signed [7:0] sext_ln370_69_fu_2474_p1;
wire  signed [7:0] sext_ln370_68_fu_2471_p1;
wire   [7:0] add_ln370_81_fu_2477_p2;
wire  signed [9:0] sext_ln370_70_fu_2483_p1;
wire   [9:0] add_ln370_76_fu_2465_p2;
wire   [9:0] add_ln370_78_fu_2487_p2;
wire   [9:0] select_ln342_11_fu_2311_p3;
wire  signed [9:0] sext_ln370_73_fu_2502_p1;
wire  signed [9:0] sext_ln370_71_fu_2499_p1;
wire  signed [7:0] sext_ln370_75_fu_2514_p1;
wire  signed [7:0] sext_ln370_74_fu_2511_p1;
wire   [7:0] add_ln370_88_fu_2517_p2;
wire  signed [9:0] sext_ln370_76_fu_2523_p1;
wire   [9:0] add_ln370_83_fu_2505_p2;
wire   [9:0] add_ln370_85_fu_2527_p2;
wire   [9:0] select_ln342_10_fu_2304_p3;
wire  signed [9:0] sext_ln370_79_fu_2542_p1;
wire  signed [9:0] sext_ln370_77_fu_2539_p1;
wire  signed [7:0] sext_ln370_81_fu_2554_p1;
wire  signed [7:0] sext_ln370_80_fu_2551_p1;
wire   [7:0] add_ln370_95_fu_2557_p2;
wire  signed [9:0] sext_ln370_82_fu_2563_p1;
wire   [9:0] add_ln370_90_fu_2545_p2;
wire   [9:0] add_ln370_92_fu_2567_p2;
wire   [9:0] select_ln342_9_fu_2297_p3;
wire  signed [9:0] sext_ln370_85_fu_2582_p1;
wire  signed [9:0] sext_ln370_83_fu_2579_p1;
wire  signed [7:0] sext_ln370_87_fu_2594_p1;
wire  signed [7:0] sext_ln370_86_fu_2591_p1;
wire   [7:0] add_ln370_102_fu_2597_p2;
wire  signed [9:0] sext_ln370_88_fu_2603_p1;
wire   [9:0] add_ln370_97_fu_2585_p2;
wire   [9:0] add_ln370_99_fu_2607_p2;
wire   [9:0] select_ln342_8_fu_2290_p3;
wire  signed [9:0] sext_ln370_91_fu_2622_p1;
wire  signed [9:0] sext_ln370_89_fu_2619_p1;
wire  signed [7:0] sext_ln370_93_fu_2634_p1;
wire  signed [7:0] sext_ln370_92_fu_2631_p1;
wire   [7:0] add_ln370_109_fu_2637_p2;
wire  signed [9:0] sext_ln370_94_fu_2643_p1;
wire   [9:0] add_ln370_104_fu_2625_p2;
wire   [9:0] add_ln370_106_fu_2647_p2;
wire   [9:0] select_ln342_fu_2283_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_245;
reg    ap_condition_286;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_302 = 5'd0;
//#0 empty_fu_306 = 10'd0;
//#0 empty_1124_fu_310 = 10'd0;
//#0 empty_1125_fu_314 = 10'd0;
//#0 empty_1126_fu_318 = 10'd0;
//#0 empty_1127_fu_322 = 10'd0;
//#0 empty_1128_fu_326 = 10'd0;
//#0 empty_1129_fu_330 = 10'd0;
//#0 empty_1130_fu_334 = 10'd0;
//#0 indvar_flatten_fu_338 = 10'd0;
//#0 indvar_flatten33_fu_342 = 16'd0;
end

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U893(
    .din0(mul_res_fu_823_p0),
    .din1(mul_res_fu_823_p1),
    .dout(mul_res_fu_823_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U894(
    .din0(mul_res_738_fu_845_p0),
    .din1(mul_res_738_fu_845_p1),
    .dout(mul_res_738_fu_845_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U895(
    .din0(mul_res_739_fu_881_p0),
    .din1(mul_res_739_fu_881_p1),
    .dout(mul_res_739_fu_881_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U896(
    .din0(mul_res_740_fu_917_p0),
    .din1(mul_res_740_fu_917_p1),
    .dout(mul_res_740_fu_917_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U897(
    .din0(mul_res_741_fu_953_p0),
    .din1(mul_res_741_fu_953_p1),
    .dout(mul_res_741_fu_953_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U898(
    .din0(mul_res_742_fu_985_p0),
    .din1(mul_res_742_fu_985_p1),
    .dout(mul_res_742_fu_985_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U899(
    .din0(mul_res_743_fu_1021_p0),
    .din1(mul_res_743_fu_1021_p1),
    .dout(mul_res_743_fu_1021_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U900(
    .din0(mul_res_744_fu_1061_p0),
    .din1(mul_res_744_fu_1061_p1),
    .dout(mul_res_744_fu_1061_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U901(
    .din0(mul_res_745_fu_1083_p0),
    .din1(mul_res_745_fu_1083_p1),
    .dout(mul_res_745_fu_1083_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U902(
    .din0(mul_res_746_fu_1105_p0),
    .din1(mul_res_746_fu_1105_p1),
    .dout(mul_res_746_fu_1105_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U903(
    .din0(mul_res_747_fu_1127_p0),
    .din1(mul_res_747_fu_1127_p1),
    .dout(mul_res_747_fu_1127_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U904(
    .din0(mul_res_748_fu_1149_p0),
    .din1(mul_res_748_fu_1149_p1),
    .dout(mul_res_748_fu_1149_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U905(
    .din0(mul_res_749_fu_1167_p0),
    .din1(mul_res_749_fu_1167_p1),
    .dout(mul_res_749_fu_1167_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U906(
    .din0(mul_res_750_fu_1189_p0),
    .din1(mul_res_750_fu_1189_p1),
    .dout(mul_res_750_fu_1189_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U907(
    .din0(mul_res_751_fu_1229_p0),
    .din1(mul_res_751_fu_1229_p1),
    .dout(mul_res_751_fu_1229_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U908(
    .din0(mul_res_752_fu_1251_p0),
    .din1(mul_res_752_fu_1251_p1),
    .dout(mul_res_752_fu_1251_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U909(
    .din0(mul_res_753_fu_1273_p0),
    .din1(mul_res_753_fu_1273_p1),
    .dout(mul_res_753_fu_1273_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U910(
    .din0(mul_res_754_fu_1295_p0),
    .din1(mul_res_754_fu_1295_p1),
    .dout(mul_res_754_fu_1295_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U911(
    .din0(mul_res_755_fu_1317_p0),
    .din1(mul_res_755_fu_1317_p1),
    .dout(mul_res_755_fu_1317_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U912(
    .din0(mul_res_756_fu_1335_p0),
    .din1(mul_res_756_fu_1335_p1),
    .dout(mul_res_756_fu_1335_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U913(
    .din0(mul_res_757_fu_1357_p0),
    .din1(mul_res_757_fu_1357_p1),
    .dout(mul_res_757_fu_1357_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U914(
    .din0(mul_res_758_fu_1397_p0),
    .din1(mul_res_758_fu_1397_p1),
    .dout(mul_res_758_fu_1397_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U915(
    .din0(mul_res_759_fu_1419_p0),
    .din1(mul_res_759_fu_1419_p1),
    .dout(mul_res_759_fu_1419_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U916(
    .din0(mul_res_760_fu_1441_p0),
    .din1(mul_res_760_fu_1441_p1),
    .dout(mul_res_760_fu_1441_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U917(
    .din0(mul_res_761_fu_1463_p0),
    .din1(mul_res_761_fu_1463_p1),
    .dout(mul_res_761_fu_1463_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U918(
    .din0(mul_res_762_fu_1485_p0),
    .din1(mul_res_762_fu_1485_p1),
    .dout(mul_res_762_fu_1485_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U919(
    .din0(mul_res_763_fu_1503_p0),
    .din1(mul_res_763_fu_1503_p1),
    .dout(mul_res_763_fu_1503_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U920(
    .din0(mul_res_764_fu_1525_p0),
    .din1(mul_res_764_fu_1525_p1),
    .dout(mul_res_764_fu_1525_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U921(
    .din0(mul_res_765_fu_1575_p0),
    .din1(mul_res_765_fu_1575_p1),
    .dout(mul_res_765_fu_1575_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U922(
    .din0(mul_res_766_fu_1607_p0),
    .din1(mul_res_766_fu_1607_p1),
    .dout(mul_res_766_fu_1607_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U923(
    .din0(mul_res_767_fu_1639_p0),
    .din1(mul_res_767_fu_1639_p1),
    .dout(mul_res_767_fu_1639_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U924(
    .din0(mul_res_768_fu_1671_p0),
    .din1(mul_res_768_fu_1671_p1),
    .dout(mul_res_768_fu_1671_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U925(
    .din0(mul_res_769_fu_1703_p0),
    .din1(mul_res_769_fu_1703_p1),
    .dout(mul_res_769_fu_1703_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U926(
    .din0(mul_res_770_fu_1731_p0),
    .din1(mul_res_770_fu_1731_p1),
    .dout(mul_res_770_fu_1731_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U927(
    .din0(mul_res_771_fu_1763_p0),
    .din1(mul_res_771_fu_1763_p1),
    .dout(mul_res_771_fu_1763_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U928(
    .din0(mul_res_772_fu_1799_p0),
    .din1(mul_res_772_fu_1799_p1),
    .dout(mul_res_772_fu_1799_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U929(
    .din0(mul_res_773_fu_1817_p0),
    .din1(mul_res_773_fu_1817_p1),
    .dout(mul_res_773_fu_1817_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U930(
    .din0(mul_res_774_fu_1835_p0),
    .din1(mul_res_774_fu_1835_p1),
    .dout(mul_res_774_fu_1835_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U931(
    .din0(mul_res_775_fu_1853_p0),
    .din1(mul_res_775_fu_1853_p1),
    .dout(mul_res_775_fu_1853_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U932(
    .din0(mul_res_776_fu_1871_p0),
    .din1(mul_res_776_fu_1871_p1),
    .dout(mul_res_776_fu_1871_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U933(
    .din0(mul_res_777_fu_1885_p0),
    .din1(mul_res_777_fu_1885_p1),
    .dout(mul_res_777_fu_1885_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U934(
    .din0(mul_res_778_fu_1903_p0),
    .din1(mul_res_778_fu_1903_p1),
    .dout(mul_res_778_fu_1903_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U935(
    .din0(mul_res_779_fu_1939_p0),
    .din1(mul_res_779_fu_1939_p1),
    .dout(mul_res_779_fu_1939_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U936(
    .din0(mul_res_780_fu_1957_p0),
    .din1(mul_res_780_fu_1957_p1),
    .dout(mul_res_780_fu_1957_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U937(
    .din0(mul_res_781_fu_1975_p0),
    .din1(mul_res_781_fu_1975_p1),
    .dout(mul_res_781_fu_1975_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U938(
    .din0(mul_res_782_fu_1993_p0),
    .din1(mul_res_782_fu_1993_p1),
    .dout(mul_res_782_fu_1993_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U939(
    .din0(mul_res_783_fu_2011_p0),
    .din1(mul_res_783_fu_2011_p1),
    .dout(mul_res_783_fu_2011_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U940(
    .din0(mul_res_784_fu_2025_p0),
    .din1(mul_res_784_fu_2025_p1),
    .dout(mul_res_784_fu_2025_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U941(
    .din0(mul_res_785_fu_2043_p0),
    .din1(mul_res_785_fu_2043_p1),
    .dout(mul_res_785_fu_2043_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U942(
    .din0(mul_res_786_fu_2079_p0),
    .din1(mul_res_786_fu_2079_p1),
    .dout(mul_res_786_fu_2079_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U943(
    .din0(mul_res_787_fu_2097_p0),
    .din1(mul_res_787_fu_2097_p1),
    .dout(mul_res_787_fu_2097_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U944(
    .din0(mul_res_788_fu_2115_p0),
    .din1(mul_res_788_fu_2115_p1),
    .dout(mul_res_788_fu_2115_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U945(
    .din0(mul_res_789_fu_2133_p0),
    .din1(mul_res_789_fu_2133_p1),
    .dout(mul_res_789_fu_2133_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U946(
    .din0(mul_res_790_fu_2151_p0),
    .din1(mul_res_790_fu_2151_p1),
    .dout(mul_res_790_fu_2151_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U947(
    .din0(mul_res_791_fu_2165_p0),
    .din1(mul_res_791_fu_2165_p1),
    .dout(mul_res_791_fu_2165_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U948(
    .din0(mul_res_792_fu_2183_p0),
    .din1(mul_res_792_fu_2183_p1),
    .dout(mul_res_792_fu_2183_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_245)) begin
        cit_fu_302 <= cit_4_fu_2217_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_286)) begin
    if ((icmp_ln336_fu_419_p2 == 1'd0)) begin
        indvar_flatten33_fu_342 <= add_ln336_fu_413_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten33_fu_342 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_286)) begin
    if ((icmp_ln336_fu_419_p2 == 1'd0)) begin
        indvar_flatten_fu_338 <= select_ln337_4_fu_437_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_338 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln370_100_reg_3018 <= add_ln370_100_fu_2059_p2;
        add_ln370_101_reg_3023 <= add_ln370_101_fu_2065_p2;
        add_ln370_105_reg_3033 <= add_ln370_105_fu_2193_p2;
        add_ln370_107_reg_3038 <= add_ln370_107_fu_2199_p2;
        add_ln370_108_reg_3043 <= add_ln370_108_fu_2205_p2;
        add_ln370_56_reg_2893 <= add_ln370_56_fu_1031_p2;
        add_ln370_58_reg_2898 <= add_ln370_58_fu_1037_p2;
        add_ln370_59_reg_2903 <= add_ln370_59_fu_1043_p2;
        add_ln370_63_reg_2913 <= add_ln370_63_fu_1199_p2;
        add_ln370_65_reg_2918 <= add_ln370_65_fu_1205_p2;
        add_ln370_66_reg_2923 <= add_ln370_66_fu_1211_p2;
        add_ln370_70_reg_2933 <= add_ln370_70_fu_1367_p2;
        add_ln370_72_reg_2938 <= add_ln370_72_fu_1373_p2;
        add_ln370_73_reg_2943 <= add_ln370_73_fu_1379_p2;
        add_ln370_77_reg_2953 <= add_ln370_77_fu_1535_p2;
        add_ln370_79_reg_2958 <= add_ln370_79_fu_1541_p2;
        add_ln370_80_reg_2963 <= add_ln370_80_fu_1547_p2;
        add_ln370_84_reg_2973 <= add_ln370_84_fu_1773_p2;
        add_ln370_86_reg_2978 <= add_ln370_86_fu_1779_p2;
        add_ln370_87_reg_2983 <= add_ln370_87_fu_1785_p2;
        add_ln370_91_reg_2993 <= add_ln370_91_fu_1913_p2;
        add_ln370_93_reg_2998 <= add_ln370_93_fu_1919_p2;
        add_ln370_94_reg_3003 <= add_ln370_94_fu_1925_p2;
        add_ln370_98_reg_3013 <= add_ln370_98_fu_2053_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln337_reg_2870 <= icmp_ln337_fu_425_p2;
        icmp_ln342_reg_2876 <= icmp_ln342_fu_505_p2;
        icmp_ln378_reg_3048 <= icmp_ln378_fu_2211_p2;
        mul_res_741_reg_2888 <= mul_res_741_fu_953_p2;
        mul_res_748_reg_2908 <= mul_res_748_fu_1149_p2;
        mul_res_755_reg_2928 <= mul_res_755_fu_1317_p2;
        mul_res_762_reg_2948 <= mul_res_762_fu_1485_p2;
        mul_res_769_reg_2968 <= mul_res_769_fu_1703_p2;
        mul_res_776_reg_2988 <= mul_res_776_fu_1871_p2;
        mul_res_783_reg_3008 <= mul_res_783_fu_2011_p2;
        mul_res_790_reg_3028 <= mul_res_790_fu_2151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln370_103_reg_3082 <= add_ln370_103_fu_2613_p2;
        add_ln370_110_reg_3087 <= add_ln370_110_fu_2653_p2;
        add_ln370_61_reg_3052 <= add_ln370_61_fu_2373_p2;
        add_ln370_68_reg_3057 <= add_ln370_68_fu_2413_p2;
        add_ln370_75_reg_3062 <= add_ln370_75_fu_2453_p2;
        add_ln370_82_reg_3067 <= add_ln370_82_fu_2493_p2;
        add_ln370_89_reg_3072 <= add_ln370_89_fu_2533_p2;
        add_ln370_96_reg_3077 <= add_ln370_96_fu_2573_p2;
        icmp_ln378_reg_3048_pp0_iter2_reg <= icmp_ln378_reg_3048;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_1124_fu_310 <= add_ln370_68_fu_2413_p2;
        empty_1125_fu_314 <= add_ln370_75_fu_2453_p2;
        empty_1126_fu_318 <= add_ln370_82_fu_2493_p2;
        empty_1127_fu_322 <= add_ln370_89_fu_2533_p2;
        empty_1128_fu_326 <= add_ln370_96_fu_2573_p2;
        empty_1129_fu_330 <= add_ln370_103_fu_2613_p2;
        empty_1130_fu_334 <= add_ln370_110_fu_2653_p2;
        empty_fu_306 <= add_ln370_61_fu_2373_p2;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_419_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_302;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_342;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_338;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_413_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 16'd1);

assign add_ln337_fu_431_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln370_100_fu_2059_p2 = ($signed(sext_ln368_100_fu_1981_p1) + $signed(sext_ln368_99_fu_1963_p1));

assign add_ln370_101_fu_2065_p2 = ($signed(sext_ln368_98_fu_1945_p1) + $signed(sext_ln370_84_fu_2049_p1));

assign add_ln370_102_fu_2597_p2 = ($signed(sext_ln370_87_fu_2594_p1) + $signed(sext_ln370_86_fu_2591_p1));

assign add_ln370_103_fu_2613_p2 = (add_ln370_99_fu_2607_p2 + select_ln342_8_fu_2290_p3);

assign add_ln370_104_fu_2625_p2 = ($signed(sext_ln370_91_fu_2622_p1) + $signed(sext_ln370_89_fu_2619_p1));

assign add_ln370_105_fu_2193_p2 = ($signed(sext_ln368_107_fu_2171_p1) + $signed(sext_ln368_106_fu_2139_p1));

assign add_ln370_106_fu_2647_p2 = ($signed(sext_ln370_94_fu_2643_p1) + $signed(add_ln370_104_fu_2625_p2));

assign add_ln370_107_fu_2199_p2 = ($signed(sext_ln368_105_fu_2121_p1) + $signed(sext_ln368_104_fu_2103_p1));

assign add_ln370_108_fu_2205_p2 = ($signed(sext_ln368_103_fu_2085_p1) + $signed(sext_ln370_90_fu_2189_p1));

assign add_ln370_109_fu_2637_p2 = ($signed(sext_ln370_93_fu_2634_p1) + $signed(sext_ln370_92_fu_2631_p1));

assign add_ln370_110_fu_2653_p2 = (add_ln370_106_fu_2647_p2 + select_ln342_fu_2283_p3);

assign add_ln370_56_fu_1031_p2 = ($signed(sext_ln368_72_fu_991_p1) + $signed(sext_ln368_71_fu_923_p1));

assign add_ln370_57_fu_2367_p2 = ($signed(sext_ln370_52_fu_2363_p1) + $signed(add_ln370_fu_2345_p2));

assign add_ln370_58_fu_1037_p2 = ($signed(sext_ln368_70_fu_887_p1) + $signed(sext_ln368_69_fu_851_p1));

assign add_ln370_59_fu_1043_p2 = ($signed(sext_ln368_68_fu_829_p1) + $signed(sext_ln370_48_fu_1027_p1));

assign add_ln370_60_fu_2357_p2 = ($signed(sext_ln370_51_fu_2354_p1) + $signed(sext_ln370_50_fu_2351_p1));

assign add_ln370_61_fu_2373_p2 = (add_ln370_57_fu_2367_p2 + select_ln342_14_fu_2332_p3);

assign add_ln370_62_fu_2385_p2 = ($signed(sext_ln370_55_fu_2382_p1) + $signed(sext_ln370_53_fu_2379_p1));

assign add_ln370_63_fu_1199_p2 = ($signed(sext_ln368_77_fu_1173_p1) + $signed(sext_ln368_76_fu_1133_p1));

assign add_ln370_64_fu_2407_p2 = ($signed(sext_ln370_58_fu_2403_p1) + $signed(add_ln370_62_fu_2385_p2));

assign add_ln370_65_fu_1205_p2 = ($signed(sext_ln368_75_fu_1111_p1) + $signed(sext_ln368_74_fu_1089_p1));

assign add_ln370_66_fu_1211_p2 = ($signed(sext_ln368_73_fu_1067_p1) + $signed(sext_ln370_54_fu_1195_p1));

assign add_ln370_67_fu_2397_p2 = ($signed(sext_ln370_57_fu_2394_p1) + $signed(sext_ln370_56_fu_2391_p1));

assign add_ln370_68_fu_2413_p2 = (add_ln370_64_fu_2407_p2 + select_ln342_13_fu_2325_p3);

assign add_ln370_69_fu_2425_p2 = ($signed(sext_ln370_61_fu_2422_p1) + $signed(sext_ln370_59_fu_2419_p1));

assign add_ln370_70_fu_1367_p2 = ($signed(sext_ln368_82_fu_1341_p1) + $signed(sext_ln368_81_fu_1301_p1));

assign add_ln370_71_fu_2447_p2 = ($signed(sext_ln370_64_fu_2443_p1) + $signed(add_ln370_69_fu_2425_p2));

assign add_ln370_72_fu_1373_p2 = ($signed(sext_ln368_80_fu_1279_p1) + $signed(sext_ln368_79_fu_1257_p1));

assign add_ln370_73_fu_1379_p2 = ($signed(sext_ln368_78_fu_1235_p1) + $signed(sext_ln370_60_fu_1363_p1));

assign add_ln370_74_fu_2437_p2 = ($signed(sext_ln370_63_fu_2434_p1) + $signed(sext_ln370_62_fu_2431_p1));

assign add_ln370_75_fu_2453_p2 = (add_ln370_71_fu_2447_p2 + select_ln342_12_fu_2318_p3);

assign add_ln370_76_fu_2465_p2 = ($signed(sext_ln370_67_fu_2462_p1) + $signed(sext_ln370_65_fu_2459_p1));

assign add_ln370_77_fu_1535_p2 = ($signed(sext_ln368_87_fu_1509_p1) + $signed(sext_ln368_86_fu_1469_p1));

assign add_ln370_78_fu_2487_p2 = ($signed(sext_ln370_70_fu_2483_p1) + $signed(add_ln370_76_fu_2465_p2));

assign add_ln370_79_fu_1541_p2 = ($signed(sext_ln368_85_fu_1447_p1) + $signed(sext_ln368_84_fu_1425_p1));

assign add_ln370_80_fu_1547_p2 = ($signed(sext_ln368_83_fu_1403_p1) + $signed(sext_ln370_66_fu_1531_p1));

assign add_ln370_81_fu_2477_p2 = ($signed(sext_ln370_69_fu_2474_p1) + $signed(sext_ln370_68_fu_2471_p1));

assign add_ln370_82_fu_2493_p2 = (add_ln370_78_fu_2487_p2 + select_ln342_11_fu_2311_p3);

assign add_ln370_83_fu_2505_p2 = ($signed(sext_ln370_73_fu_2502_p1) + $signed(sext_ln370_71_fu_2499_p1));

assign add_ln370_84_fu_1773_p2 = ($signed(sext_ln368_92_fu_1737_p1) + $signed(sext_ln368_91_fu_1677_p1));

assign add_ln370_85_fu_2527_p2 = ($signed(sext_ln370_76_fu_2523_p1) + $signed(add_ln370_83_fu_2505_p2));

assign add_ln370_86_fu_1779_p2 = ($signed(sext_ln368_90_fu_1645_p1) + $signed(sext_ln368_89_fu_1613_p1));

assign add_ln370_87_fu_1785_p2 = ($signed(sext_ln368_88_fu_1581_p1) + $signed(sext_ln370_72_fu_1769_p1));

assign add_ln370_88_fu_2517_p2 = ($signed(sext_ln370_75_fu_2514_p1) + $signed(sext_ln370_74_fu_2511_p1));

assign add_ln370_89_fu_2533_p2 = (add_ln370_85_fu_2527_p2 + select_ln342_10_fu_2304_p3);

assign add_ln370_90_fu_2545_p2 = ($signed(sext_ln370_79_fu_2542_p1) + $signed(sext_ln370_77_fu_2539_p1));

assign add_ln370_91_fu_1913_p2 = ($signed(sext_ln368_97_fu_1891_p1) + $signed(sext_ln368_96_fu_1859_p1));

assign add_ln370_92_fu_2567_p2 = ($signed(sext_ln370_82_fu_2563_p1) + $signed(add_ln370_90_fu_2545_p2));

assign add_ln370_93_fu_1919_p2 = ($signed(sext_ln368_95_fu_1841_p1) + $signed(sext_ln368_94_fu_1823_p1));

assign add_ln370_94_fu_1925_p2 = ($signed(sext_ln368_93_fu_1805_p1) + $signed(sext_ln370_78_fu_1909_p1));

assign add_ln370_95_fu_2557_p2 = ($signed(sext_ln370_81_fu_2554_p1) + $signed(sext_ln370_80_fu_2551_p1));

assign add_ln370_96_fu_2573_p2 = (add_ln370_92_fu_2567_p2 + select_ln342_9_fu_2297_p3);

assign add_ln370_97_fu_2585_p2 = ($signed(sext_ln370_85_fu_2582_p1) + $signed(sext_ln370_83_fu_2579_p1));

assign add_ln370_98_fu_2053_p2 = ($signed(sext_ln368_102_fu_2031_p1) + $signed(sext_ln368_101_fu_1999_p1));

assign add_ln370_99_fu_2607_p2 = ($signed(sext_ln370_88_fu_2603_p1) + $signed(add_ln370_97_fu_2585_p2));

assign add_ln370_fu_2345_p2 = ($signed(sext_ln370_49_fu_2342_p1) + $signed(sext_ln370_fu_2339_p1));

assign and_ln336_fu_486_p2 = (xor_ln336_fu_475_p2 & icmp_ln338_fu_480_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((weight_sm_empty_n == 1'b0) | (cache_window_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_245 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_286 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign cit_4_fu_2217_p2 = (select_ln337_fu_497_p3 + 5'd1);

assign icmp_ln336_fu_419_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_425_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_480_p2 = ((ap_sig_allocacmp_cit_load == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_505_p2 = ((select_ln337_fu_497_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_2211_p2 = ((select_ln337_fu_497_p3 == 5'd27) ? 1'b1 : 1'b0);

assign lshr_ln_fu_517_p4 = {{cache_window_sm_dout[5:3]}};

assign mac_sm_din = {{{{{{{{add_ln370_110_reg_3087}, {add_ln370_103_reg_3082}}, {add_ln370_96_reg_3077}}, {add_ln370_89_reg_3072}}, {add_ln370_82_reg_3067}}, {add_ln370_75_reg_3062}}, {add_ln370_68_reg_3057}}, {add_ln370_61_reg_3052}};

assign mul_res_738_fu_845_p0 = zext_ln353_fu_527_p1;

assign mul_res_738_fu_845_p1 = sext_ln368_28_fu_833_p1;

assign mul_res_739_fu_881_p0 = zext_ln368_13_fu_865_p1;

assign mul_res_739_fu_881_p1 = sext_ln368_29_fu_869_p1;

assign mul_res_740_fu_917_p0 = zext_ln368_14_fu_901_p1;

assign mul_res_740_fu_917_p1 = sext_ln368_30_fu_905_p1;

assign mul_res_741_fu_953_p0 = zext_ln368_15_fu_937_p1;

assign mul_res_741_fu_953_p1 = sext_ln368_31_fu_941_p1;

assign mul_res_742_fu_985_p0 = zext_ln368_16_fu_969_p1;

assign mul_res_742_fu_985_p1 = sext_ln368_32_fu_973_p1;

assign mul_res_743_fu_1021_p0 = zext_ln368_17_fu_1005_p1;

assign mul_res_743_fu_1021_p1 = sext_ln368_33_fu_1009_p1;

assign mul_res_744_fu_1061_p0 = sext_ln368_34_fu_1049_p1;

assign mul_res_744_fu_1061_p1 = zext_ln368_fu_807_p1;

assign mul_res_745_fu_1083_p0 = zext_ln353_fu_527_p1;

assign mul_res_745_fu_1083_p1 = sext_ln368_35_fu_1071_p1;

assign mul_res_746_fu_1105_p0 = zext_ln368_13_fu_865_p1;

assign mul_res_746_fu_1105_p1 = sext_ln368_36_fu_1093_p1;

assign mul_res_747_fu_1127_p0 = zext_ln368_14_fu_901_p1;

assign mul_res_747_fu_1127_p1 = sext_ln368_37_fu_1115_p1;

assign mul_res_748_fu_1149_p0 = zext_ln368_15_fu_937_p1;

assign mul_res_748_fu_1149_p1 = sext_ln368_38_fu_1137_p1;

assign mul_res_749_fu_1167_p0 = zext_ln368_16_fu_969_p1;

assign mul_res_749_fu_1167_p1 = sext_ln368_39_fu_1155_p1;

assign mul_res_750_fu_1189_p0 = zext_ln368_17_fu_1005_p1;

assign mul_res_750_fu_1189_p1 = sext_ln368_40_fu_1177_p1;

assign mul_res_751_fu_1229_p0 = sext_ln368_41_fu_1217_p1;

assign mul_res_751_fu_1229_p1 = zext_ln368_fu_807_p1;

assign mul_res_752_fu_1251_p0 = zext_ln353_fu_527_p1;

assign mul_res_752_fu_1251_p1 = sext_ln368_42_fu_1239_p1;

assign mul_res_753_fu_1273_p0 = zext_ln368_13_fu_865_p1;

assign mul_res_753_fu_1273_p1 = sext_ln368_43_fu_1261_p1;

assign mul_res_754_fu_1295_p0 = zext_ln368_14_fu_901_p1;

assign mul_res_754_fu_1295_p1 = sext_ln368_44_fu_1283_p1;

assign mul_res_755_fu_1317_p0 = zext_ln368_15_fu_937_p1;

assign mul_res_755_fu_1317_p1 = sext_ln368_45_fu_1305_p1;

assign mul_res_756_fu_1335_p0 = zext_ln368_16_fu_969_p1;

assign mul_res_756_fu_1335_p1 = sext_ln368_46_fu_1323_p1;

assign mul_res_757_fu_1357_p0 = zext_ln368_17_fu_1005_p1;

assign mul_res_757_fu_1357_p1 = sext_ln368_47_fu_1345_p1;

assign mul_res_758_fu_1397_p0 = sext_ln368_48_fu_1385_p1;

assign mul_res_758_fu_1397_p1 = zext_ln368_fu_807_p1;

assign mul_res_759_fu_1419_p0 = zext_ln353_fu_527_p1;

assign mul_res_759_fu_1419_p1 = sext_ln368_49_fu_1407_p1;

assign mul_res_760_fu_1441_p0 = zext_ln368_13_fu_865_p1;

assign mul_res_760_fu_1441_p1 = sext_ln368_50_fu_1429_p1;

assign mul_res_761_fu_1463_p0 = zext_ln368_14_fu_901_p1;

assign mul_res_761_fu_1463_p1 = sext_ln368_51_fu_1451_p1;

assign mul_res_762_fu_1485_p0 = zext_ln368_15_fu_937_p1;

assign mul_res_762_fu_1485_p1 = sext_ln368_52_fu_1473_p1;

assign mul_res_763_fu_1503_p0 = zext_ln368_16_fu_969_p1;

assign mul_res_763_fu_1503_p1 = sext_ln368_53_fu_1491_p1;

assign mul_res_764_fu_1525_p0 = zext_ln368_17_fu_1005_p1;

assign mul_res_764_fu_1525_p1 = sext_ln368_54_fu_1513_p1;

assign mul_res_765_fu_1575_p0 = zext_ln368_18_fu_1563_p1;

assign mul_res_765_fu_1575_p1 = sext_ln368_fu_811_p1;

assign mul_res_766_fu_1607_p0 = zext_ln368_19_fu_1595_p1;

assign mul_res_766_fu_1607_p1 = sext_ln368_28_fu_833_p1;

assign mul_res_767_fu_1639_p0 = zext_ln368_20_fu_1627_p1;

assign mul_res_767_fu_1639_p1 = sext_ln368_29_fu_869_p1;

assign mul_res_768_fu_1671_p0 = zext_ln368_21_fu_1659_p1;

assign mul_res_768_fu_1671_p1 = sext_ln368_30_fu_905_p1;

assign mul_res_769_fu_1703_p0 = zext_ln368_22_fu_1691_p1;

assign mul_res_769_fu_1703_p1 = sext_ln368_31_fu_941_p1;

assign mul_res_770_fu_1731_p0 = zext_ln368_23_fu_1719_p1;

assign mul_res_770_fu_1731_p1 = sext_ln368_32_fu_973_p1;

assign mul_res_771_fu_1763_p0 = zext_ln368_24_fu_1751_p1;

assign mul_res_771_fu_1763_p1 = sext_ln368_33_fu_1009_p1;

assign mul_res_772_fu_1799_p0 = zext_ln368_18_fu_1563_p1;

assign mul_res_772_fu_1799_p1 = sext_ln368_34_fu_1049_p1;

assign mul_res_773_fu_1817_p0 = zext_ln368_19_fu_1595_p1;

assign mul_res_773_fu_1817_p1 = sext_ln368_35_fu_1071_p1;

assign mul_res_774_fu_1835_p0 = zext_ln368_20_fu_1627_p1;

assign mul_res_774_fu_1835_p1 = sext_ln368_36_fu_1093_p1;

assign mul_res_775_fu_1853_p0 = zext_ln368_21_fu_1659_p1;

assign mul_res_775_fu_1853_p1 = sext_ln368_37_fu_1115_p1;

assign mul_res_776_fu_1871_p0 = zext_ln368_22_fu_1691_p1;

assign mul_res_776_fu_1871_p1 = sext_ln368_38_fu_1137_p1;

assign mul_res_777_fu_1885_p0 = zext_ln368_23_fu_1719_p1;

assign mul_res_777_fu_1885_p1 = sext_ln368_39_fu_1155_p1;

assign mul_res_778_fu_1903_p0 = zext_ln368_24_fu_1751_p1;

assign mul_res_778_fu_1903_p1 = sext_ln368_40_fu_1177_p1;

assign mul_res_779_fu_1939_p0 = zext_ln368_18_fu_1563_p1;

assign mul_res_779_fu_1939_p1 = sext_ln368_41_fu_1217_p1;

assign mul_res_780_fu_1957_p0 = zext_ln368_19_fu_1595_p1;

assign mul_res_780_fu_1957_p1 = sext_ln368_42_fu_1239_p1;

assign mul_res_781_fu_1975_p0 = zext_ln368_20_fu_1627_p1;

assign mul_res_781_fu_1975_p1 = sext_ln368_43_fu_1261_p1;

assign mul_res_782_fu_1993_p0 = zext_ln368_21_fu_1659_p1;

assign mul_res_782_fu_1993_p1 = sext_ln368_44_fu_1283_p1;

assign mul_res_783_fu_2011_p0 = zext_ln368_22_fu_1691_p1;

assign mul_res_783_fu_2011_p1 = sext_ln368_45_fu_1305_p1;

assign mul_res_784_fu_2025_p0 = zext_ln368_23_fu_1719_p1;

assign mul_res_784_fu_2025_p1 = sext_ln368_46_fu_1323_p1;

assign mul_res_785_fu_2043_p0 = zext_ln368_24_fu_1751_p1;

assign mul_res_785_fu_2043_p1 = sext_ln368_47_fu_1345_p1;

assign mul_res_786_fu_2079_p0 = zext_ln368_18_fu_1563_p1;

assign mul_res_786_fu_2079_p1 = sext_ln368_48_fu_1385_p1;

assign mul_res_787_fu_2097_p0 = zext_ln368_19_fu_1595_p1;

assign mul_res_787_fu_2097_p1 = sext_ln368_49_fu_1407_p1;

assign mul_res_788_fu_2115_p0 = zext_ln368_20_fu_1627_p1;

assign mul_res_788_fu_2115_p1 = sext_ln368_50_fu_1429_p1;

assign mul_res_789_fu_2133_p0 = zext_ln368_21_fu_1659_p1;

assign mul_res_789_fu_2133_p1 = sext_ln368_51_fu_1451_p1;

assign mul_res_790_fu_2151_p0 = zext_ln368_22_fu_1691_p1;

assign mul_res_790_fu_2151_p1 = sext_ln368_52_fu_1473_p1;

assign mul_res_791_fu_2165_p0 = zext_ln368_23_fu_1719_p1;

assign mul_res_791_fu_2165_p1 = sext_ln368_53_fu_1491_p1;

assign mul_res_792_fu_2183_p0 = zext_ln368_24_fu_1751_p1;

assign mul_res_792_fu_2183_p1 = sext_ln368_54_fu_1513_p1;

assign mul_res_fu_823_p0 = sext_ln368_fu_811_p1;

assign mul_res_fu_823_p1 = zext_ln368_fu_807_p1;

assign or_ln337_fu_492_p2 = (icmp_ln337_reg_2870 | and_ln336_fu_486_p2);

assign select_ln337_4_fu_437_p3 = ((icmp_ln337_fu_425_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_431_p2);

assign select_ln337_fu_497_p3 = ((or_ln337_fu_492_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign select_ln342_10_fu_2304_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1127_fu_322);

assign select_ln342_11_fu_2311_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1126_fu_318);

assign select_ln342_12_fu_2318_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1125_fu_314);

assign select_ln342_13_fu_2325_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1124_fu_310);

assign select_ln342_14_fu_2332_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_fu_306);

assign select_ln342_8_fu_2290_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1129_fu_330);

assign select_ln342_9_fu_2297_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1128_fu_326);

assign select_ln342_fu_2283_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1130_fu_334);

assign sext_ln368_100_fu_1981_p1 = mul_res_781_fu_1975_p2;

assign sext_ln368_101_fu_1999_p1 = mul_res_782_fu_1993_p2;

assign sext_ln368_102_fu_2031_p1 = mul_res_784_fu_2025_p2;

assign sext_ln368_103_fu_2085_p1 = mul_res_786_fu_2079_p2;

assign sext_ln368_104_fu_2103_p1 = mul_res_787_fu_2097_p2;

assign sext_ln368_105_fu_2121_p1 = mul_res_788_fu_2115_p2;

assign sext_ln368_106_fu_2139_p1 = mul_res_789_fu_2133_p2;

assign sext_ln368_107_fu_2171_p1 = mul_res_791_fu_2165_p2;

assign sext_ln368_28_fu_833_p1 = $signed(trunc_ln354_28_fu_537_p4);

assign sext_ln368_29_fu_869_p1 = $signed(trunc_ln354_29_fu_547_p4);

assign sext_ln368_30_fu_905_p1 = $signed(trunc_ln354_30_fu_557_p4);

assign sext_ln368_31_fu_941_p1 = $signed(trunc_ln354_31_fu_567_p4);

assign sext_ln368_32_fu_973_p1 = $signed(trunc_ln354_32_fu_577_p4);

assign sext_ln368_33_fu_1009_p1 = $signed(trunc_ln354_33_fu_587_p4);

assign sext_ln368_34_fu_1049_p1 = $signed(trunc_ln354_34_fu_597_p4);

assign sext_ln368_35_fu_1071_p1 = $signed(trunc_ln354_35_fu_607_p4);

assign sext_ln368_36_fu_1093_p1 = $signed(trunc_ln354_36_fu_617_p4);

assign sext_ln368_37_fu_1115_p1 = $signed(trunc_ln354_37_fu_627_p4);

assign sext_ln368_38_fu_1137_p1 = $signed(trunc_ln354_38_fu_637_p4);

assign sext_ln368_39_fu_1155_p1 = $signed(trunc_ln354_39_fu_647_p4);

assign sext_ln368_40_fu_1177_p1 = $signed(trunc_ln354_40_fu_657_p4);

assign sext_ln368_41_fu_1217_p1 = $signed(trunc_ln354_41_fu_667_p4);

assign sext_ln368_42_fu_1239_p1 = $signed(trunc_ln354_42_fu_677_p4);

assign sext_ln368_43_fu_1261_p1 = $signed(trunc_ln354_43_fu_687_p4);

assign sext_ln368_44_fu_1283_p1 = $signed(trunc_ln354_44_fu_697_p4);

assign sext_ln368_45_fu_1305_p1 = $signed(trunc_ln354_45_fu_707_p4);

assign sext_ln368_46_fu_1323_p1 = $signed(trunc_ln354_46_fu_717_p4);

assign sext_ln368_47_fu_1345_p1 = $signed(trunc_ln354_47_fu_727_p4);

assign sext_ln368_48_fu_1385_p1 = $signed(trunc_ln354_48_fu_737_p4);

assign sext_ln368_49_fu_1407_p1 = $signed(trunc_ln354_49_fu_747_p4);

assign sext_ln368_50_fu_1429_p1 = $signed(trunc_ln354_50_fu_757_p4);

assign sext_ln368_51_fu_1451_p1 = $signed(trunc_ln354_51_fu_767_p4);

assign sext_ln368_52_fu_1473_p1 = $signed(trunc_ln354_52_fu_777_p4);

assign sext_ln368_53_fu_1491_p1 = $signed(trunc_ln354_s_fu_787_p4);

assign sext_ln368_54_fu_1513_p1 = $signed(trunc_ln354_53_fu_797_p4);

assign sext_ln368_68_fu_829_p1 = mul_res_fu_823_p2;

assign sext_ln368_69_fu_851_p1 = mul_res_738_fu_845_p2;

assign sext_ln368_70_fu_887_p1 = mul_res_739_fu_881_p2;

assign sext_ln368_71_fu_923_p1 = mul_res_740_fu_917_p2;

assign sext_ln368_72_fu_991_p1 = mul_res_742_fu_985_p2;

assign sext_ln368_73_fu_1067_p1 = mul_res_744_fu_1061_p2;

assign sext_ln368_74_fu_1089_p1 = mul_res_745_fu_1083_p2;

assign sext_ln368_75_fu_1111_p1 = mul_res_746_fu_1105_p2;

assign sext_ln368_76_fu_1133_p1 = mul_res_747_fu_1127_p2;

assign sext_ln368_77_fu_1173_p1 = mul_res_749_fu_1167_p2;

assign sext_ln368_78_fu_1235_p1 = mul_res_751_fu_1229_p2;

assign sext_ln368_79_fu_1257_p1 = mul_res_752_fu_1251_p2;

assign sext_ln368_80_fu_1279_p1 = mul_res_753_fu_1273_p2;

assign sext_ln368_81_fu_1301_p1 = mul_res_754_fu_1295_p2;

assign sext_ln368_82_fu_1341_p1 = mul_res_756_fu_1335_p2;

assign sext_ln368_83_fu_1403_p1 = mul_res_758_fu_1397_p2;

assign sext_ln368_84_fu_1425_p1 = mul_res_759_fu_1419_p2;

assign sext_ln368_85_fu_1447_p1 = mul_res_760_fu_1441_p2;

assign sext_ln368_86_fu_1469_p1 = mul_res_761_fu_1463_p2;

assign sext_ln368_87_fu_1509_p1 = mul_res_763_fu_1503_p2;

assign sext_ln368_88_fu_1581_p1 = mul_res_765_fu_1575_p2;

assign sext_ln368_89_fu_1613_p1 = mul_res_766_fu_1607_p2;

assign sext_ln368_90_fu_1645_p1 = mul_res_767_fu_1639_p2;

assign sext_ln368_91_fu_1677_p1 = mul_res_768_fu_1671_p2;

assign sext_ln368_92_fu_1737_p1 = mul_res_770_fu_1731_p2;

assign sext_ln368_93_fu_1805_p1 = mul_res_772_fu_1799_p2;

assign sext_ln368_94_fu_1823_p1 = mul_res_773_fu_1817_p2;

assign sext_ln368_95_fu_1841_p1 = mul_res_774_fu_1835_p2;

assign sext_ln368_96_fu_1859_p1 = mul_res_775_fu_1853_p2;

assign sext_ln368_97_fu_1891_p1 = mul_res_777_fu_1885_p2;

assign sext_ln368_98_fu_1945_p1 = mul_res_779_fu_1939_p2;

assign sext_ln368_99_fu_1963_p1 = mul_res_780_fu_1957_p2;

assign sext_ln368_fu_811_p1 = $signed(trunc_ln354_fu_533_p1);

assign sext_ln370_48_fu_1027_p1 = mul_res_743_fu_1021_p2;

assign sext_ln370_49_fu_2342_p1 = $signed(add_ln370_56_reg_2893);

assign sext_ln370_50_fu_2351_p1 = $signed(add_ln370_58_reg_2898);

assign sext_ln370_51_fu_2354_p1 = $signed(add_ln370_59_reg_2903);

assign sext_ln370_52_fu_2363_p1 = $signed(add_ln370_60_fu_2357_p2);

assign sext_ln370_53_fu_2379_p1 = mul_res_748_reg_2908;

assign sext_ln370_54_fu_1195_p1 = mul_res_750_fu_1189_p2;

assign sext_ln370_55_fu_2382_p1 = $signed(add_ln370_63_reg_2913);

assign sext_ln370_56_fu_2391_p1 = $signed(add_ln370_65_reg_2918);

assign sext_ln370_57_fu_2394_p1 = $signed(add_ln370_66_reg_2923);

assign sext_ln370_58_fu_2403_p1 = $signed(add_ln370_67_fu_2397_p2);

assign sext_ln370_59_fu_2419_p1 = mul_res_755_reg_2928;

assign sext_ln370_60_fu_1363_p1 = mul_res_757_fu_1357_p2;

assign sext_ln370_61_fu_2422_p1 = $signed(add_ln370_70_reg_2933);

assign sext_ln370_62_fu_2431_p1 = $signed(add_ln370_72_reg_2938);

assign sext_ln370_63_fu_2434_p1 = $signed(add_ln370_73_reg_2943);

assign sext_ln370_64_fu_2443_p1 = $signed(add_ln370_74_fu_2437_p2);

assign sext_ln370_65_fu_2459_p1 = mul_res_762_reg_2948;

assign sext_ln370_66_fu_1531_p1 = mul_res_764_fu_1525_p2;

assign sext_ln370_67_fu_2462_p1 = $signed(add_ln370_77_reg_2953);

assign sext_ln370_68_fu_2471_p1 = $signed(add_ln370_79_reg_2958);

assign sext_ln370_69_fu_2474_p1 = $signed(add_ln370_80_reg_2963);

assign sext_ln370_70_fu_2483_p1 = $signed(add_ln370_81_fu_2477_p2);

assign sext_ln370_71_fu_2499_p1 = mul_res_769_reg_2968;

assign sext_ln370_72_fu_1769_p1 = mul_res_771_fu_1763_p2;

assign sext_ln370_73_fu_2502_p1 = $signed(add_ln370_84_reg_2973);

assign sext_ln370_74_fu_2511_p1 = $signed(add_ln370_86_reg_2978);

assign sext_ln370_75_fu_2514_p1 = $signed(add_ln370_87_reg_2983);

assign sext_ln370_76_fu_2523_p1 = $signed(add_ln370_88_fu_2517_p2);

assign sext_ln370_77_fu_2539_p1 = mul_res_776_reg_2988;

assign sext_ln370_78_fu_1909_p1 = mul_res_778_fu_1903_p2;

assign sext_ln370_79_fu_2542_p1 = $signed(add_ln370_91_reg_2993);

assign sext_ln370_80_fu_2551_p1 = $signed(add_ln370_93_reg_2998);

assign sext_ln370_81_fu_2554_p1 = $signed(add_ln370_94_reg_3003);

assign sext_ln370_82_fu_2563_p1 = $signed(add_ln370_95_fu_2557_p2);

assign sext_ln370_83_fu_2579_p1 = mul_res_783_reg_3008;

assign sext_ln370_84_fu_2049_p1 = mul_res_785_fu_2043_p2;

assign sext_ln370_85_fu_2582_p1 = $signed(add_ln370_98_reg_3013);

assign sext_ln370_86_fu_2591_p1 = $signed(add_ln370_100_reg_3018);

assign sext_ln370_87_fu_2594_p1 = $signed(add_ln370_101_reg_3023);

assign sext_ln370_88_fu_2603_p1 = $signed(add_ln370_102_fu_2597_p2);

assign sext_ln370_89_fu_2619_p1 = mul_res_790_reg_3028;

assign sext_ln370_90_fu_2189_p1 = mul_res_792_fu_2183_p2;

assign sext_ln370_91_fu_2622_p1 = $signed(add_ln370_105_reg_3033);

assign sext_ln370_92_fu_2631_p1 = $signed(add_ln370_107_reg_3038);

assign sext_ln370_93_fu_2634_p1 = $signed(add_ln370_108_reg_3043);

assign sext_ln370_94_fu_2643_p1 = $signed(add_ln370_109_fu_2637_p2);

assign sext_ln370_fu_2339_p1 = mul_res_741_reg_2888;

assign start_out = real_start;

assign tmp_85_fu_891_p4 = {{cache_window_sm_dout[11:9]}};

assign tmp_86_fu_927_p4 = {{cache_window_sm_dout[14:12]}};

assign tmp_87_fu_959_p4 = {{cache_window_sm_dout[17:15]}};

assign tmp_88_fu_995_p4 = {{cache_window_sm_dout[20:18]}};

assign tmp_89_fu_1553_p4 = {{cache_window_sm_dout[23:21]}};

assign tmp_90_fu_1585_p4 = {{cache_window_sm_dout[26:24]}};

assign tmp_91_fu_1617_p4 = {{cache_window_sm_dout[29:27]}};

assign tmp_92_fu_1649_p4 = {{cache_window_sm_dout[32:30]}};

assign tmp_93_fu_1681_p4 = {{cache_window_sm_dout[35:33]}};

assign tmp_94_fu_1709_p4 = {{cache_window_sm_dout[38:36]}};

assign tmp_95_fu_1741_p4 = {{cache_window_sm_dout[41:39]}};

assign tmp_fu_855_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln353_fu_513_p1 = cache_window_sm_dout[2:0];

assign trunc_ln354_28_fu_537_p4 = {{weight_sm_dout[5:3]}};

assign trunc_ln354_29_fu_547_p4 = {{weight_sm_dout[8:6]}};

assign trunc_ln354_30_fu_557_p4 = {{weight_sm_dout[11:9]}};

assign trunc_ln354_31_fu_567_p4 = {{weight_sm_dout[14:12]}};

assign trunc_ln354_32_fu_577_p4 = {{weight_sm_dout[17:15]}};

assign trunc_ln354_33_fu_587_p4 = {{weight_sm_dout[20:18]}};

assign trunc_ln354_34_fu_597_p4 = {{weight_sm_dout[23:21]}};

assign trunc_ln354_35_fu_607_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln354_36_fu_617_p4 = {{weight_sm_dout[29:27]}};

assign trunc_ln354_37_fu_627_p4 = {{weight_sm_dout[32:30]}};

assign trunc_ln354_38_fu_637_p4 = {{weight_sm_dout[35:33]}};

assign trunc_ln354_39_fu_647_p4 = {{weight_sm_dout[38:36]}};

assign trunc_ln354_40_fu_657_p4 = {{weight_sm_dout[41:39]}};

assign trunc_ln354_41_fu_667_p4 = {{weight_sm_dout[44:42]}};

assign trunc_ln354_42_fu_677_p4 = {{weight_sm_dout[47:45]}};

assign trunc_ln354_43_fu_687_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln354_44_fu_697_p4 = {{weight_sm_dout[53:51]}};

assign trunc_ln354_45_fu_707_p4 = {{weight_sm_dout[56:54]}};

assign trunc_ln354_46_fu_717_p4 = {{weight_sm_dout[59:57]}};

assign trunc_ln354_47_fu_727_p4 = {{weight_sm_dout[62:60]}};

assign trunc_ln354_48_fu_737_p4 = {{weight_sm_dout[65:63]}};

assign trunc_ln354_49_fu_747_p4 = {{weight_sm_dout[68:66]}};

assign trunc_ln354_50_fu_757_p4 = {{weight_sm_dout[71:69]}};

assign trunc_ln354_51_fu_767_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln354_52_fu_777_p4 = {{weight_sm_dout[77:75]}};

assign trunc_ln354_53_fu_797_p4 = {{weight_sm_dout[83:81]}};

assign trunc_ln354_fu_533_p1 = weight_sm_dout[2:0];

assign trunc_ln354_s_fu_787_p4 = {{weight_sm_dout[80:78]}};

assign xor_ln336_fu_475_p2 = (icmp_ln337_reg_2870 ^ 1'd1);

assign zext_ln353_fu_527_p1 = lshr_ln_fu_517_p4;

assign zext_ln368_13_fu_865_p1 = tmp_fu_855_p4;

assign zext_ln368_14_fu_901_p1 = tmp_85_fu_891_p4;

assign zext_ln368_15_fu_937_p1 = tmp_86_fu_927_p4;

assign zext_ln368_16_fu_969_p1 = tmp_87_fu_959_p4;

assign zext_ln368_17_fu_1005_p1 = tmp_88_fu_995_p4;

assign zext_ln368_18_fu_1563_p1 = tmp_89_fu_1553_p4;

assign zext_ln368_19_fu_1595_p1 = tmp_90_fu_1585_p4;

assign zext_ln368_20_fu_1627_p1 = tmp_91_fu_1617_p4;

assign zext_ln368_21_fu_1659_p1 = tmp_92_fu_1649_p4;

assign zext_ln368_22_fu_1691_p1 = tmp_93_fu_1681_p4;

assign zext_ln368_23_fu_1719_p1 = tmp_94_fu_1709_p4;

assign zext_ln368_24_fu_1751_p1 = tmp_95_fu_1741_p4;

assign zext_ln368_fu_807_p1 = trunc_ln353_fu_513_p1;

endmodule //ATTN11_matmul_step2_mac_19
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [35:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [287:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln161_reg_6959;
reg   [0:0] icmp_ln161_reg_6959_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln120_fu_881_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] attn_inst_matmul_gen_q_bias_arr_657_address0;
reg    attn_inst_matmul_gen_q_bias_arr_657_ce0;
wire   [140:0] attn_inst_matmul_gen_q_bias_arr_657_q0;
wire   [8:0] attn_inst_matmul_gen_q_weight_arr_656_address0;
reg    attn_inst_matmul_gen_q_weight_arr_656_ce0;
wire   [215:0] attn_inst_matmul_gen_q_weight_arr_656_q0;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln121_fu_887_p2;
reg   [0:0] icmp_ln121_reg_6897;
wire   [5:0] select_ln121_fu_978_p3;
reg   [5:0] select_ln121_reg_6904;
wire   [4:0] select_ln121_7_fu_986_p3;
reg   [4:0] select_ln121_7_reg_6911;
wire   [3:0] trunc_ln121_fu_994_p1;
reg   [3:0] trunc_ln121_reg_6916;
wire   [0:0] icmp_ln126_fu_1057_p2;
reg   [0:0] icmp_ln126_reg_6931;
reg   [0:0] icmp_ln126_reg_6931_pp0_iter3_reg;
wire   [0:0] icmp_ln161_fu_1066_p2;
reg   [0:0] icmp_ln161_reg_6959_pp0_iter3_reg;
wire   [11:0] trunc_ln131_fu_1071_p1;
reg   [11:0] trunc_ln131_reg_6963;
reg   [11:0] tmp_s_reg_6969;
reg   [11:0] tmp_1_reg_6975;
reg   [11:0] tmp_2_reg_6981;
reg   [11:0] tmp_3_reg_6987;
reg   [11:0] tmp_4_reg_6993;
reg   [11:0] tmp_5_reg_6999;
reg   [11:0] tmp_6_reg_7005;
reg   [11:0] tmp_7_reg_7011;
reg   [11:0] tmp_8_reg_7017;
reg   [11:0] tmp_9_reg_7023;
reg   [8:0] tmp_83_reg_7029;
wire  signed [5:0] mul_res_fu_1321_p2;
reg  signed [5:0] mul_res_reg_7034;
wire  signed [5:0] mul_res_595_fu_1353_p2;
reg  signed [5:0] mul_res_595_reg_7039;
wire  signed [5:0] mul_res_596_fu_1385_p2;
reg  signed [5:0] mul_res_596_reg_7044;
wire  signed [5:0] mul_res_597_fu_1417_p2;
reg  signed [5:0] mul_res_597_reg_7049;
wire  signed [5:0] mul_res_598_fu_1449_p2;
reg  signed [5:0] mul_res_598_reg_7054;
wire  signed [5:0] mul_res_599_fu_1481_p2;
reg  signed [5:0] mul_res_599_reg_7059;
wire  signed [5:0] mul_res_600_fu_1509_p2;
reg  signed [5:0] mul_res_600_reg_7064;
wire  signed [5:0] mul_res_601_fu_1537_p2;
reg  signed [5:0] mul_res_601_reg_7069;
wire  signed [5:0] mul_res_602_fu_1565_p2;
reg  signed [5:0] mul_res_602_reg_7074;
wire  signed [5:0] mul_res_603_fu_1593_p2;
reg  signed [5:0] mul_res_603_reg_7079;
wire  signed [5:0] mul_res_604_fu_1621_p2;
reg  signed [5:0] mul_res_604_reg_7084;
wire  signed [5:0] mul_res_605_fu_1649_p2;
reg  signed [5:0] mul_res_605_reg_7089;
wire  signed [5:0] mul_res_606_fu_1677_p2;
reg  signed [5:0] mul_res_606_reg_7094;
wire  signed [5:0] mul_res_607_fu_1705_p2;
reg  signed [5:0] mul_res_607_reg_7099;
wire  signed [5:0] mul_res_608_fu_1733_p2;
reg  signed [5:0] mul_res_608_reg_7104;
wire  signed [5:0] mul_res_609_fu_1761_p2;
reg  signed [5:0] mul_res_609_reg_7109;
wire  signed [5:0] mul_res_610_fu_1789_p2;
reg  signed [5:0] mul_res_610_reg_7114;
wire  signed [5:0] mul_res_611_fu_1817_p2;
reg  signed [5:0] mul_res_611_reg_7119;
wire  signed [5:0] mul_res_612_fu_1845_p2;
reg  signed [5:0] mul_res_612_reg_7124;
wire  signed [5:0] mul_res_613_fu_1873_p2;
reg  signed [5:0] mul_res_613_reg_7129;
wire  signed [5:0] mul_res_614_fu_1901_p2;
reg  signed [5:0] mul_res_614_reg_7134;
wire  signed [5:0] mul_res_615_fu_1929_p2;
reg  signed [5:0] mul_res_615_reg_7139;
wire  signed [5:0] mul_res_616_fu_1957_p2;
reg  signed [5:0] mul_res_616_reg_7144;
wire  signed [5:0] mul_res_617_fu_1985_p2;
reg  signed [5:0] mul_res_617_reg_7149;
wire  signed [5:0] mul_res_618_fu_2013_p2;
reg  signed [5:0] mul_res_618_reg_7154;
wire  signed [5:0] mul_res_619_fu_2041_p2;
reg  signed [5:0] mul_res_619_reg_7159;
wire  signed [5:0] mul_res_620_fu_2069_p2;
reg  signed [5:0] mul_res_620_reg_7164;
wire  signed [5:0] mul_res_621_fu_2097_p2;
reg  signed [5:0] mul_res_621_reg_7169;
wire  signed [5:0] mul_res_622_fu_2125_p2;
reg  signed [5:0] mul_res_622_reg_7174;
wire  signed [5:0] mul_res_623_fu_2153_p2;
reg  signed [5:0] mul_res_623_reg_7179;
wire  signed [5:0] mul_res_624_fu_2181_p2;
reg  signed [5:0] mul_res_624_reg_7184;
wire  signed [5:0] mul_res_625_fu_2209_p2;
reg  signed [5:0] mul_res_625_reg_7189;
wire  signed [5:0] mul_res_626_fu_2237_p2;
reg  signed [5:0] mul_res_626_reg_7194;
wire  signed [5:0] mul_res_627_fu_2265_p2;
reg  signed [5:0] mul_res_627_reg_7199;
wire  signed [5:0] mul_res_628_fu_2293_p2;
reg  signed [5:0] mul_res_628_reg_7204;
wire  signed [5:0] mul_res_629_fu_2321_p2;
reg  signed [5:0] mul_res_629_reg_7209;
wire  signed [5:0] mul_res_630_fu_2349_p2;
reg  signed [5:0] mul_res_630_reg_7214;
wire  signed [5:0] mul_res_631_fu_2377_p2;
reg  signed [5:0] mul_res_631_reg_7219;
wire  signed [5:0] mul_res_632_fu_2405_p2;
reg  signed [5:0] mul_res_632_reg_7224;
wire  signed [5:0] mul_res_633_fu_2433_p2;
reg  signed [5:0] mul_res_633_reg_7229;
wire  signed [5:0] mul_res_634_fu_2461_p2;
reg  signed [5:0] mul_res_634_reg_7234;
wire  signed [5:0] mul_res_635_fu_2489_p2;
reg  signed [5:0] mul_res_635_reg_7239;
wire  signed [5:0] mul_res_636_fu_2517_p2;
reg  signed [5:0] mul_res_636_reg_7244;
wire  signed [5:0] mul_res_637_fu_2545_p2;
reg  signed [5:0] mul_res_637_reg_7249;
wire  signed [5:0] mul_res_638_fu_2573_p2;
reg  signed [5:0] mul_res_638_reg_7254;
wire  signed [5:0] mul_res_639_fu_2601_p2;
reg  signed [5:0] mul_res_639_reg_7259;
wire  signed [5:0] mul_res_640_fu_2629_p2;
reg  signed [5:0] mul_res_640_reg_7264;
wire  signed [5:0] mul_res_641_fu_2657_p2;
reg  signed [5:0] mul_res_641_reg_7269;
wire  signed [5:0] mul_res_642_fu_2685_p2;
reg  signed [5:0] mul_res_642_reg_7274;
wire  signed [5:0] mul_res_643_fu_2713_p2;
reg  signed [5:0] mul_res_643_reg_7279;
wire  signed [5:0] mul_res_644_fu_2741_p2;
reg  signed [5:0] mul_res_644_reg_7284;
wire  signed [5:0] mul_res_645_fu_2769_p2;
reg  signed [5:0] mul_res_645_reg_7289;
wire  signed [5:0] mul_res_646_fu_2797_p2;
reg  signed [5:0] mul_res_646_reg_7294;
wire  signed [5:0] mul_res_647_fu_2825_p2;
reg  signed [5:0] mul_res_647_reg_7299;
wire  signed [5:0] mul_res_648_fu_2853_p2;
reg  signed [5:0] mul_res_648_reg_7304;
wire  signed [5:0] mul_res_649_fu_2881_p2;
reg  signed [5:0] mul_res_649_reg_7309;
wire  signed [5:0] mul_res_650_fu_2909_p2;
reg  signed [5:0] mul_res_650_reg_7314;
wire  signed [5:0] mul_res_651_fu_2937_p2;
reg  signed [5:0] mul_res_651_reg_7319;
wire  signed [5:0] mul_res_652_fu_2965_p2;
reg  signed [5:0] mul_res_652_reg_7324;
wire  signed [5:0] mul_res_653_fu_2993_p2;
reg  signed [5:0] mul_res_653_reg_7329;
wire  signed [5:0] mul_res_654_fu_3021_p2;
reg  signed [5:0] mul_res_654_reg_7334;
wire  signed [5:0] mul_res_655_fu_3049_p2;
reg  signed [5:0] mul_res_655_reg_7339;
wire  signed [5:0] mul_res_656_fu_3077_p2;
reg  signed [5:0] mul_res_656_reg_7344;
wire  signed [5:0] mul_res_657_fu_3105_p2;
reg  signed [5:0] mul_res_657_reg_7349;
wire  signed [5:0] mul_res_658_fu_3133_p2;
reg  signed [5:0] mul_res_658_reg_7354;
wire  signed [5:0] mul_res_659_fu_3161_p2;
reg  signed [5:0] mul_res_659_reg_7359;
wire  signed [5:0] mul_res_660_fu_3189_p2;
reg  signed [5:0] mul_res_660_reg_7364;
wire  signed [5:0] mul_res_661_fu_3217_p2;
reg  signed [5:0] mul_res_661_reg_7369;
wire  signed [5:0] mul_res_662_fu_3245_p2;
reg  signed [5:0] mul_res_662_reg_7374;
wire  signed [5:0] mul_res_663_fu_3273_p2;
reg  signed [5:0] mul_res_663_reg_7379;
wire  signed [5:0] mul_res_664_fu_3301_p2;
reg  signed [5:0] mul_res_664_reg_7384;
wire  signed [5:0] mul_res_665_fu_3329_p2;
reg  signed [5:0] mul_res_665_reg_7389;
wire  signed [5:0] mul_res_666_fu_3347_p2;
reg  signed [5:0] mul_res_666_reg_7394;
wire  signed [5:0] mul_res_667_fu_3365_p2;
reg  signed [5:0] mul_res_667_reg_7399;
wire  signed [5:0] mul_res_668_fu_3383_p2;
reg  signed [5:0] mul_res_668_reg_7404;
wire  signed [5:0] mul_res_669_fu_3401_p2;
reg  signed [5:0] mul_res_669_reg_7409;
wire  signed [5:0] mul_res_670_fu_3419_p2;
reg  signed [5:0] mul_res_670_reg_7414;
wire  signed [5:0] mul_res_671_fu_3437_p2;
reg  signed [5:0] mul_res_671_reg_7419;
wire  signed [5:0] mul_res_672_fu_3451_p2;
reg  signed [5:0] mul_res_672_reg_7424;
wire  signed [5:0] mul_res_673_fu_3465_p2;
reg  signed [5:0] mul_res_673_reg_7429;
wire  signed [5:0] mul_res_674_fu_3479_p2;
reg  signed [5:0] mul_res_674_reg_7434;
wire  signed [5:0] mul_res_675_fu_3493_p2;
reg  signed [5:0] mul_res_675_reg_7439;
wire  signed [5:0] mul_res_676_fu_3507_p2;
reg  signed [5:0] mul_res_676_reg_7444;
wire  signed [5:0] mul_res_677_fu_3521_p2;
reg  signed [5:0] mul_res_677_reg_7449;
wire  signed [5:0] mul_res_678_fu_3535_p2;
reg  signed [5:0] mul_res_678_reg_7454;
wire  signed [5:0] mul_res_679_fu_3549_p2;
reg  signed [5:0] mul_res_679_reg_7459;
wire  signed [5:0] mul_res_680_fu_3563_p2;
reg  signed [5:0] mul_res_680_reg_7464;
wire  signed [5:0] mul_res_681_fu_3577_p2;
reg  signed [5:0] mul_res_681_reg_7469;
wire  signed [5:0] mul_res_682_fu_3591_p2;
reg  signed [5:0] mul_res_682_reg_7474;
wire  signed [5:0] mul_res_683_fu_3605_p2;
reg  signed [5:0] mul_res_683_reg_7479;
wire  signed [5:0] mul_res_684_fu_3619_p2;
reg  signed [5:0] mul_res_684_reg_7484;
wire  signed [5:0] mul_res_685_fu_3633_p2;
reg  signed [5:0] mul_res_685_reg_7489;
wire  signed [5:0] mul_res_686_fu_3647_p2;
reg  signed [5:0] mul_res_686_reg_7494;
wire  signed [5:0] mul_res_687_fu_3661_p2;
reg  signed [5:0] mul_res_687_reg_7499;
wire  signed [5:0] mul_res_688_fu_3675_p2;
reg  signed [5:0] mul_res_688_reg_7504;
wire  signed [5:0] mul_res_689_fu_3689_p2;
reg  signed [5:0] mul_res_689_reg_7509;
wire  signed [5:0] mul_res_690_fu_3703_p2;
reg  signed [5:0] mul_res_690_reg_7514;
wire  signed [5:0] mul_res_691_fu_3717_p2;
reg  signed [5:0] mul_res_691_reg_7519;
wire  signed [5:0] mul_res_692_fu_3731_p2;
reg  signed [5:0] mul_res_692_reg_7524;
wire  signed [5:0] mul_res_693_fu_3745_p2;
reg  signed [5:0] mul_res_693_reg_7529;
wire  signed [5:0] mul_res_694_fu_3759_p2;
reg  signed [5:0] mul_res_694_reg_7534;
wire  signed [5:0] mul_res_695_fu_3773_p2;
reg  signed [5:0] mul_res_695_reg_7539;
wire  signed [5:0] mul_res_696_fu_3787_p2;
reg  signed [5:0] mul_res_696_reg_7544;
wire  signed [5:0] mul_res_697_fu_3801_p2;
reg  signed [5:0] mul_res_697_reg_7549;
wire  signed [5:0] mul_res_698_fu_3815_p2;
reg  signed [5:0] mul_res_698_reg_7554;
wire  signed [5:0] mul_res_699_fu_3829_p2;
reg  signed [5:0] mul_res_699_reg_7559;
wire  signed [5:0] mul_res_700_fu_3843_p2;
reg  signed [5:0] mul_res_700_reg_7564;
wire  signed [5:0] mul_res_701_fu_3857_p2;
reg  signed [5:0] mul_res_701_reg_7569;
wire  signed [5:0] mul_res_702_fu_3871_p2;
reg  signed [5:0] mul_res_702_reg_7574;
wire  signed [5:0] mul_res_703_fu_3885_p2;
reg  signed [5:0] mul_res_703_reg_7579;
wire  signed [5:0] mul_res_704_fu_3899_p2;
reg  signed [5:0] mul_res_704_reg_7584;
wire  signed [5:0] mul_res_705_fu_3913_p2;
reg  signed [5:0] mul_res_705_reg_7589;
wire  signed [5:0] mul_res_706_fu_3927_p2;
reg  signed [5:0] mul_res_706_reg_7594;
wire  signed [5:0] mul_res_707_fu_3941_p2;
reg  signed [5:0] mul_res_707_reg_7599;
wire  signed [5:0] mul_res_708_fu_3955_p2;
reg  signed [5:0] mul_res_708_reg_7604;
wire  signed [5:0] mul_res_709_fu_3969_p2;
reg  signed [5:0] mul_res_709_reg_7609;
wire  signed [5:0] mul_res_710_fu_3983_p2;
reg  signed [5:0] mul_res_710_reg_7614;
wire  signed [5:0] mul_res_711_fu_3997_p2;
reg  signed [5:0] mul_res_711_reg_7619;
wire  signed [5:0] mul_res_712_fu_4011_p2;
reg  signed [5:0] mul_res_712_reg_7624;
wire  signed [5:0] mul_res_713_fu_4025_p2;
reg  signed [5:0] mul_res_713_reg_7629;
wire  signed [5:0] mul_res_714_fu_4039_p2;
reg  signed [5:0] mul_res_714_reg_7634;
wire  signed [5:0] mul_res_715_fu_4053_p2;
reg  signed [5:0] mul_res_715_reg_7639;
wire  signed [5:0] mul_res_716_fu_4067_p2;
reg  signed [5:0] mul_res_716_reg_7644;
wire  signed [5:0] mul_res_717_fu_4081_p2;
reg  signed [5:0] mul_res_717_reg_7649;
wire  signed [5:0] mul_res_718_fu_4095_p2;
reg  signed [5:0] mul_res_718_reg_7654;
wire  signed [5:0] mul_res_719_fu_4109_p2;
reg  signed [5:0] mul_res_719_reg_7659;
wire  signed [5:0] mul_res_720_fu_4123_p2;
reg  signed [5:0] mul_res_720_reg_7664;
wire  signed [5:0] mul_res_721_fu_4137_p2;
reg  signed [5:0] mul_res_721_reg_7669;
wire  signed [5:0] mul_res_722_fu_4151_p2;
reg  signed [5:0] mul_res_722_reg_7674;
wire  signed [5:0] mul_res_723_fu_4165_p2;
reg  signed [5:0] mul_res_723_reg_7679;
wire  signed [5:0] mul_res_724_fu_4179_p2;
reg  signed [5:0] mul_res_724_reg_7684;
wire  signed [5:0] mul_res_725_fu_4193_p2;
reg  signed [5:0] mul_res_725_reg_7689;
wire  signed [5:0] mul_res_726_fu_4207_p2;
reg  signed [5:0] mul_res_726_reg_7694;
wire  signed [5:0] mul_res_727_fu_4221_p2;
reg  signed [5:0] mul_res_727_reg_7699;
wire  signed [5:0] mul_res_728_fu_4235_p2;
reg  signed [5:0] mul_res_728_reg_7704;
wire  signed [5:0] mul_res_729_fu_4249_p2;
reg  signed [5:0] mul_res_729_reg_7709;
wire  signed [5:0] mul_res_730_fu_4263_p2;
reg  signed [5:0] mul_res_730_reg_7714;
wire  signed [5:0] mul_res_731_fu_4277_p2;
reg  signed [5:0] mul_res_731_reg_7719;
wire  signed [5:0] mul_res_732_fu_4291_p2;
reg  signed [5:0] mul_res_732_reg_7724;
wire  signed [5:0] mul_res_733_fu_4305_p2;
reg  signed [5:0] mul_res_733_reg_7729;
wire  signed [5:0] mul_res_734_fu_4319_p2;
reg  signed [5:0] mul_res_734_reg_7734;
wire  signed [5:0] mul_res_735_fu_4333_p2;
reg  signed [5:0] mul_res_735_reg_7739;
wire  signed [5:0] mul_res_736_fu_4347_p2;
reg  signed [5:0] mul_res_736_reg_7744;
wire  signed [5:0] mul_res_737_fu_4361_p2;
reg  signed [5:0] mul_res_737_reg_7749;
wire   [11:0] add_ln153_5_fu_4724_p2;
reg   [11:0] add_ln153_5_reg_7754;
wire   [11:0] add_ln153_11_fu_4794_p2;
reg   [11:0] add_ln153_11_reg_7759;
wire   [11:0] add_ln153_17_fu_4864_p2;
reg   [11:0] add_ln153_17_reg_7764;
wire   [11:0] add_ln153_23_fu_4934_p2;
reg   [11:0] add_ln153_23_reg_7769;
wire   [11:0] add_ln153_29_fu_5004_p2;
reg   [11:0] add_ln153_29_reg_7774;
wire   [11:0] add_ln153_35_fu_5074_p2;
reg   [11:0] add_ln153_35_reg_7779;
wire   [11:0] add_ln153_41_fu_5144_p2;
reg   [11:0] add_ln153_41_reg_7784;
wire   [11:0] add_ln153_47_fu_5214_p2;
reg   [11:0] add_ln153_47_reg_7789;
wire   [11:0] add_ln153_53_fu_5284_p2;
reg   [11:0] add_ln153_53_reg_7794;
wire   [11:0] add_ln153_59_fu_5354_p2;
reg   [11:0] add_ln153_59_reg_7799;
wire   [11:0] add_ln153_65_fu_5424_p2;
reg   [11:0] add_ln153_65_reg_7804;
wire   [11:0] add_ln153_71_fu_5494_p2;
reg   [11:0] add_ln153_71_reg_7809;
wire   [11:0] add_ln153_77_fu_5564_p2;
reg   [11:0] add_ln153_77_reg_7814;
wire   [11:0] add_ln153_83_fu_5634_p2;
reg   [11:0] add_ln153_83_reg_7819;
wire   [11:0] add_ln153_89_fu_5704_p2;
reg   [11:0] add_ln153_89_reg_7824;
wire   [11:0] add_ln153_95_fu_5774_p2;
reg   [11:0] add_ln153_95_reg_7829;
wire   [11:0] add_ln153_101_fu_5844_p2;
reg   [11:0] add_ln153_101_reg_7834;
wire   [11:0] add_ln153_107_fu_5914_p2;
reg   [11:0] add_ln153_107_reg_7839;
wire   [11:0] add_ln153_113_fu_5984_p2;
reg   [11:0] add_ln153_113_reg_7844;
wire   [11:0] add_ln153_119_fu_6054_p2;
reg   [11:0] add_ln153_119_reg_7849;
wire   [11:0] add_ln153_125_fu_6124_p2;
reg   [11:0] add_ln153_125_reg_7854;
wire   [11:0] add_ln153_131_fu_6194_p2;
reg   [11:0] add_ln153_131_reg_7859;
wire   [11:0] add_ln153_137_fu_6264_p2;
reg   [11:0] add_ln153_137_reg_7864;
wire   [11:0] add_ln153_143_fu_6334_p2;
reg   [11:0] add_ln153_143_reg_7869;
wire   [63:0] zext_ln121_fu_1028_p1;
wire   [63:0] zext_ln151_4_fu_1052_p1;
reg   [5:0] cit_fu_664;
wire   [5:0] add_ln122_fu_998_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [11:0] p_0_0_0364_fu_668;
reg   [11:0] p_0_0_0_112366_fu_672;
reg   [11:0] p_0_0_0_2368_fu_676;
reg   [11:0] p_0_0_0_3370_fu_680;
reg   [11:0] p_0_0_0_4372_fu_684;
reg   [11:0] p_0_0_0_5374_fu_688;
reg   [11:0] p_0_0_0_6376_fu_692;
reg   [11:0] p_0_0_0_7378_fu_696;
reg   [11:0] p_0_0_0_8380_fu_700;
reg   [11:0] p_0_0_0_9382_fu_704;
reg   [11:0] p_0_0_0_10384_fu_708;
reg   [11:0] p_0_0_0_11386_fu_712;
reg   [11:0] p_0_0_0388_fu_716;
reg   [11:0] p_0_0_0_112390_fu_720;
reg   [11:0] p_0_0_0_2392_fu_724;
reg   [11:0] p_0_0_0_3394_fu_728;
reg   [11:0] p_0_0_0_4396_fu_732;
reg   [11:0] p_0_0_0_5398_fu_736;
reg   [11:0] p_0_0_0_6400_fu_740;
reg   [11:0] p_0_0_0_7402_fu_744;
reg   [11:0] p_0_0_0_8404_fu_748;
reg   [11:0] p_0_0_0_9406_fu_752;
reg   [11:0] p_0_0_0_10408_fu_756;
reg   [11:0] p_0_0_0_11410_fu_760;
reg   [4:0] cot_fu_764;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [10:0] indvar_flatten_fu_768;
wire   [10:0] select_ln121_8_fu_899_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten59_fu_772;
wire   [15:0] add_ln120_fu_875_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln121_4_fu_893_p2;
wire   [0:0] icmp_ln122_fu_955_p2;
wire   [0:0] xor_ln120_fu_950_p2;
wire   [4:0] select_ln120_fu_943_p3;
wire   [0:0] and_ln120_fu_961_p2;
wire   [0:0] or_ln121_fu_973_p2;
wire   [4:0] add_ln121_fu_967_p2;
wire   [8:0] tmp_84_fu_1032_p3;
wire   [8:0] zext_ln151_fu_1043_p1;
wire   [8:0] add_ln151_fu_1046_p2;
wire   [2:0] trunc_ln137_fu_1187_p1;
wire   [2:0] trunc_ln151_fu_1301_p1;
wire  signed [2:0] mul_res_fu_1321_p0;
wire  signed [5:0] sext_ln151_1_fu_1309_p1;
wire  signed [2:0] mul_res_fu_1321_p1;
wire  signed [5:0] sext_ln151_fu_1305_p1;
wire   [2:0] trunc_ln137_1_fu_1191_p4;
wire   [2:0] tmp_235_fu_1327_p4;
wire  signed [2:0] mul_res_595_fu_1353_p0;
wire  signed [5:0] sext_ln151_3_fu_1341_p1;
wire  signed [2:0] mul_res_595_fu_1353_p1;
wire  signed [5:0] sext_ln151_2_fu_1337_p1;
wire   [2:0] trunc_ln137_2_fu_1201_p4;
wire   [2:0] tmp_236_fu_1359_p4;
wire  signed [2:0] mul_res_596_fu_1385_p0;
wire  signed [5:0] sext_ln151_5_fu_1373_p1;
wire  signed [2:0] mul_res_596_fu_1385_p1;
wire  signed [5:0] sext_ln151_4_fu_1369_p1;
wire   [2:0] trunc_ln137_3_fu_1211_p4;
wire   [2:0] tmp_237_fu_1391_p4;
wire  signed [2:0] mul_res_597_fu_1417_p0;
wire  signed [5:0] sext_ln151_7_fu_1405_p1;
wire  signed [2:0] mul_res_597_fu_1417_p1;
wire  signed [5:0] sext_ln151_6_fu_1401_p1;
wire   [2:0] trunc_ln137_4_fu_1221_p4;
wire   [2:0] tmp_238_fu_1423_p4;
wire  signed [2:0] mul_res_598_fu_1449_p0;
wire  signed [5:0] sext_ln151_9_fu_1437_p1;
wire  signed [2:0] mul_res_598_fu_1449_p1;
wire  signed [5:0] sext_ln151_8_fu_1433_p1;
wire   [2:0] trunc_ln137_5_fu_1231_p4;
wire   [2:0] tmp_239_fu_1455_p4;
wire  signed [2:0] mul_res_599_fu_1481_p0;
wire  signed [5:0] sext_ln151_11_fu_1469_p1;
wire  signed [2:0] mul_res_599_fu_1481_p1;
wire  signed [5:0] sext_ln151_10_fu_1465_p1;
wire   [2:0] tmp_240_fu_1487_p4;
wire  signed [2:0] mul_res_600_fu_1509_p0;
wire  signed [5:0] sext_ln151_12_fu_1497_p1;
wire  signed [2:0] mul_res_600_fu_1509_p1;
wire   [2:0] tmp_241_fu_1515_p4;
wire  signed [2:0] mul_res_601_fu_1537_p0;
wire  signed [5:0] sext_ln151_13_fu_1525_p1;
wire  signed [2:0] mul_res_601_fu_1537_p1;
wire   [2:0] tmp_242_fu_1543_p4;
wire  signed [2:0] mul_res_602_fu_1565_p0;
wire  signed [5:0] sext_ln151_14_fu_1553_p1;
wire  signed [2:0] mul_res_602_fu_1565_p1;
wire   [2:0] tmp_243_fu_1571_p4;
wire  signed [2:0] mul_res_603_fu_1593_p0;
wire  signed [5:0] sext_ln151_15_fu_1581_p1;
wire  signed [2:0] mul_res_603_fu_1593_p1;
wire   [2:0] tmp_244_fu_1599_p4;
wire  signed [2:0] mul_res_604_fu_1621_p0;
wire  signed [5:0] sext_ln151_16_fu_1609_p1;
wire  signed [2:0] mul_res_604_fu_1621_p1;
wire   [2:0] tmp_245_fu_1627_p4;
wire  signed [2:0] mul_res_605_fu_1649_p0;
wire  signed [5:0] sext_ln151_17_fu_1637_p1;
wire  signed [2:0] mul_res_605_fu_1649_p1;
wire   [2:0] tmp_246_fu_1655_p4;
wire  signed [2:0] mul_res_606_fu_1677_p0;
wire  signed [5:0] sext_ln151_18_fu_1665_p1;
wire  signed [2:0] mul_res_606_fu_1677_p1;
wire   [2:0] tmp_247_fu_1683_p4;
wire  signed [2:0] mul_res_607_fu_1705_p0;
wire  signed [5:0] sext_ln151_19_fu_1693_p1;
wire  signed [2:0] mul_res_607_fu_1705_p1;
wire   [2:0] tmp_248_fu_1711_p4;
wire  signed [2:0] mul_res_608_fu_1733_p0;
wire  signed [5:0] sext_ln151_20_fu_1721_p1;
wire  signed [2:0] mul_res_608_fu_1733_p1;
wire   [2:0] tmp_249_fu_1739_p4;
wire  signed [2:0] mul_res_609_fu_1761_p0;
wire  signed [5:0] sext_ln151_21_fu_1749_p1;
wire  signed [2:0] mul_res_609_fu_1761_p1;
wire   [2:0] tmp_250_fu_1767_p4;
wire  signed [2:0] mul_res_610_fu_1789_p0;
wire  signed [5:0] sext_ln151_22_fu_1777_p1;
wire  signed [2:0] mul_res_610_fu_1789_p1;
wire   [2:0] tmp_251_fu_1795_p4;
wire  signed [2:0] mul_res_611_fu_1817_p0;
wire  signed [5:0] sext_ln151_23_fu_1805_p1;
wire  signed [2:0] mul_res_611_fu_1817_p1;
wire   [2:0] tmp_252_fu_1823_p4;
wire  signed [2:0] mul_res_612_fu_1845_p0;
wire  signed [5:0] sext_ln151_24_fu_1833_p1;
wire  signed [2:0] mul_res_612_fu_1845_p1;
wire   [2:0] tmp_253_fu_1851_p4;
wire  signed [2:0] mul_res_613_fu_1873_p0;
wire  signed [5:0] sext_ln151_25_fu_1861_p1;
wire  signed [2:0] mul_res_613_fu_1873_p1;
wire   [2:0] tmp_254_fu_1879_p4;
wire  signed [2:0] mul_res_614_fu_1901_p0;
wire  signed [5:0] sext_ln151_26_fu_1889_p1;
wire  signed [2:0] mul_res_614_fu_1901_p1;
wire   [2:0] tmp_255_fu_1907_p4;
wire  signed [2:0] mul_res_615_fu_1929_p0;
wire  signed [5:0] sext_ln151_27_fu_1917_p1;
wire  signed [2:0] mul_res_615_fu_1929_p1;
wire   [2:0] tmp_256_fu_1935_p4;
wire  signed [2:0] mul_res_616_fu_1957_p0;
wire  signed [5:0] sext_ln151_28_fu_1945_p1;
wire  signed [2:0] mul_res_616_fu_1957_p1;
wire   [2:0] tmp_257_fu_1963_p4;
wire  signed [2:0] mul_res_617_fu_1985_p0;
wire  signed [5:0] sext_ln151_29_fu_1973_p1;
wire  signed [2:0] mul_res_617_fu_1985_p1;
wire   [2:0] tmp_258_fu_1991_p4;
wire  signed [2:0] mul_res_618_fu_2013_p0;
wire  signed [5:0] sext_ln151_30_fu_2001_p1;
wire  signed [2:0] mul_res_618_fu_2013_p1;
wire   [2:0] tmp_259_fu_2019_p4;
wire  signed [2:0] mul_res_619_fu_2041_p0;
wire  signed [5:0] sext_ln151_31_fu_2029_p1;
wire  signed [2:0] mul_res_619_fu_2041_p1;
wire   [2:0] tmp_260_fu_2047_p4;
wire  signed [2:0] mul_res_620_fu_2069_p0;
wire  signed [5:0] sext_ln151_32_fu_2057_p1;
wire  signed [2:0] mul_res_620_fu_2069_p1;
wire   [2:0] tmp_261_fu_2075_p4;
wire  signed [2:0] mul_res_621_fu_2097_p0;
wire  signed [5:0] sext_ln151_33_fu_2085_p1;
wire  signed [2:0] mul_res_621_fu_2097_p1;
wire   [2:0] tmp_262_fu_2103_p4;
wire  signed [2:0] mul_res_622_fu_2125_p0;
wire  signed [5:0] sext_ln151_34_fu_2113_p1;
wire  signed [2:0] mul_res_622_fu_2125_p1;
wire   [2:0] tmp_263_fu_2131_p4;
wire  signed [2:0] mul_res_623_fu_2153_p0;
wire  signed [5:0] sext_ln151_35_fu_2141_p1;
wire  signed [2:0] mul_res_623_fu_2153_p1;
wire   [2:0] tmp_264_fu_2159_p4;
wire  signed [2:0] mul_res_624_fu_2181_p0;
wire  signed [5:0] sext_ln151_36_fu_2169_p1;
wire  signed [2:0] mul_res_624_fu_2181_p1;
wire   [2:0] tmp_265_fu_2187_p4;
wire  signed [2:0] mul_res_625_fu_2209_p0;
wire  signed [5:0] sext_ln151_37_fu_2197_p1;
wire  signed [2:0] mul_res_625_fu_2209_p1;
wire   [2:0] tmp_266_fu_2215_p4;
wire  signed [2:0] mul_res_626_fu_2237_p0;
wire  signed [5:0] sext_ln151_38_fu_2225_p1;
wire  signed [2:0] mul_res_626_fu_2237_p1;
wire   [2:0] tmp_267_fu_2243_p4;
wire  signed [2:0] mul_res_627_fu_2265_p0;
wire  signed [5:0] sext_ln151_39_fu_2253_p1;
wire  signed [2:0] mul_res_627_fu_2265_p1;
wire   [2:0] tmp_268_fu_2271_p4;
wire  signed [2:0] mul_res_628_fu_2293_p0;
wire  signed [5:0] sext_ln151_40_fu_2281_p1;
wire  signed [2:0] mul_res_628_fu_2293_p1;
wire   [2:0] tmp_269_fu_2299_p4;
wire  signed [2:0] mul_res_629_fu_2321_p0;
wire  signed [5:0] sext_ln151_41_fu_2309_p1;
wire  signed [2:0] mul_res_629_fu_2321_p1;
wire   [2:0] tmp_270_fu_2327_p4;
wire  signed [2:0] mul_res_630_fu_2349_p0;
wire  signed [5:0] sext_ln151_42_fu_2337_p1;
wire  signed [2:0] mul_res_630_fu_2349_p1;
wire   [2:0] tmp_271_fu_2355_p4;
wire  signed [2:0] mul_res_631_fu_2377_p0;
wire  signed [5:0] sext_ln151_43_fu_2365_p1;
wire  signed [2:0] mul_res_631_fu_2377_p1;
wire   [2:0] tmp_272_fu_2383_p4;
wire  signed [2:0] mul_res_632_fu_2405_p0;
wire  signed [5:0] sext_ln151_44_fu_2393_p1;
wire  signed [2:0] mul_res_632_fu_2405_p1;
wire   [2:0] tmp_273_fu_2411_p4;
wire  signed [2:0] mul_res_633_fu_2433_p0;
wire  signed [5:0] sext_ln151_45_fu_2421_p1;
wire  signed [2:0] mul_res_633_fu_2433_p1;
wire   [2:0] tmp_274_fu_2439_p4;
wire  signed [2:0] mul_res_634_fu_2461_p0;
wire  signed [5:0] sext_ln151_46_fu_2449_p1;
wire  signed [2:0] mul_res_634_fu_2461_p1;
wire   [2:0] tmp_275_fu_2467_p4;
wire  signed [2:0] mul_res_635_fu_2489_p0;
wire  signed [5:0] sext_ln151_47_fu_2477_p1;
wire  signed [2:0] mul_res_635_fu_2489_p1;
wire   [2:0] tmp_276_fu_2495_p4;
wire  signed [2:0] mul_res_636_fu_2517_p0;
wire  signed [5:0] sext_ln151_48_fu_2505_p1;
wire  signed [2:0] mul_res_636_fu_2517_p1;
wire   [2:0] tmp_277_fu_2523_p4;
wire  signed [2:0] mul_res_637_fu_2545_p0;
wire  signed [5:0] sext_ln151_49_fu_2533_p1;
wire  signed [2:0] mul_res_637_fu_2545_p1;
wire   [2:0] tmp_278_fu_2551_p4;
wire  signed [2:0] mul_res_638_fu_2573_p0;
wire  signed [5:0] sext_ln151_50_fu_2561_p1;
wire  signed [2:0] mul_res_638_fu_2573_p1;
wire   [2:0] tmp_279_fu_2579_p4;
wire  signed [2:0] mul_res_639_fu_2601_p0;
wire  signed [5:0] sext_ln151_51_fu_2589_p1;
wire  signed [2:0] mul_res_639_fu_2601_p1;
wire   [2:0] tmp_280_fu_2607_p4;
wire  signed [2:0] mul_res_640_fu_2629_p0;
wire  signed [5:0] sext_ln151_52_fu_2617_p1;
wire  signed [2:0] mul_res_640_fu_2629_p1;
wire   [2:0] tmp_281_fu_2635_p4;
wire  signed [2:0] mul_res_641_fu_2657_p0;
wire  signed [5:0] sext_ln151_53_fu_2645_p1;
wire  signed [2:0] mul_res_641_fu_2657_p1;
wire   [2:0] tmp_282_fu_2663_p4;
wire  signed [2:0] mul_res_642_fu_2685_p0;
wire  signed [5:0] sext_ln151_54_fu_2673_p1;
wire  signed [2:0] mul_res_642_fu_2685_p1;
wire   [2:0] tmp_283_fu_2691_p4;
wire  signed [2:0] mul_res_643_fu_2713_p0;
wire  signed [5:0] sext_ln151_55_fu_2701_p1;
wire  signed [2:0] mul_res_643_fu_2713_p1;
wire   [2:0] tmp_284_fu_2719_p4;
wire  signed [2:0] mul_res_644_fu_2741_p0;
wire  signed [5:0] sext_ln151_56_fu_2729_p1;
wire  signed [2:0] mul_res_644_fu_2741_p1;
wire   [2:0] tmp_285_fu_2747_p4;
wire  signed [2:0] mul_res_645_fu_2769_p0;
wire  signed [5:0] sext_ln151_57_fu_2757_p1;
wire  signed [2:0] mul_res_645_fu_2769_p1;
wire   [2:0] tmp_286_fu_2775_p4;
wire  signed [2:0] mul_res_646_fu_2797_p0;
wire  signed [5:0] sext_ln151_58_fu_2785_p1;
wire  signed [2:0] mul_res_646_fu_2797_p1;
wire   [2:0] tmp_287_fu_2803_p4;
wire  signed [2:0] mul_res_647_fu_2825_p0;
wire  signed [5:0] sext_ln151_59_fu_2813_p1;
wire  signed [2:0] mul_res_647_fu_2825_p1;
wire   [2:0] tmp_288_fu_2831_p4;
wire  signed [2:0] mul_res_648_fu_2853_p0;
wire  signed [5:0] sext_ln151_60_fu_2841_p1;
wire  signed [2:0] mul_res_648_fu_2853_p1;
wire   [2:0] tmp_289_fu_2859_p4;
wire  signed [2:0] mul_res_649_fu_2881_p0;
wire  signed [5:0] sext_ln151_61_fu_2869_p1;
wire  signed [2:0] mul_res_649_fu_2881_p1;
wire   [2:0] tmp_290_fu_2887_p4;
wire  signed [2:0] mul_res_650_fu_2909_p0;
wire  signed [5:0] sext_ln151_62_fu_2897_p1;
wire  signed [2:0] mul_res_650_fu_2909_p1;
wire   [2:0] tmp_291_fu_2915_p4;
wire  signed [2:0] mul_res_651_fu_2937_p0;
wire  signed [5:0] sext_ln151_63_fu_2925_p1;
wire  signed [2:0] mul_res_651_fu_2937_p1;
wire   [2:0] tmp_292_fu_2943_p4;
wire  signed [2:0] mul_res_652_fu_2965_p0;
wire  signed [5:0] sext_ln151_64_fu_2953_p1;
wire  signed [2:0] mul_res_652_fu_2965_p1;
wire   [2:0] tmp_293_fu_2971_p4;
wire  signed [2:0] mul_res_653_fu_2993_p0;
wire  signed [5:0] sext_ln151_65_fu_2981_p1;
wire  signed [2:0] mul_res_653_fu_2993_p1;
wire   [2:0] tmp_294_fu_2999_p4;
wire  signed [2:0] mul_res_654_fu_3021_p0;
wire  signed [5:0] sext_ln151_66_fu_3009_p1;
wire  signed [2:0] mul_res_654_fu_3021_p1;
wire   [2:0] tmp_295_fu_3027_p4;
wire  signed [2:0] mul_res_655_fu_3049_p0;
wire  signed [5:0] sext_ln151_67_fu_3037_p1;
wire  signed [2:0] mul_res_655_fu_3049_p1;
wire   [2:0] tmp_296_fu_3055_p4;
wire  signed [2:0] mul_res_656_fu_3077_p0;
wire  signed [5:0] sext_ln151_68_fu_3065_p1;
wire  signed [2:0] mul_res_656_fu_3077_p1;
wire   [2:0] tmp_297_fu_3083_p4;
wire  signed [2:0] mul_res_657_fu_3105_p0;
wire  signed [5:0] sext_ln151_69_fu_3093_p1;
wire  signed [2:0] mul_res_657_fu_3105_p1;
wire   [2:0] tmp_298_fu_3111_p4;
wire  signed [2:0] mul_res_658_fu_3133_p0;
wire  signed [5:0] sext_ln151_70_fu_3121_p1;
wire  signed [2:0] mul_res_658_fu_3133_p1;
wire   [2:0] tmp_299_fu_3139_p4;
wire  signed [2:0] mul_res_659_fu_3161_p0;
wire  signed [5:0] sext_ln151_71_fu_3149_p1;
wire  signed [2:0] mul_res_659_fu_3161_p1;
wire   [2:0] tmp_300_fu_3167_p4;
wire  signed [2:0] mul_res_660_fu_3189_p0;
wire  signed [5:0] sext_ln151_72_fu_3177_p1;
wire  signed [2:0] mul_res_660_fu_3189_p1;
wire   [2:0] tmp_301_fu_3195_p4;
wire  signed [2:0] mul_res_661_fu_3217_p0;
wire  signed [5:0] sext_ln151_73_fu_3205_p1;
wire  signed [2:0] mul_res_661_fu_3217_p1;
wire   [2:0] tmp_302_fu_3223_p4;
wire  signed [2:0] mul_res_662_fu_3245_p0;
wire  signed [5:0] sext_ln151_74_fu_3233_p1;
wire  signed [2:0] mul_res_662_fu_3245_p1;
wire   [2:0] tmp_303_fu_3251_p4;
wire  signed [2:0] mul_res_663_fu_3273_p0;
wire  signed [5:0] sext_ln151_75_fu_3261_p1;
wire  signed [2:0] mul_res_663_fu_3273_p1;
wire   [2:0] tmp_304_fu_3279_p4;
wire  signed [2:0] mul_res_664_fu_3301_p0;
wire  signed [5:0] sext_ln151_76_fu_3289_p1;
wire  signed [2:0] mul_res_664_fu_3301_p1;
wire   [2:0] tmp_305_fu_3307_p4;
wire  signed [2:0] mul_res_665_fu_3329_p0;
wire  signed [5:0] sext_ln151_77_fu_3317_p1;
wire  signed [2:0] mul_res_665_fu_3329_p1;
wire   [2:0] trunc_ln137_6_fu_1241_p4;
wire  signed [2:0] mul_res_666_fu_3347_p0;
wire  signed [2:0] mul_res_666_fu_3347_p1;
wire  signed [5:0] sext_ln151_78_fu_3335_p1;
wire   [2:0] trunc_ln137_7_fu_1251_p4;
wire  signed [2:0] mul_res_667_fu_3365_p0;
wire  signed [2:0] mul_res_667_fu_3365_p1;
wire  signed [5:0] sext_ln151_79_fu_3353_p1;
wire   [2:0] trunc_ln137_8_fu_1261_p4;
wire  signed [2:0] mul_res_668_fu_3383_p0;
wire  signed [2:0] mul_res_668_fu_3383_p1;
wire  signed [5:0] sext_ln151_80_fu_3371_p1;
wire   [2:0] trunc_ln137_9_fu_1271_p4;
wire  signed [2:0] mul_res_669_fu_3401_p0;
wire  signed [2:0] mul_res_669_fu_3401_p1;
wire  signed [5:0] sext_ln151_81_fu_3389_p1;
wire   [2:0] trunc_ln137_10_fu_1281_p4;
wire  signed [2:0] mul_res_670_fu_3419_p0;
wire  signed [2:0] mul_res_670_fu_3419_p1;
wire  signed [5:0] sext_ln151_82_fu_3407_p1;
wire   [2:0] trunc_ln137_11_fu_1291_p4;
wire  signed [2:0] mul_res_671_fu_3437_p0;
wire  signed [2:0] mul_res_671_fu_3437_p1;
wire  signed [5:0] sext_ln151_83_fu_3425_p1;
wire  signed [2:0] mul_res_672_fu_3451_p0;
wire  signed [2:0] mul_res_672_fu_3451_p1;
wire  signed [2:0] mul_res_673_fu_3465_p0;
wire  signed [2:0] mul_res_673_fu_3465_p1;
wire  signed [2:0] mul_res_674_fu_3479_p0;
wire  signed [2:0] mul_res_674_fu_3479_p1;
wire  signed [2:0] mul_res_675_fu_3493_p0;
wire  signed [2:0] mul_res_675_fu_3493_p1;
wire  signed [2:0] mul_res_676_fu_3507_p0;
wire  signed [2:0] mul_res_676_fu_3507_p1;
wire  signed [2:0] mul_res_677_fu_3521_p0;
wire  signed [2:0] mul_res_677_fu_3521_p1;
wire  signed [2:0] mul_res_678_fu_3535_p0;
wire  signed [2:0] mul_res_678_fu_3535_p1;
wire  signed [2:0] mul_res_679_fu_3549_p0;
wire  signed [2:0] mul_res_679_fu_3549_p1;
wire  signed [2:0] mul_res_680_fu_3563_p0;
wire  signed [2:0] mul_res_680_fu_3563_p1;
wire  signed [2:0] mul_res_681_fu_3577_p0;
wire  signed [2:0] mul_res_681_fu_3577_p1;
wire  signed [2:0] mul_res_682_fu_3591_p0;
wire  signed [2:0] mul_res_682_fu_3591_p1;
wire  signed [2:0] mul_res_683_fu_3605_p0;
wire  signed [2:0] mul_res_683_fu_3605_p1;
wire  signed [2:0] mul_res_684_fu_3619_p0;
wire  signed [2:0] mul_res_684_fu_3619_p1;
wire  signed [2:0] mul_res_685_fu_3633_p0;
wire  signed [2:0] mul_res_685_fu_3633_p1;
wire  signed [2:0] mul_res_686_fu_3647_p0;
wire  signed [2:0] mul_res_686_fu_3647_p1;
wire  signed [2:0] mul_res_687_fu_3661_p0;
wire  signed [2:0] mul_res_687_fu_3661_p1;
wire  signed [2:0] mul_res_688_fu_3675_p0;
wire  signed [2:0] mul_res_688_fu_3675_p1;
wire  signed [2:0] mul_res_689_fu_3689_p0;
wire  signed [2:0] mul_res_689_fu_3689_p1;
wire  signed [2:0] mul_res_690_fu_3703_p0;
wire  signed [2:0] mul_res_690_fu_3703_p1;
wire  signed [2:0] mul_res_691_fu_3717_p0;
wire  signed [2:0] mul_res_691_fu_3717_p1;
wire  signed [2:0] mul_res_692_fu_3731_p0;
wire  signed [2:0] mul_res_692_fu_3731_p1;
wire  signed [2:0] mul_res_693_fu_3745_p0;
wire  signed [2:0] mul_res_693_fu_3745_p1;
wire  signed [2:0] mul_res_694_fu_3759_p0;
wire  signed [2:0] mul_res_694_fu_3759_p1;
wire  signed [2:0] mul_res_695_fu_3773_p0;
wire  signed [2:0] mul_res_695_fu_3773_p1;
wire  signed [2:0] mul_res_696_fu_3787_p0;
wire  signed [2:0] mul_res_696_fu_3787_p1;
wire  signed [2:0] mul_res_697_fu_3801_p0;
wire  signed [2:0] mul_res_697_fu_3801_p1;
wire  signed [2:0] mul_res_698_fu_3815_p0;
wire  signed [2:0] mul_res_698_fu_3815_p1;
wire  signed [2:0] mul_res_699_fu_3829_p0;
wire  signed [2:0] mul_res_699_fu_3829_p1;
wire  signed [2:0] mul_res_700_fu_3843_p0;
wire  signed [2:0] mul_res_700_fu_3843_p1;
wire  signed [2:0] mul_res_701_fu_3857_p0;
wire  signed [2:0] mul_res_701_fu_3857_p1;
wire  signed [2:0] mul_res_702_fu_3871_p0;
wire  signed [2:0] mul_res_702_fu_3871_p1;
wire  signed [2:0] mul_res_703_fu_3885_p0;
wire  signed [2:0] mul_res_703_fu_3885_p1;
wire  signed [2:0] mul_res_704_fu_3899_p0;
wire  signed [2:0] mul_res_704_fu_3899_p1;
wire  signed [2:0] mul_res_705_fu_3913_p0;
wire  signed [2:0] mul_res_705_fu_3913_p1;
wire  signed [2:0] mul_res_706_fu_3927_p0;
wire  signed [2:0] mul_res_706_fu_3927_p1;
wire  signed [2:0] mul_res_707_fu_3941_p0;
wire  signed [2:0] mul_res_707_fu_3941_p1;
wire  signed [2:0] mul_res_708_fu_3955_p0;
wire  signed [2:0] mul_res_708_fu_3955_p1;
wire  signed [2:0] mul_res_709_fu_3969_p0;
wire  signed [2:0] mul_res_709_fu_3969_p1;
wire  signed [2:0] mul_res_710_fu_3983_p0;
wire  signed [2:0] mul_res_710_fu_3983_p1;
wire  signed [2:0] mul_res_711_fu_3997_p0;
wire  signed [2:0] mul_res_711_fu_3997_p1;
wire  signed [2:0] mul_res_712_fu_4011_p0;
wire  signed [2:0] mul_res_712_fu_4011_p1;
wire  signed [2:0] mul_res_713_fu_4025_p0;
wire  signed [2:0] mul_res_713_fu_4025_p1;
wire  signed [2:0] mul_res_714_fu_4039_p0;
wire  signed [2:0] mul_res_714_fu_4039_p1;
wire  signed [2:0] mul_res_715_fu_4053_p0;
wire  signed [2:0] mul_res_715_fu_4053_p1;
wire  signed [2:0] mul_res_716_fu_4067_p0;
wire  signed [2:0] mul_res_716_fu_4067_p1;
wire  signed [2:0] mul_res_717_fu_4081_p0;
wire  signed [2:0] mul_res_717_fu_4081_p1;
wire  signed [2:0] mul_res_718_fu_4095_p0;
wire  signed [2:0] mul_res_718_fu_4095_p1;
wire  signed [2:0] mul_res_719_fu_4109_p0;
wire  signed [2:0] mul_res_719_fu_4109_p1;
wire  signed [2:0] mul_res_720_fu_4123_p0;
wire  signed [2:0] mul_res_720_fu_4123_p1;
wire  signed [2:0] mul_res_721_fu_4137_p0;
wire  signed [2:0] mul_res_721_fu_4137_p1;
wire  signed [2:0] mul_res_722_fu_4151_p0;
wire  signed [2:0] mul_res_722_fu_4151_p1;
wire  signed [2:0] mul_res_723_fu_4165_p0;
wire  signed [2:0] mul_res_723_fu_4165_p1;
wire  signed [2:0] mul_res_724_fu_4179_p0;
wire  signed [2:0] mul_res_724_fu_4179_p1;
wire  signed [2:0] mul_res_725_fu_4193_p0;
wire  signed [2:0] mul_res_725_fu_4193_p1;
wire  signed [2:0] mul_res_726_fu_4207_p0;
wire  signed [2:0] mul_res_726_fu_4207_p1;
wire  signed [2:0] mul_res_727_fu_4221_p0;
wire  signed [2:0] mul_res_727_fu_4221_p1;
wire  signed [2:0] mul_res_728_fu_4235_p0;
wire  signed [2:0] mul_res_728_fu_4235_p1;
wire  signed [2:0] mul_res_729_fu_4249_p0;
wire  signed [2:0] mul_res_729_fu_4249_p1;
wire  signed [2:0] mul_res_730_fu_4263_p0;
wire  signed [2:0] mul_res_730_fu_4263_p1;
wire  signed [2:0] mul_res_731_fu_4277_p0;
wire  signed [2:0] mul_res_731_fu_4277_p1;
wire  signed [2:0] mul_res_732_fu_4291_p0;
wire  signed [2:0] mul_res_732_fu_4291_p1;
wire  signed [2:0] mul_res_733_fu_4305_p0;
wire  signed [2:0] mul_res_733_fu_4305_p1;
wire  signed [2:0] mul_res_734_fu_4319_p0;
wire  signed [2:0] mul_res_734_fu_4319_p1;
wire  signed [2:0] mul_res_735_fu_4333_p0;
wire  signed [2:0] mul_res_735_fu_4333_p1;
wire  signed [2:0] mul_res_736_fu_4347_p0;
wire  signed [2:0] mul_res_736_fu_4347_p1;
wire  signed [2:0] mul_res_737_fu_4361_p0;
wire  signed [2:0] mul_res_737_fu_4361_p1;
wire  signed [11:0] sext_ln131_fu_4511_p1;
wire  signed [6:0] sext_ln151_87_fu_4669_p1;
wire  signed [6:0] sext_ln151_88_fu_4672_p1;
wire   [6:0] add_ln153_fu_4678_p2;
wire  signed [6:0] sext_ln151_86_fu_4666_p1;
wire  signed [6:0] sext_ln151_85_fu_4663_p1;
wire   [6:0] add_ln153_2_fu_4688_p2;
wire  signed [6:0] sext_ln151_84_fu_4660_p1;
wire  signed [6:0] sext_ln153_fu_4675_p1;
wire   [6:0] add_ln153_3_fu_4698_p2;
wire  signed [7:0] sext_ln153_3_fu_4704_p1;
wire  signed [7:0] sext_ln153_2_fu_4694_p1;
wire   [7:0] add_ln153_4_fu_4708_p2;
wire  signed [11:0] sext_ln153_4_fu_4714_p1;
wire  signed [11:0] sext_ln153_1_fu_4684_p1;
wire   [11:0] add_ln153_1_fu_4718_p2;
wire   [11:0] select_ln126_23_fu_4654_p3;
wire  signed [6:0] sext_ln151_92_fu_4739_p1;
wire  signed [6:0] sext_ln151_93_fu_4742_p1;
wire   [6:0] add_ln153_6_fu_4748_p2;
wire  signed [6:0] sext_ln151_91_fu_4736_p1;
wire  signed [6:0] sext_ln151_90_fu_4733_p1;
wire   [6:0] add_ln153_8_fu_4758_p2;
wire  signed [6:0] sext_ln151_89_fu_4730_p1;
wire  signed [6:0] sext_ln153_5_fu_4745_p1;
wire   [6:0] add_ln153_9_fu_4768_p2;
wire  signed [7:0] sext_ln153_8_fu_4774_p1;
wire  signed [7:0] sext_ln153_7_fu_4764_p1;
wire   [7:0] add_ln153_10_fu_4778_p2;
wire  signed [11:0] sext_ln153_9_fu_4784_p1;
wire  signed [11:0] sext_ln153_6_fu_4754_p1;
wire   [11:0] add_ln153_7_fu_4788_p2;
wire   [11:0] select_ln126_22_fu_4648_p3;
wire  signed [6:0] sext_ln151_97_fu_4809_p1;
wire  signed [6:0] sext_ln151_98_fu_4812_p1;
wire   [6:0] add_ln153_12_fu_4818_p2;
wire  signed [6:0] sext_ln151_96_fu_4806_p1;
wire  signed [6:0] sext_ln151_95_fu_4803_p1;
wire   [6:0] add_ln153_14_fu_4828_p2;
wire  signed [6:0] sext_ln151_94_fu_4800_p1;
wire  signed [6:0] sext_ln153_10_fu_4815_p1;
wire   [6:0] add_ln153_15_fu_4838_p2;
wire  signed [7:0] sext_ln153_13_fu_4844_p1;
wire  signed [7:0] sext_ln153_12_fu_4834_p1;
wire   [7:0] add_ln153_16_fu_4848_p2;
wire  signed [11:0] sext_ln153_14_fu_4854_p1;
wire  signed [11:0] sext_ln153_11_fu_4824_p1;
wire   [11:0] add_ln153_13_fu_4858_p2;
wire   [11:0] select_ln126_21_fu_4642_p3;
wire  signed [6:0] sext_ln151_102_fu_4879_p1;
wire  signed [6:0] sext_ln151_103_fu_4882_p1;
wire   [6:0] add_ln153_18_fu_4888_p2;
wire  signed [6:0] sext_ln151_101_fu_4876_p1;
wire  signed [6:0] sext_ln151_100_fu_4873_p1;
wire   [6:0] add_ln153_20_fu_4898_p2;
wire  signed [6:0] sext_ln151_99_fu_4870_p1;
wire  signed [6:0] sext_ln153_15_fu_4885_p1;
wire   [6:0] add_ln153_21_fu_4908_p2;
wire  signed [7:0] sext_ln153_18_fu_4914_p1;
wire  signed [7:0] sext_ln153_17_fu_4904_p1;
wire   [7:0] add_ln153_22_fu_4918_p2;
wire  signed [11:0] sext_ln153_19_fu_4924_p1;
wire  signed [11:0] sext_ln153_16_fu_4894_p1;
wire   [11:0] add_ln153_19_fu_4928_p2;
wire   [11:0] select_ln126_20_fu_4636_p3;
wire  signed [6:0] sext_ln151_107_fu_4949_p1;
wire  signed [6:0] sext_ln151_108_fu_4952_p1;
wire   [6:0] add_ln153_24_fu_4958_p2;
wire  signed [6:0] sext_ln151_106_fu_4946_p1;
wire  signed [6:0] sext_ln151_105_fu_4943_p1;
wire   [6:0] add_ln153_26_fu_4968_p2;
wire  signed [6:0] sext_ln151_104_fu_4940_p1;
wire  signed [6:0] sext_ln153_20_fu_4955_p1;
wire   [6:0] add_ln153_27_fu_4978_p2;
wire  signed [7:0] sext_ln153_23_fu_4984_p1;
wire  signed [7:0] sext_ln153_22_fu_4974_p1;
wire   [7:0] add_ln153_28_fu_4988_p2;
wire  signed [11:0] sext_ln153_24_fu_4994_p1;
wire  signed [11:0] sext_ln153_21_fu_4964_p1;
wire   [11:0] add_ln153_25_fu_4998_p2;
wire   [11:0] select_ln126_19_fu_4630_p3;
wire  signed [6:0] sext_ln151_112_fu_5019_p1;
wire  signed [6:0] sext_ln151_113_fu_5022_p1;
wire   [6:0] add_ln153_30_fu_5028_p2;
wire  signed [6:0] sext_ln151_111_fu_5016_p1;
wire  signed [6:0] sext_ln151_110_fu_5013_p1;
wire   [6:0] add_ln153_32_fu_5038_p2;
wire  signed [6:0] sext_ln151_109_fu_5010_p1;
wire  signed [6:0] sext_ln153_25_fu_5025_p1;
wire   [6:0] add_ln153_33_fu_5048_p2;
wire  signed [7:0] sext_ln153_28_fu_5054_p1;
wire  signed [7:0] sext_ln153_27_fu_5044_p1;
wire   [7:0] add_ln153_34_fu_5058_p2;
wire  signed [11:0] sext_ln153_29_fu_5064_p1;
wire  signed [11:0] sext_ln153_26_fu_5034_p1;
wire   [11:0] add_ln153_31_fu_5068_p2;
wire   [11:0] select_ln126_18_fu_4624_p3;
wire  signed [6:0] sext_ln151_117_fu_5089_p1;
wire  signed [6:0] sext_ln151_118_fu_5092_p1;
wire   [6:0] add_ln153_36_fu_5098_p2;
wire  signed [6:0] sext_ln151_116_fu_5086_p1;
wire  signed [6:0] sext_ln151_115_fu_5083_p1;
wire   [6:0] add_ln153_38_fu_5108_p2;
wire  signed [6:0] sext_ln151_114_fu_5080_p1;
wire  signed [6:0] sext_ln153_30_fu_5095_p1;
wire   [6:0] add_ln153_39_fu_5118_p2;
wire  signed [7:0] sext_ln153_33_fu_5124_p1;
wire  signed [7:0] sext_ln153_32_fu_5114_p1;
wire   [7:0] add_ln153_40_fu_5128_p2;
wire  signed [11:0] sext_ln153_34_fu_5134_p1;
wire  signed [11:0] sext_ln153_31_fu_5104_p1;
wire   [11:0] add_ln153_37_fu_5138_p2;
wire   [11:0] select_ln126_17_fu_4618_p3;
wire  signed [6:0] sext_ln151_122_fu_5159_p1;
wire  signed [6:0] sext_ln151_123_fu_5162_p1;
wire   [6:0] add_ln153_42_fu_5168_p2;
wire  signed [6:0] sext_ln151_121_fu_5156_p1;
wire  signed [6:0] sext_ln151_120_fu_5153_p1;
wire   [6:0] add_ln153_44_fu_5178_p2;
wire  signed [6:0] sext_ln151_119_fu_5150_p1;
wire  signed [6:0] sext_ln153_35_fu_5165_p1;
wire   [6:0] add_ln153_45_fu_5188_p2;
wire  signed [7:0] sext_ln153_38_fu_5194_p1;
wire  signed [7:0] sext_ln153_37_fu_5184_p1;
wire   [7:0] add_ln153_46_fu_5198_p2;
wire  signed [11:0] sext_ln153_39_fu_5204_p1;
wire  signed [11:0] sext_ln153_36_fu_5174_p1;
wire   [11:0] add_ln153_43_fu_5208_p2;
wire   [11:0] select_ln126_16_fu_4612_p3;
wire  signed [6:0] sext_ln151_127_fu_5229_p1;
wire  signed [6:0] sext_ln151_128_fu_5232_p1;
wire   [6:0] add_ln153_48_fu_5238_p2;
wire  signed [6:0] sext_ln151_126_fu_5226_p1;
wire  signed [6:0] sext_ln151_125_fu_5223_p1;
wire   [6:0] add_ln153_50_fu_5248_p2;
wire  signed [6:0] sext_ln151_124_fu_5220_p1;
wire  signed [6:0] sext_ln153_40_fu_5235_p1;
wire   [6:0] add_ln153_51_fu_5258_p2;
wire  signed [7:0] sext_ln153_43_fu_5264_p1;
wire  signed [7:0] sext_ln153_42_fu_5254_p1;
wire   [7:0] add_ln153_52_fu_5268_p2;
wire  signed [11:0] sext_ln153_44_fu_5274_p1;
wire  signed [11:0] sext_ln153_41_fu_5244_p1;
wire   [11:0] add_ln153_49_fu_5278_p2;
wire   [11:0] select_ln126_15_fu_4606_p3;
wire  signed [6:0] sext_ln151_132_fu_5299_p1;
wire  signed [6:0] sext_ln151_133_fu_5302_p1;
wire   [6:0] add_ln153_54_fu_5308_p2;
wire  signed [6:0] sext_ln151_131_fu_5296_p1;
wire  signed [6:0] sext_ln151_130_fu_5293_p1;
wire   [6:0] add_ln153_56_fu_5318_p2;
wire  signed [6:0] sext_ln151_129_fu_5290_p1;
wire  signed [6:0] sext_ln153_45_fu_5305_p1;
wire   [6:0] add_ln153_57_fu_5328_p2;
wire  signed [7:0] sext_ln153_48_fu_5334_p1;
wire  signed [7:0] sext_ln153_47_fu_5324_p1;
wire   [7:0] add_ln153_58_fu_5338_p2;
wire  signed [11:0] sext_ln153_49_fu_5344_p1;
wire  signed [11:0] sext_ln153_46_fu_5314_p1;
wire   [11:0] add_ln153_55_fu_5348_p2;
wire   [11:0] select_ln126_14_fu_4600_p3;
wire  signed [6:0] sext_ln151_137_fu_5369_p1;
wire  signed [6:0] sext_ln151_138_fu_5372_p1;
wire   [6:0] add_ln153_60_fu_5378_p2;
wire  signed [11:0] sext_ln153_51_fu_5384_p1;
wire   [11:0] select_ln126_13_fu_4594_p3;
wire  signed [6:0] sext_ln151_136_fu_5366_p1;
wire  signed [6:0] sext_ln151_135_fu_5363_p1;
wire   [6:0] add_ln153_62_fu_5394_p2;
wire  signed [6:0] sext_ln151_134_fu_5360_p1;
wire  signed [6:0] sext_ln153_50_fu_5375_p1;
wire   [6:0] add_ln153_63_fu_5404_p2;
wire  signed [7:0] sext_ln153_53_fu_5410_p1;
wire  signed [7:0] sext_ln153_52_fu_5400_p1;
wire   [7:0] add_ln153_64_fu_5414_p2;
wire  signed [11:0] sext_ln153_54_fu_5420_p1;
wire   [11:0] add_ln153_61_fu_5388_p2;
wire  signed [6:0] sext_ln151_142_fu_5439_p1;
wire  signed [6:0] sext_ln151_143_fu_5442_p1;
wire   [6:0] add_ln153_66_fu_5448_p2;
wire  signed [11:0] sext_ln153_56_fu_5454_p1;
wire   [11:0] select_ln126_12_fu_4587_p3;
wire  signed [6:0] sext_ln151_141_fu_5436_p1;
wire  signed [6:0] sext_ln151_140_fu_5433_p1;
wire   [6:0] add_ln153_68_fu_5464_p2;
wire  signed [6:0] sext_ln151_139_fu_5430_p1;
wire  signed [6:0] sext_ln153_55_fu_5445_p1;
wire   [6:0] add_ln153_69_fu_5474_p2;
wire  signed [7:0] sext_ln153_58_fu_5480_p1;
wire  signed [7:0] sext_ln153_57_fu_5470_p1;
wire   [7:0] add_ln153_70_fu_5484_p2;
wire  signed [11:0] sext_ln153_59_fu_5490_p1;
wire   [11:0] add_ln153_67_fu_5458_p2;
wire  signed [6:0] sext_ln151_147_fu_5509_p1;
wire  signed [6:0] sext_ln151_148_fu_5512_p1;
wire   [6:0] add_ln153_72_fu_5518_p2;
wire  signed [11:0] sext_ln153_61_fu_5524_p1;
wire   [11:0] select_ln126_11_fu_4581_p3;
wire  signed [6:0] sext_ln151_146_fu_5506_p1;
wire  signed [6:0] sext_ln151_145_fu_5503_p1;
wire   [6:0] add_ln153_74_fu_5534_p2;
wire  signed [6:0] sext_ln151_144_fu_5500_p1;
wire  signed [6:0] sext_ln153_60_fu_5515_p1;
wire   [6:0] add_ln153_75_fu_5544_p2;
wire  signed [7:0] sext_ln153_63_fu_5550_p1;
wire  signed [7:0] sext_ln153_62_fu_5540_p1;
wire   [7:0] add_ln153_76_fu_5554_p2;
wire  signed [11:0] sext_ln153_64_fu_5560_p1;
wire   [11:0] add_ln153_73_fu_5528_p2;
wire  signed [6:0] sext_ln151_152_fu_5579_p1;
wire  signed [6:0] sext_ln151_153_fu_5582_p1;
wire   [6:0] add_ln153_78_fu_5588_p2;
wire  signed [11:0] sext_ln153_66_fu_5594_p1;
wire   [11:0] select_ln126_10_fu_4575_p3;
wire  signed [6:0] sext_ln151_151_fu_5576_p1;
wire  signed [6:0] sext_ln151_150_fu_5573_p1;
wire   [6:0] add_ln153_80_fu_5604_p2;
wire  signed [6:0] sext_ln151_149_fu_5570_p1;
wire  signed [6:0] sext_ln153_65_fu_5585_p1;
wire   [6:0] add_ln153_81_fu_5614_p2;
wire  signed [7:0] sext_ln153_68_fu_5620_p1;
wire  signed [7:0] sext_ln153_67_fu_5610_p1;
wire   [7:0] add_ln153_82_fu_5624_p2;
wire  signed [11:0] sext_ln153_69_fu_5630_p1;
wire   [11:0] add_ln153_79_fu_5598_p2;
wire  signed [6:0] sext_ln151_157_fu_5649_p1;
wire  signed [6:0] sext_ln151_158_fu_5652_p1;
wire   [6:0] add_ln153_84_fu_5658_p2;
wire  signed [11:0] sext_ln153_71_fu_5664_p1;
wire   [11:0] select_ln126_9_fu_4569_p3;
wire  signed [6:0] sext_ln151_156_fu_5646_p1;
wire  signed [6:0] sext_ln151_155_fu_5643_p1;
wire   [6:0] add_ln153_86_fu_5674_p2;
wire  signed [6:0] sext_ln151_154_fu_5640_p1;
wire  signed [6:0] sext_ln153_70_fu_5655_p1;
wire   [6:0] add_ln153_87_fu_5684_p2;
wire  signed [7:0] sext_ln153_73_fu_5690_p1;
wire  signed [7:0] sext_ln153_72_fu_5680_p1;
wire   [7:0] add_ln153_88_fu_5694_p2;
wire  signed [11:0] sext_ln153_74_fu_5700_p1;
wire   [11:0] add_ln153_85_fu_5668_p2;
wire  signed [6:0] sext_ln151_162_fu_5719_p1;
wire  signed [6:0] sext_ln151_163_fu_5722_p1;
wire   [6:0] add_ln153_90_fu_5728_p2;
wire  signed [11:0] sext_ln153_76_fu_5734_p1;
wire   [11:0] select_ln126_8_fu_4563_p3;
wire  signed [6:0] sext_ln151_161_fu_5716_p1;
wire  signed [6:0] sext_ln151_160_fu_5713_p1;
wire   [6:0] add_ln153_92_fu_5744_p2;
wire  signed [6:0] sext_ln151_159_fu_5710_p1;
wire  signed [6:0] sext_ln153_75_fu_5725_p1;
wire   [6:0] add_ln153_93_fu_5754_p2;
wire  signed [7:0] sext_ln153_78_fu_5760_p1;
wire  signed [7:0] sext_ln153_77_fu_5750_p1;
wire   [7:0] add_ln153_94_fu_5764_p2;
wire  signed [11:0] sext_ln153_79_fu_5770_p1;
wire   [11:0] add_ln153_91_fu_5738_p2;
wire  signed [6:0] sext_ln151_167_fu_5789_p1;
wire  signed [6:0] sext_ln151_168_fu_5792_p1;
wire   [6:0] add_ln153_96_fu_5798_p2;
wire  signed [11:0] sext_ln153_81_fu_5804_p1;
wire   [11:0] select_ln126_7_fu_4557_p3;
wire  signed [6:0] sext_ln151_166_fu_5786_p1;
wire  signed [6:0] sext_ln151_165_fu_5783_p1;
wire   [6:0] add_ln153_98_fu_5814_p2;
wire  signed [6:0] sext_ln151_164_fu_5780_p1;
wire  signed [6:0] sext_ln153_80_fu_5795_p1;
wire   [6:0] add_ln153_99_fu_5824_p2;
wire  signed [7:0] sext_ln153_83_fu_5830_p1;
wire  signed [7:0] sext_ln153_82_fu_5820_p1;
wire   [7:0] add_ln153_100_fu_5834_p2;
wire  signed [11:0] sext_ln153_84_fu_5840_p1;
wire   [11:0] add_ln153_97_fu_5808_p2;
wire  signed [6:0] sext_ln151_172_fu_5859_p1;
wire  signed [6:0] sext_ln151_173_fu_5862_p1;
wire   [6:0] add_ln153_102_fu_5868_p2;
wire  signed [11:0] sext_ln153_86_fu_5874_p1;
wire   [11:0] select_ln126_6_fu_4551_p3;
wire  signed [6:0] sext_ln151_171_fu_5856_p1;
wire  signed [6:0] sext_ln151_170_fu_5853_p1;
wire   [6:0] add_ln153_104_fu_5884_p2;
wire  signed [6:0] sext_ln151_169_fu_5850_p1;
wire  signed [6:0] sext_ln153_85_fu_5865_p1;
wire   [6:0] add_ln153_105_fu_5894_p2;
wire  signed [7:0] sext_ln153_88_fu_5900_p1;
wire  signed [7:0] sext_ln153_87_fu_5890_p1;
wire   [7:0] add_ln153_106_fu_5904_p2;
wire  signed [11:0] sext_ln153_89_fu_5910_p1;
wire   [11:0] add_ln153_103_fu_5878_p2;
wire  signed [6:0] sext_ln151_177_fu_5929_p1;
wire  signed [6:0] sext_ln151_178_fu_5932_p1;
wire   [6:0] add_ln153_108_fu_5938_p2;
wire  signed [11:0] sext_ln153_91_fu_5944_p1;
wire   [11:0] select_ln126_5_fu_4545_p3;
wire  signed [6:0] sext_ln151_176_fu_5926_p1;
wire  signed [6:0] sext_ln151_175_fu_5923_p1;
wire   [6:0] add_ln153_110_fu_5954_p2;
wire  signed [6:0] sext_ln151_174_fu_5920_p1;
wire  signed [6:0] sext_ln153_90_fu_5935_p1;
wire   [6:0] add_ln153_111_fu_5964_p2;
wire  signed [7:0] sext_ln153_93_fu_5970_p1;
wire  signed [7:0] sext_ln153_92_fu_5960_p1;
wire   [7:0] add_ln153_112_fu_5974_p2;
wire  signed [11:0] sext_ln153_94_fu_5980_p1;
wire   [11:0] add_ln153_109_fu_5948_p2;
wire  signed [6:0] sext_ln151_182_fu_5999_p1;
wire  signed [6:0] sext_ln151_183_fu_6002_p1;
wire   [6:0] add_ln153_114_fu_6008_p2;
wire  signed [11:0] sext_ln153_96_fu_6014_p1;
wire   [11:0] select_ln126_4_fu_4539_p3;
wire  signed [6:0] sext_ln151_181_fu_5996_p1;
wire  signed [6:0] sext_ln151_180_fu_5993_p1;
wire   [6:0] add_ln153_116_fu_6024_p2;
wire  signed [6:0] sext_ln151_179_fu_5990_p1;
wire  signed [6:0] sext_ln153_95_fu_6005_p1;
wire   [6:0] add_ln153_117_fu_6034_p2;
wire  signed [7:0] sext_ln153_98_fu_6040_p1;
wire  signed [7:0] sext_ln153_97_fu_6030_p1;
wire   [7:0] add_ln153_118_fu_6044_p2;
wire  signed [11:0] sext_ln153_99_fu_6050_p1;
wire   [11:0] add_ln153_115_fu_6018_p2;
wire  signed [6:0] sext_ln151_187_fu_6069_p1;
wire  signed [6:0] sext_ln151_188_fu_6072_p1;
wire   [6:0] add_ln153_120_fu_6078_p2;
wire  signed [11:0] sext_ln153_101_fu_6084_p1;
wire   [11:0] select_ln126_3_fu_4533_p3;
wire  signed [6:0] sext_ln151_186_fu_6066_p1;
wire  signed [6:0] sext_ln151_185_fu_6063_p1;
wire   [6:0] add_ln153_122_fu_6094_p2;
wire  signed [6:0] sext_ln151_184_fu_6060_p1;
wire  signed [6:0] sext_ln153_100_fu_6075_p1;
wire   [6:0] add_ln153_123_fu_6104_p2;
wire  signed [7:0] sext_ln153_103_fu_6110_p1;
wire  signed [7:0] sext_ln153_102_fu_6100_p1;
wire   [7:0] add_ln153_124_fu_6114_p2;
wire  signed [11:0] sext_ln153_104_fu_6120_p1;
wire   [11:0] add_ln153_121_fu_6088_p2;
wire  signed [6:0] sext_ln151_192_fu_6139_p1;
wire  signed [6:0] sext_ln151_193_fu_6142_p1;
wire   [6:0] add_ln153_126_fu_6148_p2;
wire  signed [11:0] sext_ln153_106_fu_6154_p1;
wire   [11:0] select_ln126_2_fu_4527_p3;
wire  signed [6:0] sext_ln151_191_fu_6136_p1;
wire  signed [6:0] sext_ln151_190_fu_6133_p1;
wire   [6:0] add_ln153_128_fu_6164_p2;
wire  signed [6:0] sext_ln151_189_fu_6130_p1;
wire  signed [6:0] sext_ln153_105_fu_6145_p1;
wire   [6:0] add_ln153_129_fu_6174_p2;
wire  signed [7:0] sext_ln153_108_fu_6180_p1;
wire  signed [7:0] sext_ln153_107_fu_6170_p1;
wire   [7:0] add_ln153_130_fu_6184_p2;
wire  signed [11:0] sext_ln153_109_fu_6190_p1;
wire   [11:0] add_ln153_127_fu_6158_p2;
wire  signed [6:0] sext_ln151_197_fu_6209_p1;
wire  signed [6:0] sext_ln151_198_fu_6212_p1;
wire   [6:0] add_ln153_132_fu_6218_p2;
wire  signed [11:0] sext_ln153_111_fu_6224_p1;
wire   [11:0] select_ln126_1_fu_4521_p3;
wire  signed [6:0] sext_ln151_196_fu_6206_p1;
wire  signed [6:0] sext_ln151_195_fu_6203_p1;
wire   [6:0] add_ln153_134_fu_6234_p2;
wire  signed [6:0] sext_ln151_194_fu_6200_p1;
wire  signed [6:0] sext_ln153_110_fu_6215_p1;
wire   [6:0] add_ln153_135_fu_6244_p2;
wire  signed [7:0] sext_ln153_113_fu_6250_p1;
wire  signed [7:0] sext_ln153_112_fu_6240_p1;
wire   [7:0] add_ln153_136_fu_6254_p2;
wire  signed [11:0] sext_ln153_114_fu_6260_p1;
wire   [11:0] add_ln153_133_fu_6228_p2;
wire  signed [6:0] sext_ln151_202_fu_6279_p1;
wire  signed [6:0] sext_ln151_203_fu_6282_p1;
wire   [6:0] add_ln153_138_fu_6288_p2;
wire  signed [11:0] sext_ln153_116_fu_6294_p1;
wire   [11:0] select_ln126_fu_4514_p3;
wire  signed [6:0] sext_ln151_201_fu_6276_p1;
wire  signed [6:0] sext_ln151_200_fu_6273_p1;
wire   [6:0] add_ln153_140_fu_6304_p2;
wire  signed [6:0] sext_ln151_199_fu_6270_p1;
wire  signed [6:0] sext_ln153_115_fu_6285_p1;
wire   [6:0] add_ln153_141_fu_6314_p2;
wire  signed [7:0] sext_ln153_118_fu_6320_p1;
wire  signed [7:0] sext_ln153_117_fu_6310_p1;
wire   [7:0] add_ln153_142_fu_6324_p2;
wire  signed [11:0] sext_ln153_119_fu_6330_p1;
wire   [11:0] add_ln153_139_fu_6298_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_652;
reg    ap_condition_749;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_664 = 6'd0;
//#0 p_0_0_0364_fu_668 = 12'd0;
//#0 p_0_0_0_112366_fu_672 = 12'd0;
//#0 p_0_0_0_2368_fu_676 = 12'd0;
//#0 p_0_0_0_3370_fu_680 = 12'd0;
//#0 p_0_0_0_4372_fu_684 = 12'd0;
//#0 p_0_0_0_5374_fu_688 = 12'd0;
//#0 p_0_0_0_6376_fu_692 = 12'd0;
//#0 p_0_0_0_7378_fu_696 = 12'd0;
//#0 p_0_0_0_8380_fu_700 = 12'd0;
//#0 p_0_0_0_9382_fu_704 = 12'd0;
//#0 p_0_0_0_10384_fu_708 = 12'd0;
//#0 p_0_0_0_11386_fu_712 = 12'd0;
//#0 p_0_0_0388_fu_716 = 12'd0;
//#0 p_0_0_0_112390_fu_720 = 12'd0;
//#0 p_0_0_0_2392_fu_724 = 12'd0;
//#0 p_0_0_0_3394_fu_728 = 12'd0;
//#0 p_0_0_0_4396_fu_732 = 12'd0;
//#0 p_0_0_0_5398_fu_736 = 12'd0;
//#0 p_0_0_0_6400_fu_740 = 12'd0;
//#0 p_0_0_0_7402_fu_744 = 12'd0;
//#0 p_0_0_0_8404_fu_748 = 12'd0;
//#0 p_0_0_0_9406_fu_752 = 12'd0;
//#0 p_0_0_0_10408_fu_756 = 12'd0;
//#0 p_0_0_0_11410_fu_760 = 12'd0;
//#0 cot_fu_764 = 5'd0;
//#0 indvar_flatten_fu_768 = 11'd0;
//#0 indvar_flatten59_fu_772 = 16'd0;
end

ATTN11_matmul_step2_mac_2_attn_inst_matmul_gen_q_bias_arr_657_ROM_AUTO_1R #(
    .DataWidth( 141 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
attn_inst_matmul_gen_q_bias_arr_657_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_q_bias_arr_657_address0),
    .ce0(attn_inst_matmul_gen_q_bias_arr_657_ce0),
    .q0(attn_inst_matmul_gen_q_bias_arr_657_q0)
);

ATTN11_matmul_step2_mac_2_attn_inst_matmul_gen_q_weight_arr_656_ROM_AUTO_1R #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_q_weight_arr_656_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_q_weight_arr_656_address0),
    .ce0(attn_inst_matmul_gen_q_weight_arr_656_ce0),
    .q0(attn_inst_matmul_gen_q_weight_arr_656_q0)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U36(
    .din0(mul_res_fu_1321_p0),
    .din1(mul_res_fu_1321_p1),
    .dout(mul_res_fu_1321_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U37(
    .din0(mul_res_595_fu_1353_p0),
    .din1(mul_res_595_fu_1353_p1),
    .dout(mul_res_595_fu_1353_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U38(
    .din0(mul_res_596_fu_1385_p0),
    .din1(mul_res_596_fu_1385_p1),
    .dout(mul_res_596_fu_1385_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U39(
    .din0(mul_res_597_fu_1417_p0),
    .din1(mul_res_597_fu_1417_p1),
    .dout(mul_res_597_fu_1417_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U40(
    .din0(mul_res_598_fu_1449_p0),
    .din1(mul_res_598_fu_1449_p1),
    .dout(mul_res_598_fu_1449_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U41(
    .din0(mul_res_599_fu_1481_p0),
    .din1(mul_res_599_fu_1481_p1),
    .dout(mul_res_599_fu_1481_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U42(
    .din0(mul_res_600_fu_1509_p0),
    .din1(mul_res_600_fu_1509_p1),
    .dout(mul_res_600_fu_1509_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U43(
    .din0(mul_res_601_fu_1537_p0),
    .din1(mul_res_601_fu_1537_p1),
    .dout(mul_res_601_fu_1537_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U44(
    .din0(mul_res_602_fu_1565_p0),
    .din1(mul_res_602_fu_1565_p1),
    .dout(mul_res_602_fu_1565_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U45(
    .din0(mul_res_603_fu_1593_p0),
    .din1(mul_res_603_fu_1593_p1),
    .dout(mul_res_603_fu_1593_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U46(
    .din0(mul_res_604_fu_1621_p0),
    .din1(mul_res_604_fu_1621_p1),
    .dout(mul_res_604_fu_1621_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U47(
    .din0(mul_res_605_fu_1649_p0),
    .din1(mul_res_605_fu_1649_p1),
    .dout(mul_res_605_fu_1649_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U48(
    .din0(mul_res_606_fu_1677_p0),
    .din1(mul_res_606_fu_1677_p1),
    .dout(mul_res_606_fu_1677_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U49(
    .din0(mul_res_607_fu_1705_p0),
    .din1(mul_res_607_fu_1705_p1),
    .dout(mul_res_607_fu_1705_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U50(
    .din0(mul_res_608_fu_1733_p0),
    .din1(mul_res_608_fu_1733_p1),
    .dout(mul_res_608_fu_1733_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U51(
    .din0(mul_res_609_fu_1761_p0),
    .din1(mul_res_609_fu_1761_p1),
    .dout(mul_res_609_fu_1761_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U52(
    .din0(mul_res_610_fu_1789_p0),
    .din1(mul_res_610_fu_1789_p1),
    .dout(mul_res_610_fu_1789_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U53(
    .din0(mul_res_611_fu_1817_p0),
    .din1(mul_res_611_fu_1817_p1),
    .dout(mul_res_611_fu_1817_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U54(
    .din0(mul_res_612_fu_1845_p0),
    .din1(mul_res_612_fu_1845_p1),
    .dout(mul_res_612_fu_1845_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U55(
    .din0(mul_res_613_fu_1873_p0),
    .din1(mul_res_613_fu_1873_p1),
    .dout(mul_res_613_fu_1873_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U56(
    .din0(mul_res_614_fu_1901_p0),
    .din1(mul_res_614_fu_1901_p1),
    .dout(mul_res_614_fu_1901_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U57(
    .din0(mul_res_615_fu_1929_p0),
    .din1(mul_res_615_fu_1929_p1),
    .dout(mul_res_615_fu_1929_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U58(
    .din0(mul_res_616_fu_1957_p0),
    .din1(mul_res_616_fu_1957_p1),
    .dout(mul_res_616_fu_1957_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U59(
    .din0(mul_res_617_fu_1985_p0),
    .din1(mul_res_617_fu_1985_p1),
    .dout(mul_res_617_fu_1985_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U60(
    .din0(mul_res_618_fu_2013_p0),
    .din1(mul_res_618_fu_2013_p1),
    .dout(mul_res_618_fu_2013_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U61(
    .din0(mul_res_619_fu_2041_p0),
    .din1(mul_res_619_fu_2041_p1),
    .dout(mul_res_619_fu_2041_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U62(
    .din0(mul_res_620_fu_2069_p0),
    .din1(mul_res_620_fu_2069_p1),
    .dout(mul_res_620_fu_2069_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U63(
    .din0(mul_res_621_fu_2097_p0),
    .din1(mul_res_621_fu_2097_p1),
    .dout(mul_res_621_fu_2097_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U64(
    .din0(mul_res_622_fu_2125_p0),
    .din1(mul_res_622_fu_2125_p1),
    .dout(mul_res_622_fu_2125_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U65(
    .din0(mul_res_623_fu_2153_p0),
    .din1(mul_res_623_fu_2153_p1),
    .dout(mul_res_623_fu_2153_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U66(
    .din0(mul_res_624_fu_2181_p0),
    .din1(mul_res_624_fu_2181_p1),
    .dout(mul_res_624_fu_2181_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U67(
    .din0(mul_res_625_fu_2209_p0),
    .din1(mul_res_625_fu_2209_p1),
    .dout(mul_res_625_fu_2209_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U68(
    .din0(mul_res_626_fu_2237_p0),
    .din1(mul_res_626_fu_2237_p1),
    .dout(mul_res_626_fu_2237_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U69(
    .din0(mul_res_627_fu_2265_p0),
    .din1(mul_res_627_fu_2265_p1),
    .dout(mul_res_627_fu_2265_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U70(
    .din0(mul_res_628_fu_2293_p0),
    .din1(mul_res_628_fu_2293_p1),
    .dout(mul_res_628_fu_2293_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U71(
    .din0(mul_res_629_fu_2321_p0),
    .din1(mul_res_629_fu_2321_p1),
    .dout(mul_res_629_fu_2321_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U72(
    .din0(mul_res_630_fu_2349_p0),
    .din1(mul_res_630_fu_2349_p1),
    .dout(mul_res_630_fu_2349_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U73(
    .din0(mul_res_631_fu_2377_p0),
    .din1(mul_res_631_fu_2377_p1),
    .dout(mul_res_631_fu_2377_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U74(
    .din0(mul_res_632_fu_2405_p0),
    .din1(mul_res_632_fu_2405_p1),
    .dout(mul_res_632_fu_2405_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U75(
    .din0(mul_res_633_fu_2433_p0),
    .din1(mul_res_633_fu_2433_p1),
    .dout(mul_res_633_fu_2433_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U76(
    .din0(mul_res_634_fu_2461_p0),
    .din1(mul_res_634_fu_2461_p1),
    .dout(mul_res_634_fu_2461_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U77(
    .din0(mul_res_635_fu_2489_p0),
    .din1(mul_res_635_fu_2489_p1),
    .dout(mul_res_635_fu_2489_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U78(
    .din0(mul_res_636_fu_2517_p0),
    .din1(mul_res_636_fu_2517_p1),
    .dout(mul_res_636_fu_2517_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U79(
    .din0(mul_res_637_fu_2545_p0),
    .din1(mul_res_637_fu_2545_p1),
    .dout(mul_res_637_fu_2545_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U80(
    .din0(mul_res_638_fu_2573_p0),
    .din1(mul_res_638_fu_2573_p1),
    .dout(mul_res_638_fu_2573_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U81(
    .din0(mul_res_639_fu_2601_p0),
    .din1(mul_res_639_fu_2601_p1),
    .dout(mul_res_639_fu_2601_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U82(
    .din0(mul_res_640_fu_2629_p0),
    .din1(mul_res_640_fu_2629_p1),
    .dout(mul_res_640_fu_2629_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U83(
    .din0(mul_res_641_fu_2657_p0),
    .din1(mul_res_641_fu_2657_p1),
    .dout(mul_res_641_fu_2657_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U84(
    .din0(mul_res_642_fu_2685_p0),
    .din1(mul_res_642_fu_2685_p1),
    .dout(mul_res_642_fu_2685_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U85(
    .din0(mul_res_643_fu_2713_p0),
    .din1(mul_res_643_fu_2713_p1),
    .dout(mul_res_643_fu_2713_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U86(
    .din0(mul_res_644_fu_2741_p0),
    .din1(mul_res_644_fu_2741_p1),
    .dout(mul_res_644_fu_2741_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U87(
    .din0(mul_res_645_fu_2769_p0),
    .din1(mul_res_645_fu_2769_p1),
    .dout(mul_res_645_fu_2769_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U88(
    .din0(mul_res_646_fu_2797_p0),
    .din1(mul_res_646_fu_2797_p1),
    .dout(mul_res_646_fu_2797_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U89(
    .din0(mul_res_647_fu_2825_p0),
    .din1(mul_res_647_fu_2825_p1),
    .dout(mul_res_647_fu_2825_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U90(
    .din0(mul_res_648_fu_2853_p0),
    .din1(mul_res_648_fu_2853_p1),
    .dout(mul_res_648_fu_2853_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U91(
    .din0(mul_res_649_fu_2881_p0),
    .din1(mul_res_649_fu_2881_p1),
    .dout(mul_res_649_fu_2881_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U92(
    .din0(mul_res_650_fu_2909_p0),
    .din1(mul_res_650_fu_2909_p1),
    .dout(mul_res_650_fu_2909_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U93(
    .din0(mul_res_651_fu_2937_p0),
    .din1(mul_res_651_fu_2937_p1),
    .dout(mul_res_651_fu_2937_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U94(
    .din0(mul_res_652_fu_2965_p0),
    .din1(mul_res_652_fu_2965_p1),
    .dout(mul_res_652_fu_2965_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U95(
    .din0(mul_res_653_fu_2993_p0),
    .din1(mul_res_653_fu_2993_p1),
    .dout(mul_res_653_fu_2993_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U96(
    .din0(mul_res_654_fu_3021_p0),
    .din1(mul_res_654_fu_3021_p1),
    .dout(mul_res_654_fu_3021_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U97(
    .din0(mul_res_655_fu_3049_p0),
    .din1(mul_res_655_fu_3049_p1),
    .dout(mul_res_655_fu_3049_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U98(
    .din0(mul_res_656_fu_3077_p0),
    .din1(mul_res_656_fu_3077_p1),
    .dout(mul_res_656_fu_3077_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U99(
    .din0(mul_res_657_fu_3105_p0),
    .din1(mul_res_657_fu_3105_p1),
    .dout(mul_res_657_fu_3105_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U100(
    .din0(mul_res_658_fu_3133_p0),
    .din1(mul_res_658_fu_3133_p1),
    .dout(mul_res_658_fu_3133_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U101(
    .din0(mul_res_659_fu_3161_p0),
    .din1(mul_res_659_fu_3161_p1),
    .dout(mul_res_659_fu_3161_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U102(
    .din0(mul_res_660_fu_3189_p0),
    .din1(mul_res_660_fu_3189_p1),
    .dout(mul_res_660_fu_3189_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U103(
    .din0(mul_res_661_fu_3217_p0),
    .din1(mul_res_661_fu_3217_p1),
    .dout(mul_res_661_fu_3217_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U104(
    .din0(mul_res_662_fu_3245_p0),
    .din1(mul_res_662_fu_3245_p1),
    .dout(mul_res_662_fu_3245_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U105(
    .din0(mul_res_663_fu_3273_p0),
    .din1(mul_res_663_fu_3273_p1),
    .dout(mul_res_663_fu_3273_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U106(
    .din0(mul_res_664_fu_3301_p0),
    .din1(mul_res_664_fu_3301_p1),
    .dout(mul_res_664_fu_3301_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U107(
    .din0(mul_res_665_fu_3329_p0),
    .din1(mul_res_665_fu_3329_p1),
    .dout(mul_res_665_fu_3329_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U108(
    .din0(mul_res_666_fu_3347_p0),
    .din1(mul_res_666_fu_3347_p1),
    .dout(mul_res_666_fu_3347_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U109(
    .din0(mul_res_667_fu_3365_p0),
    .din1(mul_res_667_fu_3365_p1),
    .dout(mul_res_667_fu_3365_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U110(
    .din0(mul_res_668_fu_3383_p0),
    .din1(mul_res_668_fu_3383_p1),
    .dout(mul_res_668_fu_3383_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U111(
    .din0(mul_res_669_fu_3401_p0),
    .din1(mul_res_669_fu_3401_p1),
    .dout(mul_res_669_fu_3401_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U112(
    .din0(mul_res_670_fu_3419_p0),
    .din1(mul_res_670_fu_3419_p1),
    .dout(mul_res_670_fu_3419_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U113(
    .din0(mul_res_671_fu_3437_p0),
    .din1(mul_res_671_fu_3437_p1),
    .dout(mul_res_671_fu_3437_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U114(
    .din0(mul_res_672_fu_3451_p0),
    .din1(mul_res_672_fu_3451_p1),
    .dout(mul_res_672_fu_3451_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U115(
    .din0(mul_res_673_fu_3465_p0),
    .din1(mul_res_673_fu_3465_p1),
    .dout(mul_res_673_fu_3465_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U116(
    .din0(mul_res_674_fu_3479_p0),
    .din1(mul_res_674_fu_3479_p1),
    .dout(mul_res_674_fu_3479_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U117(
    .din0(mul_res_675_fu_3493_p0),
    .din1(mul_res_675_fu_3493_p1),
    .dout(mul_res_675_fu_3493_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U118(
    .din0(mul_res_676_fu_3507_p0),
    .din1(mul_res_676_fu_3507_p1),
    .dout(mul_res_676_fu_3507_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U119(
    .din0(mul_res_677_fu_3521_p0),
    .din1(mul_res_677_fu_3521_p1),
    .dout(mul_res_677_fu_3521_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U120(
    .din0(mul_res_678_fu_3535_p0),
    .din1(mul_res_678_fu_3535_p1),
    .dout(mul_res_678_fu_3535_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U121(
    .din0(mul_res_679_fu_3549_p0),
    .din1(mul_res_679_fu_3549_p1),
    .dout(mul_res_679_fu_3549_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U122(
    .din0(mul_res_680_fu_3563_p0),
    .din1(mul_res_680_fu_3563_p1),
    .dout(mul_res_680_fu_3563_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U123(
    .din0(mul_res_681_fu_3577_p0),
    .din1(mul_res_681_fu_3577_p1),
    .dout(mul_res_681_fu_3577_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U124(
    .din0(mul_res_682_fu_3591_p0),
    .din1(mul_res_682_fu_3591_p1),
    .dout(mul_res_682_fu_3591_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U125(
    .din0(mul_res_683_fu_3605_p0),
    .din1(mul_res_683_fu_3605_p1),
    .dout(mul_res_683_fu_3605_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U126(
    .din0(mul_res_684_fu_3619_p0),
    .din1(mul_res_684_fu_3619_p1),
    .dout(mul_res_684_fu_3619_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U127(
    .din0(mul_res_685_fu_3633_p0),
    .din1(mul_res_685_fu_3633_p1),
    .dout(mul_res_685_fu_3633_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U128(
    .din0(mul_res_686_fu_3647_p0),
    .din1(mul_res_686_fu_3647_p1),
    .dout(mul_res_686_fu_3647_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U129(
    .din0(mul_res_687_fu_3661_p0),
    .din1(mul_res_687_fu_3661_p1),
    .dout(mul_res_687_fu_3661_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U130(
    .din0(mul_res_688_fu_3675_p0),
    .din1(mul_res_688_fu_3675_p1),
    .dout(mul_res_688_fu_3675_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U131(
    .din0(mul_res_689_fu_3689_p0),
    .din1(mul_res_689_fu_3689_p1),
    .dout(mul_res_689_fu_3689_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U132(
    .din0(mul_res_690_fu_3703_p0),
    .din1(mul_res_690_fu_3703_p1),
    .dout(mul_res_690_fu_3703_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U133(
    .din0(mul_res_691_fu_3717_p0),
    .din1(mul_res_691_fu_3717_p1),
    .dout(mul_res_691_fu_3717_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U134(
    .din0(mul_res_692_fu_3731_p0),
    .din1(mul_res_692_fu_3731_p1),
    .dout(mul_res_692_fu_3731_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U135(
    .din0(mul_res_693_fu_3745_p0),
    .din1(mul_res_693_fu_3745_p1),
    .dout(mul_res_693_fu_3745_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U136(
    .din0(mul_res_694_fu_3759_p0),
    .din1(mul_res_694_fu_3759_p1),
    .dout(mul_res_694_fu_3759_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U137(
    .din0(mul_res_695_fu_3773_p0),
    .din1(mul_res_695_fu_3773_p1),
    .dout(mul_res_695_fu_3773_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U138(
    .din0(mul_res_696_fu_3787_p0),
    .din1(mul_res_696_fu_3787_p1),
    .dout(mul_res_696_fu_3787_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U139(
    .din0(mul_res_697_fu_3801_p0),
    .din1(mul_res_697_fu_3801_p1),
    .dout(mul_res_697_fu_3801_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U140(
    .din0(mul_res_698_fu_3815_p0),
    .din1(mul_res_698_fu_3815_p1),
    .dout(mul_res_698_fu_3815_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U141(
    .din0(mul_res_699_fu_3829_p0),
    .din1(mul_res_699_fu_3829_p1),
    .dout(mul_res_699_fu_3829_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U142(
    .din0(mul_res_700_fu_3843_p0),
    .din1(mul_res_700_fu_3843_p1),
    .dout(mul_res_700_fu_3843_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U143(
    .din0(mul_res_701_fu_3857_p0),
    .din1(mul_res_701_fu_3857_p1),
    .dout(mul_res_701_fu_3857_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U144(
    .din0(mul_res_702_fu_3871_p0),
    .din1(mul_res_702_fu_3871_p1),
    .dout(mul_res_702_fu_3871_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U145(
    .din0(mul_res_703_fu_3885_p0),
    .din1(mul_res_703_fu_3885_p1),
    .dout(mul_res_703_fu_3885_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U146(
    .din0(mul_res_704_fu_3899_p0),
    .din1(mul_res_704_fu_3899_p1),
    .dout(mul_res_704_fu_3899_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U147(
    .din0(mul_res_705_fu_3913_p0),
    .din1(mul_res_705_fu_3913_p1),
    .dout(mul_res_705_fu_3913_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U148(
    .din0(mul_res_706_fu_3927_p0),
    .din1(mul_res_706_fu_3927_p1),
    .dout(mul_res_706_fu_3927_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U149(
    .din0(mul_res_707_fu_3941_p0),
    .din1(mul_res_707_fu_3941_p1),
    .dout(mul_res_707_fu_3941_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U150(
    .din0(mul_res_708_fu_3955_p0),
    .din1(mul_res_708_fu_3955_p1),
    .dout(mul_res_708_fu_3955_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U151(
    .din0(mul_res_709_fu_3969_p0),
    .din1(mul_res_709_fu_3969_p1),
    .dout(mul_res_709_fu_3969_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U152(
    .din0(mul_res_710_fu_3983_p0),
    .din1(mul_res_710_fu_3983_p1),
    .dout(mul_res_710_fu_3983_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U153(
    .din0(mul_res_711_fu_3997_p0),
    .din1(mul_res_711_fu_3997_p1),
    .dout(mul_res_711_fu_3997_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U154(
    .din0(mul_res_712_fu_4011_p0),
    .din1(mul_res_712_fu_4011_p1),
    .dout(mul_res_712_fu_4011_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U155(
    .din0(mul_res_713_fu_4025_p0),
    .din1(mul_res_713_fu_4025_p1),
    .dout(mul_res_713_fu_4025_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U156(
    .din0(mul_res_714_fu_4039_p0),
    .din1(mul_res_714_fu_4039_p1),
    .dout(mul_res_714_fu_4039_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U157(
    .din0(mul_res_715_fu_4053_p0),
    .din1(mul_res_715_fu_4053_p1),
    .dout(mul_res_715_fu_4053_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U158(
    .din0(mul_res_716_fu_4067_p0),
    .din1(mul_res_716_fu_4067_p1),
    .dout(mul_res_716_fu_4067_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U159(
    .din0(mul_res_717_fu_4081_p0),
    .din1(mul_res_717_fu_4081_p1),
    .dout(mul_res_717_fu_4081_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U160(
    .din0(mul_res_718_fu_4095_p0),
    .din1(mul_res_718_fu_4095_p1),
    .dout(mul_res_718_fu_4095_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U161(
    .din0(mul_res_719_fu_4109_p0),
    .din1(mul_res_719_fu_4109_p1),
    .dout(mul_res_719_fu_4109_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U162(
    .din0(mul_res_720_fu_4123_p0),
    .din1(mul_res_720_fu_4123_p1),
    .dout(mul_res_720_fu_4123_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U163(
    .din0(mul_res_721_fu_4137_p0),
    .din1(mul_res_721_fu_4137_p1),
    .dout(mul_res_721_fu_4137_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U164(
    .din0(mul_res_722_fu_4151_p0),
    .din1(mul_res_722_fu_4151_p1),
    .dout(mul_res_722_fu_4151_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U165(
    .din0(mul_res_723_fu_4165_p0),
    .din1(mul_res_723_fu_4165_p1),
    .dout(mul_res_723_fu_4165_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U166(
    .din0(mul_res_724_fu_4179_p0),
    .din1(mul_res_724_fu_4179_p1),
    .dout(mul_res_724_fu_4179_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U167(
    .din0(mul_res_725_fu_4193_p0),
    .din1(mul_res_725_fu_4193_p1),
    .dout(mul_res_725_fu_4193_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U168(
    .din0(mul_res_726_fu_4207_p0),
    .din1(mul_res_726_fu_4207_p1),
    .dout(mul_res_726_fu_4207_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U169(
    .din0(mul_res_727_fu_4221_p0),
    .din1(mul_res_727_fu_4221_p1),
    .dout(mul_res_727_fu_4221_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U170(
    .din0(mul_res_728_fu_4235_p0),
    .din1(mul_res_728_fu_4235_p1),
    .dout(mul_res_728_fu_4235_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U171(
    .din0(mul_res_729_fu_4249_p0),
    .din1(mul_res_729_fu_4249_p1),
    .dout(mul_res_729_fu_4249_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U172(
    .din0(mul_res_730_fu_4263_p0),
    .din1(mul_res_730_fu_4263_p1),
    .dout(mul_res_730_fu_4263_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U173(
    .din0(mul_res_731_fu_4277_p0),
    .din1(mul_res_731_fu_4277_p1),
    .dout(mul_res_731_fu_4277_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U174(
    .din0(mul_res_732_fu_4291_p0),
    .din1(mul_res_732_fu_4291_p1),
    .dout(mul_res_732_fu_4291_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U175(
    .din0(mul_res_733_fu_4305_p0),
    .din1(mul_res_733_fu_4305_p1),
    .dout(mul_res_733_fu_4305_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U176(
    .din0(mul_res_734_fu_4319_p0),
    .din1(mul_res_734_fu_4319_p1),
    .dout(mul_res_734_fu_4319_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U177(
    .din0(mul_res_735_fu_4333_p0),
    .din1(mul_res_735_fu_4333_p1),
    .dout(mul_res_735_fu_4333_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U178(
    .din0(mul_res_736_fu_4347_p0),
    .din1(mul_res_736_fu_4347_p1),
    .dout(mul_res_736_fu_4347_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U179(
    .din0(mul_res_737_fu_4361_p0),
    .din1(mul_res_737_fu_4361_p1),
    .dout(mul_res_737_fu_4361_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_652)) begin
        cit_fu_664 <= add_ln122_fu_998_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_652)) begin
    cot_fu_764 <= select_ln121_7_fu_986_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_749)) begin
    if ((icmp_ln120_fu_881_p2 == 1'd0)) begin
        indvar_flatten59_fu_772 <= add_ln120_fu_875_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten59_fu_772 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_749)) begin
    if ((icmp_ln120_fu_881_p2 == 1'd0)) begin
        indvar_flatten_fu_768 <= select_ln121_8_fu_899_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_768 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln153_101_reg_7834 <= add_ln153_101_fu_5844_p2;
        add_ln153_107_reg_7839 <= add_ln153_107_fu_5914_p2;
        add_ln153_113_reg_7844 <= add_ln153_113_fu_5984_p2;
        add_ln153_119_reg_7849 <= add_ln153_119_fu_6054_p2;
        add_ln153_11_reg_7759 <= add_ln153_11_fu_4794_p2;
        add_ln153_125_reg_7854 <= add_ln153_125_fu_6124_p2;
        add_ln153_131_reg_7859 <= add_ln153_131_fu_6194_p2;
        add_ln153_137_reg_7864 <= add_ln153_137_fu_6264_p2;
        add_ln153_143_reg_7869 <= add_ln153_143_fu_6334_p2;
        add_ln153_17_reg_7764 <= add_ln153_17_fu_4864_p2;
        add_ln153_23_reg_7769 <= add_ln153_23_fu_4934_p2;
        add_ln153_29_reg_7774 <= add_ln153_29_fu_5004_p2;
        add_ln153_35_reg_7779 <= add_ln153_35_fu_5074_p2;
        add_ln153_41_reg_7784 <= add_ln153_41_fu_5144_p2;
        add_ln153_47_reg_7789 <= add_ln153_47_fu_5214_p2;
        add_ln153_53_reg_7794 <= add_ln153_53_fu_5284_p2;
        add_ln153_59_reg_7799 <= add_ln153_59_fu_5354_p2;
        add_ln153_5_reg_7754 <= add_ln153_5_fu_4724_p2;
        add_ln153_65_reg_7804 <= add_ln153_65_fu_5424_p2;
        add_ln153_71_reg_7809 <= add_ln153_71_fu_5494_p2;
        add_ln153_77_reg_7814 <= add_ln153_77_fu_5564_p2;
        add_ln153_83_reg_7819 <= add_ln153_83_fu_5634_p2;
        add_ln153_89_reg_7824 <= add_ln153_89_fu_5704_p2;
        add_ln153_95_reg_7829 <= add_ln153_95_fu_5774_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln126_reg_6931 <= icmp_ln126_fu_1057_p2;
        icmp_ln126_reg_6931_pp0_iter3_reg <= icmp_ln126_reg_6931;
        icmp_ln161_reg_6959 <= icmp_ln161_fu_1066_p2;
        icmp_ln161_reg_6959_pp0_iter3_reg <= icmp_ln161_reg_6959;
        icmp_ln161_reg_6959_pp0_iter4_reg <= icmp_ln161_reg_6959_pp0_iter3_reg;
        mul_res_595_reg_7039 <= mul_res_595_fu_1353_p2;
        mul_res_596_reg_7044 <= mul_res_596_fu_1385_p2;
        mul_res_597_reg_7049 <= mul_res_597_fu_1417_p2;
        mul_res_598_reg_7054 <= mul_res_598_fu_1449_p2;
        mul_res_599_reg_7059 <= mul_res_599_fu_1481_p2;
        mul_res_600_reg_7064 <= mul_res_600_fu_1509_p2;
        mul_res_601_reg_7069 <= mul_res_601_fu_1537_p2;
        mul_res_602_reg_7074 <= mul_res_602_fu_1565_p2;
        mul_res_603_reg_7079 <= mul_res_603_fu_1593_p2;
        mul_res_604_reg_7084 <= mul_res_604_fu_1621_p2;
        mul_res_605_reg_7089 <= mul_res_605_fu_1649_p2;
        mul_res_606_reg_7094 <= mul_res_606_fu_1677_p2;
        mul_res_607_reg_7099 <= mul_res_607_fu_1705_p2;
        mul_res_608_reg_7104 <= mul_res_608_fu_1733_p2;
        mul_res_609_reg_7109 <= mul_res_609_fu_1761_p2;
        mul_res_610_reg_7114 <= mul_res_610_fu_1789_p2;
        mul_res_611_reg_7119 <= mul_res_611_fu_1817_p2;
        mul_res_612_reg_7124 <= mul_res_612_fu_1845_p2;
        mul_res_613_reg_7129 <= mul_res_613_fu_1873_p2;
        mul_res_614_reg_7134 <= mul_res_614_fu_1901_p2;
        mul_res_615_reg_7139 <= mul_res_615_fu_1929_p2;
        mul_res_616_reg_7144 <= mul_res_616_fu_1957_p2;
        mul_res_617_reg_7149 <= mul_res_617_fu_1985_p2;
        mul_res_618_reg_7154 <= mul_res_618_fu_2013_p2;
        mul_res_619_reg_7159 <= mul_res_619_fu_2041_p2;
        mul_res_620_reg_7164 <= mul_res_620_fu_2069_p2;
        mul_res_621_reg_7169 <= mul_res_621_fu_2097_p2;
        mul_res_622_reg_7174 <= mul_res_622_fu_2125_p2;
        mul_res_623_reg_7179 <= mul_res_623_fu_2153_p2;
        mul_res_624_reg_7184 <= mul_res_624_fu_2181_p2;
        mul_res_625_reg_7189 <= mul_res_625_fu_2209_p2;
        mul_res_626_reg_7194 <= mul_res_626_fu_2237_p2;
        mul_res_627_reg_7199 <= mul_res_627_fu_2265_p2;
        mul_res_628_reg_7204 <= mul_res_628_fu_2293_p2;
        mul_res_629_reg_7209 <= mul_res_629_fu_2321_p2;
        mul_res_630_reg_7214 <= mul_res_630_fu_2349_p2;
        mul_res_631_reg_7219 <= mul_res_631_fu_2377_p2;
        mul_res_632_reg_7224 <= mul_res_632_fu_2405_p2;
        mul_res_633_reg_7229 <= mul_res_633_fu_2433_p2;
        mul_res_634_reg_7234 <= mul_res_634_fu_2461_p2;
        mul_res_635_reg_7239 <= mul_res_635_fu_2489_p2;
        mul_res_636_reg_7244 <= mul_res_636_fu_2517_p2;
        mul_res_637_reg_7249 <= mul_res_637_fu_2545_p2;
        mul_res_638_reg_7254 <= mul_res_638_fu_2573_p2;
        mul_res_639_reg_7259 <= mul_res_639_fu_2601_p2;
        mul_res_640_reg_7264 <= mul_res_640_fu_2629_p2;
        mul_res_641_reg_7269 <= mul_res_641_fu_2657_p2;
        mul_res_642_reg_7274 <= mul_res_642_fu_2685_p2;
        mul_res_643_reg_7279 <= mul_res_643_fu_2713_p2;
        mul_res_644_reg_7284 <= mul_res_644_fu_2741_p2;
        mul_res_645_reg_7289 <= mul_res_645_fu_2769_p2;
        mul_res_646_reg_7294 <= mul_res_646_fu_2797_p2;
        mul_res_647_reg_7299 <= mul_res_647_fu_2825_p2;
        mul_res_648_reg_7304 <= mul_res_648_fu_2853_p2;
        mul_res_649_reg_7309 <= mul_res_649_fu_2881_p2;
        mul_res_650_reg_7314 <= mul_res_650_fu_2909_p2;
        mul_res_651_reg_7319 <= mul_res_651_fu_2937_p2;
        mul_res_652_reg_7324 <= mul_res_652_fu_2965_p2;
        mul_res_653_reg_7329 <= mul_res_653_fu_2993_p2;
        mul_res_654_reg_7334 <= mul_res_654_fu_3021_p2;
        mul_res_655_reg_7339 <= mul_res_655_fu_3049_p2;
        mul_res_656_reg_7344 <= mul_res_656_fu_3077_p2;
        mul_res_657_reg_7349 <= mul_res_657_fu_3105_p2;
        mul_res_658_reg_7354 <= mul_res_658_fu_3133_p2;
        mul_res_659_reg_7359 <= mul_res_659_fu_3161_p2;
        mul_res_660_reg_7364 <= mul_res_660_fu_3189_p2;
        mul_res_661_reg_7369 <= mul_res_661_fu_3217_p2;
        mul_res_662_reg_7374 <= mul_res_662_fu_3245_p2;
        mul_res_663_reg_7379 <= mul_res_663_fu_3273_p2;
        mul_res_664_reg_7384 <= mul_res_664_fu_3301_p2;
        mul_res_665_reg_7389 <= mul_res_665_fu_3329_p2;
        mul_res_666_reg_7394 <= mul_res_666_fu_3347_p2;
        mul_res_667_reg_7399 <= mul_res_667_fu_3365_p2;
        mul_res_668_reg_7404 <= mul_res_668_fu_3383_p2;
        mul_res_669_reg_7409 <= mul_res_669_fu_3401_p2;
        mul_res_670_reg_7414 <= mul_res_670_fu_3419_p2;
        mul_res_671_reg_7419 <= mul_res_671_fu_3437_p2;
        mul_res_672_reg_7424 <= mul_res_672_fu_3451_p2;
        mul_res_673_reg_7429 <= mul_res_673_fu_3465_p2;
        mul_res_674_reg_7434 <= mul_res_674_fu_3479_p2;
        mul_res_675_reg_7439 <= mul_res_675_fu_3493_p2;
        mul_res_676_reg_7444 <= mul_res_676_fu_3507_p2;
        mul_res_677_reg_7449 <= mul_res_677_fu_3521_p2;
        mul_res_678_reg_7454 <= mul_res_678_fu_3535_p2;
        mul_res_679_reg_7459 <= mul_res_679_fu_3549_p2;
        mul_res_680_reg_7464 <= mul_res_680_fu_3563_p2;
        mul_res_681_reg_7469 <= mul_res_681_fu_3577_p2;
        mul_res_682_reg_7474 <= mul_res_682_fu_3591_p2;
        mul_res_683_reg_7479 <= mul_res_683_fu_3605_p2;
        mul_res_684_reg_7484 <= mul_res_684_fu_3619_p2;
        mul_res_685_reg_7489 <= mul_res_685_fu_3633_p2;
        mul_res_686_reg_7494 <= mul_res_686_fu_3647_p2;
        mul_res_687_reg_7499 <= mul_res_687_fu_3661_p2;
        mul_res_688_reg_7504 <= mul_res_688_fu_3675_p2;
        mul_res_689_reg_7509 <= mul_res_689_fu_3689_p2;
        mul_res_690_reg_7514 <= mul_res_690_fu_3703_p2;
        mul_res_691_reg_7519 <= mul_res_691_fu_3717_p2;
        mul_res_692_reg_7524 <= mul_res_692_fu_3731_p2;
        mul_res_693_reg_7529 <= mul_res_693_fu_3745_p2;
        mul_res_694_reg_7534 <= mul_res_694_fu_3759_p2;
        mul_res_695_reg_7539 <= mul_res_695_fu_3773_p2;
        mul_res_696_reg_7544 <= mul_res_696_fu_3787_p2;
        mul_res_697_reg_7549 <= mul_res_697_fu_3801_p2;
        mul_res_698_reg_7554 <= mul_res_698_fu_3815_p2;
        mul_res_699_reg_7559 <= mul_res_699_fu_3829_p2;
        mul_res_700_reg_7564 <= mul_res_700_fu_3843_p2;
        mul_res_701_reg_7569 <= mul_res_701_fu_3857_p2;
        mul_res_702_reg_7574 <= mul_res_702_fu_3871_p2;
        mul_res_703_reg_7579 <= mul_res_703_fu_3885_p2;
        mul_res_704_reg_7584 <= mul_res_704_fu_3899_p2;
        mul_res_705_reg_7589 <= mul_res_705_fu_3913_p2;
        mul_res_706_reg_7594 <= mul_res_706_fu_3927_p2;
        mul_res_707_reg_7599 <= mul_res_707_fu_3941_p2;
        mul_res_708_reg_7604 <= mul_res_708_fu_3955_p2;
        mul_res_709_reg_7609 <= mul_res_709_fu_3969_p2;
        mul_res_710_reg_7614 <= mul_res_710_fu_3983_p2;
        mul_res_711_reg_7619 <= mul_res_711_fu_3997_p2;
        mul_res_712_reg_7624 <= mul_res_712_fu_4011_p2;
        mul_res_713_reg_7629 <= mul_res_713_fu_4025_p2;
        mul_res_714_reg_7634 <= mul_res_714_fu_4039_p2;
        mul_res_715_reg_7639 <= mul_res_715_fu_4053_p2;
        mul_res_716_reg_7644 <= mul_res_716_fu_4067_p2;
        mul_res_717_reg_7649 <= mul_res_717_fu_4081_p2;
        mul_res_718_reg_7654 <= mul_res_718_fu_4095_p2;
        mul_res_719_reg_7659 <= mul_res_719_fu_4109_p2;
        mul_res_720_reg_7664 <= mul_res_720_fu_4123_p2;
        mul_res_721_reg_7669 <= mul_res_721_fu_4137_p2;
        mul_res_722_reg_7674 <= mul_res_722_fu_4151_p2;
        mul_res_723_reg_7679 <= mul_res_723_fu_4165_p2;
        mul_res_724_reg_7684 <= mul_res_724_fu_4179_p2;
        mul_res_725_reg_7689 <= mul_res_725_fu_4193_p2;
        mul_res_726_reg_7694 <= mul_res_726_fu_4207_p2;
        mul_res_727_reg_7699 <= mul_res_727_fu_4221_p2;
        mul_res_728_reg_7704 <= mul_res_728_fu_4235_p2;
        mul_res_729_reg_7709 <= mul_res_729_fu_4249_p2;
        mul_res_730_reg_7714 <= mul_res_730_fu_4263_p2;
        mul_res_731_reg_7719 <= mul_res_731_fu_4277_p2;
        mul_res_732_reg_7724 <= mul_res_732_fu_4291_p2;
        mul_res_733_reg_7729 <= mul_res_733_fu_4305_p2;
        mul_res_734_reg_7734 <= mul_res_734_fu_4319_p2;
        mul_res_735_reg_7739 <= mul_res_735_fu_4333_p2;
        mul_res_736_reg_7744 <= mul_res_736_fu_4347_p2;
        mul_res_737_reg_7749 <= mul_res_737_fu_4361_p2;
        mul_res_reg_7034 <= mul_res_fu_1321_p2;
        tmp_1_reg_6975 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[35:24]}};
        tmp_2_reg_6981 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[47:36]}};
        tmp_3_reg_6987 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[59:48]}};
        tmp_4_reg_6993 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[71:60]}};
        tmp_5_reg_6999 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[83:72]}};
        tmp_6_reg_7005 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[95:84]}};
        tmp_7_reg_7011 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[107:96]}};
        tmp_83_reg_7029 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[140:132]}};
        tmp_8_reg_7017 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[119:108]}};
        tmp_9_reg_7023 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[131:120]}};
        tmp_s_reg_6969 <= {{attn_inst_matmul_gen_q_bias_arr_657_q0[23:12]}};
        trunc_ln131_reg_6963 <= trunc_ln131_fu_1071_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln121_reg_6897 <= icmp_ln121_fu_887_p2;
        select_ln121_7_reg_6911 <= select_ln121_7_fu_986_p3;
        select_ln121_reg_6904 <= select_ln121_fu_978_p3;
        trunc_ln121_reg_6916 <= trunc_ln121_fu_994_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_0_0_0364_fu_668 <= add_ln153_5_fu_4724_p2;
        p_0_0_0388_fu_716 <= add_ln153_77_fu_5564_p2;
        p_0_0_0_10384_fu_708 <= add_ln153_65_fu_5424_p2;
        p_0_0_0_10408_fu_756 <= add_ln153_137_fu_6264_p2;
        p_0_0_0_112366_fu_672 <= add_ln153_11_fu_4794_p2;
        p_0_0_0_112390_fu_720 <= add_ln153_83_fu_5634_p2;
        p_0_0_0_11386_fu_712 <= add_ln153_71_fu_5494_p2;
        p_0_0_0_11410_fu_760 <= add_ln153_143_fu_6334_p2;
        p_0_0_0_2368_fu_676 <= add_ln153_17_fu_4864_p2;
        p_0_0_0_2392_fu_724 <= add_ln153_89_fu_5704_p2;
        p_0_0_0_3370_fu_680 <= add_ln153_23_fu_4934_p2;
        p_0_0_0_3394_fu_728 <= add_ln153_95_fu_5774_p2;
        p_0_0_0_4372_fu_684 <= add_ln153_29_fu_5004_p2;
        p_0_0_0_4396_fu_732 <= add_ln153_101_fu_5844_p2;
        p_0_0_0_5374_fu_688 <= add_ln153_35_fu_5074_p2;
        p_0_0_0_5398_fu_736 <= add_ln153_107_fu_5914_p2;
        p_0_0_0_6376_fu_692 <= add_ln153_41_fu_5144_p2;
        p_0_0_0_6400_fu_740 <= add_ln153_113_fu_5984_p2;
        p_0_0_0_7378_fu_696 <= add_ln153_47_fu_5214_p2;
        p_0_0_0_7402_fu_744 <= add_ln153_119_fu_6054_p2;
        p_0_0_0_8380_fu_700 <= add_ln153_53_fu_5284_p2;
        p_0_0_0_8404_fu_748 <= add_ln153_125_fu_6124_p2;
        p_0_0_0_9382_fu_704 <= add_ln153_59_fu_5354_p2;
        p_0_0_0_9406_fu_752 <= add_ln153_131_fu_6194_p2;
    end
end

always @ (*) begin
    if (((icmp_ln120_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_664;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_764;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_772;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_768;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_q_bias_arr_657_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_q_bias_arr_657_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_q_weight_arr_656_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_q_weight_arr_656_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln161_reg_6959_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln161_reg_6959_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_875_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 16'd1);

assign add_ln121_4_fu_893_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln121_fu_967_p2 = (select_ln120_fu_943_p3 + 5'd1);

assign add_ln122_fu_998_p2 = (select_ln121_fu_978_p3 + 6'd1);

assign add_ln151_fu_1046_p2 = (tmp_84_fu_1032_p3 + zext_ln151_fu_1043_p1);

assign add_ln153_100_fu_5834_p2 = ($signed(sext_ln153_83_fu_5830_p1) + $signed(sext_ln153_82_fu_5820_p1));

assign add_ln153_101_fu_5844_p2 = ($signed(sext_ln153_84_fu_5840_p1) + $signed(add_ln153_97_fu_5808_p2));

assign add_ln153_102_fu_5868_p2 = ($signed(sext_ln151_172_fu_5859_p1) + $signed(sext_ln151_173_fu_5862_p1));

assign add_ln153_103_fu_5878_p2 = ($signed(sext_ln153_86_fu_5874_p1) + $signed(select_ln126_6_fu_4551_p3));

assign add_ln153_104_fu_5884_p2 = ($signed(sext_ln151_171_fu_5856_p1) + $signed(sext_ln151_170_fu_5853_p1));

assign add_ln153_105_fu_5894_p2 = ($signed(sext_ln151_169_fu_5850_p1) + $signed(sext_ln153_85_fu_5865_p1));

assign add_ln153_106_fu_5904_p2 = ($signed(sext_ln153_88_fu_5900_p1) + $signed(sext_ln153_87_fu_5890_p1));

assign add_ln153_107_fu_5914_p2 = ($signed(sext_ln153_89_fu_5910_p1) + $signed(add_ln153_103_fu_5878_p2));

assign add_ln153_108_fu_5938_p2 = ($signed(sext_ln151_177_fu_5929_p1) + $signed(sext_ln151_178_fu_5932_p1));

assign add_ln153_109_fu_5948_p2 = ($signed(sext_ln153_91_fu_5944_p1) + $signed(select_ln126_5_fu_4545_p3));

assign add_ln153_10_fu_4778_p2 = ($signed(sext_ln153_8_fu_4774_p1) + $signed(sext_ln153_7_fu_4764_p1));

assign add_ln153_110_fu_5954_p2 = ($signed(sext_ln151_176_fu_5926_p1) + $signed(sext_ln151_175_fu_5923_p1));

assign add_ln153_111_fu_5964_p2 = ($signed(sext_ln151_174_fu_5920_p1) + $signed(sext_ln153_90_fu_5935_p1));

assign add_ln153_112_fu_5974_p2 = ($signed(sext_ln153_93_fu_5970_p1) + $signed(sext_ln153_92_fu_5960_p1));

assign add_ln153_113_fu_5984_p2 = ($signed(sext_ln153_94_fu_5980_p1) + $signed(add_ln153_109_fu_5948_p2));

assign add_ln153_114_fu_6008_p2 = ($signed(sext_ln151_182_fu_5999_p1) + $signed(sext_ln151_183_fu_6002_p1));

assign add_ln153_115_fu_6018_p2 = ($signed(sext_ln153_96_fu_6014_p1) + $signed(select_ln126_4_fu_4539_p3));

assign add_ln153_116_fu_6024_p2 = ($signed(sext_ln151_181_fu_5996_p1) + $signed(sext_ln151_180_fu_5993_p1));

assign add_ln153_117_fu_6034_p2 = ($signed(sext_ln151_179_fu_5990_p1) + $signed(sext_ln153_95_fu_6005_p1));

assign add_ln153_118_fu_6044_p2 = ($signed(sext_ln153_98_fu_6040_p1) + $signed(sext_ln153_97_fu_6030_p1));

assign add_ln153_119_fu_6054_p2 = ($signed(sext_ln153_99_fu_6050_p1) + $signed(add_ln153_115_fu_6018_p2));

assign add_ln153_11_fu_4794_p2 = (add_ln153_7_fu_4788_p2 + select_ln126_22_fu_4648_p3);

assign add_ln153_120_fu_6078_p2 = ($signed(sext_ln151_187_fu_6069_p1) + $signed(sext_ln151_188_fu_6072_p1));

assign add_ln153_121_fu_6088_p2 = ($signed(sext_ln153_101_fu_6084_p1) + $signed(select_ln126_3_fu_4533_p3));

assign add_ln153_122_fu_6094_p2 = ($signed(sext_ln151_186_fu_6066_p1) + $signed(sext_ln151_185_fu_6063_p1));

assign add_ln153_123_fu_6104_p2 = ($signed(sext_ln151_184_fu_6060_p1) + $signed(sext_ln153_100_fu_6075_p1));

assign add_ln153_124_fu_6114_p2 = ($signed(sext_ln153_103_fu_6110_p1) + $signed(sext_ln153_102_fu_6100_p1));

assign add_ln153_125_fu_6124_p2 = ($signed(sext_ln153_104_fu_6120_p1) + $signed(add_ln153_121_fu_6088_p2));

assign add_ln153_126_fu_6148_p2 = ($signed(sext_ln151_192_fu_6139_p1) + $signed(sext_ln151_193_fu_6142_p1));

assign add_ln153_127_fu_6158_p2 = ($signed(sext_ln153_106_fu_6154_p1) + $signed(select_ln126_2_fu_4527_p3));

assign add_ln153_128_fu_6164_p2 = ($signed(sext_ln151_191_fu_6136_p1) + $signed(sext_ln151_190_fu_6133_p1));

assign add_ln153_129_fu_6174_p2 = ($signed(sext_ln151_189_fu_6130_p1) + $signed(sext_ln153_105_fu_6145_p1));

assign add_ln153_12_fu_4818_p2 = ($signed(sext_ln151_97_fu_4809_p1) + $signed(sext_ln151_98_fu_4812_p1));

assign add_ln153_130_fu_6184_p2 = ($signed(sext_ln153_108_fu_6180_p1) + $signed(sext_ln153_107_fu_6170_p1));

assign add_ln153_131_fu_6194_p2 = ($signed(sext_ln153_109_fu_6190_p1) + $signed(add_ln153_127_fu_6158_p2));

assign add_ln153_132_fu_6218_p2 = ($signed(sext_ln151_197_fu_6209_p1) + $signed(sext_ln151_198_fu_6212_p1));

assign add_ln153_133_fu_6228_p2 = ($signed(sext_ln153_111_fu_6224_p1) + $signed(select_ln126_1_fu_4521_p3));

assign add_ln153_134_fu_6234_p2 = ($signed(sext_ln151_196_fu_6206_p1) + $signed(sext_ln151_195_fu_6203_p1));

assign add_ln153_135_fu_6244_p2 = ($signed(sext_ln151_194_fu_6200_p1) + $signed(sext_ln153_110_fu_6215_p1));

assign add_ln153_136_fu_6254_p2 = ($signed(sext_ln153_113_fu_6250_p1) + $signed(sext_ln153_112_fu_6240_p1));

assign add_ln153_137_fu_6264_p2 = ($signed(sext_ln153_114_fu_6260_p1) + $signed(add_ln153_133_fu_6228_p2));

assign add_ln153_138_fu_6288_p2 = ($signed(sext_ln151_202_fu_6279_p1) + $signed(sext_ln151_203_fu_6282_p1));

assign add_ln153_139_fu_6298_p2 = ($signed(sext_ln153_116_fu_6294_p1) + $signed(select_ln126_fu_4514_p3));

assign add_ln153_13_fu_4858_p2 = ($signed(sext_ln153_14_fu_4854_p1) + $signed(sext_ln153_11_fu_4824_p1));

assign add_ln153_140_fu_6304_p2 = ($signed(sext_ln151_201_fu_6276_p1) + $signed(sext_ln151_200_fu_6273_p1));

assign add_ln153_141_fu_6314_p2 = ($signed(sext_ln151_199_fu_6270_p1) + $signed(sext_ln153_115_fu_6285_p1));

assign add_ln153_142_fu_6324_p2 = ($signed(sext_ln153_118_fu_6320_p1) + $signed(sext_ln153_117_fu_6310_p1));

assign add_ln153_143_fu_6334_p2 = ($signed(sext_ln153_119_fu_6330_p1) + $signed(add_ln153_139_fu_6298_p2));

assign add_ln153_14_fu_4828_p2 = ($signed(sext_ln151_96_fu_4806_p1) + $signed(sext_ln151_95_fu_4803_p1));

assign add_ln153_15_fu_4838_p2 = ($signed(sext_ln151_94_fu_4800_p1) + $signed(sext_ln153_10_fu_4815_p1));

assign add_ln153_16_fu_4848_p2 = ($signed(sext_ln153_13_fu_4844_p1) + $signed(sext_ln153_12_fu_4834_p1));

assign add_ln153_17_fu_4864_p2 = (add_ln153_13_fu_4858_p2 + select_ln126_21_fu_4642_p3);

assign add_ln153_18_fu_4888_p2 = ($signed(sext_ln151_102_fu_4879_p1) + $signed(sext_ln151_103_fu_4882_p1));

assign add_ln153_19_fu_4928_p2 = ($signed(sext_ln153_19_fu_4924_p1) + $signed(sext_ln153_16_fu_4894_p1));

assign add_ln153_1_fu_4718_p2 = ($signed(sext_ln153_4_fu_4714_p1) + $signed(sext_ln153_1_fu_4684_p1));

assign add_ln153_20_fu_4898_p2 = ($signed(sext_ln151_101_fu_4876_p1) + $signed(sext_ln151_100_fu_4873_p1));

assign add_ln153_21_fu_4908_p2 = ($signed(sext_ln151_99_fu_4870_p1) + $signed(sext_ln153_15_fu_4885_p1));

assign add_ln153_22_fu_4918_p2 = ($signed(sext_ln153_18_fu_4914_p1) + $signed(sext_ln153_17_fu_4904_p1));

assign add_ln153_23_fu_4934_p2 = (add_ln153_19_fu_4928_p2 + select_ln126_20_fu_4636_p3);

assign add_ln153_24_fu_4958_p2 = ($signed(sext_ln151_107_fu_4949_p1) + $signed(sext_ln151_108_fu_4952_p1));

assign add_ln153_25_fu_4998_p2 = ($signed(sext_ln153_24_fu_4994_p1) + $signed(sext_ln153_21_fu_4964_p1));

assign add_ln153_26_fu_4968_p2 = ($signed(sext_ln151_106_fu_4946_p1) + $signed(sext_ln151_105_fu_4943_p1));

assign add_ln153_27_fu_4978_p2 = ($signed(sext_ln151_104_fu_4940_p1) + $signed(sext_ln153_20_fu_4955_p1));

assign add_ln153_28_fu_4988_p2 = ($signed(sext_ln153_23_fu_4984_p1) + $signed(sext_ln153_22_fu_4974_p1));

assign add_ln153_29_fu_5004_p2 = (add_ln153_25_fu_4998_p2 + select_ln126_19_fu_4630_p3);

assign add_ln153_2_fu_4688_p2 = ($signed(sext_ln151_86_fu_4666_p1) + $signed(sext_ln151_85_fu_4663_p1));

assign add_ln153_30_fu_5028_p2 = ($signed(sext_ln151_112_fu_5019_p1) + $signed(sext_ln151_113_fu_5022_p1));

assign add_ln153_31_fu_5068_p2 = ($signed(sext_ln153_29_fu_5064_p1) + $signed(sext_ln153_26_fu_5034_p1));

assign add_ln153_32_fu_5038_p2 = ($signed(sext_ln151_111_fu_5016_p1) + $signed(sext_ln151_110_fu_5013_p1));

assign add_ln153_33_fu_5048_p2 = ($signed(sext_ln151_109_fu_5010_p1) + $signed(sext_ln153_25_fu_5025_p1));

assign add_ln153_34_fu_5058_p2 = ($signed(sext_ln153_28_fu_5054_p1) + $signed(sext_ln153_27_fu_5044_p1));

assign add_ln153_35_fu_5074_p2 = (add_ln153_31_fu_5068_p2 + select_ln126_18_fu_4624_p3);

assign add_ln153_36_fu_5098_p2 = ($signed(sext_ln151_117_fu_5089_p1) + $signed(sext_ln151_118_fu_5092_p1));

assign add_ln153_37_fu_5138_p2 = ($signed(sext_ln153_34_fu_5134_p1) + $signed(sext_ln153_31_fu_5104_p1));

assign add_ln153_38_fu_5108_p2 = ($signed(sext_ln151_116_fu_5086_p1) + $signed(sext_ln151_115_fu_5083_p1));

assign add_ln153_39_fu_5118_p2 = ($signed(sext_ln151_114_fu_5080_p1) + $signed(sext_ln153_30_fu_5095_p1));

assign add_ln153_3_fu_4698_p2 = ($signed(sext_ln151_84_fu_4660_p1) + $signed(sext_ln153_fu_4675_p1));

assign add_ln153_40_fu_5128_p2 = ($signed(sext_ln153_33_fu_5124_p1) + $signed(sext_ln153_32_fu_5114_p1));

assign add_ln153_41_fu_5144_p2 = (add_ln153_37_fu_5138_p2 + select_ln126_17_fu_4618_p3);

assign add_ln153_42_fu_5168_p2 = ($signed(sext_ln151_122_fu_5159_p1) + $signed(sext_ln151_123_fu_5162_p1));

assign add_ln153_43_fu_5208_p2 = ($signed(sext_ln153_39_fu_5204_p1) + $signed(sext_ln153_36_fu_5174_p1));

assign add_ln153_44_fu_5178_p2 = ($signed(sext_ln151_121_fu_5156_p1) + $signed(sext_ln151_120_fu_5153_p1));

assign add_ln153_45_fu_5188_p2 = ($signed(sext_ln151_119_fu_5150_p1) + $signed(sext_ln153_35_fu_5165_p1));

assign add_ln153_46_fu_5198_p2 = ($signed(sext_ln153_38_fu_5194_p1) + $signed(sext_ln153_37_fu_5184_p1));

assign add_ln153_47_fu_5214_p2 = (add_ln153_43_fu_5208_p2 + select_ln126_16_fu_4612_p3);

assign add_ln153_48_fu_5238_p2 = ($signed(sext_ln151_127_fu_5229_p1) + $signed(sext_ln151_128_fu_5232_p1));

assign add_ln153_49_fu_5278_p2 = ($signed(sext_ln153_44_fu_5274_p1) + $signed(sext_ln153_41_fu_5244_p1));

assign add_ln153_4_fu_4708_p2 = ($signed(sext_ln153_3_fu_4704_p1) + $signed(sext_ln153_2_fu_4694_p1));

assign add_ln153_50_fu_5248_p2 = ($signed(sext_ln151_126_fu_5226_p1) + $signed(sext_ln151_125_fu_5223_p1));

assign add_ln153_51_fu_5258_p2 = ($signed(sext_ln151_124_fu_5220_p1) + $signed(sext_ln153_40_fu_5235_p1));

assign add_ln153_52_fu_5268_p2 = ($signed(sext_ln153_43_fu_5264_p1) + $signed(sext_ln153_42_fu_5254_p1));

assign add_ln153_53_fu_5284_p2 = (add_ln153_49_fu_5278_p2 + select_ln126_15_fu_4606_p3);

assign add_ln153_54_fu_5308_p2 = ($signed(sext_ln151_132_fu_5299_p1) + $signed(sext_ln151_133_fu_5302_p1));

assign add_ln153_55_fu_5348_p2 = ($signed(sext_ln153_49_fu_5344_p1) + $signed(sext_ln153_46_fu_5314_p1));

assign add_ln153_56_fu_5318_p2 = ($signed(sext_ln151_131_fu_5296_p1) + $signed(sext_ln151_130_fu_5293_p1));

assign add_ln153_57_fu_5328_p2 = ($signed(sext_ln151_129_fu_5290_p1) + $signed(sext_ln153_45_fu_5305_p1));

assign add_ln153_58_fu_5338_p2 = ($signed(sext_ln153_48_fu_5334_p1) + $signed(sext_ln153_47_fu_5324_p1));

assign add_ln153_59_fu_5354_p2 = (add_ln153_55_fu_5348_p2 + select_ln126_14_fu_4600_p3);

assign add_ln153_5_fu_4724_p2 = (add_ln153_1_fu_4718_p2 + select_ln126_23_fu_4654_p3);

assign add_ln153_60_fu_5378_p2 = ($signed(sext_ln151_137_fu_5369_p1) + $signed(sext_ln151_138_fu_5372_p1));

assign add_ln153_61_fu_5388_p2 = ($signed(sext_ln153_51_fu_5384_p1) + $signed(select_ln126_13_fu_4594_p3));

assign add_ln153_62_fu_5394_p2 = ($signed(sext_ln151_136_fu_5366_p1) + $signed(sext_ln151_135_fu_5363_p1));

assign add_ln153_63_fu_5404_p2 = ($signed(sext_ln151_134_fu_5360_p1) + $signed(sext_ln153_50_fu_5375_p1));

assign add_ln153_64_fu_5414_p2 = ($signed(sext_ln153_53_fu_5410_p1) + $signed(sext_ln153_52_fu_5400_p1));

assign add_ln153_65_fu_5424_p2 = ($signed(sext_ln153_54_fu_5420_p1) + $signed(add_ln153_61_fu_5388_p2));

assign add_ln153_66_fu_5448_p2 = ($signed(sext_ln151_142_fu_5439_p1) + $signed(sext_ln151_143_fu_5442_p1));

assign add_ln153_67_fu_5458_p2 = ($signed(sext_ln153_56_fu_5454_p1) + $signed(select_ln126_12_fu_4587_p3));

assign add_ln153_68_fu_5464_p2 = ($signed(sext_ln151_141_fu_5436_p1) + $signed(sext_ln151_140_fu_5433_p1));

assign add_ln153_69_fu_5474_p2 = ($signed(sext_ln151_139_fu_5430_p1) + $signed(sext_ln153_55_fu_5445_p1));

assign add_ln153_6_fu_4748_p2 = ($signed(sext_ln151_92_fu_4739_p1) + $signed(sext_ln151_93_fu_4742_p1));

assign add_ln153_70_fu_5484_p2 = ($signed(sext_ln153_58_fu_5480_p1) + $signed(sext_ln153_57_fu_5470_p1));

assign add_ln153_71_fu_5494_p2 = ($signed(sext_ln153_59_fu_5490_p1) + $signed(add_ln153_67_fu_5458_p2));

assign add_ln153_72_fu_5518_p2 = ($signed(sext_ln151_147_fu_5509_p1) + $signed(sext_ln151_148_fu_5512_p1));

assign add_ln153_73_fu_5528_p2 = ($signed(sext_ln153_61_fu_5524_p1) + $signed(select_ln126_11_fu_4581_p3));

assign add_ln153_74_fu_5534_p2 = ($signed(sext_ln151_146_fu_5506_p1) + $signed(sext_ln151_145_fu_5503_p1));

assign add_ln153_75_fu_5544_p2 = ($signed(sext_ln151_144_fu_5500_p1) + $signed(sext_ln153_60_fu_5515_p1));

assign add_ln153_76_fu_5554_p2 = ($signed(sext_ln153_63_fu_5550_p1) + $signed(sext_ln153_62_fu_5540_p1));

assign add_ln153_77_fu_5564_p2 = ($signed(sext_ln153_64_fu_5560_p1) + $signed(add_ln153_73_fu_5528_p2));

assign add_ln153_78_fu_5588_p2 = ($signed(sext_ln151_152_fu_5579_p1) + $signed(sext_ln151_153_fu_5582_p1));

assign add_ln153_79_fu_5598_p2 = ($signed(sext_ln153_66_fu_5594_p1) + $signed(select_ln126_10_fu_4575_p3));

assign add_ln153_7_fu_4788_p2 = ($signed(sext_ln153_9_fu_4784_p1) + $signed(sext_ln153_6_fu_4754_p1));

assign add_ln153_80_fu_5604_p2 = ($signed(sext_ln151_151_fu_5576_p1) + $signed(sext_ln151_150_fu_5573_p1));

assign add_ln153_81_fu_5614_p2 = ($signed(sext_ln151_149_fu_5570_p1) + $signed(sext_ln153_65_fu_5585_p1));

assign add_ln153_82_fu_5624_p2 = ($signed(sext_ln153_68_fu_5620_p1) + $signed(sext_ln153_67_fu_5610_p1));

assign add_ln153_83_fu_5634_p2 = ($signed(sext_ln153_69_fu_5630_p1) + $signed(add_ln153_79_fu_5598_p2));

assign add_ln153_84_fu_5658_p2 = ($signed(sext_ln151_157_fu_5649_p1) + $signed(sext_ln151_158_fu_5652_p1));

assign add_ln153_85_fu_5668_p2 = ($signed(sext_ln153_71_fu_5664_p1) + $signed(select_ln126_9_fu_4569_p3));

assign add_ln153_86_fu_5674_p2 = ($signed(sext_ln151_156_fu_5646_p1) + $signed(sext_ln151_155_fu_5643_p1));

assign add_ln153_87_fu_5684_p2 = ($signed(sext_ln151_154_fu_5640_p1) + $signed(sext_ln153_70_fu_5655_p1));

assign add_ln153_88_fu_5694_p2 = ($signed(sext_ln153_73_fu_5690_p1) + $signed(sext_ln153_72_fu_5680_p1));

assign add_ln153_89_fu_5704_p2 = ($signed(sext_ln153_74_fu_5700_p1) + $signed(add_ln153_85_fu_5668_p2));

assign add_ln153_8_fu_4758_p2 = ($signed(sext_ln151_91_fu_4736_p1) + $signed(sext_ln151_90_fu_4733_p1));

assign add_ln153_90_fu_5728_p2 = ($signed(sext_ln151_162_fu_5719_p1) + $signed(sext_ln151_163_fu_5722_p1));

assign add_ln153_91_fu_5738_p2 = ($signed(sext_ln153_76_fu_5734_p1) + $signed(select_ln126_8_fu_4563_p3));

assign add_ln153_92_fu_5744_p2 = ($signed(sext_ln151_161_fu_5716_p1) + $signed(sext_ln151_160_fu_5713_p1));

assign add_ln153_93_fu_5754_p2 = ($signed(sext_ln151_159_fu_5710_p1) + $signed(sext_ln153_75_fu_5725_p1));

assign add_ln153_94_fu_5764_p2 = ($signed(sext_ln153_78_fu_5760_p1) + $signed(sext_ln153_77_fu_5750_p1));

assign add_ln153_95_fu_5774_p2 = ($signed(sext_ln153_79_fu_5770_p1) + $signed(add_ln153_91_fu_5738_p2));

assign add_ln153_96_fu_5798_p2 = ($signed(sext_ln151_167_fu_5789_p1) + $signed(sext_ln151_168_fu_5792_p1));

assign add_ln153_97_fu_5808_p2 = ($signed(sext_ln153_81_fu_5804_p1) + $signed(select_ln126_7_fu_4557_p3));

assign add_ln153_98_fu_5814_p2 = ($signed(sext_ln151_166_fu_5786_p1) + $signed(sext_ln151_165_fu_5783_p1));

assign add_ln153_99_fu_5824_p2 = ($signed(sext_ln151_164_fu_5780_p1) + $signed(sext_ln153_80_fu_5795_p1));

assign add_ln153_9_fu_4768_p2 = ($signed(sext_ln151_89_fu_4730_p1) + $signed(sext_ln153_5_fu_4745_p1));

assign add_ln153_fu_4678_p2 = ($signed(sext_ln151_87_fu_4669_p1) + $signed(sext_ln151_88_fu_4672_p1));

assign and_ln120_fu_961_p2 = (xor_ln120_fu_950_p2 & icmp_ln122_fu_955_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln161_reg_6959_pp0_iter4_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_652 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_749 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_q_bias_arr_657_address0 = zext_ln121_fu_1028_p1;

assign attn_inst_matmul_gen_q_weight_arr_656_address0 = zext_ln151_4_fu_1052_p1;

assign icmp_ln120_fu_881_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_887_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_955_p2 = ((ap_sig_allocacmp_cit_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_1057_p2 = ((select_ln121_reg_6904 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_1066_p2 = ((select_ln121_reg_6904 == 6'd31) ? 1'b1 : 1'b0);

assign mac_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{add_ln153_143_reg_7869}, {add_ln153_137_reg_7864}}, {add_ln153_131_reg_7859}}, {add_ln153_125_reg_7854}}, {add_ln153_119_reg_7849}}, {add_ln153_113_reg_7844}}, {add_ln153_107_reg_7839}}, {add_ln153_101_reg_7834}}, {add_ln153_95_reg_7829}}, {add_ln153_89_reg_7824}}, {add_ln153_83_reg_7819}}, {add_ln153_77_reg_7814}}, {add_ln153_71_reg_7809}}, {add_ln153_65_reg_7804}}, {add_ln153_59_reg_7799}}, {add_ln153_53_reg_7794}}, {add_ln153_47_reg_7789}}, {add_ln153_41_reg_7784}}, {add_ln153_35_reg_7779}}, {add_ln153_29_reg_7774}}, {add_ln153_23_reg_7769}}, {add_ln153_17_reg_7764}}, {add_ln153_11_reg_7759}}, {add_ln153_5_reg_7754}};

assign mul_res_595_fu_1353_p0 = sext_ln151_3_fu_1341_p1;

assign mul_res_595_fu_1353_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_596_fu_1385_p0 = sext_ln151_5_fu_1373_p1;

assign mul_res_596_fu_1385_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_597_fu_1417_p0 = sext_ln151_7_fu_1405_p1;

assign mul_res_597_fu_1417_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_598_fu_1449_p0 = sext_ln151_9_fu_1437_p1;

assign mul_res_598_fu_1449_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_599_fu_1481_p0 = sext_ln151_11_fu_1469_p1;

assign mul_res_599_fu_1481_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_600_fu_1509_p0 = sext_ln151_12_fu_1497_p1;

assign mul_res_600_fu_1509_p1 = sext_ln151_fu_1305_p1;

assign mul_res_601_fu_1537_p0 = sext_ln151_13_fu_1525_p1;

assign mul_res_601_fu_1537_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_602_fu_1565_p0 = sext_ln151_14_fu_1553_p1;

assign mul_res_602_fu_1565_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_603_fu_1593_p0 = sext_ln151_15_fu_1581_p1;

assign mul_res_603_fu_1593_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_604_fu_1621_p0 = sext_ln151_16_fu_1609_p1;

assign mul_res_604_fu_1621_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_605_fu_1649_p0 = sext_ln151_17_fu_1637_p1;

assign mul_res_605_fu_1649_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_606_fu_1677_p0 = sext_ln151_18_fu_1665_p1;

assign mul_res_606_fu_1677_p1 = sext_ln151_fu_1305_p1;

assign mul_res_607_fu_1705_p0 = sext_ln151_19_fu_1693_p1;

assign mul_res_607_fu_1705_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_608_fu_1733_p0 = sext_ln151_20_fu_1721_p1;

assign mul_res_608_fu_1733_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_609_fu_1761_p0 = sext_ln151_21_fu_1749_p1;

assign mul_res_609_fu_1761_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_610_fu_1789_p0 = sext_ln151_22_fu_1777_p1;

assign mul_res_610_fu_1789_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_611_fu_1817_p0 = sext_ln151_23_fu_1805_p1;

assign mul_res_611_fu_1817_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_612_fu_1845_p0 = sext_ln151_24_fu_1833_p1;

assign mul_res_612_fu_1845_p1 = sext_ln151_fu_1305_p1;

assign mul_res_613_fu_1873_p0 = sext_ln151_25_fu_1861_p1;

assign mul_res_613_fu_1873_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_614_fu_1901_p0 = sext_ln151_26_fu_1889_p1;

assign mul_res_614_fu_1901_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_615_fu_1929_p0 = sext_ln151_27_fu_1917_p1;

assign mul_res_615_fu_1929_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_616_fu_1957_p0 = sext_ln151_28_fu_1945_p1;

assign mul_res_616_fu_1957_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_617_fu_1985_p0 = sext_ln151_29_fu_1973_p1;

assign mul_res_617_fu_1985_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_618_fu_2013_p0 = sext_ln151_30_fu_2001_p1;

assign mul_res_618_fu_2013_p1 = sext_ln151_fu_1305_p1;

assign mul_res_619_fu_2041_p0 = sext_ln151_31_fu_2029_p1;

assign mul_res_619_fu_2041_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_620_fu_2069_p0 = sext_ln151_32_fu_2057_p1;

assign mul_res_620_fu_2069_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_621_fu_2097_p0 = sext_ln151_33_fu_2085_p1;

assign mul_res_621_fu_2097_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_622_fu_2125_p0 = sext_ln151_34_fu_2113_p1;

assign mul_res_622_fu_2125_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_623_fu_2153_p0 = sext_ln151_35_fu_2141_p1;

assign mul_res_623_fu_2153_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_624_fu_2181_p0 = sext_ln151_36_fu_2169_p1;

assign mul_res_624_fu_2181_p1 = sext_ln151_fu_1305_p1;

assign mul_res_625_fu_2209_p0 = sext_ln151_37_fu_2197_p1;

assign mul_res_625_fu_2209_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_626_fu_2237_p0 = sext_ln151_38_fu_2225_p1;

assign mul_res_626_fu_2237_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_627_fu_2265_p0 = sext_ln151_39_fu_2253_p1;

assign mul_res_627_fu_2265_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_628_fu_2293_p0 = sext_ln151_40_fu_2281_p1;

assign mul_res_628_fu_2293_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_629_fu_2321_p0 = sext_ln151_41_fu_2309_p1;

assign mul_res_629_fu_2321_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_630_fu_2349_p0 = sext_ln151_42_fu_2337_p1;

assign mul_res_630_fu_2349_p1 = sext_ln151_fu_1305_p1;

assign mul_res_631_fu_2377_p0 = sext_ln151_43_fu_2365_p1;

assign mul_res_631_fu_2377_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_632_fu_2405_p0 = sext_ln151_44_fu_2393_p1;

assign mul_res_632_fu_2405_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_633_fu_2433_p0 = sext_ln151_45_fu_2421_p1;

assign mul_res_633_fu_2433_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_634_fu_2461_p0 = sext_ln151_46_fu_2449_p1;

assign mul_res_634_fu_2461_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_635_fu_2489_p0 = sext_ln151_47_fu_2477_p1;

assign mul_res_635_fu_2489_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_636_fu_2517_p0 = sext_ln151_48_fu_2505_p1;

assign mul_res_636_fu_2517_p1 = sext_ln151_fu_1305_p1;

assign mul_res_637_fu_2545_p0 = sext_ln151_49_fu_2533_p1;

assign mul_res_637_fu_2545_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_638_fu_2573_p0 = sext_ln151_50_fu_2561_p1;

assign mul_res_638_fu_2573_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_639_fu_2601_p0 = sext_ln151_51_fu_2589_p1;

assign mul_res_639_fu_2601_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_640_fu_2629_p0 = sext_ln151_52_fu_2617_p1;

assign mul_res_640_fu_2629_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_641_fu_2657_p0 = sext_ln151_53_fu_2645_p1;

assign mul_res_641_fu_2657_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_642_fu_2685_p0 = sext_ln151_54_fu_2673_p1;

assign mul_res_642_fu_2685_p1 = sext_ln151_fu_1305_p1;

assign mul_res_643_fu_2713_p0 = sext_ln151_55_fu_2701_p1;

assign mul_res_643_fu_2713_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_644_fu_2741_p0 = sext_ln151_56_fu_2729_p1;

assign mul_res_644_fu_2741_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_645_fu_2769_p0 = sext_ln151_57_fu_2757_p1;

assign mul_res_645_fu_2769_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_646_fu_2797_p0 = sext_ln151_58_fu_2785_p1;

assign mul_res_646_fu_2797_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_647_fu_2825_p0 = sext_ln151_59_fu_2813_p1;

assign mul_res_647_fu_2825_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_648_fu_2853_p0 = sext_ln151_60_fu_2841_p1;

assign mul_res_648_fu_2853_p1 = sext_ln151_fu_1305_p1;

assign mul_res_649_fu_2881_p0 = sext_ln151_61_fu_2869_p1;

assign mul_res_649_fu_2881_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_650_fu_2909_p0 = sext_ln151_62_fu_2897_p1;

assign mul_res_650_fu_2909_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_651_fu_2937_p0 = sext_ln151_63_fu_2925_p1;

assign mul_res_651_fu_2937_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_652_fu_2965_p0 = sext_ln151_64_fu_2953_p1;

assign mul_res_652_fu_2965_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_653_fu_2993_p0 = sext_ln151_65_fu_2981_p1;

assign mul_res_653_fu_2993_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_654_fu_3021_p0 = sext_ln151_66_fu_3009_p1;

assign mul_res_654_fu_3021_p1 = sext_ln151_fu_1305_p1;

assign mul_res_655_fu_3049_p0 = sext_ln151_67_fu_3037_p1;

assign mul_res_655_fu_3049_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_656_fu_3077_p0 = sext_ln151_68_fu_3065_p1;

assign mul_res_656_fu_3077_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_657_fu_3105_p0 = sext_ln151_69_fu_3093_p1;

assign mul_res_657_fu_3105_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_658_fu_3133_p0 = sext_ln151_70_fu_3121_p1;

assign mul_res_658_fu_3133_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_659_fu_3161_p0 = sext_ln151_71_fu_3149_p1;

assign mul_res_659_fu_3161_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_660_fu_3189_p0 = sext_ln151_72_fu_3177_p1;

assign mul_res_660_fu_3189_p1 = sext_ln151_fu_1305_p1;

assign mul_res_661_fu_3217_p0 = sext_ln151_73_fu_3205_p1;

assign mul_res_661_fu_3217_p1 = sext_ln151_2_fu_1337_p1;

assign mul_res_662_fu_3245_p0 = sext_ln151_74_fu_3233_p1;

assign mul_res_662_fu_3245_p1 = sext_ln151_4_fu_1369_p1;

assign mul_res_663_fu_3273_p0 = sext_ln151_75_fu_3261_p1;

assign mul_res_663_fu_3273_p1 = sext_ln151_6_fu_1401_p1;

assign mul_res_664_fu_3301_p0 = sext_ln151_76_fu_3289_p1;

assign mul_res_664_fu_3301_p1 = sext_ln151_8_fu_1433_p1;

assign mul_res_665_fu_3329_p0 = sext_ln151_77_fu_3317_p1;

assign mul_res_665_fu_3329_p1 = sext_ln151_10_fu_1465_p1;

assign mul_res_666_fu_3347_p0 = sext_ln151_1_fu_1309_p1;

assign mul_res_666_fu_3347_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_667_fu_3365_p0 = sext_ln151_3_fu_1341_p1;

assign mul_res_667_fu_3365_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_668_fu_3383_p0 = sext_ln151_5_fu_1373_p1;

assign mul_res_668_fu_3383_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_669_fu_3401_p0 = sext_ln151_7_fu_1405_p1;

assign mul_res_669_fu_3401_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_670_fu_3419_p0 = sext_ln151_9_fu_1437_p1;

assign mul_res_670_fu_3419_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_671_fu_3437_p0 = sext_ln151_11_fu_1469_p1;

assign mul_res_671_fu_3437_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_672_fu_3451_p0 = sext_ln151_12_fu_1497_p1;

assign mul_res_672_fu_3451_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_673_fu_3465_p0 = sext_ln151_13_fu_1525_p1;

assign mul_res_673_fu_3465_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_674_fu_3479_p0 = sext_ln151_14_fu_1553_p1;

assign mul_res_674_fu_3479_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_675_fu_3493_p0 = sext_ln151_15_fu_1581_p1;

assign mul_res_675_fu_3493_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_676_fu_3507_p0 = sext_ln151_16_fu_1609_p1;

assign mul_res_676_fu_3507_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_677_fu_3521_p0 = sext_ln151_17_fu_1637_p1;

assign mul_res_677_fu_3521_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_678_fu_3535_p0 = sext_ln151_18_fu_1665_p1;

assign mul_res_678_fu_3535_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_679_fu_3549_p0 = sext_ln151_19_fu_1693_p1;

assign mul_res_679_fu_3549_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_680_fu_3563_p0 = sext_ln151_20_fu_1721_p1;

assign mul_res_680_fu_3563_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_681_fu_3577_p0 = sext_ln151_21_fu_1749_p1;

assign mul_res_681_fu_3577_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_682_fu_3591_p0 = sext_ln151_22_fu_1777_p1;

assign mul_res_682_fu_3591_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_683_fu_3605_p0 = sext_ln151_23_fu_1805_p1;

assign mul_res_683_fu_3605_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_684_fu_3619_p0 = sext_ln151_24_fu_1833_p1;

assign mul_res_684_fu_3619_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_685_fu_3633_p0 = sext_ln151_25_fu_1861_p1;

assign mul_res_685_fu_3633_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_686_fu_3647_p0 = sext_ln151_26_fu_1889_p1;

assign mul_res_686_fu_3647_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_687_fu_3661_p0 = sext_ln151_27_fu_1917_p1;

assign mul_res_687_fu_3661_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_688_fu_3675_p0 = sext_ln151_28_fu_1945_p1;

assign mul_res_688_fu_3675_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_689_fu_3689_p0 = sext_ln151_29_fu_1973_p1;

assign mul_res_689_fu_3689_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_690_fu_3703_p0 = sext_ln151_30_fu_2001_p1;

assign mul_res_690_fu_3703_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_691_fu_3717_p0 = sext_ln151_31_fu_2029_p1;

assign mul_res_691_fu_3717_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_692_fu_3731_p0 = sext_ln151_32_fu_2057_p1;

assign mul_res_692_fu_3731_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_693_fu_3745_p0 = sext_ln151_33_fu_2085_p1;

assign mul_res_693_fu_3745_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_694_fu_3759_p0 = sext_ln151_34_fu_2113_p1;

assign mul_res_694_fu_3759_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_695_fu_3773_p0 = sext_ln151_35_fu_2141_p1;

assign mul_res_695_fu_3773_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_696_fu_3787_p0 = sext_ln151_36_fu_2169_p1;

assign mul_res_696_fu_3787_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_697_fu_3801_p0 = sext_ln151_37_fu_2197_p1;

assign mul_res_697_fu_3801_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_698_fu_3815_p0 = sext_ln151_38_fu_2225_p1;

assign mul_res_698_fu_3815_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_699_fu_3829_p0 = sext_ln151_39_fu_2253_p1;

assign mul_res_699_fu_3829_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_700_fu_3843_p0 = sext_ln151_40_fu_2281_p1;

assign mul_res_700_fu_3843_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_701_fu_3857_p0 = sext_ln151_41_fu_2309_p1;

assign mul_res_701_fu_3857_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_702_fu_3871_p0 = sext_ln151_42_fu_2337_p1;

assign mul_res_702_fu_3871_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_703_fu_3885_p0 = sext_ln151_43_fu_2365_p1;

assign mul_res_703_fu_3885_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_704_fu_3899_p0 = sext_ln151_44_fu_2393_p1;

assign mul_res_704_fu_3899_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_705_fu_3913_p0 = sext_ln151_45_fu_2421_p1;

assign mul_res_705_fu_3913_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_706_fu_3927_p0 = sext_ln151_46_fu_2449_p1;

assign mul_res_706_fu_3927_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_707_fu_3941_p0 = sext_ln151_47_fu_2477_p1;

assign mul_res_707_fu_3941_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_708_fu_3955_p0 = sext_ln151_48_fu_2505_p1;

assign mul_res_708_fu_3955_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_709_fu_3969_p0 = sext_ln151_49_fu_2533_p1;

assign mul_res_709_fu_3969_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_710_fu_3983_p0 = sext_ln151_50_fu_2561_p1;

assign mul_res_710_fu_3983_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_711_fu_3997_p0 = sext_ln151_51_fu_2589_p1;

assign mul_res_711_fu_3997_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_712_fu_4011_p0 = sext_ln151_52_fu_2617_p1;

assign mul_res_712_fu_4011_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_713_fu_4025_p0 = sext_ln151_53_fu_2645_p1;

assign mul_res_713_fu_4025_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_714_fu_4039_p0 = sext_ln151_54_fu_2673_p1;

assign mul_res_714_fu_4039_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_715_fu_4053_p0 = sext_ln151_55_fu_2701_p1;

assign mul_res_715_fu_4053_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_716_fu_4067_p0 = sext_ln151_56_fu_2729_p1;

assign mul_res_716_fu_4067_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_717_fu_4081_p0 = sext_ln151_57_fu_2757_p1;

assign mul_res_717_fu_4081_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_718_fu_4095_p0 = sext_ln151_58_fu_2785_p1;

assign mul_res_718_fu_4095_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_719_fu_4109_p0 = sext_ln151_59_fu_2813_p1;

assign mul_res_719_fu_4109_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_720_fu_4123_p0 = sext_ln151_60_fu_2841_p1;

assign mul_res_720_fu_4123_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_721_fu_4137_p0 = sext_ln151_61_fu_2869_p1;

assign mul_res_721_fu_4137_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_722_fu_4151_p0 = sext_ln151_62_fu_2897_p1;

assign mul_res_722_fu_4151_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_723_fu_4165_p0 = sext_ln151_63_fu_2925_p1;

assign mul_res_723_fu_4165_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_724_fu_4179_p0 = sext_ln151_64_fu_2953_p1;

assign mul_res_724_fu_4179_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_725_fu_4193_p0 = sext_ln151_65_fu_2981_p1;

assign mul_res_725_fu_4193_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_726_fu_4207_p0 = sext_ln151_66_fu_3009_p1;

assign mul_res_726_fu_4207_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_727_fu_4221_p0 = sext_ln151_67_fu_3037_p1;

assign mul_res_727_fu_4221_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_728_fu_4235_p0 = sext_ln151_68_fu_3065_p1;

assign mul_res_728_fu_4235_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_729_fu_4249_p0 = sext_ln151_69_fu_3093_p1;

assign mul_res_729_fu_4249_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_730_fu_4263_p0 = sext_ln151_70_fu_3121_p1;

assign mul_res_730_fu_4263_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_731_fu_4277_p0 = sext_ln151_71_fu_3149_p1;

assign mul_res_731_fu_4277_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_732_fu_4291_p0 = sext_ln151_72_fu_3177_p1;

assign mul_res_732_fu_4291_p1 = sext_ln151_78_fu_3335_p1;

assign mul_res_733_fu_4305_p0 = sext_ln151_73_fu_3205_p1;

assign mul_res_733_fu_4305_p1 = sext_ln151_79_fu_3353_p1;

assign mul_res_734_fu_4319_p0 = sext_ln151_74_fu_3233_p1;

assign mul_res_734_fu_4319_p1 = sext_ln151_80_fu_3371_p1;

assign mul_res_735_fu_4333_p0 = sext_ln151_75_fu_3261_p1;

assign mul_res_735_fu_4333_p1 = sext_ln151_81_fu_3389_p1;

assign mul_res_736_fu_4347_p0 = sext_ln151_76_fu_3289_p1;

assign mul_res_736_fu_4347_p1 = sext_ln151_82_fu_3407_p1;

assign mul_res_737_fu_4361_p0 = sext_ln151_77_fu_3317_p1;

assign mul_res_737_fu_4361_p1 = sext_ln151_83_fu_3425_p1;

assign mul_res_fu_1321_p0 = sext_ln151_1_fu_1309_p1;

assign mul_res_fu_1321_p1 = sext_ln151_fu_1305_p1;

assign or_ln121_fu_973_p2 = (icmp_ln121_reg_6897 | and_ln120_fu_961_p2);

assign select_ln120_fu_943_p3 = ((icmp_ln121_reg_6897[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln121_7_fu_986_p3 = ((and_ln120_fu_961_p2[0:0] == 1'b1) ? add_ln121_fu_967_p2 : select_ln120_fu_943_p3);

assign select_ln121_8_fu_899_p3 = ((icmp_ln121_fu_887_p2[0:0] == 1'b1) ? 11'd1 : add_ln121_4_fu_893_p2);

assign select_ln121_fu_978_p3 = ((or_ln121_fu_973_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign select_ln126_10_fu_4575_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6969 : p_0_0_0_112390_fu_720);

assign select_ln126_11_fu_4581_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6963 : p_0_0_0388_fu_716);

assign select_ln126_12_fu_4587_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_4511_p1 : p_0_0_0_11386_fu_712);

assign select_ln126_13_fu_4594_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_9_reg_7023 : p_0_0_0_10384_fu_708);

assign select_ln126_14_fu_4600_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_8_reg_7017 : p_0_0_0_9382_fu_704);

assign select_ln126_15_fu_4606_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_7_reg_7011 : p_0_0_0_8380_fu_700);

assign select_ln126_16_fu_4612_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_6_reg_7005 : p_0_0_0_7378_fu_696);

assign select_ln126_17_fu_4618_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_5_reg_6999 : p_0_0_0_6376_fu_692);

assign select_ln126_18_fu_4624_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_4_reg_6993 : p_0_0_0_5374_fu_688);

assign select_ln126_19_fu_4630_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_3_reg_6987 : p_0_0_0_4372_fu_684);

assign select_ln126_1_fu_4521_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_9_reg_7023 : p_0_0_0_10408_fu_756);

assign select_ln126_20_fu_4636_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_2_reg_6981 : p_0_0_0_3370_fu_680);

assign select_ln126_21_fu_4642_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_1_reg_6975 : p_0_0_0_2368_fu_676);

assign select_ln126_22_fu_4648_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6969 : p_0_0_0_112366_fu_672);

assign select_ln126_23_fu_4654_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6963 : p_0_0_0364_fu_668);

assign select_ln126_2_fu_4527_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_8_reg_7017 : p_0_0_0_9406_fu_752);

assign select_ln126_3_fu_4533_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_7_reg_7011 : p_0_0_0_8404_fu_748);

assign select_ln126_4_fu_4539_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_6_reg_7005 : p_0_0_0_7402_fu_744);

assign select_ln126_5_fu_4545_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_5_reg_6999 : p_0_0_0_6400_fu_740);

assign select_ln126_6_fu_4551_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_4_reg_6993 : p_0_0_0_5398_fu_736);

assign select_ln126_7_fu_4557_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_3_reg_6987 : p_0_0_0_4396_fu_732);

assign select_ln126_8_fu_4563_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_2_reg_6981 : p_0_0_0_3394_fu_728);

assign select_ln126_9_fu_4569_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? tmp_1_reg_6975 : p_0_0_0_2392_fu_724);

assign select_ln126_fu_4514_p3 = ((icmp_ln126_reg_6931_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_4511_p1 : p_0_0_0_11410_fu_760);

assign sext_ln131_fu_4511_p1 = $signed(tmp_83_reg_7029);

assign sext_ln151_100_fu_4873_p1 = mul_res_613_reg_7129;

assign sext_ln151_101_fu_4876_p1 = mul_res_614_reg_7134;

assign sext_ln151_102_fu_4879_p1 = mul_res_615_reg_7139;

assign sext_ln151_103_fu_4882_p1 = mul_res_616_reg_7144;

assign sext_ln151_104_fu_4940_p1 = mul_res_618_reg_7154;

assign sext_ln151_105_fu_4943_p1 = mul_res_619_reg_7159;

assign sext_ln151_106_fu_4946_p1 = mul_res_620_reg_7164;

assign sext_ln151_107_fu_4949_p1 = mul_res_621_reg_7169;

assign sext_ln151_108_fu_4952_p1 = mul_res_622_reg_7174;

assign sext_ln151_109_fu_5010_p1 = mul_res_624_reg_7184;

assign sext_ln151_10_fu_1465_p1 = $signed(trunc_ln137_5_fu_1231_p4);

assign sext_ln151_110_fu_5013_p1 = mul_res_625_reg_7189;

assign sext_ln151_111_fu_5016_p1 = mul_res_626_reg_7194;

assign sext_ln151_112_fu_5019_p1 = mul_res_627_reg_7199;

assign sext_ln151_113_fu_5022_p1 = mul_res_628_reg_7204;

assign sext_ln151_114_fu_5080_p1 = mul_res_630_reg_7214;

assign sext_ln151_115_fu_5083_p1 = mul_res_631_reg_7219;

assign sext_ln151_116_fu_5086_p1 = mul_res_632_reg_7224;

assign sext_ln151_117_fu_5089_p1 = mul_res_633_reg_7229;

assign sext_ln151_118_fu_5092_p1 = mul_res_634_reg_7234;

assign sext_ln151_119_fu_5150_p1 = mul_res_636_reg_7244;

assign sext_ln151_11_fu_1469_p1 = $signed(tmp_239_fu_1455_p4);

assign sext_ln151_120_fu_5153_p1 = mul_res_637_reg_7249;

assign sext_ln151_121_fu_5156_p1 = mul_res_638_reg_7254;

assign sext_ln151_122_fu_5159_p1 = mul_res_639_reg_7259;

assign sext_ln151_123_fu_5162_p1 = mul_res_640_reg_7264;

assign sext_ln151_124_fu_5220_p1 = mul_res_642_reg_7274;

assign sext_ln151_125_fu_5223_p1 = mul_res_643_reg_7279;

assign sext_ln151_126_fu_5226_p1 = mul_res_644_reg_7284;

assign sext_ln151_127_fu_5229_p1 = mul_res_645_reg_7289;

assign sext_ln151_128_fu_5232_p1 = mul_res_646_reg_7294;

assign sext_ln151_129_fu_5290_p1 = mul_res_648_reg_7304;

assign sext_ln151_12_fu_1497_p1 = $signed(tmp_240_fu_1487_p4);

assign sext_ln151_130_fu_5293_p1 = mul_res_649_reg_7309;

assign sext_ln151_131_fu_5296_p1 = mul_res_650_reg_7314;

assign sext_ln151_132_fu_5299_p1 = mul_res_651_reg_7319;

assign sext_ln151_133_fu_5302_p1 = mul_res_652_reg_7324;

assign sext_ln151_134_fu_5360_p1 = mul_res_654_reg_7334;

assign sext_ln151_135_fu_5363_p1 = mul_res_655_reg_7339;

assign sext_ln151_136_fu_5366_p1 = mul_res_656_reg_7344;

assign sext_ln151_137_fu_5369_p1 = mul_res_657_reg_7349;

assign sext_ln151_138_fu_5372_p1 = mul_res_658_reg_7354;

assign sext_ln151_139_fu_5430_p1 = mul_res_660_reg_7364;

assign sext_ln151_13_fu_1525_p1 = $signed(tmp_241_fu_1515_p4);

assign sext_ln151_140_fu_5433_p1 = mul_res_661_reg_7369;

assign sext_ln151_141_fu_5436_p1 = mul_res_662_reg_7374;

assign sext_ln151_142_fu_5439_p1 = mul_res_663_reg_7379;

assign sext_ln151_143_fu_5442_p1 = mul_res_664_reg_7384;

assign sext_ln151_144_fu_5500_p1 = mul_res_666_reg_7394;

assign sext_ln151_145_fu_5503_p1 = mul_res_667_reg_7399;

assign sext_ln151_146_fu_5506_p1 = mul_res_668_reg_7404;

assign sext_ln151_147_fu_5509_p1 = mul_res_669_reg_7409;

assign sext_ln151_148_fu_5512_p1 = mul_res_670_reg_7414;

assign sext_ln151_149_fu_5570_p1 = mul_res_672_reg_7424;

assign sext_ln151_14_fu_1553_p1 = $signed(tmp_242_fu_1543_p4);

assign sext_ln151_150_fu_5573_p1 = mul_res_673_reg_7429;

assign sext_ln151_151_fu_5576_p1 = mul_res_674_reg_7434;

assign sext_ln151_152_fu_5579_p1 = mul_res_675_reg_7439;

assign sext_ln151_153_fu_5582_p1 = mul_res_676_reg_7444;

assign sext_ln151_154_fu_5640_p1 = mul_res_678_reg_7454;

assign sext_ln151_155_fu_5643_p1 = mul_res_679_reg_7459;

assign sext_ln151_156_fu_5646_p1 = mul_res_680_reg_7464;

assign sext_ln151_157_fu_5649_p1 = mul_res_681_reg_7469;

assign sext_ln151_158_fu_5652_p1 = mul_res_682_reg_7474;

assign sext_ln151_159_fu_5710_p1 = mul_res_684_reg_7484;

assign sext_ln151_15_fu_1581_p1 = $signed(tmp_243_fu_1571_p4);

assign sext_ln151_160_fu_5713_p1 = mul_res_685_reg_7489;

assign sext_ln151_161_fu_5716_p1 = mul_res_686_reg_7494;

assign sext_ln151_162_fu_5719_p1 = mul_res_687_reg_7499;

assign sext_ln151_163_fu_5722_p1 = mul_res_688_reg_7504;

assign sext_ln151_164_fu_5780_p1 = mul_res_690_reg_7514;

assign sext_ln151_165_fu_5783_p1 = mul_res_691_reg_7519;

assign sext_ln151_166_fu_5786_p1 = mul_res_692_reg_7524;

assign sext_ln151_167_fu_5789_p1 = mul_res_693_reg_7529;

assign sext_ln151_168_fu_5792_p1 = mul_res_694_reg_7534;

assign sext_ln151_169_fu_5850_p1 = mul_res_696_reg_7544;

assign sext_ln151_16_fu_1609_p1 = $signed(tmp_244_fu_1599_p4);

assign sext_ln151_170_fu_5853_p1 = mul_res_697_reg_7549;

assign sext_ln151_171_fu_5856_p1 = mul_res_698_reg_7554;

assign sext_ln151_172_fu_5859_p1 = mul_res_699_reg_7559;

assign sext_ln151_173_fu_5862_p1 = mul_res_700_reg_7564;

assign sext_ln151_174_fu_5920_p1 = mul_res_702_reg_7574;

assign sext_ln151_175_fu_5923_p1 = mul_res_703_reg_7579;

assign sext_ln151_176_fu_5926_p1 = mul_res_704_reg_7584;

assign sext_ln151_177_fu_5929_p1 = mul_res_705_reg_7589;

assign sext_ln151_178_fu_5932_p1 = mul_res_706_reg_7594;

assign sext_ln151_179_fu_5990_p1 = mul_res_708_reg_7604;

assign sext_ln151_17_fu_1637_p1 = $signed(tmp_245_fu_1627_p4);

assign sext_ln151_180_fu_5993_p1 = mul_res_709_reg_7609;

assign sext_ln151_181_fu_5996_p1 = mul_res_710_reg_7614;

assign sext_ln151_182_fu_5999_p1 = mul_res_711_reg_7619;

assign sext_ln151_183_fu_6002_p1 = mul_res_712_reg_7624;

assign sext_ln151_184_fu_6060_p1 = mul_res_714_reg_7634;

assign sext_ln151_185_fu_6063_p1 = mul_res_715_reg_7639;

assign sext_ln151_186_fu_6066_p1 = mul_res_716_reg_7644;

assign sext_ln151_187_fu_6069_p1 = mul_res_717_reg_7649;

assign sext_ln151_188_fu_6072_p1 = mul_res_718_reg_7654;

assign sext_ln151_189_fu_6130_p1 = mul_res_720_reg_7664;

assign sext_ln151_18_fu_1665_p1 = $signed(tmp_246_fu_1655_p4);

assign sext_ln151_190_fu_6133_p1 = mul_res_721_reg_7669;

assign sext_ln151_191_fu_6136_p1 = mul_res_722_reg_7674;

assign sext_ln151_192_fu_6139_p1 = mul_res_723_reg_7679;

assign sext_ln151_193_fu_6142_p1 = mul_res_724_reg_7684;

assign sext_ln151_194_fu_6200_p1 = mul_res_726_reg_7694;

assign sext_ln151_195_fu_6203_p1 = mul_res_727_reg_7699;

assign sext_ln151_196_fu_6206_p1 = mul_res_728_reg_7704;

assign sext_ln151_197_fu_6209_p1 = mul_res_729_reg_7709;

assign sext_ln151_198_fu_6212_p1 = mul_res_730_reg_7714;

assign sext_ln151_199_fu_6270_p1 = mul_res_732_reg_7724;

assign sext_ln151_19_fu_1693_p1 = $signed(tmp_247_fu_1683_p4);

assign sext_ln151_1_fu_1309_p1 = $signed(trunc_ln151_fu_1301_p1);

assign sext_ln151_200_fu_6273_p1 = mul_res_733_reg_7729;

assign sext_ln151_201_fu_6276_p1 = mul_res_734_reg_7734;

assign sext_ln151_202_fu_6279_p1 = mul_res_735_reg_7739;

assign sext_ln151_203_fu_6282_p1 = mul_res_736_reg_7744;

assign sext_ln151_20_fu_1721_p1 = $signed(tmp_248_fu_1711_p4);

assign sext_ln151_21_fu_1749_p1 = $signed(tmp_249_fu_1739_p4);

assign sext_ln151_22_fu_1777_p1 = $signed(tmp_250_fu_1767_p4);

assign sext_ln151_23_fu_1805_p1 = $signed(tmp_251_fu_1795_p4);

assign sext_ln151_24_fu_1833_p1 = $signed(tmp_252_fu_1823_p4);

assign sext_ln151_25_fu_1861_p1 = $signed(tmp_253_fu_1851_p4);

assign sext_ln151_26_fu_1889_p1 = $signed(tmp_254_fu_1879_p4);

assign sext_ln151_27_fu_1917_p1 = $signed(tmp_255_fu_1907_p4);

assign sext_ln151_28_fu_1945_p1 = $signed(tmp_256_fu_1935_p4);

assign sext_ln151_29_fu_1973_p1 = $signed(tmp_257_fu_1963_p4);

assign sext_ln151_2_fu_1337_p1 = $signed(trunc_ln137_1_fu_1191_p4);

assign sext_ln151_30_fu_2001_p1 = $signed(tmp_258_fu_1991_p4);

assign sext_ln151_31_fu_2029_p1 = $signed(tmp_259_fu_2019_p4);

assign sext_ln151_32_fu_2057_p1 = $signed(tmp_260_fu_2047_p4);

assign sext_ln151_33_fu_2085_p1 = $signed(tmp_261_fu_2075_p4);

assign sext_ln151_34_fu_2113_p1 = $signed(tmp_262_fu_2103_p4);

assign sext_ln151_35_fu_2141_p1 = $signed(tmp_263_fu_2131_p4);

assign sext_ln151_36_fu_2169_p1 = $signed(tmp_264_fu_2159_p4);

assign sext_ln151_37_fu_2197_p1 = $signed(tmp_265_fu_2187_p4);

assign sext_ln151_38_fu_2225_p1 = $signed(tmp_266_fu_2215_p4);

assign sext_ln151_39_fu_2253_p1 = $signed(tmp_267_fu_2243_p4);

assign sext_ln151_3_fu_1341_p1 = $signed(tmp_235_fu_1327_p4);

assign sext_ln151_40_fu_2281_p1 = $signed(tmp_268_fu_2271_p4);

assign sext_ln151_41_fu_2309_p1 = $signed(tmp_269_fu_2299_p4);

assign sext_ln151_42_fu_2337_p1 = $signed(tmp_270_fu_2327_p4);

assign sext_ln151_43_fu_2365_p1 = $signed(tmp_271_fu_2355_p4);

assign sext_ln151_44_fu_2393_p1 = $signed(tmp_272_fu_2383_p4);

assign sext_ln151_45_fu_2421_p1 = $signed(tmp_273_fu_2411_p4);

assign sext_ln151_46_fu_2449_p1 = $signed(tmp_274_fu_2439_p4);

assign sext_ln151_47_fu_2477_p1 = $signed(tmp_275_fu_2467_p4);

assign sext_ln151_48_fu_2505_p1 = $signed(tmp_276_fu_2495_p4);

assign sext_ln151_49_fu_2533_p1 = $signed(tmp_277_fu_2523_p4);

assign sext_ln151_4_fu_1369_p1 = $signed(trunc_ln137_2_fu_1201_p4);

assign sext_ln151_50_fu_2561_p1 = $signed(tmp_278_fu_2551_p4);

assign sext_ln151_51_fu_2589_p1 = $signed(tmp_279_fu_2579_p4);

assign sext_ln151_52_fu_2617_p1 = $signed(tmp_280_fu_2607_p4);

assign sext_ln151_53_fu_2645_p1 = $signed(tmp_281_fu_2635_p4);

assign sext_ln151_54_fu_2673_p1 = $signed(tmp_282_fu_2663_p4);

assign sext_ln151_55_fu_2701_p1 = $signed(tmp_283_fu_2691_p4);

assign sext_ln151_56_fu_2729_p1 = $signed(tmp_284_fu_2719_p4);

assign sext_ln151_57_fu_2757_p1 = $signed(tmp_285_fu_2747_p4);

assign sext_ln151_58_fu_2785_p1 = $signed(tmp_286_fu_2775_p4);

assign sext_ln151_59_fu_2813_p1 = $signed(tmp_287_fu_2803_p4);

assign sext_ln151_5_fu_1373_p1 = $signed(tmp_236_fu_1359_p4);

assign sext_ln151_60_fu_2841_p1 = $signed(tmp_288_fu_2831_p4);

assign sext_ln151_61_fu_2869_p1 = $signed(tmp_289_fu_2859_p4);

assign sext_ln151_62_fu_2897_p1 = $signed(tmp_290_fu_2887_p4);

assign sext_ln151_63_fu_2925_p1 = $signed(tmp_291_fu_2915_p4);

assign sext_ln151_64_fu_2953_p1 = $signed(tmp_292_fu_2943_p4);

assign sext_ln151_65_fu_2981_p1 = $signed(tmp_293_fu_2971_p4);

assign sext_ln151_66_fu_3009_p1 = $signed(tmp_294_fu_2999_p4);

assign sext_ln151_67_fu_3037_p1 = $signed(tmp_295_fu_3027_p4);

assign sext_ln151_68_fu_3065_p1 = $signed(tmp_296_fu_3055_p4);

assign sext_ln151_69_fu_3093_p1 = $signed(tmp_297_fu_3083_p4);

assign sext_ln151_6_fu_1401_p1 = $signed(trunc_ln137_3_fu_1211_p4);

assign sext_ln151_70_fu_3121_p1 = $signed(tmp_298_fu_3111_p4);

assign sext_ln151_71_fu_3149_p1 = $signed(tmp_299_fu_3139_p4);

assign sext_ln151_72_fu_3177_p1 = $signed(tmp_300_fu_3167_p4);

assign sext_ln151_73_fu_3205_p1 = $signed(tmp_301_fu_3195_p4);

assign sext_ln151_74_fu_3233_p1 = $signed(tmp_302_fu_3223_p4);

assign sext_ln151_75_fu_3261_p1 = $signed(tmp_303_fu_3251_p4);

assign sext_ln151_76_fu_3289_p1 = $signed(tmp_304_fu_3279_p4);

assign sext_ln151_77_fu_3317_p1 = $signed(tmp_305_fu_3307_p4);

assign sext_ln151_78_fu_3335_p1 = $signed(trunc_ln137_6_fu_1241_p4);

assign sext_ln151_79_fu_3353_p1 = $signed(trunc_ln137_7_fu_1251_p4);

assign sext_ln151_7_fu_1405_p1 = $signed(tmp_237_fu_1391_p4);

assign sext_ln151_80_fu_3371_p1 = $signed(trunc_ln137_8_fu_1261_p4);

assign sext_ln151_81_fu_3389_p1 = $signed(trunc_ln137_9_fu_1271_p4);

assign sext_ln151_82_fu_3407_p1 = $signed(trunc_ln137_10_fu_1281_p4);

assign sext_ln151_83_fu_3425_p1 = $signed(trunc_ln137_11_fu_1291_p4);

assign sext_ln151_84_fu_4660_p1 = mul_res_reg_7034;

assign sext_ln151_85_fu_4663_p1 = mul_res_595_reg_7039;

assign sext_ln151_86_fu_4666_p1 = mul_res_596_reg_7044;

assign sext_ln151_87_fu_4669_p1 = mul_res_597_reg_7049;

assign sext_ln151_88_fu_4672_p1 = mul_res_598_reg_7054;

assign sext_ln151_89_fu_4730_p1 = mul_res_600_reg_7064;

assign sext_ln151_8_fu_1433_p1 = $signed(trunc_ln137_4_fu_1221_p4);

assign sext_ln151_90_fu_4733_p1 = mul_res_601_reg_7069;

assign sext_ln151_91_fu_4736_p1 = mul_res_602_reg_7074;

assign sext_ln151_92_fu_4739_p1 = mul_res_603_reg_7079;

assign sext_ln151_93_fu_4742_p1 = mul_res_604_reg_7084;

assign sext_ln151_94_fu_4800_p1 = mul_res_606_reg_7094;

assign sext_ln151_95_fu_4803_p1 = mul_res_607_reg_7099;

assign sext_ln151_96_fu_4806_p1 = mul_res_608_reg_7104;

assign sext_ln151_97_fu_4809_p1 = mul_res_609_reg_7109;

assign sext_ln151_98_fu_4812_p1 = mul_res_610_reg_7114;

assign sext_ln151_99_fu_4870_p1 = mul_res_612_reg_7124;

assign sext_ln151_9_fu_1437_p1 = $signed(tmp_238_fu_1423_p4);

assign sext_ln151_fu_1305_p1 = $signed(trunc_ln137_fu_1187_p1);

assign sext_ln153_100_fu_6075_p1 = mul_res_719_reg_7659;

assign sext_ln153_101_fu_6084_p1 = $signed(add_ln153_120_fu_6078_p2);

assign sext_ln153_102_fu_6100_p1 = $signed(add_ln153_122_fu_6094_p2);

assign sext_ln153_103_fu_6110_p1 = $signed(add_ln153_123_fu_6104_p2);

assign sext_ln153_104_fu_6120_p1 = $signed(add_ln153_124_fu_6114_p2);

assign sext_ln153_105_fu_6145_p1 = mul_res_725_reg_7689;

assign sext_ln153_106_fu_6154_p1 = $signed(add_ln153_126_fu_6148_p2);

assign sext_ln153_107_fu_6170_p1 = $signed(add_ln153_128_fu_6164_p2);

assign sext_ln153_108_fu_6180_p1 = $signed(add_ln153_129_fu_6174_p2);

assign sext_ln153_109_fu_6190_p1 = $signed(add_ln153_130_fu_6184_p2);

assign sext_ln153_10_fu_4815_p1 = mul_res_611_reg_7119;

assign sext_ln153_110_fu_6215_p1 = mul_res_731_reg_7719;

assign sext_ln153_111_fu_6224_p1 = $signed(add_ln153_132_fu_6218_p2);

assign sext_ln153_112_fu_6240_p1 = $signed(add_ln153_134_fu_6234_p2);

assign sext_ln153_113_fu_6250_p1 = $signed(add_ln153_135_fu_6244_p2);

assign sext_ln153_114_fu_6260_p1 = $signed(add_ln153_136_fu_6254_p2);

assign sext_ln153_115_fu_6285_p1 = mul_res_737_reg_7749;

assign sext_ln153_116_fu_6294_p1 = $signed(add_ln153_138_fu_6288_p2);

assign sext_ln153_117_fu_6310_p1 = $signed(add_ln153_140_fu_6304_p2);

assign sext_ln153_118_fu_6320_p1 = $signed(add_ln153_141_fu_6314_p2);

assign sext_ln153_119_fu_6330_p1 = $signed(add_ln153_142_fu_6324_p2);

assign sext_ln153_11_fu_4824_p1 = $signed(add_ln153_12_fu_4818_p2);

assign sext_ln153_12_fu_4834_p1 = $signed(add_ln153_14_fu_4828_p2);

assign sext_ln153_13_fu_4844_p1 = $signed(add_ln153_15_fu_4838_p2);

assign sext_ln153_14_fu_4854_p1 = $signed(add_ln153_16_fu_4848_p2);

assign sext_ln153_15_fu_4885_p1 = mul_res_617_reg_7149;

assign sext_ln153_16_fu_4894_p1 = $signed(add_ln153_18_fu_4888_p2);

assign sext_ln153_17_fu_4904_p1 = $signed(add_ln153_20_fu_4898_p2);

assign sext_ln153_18_fu_4914_p1 = $signed(add_ln153_21_fu_4908_p2);

assign sext_ln153_19_fu_4924_p1 = $signed(add_ln153_22_fu_4918_p2);

assign sext_ln153_1_fu_4684_p1 = $signed(add_ln153_fu_4678_p2);

assign sext_ln153_20_fu_4955_p1 = mul_res_623_reg_7179;

assign sext_ln153_21_fu_4964_p1 = $signed(add_ln153_24_fu_4958_p2);

assign sext_ln153_22_fu_4974_p1 = $signed(add_ln153_26_fu_4968_p2);

assign sext_ln153_23_fu_4984_p1 = $signed(add_ln153_27_fu_4978_p2);

assign sext_ln153_24_fu_4994_p1 = $signed(add_ln153_28_fu_4988_p2);

assign sext_ln153_25_fu_5025_p1 = mul_res_629_reg_7209;

assign sext_ln153_26_fu_5034_p1 = $signed(add_ln153_30_fu_5028_p2);

assign sext_ln153_27_fu_5044_p1 = $signed(add_ln153_32_fu_5038_p2);

assign sext_ln153_28_fu_5054_p1 = $signed(add_ln153_33_fu_5048_p2);

assign sext_ln153_29_fu_5064_p1 = $signed(add_ln153_34_fu_5058_p2);

assign sext_ln153_2_fu_4694_p1 = $signed(add_ln153_2_fu_4688_p2);

assign sext_ln153_30_fu_5095_p1 = mul_res_635_reg_7239;

assign sext_ln153_31_fu_5104_p1 = $signed(add_ln153_36_fu_5098_p2);

assign sext_ln153_32_fu_5114_p1 = $signed(add_ln153_38_fu_5108_p2);

assign sext_ln153_33_fu_5124_p1 = $signed(add_ln153_39_fu_5118_p2);

assign sext_ln153_34_fu_5134_p1 = $signed(add_ln153_40_fu_5128_p2);

assign sext_ln153_35_fu_5165_p1 = mul_res_641_reg_7269;

assign sext_ln153_36_fu_5174_p1 = $signed(add_ln153_42_fu_5168_p2);

assign sext_ln153_37_fu_5184_p1 = $signed(add_ln153_44_fu_5178_p2);

assign sext_ln153_38_fu_5194_p1 = $signed(add_ln153_45_fu_5188_p2);

assign sext_ln153_39_fu_5204_p1 = $signed(add_ln153_46_fu_5198_p2);

assign sext_ln153_3_fu_4704_p1 = $signed(add_ln153_3_fu_4698_p2);

assign sext_ln153_40_fu_5235_p1 = mul_res_647_reg_7299;

assign sext_ln153_41_fu_5244_p1 = $signed(add_ln153_48_fu_5238_p2);

assign sext_ln153_42_fu_5254_p1 = $signed(add_ln153_50_fu_5248_p2);

assign sext_ln153_43_fu_5264_p1 = $signed(add_ln153_51_fu_5258_p2);

assign sext_ln153_44_fu_5274_p1 = $signed(add_ln153_52_fu_5268_p2);

assign sext_ln153_45_fu_5305_p1 = mul_res_653_reg_7329;

assign sext_ln153_46_fu_5314_p1 = $signed(add_ln153_54_fu_5308_p2);

assign sext_ln153_47_fu_5324_p1 = $signed(add_ln153_56_fu_5318_p2);

assign sext_ln153_48_fu_5334_p1 = $signed(add_ln153_57_fu_5328_p2);

assign sext_ln153_49_fu_5344_p1 = $signed(add_ln153_58_fu_5338_p2);

assign sext_ln153_4_fu_4714_p1 = $signed(add_ln153_4_fu_4708_p2);

assign sext_ln153_50_fu_5375_p1 = mul_res_659_reg_7359;

assign sext_ln153_51_fu_5384_p1 = $signed(add_ln153_60_fu_5378_p2);

assign sext_ln153_52_fu_5400_p1 = $signed(add_ln153_62_fu_5394_p2);

assign sext_ln153_53_fu_5410_p1 = $signed(add_ln153_63_fu_5404_p2);

assign sext_ln153_54_fu_5420_p1 = $signed(add_ln153_64_fu_5414_p2);

assign sext_ln153_55_fu_5445_p1 = mul_res_665_reg_7389;

assign sext_ln153_56_fu_5454_p1 = $signed(add_ln153_66_fu_5448_p2);

assign sext_ln153_57_fu_5470_p1 = $signed(add_ln153_68_fu_5464_p2);

assign sext_ln153_58_fu_5480_p1 = $signed(add_ln153_69_fu_5474_p2);

assign sext_ln153_59_fu_5490_p1 = $signed(add_ln153_70_fu_5484_p2);

assign sext_ln153_5_fu_4745_p1 = mul_res_605_reg_7089;

assign sext_ln153_60_fu_5515_p1 = mul_res_671_reg_7419;

assign sext_ln153_61_fu_5524_p1 = $signed(add_ln153_72_fu_5518_p2);

assign sext_ln153_62_fu_5540_p1 = $signed(add_ln153_74_fu_5534_p2);

assign sext_ln153_63_fu_5550_p1 = $signed(add_ln153_75_fu_5544_p2);

assign sext_ln153_64_fu_5560_p1 = $signed(add_ln153_76_fu_5554_p2);

assign sext_ln153_65_fu_5585_p1 = mul_res_677_reg_7449;

assign sext_ln153_66_fu_5594_p1 = $signed(add_ln153_78_fu_5588_p2);

assign sext_ln153_67_fu_5610_p1 = $signed(add_ln153_80_fu_5604_p2);

assign sext_ln153_68_fu_5620_p1 = $signed(add_ln153_81_fu_5614_p2);

assign sext_ln153_69_fu_5630_p1 = $signed(add_ln153_82_fu_5624_p2);

assign sext_ln153_6_fu_4754_p1 = $signed(add_ln153_6_fu_4748_p2);

assign sext_ln153_70_fu_5655_p1 = mul_res_683_reg_7479;

assign sext_ln153_71_fu_5664_p1 = $signed(add_ln153_84_fu_5658_p2);

assign sext_ln153_72_fu_5680_p1 = $signed(add_ln153_86_fu_5674_p2);

assign sext_ln153_73_fu_5690_p1 = $signed(add_ln153_87_fu_5684_p2);

assign sext_ln153_74_fu_5700_p1 = $signed(add_ln153_88_fu_5694_p2);

assign sext_ln153_75_fu_5725_p1 = mul_res_689_reg_7509;

assign sext_ln153_76_fu_5734_p1 = $signed(add_ln153_90_fu_5728_p2);

assign sext_ln153_77_fu_5750_p1 = $signed(add_ln153_92_fu_5744_p2);

assign sext_ln153_78_fu_5760_p1 = $signed(add_ln153_93_fu_5754_p2);

assign sext_ln153_79_fu_5770_p1 = $signed(add_ln153_94_fu_5764_p2);

assign sext_ln153_7_fu_4764_p1 = $signed(add_ln153_8_fu_4758_p2);

assign sext_ln153_80_fu_5795_p1 = mul_res_695_reg_7539;

assign sext_ln153_81_fu_5804_p1 = $signed(add_ln153_96_fu_5798_p2);

assign sext_ln153_82_fu_5820_p1 = $signed(add_ln153_98_fu_5814_p2);

assign sext_ln153_83_fu_5830_p1 = $signed(add_ln153_99_fu_5824_p2);

assign sext_ln153_84_fu_5840_p1 = $signed(add_ln153_100_fu_5834_p2);

assign sext_ln153_85_fu_5865_p1 = mul_res_701_reg_7569;

assign sext_ln153_86_fu_5874_p1 = $signed(add_ln153_102_fu_5868_p2);

assign sext_ln153_87_fu_5890_p1 = $signed(add_ln153_104_fu_5884_p2);

assign sext_ln153_88_fu_5900_p1 = $signed(add_ln153_105_fu_5894_p2);

assign sext_ln153_89_fu_5910_p1 = $signed(add_ln153_106_fu_5904_p2);

assign sext_ln153_8_fu_4774_p1 = $signed(add_ln153_9_fu_4768_p2);

assign sext_ln153_90_fu_5935_p1 = mul_res_707_reg_7599;

assign sext_ln153_91_fu_5944_p1 = $signed(add_ln153_108_fu_5938_p2);

assign sext_ln153_92_fu_5960_p1 = $signed(add_ln153_110_fu_5954_p2);

assign sext_ln153_93_fu_5970_p1 = $signed(add_ln153_111_fu_5964_p2);

assign sext_ln153_94_fu_5980_p1 = $signed(add_ln153_112_fu_5974_p2);

assign sext_ln153_95_fu_6005_p1 = mul_res_713_reg_7629;

assign sext_ln153_96_fu_6014_p1 = $signed(add_ln153_114_fu_6008_p2);

assign sext_ln153_97_fu_6030_p1 = $signed(add_ln153_116_fu_6024_p2);

assign sext_ln153_98_fu_6040_p1 = $signed(add_ln153_117_fu_6034_p2);

assign sext_ln153_99_fu_6050_p1 = $signed(add_ln153_118_fu_6044_p2);

assign sext_ln153_9_fu_4784_p1 = $signed(add_ln153_10_fu_4778_p2);

assign sext_ln153_fu_4675_p1 = mul_res_599_reg_7059;

assign start_out = real_start;

assign tmp_235_fu_1327_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[5:3]}};

assign tmp_236_fu_1359_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[8:6]}};

assign tmp_237_fu_1391_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[11:9]}};

assign tmp_238_fu_1423_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[14:12]}};

assign tmp_239_fu_1455_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[17:15]}};

assign tmp_240_fu_1487_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[20:18]}};

assign tmp_241_fu_1515_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[23:21]}};

assign tmp_242_fu_1543_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[26:24]}};

assign tmp_243_fu_1571_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[29:27]}};

assign tmp_244_fu_1599_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[32:30]}};

assign tmp_245_fu_1627_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[35:33]}};

assign tmp_246_fu_1655_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[38:36]}};

assign tmp_247_fu_1683_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[41:39]}};

assign tmp_248_fu_1711_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[44:42]}};

assign tmp_249_fu_1739_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[47:45]}};

assign tmp_250_fu_1767_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[50:48]}};

assign tmp_251_fu_1795_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[53:51]}};

assign tmp_252_fu_1823_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[56:54]}};

assign tmp_253_fu_1851_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[59:57]}};

assign tmp_254_fu_1879_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[62:60]}};

assign tmp_255_fu_1907_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[65:63]}};

assign tmp_256_fu_1935_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[68:66]}};

assign tmp_257_fu_1963_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[71:69]}};

assign tmp_258_fu_1991_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[74:72]}};

assign tmp_259_fu_2019_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[77:75]}};

assign tmp_260_fu_2047_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[80:78]}};

assign tmp_261_fu_2075_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[83:81]}};

assign tmp_262_fu_2103_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[86:84]}};

assign tmp_263_fu_2131_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[89:87]}};

assign tmp_264_fu_2159_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[92:90]}};

assign tmp_265_fu_2187_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[95:93]}};

assign tmp_266_fu_2215_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[98:96]}};

assign tmp_267_fu_2243_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[101:99]}};

assign tmp_268_fu_2271_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[104:102]}};

assign tmp_269_fu_2299_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[107:105]}};

assign tmp_270_fu_2327_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[110:108]}};

assign tmp_271_fu_2355_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[113:111]}};

assign tmp_272_fu_2383_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[116:114]}};

assign tmp_273_fu_2411_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[119:117]}};

assign tmp_274_fu_2439_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[122:120]}};

assign tmp_275_fu_2467_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[125:123]}};

assign tmp_276_fu_2495_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[128:126]}};

assign tmp_277_fu_2523_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[131:129]}};

assign tmp_278_fu_2551_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[134:132]}};

assign tmp_279_fu_2579_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[137:135]}};

assign tmp_280_fu_2607_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[140:138]}};

assign tmp_281_fu_2635_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[143:141]}};

assign tmp_282_fu_2663_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[146:144]}};

assign tmp_283_fu_2691_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[149:147]}};

assign tmp_284_fu_2719_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[152:150]}};

assign tmp_285_fu_2747_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[155:153]}};

assign tmp_286_fu_2775_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[158:156]}};

assign tmp_287_fu_2803_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[161:159]}};

assign tmp_288_fu_2831_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[164:162]}};

assign tmp_289_fu_2859_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[167:165]}};

assign tmp_290_fu_2887_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[170:168]}};

assign tmp_291_fu_2915_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[173:171]}};

assign tmp_292_fu_2943_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[176:174]}};

assign tmp_293_fu_2971_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[179:177]}};

assign tmp_294_fu_2999_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[182:180]}};

assign tmp_295_fu_3027_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[185:183]}};

assign tmp_296_fu_3055_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[188:186]}};

assign tmp_297_fu_3083_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[191:189]}};

assign tmp_298_fu_3111_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[194:192]}};

assign tmp_299_fu_3139_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[197:195]}};

assign tmp_300_fu_3167_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[200:198]}};

assign tmp_301_fu_3195_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[203:201]}};

assign tmp_302_fu_3223_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[206:204]}};

assign tmp_303_fu_3251_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[209:207]}};

assign tmp_304_fu_3279_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[212:210]}};

assign tmp_305_fu_3307_p4 = {{attn_inst_matmul_gen_q_weight_arr_656_q0[215:213]}};

assign tmp_84_fu_1032_p3 = {{trunc_ln121_reg_6916}, {5'd0}};

assign trunc_ln121_fu_994_p1 = select_ln121_7_fu_986_p3[3:0];

assign trunc_ln131_fu_1071_p1 = attn_inst_matmul_gen_q_bias_arr_657_q0[11:0];

assign trunc_ln137_10_fu_1281_p4 = {{cache_window_sm_dout[32:30]}};

assign trunc_ln137_11_fu_1291_p4 = {{cache_window_sm_dout[35:33]}};

assign trunc_ln137_1_fu_1191_p4 = {{cache_window_sm_dout[5:3]}};

assign trunc_ln137_2_fu_1201_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln137_3_fu_1211_p4 = {{cache_window_sm_dout[11:9]}};

assign trunc_ln137_4_fu_1221_p4 = {{cache_window_sm_dout[14:12]}};

assign trunc_ln137_5_fu_1231_p4 = {{cache_window_sm_dout[17:15]}};

assign trunc_ln137_6_fu_1241_p4 = {{cache_window_sm_dout[20:18]}};

assign trunc_ln137_7_fu_1251_p4 = {{cache_window_sm_dout[23:21]}};

assign trunc_ln137_8_fu_1261_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln137_9_fu_1271_p4 = {{cache_window_sm_dout[29:27]}};

assign trunc_ln137_fu_1187_p1 = cache_window_sm_dout[2:0];

assign trunc_ln151_fu_1301_p1 = attn_inst_matmul_gen_q_weight_arr_656_q0[2:0];

assign xor_ln120_fu_950_p2 = (icmp_ln121_reg_6897 ^ 1'd1);

assign zext_ln121_fu_1028_p1 = select_ln121_7_reg_6911;

assign zext_ln151_4_fu_1052_p1 = add_ln151_fu_1046_p2;

assign zext_ln151_fu_1043_p1 = select_ln121_reg_6904;

endmodule //ATTN11_matmul_step2_mac_2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_24 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [41:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [83:0] weight_sm_dout;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [79:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln378_reg_3048;
reg   [0:0] icmp_ln378_reg_3048_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_419_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln337_fu_425_p2;
reg   [0:0] icmp_ln337_reg_2870;
wire   [0:0] icmp_ln342_fu_505_p2;
reg   [0:0] icmp_ln342_reg_2876;
wire  signed [5:0] mul_res_543_fu_953_p2;
reg  signed [5:0] mul_res_543_reg_2888;
wire   [6:0] add_ln370_1_fu_1031_p2;
reg   [6:0] add_ln370_1_reg_2893;
wire   [6:0] add_ln370_3_fu_1037_p2;
reg   [6:0] add_ln370_3_reg_2898;
wire   [6:0] add_ln370_4_fu_1043_p2;
reg   [6:0] add_ln370_4_reg_2903;
wire  signed [5:0] mul_res_550_fu_1149_p2;
reg  signed [5:0] mul_res_550_reg_2908;
wire   [6:0] add_ln370_8_fu_1199_p2;
reg   [6:0] add_ln370_8_reg_2913;
wire   [6:0] add_ln370_10_fu_1205_p2;
reg   [6:0] add_ln370_10_reg_2918;
wire   [6:0] add_ln370_11_fu_1211_p2;
reg   [6:0] add_ln370_11_reg_2923;
wire  signed [5:0] mul_res_557_fu_1317_p2;
reg  signed [5:0] mul_res_557_reg_2928;
wire   [6:0] add_ln370_15_fu_1367_p2;
reg   [6:0] add_ln370_15_reg_2933;
wire   [6:0] add_ln370_17_fu_1373_p2;
reg   [6:0] add_ln370_17_reg_2938;
wire   [6:0] add_ln370_18_fu_1379_p2;
reg   [6:0] add_ln370_18_reg_2943;
wire  signed [5:0] mul_res_564_fu_1485_p2;
reg  signed [5:0] mul_res_564_reg_2948;
wire   [6:0] add_ln370_22_fu_1535_p2;
reg   [6:0] add_ln370_22_reg_2953;
wire   [6:0] add_ln370_24_fu_1541_p2;
reg   [6:0] add_ln370_24_reg_2958;
wire   [6:0] add_ln370_25_fu_1547_p2;
reg   [6:0] add_ln370_25_reg_2963;
wire  signed [5:0] mul_res_571_fu_1703_p2;
reg  signed [5:0] mul_res_571_reg_2968;
wire   [6:0] add_ln370_29_fu_1773_p2;
reg   [6:0] add_ln370_29_reg_2973;
wire   [6:0] add_ln370_31_fu_1779_p2;
reg   [6:0] add_ln370_31_reg_2978;
wire   [6:0] add_ln370_32_fu_1785_p2;
reg   [6:0] add_ln370_32_reg_2983;
wire  signed [5:0] mul_res_578_fu_1871_p2;
reg  signed [5:0] mul_res_578_reg_2988;
wire   [6:0] add_ln370_36_fu_1913_p2;
reg   [6:0] add_ln370_36_reg_2993;
wire   [6:0] add_ln370_38_fu_1919_p2;
reg   [6:0] add_ln370_38_reg_2998;
wire   [6:0] add_ln370_39_fu_1925_p2;
reg   [6:0] add_ln370_39_reg_3003;
wire  signed [5:0] mul_res_585_fu_2011_p2;
reg  signed [5:0] mul_res_585_reg_3008;
wire   [6:0] add_ln370_43_fu_2053_p2;
reg   [6:0] add_ln370_43_reg_3013;
wire   [6:0] add_ln370_45_fu_2059_p2;
reg   [6:0] add_ln370_45_reg_3018;
wire   [6:0] add_ln370_46_fu_2065_p2;
reg   [6:0] add_ln370_46_reg_3023;
wire  signed [5:0] mul_res_592_fu_2151_p2;
reg  signed [5:0] mul_res_592_reg_3028;
wire   [6:0] add_ln370_50_fu_2193_p2;
reg   [6:0] add_ln370_50_reg_3033;
wire   [6:0] add_ln370_52_fu_2199_p2;
reg   [6:0] add_ln370_52_reg_3038;
wire   [6:0] add_ln370_53_fu_2205_p2;
reg   [6:0] add_ln370_53_reg_3043;
wire   [0:0] icmp_ln378_fu_2211_p2;
wire   [9:0] add_ln370_6_fu_2373_p2;
reg   [9:0] add_ln370_6_reg_3052;
wire   [9:0] add_ln370_13_fu_2413_p2;
reg   [9:0] add_ln370_13_reg_3057;
wire   [9:0] add_ln370_20_fu_2453_p2;
reg   [9:0] add_ln370_20_reg_3062;
wire   [9:0] add_ln370_27_fu_2493_p2;
reg   [9:0] add_ln370_27_reg_3067;
wire   [9:0] add_ln370_34_fu_2533_p2;
reg   [9:0] add_ln370_34_reg_3072;
wire   [9:0] add_ln370_41_fu_2573_p2;
reg   [9:0] add_ln370_41_reg_3077;
wire   [9:0] add_ln370_48_fu_2613_p2;
reg   [9:0] add_ln370_48_reg_3082;
wire   [9:0] add_ln370_55_fu_2653_p2;
reg   [9:0] add_ln370_55_reg_3087;
reg   [4:0] cit_fu_302;
wire   [4:0] cit_3_fu_2217_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [9:0] empty_fu_306;
reg   [9:0] empty_1117_fu_310;
reg   [9:0] empty_1118_fu_314;
reg   [9:0] empty_1119_fu_318;
reg   [9:0] empty_1120_fu_322;
reg   [9:0] empty_1121_fu_326;
reg   [9:0] empty_1122_fu_330;
reg   [9:0] empty_1123_fu_334;
reg   [9:0] indvar_flatten_fu_338;
wire   [9:0] select_ln337_3_fu_437_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten33_fu_342;
wire   [15:0] add_ln336_fu_413_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten33_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_431_p2;
wire   [0:0] icmp_ln338_fu_480_p2;
wire   [0:0] xor_ln336_fu_475_p2;
wire   [0:0] and_ln336_fu_486_p2;
wire   [0:0] or_ln337_fu_492_p2;
wire   [4:0] select_ln337_fu_497_p3;
wire   [2:0] lshr_ln_fu_517_p4;
wire   [2:0] trunc_ln353_fu_513_p1;
wire   [2:0] trunc_ln354_fu_533_p1;
wire  signed [2:0] mul_res_fu_823_p0;
wire  signed [5:0] sext_ln368_fu_811_p1;
wire   [2:0] mul_res_fu_823_p1;
wire   [5:0] zext_ln368_fu_807_p1;
wire  signed [5:0] mul_res_fu_823_p2;
wire   [2:0] trunc_ln354_1_fu_537_p4;
wire   [2:0] mul_res_540_fu_845_p0;
wire   [5:0] zext_ln353_fu_527_p1;
wire  signed [2:0] mul_res_540_fu_845_p1;
wire  signed [5:0] sext_ln368_1_fu_833_p1;
wire  signed [5:0] mul_res_540_fu_845_p2;
wire   [2:0] tmp_fu_855_p4;
wire   [2:0] trunc_ln354_2_fu_547_p4;
wire   [2:0] mul_res_541_fu_881_p0;
wire   [5:0] zext_ln368_1_fu_865_p1;
wire  signed [2:0] mul_res_541_fu_881_p1;
wire  signed [5:0] sext_ln368_2_fu_869_p1;
wire  signed [5:0] mul_res_541_fu_881_p2;
wire   [2:0] tmp_40_fu_891_p4;
wire   [2:0] trunc_ln354_3_fu_557_p4;
wire   [2:0] mul_res_542_fu_917_p0;
wire   [5:0] zext_ln368_2_fu_901_p1;
wire  signed [2:0] mul_res_542_fu_917_p1;
wire  signed [5:0] sext_ln368_3_fu_905_p1;
wire  signed [5:0] mul_res_542_fu_917_p2;
wire   [2:0] tmp_41_fu_927_p4;
wire   [2:0] trunc_ln354_4_fu_567_p4;
wire   [2:0] mul_res_543_fu_953_p0;
wire   [5:0] zext_ln368_3_fu_937_p1;
wire  signed [2:0] mul_res_543_fu_953_p1;
wire  signed [5:0] sext_ln368_4_fu_941_p1;
wire   [2:0] tmp_42_fu_959_p4;
wire   [2:0] trunc_ln354_5_fu_577_p4;
wire   [2:0] mul_res_544_fu_985_p0;
wire   [5:0] zext_ln368_4_fu_969_p1;
wire  signed [2:0] mul_res_544_fu_985_p1;
wire  signed [5:0] sext_ln368_5_fu_973_p1;
wire  signed [5:0] mul_res_544_fu_985_p2;
wire   [2:0] tmp_43_fu_995_p4;
wire   [2:0] trunc_ln354_6_fu_587_p4;
wire   [2:0] mul_res_545_fu_1021_p0;
wire   [5:0] zext_ln368_5_fu_1005_p1;
wire  signed [2:0] mul_res_545_fu_1021_p1;
wire  signed [5:0] sext_ln368_6_fu_1009_p1;
wire  signed [5:0] mul_res_545_fu_1021_p2;
wire  signed [6:0] sext_ln368_32_fu_991_p1;
wire  signed [6:0] sext_ln368_31_fu_923_p1;
wire  signed [6:0] sext_ln368_30_fu_887_p1;
wire  signed [6:0] sext_ln368_29_fu_851_p1;
wire  signed [6:0] sext_ln368_28_fu_829_p1;
wire  signed [6:0] sext_ln370_1_fu_1027_p1;
wire   [2:0] trunc_ln354_7_fu_597_p4;
wire  signed [2:0] mul_res_546_fu_1061_p0;
wire  signed [5:0] sext_ln368_7_fu_1049_p1;
wire   [2:0] mul_res_546_fu_1061_p1;
wire  signed [5:0] mul_res_546_fu_1061_p2;
wire   [2:0] trunc_ln354_8_fu_607_p4;
wire   [2:0] mul_res_547_fu_1083_p0;
wire  signed [2:0] mul_res_547_fu_1083_p1;
wire  signed [5:0] sext_ln368_8_fu_1071_p1;
wire  signed [5:0] mul_res_547_fu_1083_p2;
wire   [2:0] trunc_ln354_9_fu_617_p4;
wire   [2:0] mul_res_548_fu_1105_p0;
wire  signed [2:0] mul_res_548_fu_1105_p1;
wire  signed [5:0] sext_ln368_9_fu_1093_p1;
wire  signed [5:0] mul_res_548_fu_1105_p2;
wire   [2:0] trunc_ln354_10_fu_627_p4;
wire   [2:0] mul_res_549_fu_1127_p0;
wire  signed [2:0] mul_res_549_fu_1127_p1;
wire  signed [5:0] sext_ln368_10_fu_1115_p1;
wire  signed [5:0] mul_res_549_fu_1127_p2;
wire   [2:0] trunc_ln354_11_fu_637_p4;
wire   [2:0] mul_res_550_fu_1149_p0;
wire  signed [2:0] mul_res_550_fu_1149_p1;
wire  signed [5:0] sext_ln368_11_fu_1137_p1;
wire   [2:0] trunc_ln354_12_fu_647_p4;
wire   [2:0] mul_res_551_fu_1167_p0;
wire  signed [2:0] mul_res_551_fu_1167_p1;
wire  signed [5:0] sext_ln368_12_fu_1155_p1;
wire  signed [5:0] mul_res_551_fu_1167_p2;
wire   [2:0] trunc_ln354_13_fu_657_p4;
wire   [2:0] mul_res_552_fu_1189_p0;
wire  signed [2:0] mul_res_552_fu_1189_p1;
wire  signed [5:0] sext_ln368_13_fu_1177_p1;
wire  signed [5:0] mul_res_552_fu_1189_p2;
wire  signed [6:0] sext_ln368_37_fu_1173_p1;
wire  signed [6:0] sext_ln368_36_fu_1133_p1;
wire  signed [6:0] sext_ln368_35_fu_1111_p1;
wire  signed [6:0] sext_ln368_34_fu_1089_p1;
wire  signed [6:0] sext_ln368_33_fu_1067_p1;
wire  signed [6:0] sext_ln370_7_fu_1195_p1;
wire   [2:0] trunc_ln354_14_fu_667_p4;
wire  signed [2:0] mul_res_553_fu_1229_p0;
wire  signed [5:0] sext_ln368_14_fu_1217_p1;
wire   [2:0] mul_res_553_fu_1229_p1;
wire  signed [5:0] mul_res_553_fu_1229_p2;
wire   [2:0] trunc_ln354_15_fu_677_p4;
wire   [2:0] mul_res_554_fu_1251_p0;
wire  signed [2:0] mul_res_554_fu_1251_p1;
wire  signed [5:0] sext_ln368_15_fu_1239_p1;
wire  signed [5:0] mul_res_554_fu_1251_p2;
wire   [2:0] trunc_ln354_16_fu_687_p4;
wire   [2:0] mul_res_555_fu_1273_p0;
wire  signed [2:0] mul_res_555_fu_1273_p1;
wire  signed [5:0] sext_ln368_16_fu_1261_p1;
wire  signed [5:0] mul_res_555_fu_1273_p2;
wire   [2:0] trunc_ln354_17_fu_697_p4;
wire   [2:0] mul_res_556_fu_1295_p0;
wire  signed [2:0] mul_res_556_fu_1295_p1;
wire  signed [5:0] sext_ln368_17_fu_1283_p1;
wire  signed [5:0] mul_res_556_fu_1295_p2;
wire   [2:0] trunc_ln354_18_fu_707_p4;
wire   [2:0] mul_res_557_fu_1317_p0;
wire  signed [2:0] mul_res_557_fu_1317_p1;
wire  signed [5:0] sext_ln368_18_fu_1305_p1;
wire   [2:0] trunc_ln354_19_fu_717_p4;
wire   [2:0] mul_res_558_fu_1335_p0;
wire  signed [2:0] mul_res_558_fu_1335_p1;
wire  signed [5:0] sext_ln368_19_fu_1323_p1;
wire  signed [5:0] mul_res_558_fu_1335_p2;
wire   [2:0] trunc_ln354_20_fu_727_p4;
wire   [2:0] mul_res_559_fu_1357_p0;
wire  signed [2:0] mul_res_559_fu_1357_p1;
wire  signed [5:0] sext_ln368_20_fu_1345_p1;
wire  signed [5:0] mul_res_559_fu_1357_p2;
wire  signed [6:0] sext_ln368_42_fu_1341_p1;
wire  signed [6:0] sext_ln368_41_fu_1301_p1;
wire  signed [6:0] sext_ln368_40_fu_1279_p1;
wire  signed [6:0] sext_ln368_39_fu_1257_p1;
wire  signed [6:0] sext_ln368_38_fu_1235_p1;
wire  signed [6:0] sext_ln370_13_fu_1363_p1;
wire   [2:0] trunc_ln354_21_fu_737_p4;
wire  signed [2:0] mul_res_560_fu_1397_p0;
wire  signed [5:0] sext_ln368_21_fu_1385_p1;
wire   [2:0] mul_res_560_fu_1397_p1;
wire  signed [5:0] mul_res_560_fu_1397_p2;
wire   [2:0] trunc_ln354_22_fu_747_p4;
wire   [2:0] mul_res_561_fu_1419_p0;
wire  signed [2:0] mul_res_561_fu_1419_p1;
wire  signed [5:0] sext_ln368_22_fu_1407_p1;
wire  signed [5:0] mul_res_561_fu_1419_p2;
wire   [2:0] trunc_ln354_23_fu_757_p4;
wire   [2:0] mul_res_562_fu_1441_p0;
wire  signed [2:0] mul_res_562_fu_1441_p1;
wire  signed [5:0] sext_ln368_23_fu_1429_p1;
wire  signed [5:0] mul_res_562_fu_1441_p2;
wire   [2:0] trunc_ln354_24_fu_767_p4;
wire   [2:0] mul_res_563_fu_1463_p0;
wire  signed [2:0] mul_res_563_fu_1463_p1;
wire  signed [5:0] sext_ln368_24_fu_1451_p1;
wire  signed [5:0] mul_res_563_fu_1463_p2;
wire   [2:0] trunc_ln354_25_fu_777_p4;
wire   [2:0] mul_res_564_fu_1485_p0;
wire  signed [2:0] mul_res_564_fu_1485_p1;
wire  signed [5:0] sext_ln368_25_fu_1473_p1;
wire   [2:0] trunc_ln354_26_fu_787_p4;
wire   [2:0] mul_res_565_fu_1503_p0;
wire  signed [2:0] mul_res_565_fu_1503_p1;
wire  signed [5:0] sext_ln368_26_fu_1491_p1;
wire  signed [5:0] mul_res_565_fu_1503_p2;
wire   [2:0] trunc_ln354_27_fu_797_p4;
wire   [2:0] mul_res_566_fu_1525_p0;
wire  signed [2:0] mul_res_566_fu_1525_p1;
wire  signed [5:0] sext_ln368_27_fu_1513_p1;
wire  signed [5:0] mul_res_566_fu_1525_p2;
wire  signed [6:0] sext_ln368_47_fu_1509_p1;
wire  signed [6:0] sext_ln368_46_fu_1469_p1;
wire  signed [6:0] sext_ln368_45_fu_1447_p1;
wire  signed [6:0] sext_ln368_44_fu_1425_p1;
wire  signed [6:0] sext_ln368_43_fu_1403_p1;
wire  signed [6:0] sext_ln370_19_fu_1531_p1;
wire   [2:0] tmp_44_fu_1553_p4;
wire   [2:0] mul_res_567_fu_1575_p0;
wire   [5:0] zext_ln368_6_fu_1563_p1;
wire  signed [2:0] mul_res_567_fu_1575_p1;
wire  signed [5:0] mul_res_567_fu_1575_p2;
wire   [2:0] tmp_45_fu_1585_p4;
wire   [2:0] mul_res_568_fu_1607_p0;
wire   [5:0] zext_ln368_7_fu_1595_p1;
wire  signed [2:0] mul_res_568_fu_1607_p1;
wire  signed [5:0] mul_res_568_fu_1607_p2;
wire   [2:0] tmp_46_fu_1617_p4;
wire   [2:0] mul_res_569_fu_1639_p0;
wire   [5:0] zext_ln368_8_fu_1627_p1;
wire  signed [2:0] mul_res_569_fu_1639_p1;
wire  signed [5:0] mul_res_569_fu_1639_p2;
wire   [2:0] tmp_47_fu_1649_p4;
wire   [2:0] mul_res_570_fu_1671_p0;
wire   [5:0] zext_ln368_9_fu_1659_p1;
wire  signed [2:0] mul_res_570_fu_1671_p1;
wire  signed [5:0] mul_res_570_fu_1671_p2;
wire   [2:0] tmp_48_fu_1681_p4;
wire   [2:0] mul_res_571_fu_1703_p0;
wire   [5:0] zext_ln368_10_fu_1691_p1;
wire  signed [2:0] mul_res_571_fu_1703_p1;
wire   [2:0] tmp_49_fu_1709_p4;
wire   [2:0] mul_res_572_fu_1731_p0;
wire   [5:0] zext_ln368_11_fu_1719_p1;
wire  signed [2:0] mul_res_572_fu_1731_p1;
wire  signed [5:0] mul_res_572_fu_1731_p2;
wire   [2:0] tmp_50_fu_1741_p4;
wire   [2:0] mul_res_573_fu_1763_p0;
wire   [5:0] zext_ln368_12_fu_1751_p1;
wire  signed [2:0] mul_res_573_fu_1763_p1;
wire  signed [5:0] mul_res_573_fu_1763_p2;
wire  signed [6:0] sext_ln368_52_fu_1737_p1;
wire  signed [6:0] sext_ln368_51_fu_1677_p1;
wire  signed [6:0] sext_ln368_50_fu_1645_p1;
wire  signed [6:0] sext_ln368_49_fu_1613_p1;
wire  signed [6:0] sext_ln368_48_fu_1581_p1;
wire  signed [6:0] sext_ln370_25_fu_1769_p1;
wire   [2:0] mul_res_574_fu_1799_p0;
wire  signed [2:0] mul_res_574_fu_1799_p1;
wire  signed [5:0] mul_res_574_fu_1799_p2;
wire   [2:0] mul_res_575_fu_1817_p0;
wire  signed [2:0] mul_res_575_fu_1817_p1;
wire  signed [5:0] mul_res_575_fu_1817_p2;
wire   [2:0] mul_res_576_fu_1835_p0;
wire  signed [2:0] mul_res_576_fu_1835_p1;
wire  signed [5:0] mul_res_576_fu_1835_p2;
wire   [2:0] mul_res_577_fu_1853_p0;
wire  signed [2:0] mul_res_577_fu_1853_p1;
wire  signed [5:0] mul_res_577_fu_1853_p2;
wire   [2:0] mul_res_578_fu_1871_p0;
wire  signed [2:0] mul_res_578_fu_1871_p1;
wire   [2:0] mul_res_579_fu_1885_p0;
wire  signed [2:0] mul_res_579_fu_1885_p1;
wire  signed [5:0] mul_res_579_fu_1885_p2;
wire   [2:0] mul_res_580_fu_1903_p0;
wire  signed [2:0] mul_res_580_fu_1903_p1;
wire  signed [5:0] mul_res_580_fu_1903_p2;
wire  signed [6:0] sext_ln368_57_fu_1891_p1;
wire  signed [6:0] sext_ln368_56_fu_1859_p1;
wire  signed [6:0] sext_ln368_55_fu_1841_p1;
wire  signed [6:0] sext_ln368_54_fu_1823_p1;
wire  signed [6:0] sext_ln368_53_fu_1805_p1;
wire  signed [6:0] sext_ln370_31_fu_1909_p1;
wire   [2:0] mul_res_581_fu_1939_p0;
wire  signed [2:0] mul_res_581_fu_1939_p1;
wire  signed [5:0] mul_res_581_fu_1939_p2;
wire   [2:0] mul_res_582_fu_1957_p0;
wire  signed [2:0] mul_res_582_fu_1957_p1;
wire  signed [5:0] mul_res_582_fu_1957_p2;
wire   [2:0] mul_res_583_fu_1975_p0;
wire  signed [2:0] mul_res_583_fu_1975_p1;
wire  signed [5:0] mul_res_583_fu_1975_p2;
wire   [2:0] mul_res_584_fu_1993_p0;
wire  signed [2:0] mul_res_584_fu_1993_p1;
wire  signed [5:0] mul_res_584_fu_1993_p2;
wire   [2:0] mul_res_585_fu_2011_p0;
wire  signed [2:0] mul_res_585_fu_2011_p1;
wire   [2:0] mul_res_586_fu_2025_p0;
wire  signed [2:0] mul_res_586_fu_2025_p1;
wire  signed [5:0] mul_res_586_fu_2025_p2;
wire   [2:0] mul_res_587_fu_2043_p0;
wire  signed [2:0] mul_res_587_fu_2043_p1;
wire  signed [5:0] mul_res_587_fu_2043_p2;
wire  signed [6:0] sext_ln368_62_fu_2031_p1;
wire  signed [6:0] sext_ln368_61_fu_1999_p1;
wire  signed [6:0] sext_ln368_60_fu_1981_p1;
wire  signed [6:0] sext_ln368_59_fu_1963_p1;
wire  signed [6:0] sext_ln368_58_fu_1945_p1;
wire  signed [6:0] sext_ln370_37_fu_2049_p1;
wire   [2:0] mul_res_588_fu_2079_p0;
wire  signed [2:0] mul_res_588_fu_2079_p1;
wire  signed [5:0] mul_res_588_fu_2079_p2;
wire   [2:0] mul_res_589_fu_2097_p0;
wire  signed [2:0] mul_res_589_fu_2097_p1;
wire  signed [5:0] mul_res_589_fu_2097_p2;
wire   [2:0] mul_res_590_fu_2115_p0;
wire  signed [2:0] mul_res_590_fu_2115_p1;
wire  signed [5:0] mul_res_590_fu_2115_p2;
wire   [2:0] mul_res_591_fu_2133_p0;
wire  signed [2:0] mul_res_591_fu_2133_p1;
wire  signed [5:0] mul_res_591_fu_2133_p2;
wire   [2:0] mul_res_592_fu_2151_p0;
wire  signed [2:0] mul_res_592_fu_2151_p1;
wire   [2:0] mul_res_593_fu_2165_p0;
wire  signed [2:0] mul_res_593_fu_2165_p1;
wire  signed [5:0] mul_res_593_fu_2165_p2;
wire   [2:0] mul_res_594_fu_2183_p0;
wire  signed [2:0] mul_res_594_fu_2183_p1;
wire  signed [5:0] mul_res_594_fu_2183_p2;
wire  signed [6:0] sext_ln368_67_fu_2171_p1;
wire  signed [6:0] sext_ln368_66_fu_2139_p1;
wire  signed [6:0] sext_ln368_65_fu_2121_p1;
wire  signed [6:0] sext_ln368_64_fu_2103_p1;
wire  signed [6:0] sext_ln368_63_fu_2085_p1;
wire  signed [6:0] sext_ln370_43_fu_2189_p1;
wire  signed [9:0] sext_ln370_2_fu_2342_p1;
wire  signed [9:0] sext_ln370_fu_2339_p1;
wire  signed [7:0] sext_ln370_4_fu_2354_p1;
wire  signed [7:0] sext_ln370_3_fu_2351_p1;
wire   [7:0] add_ln370_5_fu_2357_p2;
wire  signed [9:0] sext_ln370_5_fu_2363_p1;
wire   [9:0] add_ln370_fu_2345_p2;
wire   [9:0] add_ln370_2_fu_2367_p2;
wire   [9:0] select_ln342_7_fu_2332_p3;
wire  signed [9:0] sext_ln370_8_fu_2382_p1;
wire  signed [9:0] sext_ln370_6_fu_2379_p1;
wire  signed [7:0] sext_ln370_10_fu_2394_p1;
wire  signed [7:0] sext_ln370_9_fu_2391_p1;
wire   [7:0] add_ln370_12_fu_2397_p2;
wire  signed [9:0] sext_ln370_11_fu_2403_p1;
wire   [9:0] add_ln370_7_fu_2385_p2;
wire   [9:0] add_ln370_9_fu_2407_p2;
wire   [9:0] select_ln342_6_fu_2325_p3;
wire  signed [9:0] sext_ln370_14_fu_2422_p1;
wire  signed [9:0] sext_ln370_12_fu_2419_p1;
wire  signed [7:0] sext_ln370_16_fu_2434_p1;
wire  signed [7:0] sext_ln370_15_fu_2431_p1;
wire   [7:0] add_ln370_19_fu_2437_p2;
wire  signed [9:0] sext_ln370_17_fu_2443_p1;
wire   [9:0] add_ln370_14_fu_2425_p2;
wire   [9:0] add_ln370_16_fu_2447_p2;
wire   [9:0] select_ln342_5_fu_2318_p3;
wire  signed [9:0] sext_ln370_20_fu_2462_p1;
wire  signed [9:0] sext_ln370_18_fu_2459_p1;
wire  signed [7:0] sext_ln370_22_fu_2474_p1;
wire  signed [7:0] sext_ln370_21_fu_2471_p1;
wire   [7:0] add_ln370_26_fu_2477_p2;
wire  signed [9:0] sext_ln370_23_fu_2483_p1;
wire   [9:0] add_ln370_21_fu_2465_p2;
wire   [9:0] add_ln370_23_fu_2487_p2;
wire   [9:0] select_ln342_4_fu_2311_p3;
wire  signed [9:0] sext_ln370_26_fu_2502_p1;
wire  signed [9:0] sext_ln370_24_fu_2499_p1;
wire  signed [7:0] sext_ln370_28_fu_2514_p1;
wire  signed [7:0] sext_ln370_27_fu_2511_p1;
wire   [7:0] add_ln370_33_fu_2517_p2;
wire  signed [9:0] sext_ln370_29_fu_2523_p1;
wire   [9:0] add_ln370_28_fu_2505_p2;
wire   [9:0] add_ln370_30_fu_2527_p2;
wire   [9:0] select_ln342_3_fu_2304_p3;
wire  signed [9:0] sext_ln370_32_fu_2542_p1;
wire  signed [9:0] sext_ln370_30_fu_2539_p1;
wire  signed [7:0] sext_ln370_34_fu_2554_p1;
wire  signed [7:0] sext_ln370_33_fu_2551_p1;
wire   [7:0] add_ln370_40_fu_2557_p2;
wire  signed [9:0] sext_ln370_35_fu_2563_p1;
wire   [9:0] add_ln370_35_fu_2545_p2;
wire   [9:0] add_ln370_37_fu_2567_p2;
wire   [9:0] select_ln342_2_fu_2297_p3;
wire  signed [9:0] sext_ln370_38_fu_2582_p1;
wire  signed [9:0] sext_ln370_36_fu_2579_p1;
wire  signed [7:0] sext_ln370_40_fu_2594_p1;
wire  signed [7:0] sext_ln370_39_fu_2591_p1;
wire   [7:0] add_ln370_47_fu_2597_p2;
wire  signed [9:0] sext_ln370_41_fu_2603_p1;
wire   [9:0] add_ln370_42_fu_2585_p2;
wire   [9:0] add_ln370_44_fu_2607_p2;
wire   [9:0] select_ln342_1_fu_2290_p3;
wire  signed [9:0] sext_ln370_44_fu_2622_p1;
wire  signed [9:0] sext_ln370_42_fu_2619_p1;
wire  signed [7:0] sext_ln370_46_fu_2634_p1;
wire  signed [7:0] sext_ln370_45_fu_2631_p1;
wire   [7:0] add_ln370_54_fu_2637_p2;
wire  signed [9:0] sext_ln370_47_fu_2643_p1;
wire   [9:0] add_ln370_49_fu_2625_p2;
wire   [9:0] add_ln370_51_fu_2647_p2;
wire   [9:0] select_ln342_fu_2283_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_245;
reg    ap_condition_286;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_302 = 5'd0;
//#0 empty_fu_306 = 10'd0;
//#0 empty_1117_fu_310 = 10'd0;
//#0 empty_1118_fu_314 = 10'd0;
//#0 empty_1119_fu_318 = 10'd0;
//#0 empty_1120_fu_322 = 10'd0;
//#0 empty_1121_fu_326 = 10'd0;
//#0 empty_1122_fu_330 = 10'd0;
//#0 empty_1123_fu_334 = 10'd0;
//#0 indvar_flatten_fu_338 = 10'd0;
//#0 indvar_flatten33_fu_342 = 16'd0;
end

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U976(
    .din0(mul_res_fu_823_p0),
    .din1(mul_res_fu_823_p1),
    .dout(mul_res_fu_823_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U977(
    .din0(mul_res_540_fu_845_p0),
    .din1(mul_res_540_fu_845_p1),
    .dout(mul_res_540_fu_845_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U978(
    .din0(mul_res_541_fu_881_p0),
    .din1(mul_res_541_fu_881_p1),
    .dout(mul_res_541_fu_881_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U979(
    .din0(mul_res_542_fu_917_p0),
    .din1(mul_res_542_fu_917_p1),
    .dout(mul_res_542_fu_917_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U980(
    .din0(mul_res_543_fu_953_p0),
    .din1(mul_res_543_fu_953_p1),
    .dout(mul_res_543_fu_953_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U981(
    .din0(mul_res_544_fu_985_p0),
    .din1(mul_res_544_fu_985_p1),
    .dout(mul_res_544_fu_985_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U982(
    .din0(mul_res_545_fu_1021_p0),
    .din1(mul_res_545_fu_1021_p1),
    .dout(mul_res_545_fu_1021_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U983(
    .din0(mul_res_546_fu_1061_p0),
    .din1(mul_res_546_fu_1061_p1),
    .dout(mul_res_546_fu_1061_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U984(
    .din0(mul_res_547_fu_1083_p0),
    .din1(mul_res_547_fu_1083_p1),
    .dout(mul_res_547_fu_1083_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U985(
    .din0(mul_res_548_fu_1105_p0),
    .din1(mul_res_548_fu_1105_p1),
    .dout(mul_res_548_fu_1105_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U986(
    .din0(mul_res_549_fu_1127_p0),
    .din1(mul_res_549_fu_1127_p1),
    .dout(mul_res_549_fu_1127_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U987(
    .din0(mul_res_550_fu_1149_p0),
    .din1(mul_res_550_fu_1149_p1),
    .dout(mul_res_550_fu_1149_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U988(
    .din0(mul_res_551_fu_1167_p0),
    .din1(mul_res_551_fu_1167_p1),
    .dout(mul_res_551_fu_1167_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U989(
    .din0(mul_res_552_fu_1189_p0),
    .din1(mul_res_552_fu_1189_p1),
    .dout(mul_res_552_fu_1189_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U990(
    .din0(mul_res_553_fu_1229_p0),
    .din1(mul_res_553_fu_1229_p1),
    .dout(mul_res_553_fu_1229_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U991(
    .din0(mul_res_554_fu_1251_p0),
    .din1(mul_res_554_fu_1251_p1),
    .dout(mul_res_554_fu_1251_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U992(
    .din0(mul_res_555_fu_1273_p0),
    .din1(mul_res_555_fu_1273_p1),
    .dout(mul_res_555_fu_1273_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U993(
    .din0(mul_res_556_fu_1295_p0),
    .din1(mul_res_556_fu_1295_p1),
    .dout(mul_res_556_fu_1295_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U994(
    .din0(mul_res_557_fu_1317_p0),
    .din1(mul_res_557_fu_1317_p1),
    .dout(mul_res_557_fu_1317_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U995(
    .din0(mul_res_558_fu_1335_p0),
    .din1(mul_res_558_fu_1335_p1),
    .dout(mul_res_558_fu_1335_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U996(
    .din0(mul_res_559_fu_1357_p0),
    .din1(mul_res_559_fu_1357_p1),
    .dout(mul_res_559_fu_1357_p2)
);

ATTN11_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U997(
    .din0(mul_res_560_fu_1397_p0),
    .din1(mul_res_560_fu_1397_p1),
    .dout(mul_res_560_fu_1397_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U998(
    .din0(mul_res_561_fu_1419_p0),
    .din1(mul_res_561_fu_1419_p1),
    .dout(mul_res_561_fu_1419_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U999(
    .din0(mul_res_562_fu_1441_p0),
    .din1(mul_res_562_fu_1441_p1),
    .dout(mul_res_562_fu_1441_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1000(
    .din0(mul_res_563_fu_1463_p0),
    .din1(mul_res_563_fu_1463_p1),
    .dout(mul_res_563_fu_1463_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1001(
    .din0(mul_res_564_fu_1485_p0),
    .din1(mul_res_564_fu_1485_p1),
    .dout(mul_res_564_fu_1485_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1002(
    .din0(mul_res_565_fu_1503_p0),
    .din1(mul_res_565_fu_1503_p1),
    .dout(mul_res_565_fu_1503_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1003(
    .din0(mul_res_566_fu_1525_p0),
    .din1(mul_res_566_fu_1525_p1),
    .dout(mul_res_566_fu_1525_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1004(
    .din0(mul_res_567_fu_1575_p0),
    .din1(mul_res_567_fu_1575_p1),
    .dout(mul_res_567_fu_1575_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1005(
    .din0(mul_res_568_fu_1607_p0),
    .din1(mul_res_568_fu_1607_p1),
    .dout(mul_res_568_fu_1607_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1006(
    .din0(mul_res_569_fu_1639_p0),
    .din1(mul_res_569_fu_1639_p1),
    .dout(mul_res_569_fu_1639_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1007(
    .din0(mul_res_570_fu_1671_p0),
    .din1(mul_res_570_fu_1671_p1),
    .dout(mul_res_570_fu_1671_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1008(
    .din0(mul_res_571_fu_1703_p0),
    .din1(mul_res_571_fu_1703_p1),
    .dout(mul_res_571_fu_1703_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1009(
    .din0(mul_res_572_fu_1731_p0),
    .din1(mul_res_572_fu_1731_p1),
    .dout(mul_res_572_fu_1731_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1010(
    .din0(mul_res_573_fu_1763_p0),
    .din1(mul_res_573_fu_1763_p1),
    .dout(mul_res_573_fu_1763_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1011(
    .din0(mul_res_574_fu_1799_p0),
    .din1(mul_res_574_fu_1799_p1),
    .dout(mul_res_574_fu_1799_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1012(
    .din0(mul_res_575_fu_1817_p0),
    .din1(mul_res_575_fu_1817_p1),
    .dout(mul_res_575_fu_1817_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1013(
    .din0(mul_res_576_fu_1835_p0),
    .din1(mul_res_576_fu_1835_p1),
    .dout(mul_res_576_fu_1835_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1014(
    .din0(mul_res_577_fu_1853_p0),
    .din1(mul_res_577_fu_1853_p1),
    .dout(mul_res_577_fu_1853_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1015(
    .din0(mul_res_578_fu_1871_p0),
    .din1(mul_res_578_fu_1871_p1),
    .dout(mul_res_578_fu_1871_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1016(
    .din0(mul_res_579_fu_1885_p0),
    .din1(mul_res_579_fu_1885_p1),
    .dout(mul_res_579_fu_1885_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1017(
    .din0(mul_res_580_fu_1903_p0),
    .din1(mul_res_580_fu_1903_p1),
    .dout(mul_res_580_fu_1903_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1018(
    .din0(mul_res_581_fu_1939_p0),
    .din1(mul_res_581_fu_1939_p1),
    .dout(mul_res_581_fu_1939_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1019(
    .din0(mul_res_582_fu_1957_p0),
    .din1(mul_res_582_fu_1957_p1),
    .dout(mul_res_582_fu_1957_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1020(
    .din0(mul_res_583_fu_1975_p0),
    .din1(mul_res_583_fu_1975_p1),
    .dout(mul_res_583_fu_1975_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1021(
    .din0(mul_res_584_fu_1993_p0),
    .din1(mul_res_584_fu_1993_p1),
    .dout(mul_res_584_fu_1993_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1022(
    .din0(mul_res_585_fu_2011_p0),
    .din1(mul_res_585_fu_2011_p1),
    .dout(mul_res_585_fu_2011_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1023(
    .din0(mul_res_586_fu_2025_p0),
    .din1(mul_res_586_fu_2025_p1),
    .dout(mul_res_586_fu_2025_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1024(
    .din0(mul_res_587_fu_2043_p0),
    .din1(mul_res_587_fu_2043_p1),
    .dout(mul_res_587_fu_2043_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1025(
    .din0(mul_res_588_fu_2079_p0),
    .din1(mul_res_588_fu_2079_p1),
    .dout(mul_res_588_fu_2079_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1026(
    .din0(mul_res_589_fu_2097_p0),
    .din1(mul_res_589_fu_2097_p1),
    .dout(mul_res_589_fu_2097_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1027(
    .din0(mul_res_590_fu_2115_p0),
    .din1(mul_res_590_fu_2115_p1),
    .dout(mul_res_590_fu_2115_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1028(
    .din0(mul_res_591_fu_2133_p0),
    .din1(mul_res_591_fu_2133_p1),
    .dout(mul_res_591_fu_2133_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1029(
    .din0(mul_res_592_fu_2151_p0),
    .din1(mul_res_592_fu_2151_p1),
    .dout(mul_res_592_fu_2151_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1030(
    .din0(mul_res_593_fu_2165_p0),
    .din1(mul_res_593_fu_2165_p1),
    .dout(mul_res_593_fu_2165_p2)
);

ATTN11_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1031(
    .din0(mul_res_594_fu_2183_p0),
    .din1(mul_res_594_fu_2183_p1),
    .dout(mul_res_594_fu_2183_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_245)) begin
        cit_fu_302 <= cit_3_fu_2217_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_286)) begin
    if ((icmp_ln336_fu_419_p2 == 1'd0)) begin
        indvar_flatten33_fu_342 <= add_ln336_fu_413_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten33_fu_342 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_286)) begin
    if ((icmp_ln336_fu_419_p2 == 1'd0)) begin
        indvar_flatten_fu_338 <= select_ln337_3_fu_437_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_338 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln370_10_reg_2918 <= add_ln370_10_fu_1205_p2;
        add_ln370_11_reg_2923 <= add_ln370_11_fu_1211_p2;
        add_ln370_15_reg_2933 <= add_ln370_15_fu_1367_p2;
        add_ln370_17_reg_2938 <= add_ln370_17_fu_1373_p2;
        add_ln370_18_reg_2943 <= add_ln370_18_fu_1379_p2;
        add_ln370_1_reg_2893 <= add_ln370_1_fu_1031_p2;
        add_ln370_22_reg_2953 <= add_ln370_22_fu_1535_p2;
        add_ln370_24_reg_2958 <= add_ln370_24_fu_1541_p2;
        add_ln370_25_reg_2963 <= add_ln370_25_fu_1547_p2;
        add_ln370_29_reg_2973 <= add_ln370_29_fu_1773_p2;
        add_ln370_31_reg_2978 <= add_ln370_31_fu_1779_p2;
        add_ln370_32_reg_2983 <= add_ln370_32_fu_1785_p2;
        add_ln370_36_reg_2993 <= add_ln370_36_fu_1913_p2;
        add_ln370_38_reg_2998 <= add_ln370_38_fu_1919_p2;
        add_ln370_39_reg_3003 <= add_ln370_39_fu_1925_p2;
        add_ln370_3_reg_2898 <= add_ln370_3_fu_1037_p2;
        add_ln370_43_reg_3013 <= add_ln370_43_fu_2053_p2;
        add_ln370_45_reg_3018 <= add_ln370_45_fu_2059_p2;
        add_ln370_46_reg_3023 <= add_ln370_46_fu_2065_p2;
        add_ln370_4_reg_2903 <= add_ln370_4_fu_1043_p2;
        add_ln370_50_reg_3033 <= add_ln370_50_fu_2193_p2;
        add_ln370_52_reg_3038 <= add_ln370_52_fu_2199_p2;
        add_ln370_53_reg_3043 <= add_ln370_53_fu_2205_p2;
        add_ln370_8_reg_2913 <= add_ln370_8_fu_1199_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln337_reg_2870 <= icmp_ln337_fu_425_p2;
        icmp_ln342_reg_2876 <= icmp_ln342_fu_505_p2;
        icmp_ln378_reg_3048 <= icmp_ln378_fu_2211_p2;
        mul_res_543_reg_2888 <= mul_res_543_fu_953_p2;
        mul_res_550_reg_2908 <= mul_res_550_fu_1149_p2;
        mul_res_557_reg_2928 <= mul_res_557_fu_1317_p2;
        mul_res_564_reg_2948 <= mul_res_564_fu_1485_p2;
        mul_res_571_reg_2968 <= mul_res_571_fu_1703_p2;
        mul_res_578_reg_2988 <= mul_res_578_fu_1871_p2;
        mul_res_585_reg_3008 <= mul_res_585_fu_2011_p2;
        mul_res_592_reg_3028 <= mul_res_592_fu_2151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln370_13_reg_3057 <= add_ln370_13_fu_2413_p2;
        add_ln370_20_reg_3062 <= add_ln370_20_fu_2453_p2;
        add_ln370_27_reg_3067 <= add_ln370_27_fu_2493_p2;
        add_ln370_34_reg_3072 <= add_ln370_34_fu_2533_p2;
        add_ln370_41_reg_3077 <= add_ln370_41_fu_2573_p2;
        add_ln370_48_reg_3082 <= add_ln370_48_fu_2613_p2;
        add_ln370_55_reg_3087 <= add_ln370_55_fu_2653_p2;
        add_ln370_6_reg_3052 <= add_ln370_6_fu_2373_p2;
        icmp_ln378_reg_3048_pp0_iter2_reg <= icmp_ln378_reg_3048;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_1117_fu_310 <= add_ln370_13_fu_2413_p2;
        empty_1118_fu_314 <= add_ln370_20_fu_2453_p2;
        empty_1119_fu_318 <= add_ln370_27_fu_2493_p2;
        empty_1120_fu_322 <= add_ln370_34_fu_2533_p2;
        empty_1121_fu_326 <= add_ln370_41_fu_2573_p2;
        empty_1122_fu_330 <= add_ln370_48_fu_2613_p2;
        empty_1123_fu_334 <= add_ln370_55_fu_2653_p2;
        empty_fu_306 <= add_ln370_6_fu_2373_p2;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_419_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_302;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_342;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_338;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_413_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 16'd1);

assign add_ln337_fu_431_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln370_10_fu_1205_p2 = ($signed(sext_ln368_35_fu_1111_p1) + $signed(sext_ln368_34_fu_1089_p1));

assign add_ln370_11_fu_1211_p2 = ($signed(sext_ln368_33_fu_1067_p1) + $signed(sext_ln370_7_fu_1195_p1));

assign add_ln370_12_fu_2397_p2 = ($signed(sext_ln370_10_fu_2394_p1) + $signed(sext_ln370_9_fu_2391_p1));

assign add_ln370_13_fu_2413_p2 = (add_ln370_9_fu_2407_p2 + select_ln342_6_fu_2325_p3);

assign add_ln370_14_fu_2425_p2 = ($signed(sext_ln370_14_fu_2422_p1) + $signed(sext_ln370_12_fu_2419_p1));

assign add_ln370_15_fu_1367_p2 = ($signed(sext_ln368_42_fu_1341_p1) + $signed(sext_ln368_41_fu_1301_p1));

assign add_ln370_16_fu_2447_p2 = ($signed(sext_ln370_17_fu_2443_p1) + $signed(add_ln370_14_fu_2425_p2));

assign add_ln370_17_fu_1373_p2 = ($signed(sext_ln368_40_fu_1279_p1) + $signed(sext_ln368_39_fu_1257_p1));

assign add_ln370_18_fu_1379_p2 = ($signed(sext_ln368_38_fu_1235_p1) + $signed(sext_ln370_13_fu_1363_p1));

assign add_ln370_19_fu_2437_p2 = ($signed(sext_ln370_16_fu_2434_p1) + $signed(sext_ln370_15_fu_2431_p1));

assign add_ln370_1_fu_1031_p2 = ($signed(sext_ln368_32_fu_991_p1) + $signed(sext_ln368_31_fu_923_p1));

assign add_ln370_20_fu_2453_p2 = (add_ln370_16_fu_2447_p2 + select_ln342_5_fu_2318_p3);

assign add_ln370_21_fu_2465_p2 = ($signed(sext_ln370_20_fu_2462_p1) + $signed(sext_ln370_18_fu_2459_p1));

assign add_ln370_22_fu_1535_p2 = ($signed(sext_ln368_47_fu_1509_p1) + $signed(sext_ln368_46_fu_1469_p1));

assign add_ln370_23_fu_2487_p2 = ($signed(sext_ln370_23_fu_2483_p1) + $signed(add_ln370_21_fu_2465_p2));

assign add_ln370_24_fu_1541_p2 = ($signed(sext_ln368_45_fu_1447_p1) + $signed(sext_ln368_44_fu_1425_p1));

assign add_ln370_25_fu_1547_p2 = ($signed(sext_ln368_43_fu_1403_p1) + $signed(sext_ln370_19_fu_1531_p1));

assign add_ln370_26_fu_2477_p2 = ($signed(sext_ln370_22_fu_2474_p1) + $signed(sext_ln370_21_fu_2471_p1));

assign add_ln370_27_fu_2493_p2 = (add_ln370_23_fu_2487_p2 + select_ln342_4_fu_2311_p3);

assign add_ln370_28_fu_2505_p2 = ($signed(sext_ln370_26_fu_2502_p1) + $signed(sext_ln370_24_fu_2499_p1));

assign add_ln370_29_fu_1773_p2 = ($signed(sext_ln368_52_fu_1737_p1) + $signed(sext_ln368_51_fu_1677_p1));

assign add_ln370_2_fu_2367_p2 = ($signed(sext_ln370_5_fu_2363_p1) + $signed(add_ln370_fu_2345_p2));

assign add_ln370_30_fu_2527_p2 = ($signed(sext_ln370_29_fu_2523_p1) + $signed(add_ln370_28_fu_2505_p2));

assign add_ln370_31_fu_1779_p2 = ($signed(sext_ln368_50_fu_1645_p1) + $signed(sext_ln368_49_fu_1613_p1));

assign add_ln370_32_fu_1785_p2 = ($signed(sext_ln368_48_fu_1581_p1) + $signed(sext_ln370_25_fu_1769_p1));

assign add_ln370_33_fu_2517_p2 = ($signed(sext_ln370_28_fu_2514_p1) + $signed(sext_ln370_27_fu_2511_p1));

assign add_ln370_34_fu_2533_p2 = (add_ln370_30_fu_2527_p2 + select_ln342_3_fu_2304_p3);

assign add_ln370_35_fu_2545_p2 = ($signed(sext_ln370_32_fu_2542_p1) + $signed(sext_ln370_30_fu_2539_p1));

assign add_ln370_36_fu_1913_p2 = ($signed(sext_ln368_57_fu_1891_p1) + $signed(sext_ln368_56_fu_1859_p1));

assign add_ln370_37_fu_2567_p2 = ($signed(sext_ln370_35_fu_2563_p1) + $signed(add_ln370_35_fu_2545_p2));

assign add_ln370_38_fu_1919_p2 = ($signed(sext_ln368_55_fu_1841_p1) + $signed(sext_ln368_54_fu_1823_p1));

assign add_ln370_39_fu_1925_p2 = ($signed(sext_ln368_53_fu_1805_p1) + $signed(sext_ln370_31_fu_1909_p1));

assign add_ln370_3_fu_1037_p2 = ($signed(sext_ln368_30_fu_887_p1) + $signed(sext_ln368_29_fu_851_p1));

assign add_ln370_40_fu_2557_p2 = ($signed(sext_ln370_34_fu_2554_p1) + $signed(sext_ln370_33_fu_2551_p1));

assign add_ln370_41_fu_2573_p2 = (add_ln370_37_fu_2567_p2 + select_ln342_2_fu_2297_p3);

assign add_ln370_42_fu_2585_p2 = ($signed(sext_ln370_38_fu_2582_p1) + $signed(sext_ln370_36_fu_2579_p1));

assign add_ln370_43_fu_2053_p2 = ($signed(sext_ln368_62_fu_2031_p1) + $signed(sext_ln368_61_fu_1999_p1));

assign add_ln370_44_fu_2607_p2 = ($signed(sext_ln370_41_fu_2603_p1) + $signed(add_ln370_42_fu_2585_p2));

assign add_ln370_45_fu_2059_p2 = ($signed(sext_ln368_60_fu_1981_p1) + $signed(sext_ln368_59_fu_1963_p1));

assign add_ln370_46_fu_2065_p2 = ($signed(sext_ln368_58_fu_1945_p1) + $signed(sext_ln370_37_fu_2049_p1));

assign add_ln370_47_fu_2597_p2 = ($signed(sext_ln370_40_fu_2594_p1) + $signed(sext_ln370_39_fu_2591_p1));

assign add_ln370_48_fu_2613_p2 = (add_ln370_44_fu_2607_p2 + select_ln342_1_fu_2290_p3);

assign add_ln370_49_fu_2625_p2 = ($signed(sext_ln370_44_fu_2622_p1) + $signed(sext_ln370_42_fu_2619_p1));

assign add_ln370_4_fu_1043_p2 = ($signed(sext_ln368_28_fu_829_p1) + $signed(sext_ln370_1_fu_1027_p1));

assign add_ln370_50_fu_2193_p2 = ($signed(sext_ln368_67_fu_2171_p1) + $signed(sext_ln368_66_fu_2139_p1));

assign add_ln370_51_fu_2647_p2 = ($signed(sext_ln370_47_fu_2643_p1) + $signed(add_ln370_49_fu_2625_p2));

assign add_ln370_52_fu_2199_p2 = ($signed(sext_ln368_65_fu_2121_p1) + $signed(sext_ln368_64_fu_2103_p1));

assign add_ln370_53_fu_2205_p2 = ($signed(sext_ln368_63_fu_2085_p1) + $signed(sext_ln370_43_fu_2189_p1));

assign add_ln370_54_fu_2637_p2 = ($signed(sext_ln370_46_fu_2634_p1) + $signed(sext_ln370_45_fu_2631_p1));

assign add_ln370_55_fu_2653_p2 = (add_ln370_51_fu_2647_p2 + select_ln342_fu_2283_p3);

assign add_ln370_5_fu_2357_p2 = ($signed(sext_ln370_4_fu_2354_p1) + $signed(sext_ln370_3_fu_2351_p1));

assign add_ln370_6_fu_2373_p2 = (add_ln370_2_fu_2367_p2 + select_ln342_7_fu_2332_p3);

assign add_ln370_7_fu_2385_p2 = ($signed(sext_ln370_8_fu_2382_p1) + $signed(sext_ln370_6_fu_2379_p1));

assign add_ln370_8_fu_1199_p2 = ($signed(sext_ln368_37_fu_1173_p1) + $signed(sext_ln368_36_fu_1133_p1));

assign add_ln370_9_fu_2407_p2 = ($signed(sext_ln370_11_fu_2403_p1) + $signed(add_ln370_7_fu_2385_p2));

assign add_ln370_fu_2345_p2 = ($signed(sext_ln370_2_fu_2342_p1) + $signed(sext_ln370_fu_2339_p1));

assign and_ln336_fu_486_p2 = (xor_ln336_fu_475_p2 & icmp_ln338_fu_480_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((weight_sm_empty_n == 1'b0) | (cache_window_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln378_reg_3048_pp0_iter2_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_245 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_286 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign cit_3_fu_2217_p2 = (select_ln337_fu_497_p3 + 5'd1);

assign icmp_ln336_fu_419_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_425_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_480_p2 = ((ap_sig_allocacmp_cit_load == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_505_p2 = ((select_ln337_fu_497_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_2211_p2 = ((select_ln337_fu_497_p3 == 5'd27) ? 1'b1 : 1'b0);

assign lshr_ln_fu_517_p4 = {{cache_window_sm_dout[5:3]}};

assign mac_sm_din = {{{{{{{{add_ln370_55_reg_3087}, {add_ln370_48_reg_3082}}, {add_ln370_41_reg_3077}}, {add_ln370_34_reg_3072}}, {add_ln370_27_reg_3067}}, {add_ln370_20_reg_3062}}, {add_ln370_13_reg_3057}}, {add_ln370_6_reg_3052}};

assign mul_res_540_fu_845_p0 = zext_ln353_fu_527_p1;

assign mul_res_540_fu_845_p1 = sext_ln368_1_fu_833_p1;

assign mul_res_541_fu_881_p0 = zext_ln368_1_fu_865_p1;

assign mul_res_541_fu_881_p1 = sext_ln368_2_fu_869_p1;

assign mul_res_542_fu_917_p0 = zext_ln368_2_fu_901_p1;

assign mul_res_542_fu_917_p1 = sext_ln368_3_fu_905_p1;

assign mul_res_543_fu_953_p0 = zext_ln368_3_fu_937_p1;

assign mul_res_543_fu_953_p1 = sext_ln368_4_fu_941_p1;

assign mul_res_544_fu_985_p0 = zext_ln368_4_fu_969_p1;

assign mul_res_544_fu_985_p1 = sext_ln368_5_fu_973_p1;

assign mul_res_545_fu_1021_p0 = zext_ln368_5_fu_1005_p1;

assign mul_res_545_fu_1021_p1 = sext_ln368_6_fu_1009_p1;

assign mul_res_546_fu_1061_p0 = sext_ln368_7_fu_1049_p1;

assign mul_res_546_fu_1061_p1 = zext_ln368_fu_807_p1;

assign mul_res_547_fu_1083_p0 = zext_ln353_fu_527_p1;

assign mul_res_547_fu_1083_p1 = sext_ln368_8_fu_1071_p1;

assign mul_res_548_fu_1105_p0 = zext_ln368_1_fu_865_p1;

assign mul_res_548_fu_1105_p1 = sext_ln368_9_fu_1093_p1;

assign mul_res_549_fu_1127_p0 = zext_ln368_2_fu_901_p1;

assign mul_res_549_fu_1127_p1 = sext_ln368_10_fu_1115_p1;

assign mul_res_550_fu_1149_p0 = zext_ln368_3_fu_937_p1;

assign mul_res_550_fu_1149_p1 = sext_ln368_11_fu_1137_p1;

assign mul_res_551_fu_1167_p0 = zext_ln368_4_fu_969_p1;

assign mul_res_551_fu_1167_p1 = sext_ln368_12_fu_1155_p1;

assign mul_res_552_fu_1189_p0 = zext_ln368_5_fu_1005_p1;

assign mul_res_552_fu_1189_p1 = sext_ln368_13_fu_1177_p1;

assign mul_res_553_fu_1229_p0 = sext_ln368_14_fu_1217_p1;

assign mul_res_553_fu_1229_p1 = zext_ln368_fu_807_p1;

assign mul_res_554_fu_1251_p0 = zext_ln353_fu_527_p1;

assign mul_res_554_fu_1251_p1 = sext_ln368_15_fu_1239_p1;

assign mul_res_555_fu_1273_p0 = zext_ln368_1_fu_865_p1;

assign mul_res_555_fu_1273_p1 = sext_ln368_16_fu_1261_p1;

assign mul_res_556_fu_1295_p0 = zext_ln368_2_fu_901_p1;

assign mul_res_556_fu_1295_p1 = sext_ln368_17_fu_1283_p1;

assign mul_res_557_fu_1317_p0 = zext_ln368_3_fu_937_p1;

assign mul_res_557_fu_1317_p1 = sext_ln368_18_fu_1305_p1;

assign mul_res_558_fu_1335_p0 = zext_ln368_4_fu_969_p1;

assign mul_res_558_fu_1335_p1 = sext_ln368_19_fu_1323_p1;

assign mul_res_559_fu_1357_p0 = zext_ln368_5_fu_1005_p1;

assign mul_res_559_fu_1357_p1 = sext_ln368_20_fu_1345_p1;

assign mul_res_560_fu_1397_p0 = sext_ln368_21_fu_1385_p1;

assign mul_res_560_fu_1397_p1 = zext_ln368_fu_807_p1;

assign mul_res_561_fu_1419_p0 = zext_ln353_fu_527_p1;

assign mul_res_561_fu_1419_p1 = sext_ln368_22_fu_1407_p1;

assign mul_res_562_fu_1441_p0 = zext_ln368_1_fu_865_p1;

assign mul_res_562_fu_1441_p1 = sext_ln368_23_fu_1429_p1;

assign mul_res_563_fu_1463_p0 = zext_ln368_2_fu_901_p1;

assign mul_res_563_fu_1463_p1 = sext_ln368_24_fu_1451_p1;

assign mul_res_564_fu_1485_p0 = zext_ln368_3_fu_937_p1;

assign mul_res_564_fu_1485_p1 = sext_ln368_25_fu_1473_p1;

assign mul_res_565_fu_1503_p0 = zext_ln368_4_fu_969_p1;

assign mul_res_565_fu_1503_p1 = sext_ln368_26_fu_1491_p1;

assign mul_res_566_fu_1525_p0 = zext_ln368_5_fu_1005_p1;

assign mul_res_566_fu_1525_p1 = sext_ln368_27_fu_1513_p1;

assign mul_res_567_fu_1575_p0 = zext_ln368_6_fu_1563_p1;

assign mul_res_567_fu_1575_p1 = sext_ln368_fu_811_p1;

assign mul_res_568_fu_1607_p0 = zext_ln368_7_fu_1595_p1;

assign mul_res_568_fu_1607_p1 = sext_ln368_1_fu_833_p1;

assign mul_res_569_fu_1639_p0 = zext_ln368_8_fu_1627_p1;

assign mul_res_569_fu_1639_p1 = sext_ln368_2_fu_869_p1;

assign mul_res_570_fu_1671_p0 = zext_ln368_9_fu_1659_p1;

assign mul_res_570_fu_1671_p1 = sext_ln368_3_fu_905_p1;

assign mul_res_571_fu_1703_p0 = zext_ln368_10_fu_1691_p1;

assign mul_res_571_fu_1703_p1 = sext_ln368_4_fu_941_p1;

assign mul_res_572_fu_1731_p0 = zext_ln368_11_fu_1719_p1;

assign mul_res_572_fu_1731_p1 = sext_ln368_5_fu_973_p1;

assign mul_res_573_fu_1763_p0 = zext_ln368_12_fu_1751_p1;

assign mul_res_573_fu_1763_p1 = sext_ln368_6_fu_1009_p1;

assign mul_res_574_fu_1799_p0 = zext_ln368_6_fu_1563_p1;

assign mul_res_574_fu_1799_p1 = sext_ln368_7_fu_1049_p1;

assign mul_res_575_fu_1817_p0 = zext_ln368_7_fu_1595_p1;

assign mul_res_575_fu_1817_p1 = sext_ln368_8_fu_1071_p1;

assign mul_res_576_fu_1835_p0 = zext_ln368_8_fu_1627_p1;

assign mul_res_576_fu_1835_p1 = sext_ln368_9_fu_1093_p1;

assign mul_res_577_fu_1853_p0 = zext_ln368_9_fu_1659_p1;

assign mul_res_577_fu_1853_p1 = sext_ln368_10_fu_1115_p1;

assign mul_res_578_fu_1871_p0 = zext_ln368_10_fu_1691_p1;

assign mul_res_578_fu_1871_p1 = sext_ln368_11_fu_1137_p1;

assign mul_res_579_fu_1885_p0 = zext_ln368_11_fu_1719_p1;

assign mul_res_579_fu_1885_p1 = sext_ln368_12_fu_1155_p1;

assign mul_res_580_fu_1903_p0 = zext_ln368_12_fu_1751_p1;

assign mul_res_580_fu_1903_p1 = sext_ln368_13_fu_1177_p1;

assign mul_res_581_fu_1939_p0 = zext_ln368_6_fu_1563_p1;

assign mul_res_581_fu_1939_p1 = sext_ln368_14_fu_1217_p1;

assign mul_res_582_fu_1957_p0 = zext_ln368_7_fu_1595_p1;

assign mul_res_582_fu_1957_p1 = sext_ln368_15_fu_1239_p1;

assign mul_res_583_fu_1975_p0 = zext_ln368_8_fu_1627_p1;

assign mul_res_583_fu_1975_p1 = sext_ln368_16_fu_1261_p1;

assign mul_res_584_fu_1993_p0 = zext_ln368_9_fu_1659_p1;

assign mul_res_584_fu_1993_p1 = sext_ln368_17_fu_1283_p1;

assign mul_res_585_fu_2011_p0 = zext_ln368_10_fu_1691_p1;

assign mul_res_585_fu_2011_p1 = sext_ln368_18_fu_1305_p1;

assign mul_res_586_fu_2025_p0 = zext_ln368_11_fu_1719_p1;

assign mul_res_586_fu_2025_p1 = sext_ln368_19_fu_1323_p1;

assign mul_res_587_fu_2043_p0 = zext_ln368_12_fu_1751_p1;

assign mul_res_587_fu_2043_p1 = sext_ln368_20_fu_1345_p1;

assign mul_res_588_fu_2079_p0 = zext_ln368_6_fu_1563_p1;

assign mul_res_588_fu_2079_p1 = sext_ln368_21_fu_1385_p1;

assign mul_res_589_fu_2097_p0 = zext_ln368_7_fu_1595_p1;

assign mul_res_589_fu_2097_p1 = sext_ln368_22_fu_1407_p1;

assign mul_res_590_fu_2115_p0 = zext_ln368_8_fu_1627_p1;

assign mul_res_590_fu_2115_p1 = sext_ln368_23_fu_1429_p1;

assign mul_res_591_fu_2133_p0 = zext_ln368_9_fu_1659_p1;

assign mul_res_591_fu_2133_p1 = sext_ln368_24_fu_1451_p1;

assign mul_res_592_fu_2151_p0 = zext_ln368_10_fu_1691_p1;

assign mul_res_592_fu_2151_p1 = sext_ln368_25_fu_1473_p1;

assign mul_res_593_fu_2165_p0 = zext_ln368_11_fu_1719_p1;

assign mul_res_593_fu_2165_p1 = sext_ln368_26_fu_1491_p1;

assign mul_res_594_fu_2183_p0 = zext_ln368_12_fu_1751_p1;

assign mul_res_594_fu_2183_p1 = sext_ln368_27_fu_1513_p1;

assign mul_res_fu_823_p0 = sext_ln368_fu_811_p1;

assign mul_res_fu_823_p1 = zext_ln368_fu_807_p1;

assign or_ln337_fu_492_p2 = (icmp_ln337_reg_2870 | and_ln336_fu_486_p2);

assign select_ln337_3_fu_437_p3 = ((icmp_ln337_fu_425_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_431_p2);

assign select_ln337_fu_497_p3 = ((or_ln337_fu_492_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign select_ln342_1_fu_2290_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1122_fu_330);

assign select_ln342_2_fu_2297_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1121_fu_326);

assign select_ln342_3_fu_2304_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1120_fu_322);

assign select_ln342_4_fu_2311_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1119_fu_318);

assign select_ln342_5_fu_2318_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1118_fu_314);

assign select_ln342_6_fu_2325_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1117_fu_310);

assign select_ln342_7_fu_2332_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_fu_306);

assign select_ln342_fu_2283_p3 = ((icmp_ln342_reg_2876[0:0] == 1'b1) ? 10'd0 : empty_1123_fu_334);

assign sext_ln368_10_fu_1115_p1 = $signed(trunc_ln354_10_fu_627_p4);

assign sext_ln368_11_fu_1137_p1 = $signed(trunc_ln354_11_fu_637_p4);

assign sext_ln368_12_fu_1155_p1 = $signed(trunc_ln354_12_fu_647_p4);

assign sext_ln368_13_fu_1177_p1 = $signed(trunc_ln354_13_fu_657_p4);

assign sext_ln368_14_fu_1217_p1 = $signed(trunc_ln354_14_fu_667_p4);

assign sext_ln368_15_fu_1239_p1 = $signed(trunc_ln354_15_fu_677_p4);

assign sext_ln368_16_fu_1261_p1 = $signed(trunc_ln354_16_fu_687_p4);

assign sext_ln368_17_fu_1283_p1 = $signed(trunc_ln354_17_fu_697_p4);

assign sext_ln368_18_fu_1305_p1 = $signed(trunc_ln354_18_fu_707_p4);

assign sext_ln368_19_fu_1323_p1 = $signed(trunc_ln354_19_fu_717_p4);

assign sext_ln368_1_fu_833_p1 = $signed(trunc_ln354_1_fu_537_p4);

assign sext_ln368_20_fu_1345_p1 = $signed(trunc_ln354_20_fu_727_p4);

assign sext_ln368_21_fu_1385_p1 = $signed(trunc_ln354_21_fu_737_p4);

assign sext_ln368_22_fu_1407_p1 = $signed(trunc_ln354_22_fu_747_p4);

assign sext_ln368_23_fu_1429_p1 = $signed(trunc_ln354_23_fu_757_p4);

assign sext_ln368_24_fu_1451_p1 = $signed(trunc_ln354_24_fu_767_p4);

assign sext_ln368_25_fu_1473_p1 = $signed(trunc_ln354_25_fu_777_p4);

assign sext_ln368_26_fu_1491_p1 = $signed(trunc_ln354_26_fu_787_p4);

assign sext_ln368_27_fu_1513_p1 = $signed(trunc_ln354_27_fu_797_p4);

assign sext_ln368_28_fu_829_p1 = mul_res_fu_823_p2;

assign sext_ln368_29_fu_851_p1 = mul_res_540_fu_845_p2;

assign sext_ln368_2_fu_869_p1 = $signed(trunc_ln354_2_fu_547_p4);

assign sext_ln368_30_fu_887_p1 = mul_res_541_fu_881_p2;

assign sext_ln368_31_fu_923_p1 = mul_res_542_fu_917_p2;

assign sext_ln368_32_fu_991_p1 = mul_res_544_fu_985_p2;

assign sext_ln368_33_fu_1067_p1 = mul_res_546_fu_1061_p2;

assign sext_ln368_34_fu_1089_p1 = mul_res_547_fu_1083_p2;

assign sext_ln368_35_fu_1111_p1 = mul_res_548_fu_1105_p2;

assign sext_ln368_36_fu_1133_p1 = mul_res_549_fu_1127_p2;

assign sext_ln368_37_fu_1173_p1 = mul_res_551_fu_1167_p2;

assign sext_ln368_38_fu_1235_p1 = mul_res_553_fu_1229_p2;

assign sext_ln368_39_fu_1257_p1 = mul_res_554_fu_1251_p2;

assign sext_ln368_3_fu_905_p1 = $signed(trunc_ln354_3_fu_557_p4);

assign sext_ln368_40_fu_1279_p1 = mul_res_555_fu_1273_p2;

assign sext_ln368_41_fu_1301_p1 = mul_res_556_fu_1295_p2;

assign sext_ln368_42_fu_1341_p1 = mul_res_558_fu_1335_p2;

assign sext_ln368_43_fu_1403_p1 = mul_res_560_fu_1397_p2;

assign sext_ln368_44_fu_1425_p1 = mul_res_561_fu_1419_p2;

assign sext_ln368_45_fu_1447_p1 = mul_res_562_fu_1441_p2;

assign sext_ln368_46_fu_1469_p1 = mul_res_563_fu_1463_p2;

assign sext_ln368_47_fu_1509_p1 = mul_res_565_fu_1503_p2;

assign sext_ln368_48_fu_1581_p1 = mul_res_567_fu_1575_p2;

assign sext_ln368_49_fu_1613_p1 = mul_res_568_fu_1607_p2;

assign sext_ln368_4_fu_941_p1 = $signed(trunc_ln354_4_fu_567_p4);

assign sext_ln368_50_fu_1645_p1 = mul_res_569_fu_1639_p2;

assign sext_ln368_51_fu_1677_p1 = mul_res_570_fu_1671_p2;

assign sext_ln368_52_fu_1737_p1 = mul_res_572_fu_1731_p2;

assign sext_ln368_53_fu_1805_p1 = mul_res_574_fu_1799_p2;

assign sext_ln368_54_fu_1823_p1 = mul_res_575_fu_1817_p2;

assign sext_ln368_55_fu_1841_p1 = mul_res_576_fu_1835_p2;

assign sext_ln368_56_fu_1859_p1 = mul_res_577_fu_1853_p2;

assign sext_ln368_57_fu_1891_p1 = mul_res_579_fu_1885_p2;

assign sext_ln368_58_fu_1945_p1 = mul_res_581_fu_1939_p2;

assign sext_ln368_59_fu_1963_p1 = mul_res_582_fu_1957_p2;

assign sext_ln368_5_fu_973_p1 = $signed(trunc_ln354_5_fu_577_p4);

assign sext_ln368_60_fu_1981_p1 = mul_res_583_fu_1975_p2;

assign sext_ln368_61_fu_1999_p1 = mul_res_584_fu_1993_p2;

assign sext_ln368_62_fu_2031_p1 = mul_res_586_fu_2025_p2;

assign sext_ln368_63_fu_2085_p1 = mul_res_588_fu_2079_p2;

assign sext_ln368_64_fu_2103_p1 = mul_res_589_fu_2097_p2;

assign sext_ln368_65_fu_2121_p1 = mul_res_590_fu_2115_p2;

assign sext_ln368_66_fu_2139_p1 = mul_res_591_fu_2133_p2;

assign sext_ln368_67_fu_2171_p1 = mul_res_593_fu_2165_p2;

assign sext_ln368_6_fu_1009_p1 = $signed(trunc_ln354_6_fu_587_p4);

assign sext_ln368_7_fu_1049_p1 = $signed(trunc_ln354_7_fu_597_p4);

assign sext_ln368_8_fu_1071_p1 = $signed(trunc_ln354_8_fu_607_p4);

assign sext_ln368_9_fu_1093_p1 = $signed(trunc_ln354_9_fu_617_p4);

assign sext_ln368_fu_811_p1 = $signed(trunc_ln354_fu_533_p1);

assign sext_ln370_10_fu_2394_p1 = $signed(add_ln370_11_reg_2923);

assign sext_ln370_11_fu_2403_p1 = $signed(add_ln370_12_fu_2397_p2);

assign sext_ln370_12_fu_2419_p1 = mul_res_557_reg_2928;

assign sext_ln370_13_fu_1363_p1 = mul_res_559_fu_1357_p2;

assign sext_ln370_14_fu_2422_p1 = $signed(add_ln370_15_reg_2933);

assign sext_ln370_15_fu_2431_p1 = $signed(add_ln370_17_reg_2938);

assign sext_ln370_16_fu_2434_p1 = $signed(add_ln370_18_reg_2943);

assign sext_ln370_17_fu_2443_p1 = $signed(add_ln370_19_fu_2437_p2);

assign sext_ln370_18_fu_2459_p1 = mul_res_564_reg_2948;

assign sext_ln370_19_fu_1531_p1 = mul_res_566_fu_1525_p2;

assign sext_ln370_1_fu_1027_p1 = mul_res_545_fu_1021_p2;

assign sext_ln370_20_fu_2462_p1 = $signed(add_ln370_22_reg_2953);

assign sext_ln370_21_fu_2471_p1 = $signed(add_ln370_24_reg_2958);

assign sext_ln370_22_fu_2474_p1 = $signed(add_ln370_25_reg_2963);

assign sext_ln370_23_fu_2483_p1 = $signed(add_ln370_26_fu_2477_p2);

assign sext_ln370_24_fu_2499_p1 = mul_res_571_reg_2968;

assign sext_ln370_25_fu_1769_p1 = mul_res_573_fu_1763_p2;

assign sext_ln370_26_fu_2502_p1 = $signed(add_ln370_29_reg_2973);

assign sext_ln370_27_fu_2511_p1 = $signed(add_ln370_31_reg_2978);

assign sext_ln370_28_fu_2514_p1 = $signed(add_ln370_32_reg_2983);

assign sext_ln370_29_fu_2523_p1 = $signed(add_ln370_33_fu_2517_p2);

assign sext_ln370_2_fu_2342_p1 = $signed(add_ln370_1_reg_2893);

assign sext_ln370_30_fu_2539_p1 = mul_res_578_reg_2988;

assign sext_ln370_31_fu_1909_p1 = mul_res_580_fu_1903_p2;

assign sext_ln370_32_fu_2542_p1 = $signed(add_ln370_36_reg_2993);

assign sext_ln370_33_fu_2551_p1 = $signed(add_ln370_38_reg_2998);

assign sext_ln370_34_fu_2554_p1 = $signed(add_ln370_39_reg_3003);

assign sext_ln370_35_fu_2563_p1 = $signed(add_ln370_40_fu_2557_p2);

assign sext_ln370_36_fu_2579_p1 = mul_res_585_reg_3008;

assign sext_ln370_37_fu_2049_p1 = mul_res_587_fu_2043_p2;

assign sext_ln370_38_fu_2582_p1 = $signed(add_ln370_43_reg_3013);

assign sext_ln370_39_fu_2591_p1 = $signed(add_ln370_45_reg_3018);

assign sext_ln370_3_fu_2351_p1 = $signed(add_ln370_3_reg_2898);

assign sext_ln370_40_fu_2594_p1 = $signed(add_ln370_46_reg_3023);

assign sext_ln370_41_fu_2603_p1 = $signed(add_ln370_47_fu_2597_p2);

assign sext_ln370_42_fu_2619_p1 = mul_res_592_reg_3028;

assign sext_ln370_43_fu_2189_p1 = mul_res_594_fu_2183_p2;

assign sext_ln370_44_fu_2622_p1 = $signed(add_ln370_50_reg_3033);

assign sext_ln370_45_fu_2631_p1 = $signed(add_ln370_52_reg_3038);

assign sext_ln370_46_fu_2634_p1 = $signed(add_ln370_53_reg_3043);

assign sext_ln370_47_fu_2643_p1 = $signed(add_ln370_54_fu_2637_p2);

assign sext_ln370_4_fu_2354_p1 = $signed(add_ln370_4_reg_2903);

assign sext_ln370_5_fu_2363_p1 = $signed(add_ln370_5_fu_2357_p2);

assign sext_ln370_6_fu_2379_p1 = mul_res_550_reg_2908;

assign sext_ln370_7_fu_1195_p1 = mul_res_552_fu_1189_p2;

assign sext_ln370_8_fu_2382_p1 = $signed(add_ln370_8_reg_2913);

assign sext_ln370_9_fu_2391_p1 = $signed(add_ln370_10_reg_2918);

assign sext_ln370_fu_2339_p1 = mul_res_543_reg_2888;

assign start_out = real_start;

assign tmp_40_fu_891_p4 = {{cache_window_sm_dout[11:9]}};

assign tmp_41_fu_927_p4 = {{cache_window_sm_dout[14:12]}};

assign tmp_42_fu_959_p4 = {{cache_window_sm_dout[17:15]}};

assign tmp_43_fu_995_p4 = {{cache_window_sm_dout[20:18]}};

assign tmp_44_fu_1553_p4 = {{cache_window_sm_dout[23:21]}};

assign tmp_45_fu_1585_p4 = {{cache_window_sm_dout[26:24]}};

assign tmp_46_fu_1617_p4 = {{cache_window_sm_dout[29:27]}};

assign tmp_47_fu_1649_p4 = {{cache_window_sm_dout[32:30]}};

assign tmp_48_fu_1681_p4 = {{cache_window_sm_dout[35:33]}};

assign tmp_49_fu_1709_p4 = {{cache_window_sm_dout[38:36]}};

assign tmp_50_fu_1741_p4 = {{cache_window_sm_dout[41:39]}};

assign tmp_fu_855_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln353_fu_513_p1 = cache_window_sm_dout[2:0];

assign trunc_ln354_10_fu_627_p4 = {{weight_sm_dout[32:30]}};

assign trunc_ln354_11_fu_637_p4 = {{weight_sm_dout[35:33]}};

assign trunc_ln354_12_fu_647_p4 = {{weight_sm_dout[38:36]}};

assign trunc_ln354_13_fu_657_p4 = {{weight_sm_dout[41:39]}};

assign trunc_ln354_14_fu_667_p4 = {{weight_sm_dout[44:42]}};

assign trunc_ln354_15_fu_677_p4 = {{weight_sm_dout[47:45]}};

assign trunc_ln354_16_fu_687_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln354_17_fu_697_p4 = {{weight_sm_dout[53:51]}};

assign trunc_ln354_18_fu_707_p4 = {{weight_sm_dout[56:54]}};

assign trunc_ln354_19_fu_717_p4 = {{weight_sm_dout[59:57]}};

assign trunc_ln354_1_fu_537_p4 = {{weight_sm_dout[5:3]}};

assign trunc_ln354_20_fu_727_p4 = {{weight_sm_dout[62:60]}};

assign trunc_ln354_21_fu_737_p4 = {{weight_sm_dout[65:63]}};

assign trunc_ln354_22_fu_747_p4 = {{weight_sm_dout[68:66]}};

assign trunc_ln354_23_fu_757_p4 = {{weight_sm_dout[71:69]}};

assign trunc_ln354_24_fu_767_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln354_25_fu_777_p4 = {{weight_sm_dout[77:75]}};

assign trunc_ln354_26_fu_787_p4 = {{weight_sm_dout[80:78]}};

assign trunc_ln354_27_fu_797_p4 = {{weight_sm_dout[83:81]}};

assign trunc_ln354_2_fu_547_p4 = {{weight_sm_dout[8:6]}};

assign trunc_ln354_3_fu_557_p4 = {{weight_sm_dout[11:9]}};

assign trunc_ln354_4_fu_567_p4 = {{weight_sm_dout[14:12]}};

assign trunc_ln354_5_fu_577_p4 = {{weight_sm_dout[17:15]}};

assign trunc_ln354_6_fu_587_p4 = {{weight_sm_dout[20:18]}};

assign trunc_ln354_7_fu_597_p4 = {{weight_sm_dout[23:21]}};

assign trunc_ln354_8_fu_607_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln354_9_fu_617_p4 = {{weight_sm_dout[29:27]}};

assign trunc_ln354_fu_533_p1 = weight_sm_dout[2:0];

assign xor_ln336_fu_475_p2 = (icmp_ln337_reg_2870 ^ 1'd1);

assign zext_ln353_fu_527_p1 = lshr_ln_fu_517_p4;

assign zext_ln368_10_fu_1691_p1 = tmp_48_fu_1681_p4;

assign zext_ln368_11_fu_1719_p1 = tmp_49_fu_1709_p4;

assign zext_ln368_12_fu_1751_p1 = tmp_50_fu_1741_p4;

assign zext_ln368_1_fu_865_p1 = tmp_fu_855_p4;

assign zext_ln368_2_fu_901_p1 = tmp_40_fu_891_p4;

assign zext_ln368_3_fu_937_p1 = tmp_41_fu_927_p4;

assign zext_ln368_4_fu_969_p1 = tmp_42_fu_959_p4;

assign zext_ln368_5_fu_1005_p1 = tmp_43_fu_995_p4;

assign zext_ln368_6_fu_1563_p1 = tmp_44_fu_1553_p4;

assign zext_ln368_7_fu_1595_p1 = tmp_45_fu_1585_p4;

assign zext_ln368_8_fu_1627_p1 = tmp_46_fu_1617_p4;

assign zext_ln368_9_fu_1659_p1 = tmp_47_fu_1649_p4;

assign zext_ln368_fu_807_p1 = trunc_ln353_fu_513_p1;

endmodule //ATTN11_matmul_step2_mac_24
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_29 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [83:0] weight_sm_dout;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [139:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln378_reg_3204;
reg   [0:0] icmp_ln378_reg_3204_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_445_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln337_fu_451_p2;
reg   [0:0] icmp_ln337_reg_2925;
wire   [0:0] icmp_ln342_fu_531_p2;
reg   [0:0] icmp_ln342_reg_2931;
reg   [2:0] trunc_ln353_s_reg_2949;
reg   [2:0] trunc_ln353_1_reg_2954;
reg   [2:0] trunc_ln354_s_reg_2959;
reg   [2:0] trunc_ln354_30_reg_2964;
reg   [2:0] trunc_ln354_34_reg_2969;
reg   [2:0] trunc_ln354_38_reg_2974;
reg   [2:0] trunc_ln354_42_reg_2979;
reg   [2:0] trunc_ln354_46_reg_2984;
reg   [2:0] trunc_ln354_50_reg_2989;
wire  signed [5:0] mul_res_fu_905_p2;
reg  signed [5:0] mul_res_reg_2994;
wire  signed [5:0] mul_res_486_fu_927_p2;
reg  signed [5:0] mul_res_486_reg_2999;
wire  signed [5:0] mul_res_487_fu_949_p2;
reg  signed [5:0] mul_res_487_reg_3004;
wire  signed [5:0] mul_res_488_fu_967_p2;
reg  signed [5:0] mul_res_488_reg_3009;
wire  signed [5:0] mul_res_490_fu_985_p2;
reg  signed [5:0] mul_res_490_reg_3014;
wire  signed [5:0] mul_res_491_fu_1003_p2;
reg  signed [5:0] mul_res_491_reg_3019;
wire  signed [5:0] mul_res_492_fu_1021_p2;
reg  signed [5:0] mul_res_492_reg_3024;
wire  signed [5:0] mul_res_494_fu_1039_p2;
reg  signed [5:0] mul_res_494_reg_3029;
wire  signed [5:0] mul_res_495_fu_1057_p2;
reg  signed [5:0] mul_res_495_reg_3034;
wire  signed [5:0] mul_res_496_fu_1075_p2;
reg  signed [5:0] mul_res_496_reg_3039;
wire  signed [5:0] mul_res_498_fu_1093_p2;
reg  signed [5:0] mul_res_498_reg_3044;
wire  signed [5:0] mul_res_499_fu_1111_p2;
reg  signed [5:0] mul_res_499_reg_3049;
wire  signed [5:0] mul_res_500_fu_1129_p2;
reg  signed [5:0] mul_res_500_reg_3054;
wire  signed [5:0] mul_res_502_fu_1147_p2;
reg  signed [5:0] mul_res_502_reg_3059;
wire  signed [5:0] mul_res_503_fu_1165_p2;
reg  signed [5:0] mul_res_503_reg_3064;
wire  signed [5:0] mul_res_504_fu_1183_p2;
reg  signed [5:0] mul_res_504_reg_3069;
wire  signed [5:0] mul_res_506_fu_1201_p2;
reg  signed [5:0] mul_res_506_reg_3074;
wire  signed [5:0] mul_res_507_fu_1219_p2;
reg  signed [5:0] mul_res_507_reg_3079;
wire  signed [5:0] mul_res_508_fu_1237_p2;
reg  signed [5:0] mul_res_508_reg_3084;
wire  signed [5:0] mul_res_510_fu_1255_p2;
reg  signed [5:0] mul_res_510_reg_3089;
wire  signed [5:0] mul_res_511_fu_1273_p2;
reg  signed [5:0] mul_res_511_reg_3094;
wire  signed [5:0] mul_res_512_fu_1291_p2;
reg  signed [5:0] mul_res_512_reg_3099;
wire  signed [5:0] mul_res_514_fu_1309_p2;
reg  signed [5:0] mul_res_514_reg_3104;
wire  signed [5:0] mul_res_515_fu_1327_p2;
reg  signed [5:0] mul_res_515_reg_3109;
wire  signed [5:0] mul_res_516_fu_1341_p2;
reg  signed [5:0] mul_res_516_reg_3114;
wire  signed [5:0] mul_res_518_fu_1355_p2;
reg  signed [5:0] mul_res_518_reg_3119;
wire  signed [5:0] mul_res_519_fu_1369_p2;
reg  signed [5:0] mul_res_519_reg_3124;
wire  signed [5:0] mul_res_520_fu_1383_p2;
reg  signed [5:0] mul_res_520_reg_3129;
wire  signed [5:0] mul_res_522_fu_1397_p2;
reg  signed [5:0] mul_res_522_reg_3134;
wire  signed [5:0] mul_res_523_fu_1411_p2;
reg  signed [5:0] mul_res_523_reg_3139;
wire  signed [5:0] mul_res_524_fu_1425_p2;
reg  signed [5:0] mul_res_524_reg_3144;
wire  signed [5:0] mul_res_526_fu_1439_p2;
reg  signed [5:0] mul_res_526_reg_3149;
wire  signed [5:0] mul_res_527_fu_1453_p2;
reg  signed [5:0] mul_res_527_reg_3154;
wire  signed [5:0] mul_res_528_fu_1467_p2;
reg  signed [5:0] mul_res_528_reg_3159;
wire  signed [5:0] mul_res_530_fu_1481_p2;
reg  signed [5:0] mul_res_530_reg_3164;
wire  signed [5:0] mul_res_531_fu_1495_p2;
reg  signed [5:0] mul_res_531_reg_3169;
wire  signed [5:0] mul_res_532_fu_1509_p2;
reg  signed [5:0] mul_res_532_reg_3174;
wire  signed [5:0] mul_res_534_fu_1523_p2;
reg  signed [5:0] mul_res_534_reg_3179;
wire  signed [5:0] mul_res_535_fu_1537_p2;
reg  signed [5:0] mul_res_535_reg_3184;
wire  signed [5:0] mul_res_536_fu_1551_p2;
reg  signed [5:0] mul_res_536_reg_3189;
wire  signed [5:0] mul_res_538_fu_1565_p2;
reg  signed [5:0] mul_res_538_reg_3194;
wire  signed [5:0] mul_res_539_fu_1579_p2;
reg  signed [5:0] mul_res_539_reg_3199;
wire   [0:0] icmp_ln378_fu_1585_p2;
wire   [9:0] add_ln370_58_fu_1846_p2;
reg   [9:0] add_ln370_58_reg_3208;
wire   [9:0] add_ln370_62_fu_1904_p2;
reg   [9:0] add_ln370_62_reg_3213;
wire   [9:0] add_ln370_66_fu_1962_p2;
reg   [9:0] add_ln370_66_reg_3218;
wire   [9:0] add_ln370_70_fu_2020_p2;
reg   [9:0] add_ln370_70_reg_3223;
wire   [9:0] add_ln370_74_fu_2078_p2;
reg   [9:0] add_ln370_74_reg_3228;
wire   [9:0] add_ln370_78_fu_2136_p2;
reg   [9:0] add_ln370_78_reg_3233;
wire   [9:0] add_ln370_82_fu_2194_p2;
reg   [9:0] add_ln370_82_reg_3238;
wire   [9:0] add_ln370_86_fu_2252_p2;
reg   [9:0] add_ln370_86_reg_3243;
wire   [9:0] add_ln370_90_fu_2307_p2;
reg   [9:0] add_ln370_90_reg_3248;
wire   [9:0] add_ln370_94_fu_2362_p2;
reg   [9:0] add_ln370_94_reg_3253;
wire   [9:0] add_ln370_98_fu_2417_p2;
reg   [9:0] add_ln370_98_reg_3258;
wire   [9:0] add_ln370_102_fu_2472_p2;
reg   [9:0] add_ln370_102_reg_3263;
wire   [9:0] add_ln370_106_fu_2527_p2;
reg   [9:0] add_ln370_106_reg_3268;
wire   [9:0] add_ln370_110_fu_2582_p2;
reg   [9:0] add_ln370_110_reg_3273;
reg   [4:0] cit_fu_304;
wire   [4:0] cit_2_fu_1591_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [9:0] empty_fu_308;
reg   [9:0] empty_1104_fu_312;
reg   [9:0] empty_1105_fu_316;
reg   [9:0] empty_1106_fu_320;
reg   [9:0] empty_1107_fu_324;
reg   [9:0] empty_1108_fu_328;
reg   [9:0] empty_1109_fu_332;
reg   [9:0] empty_1110_fu_336;
reg   [9:0] empty_1111_fu_340;
reg   [9:0] empty_1112_fu_344;
reg   [9:0] empty_1113_fu_348;
reg   [9:0] empty_1114_fu_352;
reg   [9:0] empty_1115_fu_356;
reg   [9:0] empty_1116_fu_360;
reg   [9:0] indvar_flatten_fu_364;
wire   [9:0] select_ln337_2_fu_463_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten51_fu_368;
wire   [15:0] add_ln336_fu_439_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten51_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_457_p2;
wire   [0:0] icmp_ln338_fu_506_p2;
wire   [0:0] xor_ln336_fu_501_p2;
wire   [0:0] and_ln336_fu_512_p2;
wire   [0:0] or_ln337_fu_518_p2;
wire   [4:0] select_ln337_fu_523_p3;
wire   [2:0] trunc_ln353_fu_539_p1;
wire   [2:0] trunc_ln354_fu_615_p1;
wire  signed [2:0] mul_res_fu_905_p0;
wire  signed [5:0] sext_ln368_64_fu_893_p1;
wire  signed [2:0] mul_res_fu_905_p1;
wire  signed [5:0] sext_ln368_fu_889_p1;
wire   [2:0] trunc_ln353_7_fu_553_p4;
wire   [2:0] trunc_ln354_27_fu_629_p4;
wire  signed [2:0] mul_res_486_fu_927_p0;
wire  signed [5:0] sext_ln368_69_fu_915_p1;
wire  signed [2:0] mul_res_486_fu_927_p1;
wire  signed [5:0] sext_ln368_68_fu_911_p1;
wire   [2:0] trunc_ln353_8_fu_563_p4;
wire   [2:0] trunc_ln354_28_fu_639_p4;
wire  signed [2:0] mul_res_487_fu_949_p0;
wire  signed [5:0] sext_ln368_72_fu_937_p1;
wire  signed [2:0] mul_res_487_fu_949_p1;
wire  signed [5:0] sext_ln368_71_fu_933_p1;
wire   [2:0] trunc_ln354_29_fu_649_p4;
wire  signed [2:0] mul_res_488_fu_967_p0;
wire  signed [5:0] sext_ln368_73_fu_955_p1;
wire  signed [2:0] mul_res_488_fu_967_p1;
wire   [2:0] trunc_ln354_31_fu_669_p4;
wire  signed [2:0] mul_res_490_fu_985_p0;
wire  signed [5:0] sext_ln368_76_fu_973_p1;
wire  signed [2:0] mul_res_490_fu_985_p1;
wire   [2:0] trunc_ln354_32_fu_679_p4;
wire  signed [2:0] mul_res_491_fu_1003_p0;
wire  signed [5:0] sext_ln368_78_fu_991_p1;
wire  signed [2:0] mul_res_491_fu_1003_p1;
wire   [2:0] trunc_ln354_33_fu_689_p4;
wire  signed [2:0] mul_res_492_fu_1021_p0;
wire  signed [5:0] sext_ln368_79_fu_1009_p1;
wire  signed [2:0] mul_res_492_fu_1021_p1;
wire   [2:0] trunc_ln354_35_fu_709_p4;
wire  signed [2:0] mul_res_494_fu_1039_p0;
wire  signed [5:0] sext_ln368_82_fu_1027_p1;
wire  signed [2:0] mul_res_494_fu_1039_p1;
wire   [2:0] trunc_ln354_36_fu_719_p4;
wire  signed [2:0] mul_res_495_fu_1057_p0;
wire  signed [5:0] sext_ln368_84_fu_1045_p1;
wire  signed [2:0] mul_res_495_fu_1057_p1;
wire   [2:0] trunc_ln354_37_fu_729_p4;
wire  signed [2:0] mul_res_496_fu_1075_p0;
wire  signed [5:0] sext_ln368_85_fu_1063_p1;
wire  signed [2:0] mul_res_496_fu_1075_p1;
wire   [2:0] trunc_ln354_39_fu_749_p4;
wire  signed [2:0] mul_res_498_fu_1093_p0;
wire  signed [5:0] sext_ln368_88_fu_1081_p1;
wire  signed [2:0] mul_res_498_fu_1093_p1;
wire   [2:0] trunc_ln354_40_fu_759_p4;
wire  signed [2:0] mul_res_499_fu_1111_p0;
wire  signed [5:0] sext_ln368_90_fu_1099_p1;
wire  signed [2:0] mul_res_499_fu_1111_p1;
wire   [2:0] trunc_ln354_41_fu_769_p4;
wire  signed [2:0] mul_res_500_fu_1129_p0;
wire  signed [5:0] sext_ln368_91_fu_1117_p1;
wire  signed [2:0] mul_res_500_fu_1129_p1;
wire   [2:0] trunc_ln354_43_fu_789_p4;
wire  signed [2:0] mul_res_502_fu_1147_p0;
wire  signed [5:0] sext_ln368_94_fu_1135_p1;
wire  signed [2:0] mul_res_502_fu_1147_p1;
wire   [2:0] trunc_ln354_44_fu_799_p4;
wire  signed [2:0] mul_res_503_fu_1165_p0;
wire  signed [5:0] sext_ln368_96_fu_1153_p1;
wire  signed [2:0] mul_res_503_fu_1165_p1;
wire   [2:0] trunc_ln354_45_fu_809_p4;
wire  signed [2:0] mul_res_504_fu_1183_p0;
wire  signed [5:0] sext_ln368_97_fu_1171_p1;
wire  signed [2:0] mul_res_504_fu_1183_p1;
wire   [2:0] trunc_ln354_47_fu_829_p4;
wire  signed [2:0] mul_res_506_fu_1201_p0;
wire  signed [5:0] sext_ln368_100_fu_1189_p1;
wire  signed [2:0] mul_res_506_fu_1201_p1;
wire   [2:0] trunc_ln354_48_fu_839_p4;
wire  signed [2:0] mul_res_507_fu_1219_p0;
wire  signed [5:0] sext_ln368_102_fu_1207_p1;
wire  signed [2:0] mul_res_507_fu_1219_p1;
wire   [2:0] trunc_ln354_49_fu_849_p4;
wire  signed [2:0] mul_res_508_fu_1237_p0;
wire  signed [5:0] sext_ln368_103_fu_1225_p1;
wire  signed [2:0] mul_res_508_fu_1237_p1;
wire   [2:0] trunc_ln354_51_fu_869_p4;
wire  signed [2:0] mul_res_510_fu_1255_p0;
wire  signed [5:0] sext_ln368_106_fu_1243_p1;
wire  signed [2:0] mul_res_510_fu_1255_p1;
wire   [2:0] trunc_ln354_52_fu_879_p4;
wire  signed [2:0] mul_res_511_fu_1273_p0;
wire  signed [5:0] sext_ln368_108_fu_1261_p1;
wire  signed [2:0] mul_res_511_fu_1273_p1;
wire   [2:0] trunc_ln353_9_fu_573_p4;
wire  signed [2:0] mul_res_512_fu_1291_p0;
wire  signed [2:0] mul_res_512_fu_1291_p1;
wire  signed [5:0] sext_ln368_109_fu_1279_p1;
wire   [2:0] trunc_ln353_2_fu_593_p4;
wire  signed [2:0] mul_res_514_fu_1309_p0;
wire  signed [2:0] mul_res_514_fu_1309_p1;
wire  signed [5:0] sext_ln368_112_fu_1297_p1;
wire   [2:0] trunc_ln353_3_fu_603_p4;
wire  signed [2:0] mul_res_515_fu_1327_p0;
wire  signed [2:0] mul_res_515_fu_1327_p1;
wire  signed [5:0] sext_ln368_114_fu_1315_p1;
wire  signed [2:0] mul_res_516_fu_1341_p0;
wire  signed [2:0] mul_res_516_fu_1341_p1;
wire  signed [2:0] mul_res_518_fu_1355_p0;
wire  signed [2:0] mul_res_518_fu_1355_p1;
wire  signed [2:0] mul_res_519_fu_1369_p0;
wire  signed [2:0] mul_res_519_fu_1369_p1;
wire  signed [2:0] mul_res_520_fu_1383_p0;
wire  signed [2:0] mul_res_520_fu_1383_p1;
wire  signed [2:0] mul_res_522_fu_1397_p0;
wire  signed [2:0] mul_res_522_fu_1397_p1;
wire  signed [2:0] mul_res_523_fu_1411_p0;
wire  signed [2:0] mul_res_523_fu_1411_p1;
wire  signed [2:0] mul_res_524_fu_1425_p0;
wire  signed [2:0] mul_res_524_fu_1425_p1;
wire  signed [2:0] mul_res_526_fu_1439_p0;
wire  signed [2:0] mul_res_526_fu_1439_p1;
wire  signed [2:0] mul_res_527_fu_1453_p0;
wire  signed [2:0] mul_res_527_fu_1453_p1;
wire  signed [2:0] mul_res_528_fu_1467_p0;
wire  signed [2:0] mul_res_528_fu_1467_p1;
wire  signed [2:0] mul_res_530_fu_1481_p0;
wire  signed [2:0] mul_res_530_fu_1481_p1;
wire  signed [2:0] mul_res_531_fu_1495_p0;
wire  signed [2:0] mul_res_531_fu_1495_p1;
wire  signed [2:0] mul_res_532_fu_1509_p0;
wire  signed [2:0] mul_res_532_fu_1509_p1;
wire  signed [2:0] mul_res_534_fu_1523_p0;
wire  signed [2:0] mul_res_534_fu_1523_p1;
wire  signed [2:0] mul_res_535_fu_1537_p0;
wire  signed [2:0] mul_res_535_fu_1537_p1;
wire  signed [2:0] mul_res_536_fu_1551_p0;
wire  signed [2:0] mul_res_536_fu_1551_p1;
wire  signed [2:0] mul_res_538_fu_1565_p0;
wire  signed [2:0] mul_res_538_fu_1565_p1;
wire  signed [2:0] mul_res_539_fu_1579_p0;
wire  signed [2:0] mul_res_539_fu_1579_p1;
wire  signed [2:0] mul_res_485_fu_1808_p0;
wire  signed [5:0] sext_ln368_67_fu_1797_p1;
wire  signed [2:0] mul_res_485_fu_1808_p1;
wire  signed [5:0] sext_ln368_66_fu_1794_p1;
wire  signed [5:0] mul_res_485_fu_1808_p2;
wire  signed [6:0] sext_ln368_65_fu_1791_p1;
wire  signed [6:0] sext_ln370_42_fu_1821_p1;
wire   [6:0] add_ln370_56_fu_1824_p2;
wire  signed [6:0] sext_ln368_70_fu_1818_p1;
wire   [6:0] add_ln370_57_fu_1830_p2;
wire  signed [9:0] sext_ln370_43_fu_1836_p1;
wire  signed [9:0] sext_ln370_fu_1814_p1;
wire   [9:0] add_ln370_fu_1840_p2;
wire   [9:0] select_ln342_26_fu_1784_p3;
wire  signed [2:0] mul_res_489_fu_1866_p0;
wire  signed [5:0] sext_ln368_75_fu_1855_p1;
wire  signed [2:0] mul_res_489_fu_1866_p1;
wire  signed [5:0] mul_res_489_fu_1866_p2;
wire  signed [6:0] sext_ln368_74_fu_1852_p1;
wire  signed [6:0] sext_ln370_45_fu_1879_p1;
wire   [6:0] add_ln370_60_fu_1882_p2;
wire  signed [6:0] sext_ln368_77_fu_1876_p1;
wire   [6:0] add_ln370_61_fu_1888_p2;
wire  signed [9:0] sext_ln370_46_fu_1894_p1;
wire  signed [9:0] sext_ln370_44_fu_1872_p1;
wire   [9:0] add_ln370_59_fu_1898_p2;
wire   [9:0] select_ln342_25_fu_1777_p3;
wire  signed [2:0] mul_res_493_fu_1924_p0;
wire  signed [5:0] sext_ln368_81_fu_1913_p1;
wire  signed [2:0] mul_res_493_fu_1924_p1;
wire  signed [5:0] mul_res_493_fu_1924_p2;
wire  signed [6:0] sext_ln368_80_fu_1910_p1;
wire  signed [6:0] sext_ln370_48_fu_1937_p1;
wire   [6:0] add_ln370_64_fu_1940_p2;
wire  signed [6:0] sext_ln368_83_fu_1934_p1;
wire   [6:0] add_ln370_65_fu_1946_p2;
wire  signed [9:0] sext_ln370_49_fu_1952_p1;
wire  signed [9:0] sext_ln370_47_fu_1930_p1;
wire   [9:0] add_ln370_63_fu_1956_p2;
wire   [9:0] select_ln342_24_fu_1770_p3;
wire  signed [2:0] mul_res_497_fu_1982_p0;
wire  signed [5:0] sext_ln368_87_fu_1971_p1;
wire  signed [2:0] mul_res_497_fu_1982_p1;
wire  signed [5:0] mul_res_497_fu_1982_p2;
wire  signed [6:0] sext_ln368_86_fu_1968_p1;
wire  signed [6:0] sext_ln370_51_fu_1995_p1;
wire   [6:0] add_ln370_68_fu_1998_p2;
wire  signed [6:0] sext_ln368_89_fu_1992_p1;
wire   [6:0] add_ln370_69_fu_2004_p2;
wire  signed [9:0] sext_ln370_52_fu_2010_p1;
wire  signed [9:0] sext_ln370_50_fu_1988_p1;
wire   [9:0] add_ln370_67_fu_2014_p2;
wire   [9:0] select_ln342_23_fu_1763_p3;
wire  signed [2:0] mul_res_501_fu_2040_p0;
wire  signed [5:0] sext_ln368_93_fu_2029_p1;
wire  signed [2:0] mul_res_501_fu_2040_p1;
wire  signed [5:0] mul_res_501_fu_2040_p2;
wire  signed [6:0] sext_ln368_92_fu_2026_p1;
wire  signed [6:0] sext_ln370_54_fu_2053_p1;
wire   [6:0] add_ln370_72_fu_2056_p2;
wire  signed [6:0] sext_ln368_95_fu_2050_p1;
wire   [6:0] add_ln370_73_fu_2062_p2;
wire  signed [9:0] sext_ln370_55_fu_2068_p1;
wire  signed [9:0] sext_ln370_53_fu_2046_p1;
wire   [9:0] add_ln370_71_fu_2072_p2;
wire   [9:0] select_ln342_22_fu_1756_p3;
wire  signed [2:0] mul_res_505_fu_2098_p0;
wire  signed [5:0] sext_ln368_99_fu_2087_p1;
wire  signed [2:0] mul_res_505_fu_2098_p1;
wire  signed [5:0] mul_res_505_fu_2098_p2;
wire  signed [6:0] sext_ln368_98_fu_2084_p1;
wire  signed [6:0] sext_ln370_57_fu_2111_p1;
wire   [6:0] add_ln370_76_fu_2114_p2;
wire  signed [6:0] sext_ln368_101_fu_2108_p1;
wire   [6:0] add_ln370_77_fu_2120_p2;
wire  signed [9:0] sext_ln370_58_fu_2126_p1;
wire  signed [9:0] sext_ln370_56_fu_2104_p1;
wire   [9:0] add_ln370_75_fu_2130_p2;
wire   [9:0] select_ln342_21_fu_1749_p3;
wire  signed [2:0] mul_res_509_fu_2156_p0;
wire  signed [5:0] sext_ln368_105_fu_2145_p1;
wire  signed [2:0] mul_res_509_fu_2156_p1;
wire  signed [5:0] mul_res_509_fu_2156_p2;
wire  signed [6:0] sext_ln368_104_fu_2142_p1;
wire  signed [6:0] sext_ln370_60_fu_2169_p1;
wire   [6:0] add_ln370_80_fu_2172_p2;
wire  signed [6:0] sext_ln368_107_fu_2166_p1;
wire   [6:0] add_ln370_81_fu_2178_p2;
wire  signed [9:0] sext_ln370_61_fu_2184_p1;
wire  signed [9:0] sext_ln370_59_fu_2162_p1;
wire   [9:0] add_ln370_79_fu_2188_p2;
wire   [9:0] select_ln342_20_fu_1742_p3;
wire  signed [2:0] mul_res_513_fu_2214_p0;
wire  signed [2:0] mul_res_513_fu_2214_p1;
wire  signed [5:0] sext_ln368_111_fu_2203_p1;
wire  signed [5:0] mul_res_513_fu_2214_p2;
wire  signed [6:0] sext_ln368_110_fu_2200_p1;
wire  signed [6:0] sext_ln370_63_fu_2227_p1;
wire   [6:0] add_ln370_84_fu_2230_p2;
wire  signed [6:0] sext_ln368_113_fu_2224_p1;
wire   [6:0] add_ln370_85_fu_2236_p2;
wire  signed [9:0] sext_ln370_64_fu_2242_p1;
wire  signed [9:0] sext_ln370_62_fu_2220_p1;
wire   [9:0] add_ln370_83_fu_2246_p2;
wire   [9:0] select_ln342_19_fu_1735_p3;
wire  signed [2:0] mul_res_517_fu_2269_p0;
wire  signed [2:0] mul_res_517_fu_2269_p1;
wire  signed [5:0] mul_res_517_fu_2269_p2;
wire  signed [6:0] sext_ln368_115_fu_2258_p1;
wire  signed [6:0] sext_ln370_66_fu_2282_p1;
wire   [6:0] add_ln370_88_fu_2285_p2;
wire  signed [6:0] sext_ln368_116_fu_2279_p1;
wire   [6:0] add_ln370_89_fu_2291_p2;
wire  signed [9:0] sext_ln370_67_fu_2297_p1;
wire  signed [9:0] sext_ln370_65_fu_2275_p1;
wire   [9:0] add_ln370_87_fu_2301_p2;
wire   [9:0] select_ln342_18_fu_1728_p3;
wire  signed [2:0] mul_res_521_fu_2324_p0;
wire  signed [2:0] mul_res_521_fu_2324_p1;
wire  signed [5:0] mul_res_521_fu_2324_p2;
wire  signed [6:0] sext_ln368_117_fu_2313_p1;
wire  signed [6:0] sext_ln370_69_fu_2337_p1;
wire   [6:0] add_ln370_92_fu_2340_p2;
wire  signed [6:0] sext_ln368_118_fu_2334_p1;
wire   [6:0] add_ln370_93_fu_2346_p2;
wire  signed [9:0] sext_ln370_70_fu_2352_p1;
wire  signed [9:0] sext_ln370_68_fu_2330_p1;
wire   [9:0] add_ln370_91_fu_2356_p2;
wire   [9:0] select_ln342_17_fu_1721_p3;
wire  signed [2:0] mul_res_525_fu_2379_p0;
wire  signed [2:0] mul_res_525_fu_2379_p1;
wire  signed [5:0] mul_res_525_fu_2379_p2;
wire   [9:0] select_ln342_16_fu_1714_p3;
wire  signed [9:0] sext_ln370_71_fu_2385_p1;
wire  signed [6:0] sext_ln368_119_fu_2368_p1;
wire  signed [6:0] sext_ln370_72_fu_2392_p1;
wire   [6:0] add_ln370_96_fu_2401_p2;
wire  signed [6:0] sext_ln368_120_fu_2389_p1;
wire   [6:0] add_ln370_97_fu_2407_p2;
wire  signed [9:0] sext_ln370_73_fu_2413_p1;
wire   [9:0] add_ln370_95_fu_2395_p2;
wire  signed [2:0] mul_res_529_fu_2434_p0;
wire  signed [2:0] mul_res_529_fu_2434_p1;
wire  signed [5:0] mul_res_529_fu_2434_p2;
wire   [9:0] select_ln342_15_fu_1707_p3;
wire  signed [9:0] sext_ln370_74_fu_2440_p1;
wire  signed [6:0] sext_ln368_121_fu_2423_p1;
wire  signed [6:0] sext_ln370_75_fu_2447_p1;
wire   [6:0] add_ln370_100_fu_2456_p2;
wire  signed [6:0] sext_ln368_122_fu_2444_p1;
wire   [6:0] add_ln370_101_fu_2462_p2;
wire  signed [9:0] sext_ln370_76_fu_2468_p1;
wire   [9:0] add_ln370_99_fu_2450_p2;
wire  signed [2:0] mul_res_533_fu_2489_p0;
wire  signed [2:0] mul_res_533_fu_2489_p1;
wire  signed [5:0] mul_res_533_fu_2489_p2;
wire   [9:0] select_ln342_14_fu_1700_p3;
wire  signed [9:0] sext_ln370_77_fu_2495_p1;
wire  signed [6:0] sext_ln368_123_fu_2478_p1;
wire  signed [6:0] sext_ln370_78_fu_2502_p1;
wire   [6:0] add_ln370_104_fu_2511_p2;
wire  signed [6:0] sext_ln368_124_fu_2499_p1;
wire   [6:0] add_ln370_105_fu_2517_p2;
wire  signed [9:0] sext_ln370_79_fu_2523_p1;
wire   [9:0] add_ln370_103_fu_2505_p2;
wire  signed [2:0] mul_res_537_fu_2544_p0;
wire  signed [2:0] mul_res_537_fu_2544_p1;
wire  signed [5:0] mul_res_537_fu_2544_p2;
wire   [9:0] select_ln342_fu_1693_p3;
wire  signed [9:0] sext_ln370_80_fu_2550_p1;
wire  signed [6:0] sext_ln368_125_fu_2533_p1;
wire  signed [6:0] sext_ln370_81_fu_2557_p1;
wire   [6:0] add_ln370_108_fu_2566_p2;
wire  signed [6:0] sext_ln368_126_fu_2554_p1;
wire   [6:0] add_ln370_109_fu_2572_p2;
wire  signed [9:0] sext_ln370_82_fu_2578_p1;
wire   [9:0] add_ln370_107_fu_2560_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_313;
reg    ap_condition_372;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_304 = 5'd0;
//#0 empty_fu_308 = 10'd0;
//#0 empty_1104_fu_312 = 10'd0;
//#0 empty_1105_fu_316 = 10'd0;
//#0 empty_1106_fu_320 = 10'd0;
//#0 empty_1107_fu_324 = 10'd0;
//#0 empty_1108_fu_328 = 10'd0;
//#0 empty_1109_fu_332 = 10'd0;
//#0 empty_1110_fu_336 = 10'd0;
//#0 empty_1111_fu_340 = 10'd0;
//#0 empty_1112_fu_344 = 10'd0;
//#0 empty_1113_fu_348 = 10'd0;
//#0 empty_1114_fu_352 = 10'd0;
//#0 empty_1115_fu_356 = 10'd0;
//#0 empty_1116_fu_360 = 10'd0;
//#0 indvar_flatten_fu_364 = 10'd0;
//#0 indvar_flatten51_fu_368 = 16'd0;
end

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U592(
    .din0(mul_res_fu_905_p0),
    .din1(mul_res_fu_905_p1),
    .dout(mul_res_fu_905_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U593(
    .din0(mul_res_486_fu_927_p0),
    .din1(mul_res_486_fu_927_p1),
    .dout(mul_res_486_fu_927_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U594(
    .din0(mul_res_487_fu_949_p0),
    .din1(mul_res_487_fu_949_p1),
    .dout(mul_res_487_fu_949_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U595(
    .din0(mul_res_488_fu_967_p0),
    .din1(mul_res_488_fu_967_p1),
    .dout(mul_res_488_fu_967_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U596(
    .din0(mul_res_490_fu_985_p0),
    .din1(mul_res_490_fu_985_p1),
    .dout(mul_res_490_fu_985_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U597(
    .din0(mul_res_491_fu_1003_p0),
    .din1(mul_res_491_fu_1003_p1),
    .dout(mul_res_491_fu_1003_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U598(
    .din0(mul_res_492_fu_1021_p0),
    .din1(mul_res_492_fu_1021_p1),
    .dout(mul_res_492_fu_1021_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U599(
    .din0(mul_res_494_fu_1039_p0),
    .din1(mul_res_494_fu_1039_p1),
    .dout(mul_res_494_fu_1039_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U600(
    .din0(mul_res_495_fu_1057_p0),
    .din1(mul_res_495_fu_1057_p1),
    .dout(mul_res_495_fu_1057_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U601(
    .din0(mul_res_496_fu_1075_p0),
    .din1(mul_res_496_fu_1075_p1),
    .dout(mul_res_496_fu_1075_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U602(
    .din0(mul_res_498_fu_1093_p0),
    .din1(mul_res_498_fu_1093_p1),
    .dout(mul_res_498_fu_1093_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U603(
    .din0(mul_res_499_fu_1111_p0),
    .din1(mul_res_499_fu_1111_p1),
    .dout(mul_res_499_fu_1111_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U604(
    .din0(mul_res_500_fu_1129_p0),
    .din1(mul_res_500_fu_1129_p1),
    .dout(mul_res_500_fu_1129_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U605(
    .din0(mul_res_502_fu_1147_p0),
    .din1(mul_res_502_fu_1147_p1),
    .dout(mul_res_502_fu_1147_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U606(
    .din0(mul_res_503_fu_1165_p0),
    .din1(mul_res_503_fu_1165_p1),
    .dout(mul_res_503_fu_1165_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U607(
    .din0(mul_res_504_fu_1183_p0),
    .din1(mul_res_504_fu_1183_p1),
    .dout(mul_res_504_fu_1183_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U608(
    .din0(mul_res_506_fu_1201_p0),
    .din1(mul_res_506_fu_1201_p1),
    .dout(mul_res_506_fu_1201_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U609(
    .din0(mul_res_507_fu_1219_p0),
    .din1(mul_res_507_fu_1219_p1),
    .dout(mul_res_507_fu_1219_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U610(
    .din0(mul_res_508_fu_1237_p0),
    .din1(mul_res_508_fu_1237_p1),
    .dout(mul_res_508_fu_1237_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U611(
    .din0(mul_res_510_fu_1255_p0),
    .din1(mul_res_510_fu_1255_p1),
    .dout(mul_res_510_fu_1255_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U612(
    .din0(mul_res_511_fu_1273_p0),
    .din1(mul_res_511_fu_1273_p1),
    .dout(mul_res_511_fu_1273_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U613(
    .din0(mul_res_512_fu_1291_p0),
    .din1(mul_res_512_fu_1291_p1),
    .dout(mul_res_512_fu_1291_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U614(
    .din0(mul_res_514_fu_1309_p0),
    .din1(mul_res_514_fu_1309_p1),
    .dout(mul_res_514_fu_1309_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U615(
    .din0(mul_res_515_fu_1327_p0),
    .din1(mul_res_515_fu_1327_p1),
    .dout(mul_res_515_fu_1327_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U616(
    .din0(mul_res_516_fu_1341_p0),
    .din1(mul_res_516_fu_1341_p1),
    .dout(mul_res_516_fu_1341_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U617(
    .din0(mul_res_518_fu_1355_p0),
    .din1(mul_res_518_fu_1355_p1),
    .dout(mul_res_518_fu_1355_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U618(
    .din0(mul_res_519_fu_1369_p0),
    .din1(mul_res_519_fu_1369_p1),
    .dout(mul_res_519_fu_1369_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U619(
    .din0(mul_res_520_fu_1383_p0),
    .din1(mul_res_520_fu_1383_p1),
    .dout(mul_res_520_fu_1383_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U620(
    .din0(mul_res_522_fu_1397_p0),
    .din1(mul_res_522_fu_1397_p1),
    .dout(mul_res_522_fu_1397_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U621(
    .din0(mul_res_523_fu_1411_p0),
    .din1(mul_res_523_fu_1411_p1),
    .dout(mul_res_523_fu_1411_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U622(
    .din0(mul_res_524_fu_1425_p0),
    .din1(mul_res_524_fu_1425_p1),
    .dout(mul_res_524_fu_1425_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U623(
    .din0(mul_res_526_fu_1439_p0),
    .din1(mul_res_526_fu_1439_p1),
    .dout(mul_res_526_fu_1439_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U624(
    .din0(mul_res_527_fu_1453_p0),
    .din1(mul_res_527_fu_1453_p1),
    .dout(mul_res_527_fu_1453_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U625(
    .din0(mul_res_528_fu_1467_p0),
    .din1(mul_res_528_fu_1467_p1),
    .dout(mul_res_528_fu_1467_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U626(
    .din0(mul_res_530_fu_1481_p0),
    .din1(mul_res_530_fu_1481_p1),
    .dout(mul_res_530_fu_1481_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U627(
    .din0(mul_res_531_fu_1495_p0),
    .din1(mul_res_531_fu_1495_p1),
    .dout(mul_res_531_fu_1495_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U628(
    .din0(mul_res_532_fu_1509_p0),
    .din1(mul_res_532_fu_1509_p1),
    .dout(mul_res_532_fu_1509_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U629(
    .din0(mul_res_534_fu_1523_p0),
    .din1(mul_res_534_fu_1523_p1),
    .dout(mul_res_534_fu_1523_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U630(
    .din0(mul_res_535_fu_1537_p0),
    .din1(mul_res_535_fu_1537_p1),
    .dout(mul_res_535_fu_1537_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U631(
    .din0(mul_res_536_fu_1551_p0),
    .din1(mul_res_536_fu_1551_p1),
    .dout(mul_res_536_fu_1551_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U632(
    .din0(mul_res_538_fu_1565_p0),
    .din1(mul_res_538_fu_1565_p1),
    .dout(mul_res_538_fu_1565_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U633(
    .din0(mul_res_539_fu_1579_p0),
    .din1(mul_res_539_fu_1579_p1),
    .dout(mul_res_539_fu_1579_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U634(
    .din0(mul_res_485_fu_1808_p0),
    .din1(mul_res_485_fu_1808_p1),
    .dout(mul_res_485_fu_1808_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U635(
    .din0(mul_res_489_fu_1866_p0),
    .din1(mul_res_489_fu_1866_p1),
    .dout(mul_res_489_fu_1866_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U636(
    .din0(mul_res_493_fu_1924_p0),
    .din1(mul_res_493_fu_1924_p1),
    .dout(mul_res_493_fu_1924_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U637(
    .din0(mul_res_497_fu_1982_p0),
    .din1(mul_res_497_fu_1982_p1),
    .dout(mul_res_497_fu_1982_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U638(
    .din0(mul_res_501_fu_2040_p0),
    .din1(mul_res_501_fu_2040_p1),
    .dout(mul_res_501_fu_2040_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U639(
    .din0(mul_res_505_fu_2098_p0),
    .din1(mul_res_505_fu_2098_p1),
    .dout(mul_res_505_fu_2098_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U640(
    .din0(mul_res_509_fu_2156_p0),
    .din1(mul_res_509_fu_2156_p1),
    .dout(mul_res_509_fu_2156_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U641(
    .din0(mul_res_513_fu_2214_p0),
    .din1(mul_res_513_fu_2214_p1),
    .dout(mul_res_513_fu_2214_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U642(
    .din0(mul_res_517_fu_2269_p0),
    .din1(mul_res_517_fu_2269_p1),
    .dout(mul_res_517_fu_2269_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U643(
    .din0(mul_res_521_fu_2324_p0),
    .din1(mul_res_521_fu_2324_p1),
    .dout(mul_res_521_fu_2324_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U644(
    .din0(mul_res_525_fu_2379_p0),
    .din1(mul_res_525_fu_2379_p1),
    .dout(mul_res_525_fu_2379_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U645(
    .din0(mul_res_529_fu_2434_p0),
    .din1(mul_res_529_fu_2434_p1),
    .dout(mul_res_529_fu_2434_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U646(
    .din0(mul_res_533_fu_2489_p0),
    .din1(mul_res_533_fu_2489_p1),
    .dout(mul_res_533_fu_2489_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U647(
    .din0(mul_res_537_fu_2544_p0),
    .din1(mul_res_537_fu_2544_p1),
    .dout(mul_res_537_fu_2544_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_313)) begin
        cit_fu_304 <= cit_2_fu_1591_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_372)) begin
    if ((icmp_ln336_fu_445_p2 == 1'd0)) begin
        indvar_flatten51_fu_368 <= add_ln336_fu_439_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten51_fu_368 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_372)) begin
    if ((icmp_ln336_fu_445_p2 == 1'd0)) begin
        indvar_flatten_fu_364 <= select_ln337_2_fu_463_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_364 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln370_102_reg_3263 <= add_ln370_102_fu_2472_p2;
        add_ln370_106_reg_3268 <= add_ln370_106_fu_2527_p2;
        add_ln370_110_reg_3273 <= add_ln370_110_fu_2582_p2;
        add_ln370_58_reg_3208 <= add_ln370_58_fu_1846_p2;
        add_ln370_62_reg_3213 <= add_ln370_62_fu_1904_p2;
        add_ln370_66_reg_3218 <= add_ln370_66_fu_1962_p2;
        add_ln370_70_reg_3223 <= add_ln370_70_fu_2020_p2;
        add_ln370_74_reg_3228 <= add_ln370_74_fu_2078_p2;
        add_ln370_78_reg_3233 <= add_ln370_78_fu_2136_p2;
        add_ln370_82_reg_3238 <= add_ln370_82_fu_2194_p2;
        add_ln370_86_reg_3243 <= add_ln370_86_fu_2252_p2;
        add_ln370_90_reg_3248 <= add_ln370_90_fu_2307_p2;
        add_ln370_94_reg_3253 <= add_ln370_94_fu_2362_p2;
        add_ln370_98_reg_3258 <= add_ln370_98_fu_2417_p2;
        icmp_ln378_reg_3204_pp0_iter2_reg <= icmp_ln378_reg_3204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln337_reg_2925 <= icmp_ln337_fu_451_p2;
        icmp_ln342_reg_2931 <= icmp_ln342_fu_531_p2;
        icmp_ln378_reg_3204 <= icmp_ln378_fu_1585_p2;
        mul_res_486_reg_2999 <= mul_res_486_fu_927_p2;
        mul_res_487_reg_3004 <= mul_res_487_fu_949_p2;
        mul_res_488_reg_3009 <= mul_res_488_fu_967_p2;
        mul_res_490_reg_3014 <= mul_res_490_fu_985_p2;
        mul_res_491_reg_3019 <= mul_res_491_fu_1003_p2;
        mul_res_492_reg_3024 <= mul_res_492_fu_1021_p2;
        mul_res_494_reg_3029 <= mul_res_494_fu_1039_p2;
        mul_res_495_reg_3034 <= mul_res_495_fu_1057_p2;
        mul_res_496_reg_3039 <= mul_res_496_fu_1075_p2;
        mul_res_498_reg_3044 <= mul_res_498_fu_1093_p2;
        mul_res_499_reg_3049 <= mul_res_499_fu_1111_p2;
        mul_res_500_reg_3054 <= mul_res_500_fu_1129_p2;
        mul_res_502_reg_3059 <= mul_res_502_fu_1147_p2;
        mul_res_503_reg_3064 <= mul_res_503_fu_1165_p2;
        mul_res_504_reg_3069 <= mul_res_504_fu_1183_p2;
        mul_res_506_reg_3074 <= mul_res_506_fu_1201_p2;
        mul_res_507_reg_3079 <= mul_res_507_fu_1219_p2;
        mul_res_508_reg_3084 <= mul_res_508_fu_1237_p2;
        mul_res_510_reg_3089 <= mul_res_510_fu_1255_p2;
        mul_res_511_reg_3094 <= mul_res_511_fu_1273_p2;
        mul_res_512_reg_3099 <= mul_res_512_fu_1291_p2;
        mul_res_514_reg_3104 <= mul_res_514_fu_1309_p2;
        mul_res_515_reg_3109 <= mul_res_515_fu_1327_p2;
        mul_res_516_reg_3114 <= mul_res_516_fu_1341_p2;
        mul_res_518_reg_3119 <= mul_res_518_fu_1355_p2;
        mul_res_519_reg_3124 <= mul_res_519_fu_1369_p2;
        mul_res_520_reg_3129 <= mul_res_520_fu_1383_p2;
        mul_res_522_reg_3134 <= mul_res_522_fu_1397_p2;
        mul_res_523_reg_3139 <= mul_res_523_fu_1411_p2;
        mul_res_524_reg_3144 <= mul_res_524_fu_1425_p2;
        mul_res_526_reg_3149 <= mul_res_526_fu_1439_p2;
        mul_res_527_reg_3154 <= mul_res_527_fu_1453_p2;
        mul_res_528_reg_3159 <= mul_res_528_fu_1467_p2;
        mul_res_530_reg_3164 <= mul_res_530_fu_1481_p2;
        mul_res_531_reg_3169 <= mul_res_531_fu_1495_p2;
        mul_res_532_reg_3174 <= mul_res_532_fu_1509_p2;
        mul_res_534_reg_3179 <= mul_res_534_fu_1523_p2;
        mul_res_535_reg_3184 <= mul_res_535_fu_1537_p2;
        mul_res_536_reg_3189 <= mul_res_536_fu_1551_p2;
        mul_res_538_reg_3194 <= mul_res_538_fu_1565_p2;
        mul_res_539_reg_3199 <= mul_res_539_fu_1579_p2;
        mul_res_reg_2994 <= mul_res_fu_905_p2;
        trunc_ln353_1_reg_2954 <= {{cache_window_sm_dout[17:15]}};
        trunc_ln353_s_reg_2949 <= {{cache_window_sm_dout[5:3]}};
        trunc_ln354_30_reg_2964 <= {{weight_sm_dout[17:15]}};
        trunc_ln354_34_reg_2969 <= {{weight_sm_dout[29:27]}};
        trunc_ln354_38_reg_2974 <= {{weight_sm_dout[41:39]}};
        trunc_ln354_42_reg_2979 <= {{weight_sm_dout[53:51]}};
        trunc_ln354_46_reg_2984 <= {{weight_sm_dout[65:63]}};
        trunc_ln354_50_reg_2989 <= {{weight_sm_dout[77:75]}};
        trunc_ln354_s_reg_2959 <= {{weight_sm_dout[5:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_1104_fu_312 <= add_ln370_62_fu_1904_p2;
        empty_1105_fu_316 <= add_ln370_66_fu_1962_p2;
        empty_1106_fu_320 <= add_ln370_70_fu_2020_p2;
        empty_1107_fu_324 <= add_ln370_74_fu_2078_p2;
        empty_1108_fu_328 <= add_ln370_78_fu_2136_p2;
        empty_1109_fu_332 <= add_ln370_82_fu_2194_p2;
        empty_1110_fu_336 <= add_ln370_86_fu_2252_p2;
        empty_1111_fu_340 <= add_ln370_90_fu_2307_p2;
        empty_1112_fu_344 <= add_ln370_94_fu_2362_p2;
        empty_1113_fu_348 <= add_ln370_98_fu_2417_p2;
        empty_1114_fu_352 <= add_ln370_102_fu_2472_p2;
        empty_1115_fu_356 <= add_ln370_106_fu_2527_p2;
        empty_1116_fu_360 <= add_ln370_110_fu_2582_p2;
        empty_fu_308 <= add_ln370_58_fu_1846_p2;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_445_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_304;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten51_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten51_load = indvar_flatten51_fu_368;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_364;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten51_load + 16'd1);

assign add_ln337_fu_457_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln370_100_fu_2456_p2 = ($signed(sext_ln368_121_fu_2423_p1) + $signed(sext_ln370_75_fu_2447_p1));

assign add_ln370_101_fu_2462_p2 = ($signed(add_ln370_100_fu_2456_p2) + $signed(sext_ln368_122_fu_2444_p1));

assign add_ln370_102_fu_2472_p2 = ($signed(sext_ln370_76_fu_2468_p1) + $signed(add_ln370_99_fu_2450_p2));

assign add_ln370_103_fu_2505_p2 = ($signed(select_ln342_14_fu_1700_p3) + $signed(sext_ln370_77_fu_2495_p1));

assign add_ln370_104_fu_2511_p2 = ($signed(sext_ln368_123_fu_2478_p1) + $signed(sext_ln370_78_fu_2502_p1));

assign add_ln370_105_fu_2517_p2 = ($signed(add_ln370_104_fu_2511_p2) + $signed(sext_ln368_124_fu_2499_p1));

assign add_ln370_106_fu_2527_p2 = ($signed(sext_ln370_79_fu_2523_p1) + $signed(add_ln370_103_fu_2505_p2));

assign add_ln370_107_fu_2560_p2 = ($signed(select_ln342_fu_1693_p3) + $signed(sext_ln370_80_fu_2550_p1));

assign add_ln370_108_fu_2566_p2 = ($signed(sext_ln368_125_fu_2533_p1) + $signed(sext_ln370_81_fu_2557_p1));

assign add_ln370_109_fu_2572_p2 = ($signed(add_ln370_108_fu_2566_p2) + $signed(sext_ln368_126_fu_2554_p1));

assign add_ln370_110_fu_2582_p2 = ($signed(sext_ln370_82_fu_2578_p1) + $signed(add_ln370_107_fu_2560_p2));

assign add_ln370_56_fu_1824_p2 = ($signed(sext_ln368_65_fu_1791_p1) + $signed(sext_ln370_42_fu_1821_p1));

assign add_ln370_57_fu_1830_p2 = ($signed(add_ln370_56_fu_1824_p2) + $signed(sext_ln368_70_fu_1818_p1));

assign add_ln370_58_fu_1846_p2 = (add_ln370_fu_1840_p2 + select_ln342_26_fu_1784_p3);

assign add_ln370_59_fu_1898_p2 = ($signed(sext_ln370_46_fu_1894_p1) + $signed(sext_ln370_44_fu_1872_p1));

assign add_ln370_60_fu_1882_p2 = ($signed(sext_ln368_74_fu_1852_p1) + $signed(sext_ln370_45_fu_1879_p1));

assign add_ln370_61_fu_1888_p2 = ($signed(add_ln370_60_fu_1882_p2) + $signed(sext_ln368_77_fu_1876_p1));

assign add_ln370_62_fu_1904_p2 = (add_ln370_59_fu_1898_p2 + select_ln342_25_fu_1777_p3);

assign add_ln370_63_fu_1956_p2 = ($signed(sext_ln370_49_fu_1952_p1) + $signed(sext_ln370_47_fu_1930_p1));

assign add_ln370_64_fu_1940_p2 = ($signed(sext_ln368_80_fu_1910_p1) + $signed(sext_ln370_48_fu_1937_p1));

assign add_ln370_65_fu_1946_p2 = ($signed(add_ln370_64_fu_1940_p2) + $signed(sext_ln368_83_fu_1934_p1));

assign add_ln370_66_fu_1962_p2 = (add_ln370_63_fu_1956_p2 + select_ln342_24_fu_1770_p3);

assign add_ln370_67_fu_2014_p2 = ($signed(sext_ln370_52_fu_2010_p1) + $signed(sext_ln370_50_fu_1988_p1));

assign add_ln370_68_fu_1998_p2 = ($signed(sext_ln368_86_fu_1968_p1) + $signed(sext_ln370_51_fu_1995_p1));

assign add_ln370_69_fu_2004_p2 = ($signed(add_ln370_68_fu_1998_p2) + $signed(sext_ln368_89_fu_1992_p1));

assign add_ln370_70_fu_2020_p2 = (add_ln370_67_fu_2014_p2 + select_ln342_23_fu_1763_p3);

assign add_ln370_71_fu_2072_p2 = ($signed(sext_ln370_55_fu_2068_p1) + $signed(sext_ln370_53_fu_2046_p1));

assign add_ln370_72_fu_2056_p2 = ($signed(sext_ln368_92_fu_2026_p1) + $signed(sext_ln370_54_fu_2053_p1));

assign add_ln370_73_fu_2062_p2 = ($signed(add_ln370_72_fu_2056_p2) + $signed(sext_ln368_95_fu_2050_p1));

assign add_ln370_74_fu_2078_p2 = (add_ln370_71_fu_2072_p2 + select_ln342_22_fu_1756_p3);

assign add_ln370_75_fu_2130_p2 = ($signed(sext_ln370_58_fu_2126_p1) + $signed(sext_ln370_56_fu_2104_p1));

assign add_ln370_76_fu_2114_p2 = ($signed(sext_ln368_98_fu_2084_p1) + $signed(sext_ln370_57_fu_2111_p1));

assign add_ln370_77_fu_2120_p2 = ($signed(add_ln370_76_fu_2114_p2) + $signed(sext_ln368_101_fu_2108_p1));

assign add_ln370_78_fu_2136_p2 = (add_ln370_75_fu_2130_p2 + select_ln342_21_fu_1749_p3);

assign add_ln370_79_fu_2188_p2 = ($signed(sext_ln370_61_fu_2184_p1) + $signed(sext_ln370_59_fu_2162_p1));

assign add_ln370_80_fu_2172_p2 = ($signed(sext_ln368_104_fu_2142_p1) + $signed(sext_ln370_60_fu_2169_p1));

assign add_ln370_81_fu_2178_p2 = ($signed(add_ln370_80_fu_2172_p2) + $signed(sext_ln368_107_fu_2166_p1));

assign add_ln370_82_fu_2194_p2 = (add_ln370_79_fu_2188_p2 + select_ln342_20_fu_1742_p3);

assign add_ln370_83_fu_2246_p2 = ($signed(sext_ln370_64_fu_2242_p1) + $signed(sext_ln370_62_fu_2220_p1));

assign add_ln370_84_fu_2230_p2 = ($signed(sext_ln368_110_fu_2200_p1) + $signed(sext_ln370_63_fu_2227_p1));

assign add_ln370_85_fu_2236_p2 = ($signed(add_ln370_84_fu_2230_p2) + $signed(sext_ln368_113_fu_2224_p1));

assign add_ln370_86_fu_2252_p2 = (add_ln370_83_fu_2246_p2 + select_ln342_19_fu_1735_p3);

assign add_ln370_87_fu_2301_p2 = ($signed(sext_ln370_67_fu_2297_p1) + $signed(sext_ln370_65_fu_2275_p1));

assign add_ln370_88_fu_2285_p2 = ($signed(sext_ln368_115_fu_2258_p1) + $signed(sext_ln370_66_fu_2282_p1));

assign add_ln370_89_fu_2291_p2 = ($signed(add_ln370_88_fu_2285_p2) + $signed(sext_ln368_116_fu_2279_p1));

assign add_ln370_90_fu_2307_p2 = (add_ln370_87_fu_2301_p2 + select_ln342_18_fu_1728_p3);

assign add_ln370_91_fu_2356_p2 = ($signed(sext_ln370_70_fu_2352_p1) + $signed(sext_ln370_68_fu_2330_p1));

assign add_ln370_92_fu_2340_p2 = ($signed(sext_ln368_117_fu_2313_p1) + $signed(sext_ln370_69_fu_2337_p1));

assign add_ln370_93_fu_2346_p2 = ($signed(add_ln370_92_fu_2340_p2) + $signed(sext_ln368_118_fu_2334_p1));

assign add_ln370_94_fu_2362_p2 = (add_ln370_91_fu_2356_p2 + select_ln342_17_fu_1721_p3);

assign add_ln370_95_fu_2395_p2 = ($signed(select_ln342_16_fu_1714_p3) + $signed(sext_ln370_71_fu_2385_p1));

assign add_ln370_96_fu_2401_p2 = ($signed(sext_ln368_119_fu_2368_p1) + $signed(sext_ln370_72_fu_2392_p1));

assign add_ln370_97_fu_2407_p2 = ($signed(add_ln370_96_fu_2401_p2) + $signed(sext_ln368_120_fu_2389_p1));

assign add_ln370_98_fu_2417_p2 = ($signed(sext_ln370_73_fu_2413_p1) + $signed(add_ln370_95_fu_2395_p2));

assign add_ln370_99_fu_2450_p2 = ($signed(select_ln342_15_fu_1707_p3) + $signed(sext_ln370_74_fu_2440_p1));

assign add_ln370_fu_1840_p2 = ($signed(sext_ln370_43_fu_1836_p1) + $signed(sext_ln370_fu_1814_p1));

assign and_ln336_fu_512_p2 = (xor_ln336_fu_501_p2 & icmp_ln338_fu_506_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((weight_sm_empty_n == 1'b0) | (cache_window_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_313 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_372 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign cit_2_fu_1591_p2 = (select_ln337_fu_523_p3 + 5'd1);

assign icmp_ln336_fu_445_p2 = ((ap_sig_allocacmp_indvar_flatten51_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_451_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_506_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_531_p2 = ((select_ln337_fu_523_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1585_p2 = ((select_ln337_fu_523_p3 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = {{{{{{{{{{{{{{add_ln370_110_reg_3273}, {add_ln370_106_reg_3268}}, {add_ln370_102_reg_3263}}, {add_ln370_98_reg_3258}}, {add_ln370_94_reg_3253}}, {add_ln370_90_reg_3248}}, {add_ln370_86_reg_3243}}, {add_ln370_82_reg_3238}}, {add_ln370_78_reg_3233}}, {add_ln370_74_reg_3228}}, {add_ln370_70_reg_3223}}, {add_ln370_66_reg_3218}}, {add_ln370_62_reg_3213}}, {add_ln370_58_reg_3208}};

assign mul_res_485_fu_1808_p0 = sext_ln368_67_fu_1797_p1;

assign mul_res_485_fu_1808_p1 = sext_ln368_66_fu_1794_p1;

assign mul_res_486_fu_927_p0 = sext_ln368_69_fu_915_p1;

assign mul_res_486_fu_927_p1 = sext_ln368_68_fu_911_p1;

assign mul_res_487_fu_949_p0 = sext_ln368_72_fu_937_p1;

assign mul_res_487_fu_949_p1 = sext_ln368_71_fu_933_p1;

assign mul_res_488_fu_967_p0 = sext_ln368_73_fu_955_p1;

assign mul_res_488_fu_967_p1 = sext_ln368_fu_889_p1;

assign mul_res_489_fu_1866_p0 = sext_ln368_75_fu_1855_p1;

assign mul_res_489_fu_1866_p1 = sext_ln368_66_fu_1794_p1;

assign mul_res_490_fu_985_p0 = sext_ln368_76_fu_973_p1;

assign mul_res_490_fu_985_p1 = sext_ln368_68_fu_911_p1;

assign mul_res_491_fu_1003_p0 = sext_ln368_78_fu_991_p1;

assign mul_res_491_fu_1003_p1 = sext_ln368_71_fu_933_p1;

assign mul_res_492_fu_1021_p0 = sext_ln368_79_fu_1009_p1;

assign mul_res_492_fu_1021_p1 = sext_ln368_fu_889_p1;

assign mul_res_493_fu_1924_p0 = sext_ln368_81_fu_1913_p1;

assign mul_res_493_fu_1924_p1 = sext_ln368_66_fu_1794_p1;

assign mul_res_494_fu_1039_p0 = sext_ln368_82_fu_1027_p1;

assign mul_res_494_fu_1039_p1 = sext_ln368_68_fu_911_p1;

assign mul_res_495_fu_1057_p0 = sext_ln368_84_fu_1045_p1;

assign mul_res_495_fu_1057_p1 = sext_ln368_71_fu_933_p1;

assign mul_res_496_fu_1075_p0 = sext_ln368_85_fu_1063_p1;

assign mul_res_496_fu_1075_p1 = sext_ln368_fu_889_p1;

assign mul_res_497_fu_1982_p0 = sext_ln368_87_fu_1971_p1;

assign mul_res_497_fu_1982_p1 = sext_ln368_66_fu_1794_p1;

assign mul_res_498_fu_1093_p0 = sext_ln368_88_fu_1081_p1;

assign mul_res_498_fu_1093_p1 = sext_ln368_68_fu_911_p1;

assign mul_res_499_fu_1111_p0 = sext_ln368_90_fu_1099_p1;

assign mul_res_499_fu_1111_p1 = sext_ln368_71_fu_933_p1;

assign mul_res_500_fu_1129_p0 = sext_ln368_91_fu_1117_p1;

assign mul_res_500_fu_1129_p1 = sext_ln368_fu_889_p1;

assign mul_res_501_fu_2040_p0 = sext_ln368_93_fu_2029_p1;

assign mul_res_501_fu_2040_p1 = sext_ln368_66_fu_1794_p1;

assign mul_res_502_fu_1147_p0 = sext_ln368_94_fu_1135_p1;

assign mul_res_502_fu_1147_p1 = sext_ln368_68_fu_911_p1;

assign mul_res_503_fu_1165_p0 = sext_ln368_96_fu_1153_p1;

assign mul_res_503_fu_1165_p1 = sext_ln368_71_fu_933_p1;

assign mul_res_504_fu_1183_p0 = sext_ln368_97_fu_1171_p1;

assign mul_res_504_fu_1183_p1 = sext_ln368_fu_889_p1;

assign mul_res_505_fu_2098_p0 = sext_ln368_99_fu_2087_p1;

assign mul_res_505_fu_2098_p1 = sext_ln368_66_fu_1794_p1;

assign mul_res_506_fu_1201_p0 = sext_ln368_100_fu_1189_p1;

assign mul_res_506_fu_1201_p1 = sext_ln368_68_fu_911_p1;

assign mul_res_507_fu_1219_p0 = sext_ln368_102_fu_1207_p1;

assign mul_res_507_fu_1219_p1 = sext_ln368_71_fu_933_p1;

assign mul_res_508_fu_1237_p0 = sext_ln368_103_fu_1225_p1;

assign mul_res_508_fu_1237_p1 = sext_ln368_fu_889_p1;

assign mul_res_509_fu_2156_p0 = sext_ln368_105_fu_2145_p1;

assign mul_res_509_fu_2156_p1 = sext_ln368_66_fu_1794_p1;

assign mul_res_510_fu_1255_p0 = sext_ln368_106_fu_1243_p1;

assign mul_res_510_fu_1255_p1 = sext_ln368_68_fu_911_p1;

assign mul_res_511_fu_1273_p0 = sext_ln368_108_fu_1261_p1;

assign mul_res_511_fu_1273_p1 = sext_ln368_71_fu_933_p1;

assign mul_res_512_fu_1291_p0 = sext_ln368_64_fu_893_p1;

assign mul_res_512_fu_1291_p1 = sext_ln368_109_fu_1279_p1;

assign mul_res_513_fu_2214_p0 = sext_ln368_67_fu_1797_p1;

assign mul_res_513_fu_2214_p1 = sext_ln368_111_fu_2203_p1;

assign mul_res_514_fu_1309_p0 = sext_ln368_69_fu_915_p1;

assign mul_res_514_fu_1309_p1 = sext_ln368_112_fu_1297_p1;

assign mul_res_515_fu_1327_p0 = sext_ln368_72_fu_937_p1;

assign mul_res_515_fu_1327_p1 = sext_ln368_114_fu_1315_p1;

assign mul_res_516_fu_1341_p0 = sext_ln368_73_fu_955_p1;

assign mul_res_516_fu_1341_p1 = sext_ln368_109_fu_1279_p1;

assign mul_res_517_fu_2269_p0 = sext_ln368_75_fu_1855_p1;

assign mul_res_517_fu_2269_p1 = sext_ln368_111_fu_2203_p1;

assign mul_res_518_fu_1355_p0 = sext_ln368_76_fu_973_p1;

assign mul_res_518_fu_1355_p1 = sext_ln368_112_fu_1297_p1;

assign mul_res_519_fu_1369_p0 = sext_ln368_78_fu_991_p1;

assign mul_res_519_fu_1369_p1 = sext_ln368_114_fu_1315_p1;

assign mul_res_520_fu_1383_p0 = sext_ln368_79_fu_1009_p1;

assign mul_res_520_fu_1383_p1 = sext_ln368_109_fu_1279_p1;

assign mul_res_521_fu_2324_p0 = sext_ln368_81_fu_1913_p1;

assign mul_res_521_fu_2324_p1 = sext_ln368_111_fu_2203_p1;

assign mul_res_522_fu_1397_p0 = sext_ln368_82_fu_1027_p1;

assign mul_res_522_fu_1397_p1 = sext_ln368_112_fu_1297_p1;

assign mul_res_523_fu_1411_p0 = sext_ln368_84_fu_1045_p1;

assign mul_res_523_fu_1411_p1 = sext_ln368_114_fu_1315_p1;

assign mul_res_524_fu_1425_p0 = sext_ln368_85_fu_1063_p1;

assign mul_res_524_fu_1425_p1 = sext_ln368_109_fu_1279_p1;

assign mul_res_525_fu_2379_p0 = sext_ln368_87_fu_1971_p1;

assign mul_res_525_fu_2379_p1 = sext_ln368_111_fu_2203_p1;

assign mul_res_526_fu_1439_p0 = sext_ln368_88_fu_1081_p1;

assign mul_res_526_fu_1439_p1 = sext_ln368_112_fu_1297_p1;

assign mul_res_527_fu_1453_p0 = sext_ln368_90_fu_1099_p1;

assign mul_res_527_fu_1453_p1 = sext_ln368_114_fu_1315_p1;

assign mul_res_528_fu_1467_p0 = sext_ln368_91_fu_1117_p1;

assign mul_res_528_fu_1467_p1 = sext_ln368_109_fu_1279_p1;

assign mul_res_529_fu_2434_p0 = sext_ln368_93_fu_2029_p1;

assign mul_res_529_fu_2434_p1 = sext_ln368_111_fu_2203_p1;

assign mul_res_530_fu_1481_p0 = sext_ln368_94_fu_1135_p1;

assign mul_res_530_fu_1481_p1 = sext_ln368_112_fu_1297_p1;

assign mul_res_531_fu_1495_p0 = sext_ln368_96_fu_1153_p1;

assign mul_res_531_fu_1495_p1 = sext_ln368_114_fu_1315_p1;

assign mul_res_532_fu_1509_p0 = sext_ln368_97_fu_1171_p1;

assign mul_res_532_fu_1509_p1 = sext_ln368_109_fu_1279_p1;

assign mul_res_533_fu_2489_p0 = sext_ln368_99_fu_2087_p1;

assign mul_res_533_fu_2489_p1 = sext_ln368_111_fu_2203_p1;

assign mul_res_534_fu_1523_p0 = sext_ln368_100_fu_1189_p1;

assign mul_res_534_fu_1523_p1 = sext_ln368_112_fu_1297_p1;

assign mul_res_535_fu_1537_p0 = sext_ln368_102_fu_1207_p1;

assign mul_res_535_fu_1537_p1 = sext_ln368_114_fu_1315_p1;

assign mul_res_536_fu_1551_p0 = sext_ln368_103_fu_1225_p1;

assign mul_res_536_fu_1551_p1 = sext_ln368_109_fu_1279_p1;

assign mul_res_537_fu_2544_p0 = sext_ln368_105_fu_2145_p1;

assign mul_res_537_fu_2544_p1 = sext_ln368_111_fu_2203_p1;

assign mul_res_538_fu_1565_p0 = sext_ln368_106_fu_1243_p1;

assign mul_res_538_fu_1565_p1 = sext_ln368_112_fu_1297_p1;

assign mul_res_539_fu_1579_p0 = sext_ln368_108_fu_1261_p1;

assign mul_res_539_fu_1579_p1 = sext_ln368_114_fu_1315_p1;

assign mul_res_fu_905_p0 = sext_ln368_64_fu_893_p1;

assign mul_res_fu_905_p1 = sext_ln368_fu_889_p1;

assign or_ln337_fu_518_p2 = (icmp_ln337_reg_2925 | and_ln336_fu_512_p2);

assign select_ln337_2_fu_463_p3 = ((icmp_ln337_fu_451_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_457_p2);

assign select_ln337_fu_523_p3 = ((or_ln337_fu_518_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign select_ln342_14_fu_1700_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1115_fu_356);

assign select_ln342_15_fu_1707_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1114_fu_352);

assign select_ln342_16_fu_1714_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1113_fu_348);

assign select_ln342_17_fu_1721_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1112_fu_344);

assign select_ln342_18_fu_1728_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1111_fu_340);

assign select_ln342_19_fu_1735_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1110_fu_336);

assign select_ln342_20_fu_1742_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1109_fu_332);

assign select_ln342_21_fu_1749_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1108_fu_328);

assign select_ln342_22_fu_1756_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1107_fu_324);

assign select_ln342_23_fu_1763_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1106_fu_320);

assign select_ln342_24_fu_1770_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1105_fu_316);

assign select_ln342_25_fu_1777_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1104_fu_312);

assign select_ln342_26_fu_1784_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_fu_308);

assign select_ln342_fu_1693_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1116_fu_360);

assign sext_ln368_100_fu_1189_p1 = $signed(trunc_ln354_47_fu_829_p4);

assign sext_ln368_101_fu_2108_p1 = mul_res_506_reg_3074;

assign sext_ln368_102_fu_1207_p1 = $signed(trunc_ln354_48_fu_839_p4);

assign sext_ln368_103_fu_1225_p1 = $signed(trunc_ln354_49_fu_849_p4);

assign sext_ln368_104_fu_2142_p1 = mul_res_508_reg_3084;

assign sext_ln368_105_fu_2145_p1 = $signed(trunc_ln354_50_reg_2989);

assign sext_ln368_106_fu_1243_p1 = $signed(trunc_ln354_51_fu_869_p4);

assign sext_ln368_107_fu_2166_p1 = mul_res_510_reg_3089;

assign sext_ln368_108_fu_1261_p1 = $signed(trunc_ln354_52_fu_879_p4);

assign sext_ln368_109_fu_1279_p1 = $signed(trunc_ln353_9_fu_573_p4);

assign sext_ln368_110_fu_2200_p1 = mul_res_512_reg_3099;

assign sext_ln368_111_fu_2203_p1 = $signed(trunc_ln353_1_reg_2954);

assign sext_ln368_112_fu_1297_p1 = $signed(trunc_ln353_2_fu_593_p4);

assign sext_ln368_113_fu_2224_p1 = mul_res_514_reg_3104;

assign sext_ln368_114_fu_1315_p1 = $signed(trunc_ln353_3_fu_603_p4);

assign sext_ln368_115_fu_2258_p1 = mul_res_516_reg_3114;

assign sext_ln368_116_fu_2279_p1 = mul_res_518_reg_3119;

assign sext_ln368_117_fu_2313_p1 = mul_res_520_reg_3129;

assign sext_ln368_118_fu_2334_p1 = mul_res_522_reg_3134;

assign sext_ln368_119_fu_2368_p1 = mul_res_524_reg_3144;

assign sext_ln368_120_fu_2389_p1 = mul_res_526_reg_3149;

assign sext_ln368_121_fu_2423_p1 = mul_res_528_reg_3159;

assign sext_ln368_122_fu_2444_p1 = mul_res_530_reg_3164;

assign sext_ln368_123_fu_2478_p1 = mul_res_532_reg_3174;

assign sext_ln368_124_fu_2499_p1 = mul_res_534_reg_3179;

assign sext_ln368_125_fu_2533_p1 = mul_res_536_reg_3189;

assign sext_ln368_126_fu_2554_p1 = mul_res_538_reg_3194;

assign sext_ln368_64_fu_893_p1 = $signed(trunc_ln354_fu_615_p1);

assign sext_ln368_65_fu_1791_p1 = mul_res_reg_2994;

assign sext_ln368_66_fu_1794_p1 = $signed(trunc_ln353_s_reg_2949);

assign sext_ln368_67_fu_1797_p1 = $signed(trunc_ln354_s_reg_2959);

assign sext_ln368_68_fu_911_p1 = $signed(trunc_ln353_7_fu_553_p4);

assign sext_ln368_69_fu_915_p1 = $signed(trunc_ln354_27_fu_629_p4);

assign sext_ln368_70_fu_1818_p1 = mul_res_486_reg_2999;

assign sext_ln368_71_fu_933_p1 = $signed(trunc_ln353_8_fu_563_p4);

assign sext_ln368_72_fu_937_p1 = $signed(trunc_ln354_28_fu_639_p4);

assign sext_ln368_73_fu_955_p1 = $signed(trunc_ln354_29_fu_649_p4);

assign sext_ln368_74_fu_1852_p1 = mul_res_488_reg_3009;

assign sext_ln368_75_fu_1855_p1 = $signed(trunc_ln354_30_reg_2964);

assign sext_ln368_76_fu_973_p1 = $signed(trunc_ln354_31_fu_669_p4);

assign sext_ln368_77_fu_1876_p1 = mul_res_490_reg_3014;

assign sext_ln368_78_fu_991_p1 = $signed(trunc_ln354_32_fu_679_p4);

assign sext_ln368_79_fu_1009_p1 = $signed(trunc_ln354_33_fu_689_p4);

assign sext_ln368_80_fu_1910_p1 = mul_res_492_reg_3024;

assign sext_ln368_81_fu_1913_p1 = $signed(trunc_ln354_34_reg_2969);

assign sext_ln368_82_fu_1027_p1 = $signed(trunc_ln354_35_fu_709_p4);

assign sext_ln368_83_fu_1934_p1 = mul_res_494_reg_3029;

assign sext_ln368_84_fu_1045_p1 = $signed(trunc_ln354_36_fu_719_p4);

assign sext_ln368_85_fu_1063_p1 = $signed(trunc_ln354_37_fu_729_p4);

assign sext_ln368_86_fu_1968_p1 = mul_res_496_reg_3039;

assign sext_ln368_87_fu_1971_p1 = $signed(trunc_ln354_38_reg_2974);

assign sext_ln368_88_fu_1081_p1 = $signed(trunc_ln354_39_fu_749_p4);

assign sext_ln368_89_fu_1992_p1 = mul_res_498_reg_3044;

assign sext_ln368_90_fu_1099_p1 = $signed(trunc_ln354_40_fu_759_p4);

assign sext_ln368_91_fu_1117_p1 = $signed(trunc_ln354_41_fu_769_p4);

assign sext_ln368_92_fu_2026_p1 = mul_res_500_reg_3054;

assign sext_ln368_93_fu_2029_p1 = $signed(trunc_ln354_42_reg_2979);

assign sext_ln368_94_fu_1135_p1 = $signed(trunc_ln354_43_fu_789_p4);

assign sext_ln368_95_fu_2050_p1 = mul_res_502_reg_3059;

assign sext_ln368_96_fu_1153_p1 = $signed(trunc_ln354_44_fu_799_p4);

assign sext_ln368_97_fu_1171_p1 = $signed(trunc_ln354_45_fu_809_p4);

assign sext_ln368_98_fu_2084_p1 = mul_res_504_reg_3069;

assign sext_ln368_99_fu_2087_p1 = $signed(trunc_ln354_46_reg_2984);

assign sext_ln368_fu_889_p1 = $signed(trunc_ln353_fu_539_p1);

assign sext_ln370_42_fu_1821_p1 = mul_res_487_reg_3004;

assign sext_ln370_43_fu_1836_p1 = $signed(add_ln370_57_fu_1830_p2);

assign sext_ln370_44_fu_1872_p1 = mul_res_489_fu_1866_p2;

assign sext_ln370_45_fu_1879_p1 = mul_res_491_reg_3019;

assign sext_ln370_46_fu_1894_p1 = $signed(add_ln370_61_fu_1888_p2);

assign sext_ln370_47_fu_1930_p1 = mul_res_493_fu_1924_p2;

assign sext_ln370_48_fu_1937_p1 = mul_res_495_reg_3034;

assign sext_ln370_49_fu_1952_p1 = $signed(add_ln370_65_fu_1946_p2);

assign sext_ln370_50_fu_1988_p1 = mul_res_497_fu_1982_p2;

assign sext_ln370_51_fu_1995_p1 = mul_res_499_reg_3049;

assign sext_ln370_52_fu_2010_p1 = $signed(add_ln370_69_fu_2004_p2);

assign sext_ln370_53_fu_2046_p1 = mul_res_501_fu_2040_p2;

assign sext_ln370_54_fu_2053_p1 = mul_res_503_reg_3064;

assign sext_ln370_55_fu_2068_p1 = $signed(add_ln370_73_fu_2062_p2);

assign sext_ln370_56_fu_2104_p1 = mul_res_505_fu_2098_p2;

assign sext_ln370_57_fu_2111_p1 = mul_res_507_reg_3079;

assign sext_ln370_58_fu_2126_p1 = $signed(add_ln370_77_fu_2120_p2);

assign sext_ln370_59_fu_2162_p1 = mul_res_509_fu_2156_p2;

assign sext_ln370_60_fu_2169_p1 = mul_res_511_reg_3094;

assign sext_ln370_61_fu_2184_p1 = $signed(add_ln370_81_fu_2178_p2);

assign sext_ln370_62_fu_2220_p1 = mul_res_513_fu_2214_p2;

assign sext_ln370_63_fu_2227_p1 = mul_res_515_reg_3109;

assign sext_ln370_64_fu_2242_p1 = $signed(add_ln370_85_fu_2236_p2);

assign sext_ln370_65_fu_2275_p1 = mul_res_517_fu_2269_p2;

assign sext_ln370_66_fu_2282_p1 = mul_res_519_reg_3124;

assign sext_ln370_67_fu_2297_p1 = $signed(add_ln370_89_fu_2291_p2);

assign sext_ln370_68_fu_2330_p1 = mul_res_521_fu_2324_p2;

assign sext_ln370_69_fu_2337_p1 = mul_res_523_reg_3139;

assign sext_ln370_70_fu_2352_p1 = $signed(add_ln370_93_fu_2346_p2);

assign sext_ln370_71_fu_2385_p1 = mul_res_525_fu_2379_p2;

assign sext_ln370_72_fu_2392_p1 = mul_res_527_reg_3154;

assign sext_ln370_73_fu_2413_p1 = $signed(add_ln370_97_fu_2407_p2);

assign sext_ln370_74_fu_2440_p1 = mul_res_529_fu_2434_p2;

assign sext_ln370_75_fu_2447_p1 = mul_res_531_reg_3169;

assign sext_ln370_76_fu_2468_p1 = $signed(add_ln370_101_fu_2462_p2);

assign sext_ln370_77_fu_2495_p1 = mul_res_533_fu_2489_p2;

assign sext_ln370_78_fu_2502_p1 = mul_res_535_reg_3184;

assign sext_ln370_79_fu_2523_p1 = $signed(add_ln370_105_fu_2517_p2);

assign sext_ln370_80_fu_2550_p1 = mul_res_537_fu_2544_p2;

assign sext_ln370_81_fu_2557_p1 = mul_res_539_reg_3199;

assign sext_ln370_82_fu_2578_p1 = $signed(add_ln370_109_fu_2572_p2);

assign sext_ln370_fu_1814_p1 = mul_res_485_fu_1808_p2;

assign start_out = real_start;

assign trunc_ln353_2_fu_593_p4 = {{cache_window_sm_dout[20:18]}};

assign trunc_ln353_3_fu_603_p4 = {{cache_window_sm_dout[23:21]}};

assign trunc_ln353_7_fu_553_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln353_8_fu_563_p4 = {{cache_window_sm_dout[11:9]}};

assign trunc_ln353_9_fu_573_p4 = {{cache_window_sm_dout[14:12]}};

assign trunc_ln353_fu_539_p1 = cache_window_sm_dout[2:0];

assign trunc_ln354_27_fu_629_p4 = {{weight_sm_dout[8:6]}};

assign trunc_ln354_28_fu_639_p4 = {{weight_sm_dout[11:9]}};

assign trunc_ln354_29_fu_649_p4 = {{weight_sm_dout[14:12]}};

assign trunc_ln354_31_fu_669_p4 = {{weight_sm_dout[20:18]}};

assign trunc_ln354_32_fu_679_p4 = {{weight_sm_dout[23:21]}};

assign trunc_ln354_33_fu_689_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln354_35_fu_709_p4 = {{weight_sm_dout[32:30]}};

assign trunc_ln354_36_fu_719_p4 = {{weight_sm_dout[35:33]}};

assign trunc_ln354_37_fu_729_p4 = {{weight_sm_dout[38:36]}};

assign trunc_ln354_39_fu_749_p4 = {{weight_sm_dout[44:42]}};

assign trunc_ln354_40_fu_759_p4 = {{weight_sm_dout[47:45]}};

assign trunc_ln354_41_fu_769_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln354_43_fu_789_p4 = {{weight_sm_dout[56:54]}};

assign trunc_ln354_44_fu_799_p4 = {{weight_sm_dout[59:57]}};

assign trunc_ln354_45_fu_809_p4 = {{weight_sm_dout[62:60]}};

assign trunc_ln354_47_fu_829_p4 = {{weight_sm_dout[68:66]}};

assign trunc_ln354_48_fu_839_p4 = {{weight_sm_dout[71:69]}};

assign trunc_ln354_49_fu_849_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln354_51_fu_869_p4 = {{weight_sm_dout[80:78]}};

assign trunc_ln354_52_fu_879_p4 = {{weight_sm_dout[83:81]}};

assign trunc_ln354_fu_615_p1 = weight_sm_dout[2:0];

assign xor_ln336_fu_501_p2 = (icmp_ln337_reg_2925 ^ 1'd1);

endmodule //ATTN11_matmul_step2_mac_29
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_2_attn_inst_matmul_gen_q_bias_arr_657_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 141;
parameter AddressWidth = 4;
parameter AddressRange = 16;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_2_attn_inst_matmul_gen_q_bias_arr_657_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_2_attn_inst_matmul_gen_q_weight_arr_656_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 216;
parameter AddressWidth = 9;
parameter AddressRange = 512;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_2_attn_inst_matmul_gen_q_weight_arr_656_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [71:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [143:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln161_reg_6695;
reg   [0:0] icmp_ln161_reg_6695_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln120_fu_837_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] attn_inst_matmul_gen_o_bias_arr_663_address0;
reg    attn_inst_matmul_gen_o_bias_arr_663_ce0;
wire   [64:0] attn_inst_matmul_gen_o_bias_arr_663_q0;
wire   [8:0] attn_inst_matmul_gen_o_weight_arr_662_address0;
reg    attn_inst_matmul_gen_o_weight_arr_662_ce0;
wire   [215:0] attn_inst_matmul_gen_o_weight_arr_662_q0;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln121_fu_843_p2;
reg   [0:0] icmp_ln121_reg_6525;
wire   [4:0] select_ln121_fu_934_p3;
reg   [4:0] select_ln121_reg_6532;
wire   [5:0] select_ln121_5_fu_942_p3;
reg   [5:0] select_ln121_5_reg_6539;
wire   [4:0] trunc_ln121_fu_950_p1;
reg   [4:0] trunc_ln121_reg_6544;
wire   [0:0] icmp_ln126_fu_1013_p2;
reg   [0:0] icmp_ln126_reg_6559;
reg   [0:0] icmp_ln126_reg_6559_pp0_iter3_reg;
wire   [2:0] trunc_ln137_fu_1020_p1;
reg   [2:0] trunc_ln137_reg_6575;
reg   [2:0] trunc_ln137_12_reg_6580;
reg   [2:0] trunc_ln137_13_reg_6585;
reg   [2:0] trunc_ln137_14_reg_6590;
reg   [2:0] trunc_ln137_15_reg_6595;
reg   [2:0] trunc_ln137_16_reg_6600;
reg   [2:0] trunc_ln137_17_reg_6605;
reg   [2:0] trunc_ln137_18_reg_6610;
reg   [2:0] trunc_ln137_19_reg_6615;
reg   [2:0] trunc_ln137_20_reg_6620;
reg   [2:0] trunc_ln137_s_reg_6625;
reg   [2:0] trunc_ln137_21_reg_6630;
reg   [2:0] trunc_ln137_22_reg_6635;
reg   [2:0] trunc_ln137_23_reg_6640;
reg   [2:0] trunc_ln137_24_reg_6645;
reg   [2:0] trunc_ln137_25_reg_6650;
reg   [2:0] trunc_ln137_26_reg_6655;
reg   [2:0] trunc_ln137_27_reg_6660;
reg   [2:0] trunc_ln137_28_reg_6665;
reg   [2:0] trunc_ln137_29_reg_6670;
reg   [2:0] trunc_ln137_30_reg_6675;
reg   [2:0] trunc_ln137_31_reg_6680;
reg   [2:0] trunc_ln137_32_reg_6685;
reg   [2:0] trunc_ln137_33_reg_6690;
wire   [0:0] icmp_ln161_fu_1258_p2;
reg   [0:0] icmp_ln161_reg_6695_pp0_iter3_reg;
wire   [11:0] trunc_ln131_fu_1263_p1;
reg   [11:0] trunc_ln131_reg_6699;
reg   [11:0] tmp_s_reg_6705;
reg   [11:0] tmp_83_reg_6711;
reg   [11:0] tmp_84_reg_6717;
reg   [11:0] tmp_85_reg_6723;
reg   [4:0] tmp_159_reg_6729;
wire   [6:0] add_ln153_fu_1731_p2;
reg   [6:0] add_ln153_reg_6734;
wire   [6:0] add_ln153_146_fu_1743_p2;
reg   [6:0] add_ln153_146_reg_6739;
wire   [6:0] add_ln153_149_fu_1755_p2;
reg   [6:0] add_ln153_149_reg_6744;
wire   [6:0] add_ln153_150_fu_1761_p2;
reg   [6:0] add_ln153_150_reg_6749;
wire   [6:0] add_ln153_151_fu_1767_p2;
reg   [6:0] add_ln153_151_reg_6754;
wire   [6:0] add_ln153_155_fu_2157_p2;
reg   [6:0] add_ln153_155_reg_6759;
wire   [6:0] add_ln153_158_fu_2169_p2;
reg   [6:0] add_ln153_158_reg_6764;
wire   [6:0] add_ln153_161_fu_2181_p2;
reg   [6:0] add_ln153_161_reg_6769;
wire   [6:0] add_ln153_162_fu_2187_p2;
reg   [6:0] add_ln153_162_reg_6774;
wire   [6:0] add_ln153_163_fu_2193_p2;
reg   [6:0] add_ln153_163_reg_6779;
wire   [6:0] add_ln153_167_fu_2583_p2;
reg   [6:0] add_ln153_167_reg_6784;
wire   [6:0] add_ln153_170_fu_2595_p2;
reg   [6:0] add_ln153_170_reg_6789;
wire   [6:0] add_ln153_173_fu_2607_p2;
reg   [6:0] add_ln153_173_reg_6794;
wire   [6:0] add_ln153_174_fu_2613_p2;
reg   [6:0] add_ln153_174_reg_6799;
wire   [6:0] add_ln153_175_fu_2619_p2;
reg   [6:0] add_ln153_175_reg_6804;
wire   [6:0] add_ln153_179_fu_3009_p2;
reg   [6:0] add_ln153_179_reg_6809;
wire   [6:0] add_ln153_182_fu_3021_p2;
reg   [6:0] add_ln153_182_reg_6814;
wire   [6:0] add_ln153_185_fu_3033_p2;
reg   [6:0] add_ln153_185_reg_6819;
wire   [6:0] add_ln153_186_fu_3039_p2;
reg   [6:0] add_ln153_186_reg_6824;
wire   [6:0] add_ln153_187_fu_3045_p2;
reg   [6:0] add_ln153_187_reg_6829;
wire   [6:0] add_ln153_191_fu_3435_p2;
reg   [6:0] add_ln153_191_reg_6834;
wire   [6:0] add_ln153_194_fu_3447_p2;
reg   [6:0] add_ln153_194_reg_6839;
wire   [6:0] add_ln153_197_fu_3459_p2;
reg   [6:0] add_ln153_197_reg_6844;
wire   [6:0] add_ln153_198_fu_3465_p2;
reg   [6:0] add_ln153_198_reg_6849;
wire   [6:0] add_ln153_199_fu_3471_p2;
reg   [6:0] add_ln153_199_reg_6854;
wire   [6:0] add_ln153_203_fu_3861_p2;
reg   [6:0] add_ln153_203_reg_6859;
wire   [6:0] add_ln153_206_fu_3873_p2;
reg   [6:0] add_ln153_206_reg_6864;
wire   [6:0] add_ln153_209_fu_3885_p2;
reg   [6:0] add_ln153_209_reg_6869;
wire   [6:0] add_ln153_210_fu_3891_p2;
reg   [6:0] add_ln153_210_reg_6874;
wire   [6:0] add_ln153_211_fu_3897_p2;
reg   [6:0] add_ln153_211_reg_6879;
wire   [6:0] add_ln153_215_fu_4155_p2;
reg   [6:0] add_ln153_215_reg_6884;
wire   [6:0] add_ln153_218_fu_4167_p2;
reg   [6:0] add_ln153_218_reg_6889;
wire   [6:0] add_ln153_221_fu_4179_p2;
reg   [6:0] add_ln153_221_reg_6894;
wire   [6:0] add_ln153_222_fu_4185_p2;
reg   [6:0] add_ln153_222_reg_6899;
wire   [6:0] add_ln153_223_fu_4191_p2;
reg   [6:0] add_ln153_223_reg_6904;
wire   [6:0] add_ln153_227_fu_4413_p2;
reg   [6:0] add_ln153_227_reg_6909;
wire   [6:0] add_ln153_230_fu_4425_p2;
reg   [6:0] add_ln153_230_reg_6914;
wire   [6:0] add_ln153_233_fu_4437_p2;
reg   [6:0] add_ln153_233_reg_6919;
wire   [6:0] add_ln153_234_fu_4443_p2;
reg   [6:0] add_ln153_234_reg_6924;
wire   [6:0] add_ln153_235_fu_4449_p2;
reg   [6:0] add_ln153_235_reg_6929;
wire   [6:0] add_ln153_239_fu_4671_p2;
reg   [6:0] add_ln153_239_reg_6934;
wire   [6:0] add_ln153_242_fu_4683_p2;
reg   [6:0] add_ln153_242_reg_6939;
wire   [6:0] add_ln153_245_fu_4695_p2;
reg   [6:0] add_ln153_245_reg_6944;
wire   [6:0] add_ln153_246_fu_4701_p2;
reg   [6:0] add_ln153_246_reg_6949;
wire   [6:0] add_ln153_247_fu_4707_p2;
reg   [6:0] add_ln153_247_reg_6954;
wire   [6:0] add_ln153_251_fu_4929_p2;
reg   [6:0] add_ln153_251_reg_6959;
wire   [6:0] add_ln153_254_fu_4941_p2;
reg   [6:0] add_ln153_254_reg_6964;
wire   [6:0] add_ln153_257_fu_4953_p2;
reg   [6:0] add_ln153_257_reg_6969;
wire   [6:0] add_ln153_258_fu_4959_p2;
reg   [6:0] add_ln153_258_reg_6974;
wire   [6:0] add_ln153_259_fu_4965_p2;
reg   [6:0] add_ln153_259_reg_6979;
wire  signed [5:0] mul_res_466_fu_5069_p2;
reg  signed [5:0] mul_res_466_reg_6984;
wire  signed [5:0] mul_res_468_fu_5101_p2;
reg  signed [5:0] mul_res_468_reg_6989;
wire  signed [5:0] mul_res_469_fu_5115_p2;
reg  signed [5:0] mul_res_469_reg_6994;
wire   [6:0] add_ln153_263_fu_5175_p2;
reg   [6:0] add_ln153_263_reg_6999;
wire   [6:0] add_ln153_269_fu_5187_p2;
reg   [6:0] add_ln153_269_reg_7004;
wire   [6:0] add_ln153_270_fu_5193_p2;
reg   [6:0] add_ln153_270_reg_7009;
wire   [6:0] add_ln153_271_fu_5199_p2;
reg   [6:0] add_ln153_271_reg_7014;
wire  signed [5:0] mul_res_478_fu_5303_p2;
reg  signed [5:0] mul_res_478_reg_7019;
wire  signed [5:0] mul_res_480_fu_5335_p2;
reg  signed [5:0] mul_res_480_reg_7024;
wire  signed [5:0] mul_res_481_fu_5349_p2;
reg  signed [5:0] mul_res_481_reg_7029;
wire   [6:0] add_ln153_275_fu_5409_p2;
reg   [6:0] add_ln153_275_reg_7034;
wire   [6:0] add_ln153_281_fu_5421_p2;
reg   [6:0] add_ln153_281_reg_7039;
wire   [6:0] add_ln153_282_fu_5427_p2;
reg   [6:0] add_ln153_282_reg_7044;
wire   [6:0] add_ln153_283_fu_5433_p2;
reg   [6:0] add_ln153_283_reg_7049;
wire   [11:0] add_ln153_154_fu_5631_p2;
reg   [11:0] add_ln153_154_reg_7054;
wire   [11:0] add_ln153_166_fu_5680_p2;
reg   [11:0] add_ln153_166_reg_7059;
wire   [11:0] add_ln153_178_fu_5729_p2;
reg   [11:0] add_ln153_178_reg_7064;
wire   [11:0] add_ln153_190_fu_5778_p2;
reg   [11:0] add_ln153_190_reg_7069;
wire   [11:0] add_ln153_202_fu_5827_p2;
reg   [11:0] add_ln153_202_reg_7074;
wire   [11:0] add_ln153_214_fu_5876_p2;
reg   [11:0] add_ln153_214_reg_7079;
wire   [11:0] add_ln153_226_fu_5925_p2;
reg   [11:0] add_ln153_226_reg_7084;
wire   [11:0] add_ln153_238_fu_5974_p2;
reg   [11:0] add_ln153_238_reg_7089;
wire   [11:0] add_ln153_250_fu_6023_p2;
reg   [11:0] add_ln153_250_reg_7094;
wire   [11:0] add_ln153_262_fu_6072_p2;
reg   [11:0] add_ln153_262_reg_7099;
wire   [11:0] add_ln153_274_fu_6143_p2;
reg   [11:0] add_ln153_274_reg_7104;
wire   [11:0] add_ln153_286_fu_6214_p2;
reg   [11:0] add_ln153_286_reg_7109;
wire   [63:0] zext_ln121_fu_984_p1;
wire   [63:0] zext_ln151_3_fu_1008_p1;
reg   [4:0] cit_fu_668;
wire   [4:0] add_ln122_fu_954_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [11:0] p_0_0_0364_fu_672;
reg   [11:0] p_0_0_0_112366_fu_676;
reg   [11:0] p_0_0_0_2368_fu_680;
reg   [11:0] p_0_0_0_3370_fu_684;
reg   [11:0] p_0_0_0_4372_fu_688;
reg   [11:0] p_0_0_0_5374_fu_692;
reg   [11:0] p_0_0_0376_fu_696;
reg   [11:0] p_0_0_0_112378_fu_700;
reg   [11:0] p_0_0_0_2380_fu_704;
reg   [11:0] p_0_0_0_3382_fu_708;
reg   [11:0] p_0_0_0_4384_fu_712;
reg   [11:0] p_0_0_0_5386_fu_716;
reg   [5:0] cot_fu_720;
reg   [5:0] ap_sig_allocacmp_cot_load;
reg   [10:0] indvar_flatten_fu_724;
wire   [10:0] select_ln121_6_fu_855_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten35_fu_728;
wire   [15:0] add_ln120_fu_831_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten35_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln121_3_fu_849_p2;
wire   [0:0] icmp_ln122_fu_911_p2;
wire   [0:0] xor_ln120_fu_906_p2;
wire   [5:0] select_ln120_fu_899_p3;
wire   [0:0] and_ln120_fu_917_p2;
wire   [0:0] or_ln121_fu_929_p2;
wire   [5:0] add_ln121_fu_923_p2;
wire   [8:0] tmp_39_fu_988_p3;
wire   [8:0] zext_ln151_fu_999_p1;
wire   [8:0] add_ln151_fu_1002_p2;
wire   [2:0] trunc_ln151_fu_1317_p1;
wire  signed [2:0] mul_res_fu_1336_p0;
wire  signed [5:0] sext_ln151_84_fu_1324_p1;
wire  signed [2:0] mul_res_fu_1336_p1;
wire  signed [5:0] sext_ln151_fu_1321_p1;
wire  signed [5:0] mul_res_fu_1336_p2;
wire   [2:0] tmp_164_fu_1346_p4;
wire  signed [2:0] mul_res_342_fu_1371_p0;
wire  signed [5:0] sext_ln151_86_fu_1359_p1;
wire  signed [2:0] mul_res_342_fu_1371_p1;
wire  signed [5:0] sext_ln151_85_fu_1356_p1;
wire  signed [5:0] mul_res_342_fu_1371_p2;
wire   [2:0] tmp_165_fu_1381_p4;
wire  signed [2:0] mul_res_343_fu_1406_p0;
wire  signed [5:0] sext_ln151_88_fu_1394_p1;
wire  signed [2:0] mul_res_343_fu_1406_p1;
wire  signed [5:0] sext_ln151_87_fu_1391_p1;
wire  signed [5:0] mul_res_343_fu_1406_p2;
wire   [2:0] tmp_166_fu_1416_p4;
wire  signed [2:0] mul_res_344_fu_1441_p0;
wire  signed [5:0] sext_ln151_90_fu_1429_p1;
wire  signed [2:0] mul_res_344_fu_1441_p1;
wire  signed [5:0] sext_ln151_89_fu_1426_p1;
wire  signed [5:0] mul_res_344_fu_1441_p2;
wire   [2:0] tmp_167_fu_1451_p4;
wire  signed [2:0] mul_res_345_fu_1476_p0;
wire  signed [5:0] sext_ln151_92_fu_1464_p1;
wire  signed [2:0] mul_res_345_fu_1476_p1;
wire  signed [5:0] sext_ln151_91_fu_1461_p1;
wire  signed [5:0] mul_res_345_fu_1476_p2;
wire   [2:0] tmp_168_fu_1486_p4;
wire  signed [2:0] mul_res_346_fu_1511_p0;
wire  signed [5:0] sext_ln151_94_fu_1499_p1;
wire  signed [2:0] mul_res_346_fu_1511_p1;
wire  signed [5:0] sext_ln151_93_fu_1496_p1;
wire  signed [5:0] mul_res_346_fu_1511_p2;
wire   [2:0] tmp_169_fu_1521_p4;
wire  signed [2:0] mul_res_347_fu_1546_p0;
wire  signed [5:0] sext_ln151_96_fu_1534_p1;
wire  signed [2:0] mul_res_347_fu_1546_p1;
wire  signed [5:0] sext_ln151_95_fu_1531_p1;
wire  signed [5:0] mul_res_347_fu_1546_p2;
wire   [2:0] tmp_170_fu_1556_p4;
wire  signed [2:0] mul_res_348_fu_1581_p0;
wire  signed [5:0] sext_ln151_98_fu_1569_p1;
wire  signed [2:0] mul_res_348_fu_1581_p1;
wire  signed [5:0] sext_ln151_97_fu_1566_p1;
wire  signed [5:0] mul_res_348_fu_1581_p2;
wire   [2:0] tmp_171_fu_1591_p4;
wire  signed [2:0] mul_res_349_fu_1616_p0;
wire  signed [5:0] sext_ln151_100_fu_1604_p1;
wire  signed [2:0] mul_res_349_fu_1616_p1;
wire  signed [5:0] sext_ln151_99_fu_1601_p1;
wire  signed [5:0] mul_res_349_fu_1616_p2;
wire   [2:0] tmp_172_fu_1626_p4;
wire  signed [2:0] mul_res_350_fu_1651_p0;
wire  signed [5:0] sext_ln151_102_fu_1639_p1;
wire  signed [2:0] mul_res_350_fu_1651_p1;
wire  signed [5:0] sext_ln151_101_fu_1636_p1;
wire  signed [5:0] mul_res_350_fu_1651_p2;
wire   [2:0] tmp_173_fu_1661_p4;
wire  signed [2:0] mul_res_351_fu_1686_p0;
wire  signed [5:0] sext_ln151_104_fu_1674_p1;
wire  signed [2:0] mul_res_351_fu_1686_p1;
wire  signed [5:0] sext_ln151_103_fu_1671_p1;
wire  signed [5:0] mul_res_351_fu_1686_p2;
wire   [2:0] tmp_174_fu_1696_p4;
wire  signed [2:0] mul_res_352_fu_1721_p0;
wire  signed [5:0] sext_ln151_106_fu_1709_p1;
wire  signed [2:0] mul_res_352_fu_1721_p1;
wire  signed [5:0] sext_ln151_105_fu_1706_p1;
wire  signed [5:0] mul_res_352_fu_1721_p2;
wire  signed [6:0] sext_ln151_213_fu_1657_p1;
wire  signed [6:0] sext_ln151_214_fu_1692_p1;
wire  signed [6:0] sext_ln151_209_fu_1517_p1;
wire  signed [6:0] sext_ln151_211_fu_1587_p1;
wire   [6:0] add_ln153_145_fu_1737_p2;
wire  signed [6:0] sext_ln151_212_fu_1622_p1;
wire  signed [6:0] sext_ln151_205_fu_1377_p1;
wire  signed [6:0] sext_ln151_204_fu_1342_p1;
wire   [6:0] add_ln153_148_fu_1749_p2;
wire  signed [6:0] sext_ln151_210_fu_1552_p1;
wire  signed [6:0] sext_ln151_206_fu_1412_p1;
wire  signed [6:0] sext_ln151_208_fu_1482_p1;
wire  signed [6:0] sext_ln151_207_fu_1447_p1;
wire  signed [6:0] sext_ln153_fu_1727_p1;
wire   [2:0] tmp_175_fu_1773_p4;
wire  signed [2:0] mul_res_353_fu_1795_p0;
wire  signed [5:0] sext_ln151_107_fu_1783_p1;
wire  signed [2:0] mul_res_353_fu_1795_p1;
wire  signed [5:0] mul_res_353_fu_1795_p2;
wire   [2:0] tmp_176_fu_1805_p4;
wire  signed [2:0] mul_res_354_fu_1827_p0;
wire  signed [5:0] sext_ln151_108_fu_1815_p1;
wire  signed [2:0] mul_res_354_fu_1827_p1;
wire  signed [5:0] mul_res_354_fu_1827_p2;
wire   [2:0] tmp_177_fu_1837_p4;
wire  signed [2:0] mul_res_355_fu_1859_p0;
wire  signed [5:0] sext_ln151_109_fu_1847_p1;
wire  signed [2:0] mul_res_355_fu_1859_p1;
wire  signed [5:0] mul_res_355_fu_1859_p2;
wire   [2:0] tmp_178_fu_1869_p4;
wire  signed [2:0] mul_res_356_fu_1891_p0;
wire  signed [5:0] sext_ln151_110_fu_1879_p1;
wire  signed [2:0] mul_res_356_fu_1891_p1;
wire  signed [5:0] mul_res_356_fu_1891_p2;
wire   [2:0] tmp_179_fu_1901_p4;
wire  signed [2:0] mul_res_357_fu_1923_p0;
wire  signed [5:0] sext_ln151_111_fu_1911_p1;
wire  signed [2:0] mul_res_357_fu_1923_p1;
wire  signed [5:0] mul_res_357_fu_1923_p2;
wire   [2:0] tmp_180_fu_1933_p4;
wire  signed [2:0] mul_res_358_fu_1955_p0;
wire  signed [5:0] sext_ln151_112_fu_1943_p1;
wire  signed [2:0] mul_res_358_fu_1955_p1;
wire  signed [5:0] mul_res_358_fu_1955_p2;
wire   [2:0] tmp_181_fu_1965_p4;
wire  signed [2:0] mul_res_359_fu_1987_p0;
wire  signed [5:0] sext_ln151_113_fu_1975_p1;
wire  signed [2:0] mul_res_359_fu_1987_p1;
wire  signed [5:0] mul_res_359_fu_1987_p2;
wire   [2:0] tmp_182_fu_1997_p4;
wire  signed [2:0] mul_res_360_fu_2019_p0;
wire  signed [5:0] sext_ln151_114_fu_2007_p1;
wire  signed [2:0] mul_res_360_fu_2019_p1;
wire  signed [5:0] mul_res_360_fu_2019_p2;
wire   [2:0] tmp_183_fu_2029_p4;
wire  signed [2:0] mul_res_361_fu_2051_p0;
wire  signed [5:0] sext_ln151_115_fu_2039_p1;
wire  signed [2:0] mul_res_361_fu_2051_p1;
wire  signed [5:0] mul_res_361_fu_2051_p2;
wire   [2:0] tmp_184_fu_2061_p4;
wire  signed [2:0] mul_res_362_fu_2083_p0;
wire  signed [5:0] sext_ln151_116_fu_2071_p1;
wire  signed [2:0] mul_res_362_fu_2083_p1;
wire  signed [5:0] mul_res_362_fu_2083_p2;
wire   [2:0] tmp_185_fu_2093_p4;
wire  signed [2:0] mul_res_363_fu_2115_p0;
wire  signed [5:0] sext_ln151_117_fu_2103_p1;
wire  signed [2:0] mul_res_363_fu_2115_p1;
wire  signed [5:0] mul_res_363_fu_2115_p2;
wire   [2:0] tmp_186_fu_2125_p4;
wire  signed [2:0] mul_res_364_fu_2147_p0;
wire  signed [5:0] sext_ln151_118_fu_2135_p1;
wire  signed [2:0] mul_res_364_fu_2147_p1;
wire  signed [5:0] mul_res_364_fu_2147_p2;
wire  signed [6:0] sext_ln151_224_fu_2089_p1;
wire  signed [6:0] sext_ln151_225_fu_2121_p1;
wire  signed [6:0] sext_ln151_220_fu_1961_p1;
wire  signed [6:0] sext_ln151_222_fu_2025_p1;
wire   [6:0] add_ln153_157_fu_2163_p2;
wire  signed [6:0] sext_ln151_223_fu_2057_p1;
wire  signed [6:0] sext_ln151_216_fu_1833_p1;
wire  signed [6:0] sext_ln151_215_fu_1801_p1;
wire   [6:0] add_ln153_160_fu_2175_p2;
wire  signed [6:0] sext_ln151_221_fu_1993_p1;
wire  signed [6:0] sext_ln151_217_fu_1865_p1;
wire  signed [6:0] sext_ln151_219_fu_1929_p1;
wire  signed [6:0] sext_ln151_218_fu_1897_p1;
wire  signed [6:0] sext_ln153_126_fu_2153_p1;
wire   [2:0] tmp_187_fu_2199_p4;
wire  signed [2:0] mul_res_365_fu_2221_p0;
wire  signed [5:0] sext_ln151_119_fu_2209_p1;
wire  signed [2:0] mul_res_365_fu_2221_p1;
wire  signed [5:0] mul_res_365_fu_2221_p2;
wire   [2:0] tmp_188_fu_2231_p4;
wire  signed [2:0] mul_res_366_fu_2253_p0;
wire  signed [5:0] sext_ln151_120_fu_2241_p1;
wire  signed [2:0] mul_res_366_fu_2253_p1;
wire  signed [5:0] mul_res_366_fu_2253_p2;
wire   [2:0] tmp_189_fu_2263_p4;
wire  signed [2:0] mul_res_367_fu_2285_p0;
wire  signed [5:0] sext_ln151_121_fu_2273_p1;
wire  signed [2:0] mul_res_367_fu_2285_p1;
wire  signed [5:0] mul_res_367_fu_2285_p2;
wire   [2:0] tmp_190_fu_2295_p4;
wire  signed [2:0] mul_res_368_fu_2317_p0;
wire  signed [5:0] sext_ln151_122_fu_2305_p1;
wire  signed [2:0] mul_res_368_fu_2317_p1;
wire  signed [5:0] mul_res_368_fu_2317_p2;
wire   [2:0] tmp_191_fu_2327_p4;
wire  signed [2:0] mul_res_369_fu_2349_p0;
wire  signed [5:0] sext_ln151_123_fu_2337_p1;
wire  signed [2:0] mul_res_369_fu_2349_p1;
wire  signed [5:0] mul_res_369_fu_2349_p2;
wire   [2:0] tmp_192_fu_2359_p4;
wire  signed [2:0] mul_res_370_fu_2381_p0;
wire  signed [5:0] sext_ln151_124_fu_2369_p1;
wire  signed [2:0] mul_res_370_fu_2381_p1;
wire  signed [5:0] mul_res_370_fu_2381_p2;
wire   [2:0] tmp_193_fu_2391_p4;
wire  signed [2:0] mul_res_371_fu_2413_p0;
wire  signed [5:0] sext_ln151_125_fu_2401_p1;
wire  signed [2:0] mul_res_371_fu_2413_p1;
wire  signed [5:0] mul_res_371_fu_2413_p2;
wire   [2:0] tmp_194_fu_2423_p4;
wire  signed [2:0] mul_res_372_fu_2445_p0;
wire  signed [5:0] sext_ln151_126_fu_2433_p1;
wire  signed [2:0] mul_res_372_fu_2445_p1;
wire  signed [5:0] mul_res_372_fu_2445_p2;
wire   [2:0] tmp_195_fu_2455_p4;
wire  signed [2:0] mul_res_373_fu_2477_p0;
wire  signed [5:0] sext_ln151_127_fu_2465_p1;
wire  signed [2:0] mul_res_373_fu_2477_p1;
wire  signed [5:0] mul_res_373_fu_2477_p2;
wire   [2:0] tmp_196_fu_2487_p4;
wire  signed [2:0] mul_res_374_fu_2509_p0;
wire  signed [5:0] sext_ln151_128_fu_2497_p1;
wire  signed [2:0] mul_res_374_fu_2509_p1;
wire  signed [5:0] mul_res_374_fu_2509_p2;
wire   [2:0] tmp_197_fu_2519_p4;
wire  signed [2:0] mul_res_375_fu_2541_p0;
wire  signed [5:0] sext_ln151_129_fu_2529_p1;
wire  signed [2:0] mul_res_375_fu_2541_p1;
wire  signed [5:0] mul_res_375_fu_2541_p2;
wire   [2:0] tmp_198_fu_2551_p4;
wire  signed [2:0] mul_res_376_fu_2573_p0;
wire  signed [5:0] sext_ln151_130_fu_2561_p1;
wire  signed [2:0] mul_res_376_fu_2573_p1;
wire  signed [5:0] mul_res_376_fu_2573_p2;
wire  signed [6:0] sext_ln151_235_fu_2515_p1;
wire  signed [6:0] sext_ln151_236_fu_2547_p1;
wire  signed [6:0] sext_ln151_231_fu_2387_p1;
wire  signed [6:0] sext_ln151_233_fu_2451_p1;
wire   [6:0] add_ln153_169_fu_2589_p2;
wire  signed [6:0] sext_ln151_234_fu_2483_p1;
wire  signed [6:0] sext_ln151_227_fu_2259_p1;
wire  signed [6:0] sext_ln151_226_fu_2227_p1;
wire   [6:0] add_ln153_172_fu_2601_p2;
wire  signed [6:0] sext_ln151_232_fu_2419_p1;
wire  signed [6:0] sext_ln151_228_fu_2291_p1;
wire  signed [6:0] sext_ln151_230_fu_2355_p1;
wire  signed [6:0] sext_ln151_229_fu_2323_p1;
wire  signed [6:0] sext_ln153_133_fu_2579_p1;
wire   [2:0] tmp_199_fu_2625_p4;
wire  signed [2:0] mul_res_377_fu_2647_p0;
wire  signed [5:0] sext_ln151_131_fu_2635_p1;
wire  signed [2:0] mul_res_377_fu_2647_p1;
wire  signed [5:0] mul_res_377_fu_2647_p2;
wire   [2:0] tmp_200_fu_2657_p4;
wire  signed [2:0] mul_res_378_fu_2679_p0;
wire  signed [5:0] sext_ln151_132_fu_2667_p1;
wire  signed [2:0] mul_res_378_fu_2679_p1;
wire  signed [5:0] mul_res_378_fu_2679_p2;
wire   [2:0] tmp_201_fu_2689_p4;
wire  signed [2:0] mul_res_379_fu_2711_p0;
wire  signed [5:0] sext_ln151_133_fu_2699_p1;
wire  signed [2:0] mul_res_379_fu_2711_p1;
wire  signed [5:0] mul_res_379_fu_2711_p2;
wire   [2:0] tmp_202_fu_2721_p4;
wire  signed [2:0] mul_res_380_fu_2743_p0;
wire  signed [5:0] sext_ln151_134_fu_2731_p1;
wire  signed [2:0] mul_res_380_fu_2743_p1;
wire  signed [5:0] mul_res_380_fu_2743_p2;
wire   [2:0] tmp_203_fu_2753_p4;
wire  signed [2:0] mul_res_381_fu_2775_p0;
wire  signed [5:0] sext_ln151_135_fu_2763_p1;
wire  signed [2:0] mul_res_381_fu_2775_p1;
wire  signed [5:0] mul_res_381_fu_2775_p2;
wire   [2:0] tmp_204_fu_2785_p4;
wire  signed [2:0] mul_res_382_fu_2807_p0;
wire  signed [5:0] sext_ln151_136_fu_2795_p1;
wire  signed [2:0] mul_res_382_fu_2807_p1;
wire  signed [5:0] mul_res_382_fu_2807_p2;
wire   [2:0] tmp_205_fu_2817_p4;
wire  signed [2:0] mul_res_383_fu_2839_p0;
wire  signed [5:0] sext_ln151_137_fu_2827_p1;
wire  signed [2:0] mul_res_383_fu_2839_p1;
wire  signed [5:0] mul_res_383_fu_2839_p2;
wire   [2:0] tmp_206_fu_2849_p4;
wire  signed [2:0] mul_res_384_fu_2871_p0;
wire  signed [5:0] sext_ln151_138_fu_2859_p1;
wire  signed [2:0] mul_res_384_fu_2871_p1;
wire  signed [5:0] mul_res_384_fu_2871_p2;
wire   [2:0] tmp_207_fu_2881_p4;
wire  signed [2:0] mul_res_385_fu_2903_p0;
wire  signed [5:0] sext_ln151_139_fu_2891_p1;
wire  signed [2:0] mul_res_385_fu_2903_p1;
wire  signed [5:0] mul_res_385_fu_2903_p2;
wire   [2:0] tmp_208_fu_2913_p4;
wire  signed [2:0] mul_res_386_fu_2935_p0;
wire  signed [5:0] sext_ln151_140_fu_2923_p1;
wire  signed [2:0] mul_res_386_fu_2935_p1;
wire  signed [5:0] mul_res_386_fu_2935_p2;
wire   [2:0] tmp_209_fu_2945_p4;
wire  signed [2:0] mul_res_387_fu_2967_p0;
wire  signed [5:0] sext_ln151_141_fu_2955_p1;
wire  signed [2:0] mul_res_387_fu_2967_p1;
wire  signed [5:0] mul_res_387_fu_2967_p2;
wire   [2:0] tmp_210_fu_2977_p4;
wire  signed [2:0] mul_res_388_fu_2999_p0;
wire  signed [5:0] sext_ln151_142_fu_2987_p1;
wire  signed [2:0] mul_res_388_fu_2999_p1;
wire  signed [5:0] mul_res_388_fu_2999_p2;
wire  signed [6:0] sext_ln151_246_fu_2941_p1;
wire  signed [6:0] sext_ln151_247_fu_2973_p1;
wire  signed [6:0] sext_ln151_242_fu_2813_p1;
wire  signed [6:0] sext_ln151_244_fu_2877_p1;
wire   [6:0] add_ln153_181_fu_3015_p2;
wire  signed [6:0] sext_ln151_245_fu_2909_p1;
wire  signed [6:0] sext_ln151_238_fu_2685_p1;
wire  signed [6:0] sext_ln151_237_fu_2653_p1;
wire   [6:0] add_ln153_184_fu_3027_p2;
wire  signed [6:0] sext_ln151_243_fu_2845_p1;
wire  signed [6:0] sext_ln151_239_fu_2717_p1;
wire  signed [6:0] sext_ln151_241_fu_2781_p1;
wire  signed [6:0] sext_ln151_240_fu_2749_p1;
wire  signed [6:0] sext_ln153_140_fu_3005_p1;
wire   [2:0] tmp_211_fu_3051_p4;
wire  signed [2:0] mul_res_389_fu_3073_p0;
wire  signed [5:0] sext_ln151_143_fu_3061_p1;
wire  signed [2:0] mul_res_389_fu_3073_p1;
wire  signed [5:0] mul_res_389_fu_3073_p2;
wire   [2:0] tmp_212_fu_3083_p4;
wire  signed [2:0] mul_res_390_fu_3105_p0;
wire  signed [5:0] sext_ln151_144_fu_3093_p1;
wire  signed [2:0] mul_res_390_fu_3105_p1;
wire  signed [5:0] mul_res_390_fu_3105_p2;
wire   [2:0] tmp_213_fu_3115_p4;
wire  signed [2:0] mul_res_391_fu_3137_p0;
wire  signed [5:0] sext_ln151_145_fu_3125_p1;
wire  signed [2:0] mul_res_391_fu_3137_p1;
wire  signed [5:0] mul_res_391_fu_3137_p2;
wire   [2:0] tmp_214_fu_3147_p4;
wire  signed [2:0] mul_res_392_fu_3169_p0;
wire  signed [5:0] sext_ln151_146_fu_3157_p1;
wire  signed [2:0] mul_res_392_fu_3169_p1;
wire  signed [5:0] mul_res_392_fu_3169_p2;
wire   [2:0] tmp_215_fu_3179_p4;
wire  signed [2:0] mul_res_393_fu_3201_p0;
wire  signed [5:0] sext_ln151_147_fu_3189_p1;
wire  signed [2:0] mul_res_393_fu_3201_p1;
wire  signed [5:0] mul_res_393_fu_3201_p2;
wire   [2:0] tmp_216_fu_3211_p4;
wire  signed [2:0] mul_res_394_fu_3233_p0;
wire  signed [5:0] sext_ln151_148_fu_3221_p1;
wire  signed [2:0] mul_res_394_fu_3233_p1;
wire  signed [5:0] mul_res_394_fu_3233_p2;
wire   [2:0] tmp_217_fu_3243_p4;
wire  signed [2:0] mul_res_395_fu_3265_p0;
wire  signed [5:0] sext_ln151_149_fu_3253_p1;
wire  signed [2:0] mul_res_395_fu_3265_p1;
wire  signed [5:0] mul_res_395_fu_3265_p2;
wire   [2:0] tmp_218_fu_3275_p4;
wire  signed [2:0] mul_res_396_fu_3297_p0;
wire  signed [5:0] sext_ln151_150_fu_3285_p1;
wire  signed [2:0] mul_res_396_fu_3297_p1;
wire  signed [5:0] mul_res_396_fu_3297_p2;
wire   [2:0] tmp_219_fu_3307_p4;
wire  signed [2:0] mul_res_397_fu_3329_p0;
wire  signed [5:0] sext_ln151_151_fu_3317_p1;
wire  signed [2:0] mul_res_397_fu_3329_p1;
wire  signed [5:0] mul_res_397_fu_3329_p2;
wire   [2:0] tmp_220_fu_3339_p4;
wire  signed [2:0] mul_res_398_fu_3361_p0;
wire  signed [5:0] sext_ln151_152_fu_3349_p1;
wire  signed [2:0] mul_res_398_fu_3361_p1;
wire  signed [5:0] mul_res_398_fu_3361_p2;
wire   [2:0] tmp_221_fu_3371_p4;
wire  signed [2:0] mul_res_399_fu_3393_p0;
wire  signed [5:0] sext_ln151_153_fu_3381_p1;
wire  signed [2:0] mul_res_399_fu_3393_p1;
wire  signed [5:0] mul_res_399_fu_3393_p2;
wire   [2:0] tmp_222_fu_3403_p4;
wire  signed [2:0] mul_res_400_fu_3425_p0;
wire  signed [5:0] sext_ln151_154_fu_3413_p1;
wire  signed [2:0] mul_res_400_fu_3425_p1;
wire  signed [5:0] mul_res_400_fu_3425_p2;
wire  signed [6:0] sext_ln151_257_fu_3367_p1;
wire  signed [6:0] sext_ln151_258_fu_3399_p1;
wire  signed [6:0] sext_ln151_253_fu_3239_p1;
wire  signed [6:0] sext_ln151_255_fu_3303_p1;
wire   [6:0] add_ln153_193_fu_3441_p2;
wire  signed [6:0] sext_ln151_256_fu_3335_p1;
wire  signed [6:0] sext_ln151_249_fu_3111_p1;
wire  signed [6:0] sext_ln151_248_fu_3079_p1;
wire   [6:0] add_ln153_196_fu_3453_p2;
wire  signed [6:0] sext_ln151_254_fu_3271_p1;
wire  signed [6:0] sext_ln151_250_fu_3143_p1;
wire  signed [6:0] sext_ln151_252_fu_3207_p1;
wire  signed [6:0] sext_ln151_251_fu_3175_p1;
wire  signed [6:0] sext_ln153_147_fu_3431_p1;
wire   [2:0] tmp_223_fu_3477_p4;
wire  signed [2:0] mul_res_401_fu_3499_p0;
wire  signed [5:0] sext_ln151_155_fu_3487_p1;
wire  signed [2:0] mul_res_401_fu_3499_p1;
wire  signed [5:0] mul_res_401_fu_3499_p2;
wire   [2:0] tmp_224_fu_3509_p4;
wire  signed [2:0] mul_res_402_fu_3531_p0;
wire  signed [5:0] sext_ln151_156_fu_3519_p1;
wire  signed [2:0] mul_res_402_fu_3531_p1;
wire  signed [5:0] mul_res_402_fu_3531_p2;
wire   [2:0] tmp_225_fu_3541_p4;
wire  signed [2:0] mul_res_403_fu_3563_p0;
wire  signed [5:0] sext_ln151_157_fu_3551_p1;
wire  signed [2:0] mul_res_403_fu_3563_p1;
wire  signed [5:0] mul_res_403_fu_3563_p2;
wire   [2:0] tmp_226_fu_3573_p4;
wire  signed [2:0] mul_res_404_fu_3595_p0;
wire  signed [5:0] sext_ln151_158_fu_3583_p1;
wire  signed [2:0] mul_res_404_fu_3595_p1;
wire  signed [5:0] mul_res_404_fu_3595_p2;
wire   [2:0] tmp_227_fu_3605_p4;
wire  signed [2:0] mul_res_405_fu_3627_p0;
wire  signed [5:0] sext_ln151_159_fu_3615_p1;
wire  signed [2:0] mul_res_405_fu_3627_p1;
wire  signed [5:0] mul_res_405_fu_3627_p2;
wire   [2:0] tmp_228_fu_3637_p4;
wire  signed [2:0] mul_res_406_fu_3659_p0;
wire  signed [5:0] sext_ln151_160_fu_3647_p1;
wire  signed [2:0] mul_res_406_fu_3659_p1;
wire  signed [5:0] mul_res_406_fu_3659_p2;
wire   [2:0] tmp_229_fu_3669_p4;
wire  signed [2:0] mul_res_407_fu_3691_p0;
wire  signed [5:0] sext_ln151_161_fu_3679_p1;
wire  signed [2:0] mul_res_407_fu_3691_p1;
wire  signed [5:0] mul_res_407_fu_3691_p2;
wire   [2:0] tmp_230_fu_3701_p4;
wire  signed [2:0] mul_res_408_fu_3723_p0;
wire  signed [5:0] sext_ln151_162_fu_3711_p1;
wire  signed [2:0] mul_res_408_fu_3723_p1;
wire  signed [5:0] mul_res_408_fu_3723_p2;
wire   [2:0] tmp_231_fu_3733_p4;
wire  signed [2:0] mul_res_409_fu_3755_p0;
wire  signed [5:0] sext_ln151_163_fu_3743_p1;
wire  signed [2:0] mul_res_409_fu_3755_p1;
wire  signed [5:0] mul_res_409_fu_3755_p2;
wire   [2:0] tmp_232_fu_3765_p4;
wire  signed [2:0] mul_res_410_fu_3787_p0;
wire  signed [5:0] sext_ln151_164_fu_3775_p1;
wire  signed [2:0] mul_res_410_fu_3787_p1;
wire  signed [5:0] mul_res_410_fu_3787_p2;
wire   [2:0] tmp_233_fu_3797_p4;
wire  signed [2:0] mul_res_411_fu_3819_p0;
wire  signed [5:0] sext_ln151_165_fu_3807_p1;
wire  signed [2:0] mul_res_411_fu_3819_p1;
wire  signed [5:0] mul_res_411_fu_3819_p2;
wire   [2:0] tmp_234_fu_3829_p4;
wire  signed [2:0] mul_res_412_fu_3851_p0;
wire  signed [5:0] sext_ln151_166_fu_3839_p1;
wire  signed [2:0] mul_res_412_fu_3851_p1;
wire  signed [5:0] mul_res_412_fu_3851_p2;
wire  signed [6:0] sext_ln151_268_fu_3793_p1;
wire  signed [6:0] sext_ln151_269_fu_3825_p1;
wire  signed [6:0] sext_ln151_264_fu_3665_p1;
wire  signed [6:0] sext_ln151_266_fu_3729_p1;
wire   [6:0] add_ln153_205_fu_3867_p2;
wire  signed [6:0] sext_ln151_267_fu_3761_p1;
wire  signed [6:0] sext_ln151_260_fu_3537_p1;
wire  signed [6:0] sext_ln151_259_fu_3505_p1;
wire   [6:0] add_ln153_208_fu_3879_p2;
wire  signed [6:0] sext_ln151_265_fu_3697_p1;
wire  signed [6:0] sext_ln151_261_fu_3569_p1;
wire  signed [6:0] sext_ln151_263_fu_3633_p1;
wire  signed [6:0] sext_ln151_262_fu_3601_p1;
wire  signed [6:0] sext_ln153_154_fu_3857_p1;
wire  signed [2:0] mul_res_413_fu_3914_p0;
wire  signed [2:0] mul_res_413_fu_3914_p1;
wire  signed [5:0] sext_ln151_167_fu_3903_p1;
wire  signed [5:0] mul_res_413_fu_3914_p2;
wire  signed [2:0] mul_res_414_fu_3935_p0;
wire  signed [2:0] mul_res_414_fu_3935_p1;
wire  signed [5:0] sext_ln151_168_fu_3924_p1;
wire  signed [5:0] mul_res_414_fu_3935_p2;
wire  signed [2:0] mul_res_415_fu_3956_p0;
wire  signed [2:0] mul_res_415_fu_3956_p1;
wire  signed [5:0] sext_ln151_169_fu_3945_p1;
wire  signed [5:0] mul_res_415_fu_3956_p2;
wire  signed [2:0] mul_res_416_fu_3977_p0;
wire  signed [2:0] mul_res_416_fu_3977_p1;
wire  signed [5:0] sext_ln151_170_fu_3966_p1;
wire  signed [5:0] mul_res_416_fu_3977_p2;
wire  signed [2:0] mul_res_417_fu_3998_p0;
wire  signed [2:0] mul_res_417_fu_3998_p1;
wire  signed [5:0] sext_ln151_171_fu_3987_p1;
wire  signed [5:0] mul_res_417_fu_3998_p2;
wire  signed [2:0] mul_res_418_fu_4019_p0;
wire  signed [2:0] mul_res_418_fu_4019_p1;
wire  signed [5:0] sext_ln151_172_fu_4008_p1;
wire  signed [5:0] mul_res_418_fu_4019_p2;
wire  signed [2:0] mul_res_419_fu_4040_p0;
wire  signed [2:0] mul_res_419_fu_4040_p1;
wire  signed [5:0] sext_ln151_173_fu_4029_p1;
wire  signed [5:0] mul_res_419_fu_4040_p2;
wire  signed [2:0] mul_res_420_fu_4061_p0;
wire  signed [2:0] mul_res_420_fu_4061_p1;
wire  signed [5:0] sext_ln151_174_fu_4050_p1;
wire  signed [5:0] mul_res_420_fu_4061_p2;
wire  signed [2:0] mul_res_421_fu_4082_p0;
wire  signed [2:0] mul_res_421_fu_4082_p1;
wire  signed [5:0] sext_ln151_175_fu_4071_p1;
wire  signed [5:0] mul_res_421_fu_4082_p2;
wire  signed [2:0] mul_res_422_fu_4103_p0;
wire  signed [2:0] mul_res_422_fu_4103_p1;
wire  signed [5:0] sext_ln151_176_fu_4092_p1;
wire  signed [5:0] mul_res_422_fu_4103_p2;
wire  signed [2:0] mul_res_423_fu_4124_p0;
wire  signed [2:0] mul_res_423_fu_4124_p1;
wire  signed [5:0] sext_ln151_177_fu_4113_p1;
wire  signed [5:0] mul_res_423_fu_4124_p2;
wire  signed [2:0] mul_res_424_fu_4145_p0;
wire  signed [2:0] mul_res_424_fu_4145_p1;
wire  signed [5:0] sext_ln151_178_fu_4134_p1;
wire  signed [5:0] mul_res_424_fu_4145_p2;
wire  signed [6:0] sext_ln151_279_fu_4109_p1;
wire  signed [6:0] sext_ln151_280_fu_4130_p1;
wire  signed [6:0] sext_ln151_275_fu_4025_p1;
wire  signed [6:0] sext_ln151_277_fu_4067_p1;
wire   [6:0] add_ln153_217_fu_4161_p2;
wire  signed [6:0] sext_ln151_278_fu_4088_p1;
wire  signed [6:0] sext_ln151_271_fu_3941_p1;
wire  signed [6:0] sext_ln151_270_fu_3920_p1;
wire   [6:0] add_ln153_220_fu_4173_p2;
wire  signed [6:0] sext_ln151_276_fu_4046_p1;
wire  signed [6:0] sext_ln151_272_fu_3962_p1;
wire  signed [6:0] sext_ln151_274_fu_4004_p1;
wire  signed [6:0] sext_ln151_273_fu_3983_p1;
wire  signed [6:0] sext_ln153_161_fu_4151_p1;
wire  signed [2:0] mul_res_425_fu_4205_p0;
wire  signed [2:0] mul_res_425_fu_4205_p1;
wire  signed [5:0] mul_res_425_fu_4205_p2;
wire  signed [2:0] mul_res_426_fu_4223_p0;
wire  signed [2:0] mul_res_426_fu_4223_p1;
wire  signed [5:0] mul_res_426_fu_4223_p2;
wire  signed [2:0] mul_res_427_fu_4241_p0;
wire  signed [2:0] mul_res_427_fu_4241_p1;
wire  signed [5:0] mul_res_427_fu_4241_p2;
wire  signed [2:0] mul_res_428_fu_4259_p0;
wire  signed [2:0] mul_res_428_fu_4259_p1;
wire  signed [5:0] mul_res_428_fu_4259_p2;
wire  signed [2:0] mul_res_429_fu_4277_p0;
wire  signed [2:0] mul_res_429_fu_4277_p1;
wire  signed [5:0] mul_res_429_fu_4277_p2;
wire  signed [2:0] mul_res_430_fu_4295_p0;
wire  signed [2:0] mul_res_430_fu_4295_p1;
wire  signed [5:0] mul_res_430_fu_4295_p2;
wire  signed [2:0] mul_res_431_fu_4313_p0;
wire  signed [2:0] mul_res_431_fu_4313_p1;
wire  signed [5:0] mul_res_431_fu_4313_p2;
wire  signed [2:0] mul_res_432_fu_4331_p0;
wire  signed [2:0] mul_res_432_fu_4331_p1;
wire  signed [5:0] mul_res_432_fu_4331_p2;
wire  signed [2:0] mul_res_433_fu_4349_p0;
wire  signed [2:0] mul_res_433_fu_4349_p1;
wire  signed [5:0] mul_res_433_fu_4349_p2;
wire  signed [2:0] mul_res_434_fu_4367_p0;
wire  signed [2:0] mul_res_434_fu_4367_p1;
wire  signed [5:0] mul_res_434_fu_4367_p2;
wire  signed [2:0] mul_res_435_fu_4385_p0;
wire  signed [2:0] mul_res_435_fu_4385_p1;
wire  signed [5:0] mul_res_435_fu_4385_p2;
wire  signed [2:0] mul_res_436_fu_4403_p0;
wire  signed [2:0] mul_res_436_fu_4403_p1;
wire  signed [5:0] mul_res_436_fu_4403_p2;
wire  signed [6:0] sext_ln151_290_fu_4373_p1;
wire  signed [6:0] sext_ln151_291_fu_4391_p1;
wire  signed [6:0] sext_ln151_286_fu_4301_p1;
wire  signed [6:0] sext_ln151_288_fu_4337_p1;
wire   [6:0] add_ln153_229_fu_4419_p2;
wire  signed [6:0] sext_ln151_289_fu_4355_p1;
wire  signed [6:0] sext_ln151_282_fu_4229_p1;
wire  signed [6:0] sext_ln151_281_fu_4211_p1;
wire   [6:0] add_ln153_232_fu_4431_p2;
wire  signed [6:0] sext_ln151_287_fu_4319_p1;
wire  signed [6:0] sext_ln151_283_fu_4247_p1;
wire  signed [6:0] sext_ln151_285_fu_4283_p1;
wire  signed [6:0] sext_ln151_284_fu_4265_p1;
wire  signed [6:0] sext_ln153_168_fu_4409_p1;
wire  signed [2:0] mul_res_437_fu_4463_p0;
wire  signed [2:0] mul_res_437_fu_4463_p1;
wire  signed [5:0] mul_res_437_fu_4463_p2;
wire  signed [2:0] mul_res_438_fu_4481_p0;
wire  signed [2:0] mul_res_438_fu_4481_p1;
wire  signed [5:0] mul_res_438_fu_4481_p2;
wire  signed [2:0] mul_res_439_fu_4499_p0;
wire  signed [2:0] mul_res_439_fu_4499_p1;
wire  signed [5:0] mul_res_439_fu_4499_p2;
wire  signed [2:0] mul_res_440_fu_4517_p0;
wire  signed [2:0] mul_res_440_fu_4517_p1;
wire  signed [5:0] mul_res_440_fu_4517_p2;
wire  signed [2:0] mul_res_441_fu_4535_p0;
wire  signed [2:0] mul_res_441_fu_4535_p1;
wire  signed [5:0] mul_res_441_fu_4535_p2;
wire  signed [2:0] mul_res_442_fu_4553_p0;
wire  signed [2:0] mul_res_442_fu_4553_p1;
wire  signed [5:0] mul_res_442_fu_4553_p2;
wire  signed [2:0] mul_res_443_fu_4571_p0;
wire  signed [2:0] mul_res_443_fu_4571_p1;
wire  signed [5:0] mul_res_443_fu_4571_p2;
wire  signed [2:0] mul_res_444_fu_4589_p0;
wire  signed [2:0] mul_res_444_fu_4589_p1;
wire  signed [5:0] mul_res_444_fu_4589_p2;
wire  signed [2:0] mul_res_445_fu_4607_p0;
wire  signed [2:0] mul_res_445_fu_4607_p1;
wire  signed [5:0] mul_res_445_fu_4607_p2;
wire  signed [2:0] mul_res_446_fu_4625_p0;
wire  signed [2:0] mul_res_446_fu_4625_p1;
wire  signed [5:0] mul_res_446_fu_4625_p2;
wire  signed [2:0] mul_res_447_fu_4643_p0;
wire  signed [2:0] mul_res_447_fu_4643_p1;
wire  signed [5:0] mul_res_447_fu_4643_p2;
wire  signed [2:0] mul_res_448_fu_4661_p0;
wire  signed [2:0] mul_res_448_fu_4661_p1;
wire  signed [5:0] mul_res_448_fu_4661_p2;
wire  signed [6:0] sext_ln151_301_fu_4631_p1;
wire  signed [6:0] sext_ln151_302_fu_4649_p1;
wire  signed [6:0] sext_ln151_297_fu_4559_p1;
wire  signed [6:0] sext_ln151_299_fu_4595_p1;
wire   [6:0] add_ln153_241_fu_4677_p2;
wire  signed [6:0] sext_ln151_300_fu_4613_p1;
wire  signed [6:0] sext_ln151_293_fu_4487_p1;
wire  signed [6:0] sext_ln151_292_fu_4469_p1;
wire   [6:0] add_ln153_244_fu_4689_p2;
wire  signed [6:0] sext_ln151_298_fu_4577_p1;
wire  signed [6:0] sext_ln151_294_fu_4505_p1;
wire  signed [6:0] sext_ln151_296_fu_4541_p1;
wire  signed [6:0] sext_ln151_295_fu_4523_p1;
wire  signed [6:0] sext_ln153_175_fu_4667_p1;
wire  signed [2:0] mul_res_449_fu_4721_p0;
wire  signed [2:0] mul_res_449_fu_4721_p1;
wire  signed [5:0] mul_res_449_fu_4721_p2;
wire  signed [2:0] mul_res_450_fu_4739_p0;
wire  signed [2:0] mul_res_450_fu_4739_p1;
wire  signed [5:0] mul_res_450_fu_4739_p2;
wire  signed [2:0] mul_res_451_fu_4757_p0;
wire  signed [2:0] mul_res_451_fu_4757_p1;
wire  signed [5:0] mul_res_451_fu_4757_p2;
wire  signed [2:0] mul_res_452_fu_4775_p0;
wire  signed [2:0] mul_res_452_fu_4775_p1;
wire  signed [5:0] mul_res_452_fu_4775_p2;
wire  signed [2:0] mul_res_453_fu_4793_p0;
wire  signed [2:0] mul_res_453_fu_4793_p1;
wire  signed [5:0] mul_res_453_fu_4793_p2;
wire  signed [2:0] mul_res_454_fu_4811_p0;
wire  signed [2:0] mul_res_454_fu_4811_p1;
wire  signed [5:0] mul_res_454_fu_4811_p2;
wire  signed [2:0] mul_res_455_fu_4829_p0;
wire  signed [2:0] mul_res_455_fu_4829_p1;
wire  signed [5:0] mul_res_455_fu_4829_p2;
wire  signed [2:0] mul_res_456_fu_4847_p0;
wire  signed [2:0] mul_res_456_fu_4847_p1;
wire  signed [5:0] mul_res_456_fu_4847_p2;
wire  signed [2:0] mul_res_457_fu_4865_p0;
wire  signed [2:0] mul_res_457_fu_4865_p1;
wire  signed [5:0] mul_res_457_fu_4865_p2;
wire  signed [2:0] mul_res_458_fu_4883_p0;
wire  signed [2:0] mul_res_458_fu_4883_p1;
wire  signed [5:0] mul_res_458_fu_4883_p2;
wire  signed [2:0] mul_res_459_fu_4901_p0;
wire  signed [2:0] mul_res_459_fu_4901_p1;
wire  signed [5:0] mul_res_459_fu_4901_p2;
wire  signed [2:0] mul_res_460_fu_4919_p0;
wire  signed [2:0] mul_res_460_fu_4919_p1;
wire  signed [5:0] mul_res_460_fu_4919_p2;
wire  signed [6:0] sext_ln151_312_fu_4889_p1;
wire  signed [6:0] sext_ln151_313_fu_4907_p1;
wire  signed [6:0] sext_ln151_308_fu_4817_p1;
wire  signed [6:0] sext_ln151_310_fu_4853_p1;
wire   [6:0] add_ln153_253_fu_4935_p2;
wire  signed [6:0] sext_ln151_311_fu_4871_p1;
wire  signed [6:0] sext_ln151_304_fu_4745_p1;
wire  signed [6:0] sext_ln151_303_fu_4727_p1;
wire   [6:0] add_ln153_256_fu_4947_p2;
wire  signed [6:0] sext_ln151_309_fu_4835_p1;
wire  signed [6:0] sext_ln151_305_fu_4763_p1;
wire  signed [6:0] sext_ln151_307_fu_4799_p1;
wire  signed [6:0] sext_ln151_306_fu_4781_p1;
wire  signed [6:0] sext_ln153_182_fu_4925_p1;
wire  signed [2:0] mul_res_461_fu_4979_p0;
wire  signed [2:0] mul_res_461_fu_4979_p1;
wire  signed [5:0] mul_res_461_fu_4979_p2;
wire  signed [2:0] mul_res_462_fu_4997_p0;
wire  signed [2:0] mul_res_462_fu_4997_p1;
wire  signed [5:0] mul_res_462_fu_4997_p2;
wire  signed [2:0] mul_res_463_fu_5015_p0;
wire  signed [2:0] mul_res_463_fu_5015_p1;
wire  signed [5:0] mul_res_463_fu_5015_p2;
wire  signed [2:0] mul_res_464_fu_5033_p0;
wire  signed [2:0] mul_res_464_fu_5033_p1;
wire  signed [5:0] mul_res_464_fu_5033_p2;
wire  signed [2:0] mul_res_465_fu_5051_p0;
wire  signed [2:0] mul_res_465_fu_5051_p1;
wire  signed [5:0] mul_res_465_fu_5051_p2;
wire  signed [2:0] mul_res_466_fu_5069_p0;
wire  signed [2:0] mul_res_466_fu_5069_p1;
wire  signed [2:0] mul_res_467_fu_5083_p0;
wire  signed [2:0] mul_res_467_fu_5083_p1;
wire  signed [5:0] mul_res_467_fu_5083_p2;
wire  signed [2:0] mul_res_468_fu_5101_p0;
wire  signed [2:0] mul_res_468_fu_5101_p1;
wire  signed [2:0] mul_res_469_fu_5115_p0;
wire  signed [2:0] mul_res_469_fu_5115_p1;
wire  signed [2:0] mul_res_470_fu_5129_p0;
wire  signed [2:0] mul_res_470_fu_5129_p1;
wire  signed [5:0] mul_res_470_fu_5129_p2;
wire  signed [2:0] mul_res_471_fu_5147_p0;
wire  signed [2:0] mul_res_471_fu_5147_p1;
wire  signed [5:0] mul_res_471_fu_5147_p2;
wire  signed [2:0] mul_res_472_fu_5165_p0;
wire  signed [2:0] mul_res_472_fu_5165_p1;
wire  signed [5:0] mul_res_472_fu_5165_p2;
wire  signed [6:0] sext_ln151_323_fu_5135_p1;
wire  signed [6:0] sext_ln151_324_fu_5153_p1;
wire  signed [6:0] sext_ln151_315_fu_5003_p1;
wire  signed [6:0] sext_ln151_314_fu_4985_p1;
wire   [6:0] add_ln153_268_fu_5181_p2;
wire  signed [6:0] sext_ln151_320_fu_5089_p1;
wire  signed [6:0] sext_ln151_316_fu_5021_p1;
wire  signed [6:0] sext_ln151_318_fu_5057_p1;
wire  signed [6:0] sext_ln151_317_fu_5039_p1;
wire  signed [6:0] sext_ln153_189_fu_5171_p1;
wire  signed [2:0] mul_res_473_fu_5213_p0;
wire  signed [2:0] mul_res_473_fu_5213_p1;
wire  signed [5:0] mul_res_473_fu_5213_p2;
wire  signed [2:0] mul_res_474_fu_5231_p0;
wire  signed [2:0] mul_res_474_fu_5231_p1;
wire  signed [5:0] mul_res_474_fu_5231_p2;
wire  signed [2:0] mul_res_475_fu_5249_p0;
wire  signed [2:0] mul_res_475_fu_5249_p1;
wire  signed [5:0] mul_res_475_fu_5249_p2;
wire  signed [2:0] mul_res_476_fu_5267_p0;
wire  signed [2:0] mul_res_476_fu_5267_p1;
wire  signed [5:0] mul_res_476_fu_5267_p2;
wire  signed [2:0] mul_res_477_fu_5285_p0;
wire  signed [2:0] mul_res_477_fu_5285_p1;
wire  signed [5:0] mul_res_477_fu_5285_p2;
wire  signed [2:0] mul_res_478_fu_5303_p0;
wire  signed [2:0] mul_res_478_fu_5303_p1;
wire  signed [2:0] mul_res_479_fu_5317_p0;
wire  signed [2:0] mul_res_479_fu_5317_p1;
wire  signed [5:0] mul_res_479_fu_5317_p2;
wire  signed [2:0] mul_res_480_fu_5335_p0;
wire  signed [2:0] mul_res_480_fu_5335_p1;
wire  signed [2:0] mul_res_481_fu_5349_p0;
wire  signed [2:0] mul_res_481_fu_5349_p1;
wire  signed [2:0] mul_res_482_fu_5363_p0;
wire  signed [2:0] mul_res_482_fu_5363_p1;
wire  signed [5:0] mul_res_482_fu_5363_p2;
wire  signed [2:0] mul_res_483_fu_5381_p0;
wire  signed [2:0] mul_res_483_fu_5381_p1;
wire  signed [5:0] mul_res_483_fu_5381_p2;
wire  signed [2:0] mul_res_484_fu_5399_p0;
wire  signed [2:0] mul_res_484_fu_5399_p1;
wire  signed [5:0] mul_res_484_fu_5399_p2;
wire  signed [6:0] sext_ln151_334_fu_5369_p1;
wire  signed [6:0] sext_ln151_335_fu_5387_p1;
wire  signed [6:0] sext_ln151_326_fu_5237_p1;
wire  signed [6:0] sext_ln151_325_fu_5219_p1;
wire   [6:0] add_ln153_280_fu_5415_p2;
wire  signed [6:0] sext_ln151_331_fu_5323_p1;
wire  signed [6:0] sext_ln151_327_fu_5255_p1;
wire  signed [6:0] sext_ln151_329_fu_5291_p1;
wire  signed [6:0] sext_ln151_328_fu_5273_p1;
wire  signed [6:0] sext_ln153_196_fu_5405_p1;
wire  signed [11:0] sext_ln131_fu_5511_p1;
wire  signed [11:0] sext_ln153_121_fu_5591_p1;
wire  signed [11:0] sext_ln153_120_fu_5588_p1;
wire  signed [7:0] sext_ln153_124_fu_5606_p1;
wire  signed [7:0] sext_ln153_123_fu_5603_p1;
wire   [7:0] add_ln153_152_fu_5609_p2;
wire  signed [7:0] sext_ln153_122_fu_5600_p1;
wire   [7:0] add_ln153_153_fu_5615_p2;
wire  signed [11:0] sext_ln153_125_fu_5621_p1;
wire   [11:0] add_ln153_144_fu_5594_p2;
wire   [11:0] add_ln153_147_fu_5625_p2;
wire   [11:0] select_ln126_34_fu_5582_p3;
wire  signed [11:0] sext_ln153_128_fu_5640_p1;
wire  signed [11:0] sext_ln153_127_fu_5637_p1;
wire  signed [7:0] sext_ln153_131_fu_5655_p1;
wire  signed [7:0] sext_ln153_130_fu_5652_p1;
wire   [7:0] add_ln153_164_fu_5658_p2;
wire  signed [7:0] sext_ln153_129_fu_5649_p1;
wire   [7:0] add_ln153_165_fu_5664_p2;
wire  signed [11:0] sext_ln153_132_fu_5670_p1;
wire   [11:0] add_ln153_156_fu_5643_p2;
wire   [11:0] add_ln153_159_fu_5674_p2;
wire   [11:0] select_ln126_33_fu_5576_p3;
wire  signed [11:0] sext_ln153_135_fu_5689_p1;
wire  signed [11:0] sext_ln153_134_fu_5686_p1;
wire  signed [7:0] sext_ln153_138_fu_5704_p1;
wire  signed [7:0] sext_ln153_137_fu_5701_p1;
wire   [7:0] add_ln153_176_fu_5707_p2;
wire  signed [7:0] sext_ln153_136_fu_5698_p1;
wire   [7:0] add_ln153_177_fu_5713_p2;
wire  signed [11:0] sext_ln153_139_fu_5719_p1;
wire   [11:0] add_ln153_168_fu_5692_p2;
wire   [11:0] add_ln153_171_fu_5723_p2;
wire   [11:0] select_ln126_32_fu_5570_p3;
wire  signed [11:0] sext_ln153_142_fu_5738_p1;
wire  signed [11:0] sext_ln153_141_fu_5735_p1;
wire  signed [7:0] sext_ln153_145_fu_5753_p1;
wire  signed [7:0] sext_ln153_144_fu_5750_p1;
wire   [7:0] add_ln153_188_fu_5756_p2;
wire  signed [7:0] sext_ln153_143_fu_5747_p1;
wire   [7:0] add_ln153_189_fu_5762_p2;
wire  signed [11:0] sext_ln153_146_fu_5768_p1;
wire   [11:0] add_ln153_180_fu_5741_p2;
wire   [11:0] add_ln153_183_fu_5772_p2;
wire   [11:0] select_ln126_31_fu_5564_p3;
wire  signed [11:0] sext_ln153_149_fu_5787_p1;
wire  signed [11:0] sext_ln153_148_fu_5784_p1;
wire  signed [7:0] sext_ln153_152_fu_5802_p1;
wire  signed [7:0] sext_ln153_151_fu_5799_p1;
wire   [7:0] add_ln153_200_fu_5805_p2;
wire  signed [7:0] sext_ln153_150_fu_5796_p1;
wire   [7:0] add_ln153_201_fu_5811_p2;
wire  signed [11:0] sext_ln153_153_fu_5817_p1;
wire   [11:0] add_ln153_192_fu_5790_p2;
wire   [11:0] add_ln153_195_fu_5821_p2;
wire   [11:0] select_ln126_30_fu_5558_p3;
wire  signed [11:0] sext_ln153_156_fu_5836_p1;
wire  signed [11:0] sext_ln153_155_fu_5833_p1;
wire  signed [7:0] sext_ln153_159_fu_5851_p1;
wire  signed [7:0] sext_ln153_158_fu_5848_p1;
wire   [7:0] add_ln153_212_fu_5854_p2;
wire  signed [7:0] sext_ln153_157_fu_5845_p1;
wire   [7:0] add_ln153_213_fu_5860_p2;
wire  signed [11:0] sext_ln153_160_fu_5866_p1;
wire   [11:0] add_ln153_204_fu_5839_p2;
wire   [11:0] add_ln153_207_fu_5870_p2;
wire   [11:0] select_ln126_29_fu_5551_p3;
wire  signed [11:0] sext_ln153_163_fu_5885_p1;
wire  signed [11:0] sext_ln153_162_fu_5882_p1;
wire  signed [7:0] sext_ln153_166_fu_5900_p1;
wire  signed [7:0] sext_ln153_165_fu_5897_p1;
wire   [7:0] add_ln153_224_fu_5903_p2;
wire  signed [7:0] sext_ln153_164_fu_5894_p1;
wire   [7:0] add_ln153_225_fu_5909_p2;
wire  signed [11:0] sext_ln153_167_fu_5915_p1;
wire   [11:0] add_ln153_216_fu_5888_p2;
wire   [11:0] add_ln153_219_fu_5919_p2;
wire   [11:0] select_ln126_28_fu_5545_p3;
wire  signed [11:0] sext_ln153_170_fu_5934_p1;
wire  signed [11:0] sext_ln153_169_fu_5931_p1;
wire  signed [7:0] sext_ln153_173_fu_5949_p1;
wire  signed [7:0] sext_ln153_172_fu_5946_p1;
wire   [7:0] add_ln153_236_fu_5952_p2;
wire  signed [7:0] sext_ln153_171_fu_5943_p1;
wire   [7:0] add_ln153_237_fu_5958_p2;
wire  signed [11:0] sext_ln153_174_fu_5964_p1;
wire   [11:0] add_ln153_228_fu_5937_p2;
wire   [11:0] add_ln153_231_fu_5968_p2;
wire   [11:0] select_ln126_27_fu_5539_p3;
wire  signed [11:0] sext_ln153_177_fu_5983_p1;
wire  signed [11:0] sext_ln153_176_fu_5980_p1;
wire  signed [7:0] sext_ln153_180_fu_5998_p1;
wire  signed [7:0] sext_ln153_179_fu_5995_p1;
wire   [7:0] add_ln153_248_fu_6001_p2;
wire  signed [7:0] sext_ln153_178_fu_5992_p1;
wire   [7:0] add_ln153_249_fu_6007_p2;
wire  signed [11:0] sext_ln153_181_fu_6013_p1;
wire   [11:0] add_ln153_240_fu_5986_p2;
wire   [11:0] add_ln153_243_fu_6017_p2;
wire   [11:0] select_ln126_26_fu_5533_p3;
wire  signed [11:0] sext_ln153_184_fu_6032_p1;
wire  signed [11:0] sext_ln153_183_fu_6029_p1;
wire  signed [7:0] sext_ln153_187_fu_6047_p1;
wire  signed [7:0] sext_ln153_186_fu_6044_p1;
wire   [7:0] add_ln153_260_fu_6050_p2;
wire  signed [7:0] sext_ln153_185_fu_6041_p1;
wire   [7:0] add_ln153_261_fu_6056_p2;
wire  signed [11:0] sext_ln153_188_fu_6062_p1;
wire   [11:0] add_ln153_252_fu_6035_p2;
wire   [11:0] add_ln153_255_fu_6066_p2;
wire   [11:0] select_ln126_25_fu_5527_p3;
wire  signed [11:0] sext_ln153_190_fu_6087_p1;
wire   [11:0] select_ln126_24_fu_5521_p3;
wire  signed [6:0] sext_ln151_319_fu_6078_p1;
wire  signed [6:0] sext_ln151_321_fu_6081_p1;
wire   [6:0] add_ln153_265_fu_6096_p2;
wire  signed [6:0] sext_ln151_322_fu_6084_p1;
wire   [6:0] add_ln153_266_fu_6102_p2;
wire  signed [11:0] sext_ln153_191_fu_6108_p1;
wire   [11:0] add_ln153_264_fu_6090_p2;
wire  signed [7:0] sext_ln153_194_fu_6124_p1;
wire  signed [7:0] sext_ln153_193_fu_6121_p1;
wire   [7:0] add_ln153_272_fu_6127_p2;
wire  signed [7:0] sext_ln153_192_fu_6118_p1;
wire   [7:0] add_ln153_273_fu_6133_p2;
wire  signed [11:0] sext_ln153_195_fu_6139_p1;
wire   [11:0] add_ln153_267_fu_6112_p2;
wire  signed [11:0] sext_ln153_197_fu_6158_p1;
wire   [11:0] select_ln126_fu_5514_p3;
wire  signed [6:0] sext_ln151_330_fu_6149_p1;
wire  signed [6:0] sext_ln151_332_fu_6152_p1;
wire   [6:0] add_ln153_277_fu_6167_p2;
wire  signed [6:0] sext_ln151_333_fu_6155_p1;
wire   [6:0] add_ln153_278_fu_6173_p2;
wire  signed [11:0] sext_ln153_198_fu_6179_p1;
wire   [11:0] add_ln153_276_fu_6161_p2;
wire  signed [7:0] sext_ln153_201_fu_6195_p1;
wire  signed [7:0] sext_ln153_200_fu_6192_p1;
wire   [7:0] add_ln153_284_fu_6198_p2;
wire  signed [7:0] sext_ln153_199_fu_6189_p1;
wire   [7:0] add_ln153_285_fu_6204_p2;
wire  signed [11:0] sext_ln153_202_fu_6210_p1;
wire   [11:0] add_ln153_279_fu_6183_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_442;
reg    ap_condition_503;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_668 = 5'd0;
//#0 p_0_0_0364_fu_672 = 12'd0;
//#0 p_0_0_0_112366_fu_676 = 12'd0;
//#0 p_0_0_0_2368_fu_680 = 12'd0;
//#0 p_0_0_0_3370_fu_684 = 12'd0;
//#0 p_0_0_0_4372_fu_688 = 12'd0;
//#0 p_0_0_0_5374_fu_692 = 12'd0;
//#0 p_0_0_0376_fu_696 = 12'd0;
//#0 p_0_0_0_112378_fu_700 = 12'd0;
//#0 p_0_0_0_2380_fu_704 = 12'd0;
//#0 p_0_0_0_3382_fu_708 = 12'd0;
//#0 p_0_0_0_4384_fu_712 = 12'd0;
//#0 p_0_0_0_5386_fu_716 = 12'd0;
//#0 cot_fu_720 = 6'd0;
//#0 indvar_flatten_fu_724 = 11'd0;
//#0 indvar_flatten35_fu_728 = 16'd0;
end

ATTN11_matmul_step2_mac_3_attn_inst_matmul_gen_o_bias_arr_663_ROM_AUTO_1R #(
    .DataWidth( 65 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_matmul_gen_o_bias_arr_663_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_o_bias_arr_663_address0),
    .ce0(attn_inst_matmul_gen_o_bias_arr_663_ce0),
    .q0(attn_inst_matmul_gen_o_bias_arr_663_q0)
);

ATTN11_matmul_step2_mac_3_attn_inst_matmul_gen_o_weight_arr_662_ROM_AUTO_1R #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_o_weight_arr_662_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_o_weight_arr_662_address0),
    .ce0(attn_inst_matmul_gen_o_weight_arr_662_ce0),
    .q0(attn_inst_matmul_gen_o_weight_arr_662_q0)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1140(
    .din0(mul_res_fu_1336_p0),
    .din1(mul_res_fu_1336_p1),
    .dout(mul_res_fu_1336_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1141(
    .din0(mul_res_342_fu_1371_p0),
    .din1(mul_res_342_fu_1371_p1),
    .dout(mul_res_342_fu_1371_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1142(
    .din0(mul_res_343_fu_1406_p0),
    .din1(mul_res_343_fu_1406_p1),
    .dout(mul_res_343_fu_1406_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1143(
    .din0(mul_res_344_fu_1441_p0),
    .din1(mul_res_344_fu_1441_p1),
    .dout(mul_res_344_fu_1441_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1144(
    .din0(mul_res_345_fu_1476_p0),
    .din1(mul_res_345_fu_1476_p1),
    .dout(mul_res_345_fu_1476_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1145(
    .din0(mul_res_346_fu_1511_p0),
    .din1(mul_res_346_fu_1511_p1),
    .dout(mul_res_346_fu_1511_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1146(
    .din0(mul_res_347_fu_1546_p0),
    .din1(mul_res_347_fu_1546_p1),
    .dout(mul_res_347_fu_1546_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1147(
    .din0(mul_res_348_fu_1581_p0),
    .din1(mul_res_348_fu_1581_p1),
    .dout(mul_res_348_fu_1581_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1148(
    .din0(mul_res_349_fu_1616_p0),
    .din1(mul_res_349_fu_1616_p1),
    .dout(mul_res_349_fu_1616_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1149(
    .din0(mul_res_350_fu_1651_p0),
    .din1(mul_res_350_fu_1651_p1),
    .dout(mul_res_350_fu_1651_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1150(
    .din0(mul_res_351_fu_1686_p0),
    .din1(mul_res_351_fu_1686_p1),
    .dout(mul_res_351_fu_1686_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1151(
    .din0(mul_res_352_fu_1721_p0),
    .din1(mul_res_352_fu_1721_p1),
    .dout(mul_res_352_fu_1721_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1152(
    .din0(mul_res_353_fu_1795_p0),
    .din1(mul_res_353_fu_1795_p1),
    .dout(mul_res_353_fu_1795_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1153(
    .din0(mul_res_354_fu_1827_p0),
    .din1(mul_res_354_fu_1827_p1),
    .dout(mul_res_354_fu_1827_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1154(
    .din0(mul_res_355_fu_1859_p0),
    .din1(mul_res_355_fu_1859_p1),
    .dout(mul_res_355_fu_1859_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1155(
    .din0(mul_res_356_fu_1891_p0),
    .din1(mul_res_356_fu_1891_p1),
    .dout(mul_res_356_fu_1891_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1156(
    .din0(mul_res_357_fu_1923_p0),
    .din1(mul_res_357_fu_1923_p1),
    .dout(mul_res_357_fu_1923_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1157(
    .din0(mul_res_358_fu_1955_p0),
    .din1(mul_res_358_fu_1955_p1),
    .dout(mul_res_358_fu_1955_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1158(
    .din0(mul_res_359_fu_1987_p0),
    .din1(mul_res_359_fu_1987_p1),
    .dout(mul_res_359_fu_1987_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1159(
    .din0(mul_res_360_fu_2019_p0),
    .din1(mul_res_360_fu_2019_p1),
    .dout(mul_res_360_fu_2019_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1160(
    .din0(mul_res_361_fu_2051_p0),
    .din1(mul_res_361_fu_2051_p1),
    .dout(mul_res_361_fu_2051_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1161(
    .din0(mul_res_362_fu_2083_p0),
    .din1(mul_res_362_fu_2083_p1),
    .dout(mul_res_362_fu_2083_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1162(
    .din0(mul_res_363_fu_2115_p0),
    .din1(mul_res_363_fu_2115_p1),
    .dout(mul_res_363_fu_2115_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1163(
    .din0(mul_res_364_fu_2147_p0),
    .din1(mul_res_364_fu_2147_p1),
    .dout(mul_res_364_fu_2147_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1164(
    .din0(mul_res_365_fu_2221_p0),
    .din1(mul_res_365_fu_2221_p1),
    .dout(mul_res_365_fu_2221_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1165(
    .din0(mul_res_366_fu_2253_p0),
    .din1(mul_res_366_fu_2253_p1),
    .dout(mul_res_366_fu_2253_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1166(
    .din0(mul_res_367_fu_2285_p0),
    .din1(mul_res_367_fu_2285_p1),
    .dout(mul_res_367_fu_2285_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1167(
    .din0(mul_res_368_fu_2317_p0),
    .din1(mul_res_368_fu_2317_p1),
    .dout(mul_res_368_fu_2317_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1168(
    .din0(mul_res_369_fu_2349_p0),
    .din1(mul_res_369_fu_2349_p1),
    .dout(mul_res_369_fu_2349_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1169(
    .din0(mul_res_370_fu_2381_p0),
    .din1(mul_res_370_fu_2381_p1),
    .dout(mul_res_370_fu_2381_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1170(
    .din0(mul_res_371_fu_2413_p0),
    .din1(mul_res_371_fu_2413_p1),
    .dout(mul_res_371_fu_2413_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1171(
    .din0(mul_res_372_fu_2445_p0),
    .din1(mul_res_372_fu_2445_p1),
    .dout(mul_res_372_fu_2445_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1172(
    .din0(mul_res_373_fu_2477_p0),
    .din1(mul_res_373_fu_2477_p1),
    .dout(mul_res_373_fu_2477_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1173(
    .din0(mul_res_374_fu_2509_p0),
    .din1(mul_res_374_fu_2509_p1),
    .dout(mul_res_374_fu_2509_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1174(
    .din0(mul_res_375_fu_2541_p0),
    .din1(mul_res_375_fu_2541_p1),
    .dout(mul_res_375_fu_2541_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1175(
    .din0(mul_res_376_fu_2573_p0),
    .din1(mul_res_376_fu_2573_p1),
    .dout(mul_res_376_fu_2573_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1176(
    .din0(mul_res_377_fu_2647_p0),
    .din1(mul_res_377_fu_2647_p1),
    .dout(mul_res_377_fu_2647_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1177(
    .din0(mul_res_378_fu_2679_p0),
    .din1(mul_res_378_fu_2679_p1),
    .dout(mul_res_378_fu_2679_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1178(
    .din0(mul_res_379_fu_2711_p0),
    .din1(mul_res_379_fu_2711_p1),
    .dout(mul_res_379_fu_2711_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1179(
    .din0(mul_res_380_fu_2743_p0),
    .din1(mul_res_380_fu_2743_p1),
    .dout(mul_res_380_fu_2743_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1180(
    .din0(mul_res_381_fu_2775_p0),
    .din1(mul_res_381_fu_2775_p1),
    .dout(mul_res_381_fu_2775_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1181(
    .din0(mul_res_382_fu_2807_p0),
    .din1(mul_res_382_fu_2807_p1),
    .dout(mul_res_382_fu_2807_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1182(
    .din0(mul_res_383_fu_2839_p0),
    .din1(mul_res_383_fu_2839_p1),
    .dout(mul_res_383_fu_2839_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1183(
    .din0(mul_res_384_fu_2871_p0),
    .din1(mul_res_384_fu_2871_p1),
    .dout(mul_res_384_fu_2871_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1184(
    .din0(mul_res_385_fu_2903_p0),
    .din1(mul_res_385_fu_2903_p1),
    .dout(mul_res_385_fu_2903_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1185(
    .din0(mul_res_386_fu_2935_p0),
    .din1(mul_res_386_fu_2935_p1),
    .dout(mul_res_386_fu_2935_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1186(
    .din0(mul_res_387_fu_2967_p0),
    .din1(mul_res_387_fu_2967_p1),
    .dout(mul_res_387_fu_2967_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1187(
    .din0(mul_res_388_fu_2999_p0),
    .din1(mul_res_388_fu_2999_p1),
    .dout(mul_res_388_fu_2999_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1188(
    .din0(mul_res_389_fu_3073_p0),
    .din1(mul_res_389_fu_3073_p1),
    .dout(mul_res_389_fu_3073_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1189(
    .din0(mul_res_390_fu_3105_p0),
    .din1(mul_res_390_fu_3105_p1),
    .dout(mul_res_390_fu_3105_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1190(
    .din0(mul_res_391_fu_3137_p0),
    .din1(mul_res_391_fu_3137_p1),
    .dout(mul_res_391_fu_3137_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1191(
    .din0(mul_res_392_fu_3169_p0),
    .din1(mul_res_392_fu_3169_p1),
    .dout(mul_res_392_fu_3169_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1192(
    .din0(mul_res_393_fu_3201_p0),
    .din1(mul_res_393_fu_3201_p1),
    .dout(mul_res_393_fu_3201_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1193(
    .din0(mul_res_394_fu_3233_p0),
    .din1(mul_res_394_fu_3233_p1),
    .dout(mul_res_394_fu_3233_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1194(
    .din0(mul_res_395_fu_3265_p0),
    .din1(mul_res_395_fu_3265_p1),
    .dout(mul_res_395_fu_3265_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1195(
    .din0(mul_res_396_fu_3297_p0),
    .din1(mul_res_396_fu_3297_p1),
    .dout(mul_res_396_fu_3297_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1196(
    .din0(mul_res_397_fu_3329_p0),
    .din1(mul_res_397_fu_3329_p1),
    .dout(mul_res_397_fu_3329_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1197(
    .din0(mul_res_398_fu_3361_p0),
    .din1(mul_res_398_fu_3361_p1),
    .dout(mul_res_398_fu_3361_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1198(
    .din0(mul_res_399_fu_3393_p0),
    .din1(mul_res_399_fu_3393_p1),
    .dout(mul_res_399_fu_3393_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1199(
    .din0(mul_res_400_fu_3425_p0),
    .din1(mul_res_400_fu_3425_p1),
    .dout(mul_res_400_fu_3425_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1200(
    .din0(mul_res_401_fu_3499_p0),
    .din1(mul_res_401_fu_3499_p1),
    .dout(mul_res_401_fu_3499_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1201(
    .din0(mul_res_402_fu_3531_p0),
    .din1(mul_res_402_fu_3531_p1),
    .dout(mul_res_402_fu_3531_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1202(
    .din0(mul_res_403_fu_3563_p0),
    .din1(mul_res_403_fu_3563_p1),
    .dout(mul_res_403_fu_3563_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1203(
    .din0(mul_res_404_fu_3595_p0),
    .din1(mul_res_404_fu_3595_p1),
    .dout(mul_res_404_fu_3595_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1204(
    .din0(mul_res_405_fu_3627_p0),
    .din1(mul_res_405_fu_3627_p1),
    .dout(mul_res_405_fu_3627_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1205(
    .din0(mul_res_406_fu_3659_p0),
    .din1(mul_res_406_fu_3659_p1),
    .dout(mul_res_406_fu_3659_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1206(
    .din0(mul_res_407_fu_3691_p0),
    .din1(mul_res_407_fu_3691_p1),
    .dout(mul_res_407_fu_3691_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1207(
    .din0(mul_res_408_fu_3723_p0),
    .din1(mul_res_408_fu_3723_p1),
    .dout(mul_res_408_fu_3723_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1208(
    .din0(mul_res_409_fu_3755_p0),
    .din1(mul_res_409_fu_3755_p1),
    .dout(mul_res_409_fu_3755_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1209(
    .din0(mul_res_410_fu_3787_p0),
    .din1(mul_res_410_fu_3787_p1),
    .dout(mul_res_410_fu_3787_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1210(
    .din0(mul_res_411_fu_3819_p0),
    .din1(mul_res_411_fu_3819_p1),
    .dout(mul_res_411_fu_3819_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1211(
    .din0(mul_res_412_fu_3851_p0),
    .din1(mul_res_412_fu_3851_p1),
    .dout(mul_res_412_fu_3851_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1212(
    .din0(mul_res_413_fu_3914_p0),
    .din1(mul_res_413_fu_3914_p1),
    .dout(mul_res_413_fu_3914_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1213(
    .din0(mul_res_414_fu_3935_p0),
    .din1(mul_res_414_fu_3935_p1),
    .dout(mul_res_414_fu_3935_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1214(
    .din0(mul_res_415_fu_3956_p0),
    .din1(mul_res_415_fu_3956_p1),
    .dout(mul_res_415_fu_3956_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1215(
    .din0(mul_res_416_fu_3977_p0),
    .din1(mul_res_416_fu_3977_p1),
    .dout(mul_res_416_fu_3977_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1216(
    .din0(mul_res_417_fu_3998_p0),
    .din1(mul_res_417_fu_3998_p1),
    .dout(mul_res_417_fu_3998_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1217(
    .din0(mul_res_418_fu_4019_p0),
    .din1(mul_res_418_fu_4019_p1),
    .dout(mul_res_418_fu_4019_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1218(
    .din0(mul_res_419_fu_4040_p0),
    .din1(mul_res_419_fu_4040_p1),
    .dout(mul_res_419_fu_4040_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1219(
    .din0(mul_res_420_fu_4061_p0),
    .din1(mul_res_420_fu_4061_p1),
    .dout(mul_res_420_fu_4061_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1220(
    .din0(mul_res_421_fu_4082_p0),
    .din1(mul_res_421_fu_4082_p1),
    .dout(mul_res_421_fu_4082_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1221(
    .din0(mul_res_422_fu_4103_p0),
    .din1(mul_res_422_fu_4103_p1),
    .dout(mul_res_422_fu_4103_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1222(
    .din0(mul_res_423_fu_4124_p0),
    .din1(mul_res_423_fu_4124_p1),
    .dout(mul_res_423_fu_4124_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1223(
    .din0(mul_res_424_fu_4145_p0),
    .din1(mul_res_424_fu_4145_p1),
    .dout(mul_res_424_fu_4145_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1224(
    .din0(mul_res_425_fu_4205_p0),
    .din1(mul_res_425_fu_4205_p1),
    .dout(mul_res_425_fu_4205_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1225(
    .din0(mul_res_426_fu_4223_p0),
    .din1(mul_res_426_fu_4223_p1),
    .dout(mul_res_426_fu_4223_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1226(
    .din0(mul_res_427_fu_4241_p0),
    .din1(mul_res_427_fu_4241_p1),
    .dout(mul_res_427_fu_4241_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1227(
    .din0(mul_res_428_fu_4259_p0),
    .din1(mul_res_428_fu_4259_p1),
    .dout(mul_res_428_fu_4259_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1228(
    .din0(mul_res_429_fu_4277_p0),
    .din1(mul_res_429_fu_4277_p1),
    .dout(mul_res_429_fu_4277_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1229(
    .din0(mul_res_430_fu_4295_p0),
    .din1(mul_res_430_fu_4295_p1),
    .dout(mul_res_430_fu_4295_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1230(
    .din0(mul_res_431_fu_4313_p0),
    .din1(mul_res_431_fu_4313_p1),
    .dout(mul_res_431_fu_4313_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1231(
    .din0(mul_res_432_fu_4331_p0),
    .din1(mul_res_432_fu_4331_p1),
    .dout(mul_res_432_fu_4331_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1232(
    .din0(mul_res_433_fu_4349_p0),
    .din1(mul_res_433_fu_4349_p1),
    .dout(mul_res_433_fu_4349_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1233(
    .din0(mul_res_434_fu_4367_p0),
    .din1(mul_res_434_fu_4367_p1),
    .dout(mul_res_434_fu_4367_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1234(
    .din0(mul_res_435_fu_4385_p0),
    .din1(mul_res_435_fu_4385_p1),
    .dout(mul_res_435_fu_4385_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1235(
    .din0(mul_res_436_fu_4403_p0),
    .din1(mul_res_436_fu_4403_p1),
    .dout(mul_res_436_fu_4403_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1236(
    .din0(mul_res_437_fu_4463_p0),
    .din1(mul_res_437_fu_4463_p1),
    .dout(mul_res_437_fu_4463_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1237(
    .din0(mul_res_438_fu_4481_p0),
    .din1(mul_res_438_fu_4481_p1),
    .dout(mul_res_438_fu_4481_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1238(
    .din0(mul_res_439_fu_4499_p0),
    .din1(mul_res_439_fu_4499_p1),
    .dout(mul_res_439_fu_4499_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1239(
    .din0(mul_res_440_fu_4517_p0),
    .din1(mul_res_440_fu_4517_p1),
    .dout(mul_res_440_fu_4517_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1240(
    .din0(mul_res_441_fu_4535_p0),
    .din1(mul_res_441_fu_4535_p1),
    .dout(mul_res_441_fu_4535_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1241(
    .din0(mul_res_442_fu_4553_p0),
    .din1(mul_res_442_fu_4553_p1),
    .dout(mul_res_442_fu_4553_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1242(
    .din0(mul_res_443_fu_4571_p0),
    .din1(mul_res_443_fu_4571_p1),
    .dout(mul_res_443_fu_4571_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1243(
    .din0(mul_res_444_fu_4589_p0),
    .din1(mul_res_444_fu_4589_p1),
    .dout(mul_res_444_fu_4589_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1244(
    .din0(mul_res_445_fu_4607_p0),
    .din1(mul_res_445_fu_4607_p1),
    .dout(mul_res_445_fu_4607_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1245(
    .din0(mul_res_446_fu_4625_p0),
    .din1(mul_res_446_fu_4625_p1),
    .dout(mul_res_446_fu_4625_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1246(
    .din0(mul_res_447_fu_4643_p0),
    .din1(mul_res_447_fu_4643_p1),
    .dout(mul_res_447_fu_4643_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1247(
    .din0(mul_res_448_fu_4661_p0),
    .din1(mul_res_448_fu_4661_p1),
    .dout(mul_res_448_fu_4661_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1248(
    .din0(mul_res_449_fu_4721_p0),
    .din1(mul_res_449_fu_4721_p1),
    .dout(mul_res_449_fu_4721_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1249(
    .din0(mul_res_450_fu_4739_p0),
    .din1(mul_res_450_fu_4739_p1),
    .dout(mul_res_450_fu_4739_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1250(
    .din0(mul_res_451_fu_4757_p0),
    .din1(mul_res_451_fu_4757_p1),
    .dout(mul_res_451_fu_4757_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1251(
    .din0(mul_res_452_fu_4775_p0),
    .din1(mul_res_452_fu_4775_p1),
    .dout(mul_res_452_fu_4775_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1252(
    .din0(mul_res_453_fu_4793_p0),
    .din1(mul_res_453_fu_4793_p1),
    .dout(mul_res_453_fu_4793_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1253(
    .din0(mul_res_454_fu_4811_p0),
    .din1(mul_res_454_fu_4811_p1),
    .dout(mul_res_454_fu_4811_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1254(
    .din0(mul_res_455_fu_4829_p0),
    .din1(mul_res_455_fu_4829_p1),
    .dout(mul_res_455_fu_4829_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1255(
    .din0(mul_res_456_fu_4847_p0),
    .din1(mul_res_456_fu_4847_p1),
    .dout(mul_res_456_fu_4847_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1256(
    .din0(mul_res_457_fu_4865_p0),
    .din1(mul_res_457_fu_4865_p1),
    .dout(mul_res_457_fu_4865_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1257(
    .din0(mul_res_458_fu_4883_p0),
    .din1(mul_res_458_fu_4883_p1),
    .dout(mul_res_458_fu_4883_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1258(
    .din0(mul_res_459_fu_4901_p0),
    .din1(mul_res_459_fu_4901_p1),
    .dout(mul_res_459_fu_4901_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1259(
    .din0(mul_res_460_fu_4919_p0),
    .din1(mul_res_460_fu_4919_p1),
    .dout(mul_res_460_fu_4919_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1260(
    .din0(mul_res_461_fu_4979_p0),
    .din1(mul_res_461_fu_4979_p1),
    .dout(mul_res_461_fu_4979_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1261(
    .din0(mul_res_462_fu_4997_p0),
    .din1(mul_res_462_fu_4997_p1),
    .dout(mul_res_462_fu_4997_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1262(
    .din0(mul_res_463_fu_5015_p0),
    .din1(mul_res_463_fu_5015_p1),
    .dout(mul_res_463_fu_5015_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1263(
    .din0(mul_res_464_fu_5033_p0),
    .din1(mul_res_464_fu_5033_p1),
    .dout(mul_res_464_fu_5033_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1264(
    .din0(mul_res_465_fu_5051_p0),
    .din1(mul_res_465_fu_5051_p1),
    .dout(mul_res_465_fu_5051_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1265(
    .din0(mul_res_466_fu_5069_p0),
    .din1(mul_res_466_fu_5069_p1),
    .dout(mul_res_466_fu_5069_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1266(
    .din0(mul_res_467_fu_5083_p0),
    .din1(mul_res_467_fu_5083_p1),
    .dout(mul_res_467_fu_5083_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1267(
    .din0(mul_res_468_fu_5101_p0),
    .din1(mul_res_468_fu_5101_p1),
    .dout(mul_res_468_fu_5101_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1268(
    .din0(mul_res_469_fu_5115_p0),
    .din1(mul_res_469_fu_5115_p1),
    .dout(mul_res_469_fu_5115_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1269(
    .din0(mul_res_470_fu_5129_p0),
    .din1(mul_res_470_fu_5129_p1),
    .dout(mul_res_470_fu_5129_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1270(
    .din0(mul_res_471_fu_5147_p0),
    .din1(mul_res_471_fu_5147_p1),
    .dout(mul_res_471_fu_5147_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1271(
    .din0(mul_res_472_fu_5165_p0),
    .din1(mul_res_472_fu_5165_p1),
    .dout(mul_res_472_fu_5165_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1272(
    .din0(mul_res_473_fu_5213_p0),
    .din1(mul_res_473_fu_5213_p1),
    .dout(mul_res_473_fu_5213_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1273(
    .din0(mul_res_474_fu_5231_p0),
    .din1(mul_res_474_fu_5231_p1),
    .dout(mul_res_474_fu_5231_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1274(
    .din0(mul_res_475_fu_5249_p0),
    .din1(mul_res_475_fu_5249_p1),
    .dout(mul_res_475_fu_5249_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1275(
    .din0(mul_res_476_fu_5267_p0),
    .din1(mul_res_476_fu_5267_p1),
    .dout(mul_res_476_fu_5267_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1276(
    .din0(mul_res_477_fu_5285_p0),
    .din1(mul_res_477_fu_5285_p1),
    .dout(mul_res_477_fu_5285_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1277(
    .din0(mul_res_478_fu_5303_p0),
    .din1(mul_res_478_fu_5303_p1),
    .dout(mul_res_478_fu_5303_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1278(
    .din0(mul_res_479_fu_5317_p0),
    .din1(mul_res_479_fu_5317_p1),
    .dout(mul_res_479_fu_5317_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1279(
    .din0(mul_res_480_fu_5335_p0),
    .din1(mul_res_480_fu_5335_p1),
    .dout(mul_res_480_fu_5335_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1280(
    .din0(mul_res_481_fu_5349_p0),
    .din1(mul_res_481_fu_5349_p1),
    .dout(mul_res_481_fu_5349_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1281(
    .din0(mul_res_482_fu_5363_p0),
    .din1(mul_res_482_fu_5363_p1),
    .dout(mul_res_482_fu_5363_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1282(
    .din0(mul_res_483_fu_5381_p0),
    .din1(mul_res_483_fu_5381_p1),
    .dout(mul_res_483_fu_5381_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1283(
    .din0(mul_res_484_fu_5399_p0),
    .din1(mul_res_484_fu_5399_p1),
    .dout(mul_res_484_fu_5399_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_442)) begin
        cit_fu_668 <= add_ln122_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_442)) begin
    cot_fu_720 <= select_ln121_5_fu_942_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_503)) begin
    if ((icmp_ln120_fu_837_p2 == 1'd0)) begin
        indvar_flatten35_fu_728 <= add_ln120_fu_831_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten35_fu_728 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_503)) begin
    if ((icmp_ln120_fu_837_p2 == 1'd0)) begin
        indvar_flatten_fu_724 <= select_ln121_6_fu_855_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_724 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln153_146_reg_6739 <= add_ln153_146_fu_1743_p2;
        add_ln153_149_reg_6744 <= add_ln153_149_fu_1755_p2;
        add_ln153_150_reg_6749 <= add_ln153_150_fu_1761_p2;
        add_ln153_151_reg_6754 <= add_ln153_151_fu_1767_p2;
        add_ln153_154_reg_7054 <= add_ln153_154_fu_5631_p2;
        add_ln153_155_reg_6759 <= add_ln153_155_fu_2157_p2;
        add_ln153_158_reg_6764 <= add_ln153_158_fu_2169_p2;
        add_ln153_161_reg_6769 <= add_ln153_161_fu_2181_p2;
        add_ln153_162_reg_6774 <= add_ln153_162_fu_2187_p2;
        add_ln153_163_reg_6779 <= add_ln153_163_fu_2193_p2;
        add_ln153_166_reg_7059 <= add_ln153_166_fu_5680_p2;
        add_ln153_167_reg_6784 <= add_ln153_167_fu_2583_p2;
        add_ln153_170_reg_6789 <= add_ln153_170_fu_2595_p2;
        add_ln153_173_reg_6794 <= add_ln153_173_fu_2607_p2;
        add_ln153_174_reg_6799 <= add_ln153_174_fu_2613_p2;
        add_ln153_175_reg_6804 <= add_ln153_175_fu_2619_p2;
        add_ln153_178_reg_7064 <= add_ln153_178_fu_5729_p2;
        add_ln153_179_reg_6809 <= add_ln153_179_fu_3009_p2;
        add_ln153_182_reg_6814 <= add_ln153_182_fu_3021_p2;
        add_ln153_185_reg_6819 <= add_ln153_185_fu_3033_p2;
        add_ln153_186_reg_6824 <= add_ln153_186_fu_3039_p2;
        add_ln153_187_reg_6829 <= add_ln153_187_fu_3045_p2;
        add_ln153_190_reg_7069 <= add_ln153_190_fu_5778_p2;
        add_ln153_191_reg_6834 <= add_ln153_191_fu_3435_p2;
        add_ln153_194_reg_6839 <= add_ln153_194_fu_3447_p2;
        add_ln153_197_reg_6844 <= add_ln153_197_fu_3459_p2;
        add_ln153_198_reg_6849 <= add_ln153_198_fu_3465_p2;
        add_ln153_199_reg_6854 <= add_ln153_199_fu_3471_p2;
        add_ln153_202_reg_7074 <= add_ln153_202_fu_5827_p2;
        add_ln153_203_reg_6859 <= add_ln153_203_fu_3861_p2;
        add_ln153_206_reg_6864 <= add_ln153_206_fu_3873_p2;
        add_ln153_209_reg_6869 <= add_ln153_209_fu_3885_p2;
        add_ln153_210_reg_6874 <= add_ln153_210_fu_3891_p2;
        add_ln153_211_reg_6879 <= add_ln153_211_fu_3897_p2;
        add_ln153_214_reg_7079 <= add_ln153_214_fu_5876_p2;
        add_ln153_215_reg_6884 <= add_ln153_215_fu_4155_p2;
        add_ln153_218_reg_6889 <= add_ln153_218_fu_4167_p2;
        add_ln153_221_reg_6894 <= add_ln153_221_fu_4179_p2;
        add_ln153_222_reg_6899 <= add_ln153_222_fu_4185_p2;
        add_ln153_223_reg_6904 <= add_ln153_223_fu_4191_p2;
        add_ln153_226_reg_7084 <= add_ln153_226_fu_5925_p2;
        add_ln153_227_reg_6909 <= add_ln153_227_fu_4413_p2;
        add_ln153_230_reg_6914 <= add_ln153_230_fu_4425_p2;
        add_ln153_233_reg_6919 <= add_ln153_233_fu_4437_p2;
        add_ln153_234_reg_6924 <= add_ln153_234_fu_4443_p2;
        add_ln153_235_reg_6929 <= add_ln153_235_fu_4449_p2;
        add_ln153_238_reg_7089 <= add_ln153_238_fu_5974_p2;
        add_ln153_239_reg_6934 <= add_ln153_239_fu_4671_p2;
        add_ln153_242_reg_6939 <= add_ln153_242_fu_4683_p2;
        add_ln153_245_reg_6944 <= add_ln153_245_fu_4695_p2;
        add_ln153_246_reg_6949 <= add_ln153_246_fu_4701_p2;
        add_ln153_247_reg_6954 <= add_ln153_247_fu_4707_p2;
        add_ln153_250_reg_7094 <= add_ln153_250_fu_6023_p2;
        add_ln153_251_reg_6959 <= add_ln153_251_fu_4929_p2;
        add_ln153_254_reg_6964 <= add_ln153_254_fu_4941_p2;
        add_ln153_257_reg_6969 <= add_ln153_257_fu_4953_p2;
        add_ln153_258_reg_6974 <= add_ln153_258_fu_4959_p2;
        add_ln153_259_reg_6979 <= add_ln153_259_fu_4965_p2;
        add_ln153_262_reg_7099 <= add_ln153_262_fu_6072_p2;
        add_ln153_263_reg_6999 <= add_ln153_263_fu_5175_p2;
        add_ln153_269_reg_7004 <= add_ln153_269_fu_5187_p2;
        add_ln153_270_reg_7009 <= add_ln153_270_fu_5193_p2;
        add_ln153_271_reg_7014 <= add_ln153_271_fu_5199_p2;
        add_ln153_274_reg_7104 <= add_ln153_274_fu_6143_p2;
        add_ln153_275_reg_7034 <= add_ln153_275_fu_5409_p2;
        add_ln153_281_reg_7039 <= add_ln153_281_fu_5421_p2;
        add_ln153_282_reg_7044 <= add_ln153_282_fu_5427_p2;
        add_ln153_283_reg_7049 <= add_ln153_283_fu_5433_p2;
        add_ln153_286_reg_7109 <= add_ln153_286_fu_6214_p2;
        add_ln153_reg_6734 <= add_ln153_fu_1731_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln126_reg_6559 <= icmp_ln126_fu_1013_p2;
        icmp_ln126_reg_6559_pp0_iter3_reg <= icmp_ln126_reg_6559;
        icmp_ln161_reg_6695 <= icmp_ln161_fu_1258_p2;
        icmp_ln161_reg_6695_pp0_iter3_reg <= icmp_ln161_reg_6695;
        icmp_ln161_reg_6695_pp0_iter4_reg <= icmp_ln161_reg_6695_pp0_iter3_reg;
        mul_res_466_reg_6984 <= mul_res_466_fu_5069_p2;
        mul_res_468_reg_6989 <= mul_res_468_fu_5101_p2;
        mul_res_469_reg_6994 <= mul_res_469_fu_5115_p2;
        mul_res_478_reg_7019 <= mul_res_478_fu_5303_p2;
        mul_res_480_reg_7024 <= mul_res_480_fu_5335_p2;
        mul_res_481_reg_7029 <= mul_res_481_fu_5349_p2;
        tmp_159_reg_6729 <= {{attn_inst_matmul_gen_o_bias_arr_663_q0[64:60]}};
        tmp_83_reg_6711 <= {{attn_inst_matmul_gen_o_bias_arr_663_q0[35:24]}};
        tmp_84_reg_6717 <= {{attn_inst_matmul_gen_o_bias_arr_663_q0[47:36]}};
        tmp_85_reg_6723 <= {{attn_inst_matmul_gen_o_bias_arr_663_q0[59:48]}};
        tmp_s_reg_6705 <= {{attn_inst_matmul_gen_o_bias_arr_663_q0[23:12]}};
        trunc_ln131_reg_6699 <= trunc_ln131_fu_1263_p1;
        trunc_ln137_12_reg_6580 <= {{cache_window_sm_dout[5:3]}};
        trunc_ln137_13_reg_6585 <= {{cache_window_sm_dout[8:6]}};
        trunc_ln137_14_reg_6590 <= {{cache_window_sm_dout[11:9]}};
        trunc_ln137_15_reg_6595 <= {{cache_window_sm_dout[14:12]}};
        trunc_ln137_16_reg_6600 <= {{cache_window_sm_dout[17:15]}};
        trunc_ln137_17_reg_6605 <= {{cache_window_sm_dout[20:18]}};
        trunc_ln137_18_reg_6610 <= {{cache_window_sm_dout[23:21]}};
        trunc_ln137_19_reg_6615 <= {{cache_window_sm_dout[26:24]}};
        trunc_ln137_20_reg_6620 <= {{cache_window_sm_dout[29:27]}};
        trunc_ln137_21_reg_6630 <= {{cache_window_sm_dout[35:33]}};
        trunc_ln137_22_reg_6635 <= {{cache_window_sm_dout[38:36]}};
        trunc_ln137_23_reg_6640 <= {{cache_window_sm_dout[41:39]}};
        trunc_ln137_24_reg_6645 <= {{cache_window_sm_dout[44:42]}};
        trunc_ln137_25_reg_6650 <= {{cache_window_sm_dout[47:45]}};
        trunc_ln137_26_reg_6655 <= {{cache_window_sm_dout[50:48]}};
        trunc_ln137_27_reg_6660 <= {{cache_window_sm_dout[53:51]}};
        trunc_ln137_28_reg_6665 <= {{cache_window_sm_dout[56:54]}};
        trunc_ln137_29_reg_6670 <= {{cache_window_sm_dout[59:57]}};
        trunc_ln137_30_reg_6675 <= {{cache_window_sm_dout[62:60]}};
        trunc_ln137_31_reg_6680 <= {{cache_window_sm_dout[65:63]}};
        trunc_ln137_32_reg_6685 <= {{cache_window_sm_dout[68:66]}};
        trunc_ln137_33_reg_6690 <= {{cache_window_sm_dout[71:69]}};
        trunc_ln137_reg_6575 <= trunc_ln137_fu_1020_p1;
        trunc_ln137_s_reg_6625 <= {{cache_window_sm_dout[32:30]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln121_reg_6525 <= icmp_ln121_fu_843_p2;
        select_ln121_5_reg_6539 <= select_ln121_5_fu_942_p3;
        select_ln121_reg_6532 <= select_ln121_fu_934_p3;
        trunc_ln121_reg_6544 <= trunc_ln121_fu_950_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_0_0_0364_fu_672 <= add_ln153_154_fu_5631_p2;
        p_0_0_0376_fu_696 <= add_ln153_226_fu_5925_p2;
        p_0_0_0_112366_fu_676 <= add_ln153_166_fu_5680_p2;
        p_0_0_0_112378_fu_700 <= add_ln153_238_fu_5974_p2;
        p_0_0_0_2368_fu_680 <= add_ln153_178_fu_5729_p2;
        p_0_0_0_2380_fu_704 <= add_ln153_250_fu_6023_p2;
        p_0_0_0_3370_fu_684 <= add_ln153_190_fu_5778_p2;
        p_0_0_0_3382_fu_708 <= add_ln153_262_fu_6072_p2;
        p_0_0_0_4372_fu_688 <= add_ln153_202_fu_5827_p2;
        p_0_0_0_4384_fu_712 <= add_ln153_274_fu_6143_p2;
        p_0_0_0_5374_fu_692 <= add_ln153_214_fu_5876_p2;
        p_0_0_0_5386_fu_716 <= add_ln153_286_fu_6214_p2;
    end
end

always @ (*) begin
    if (((icmp_ln120_fu_837_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_668;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_720;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten35_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten35_load = indvar_flatten35_fu_728;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_724;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_o_bias_arr_663_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_o_bias_arr_663_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_o_weight_arr_662_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_o_weight_arr_662_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln161_reg_6695_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln161_reg_6695_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_831_p2 = (ap_sig_allocacmp_indvar_flatten35_load + 16'd1);

assign add_ln121_3_fu_849_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln121_fu_923_p2 = (select_ln120_fu_899_p3 + 6'd1);

assign add_ln122_fu_954_p2 = (select_ln121_fu_934_p3 + 5'd1);

assign add_ln151_fu_1002_p2 = (tmp_39_fu_988_p3 + zext_ln151_fu_999_p1);

assign add_ln153_144_fu_5594_p2 = ($signed(sext_ln153_121_fu_5591_p1) + $signed(sext_ln153_120_fu_5588_p1));

assign add_ln153_145_fu_1737_p2 = ($signed(sext_ln151_209_fu_1517_p1) + $signed(sext_ln151_211_fu_1587_p1));

assign add_ln153_146_fu_1743_p2 = ($signed(add_ln153_145_fu_1737_p2) + $signed(sext_ln151_212_fu_1622_p1));

assign add_ln153_147_fu_5625_p2 = ($signed(sext_ln153_125_fu_5621_p1) + $signed(add_ln153_144_fu_5594_p2));

assign add_ln153_148_fu_1749_p2 = ($signed(sext_ln151_205_fu_1377_p1) + $signed(sext_ln151_204_fu_1342_p1));

assign add_ln153_149_fu_1755_p2 = ($signed(add_ln153_148_fu_1749_p2) + $signed(sext_ln151_210_fu_1552_p1));

assign add_ln153_150_fu_1761_p2 = ($signed(sext_ln151_206_fu_1412_p1) + $signed(sext_ln151_208_fu_1482_p1));

assign add_ln153_151_fu_1767_p2 = ($signed(sext_ln151_207_fu_1447_p1) + $signed(sext_ln153_fu_1727_p1));

assign add_ln153_152_fu_5609_p2 = ($signed(sext_ln153_124_fu_5606_p1) + $signed(sext_ln153_123_fu_5603_p1));

assign add_ln153_153_fu_5615_p2 = ($signed(add_ln153_152_fu_5609_p2) + $signed(sext_ln153_122_fu_5600_p1));

assign add_ln153_154_fu_5631_p2 = (add_ln153_147_fu_5625_p2 + select_ln126_34_fu_5582_p3);

assign add_ln153_155_fu_2157_p2 = ($signed(sext_ln151_224_fu_2089_p1) + $signed(sext_ln151_225_fu_2121_p1));

assign add_ln153_156_fu_5643_p2 = ($signed(sext_ln153_128_fu_5640_p1) + $signed(sext_ln153_127_fu_5637_p1));

assign add_ln153_157_fu_2163_p2 = ($signed(sext_ln151_220_fu_1961_p1) + $signed(sext_ln151_222_fu_2025_p1));

assign add_ln153_158_fu_2169_p2 = ($signed(add_ln153_157_fu_2163_p2) + $signed(sext_ln151_223_fu_2057_p1));

assign add_ln153_159_fu_5674_p2 = ($signed(sext_ln153_132_fu_5670_p1) + $signed(add_ln153_156_fu_5643_p2));

assign add_ln153_160_fu_2175_p2 = ($signed(sext_ln151_216_fu_1833_p1) + $signed(sext_ln151_215_fu_1801_p1));

assign add_ln153_161_fu_2181_p2 = ($signed(add_ln153_160_fu_2175_p2) + $signed(sext_ln151_221_fu_1993_p1));

assign add_ln153_162_fu_2187_p2 = ($signed(sext_ln151_217_fu_1865_p1) + $signed(sext_ln151_219_fu_1929_p1));

assign add_ln153_163_fu_2193_p2 = ($signed(sext_ln151_218_fu_1897_p1) + $signed(sext_ln153_126_fu_2153_p1));

assign add_ln153_164_fu_5658_p2 = ($signed(sext_ln153_131_fu_5655_p1) + $signed(sext_ln153_130_fu_5652_p1));

assign add_ln153_165_fu_5664_p2 = ($signed(add_ln153_164_fu_5658_p2) + $signed(sext_ln153_129_fu_5649_p1));

assign add_ln153_166_fu_5680_p2 = (add_ln153_159_fu_5674_p2 + select_ln126_33_fu_5576_p3);

assign add_ln153_167_fu_2583_p2 = ($signed(sext_ln151_235_fu_2515_p1) + $signed(sext_ln151_236_fu_2547_p1));

assign add_ln153_168_fu_5692_p2 = ($signed(sext_ln153_135_fu_5689_p1) + $signed(sext_ln153_134_fu_5686_p1));

assign add_ln153_169_fu_2589_p2 = ($signed(sext_ln151_231_fu_2387_p1) + $signed(sext_ln151_233_fu_2451_p1));

assign add_ln153_170_fu_2595_p2 = ($signed(add_ln153_169_fu_2589_p2) + $signed(sext_ln151_234_fu_2483_p1));

assign add_ln153_171_fu_5723_p2 = ($signed(sext_ln153_139_fu_5719_p1) + $signed(add_ln153_168_fu_5692_p2));

assign add_ln153_172_fu_2601_p2 = ($signed(sext_ln151_227_fu_2259_p1) + $signed(sext_ln151_226_fu_2227_p1));

assign add_ln153_173_fu_2607_p2 = ($signed(add_ln153_172_fu_2601_p2) + $signed(sext_ln151_232_fu_2419_p1));

assign add_ln153_174_fu_2613_p2 = ($signed(sext_ln151_228_fu_2291_p1) + $signed(sext_ln151_230_fu_2355_p1));

assign add_ln153_175_fu_2619_p2 = ($signed(sext_ln151_229_fu_2323_p1) + $signed(sext_ln153_133_fu_2579_p1));

assign add_ln153_176_fu_5707_p2 = ($signed(sext_ln153_138_fu_5704_p1) + $signed(sext_ln153_137_fu_5701_p1));

assign add_ln153_177_fu_5713_p2 = ($signed(add_ln153_176_fu_5707_p2) + $signed(sext_ln153_136_fu_5698_p1));

assign add_ln153_178_fu_5729_p2 = (add_ln153_171_fu_5723_p2 + select_ln126_32_fu_5570_p3);

assign add_ln153_179_fu_3009_p2 = ($signed(sext_ln151_246_fu_2941_p1) + $signed(sext_ln151_247_fu_2973_p1));

assign add_ln153_180_fu_5741_p2 = ($signed(sext_ln153_142_fu_5738_p1) + $signed(sext_ln153_141_fu_5735_p1));

assign add_ln153_181_fu_3015_p2 = ($signed(sext_ln151_242_fu_2813_p1) + $signed(sext_ln151_244_fu_2877_p1));

assign add_ln153_182_fu_3021_p2 = ($signed(add_ln153_181_fu_3015_p2) + $signed(sext_ln151_245_fu_2909_p1));

assign add_ln153_183_fu_5772_p2 = ($signed(sext_ln153_146_fu_5768_p1) + $signed(add_ln153_180_fu_5741_p2));

assign add_ln153_184_fu_3027_p2 = ($signed(sext_ln151_238_fu_2685_p1) + $signed(sext_ln151_237_fu_2653_p1));

assign add_ln153_185_fu_3033_p2 = ($signed(add_ln153_184_fu_3027_p2) + $signed(sext_ln151_243_fu_2845_p1));

assign add_ln153_186_fu_3039_p2 = ($signed(sext_ln151_239_fu_2717_p1) + $signed(sext_ln151_241_fu_2781_p1));

assign add_ln153_187_fu_3045_p2 = ($signed(sext_ln151_240_fu_2749_p1) + $signed(sext_ln153_140_fu_3005_p1));

assign add_ln153_188_fu_5756_p2 = ($signed(sext_ln153_145_fu_5753_p1) + $signed(sext_ln153_144_fu_5750_p1));

assign add_ln153_189_fu_5762_p2 = ($signed(add_ln153_188_fu_5756_p2) + $signed(sext_ln153_143_fu_5747_p1));

assign add_ln153_190_fu_5778_p2 = (add_ln153_183_fu_5772_p2 + select_ln126_31_fu_5564_p3);

assign add_ln153_191_fu_3435_p2 = ($signed(sext_ln151_257_fu_3367_p1) + $signed(sext_ln151_258_fu_3399_p1));

assign add_ln153_192_fu_5790_p2 = ($signed(sext_ln153_149_fu_5787_p1) + $signed(sext_ln153_148_fu_5784_p1));

assign add_ln153_193_fu_3441_p2 = ($signed(sext_ln151_253_fu_3239_p1) + $signed(sext_ln151_255_fu_3303_p1));

assign add_ln153_194_fu_3447_p2 = ($signed(add_ln153_193_fu_3441_p2) + $signed(sext_ln151_256_fu_3335_p1));

assign add_ln153_195_fu_5821_p2 = ($signed(sext_ln153_153_fu_5817_p1) + $signed(add_ln153_192_fu_5790_p2));

assign add_ln153_196_fu_3453_p2 = ($signed(sext_ln151_249_fu_3111_p1) + $signed(sext_ln151_248_fu_3079_p1));

assign add_ln153_197_fu_3459_p2 = ($signed(add_ln153_196_fu_3453_p2) + $signed(sext_ln151_254_fu_3271_p1));

assign add_ln153_198_fu_3465_p2 = ($signed(sext_ln151_250_fu_3143_p1) + $signed(sext_ln151_252_fu_3207_p1));

assign add_ln153_199_fu_3471_p2 = ($signed(sext_ln151_251_fu_3175_p1) + $signed(sext_ln153_147_fu_3431_p1));

assign add_ln153_200_fu_5805_p2 = ($signed(sext_ln153_152_fu_5802_p1) + $signed(sext_ln153_151_fu_5799_p1));

assign add_ln153_201_fu_5811_p2 = ($signed(add_ln153_200_fu_5805_p2) + $signed(sext_ln153_150_fu_5796_p1));

assign add_ln153_202_fu_5827_p2 = (add_ln153_195_fu_5821_p2 + select_ln126_30_fu_5558_p3);

assign add_ln153_203_fu_3861_p2 = ($signed(sext_ln151_268_fu_3793_p1) + $signed(sext_ln151_269_fu_3825_p1));

assign add_ln153_204_fu_5839_p2 = ($signed(sext_ln153_156_fu_5836_p1) + $signed(sext_ln153_155_fu_5833_p1));

assign add_ln153_205_fu_3867_p2 = ($signed(sext_ln151_264_fu_3665_p1) + $signed(sext_ln151_266_fu_3729_p1));

assign add_ln153_206_fu_3873_p2 = ($signed(add_ln153_205_fu_3867_p2) + $signed(sext_ln151_267_fu_3761_p1));

assign add_ln153_207_fu_5870_p2 = ($signed(sext_ln153_160_fu_5866_p1) + $signed(add_ln153_204_fu_5839_p2));

assign add_ln153_208_fu_3879_p2 = ($signed(sext_ln151_260_fu_3537_p1) + $signed(sext_ln151_259_fu_3505_p1));

assign add_ln153_209_fu_3885_p2 = ($signed(add_ln153_208_fu_3879_p2) + $signed(sext_ln151_265_fu_3697_p1));

assign add_ln153_210_fu_3891_p2 = ($signed(sext_ln151_261_fu_3569_p1) + $signed(sext_ln151_263_fu_3633_p1));

assign add_ln153_211_fu_3897_p2 = ($signed(sext_ln151_262_fu_3601_p1) + $signed(sext_ln153_154_fu_3857_p1));

assign add_ln153_212_fu_5854_p2 = ($signed(sext_ln153_159_fu_5851_p1) + $signed(sext_ln153_158_fu_5848_p1));

assign add_ln153_213_fu_5860_p2 = ($signed(add_ln153_212_fu_5854_p2) + $signed(sext_ln153_157_fu_5845_p1));

assign add_ln153_214_fu_5876_p2 = (add_ln153_207_fu_5870_p2 + select_ln126_29_fu_5551_p3);

assign add_ln153_215_fu_4155_p2 = ($signed(sext_ln151_279_fu_4109_p1) + $signed(sext_ln151_280_fu_4130_p1));

assign add_ln153_216_fu_5888_p2 = ($signed(sext_ln153_163_fu_5885_p1) + $signed(sext_ln153_162_fu_5882_p1));

assign add_ln153_217_fu_4161_p2 = ($signed(sext_ln151_275_fu_4025_p1) + $signed(sext_ln151_277_fu_4067_p1));

assign add_ln153_218_fu_4167_p2 = ($signed(add_ln153_217_fu_4161_p2) + $signed(sext_ln151_278_fu_4088_p1));

assign add_ln153_219_fu_5919_p2 = ($signed(sext_ln153_167_fu_5915_p1) + $signed(add_ln153_216_fu_5888_p2));

assign add_ln153_220_fu_4173_p2 = ($signed(sext_ln151_271_fu_3941_p1) + $signed(sext_ln151_270_fu_3920_p1));

assign add_ln153_221_fu_4179_p2 = ($signed(add_ln153_220_fu_4173_p2) + $signed(sext_ln151_276_fu_4046_p1));

assign add_ln153_222_fu_4185_p2 = ($signed(sext_ln151_272_fu_3962_p1) + $signed(sext_ln151_274_fu_4004_p1));

assign add_ln153_223_fu_4191_p2 = ($signed(sext_ln151_273_fu_3983_p1) + $signed(sext_ln153_161_fu_4151_p1));

assign add_ln153_224_fu_5903_p2 = ($signed(sext_ln153_166_fu_5900_p1) + $signed(sext_ln153_165_fu_5897_p1));

assign add_ln153_225_fu_5909_p2 = ($signed(add_ln153_224_fu_5903_p2) + $signed(sext_ln153_164_fu_5894_p1));

assign add_ln153_226_fu_5925_p2 = (add_ln153_219_fu_5919_p2 + select_ln126_28_fu_5545_p3);

assign add_ln153_227_fu_4413_p2 = ($signed(sext_ln151_290_fu_4373_p1) + $signed(sext_ln151_291_fu_4391_p1));

assign add_ln153_228_fu_5937_p2 = ($signed(sext_ln153_170_fu_5934_p1) + $signed(sext_ln153_169_fu_5931_p1));

assign add_ln153_229_fu_4419_p2 = ($signed(sext_ln151_286_fu_4301_p1) + $signed(sext_ln151_288_fu_4337_p1));

assign add_ln153_230_fu_4425_p2 = ($signed(add_ln153_229_fu_4419_p2) + $signed(sext_ln151_289_fu_4355_p1));

assign add_ln153_231_fu_5968_p2 = ($signed(sext_ln153_174_fu_5964_p1) + $signed(add_ln153_228_fu_5937_p2));

assign add_ln153_232_fu_4431_p2 = ($signed(sext_ln151_282_fu_4229_p1) + $signed(sext_ln151_281_fu_4211_p1));

assign add_ln153_233_fu_4437_p2 = ($signed(add_ln153_232_fu_4431_p2) + $signed(sext_ln151_287_fu_4319_p1));

assign add_ln153_234_fu_4443_p2 = ($signed(sext_ln151_283_fu_4247_p1) + $signed(sext_ln151_285_fu_4283_p1));

assign add_ln153_235_fu_4449_p2 = ($signed(sext_ln151_284_fu_4265_p1) + $signed(sext_ln153_168_fu_4409_p1));

assign add_ln153_236_fu_5952_p2 = ($signed(sext_ln153_173_fu_5949_p1) + $signed(sext_ln153_172_fu_5946_p1));

assign add_ln153_237_fu_5958_p2 = ($signed(add_ln153_236_fu_5952_p2) + $signed(sext_ln153_171_fu_5943_p1));

assign add_ln153_238_fu_5974_p2 = (add_ln153_231_fu_5968_p2 + select_ln126_27_fu_5539_p3);

assign add_ln153_239_fu_4671_p2 = ($signed(sext_ln151_301_fu_4631_p1) + $signed(sext_ln151_302_fu_4649_p1));

assign add_ln153_240_fu_5986_p2 = ($signed(sext_ln153_177_fu_5983_p1) + $signed(sext_ln153_176_fu_5980_p1));

assign add_ln153_241_fu_4677_p2 = ($signed(sext_ln151_297_fu_4559_p1) + $signed(sext_ln151_299_fu_4595_p1));

assign add_ln153_242_fu_4683_p2 = ($signed(add_ln153_241_fu_4677_p2) + $signed(sext_ln151_300_fu_4613_p1));

assign add_ln153_243_fu_6017_p2 = ($signed(sext_ln153_181_fu_6013_p1) + $signed(add_ln153_240_fu_5986_p2));

assign add_ln153_244_fu_4689_p2 = ($signed(sext_ln151_293_fu_4487_p1) + $signed(sext_ln151_292_fu_4469_p1));

assign add_ln153_245_fu_4695_p2 = ($signed(add_ln153_244_fu_4689_p2) + $signed(sext_ln151_298_fu_4577_p1));

assign add_ln153_246_fu_4701_p2 = ($signed(sext_ln151_294_fu_4505_p1) + $signed(sext_ln151_296_fu_4541_p1));

assign add_ln153_247_fu_4707_p2 = ($signed(sext_ln151_295_fu_4523_p1) + $signed(sext_ln153_175_fu_4667_p1));

assign add_ln153_248_fu_6001_p2 = ($signed(sext_ln153_180_fu_5998_p1) + $signed(sext_ln153_179_fu_5995_p1));

assign add_ln153_249_fu_6007_p2 = ($signed(add_ln153_248_fu_6001_p2) + $signed(sext_ln153_178_fu_5992_p1));

assign add_ln153_250_fu_6023_p2 = (add_ln153_243_fu_6017_p2 + select_ln126_26_fu_5533_p3);

assign add_ln153_251_fu_4929_p2 = ($signed(sext_ln151_312_fu_4889_p1) + $signed(sext_ln151_313_fu_4907_p1));

assign add_ln153_252_fu_6035_p2 = ($signed(sext_ln153_184_fu_6032_p1) + $signed(sext_ln153_183_fu_6029_p1));

assign add_ln153_253_fu_4935_p2 = ($signed(sext_ln151_308_fu_4817_p1) + $signed(sext_ln151_310_fu_4853_p1));

assign add_ln153_254_fu_4941_p2 = ($signed(add_ln153_253_fu_4935_p2) + $signed(sext_ln151_311_fu_4871_p1));

assign add_ln153_255_fu_6066_p2 = ($signed(sext_ln153_188_fu_6062_p1) + $signed(add_ln153_252_fu_6035_p2));

assign add_ln153_256_fu_4947_p2 = ($signed(sext_ln151_304_fu_4745_p1) + $signed(sext_ln151_303_fu_4727_p1));

assign add_ln153_257_fu_4953_p2 = ($signed(add_ln153_256_fu_4947_p2) + $signed(sext_ln151_309_fu_4835_p1));

assign add_ln153_258_fu_4959_p2 = ($signed(sext_ln151_305_fu_4763_p1) + $signed(sext_ln151_307_fu_4799_p1));

assign add_ln153_259_fu_4965_p2 = ($signed(sext_ln151_306_fu_4781_p1) + $signed(sext_ln153_182_fu_4925_p1));

assign add_ln153_260_fu_6050_p2 = ($signed(sext_ln153_187_fu_6047_p1) + $signed(sext_ln153_186_fu_6044_p1));

assign add_ln153_261_fu_6056_p2 = ($signed(add_ln153_260_fu_6050_p2) + $signed(sext_ln153_185_fu_6041_p1));

assign add_ln153_262_fu_6072_p2 = (add_ln153_255_fu_6066_p2 + select_ln126_25_fu_5527_p3);

assign add_ln153_263_fu_5175_p2 = ($signed(sext_ln151_323_fu_5135_p1) + $signed(sext_ln151_324_fu_5153_p1));

assign add_ln153_264_fu_6090_p2 = ($signed(sext_ln153_190_fu_6087_p1) + $signed(select_ln126_24_fu_5521_p3));

assign add_ln153_265_fu_6096_p2 = ($signed(sext_ln151_319_fu_6078_p1) + $signed(sext_ln151_321_fu_6081_p1));

assign add_ln153_266_fu_6102_p2 = ($signed(add_ln153_265_fu_6096_p2) + $signed(sext_ln151_322_fu_6084_p1));

assign add_ln153_267_fu_6112_p2 = ($signed(sext_ln153_191_fu_6108_p1) + $signed(add_ln153_264_fu_6090_p2));

assign add_ln153_268_fu_5181_p2 = ($signed(sext_ln151_315_fu_5003_p1) + $signed(sext_ln151_314_fu_4985_p1));

assign add_ln153_269_fu_5187_p2 = ($signed(add_ln153_268_fu_5181_p2) + $signed(sext_ln151_320_fu_5089_p1));

assign add_ln153_270_fu_5193_p2 = ($signed(sext_ln151_316_fu_5021_p1) + $signed(sext_ln151_318_fu_5057_p1));

assign add_ln153_271_fu_5199_p2 = ($signed(sext_ln151_317_fu_5039_p1) + $signed(sext_ln153_189_fu_5171_p1));

assign add_ln153_272_fu_6127_p2 = ($signed(sext_ln153_194_fu_6124_p1) + $signed(sext_ln153_193_fu_6121_p1));

assign add_ln153_273_fu_6133_p2 = ($signed(add_ln153_272_fu_6127_p2) + $signed(sext_ln153_192_fu_6118_p1));

assign add_ln153_274_fu_6143_p2 = ($signed(sext_ln153_195_fu_6139_p1) + $signed(add_ln153_267_fu_6112_p2));

assign add_ln153_275_fu_5409_p2 = ($signed(sext_ln151_334_fu_5369_p1) + $signed(sext_ln151_335_fu_5387_p1));

assign add_ln153_276_fu_6161_p2 = ($signed(sext_ln153_197_fu_6158_p1) + $signed(select_ln126_fu_5514_p3));

assign add_ln153_277_fu_6167_p2 = ($signed(sext_ln151_330_fu_6149_p1) + $signed(sext_ln151_332_fu_6152_p1));

assign add_ln153_278_fu_6173_p2 = ($signed(add_ln153_277_fu_6167_p2) + $signed(sext_ln151_333_fu_6155_p1));

assign add_ln153_279_fu_6183_p2 = ($signed(sext_ln153_198_fu_6179_p1) + $signed(add_ln153_276_fu_6161_p2));

assign add_ln153_280_fu_5415_p2 = ($signed(sext_ln151_326_fu_5237_p1) + $signed(sext_ln151_325_fu_5219_p1));

assign add_ln153_281_fu_5421_p2 = ($signed(add_ln153_280_fu_5415_p2) + $signed(sext_ln151_331_fu_5323_p1));

assign add_ln153_282_fu_5427_p2 = ($signed(sext_ln151_327_fu_5255_p1) + $signed(sext_ln151_329_fu_5291_p1));

assign add_ln153_283_fu_5433_p2 = ($signed(sext_ln151_328_fu_5273_p1) + $signed(sext_ln153_196_fu_5405_p1));

assign add_ln153_284_fu_6198_p2 = ($signed(sext_ln153_201_fu_6195_p1) + $signed(sext_ln153_200_fu_6192_p1));

assign add_ln153_285_fu_6204_p2 = ($signed(add_ln153_284_fu_6198_p2) + $signed(sext_ln153_199_fu_6189_p1));

assign add_ln153_286_fu_6214_p2 = ($signed(sext_ln153_202_fu_6210_p1) + $signed(add_ln153_279_fu_6183_p2));

assign add_ln153_fu_1731_p2 = ($signed(sext_ln151_213_fu_1657_p1) + $signed(sext_ln151_214_fu_1692_p1));

assign and_ln120_fu_917_p2 = (xor_ln120_fu_906_p2 & icmp_ln122_fu_911_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (cache_window_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln161_reg_6695_pp0_iter4_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_442 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_503 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_o_bias_arr_663_address0 = zext_ln121_fu_984_p1;

assign attn_inst_matmul_gen_o_weight_arr_662_address0 = zext_ln151_3_fu_1008_p1;

assign icmp_ln120_fu_837_p2 = ((ap_sig_allocacmp_indvar_flatten35_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_843_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_911_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_1013_p2 = ((select_ln121_reg_6532 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_1258_p2 = ((select_ln121_reg_6532 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = {{{{{{{{{{{{add_ln153_286_reg_7109}, {add_ln153_274_reg_7104}}, {add_ln153_262_reg_7099}}, {add_ln153_250_reg_7094}}, {add_ln153_238_reg_7089}}, {add_ln153_226_reg_7084}}, {add_ln153_214_reg_7079}}, {add_ln153_202_reg_7074}}, {add_ln153_190_reg_7069}}, {add_ln153_178_reg_7064}}, {add_ln153_166_reg_7059}}, {add_ln153_154_reg_7054}};

assign mul_res_342_fu_1371_p0 = sext_ln151_86_fu_1359_p1;

assign mul_res_342_fu_1371_p1 = sext_ln151_85_fu_1356_p1;

assign mul_res_343_fu_1406_p0 = sext_ln151_88_fu_1394_p1;

assign mul_res_343_fu_1406_p1 = sext_ln151_87_fu_1391_p1;

assign mul_res_344_fu_1441_p0 = sext_ln151_90_fu_1429_p1;

assign mul_res_344_fu_1441_p1 = sext_ln151_89_fu_1426_p1;

assign mul_res_345_fu_1476_p0 = sext_ln151_92_fu_1464_p1;

assign mul_res_345_fu_1476_p1 = sext_ln151_91_fu_1461_p1;

assign mul_res_346_fu_1511_p0 = sext_ln151_94_fu_1499_p1;

assign mul_res_346_fu_1511_p1 = sext_ln151_93_fu_1496_p1;

assign mul_res_347_fu_1546_p0 = sext_ln151_96_fu_1534_p1;

assign mul_res_347_fu_1546_p1 = sext_ln151_95_fu_1531_p1;

assign mul_res_348_fu_1581_p0 = sext_ln151_98_fu_1569_p1;

assign mul_res_348_fu_1581_p1 = sext_ln151_97_fu_1566_p1;

assign mul_res_349_fu_1616_p0 = sext_ln151_100_fu_1604_p1;

assign mul_res_349_fu_1616_p1 = sext_ln151_99_fu_1601_p1;

assign mul_res_350_fu_1651_p0 = sext_ln151_102_fu_1639_p1;

assign mul_res_350_fu_1651_p1 = sext_ln151_101_fu_1636_p1;

assign mul_res_351_fu_1686_p0 = sext_ln151_104_fu_1674_p1;

assign mul_res_351_fu_1686_p1 = sext_ln151_103_fu_1671_p1;

assign mul_res_352_fu_1721_p0 = sext_ln151_106_fu_1709_p1;

assign mul_res_352_fu_1721_p1 = sext_ln151_105_fu_1706_p1;

assign mul_res_353_fu_1795_p0 = sext_ln151_107_fu_1783_p1;

assign mul_res_353_fu_1795_p1 = sext_ln151_fu_1321_p1;

assign mul_res_354_fu_1827_p0 = sext_ln151_108_fu_1815_p1;

assign mul_res_354_fu_1827_p1 = sext_ln151_85_fu_1356_p1;

assign mul_res_355_fu_1859_p0 = sext_ln151_109_fu_1847_p1;

assign mul_res_355_fu_1859_p1 = sext_ln151_87_fu_1391_p1;

assign mul_res_356_fu_1891_p0 = sext_ln151_110_fu_1879_p1;

assign mul_res_356_fu_1891_p1 = sext_ln151_89_fu_1426_p1;

assign mul_res_357_fu_1923_p0 = sext_ln151_111_fu_1911_p1;

assign mul_res_357_fu_1923_p1 = sext_ln151_91_fu_1461_p1;

assign mul_res_358_fu_1955_p0 = sext_ln151_112_fu_1943_p1;

assign mul_res_358_fu_1955_p1 = sext_ln151_93_fu_1496_p1;

assign mul_res_359_fu_1987_p0 = sext_ln151_113_fu_1975_p1;

assign mul_res_359_fu_1987_p1 = sext_ln151_95_fu_1531_p1;

assign mul_res_360_fu_2019_p0 = sext_ln151_114_fu_2007_p1;

assign mul_res_360_fu_2019_p1 = sext_ln151_97_fu_1566_p1;

assign mul_res_361_fu_2051_p0 = sext_ln151_115_fu_2039_p1;

assign mul_res_361_fu_2051_p1 = sext_ln151_99_fu_1601_p1;

assign mul_res_362_fu_2083_p0 = sext_ln151_116_fu_2071_p1;

assign mul_res_362_fu_2083_p1 = sext_ln151_101_fu_1636_p1;

assign mul_res_363_fu_2115_p0 = sext_ln151_117_fu_2103_p1;

assign mul_res_363_fu_2115_p1 = sext_ln151_103_fu_1671_p1;

assign mul_res_364_fu_2147_p0 = sext_ln151_118_fu_2135_p1;

assign mul_res_364_fu_2147_p1 = sext_ln151_105_fu_1706_p1;

assign mul_res_365_fu_2221_p0 = sext_ln151_119_fu_2209_p1;

assign mul_res_365_fu_2221_p1 = sext_ln151_fu_1321_p1;

assign mul_res_366_fu_2253_p0 = sext_ln151_120_fu_2241_p1;

assign mul_res_366_fu_2253_p1 = sext_ln151_85_fu_1356_p1;

assign mul_res_367_fu_2285_p0 = sext_ln151_121_fu_2273_p1;

assign mul_res_367_fu_2285_p1 = sext_ln151_87_fu_1391_p1;

assign mul_res_368_fu_2317_p0 = sext_ln151_122_fu_2305_p1;

assign mul_res_368_fu_2317_p1 = sext_ln151_89_fu_1426_p1;

assign mul_res_369_fu_2349_p0 = sext_ln151_123_fu_2337_p1;

assign mul_res_369_fu_2349_p1 = sext_ln151_91_fu_1461_p1;

assign mul_res_370_fu_2381_p0 = sext_ln151_124_fu_2369_p1;

assign mul_res_370_fu_2381_p1 = sext_ln151_93_fu_1496_p1;

assign mul_res_371_fu_2413_p0 = sext_ln151_125_fu_2401_p1;

assign mul_res_371_fu_2413_p1 = sext_ln151_95_fu_1531_p1;

assign mul_res_372_fu_2445_p0 = sext_ln151_126_fu_2433_p1;

assign mul_res_372_fu_2445_p1 = sext_ln151_97_fu_1566_p1;

assign mul_res_373_fu_2477_p0 = sext_ln151_127_fu_2465_p1;

assign mul_res_373_fu_2477_p1 = sext_ln151_99_fu_1601_p1;

assign mul_res_374_fu_2509_p0 = sext_ln151_128_fu_2497_p1;

assign mul_res_374_fu_2509_p1 = sext_ln151_101_fu_1636_p1;

assign mul_res_375_fu_2541_p0 = sext_ln151_129_fu_2529_p1;

assign mul_res_375_fu_2541_p1 = sext_ln151_103_fu_1671_p1;

assign mul_res_376_fu_2573_p0 = sext_ln151_130_fu_2561_p1;

assign mul_res_376_fu_2573_p1 = sext_ln151_105_fu_1706_p1;

assign mul_res_377_fu_2647_p0 = sext_ln151_131_fu_2635_p1;

assign mul_res_377_fu_2647_p1 = sext_ln151_fu_1321_p1;

assign mul_res_378_fu_2679_p0 = sext_ln151_132_fu_2667_p1;

assign mul_res_378_fu_2679_p1 = sext_ln151_85_fu_1356_p1;

assign mul_res_379_fu_2711_p0 = sext_ln151_133_fu_2699_p1;

assign mul_res_379_fu_2711_p1 = sext_ln151_87_fu_1391_p1;

assign mul_res_380_fu_2743_p0 = sext_ln151_134_fu_2731_p1;

assign mul_res_380_fu_2743_p1 = sext_ln151_89_fu_1426_p1;

assign mul_res_381_fu_2775_p0 = sext_ln151_135_fu_2763_p1;

assign mul_res_381_fu_2775_p1 = sext_ln151_91_fu_1461_p1;

assign mul_res_382_fu_2807_p0 = sext_ln151_136_fu_2795_p1;

assign mul_res_382_fu_2807_p1 = sext_ln151_93_fu_1496_p1;

assign mul_res_383_fu_2839_p0 = sext_ln151_137_fu_2827_p1;

assign mul_res_383_fu_2839_p1 = sext_ln151_95_fu_1531_p1;

assign mul_res_384_fu_2871_p0 = sext_ln151_138_fu_2859_p1;

assign mul_res_384_fu_2871_p1 = sext_ln151_97_fu_1566_p1;

assign mul_res_385_fu_2903_p0 = sext_ln151_139_fu_2891_p1;

assign mul_res_385_fu_2903_p1 = sext_ln151_99_fu_1601_p1;

assign mul_res_386_fu_2935_p0 = sext_ln151_140_fu_2923_p1;

assign mul_res_386_fu_2935_p1 = sext_ln151_101_fu_1636_p1;

assign mul_res_387_fu_2967_p0 = sext_ln151_141_fu_2955_p1;

assign mul_res_387_fu_2967_p1 = sext_ln151_103_fu_1671_p1;

assign mul_res_388_fu_2999_p0 = sext_ln151_142_fu_2987_p1;

assign mul_res_388_fu_2999_p1 = sext_ln151_105_fu_1706_p1;

assign mul_res_389_fu_3073_p0 = sext_ln151_143_fu_3061_p1;

assign mul_res_389_fu_3073_p1 = sext_ln151_fu_1321_p1;

assign mul_res_390_fu_3105_p0 = sext_ln151_144_fu_3093_p1;

assign mul_res_390_fu_3105_p1 = sext_ln151_85_fu_1356_p1;

assign mul_res_391_fu_3137_p0 = sext_ln151_145_fu_3125_p1;

assign mul_res_391_fu_3137_p1 = sext_ln151_87_fu_1391_p1;

assign mul_res_392_fu_3169_p0 = sext_ln151_146_fu_3157_p1;

assign mul_res_392_fu_3169_p1 = sext_ln151_89_fu_1426_p1;

assign mul_res_393_fu_3201_p0 = sext_ln151_147_fu_3189_p1;

assign mul_res_393_fu_3201_p1 = sext_ln151_91_fu_1461_p1;

assign mul_res_394_fu_3233_p0 = sext_ln151_148_fu_3221_p1;

assign mul_res_394_fu_3233_p1 = sext_ln151_93_fu_1496_p1;

assign mul_res_395_fu_3265_p0 = sext_ln151_149_fu_3253_p1;

assign mul_res_395_fu_3265_p1 = sext_ln151_95_fu_1531_p1;

assign mul_res_396_fu_3297_p0 = sext_ln151_150_fu_3285_p1;

assign mul_res_396_fu_3297_p1 = sext_ln151_97_fu_1566_p1;

assign mul_res_397_fu_3329_p0 = sext_ln151_151_fu_3317_p1;

assign mul_res_397_fu_3329_p1 = sext_ln151_99_fu_1601_p1;

assign mul_res_398_fu_3361_p0 = sext_ln151_152_fu_3349_p1;

assign mul_res_398_fu_3361_p1 = sext_ln151_101_fu_1636_p1;

assign mul_res_399_fu_3393_p0 = sext_ln151_153_fu_3381_p1;

assign mul_res_399_fu_3393_p1 = sext_ln151_103_fu_1671_p1;

assign mul_res_400_fu_3425_p0 = sext_ln151_154_fu_3413_p1;

assign mul_res_400_fu_3425_p1 = sext_ln151_105_fu_1706_p1;

assign mul_res_401_fu_3499_p0 = sext_ln151_155_fu_3487_p1;

assign mul_res_401_fu_3499_p1 = sext_ln151_fu_1321_p1;

assign mul_res_402_fu_3531_p0 = sext_ln151_156_fu_3519_p1;

assign mul_res_402_fu_3531_p1 = sext_ln151_85_fu_1356_p1;

assign mul_res_403_fu_3563_p0 = sext_ln151_157_fu_3551_p1;

assign mul_res_403_fu_3563_p1 = sext_ln151_87_fu_1391_p1;

assign mul_res_404_fu_3595_p0 = sext_ln151_158_fu_3583_p1;

assign mul_res_404_fu_3595_p1 = sext_ln151_89_fu_1426_p1;

assign mul_res_405_fu_3627_p0 = sext_ln151_159_fu_3615_p1;

assign mul_res_405_fu_3627_p1 = sext_ln151_91_fu_1461_p1;

assign mul_res_406_fu_3659_p0 = sext_ln151_160_fu_3647_p1;

assign mul_res_406_fu_3659_p1 = sext_ln151_93_fu_1496_p1;

assign mul_res_407_fu_3691_p0 = sext_ln151_161_fu_3679_p1;

assign mul_res_407_fu_3691_p1 = sext_ln151_95_fu_1531_p1;

assign mul_res_408_fu_3723_p0 = sext_ln151_162_fu_3711_p1;

assign mul_res_408_fu_3723_p1 = sext_ln151_97_fu_1566_p1;

assign mul_res_409_fu_3755_p0 = sext_ln151_163_fu_3743_p1;

assign mul_res_409_fu_3755_p1 = sext_ln151_99_fu_1601_p1;

assign mul_res_410_fu_3787_p0 = sext_ln151_164_fu_3775_p1;

assign mul_res_410_fu_3787_p1 = sext_ln151_101_fu_1636_p1;

assign mul_res_411_fu_3819_p0 = sext_ln151_165_fu_3807_p1;

assign mul_res_411_fu_3819_p1 = sext_ln151_103_fu_1671_p1;

assign mul_res_412_fu_3851_p0 = sext_ln151_166_fu_3839_p1;

assign mul_res_412_fu_3851_p1 = sext_ln151_105_fu_1706_p1;

assign mul_res_413_fu_3914_p0 = sext_ln151_84_fu_1324_p1;

assign mul_res_413_fu_3914_p1 = sext_ln151_167_fu_3903_p1;

assign mul_res_414_fu_3935_p0 = sext_ln151_86_fu_1359_p1;

assign mul_res_414_fu_3935_p1 = sext_ln151_168_fu_3924_p1;

assign mul_res_415_fu_3956_p0 = sext_ln151_88_fu_1394_p1;

assign mul_res_415_fu_3956_p1 = sext_ln151_169_fu_3945_p1;

assign mul_res_416_fu_3977_p0 = sext_ln151_90_fu_1429_p1;

assign mul_res_416_fu_3977_p1 = sext_ln151_170_fu_3966_p1;

assign mul_res_417_fu_3998_p0 = sext_ln151_92_fu_1464_p1;

assign mul_res_417_fu_3998_p1 = sext_ln151_171_fu_3987_p1;

assign mul_res_418_fu_4019_p0 = sext_ln151_94_fu_1499_p1;

assign mul_res_418_fu_4019_p1 = sext_ln151_172_fu_4008_p1;

assign mul_res_419_fu_4040_p0 = sext_ln151_96_fu_1534_p1;

assign mul_res_419_fu_4040_p1 = sext_ln151_173_fu_4029_p1;

assign mul_res_420_fu_4061_p0 = sext_ln151_98_fu_1569_p1;

assign mul_res_420_fu_4061_p1 = sext_ln151_174_fu_4050_p1;

assign mul_res_421_fu_4082_p0 = sext_ln151_100_fu_1604_p1;

assign mul_res_421_fu_4082_p1 = sext_ln151_175_fu_4071_p1;

assign mul_res_422_fu_4103_p0 = sext_ln151_102_fu_1639_p1;

assign mul_res_422_fu_4103_p1 = sext_ln151_176_fu_4092_p1;

assign mul_res_423_fu_4124_p0 = sext_ln151_104_fu_1674_p1;

assign mul_res_423_fu_4124_p1 = sext_ln151_177_fu_4113_p1;

assign mul_res_424_fu_4145_p0 = sext_ln151_106_fu_1709_p1;

assign mul_res_424_fu_4145_p1 = sext_ln151_178_fu_4134_p1;

assign mul_res_425_fu_4205_p0 = sext_ln151_107_fu_1783_p1;

assign mul_res_425_fu_4205_p1 = sext_ln151_167_fu_3903_p1;

assign mul_res_426_fu_4223_p0 = sext_ln151_108_fu_1815_p1;

assign mul_res_426_fu_4223_p1 = sext_ln151_168_fu_3924_p1;

assign mul_res_427_fu_4241_p0 = sext_ln151_109_fu_1847_p1;

assign mul_res_427_fu_4241_p1 = sext_ln151_169_fu_3945_p1;

assign mul_res_428_fu_4259_p0 = sext_ln151_110_fu_1879_p1;

assign mul_res_428_fu_4259_p1 = sext_ln151_170_fu_3966_p1;

assign mul_res_429_fu_4277_p0 = sext_ln151_111_fu_1911_p1;

assign mul_res_429_fu_4277_p1 = sext_ln151_171_fu_3987_p1;

assign mul_res_430_fu_4295_p0 = sext_ln151_112_fu_1943_p1;

assign mul_res_430_fu_4295_p1 = sext_ln151_172_fu_4008_p1;

assign mul_res_431_fu_4313_p0 = sext_ln151_113_fu_1975_p1;

assign mul_res_431_fu_4313_p1 = sext_ln151_173_fu_4029_p1;

assign mul_res_432_fu_4331_p0 = sext_ln151_114_fu_2007_p1;

assign mul_res_432_fu_4331_p1 = sext_ln151_174_fu_4050_p1;

assign mul_res_433_fu_4349_p0 = sext_ln151_115_fu_2039_p1;

assign mul_res_433_fu_4349_p1 = sext_ln151_175_fu_4071_p1;

assign mul_res_434_fu_4367_p0 = sext_ln151_116_fu_2071_p1;

assign mul_res_434_fu_4367_p1 = sext_ln151_176_fu_4092_p1;

assign mul_res_435_fu_4385_p0 = sext_ln151_117_fu_2103_p1;

assign mul_res_435_fu_4385_p1 = sext_ln151_177_fu_4113_p1;

assign mul_res_436_fu_4403_p0 = sext_ln151_118_fu_2135_p1;

assign mul_res_436_fu_4403_p1 = sext_ln151_178_fu_4134_p1;

assign mul_res_437_fu_4463_p0 = sext_ln151_119_fu_2209_p1;

assign mul_res_437_fu_4463_p1 = sext_ln151_167_fu_3903_p1;

assign mul_res_438_fu_4481_p0 = sext_ln151_120_fu_2241_p1;

assign mul_res_438_fu_4481_p1 = sext_ln151_168_fu_3924_p1;

assign mul_res_439_fu_4499_p0 = sext_ln151_121_fu_2273_p1;

assign mul_res_439_fu_4499_p1 = sext_ln151_169_fu_3945_p1;

assign mul_res_440_fu_4517_p0 = sext_ln151_122_fu_2305_p1;

assign mul_res_440_fu_4517_p1 = sext_ln151_170_fu_3966_p1;

assign mul_res_441_fu_4535_p0 = sext_ln151_123_fu_2337_p1;

assign mul_res_441_fu_4535_p1 = sext_ln151_171_fu_3987_p1;

assign mul_res_442_fu_4553_p0 = sext_ln151_124_fu_2369_p1;

assign mul_res_442_fu_4553_p1 = sext_ln151_172_fu_4008_p1;

assign mul_res_443_fu_4571_p0 = sext_ln151_125_fu_2401_p1;

assign mul_res_443_fu_4571_p1 = sext_ln151_173_fu_4029_p1;

assign mul_res_444_fu_4589_p0 = sext_ln151_126_fu_2433_p1;

assign mul_res_444_fu_4589_p1 = sext_ln151_174_fu_4050_p1;

assign mul_res_445_fu_4607_p0 = sext_ln151_127_fu_2465_p1;

assign mul_res_445_fu_4607_p1 = sext_ln151_175_fu_4071_p1;

assign mul_res_446_fu_4625_p0 = sext_ln151_128_fu_2497_p1;

assign mul_res_446_fu_4625_p1 = sext_ln151_176_fu_4092_p1;

assign mul_res_447_fu_4643_p0 = sext_ln151_129_fu_2529_p1;

assign mul_res_447_fu_4643_p1 = sext_ln151_177_fu_4113_p1;

assign mul_res_448_fu_4661_p0 = sext_ln151_130_fu_2561_p1;

assign mul_res_448_fu_4661_p1 = sext_ln151_178_fu_4134_p1;

assign mul_res_449_fu_4721_p0 = sext_ln151_131_fu_2635_p1;

assign mul_res_449_fu_4721_p1 = sext_ln151_167_fu_3903_p1;

assign mul_res_450_fu_4739_p0 = sext_ln151_132_fu_2667_p1;

assign mul_res_450_fu_4739_p1 = sext_ln151_168_fu_3924_p1;

assign mul_res_451_fu_4757_p0 = sext_ln151_133_fu_2699_p1;

assign mul_res_451_fu_4757_p1 = sext_ln151_169_fu_3945_p1;

assign mul_res_452_fu_4775_p0 = sext_ln151_134_fu_2731_p1;

assign mul_res_452_fu_4775_p1 = sext_ln151_170_fu_3966_p1;

assign mul_res_453_fu_4793_p0 = sext_ln151_135_fu_2763_p1;

assign mul_res_453_fu_4793_p1 = sext_ln151_171_fu_3987_p1;

assign mul_res_454_fu_4811_p0 = sext_ln151_136_fu_2795_p1;

assign mul_res_454_fu_4811_p1 = sext_ln151_172_fu_4008_p1;

assign mul_res_455_fu_4829_p0 = sext_ln151_137_fu_2827_p1;

assign mul_res_455_fu_4829_p1 = sext_ln151_173_fu_4029_p1;

assign mul_res_456_fu_4847_p0 = sext_ln151_138_fu_2859_p1;

assign mul_res_456_fu_4847_p1 = sext_ln151_174_fu_4050_p1;

assign mul_res_457_fu_4865_p0 = sext_ln151_139_fu_2891_p1;

assign mul_res_457_fu_4865_p1 = sext_ln151_175_fu_4071_p1;

assign mul_res_458_fu_4883_p0 = sext_ln151_140_fu_2923_p1;

assign mul_res_458_fu_4883_p1 = sext_ln151_176_fu_4092_p1;

assign mul_res_459_fu_4901_p0 = sext_ln151_141_fu_2955_p1;

assign mul_res_459_fu_4901_p1 = sext_ln151_177_fu_4113_p1;

assign mul_res_460_fu_4919_p0 = sext_ln151_142_fu_2987_p1;

assign mul_res_460_fu_4919_p1 = sext_ln151_178_fu_4134_p1;

assign mul_res_461_fu_4979_p0 = sext_ln151_143_fu_3061_p1;

assign mul_res_461_fu_4979_p1 = sext_ln151_167_fu_3903_p1;

assign mul_res_462_fu_4997_p0 = sext_ln151_144_fu_3093_p1;

assign mul_res_462_fu_4997_p1 = sext_ln151_168_fu_3924_p1;

assign mul_res_463_fu_5015_p0 = sext_ln151_145_fu_3125_p1;

assign mul_res_463_fu_5015_p1 = sext_ln151_169_fu_3945_p1;

assign mul_res_464_fu_5033_p0 = sext_ln151_146_fu_3157_p1;

assign mul_res_464_fu_5033_p1 = sext_ln151_170_fu_3966_p1;

assign mul_res_465_fu_5051_p0 = sext_ln151_147_fu_3189_p1;

assign mul_res_465_fu_5051_p1 = sext_ln151_171_fu_3987_p1;

assign mul_res_466_fu_5069_p0 = sext_ln151_148_fu_3221_p1;

assign mul_res_466_fu_5069_p1 = sext_ln151_172_fu_4008_p1;

assign mul_res_467_fu_5083_p0 = sext_ln151_149_fu_3253_p1;

assign mul_res_467_fu_5083_p1 = sext_ln151_173_fu_4029_p1;

assign mul_res_468_fu_5101_p0 = sext_ln151_150_fu_3285_p1;

assign mul_res_468_fu_5101_p1 = sext_ln151_174_fu_4050_p1;

assign mul_res_469_fu_5115_p0 = sext_ln151_151_fu_3317_p1;

assign mul_res_469_fu_5115_p1 = sext_ln151_175_fu_4071_p1;

assign mul_res_470_fu_5129_p0 = sext_ln151_152_fu_3349_p1;

assign mul_res_470_fu_5129_p1 = sext_ln151_176_fu_4092_p1;

assign mul_res_471_fu_5147_p0 = sext_ln151_153_fu_3381_p1;

assign mul_res_471_fu_5147_p1 = sext_ln151_177_fu_4113_p1;

assign mul_res_472_fu_5165_p0 = sext_ln151_154_fu_3413_p1;

assign mul_res_472_fu_5165_p1 = sext_ln151_178_fu_4134_p1;

assign mul_res_473_fu_5213_p0 = sext_ln151_155_fu_3487_p1;

assign mul_res_473_fu_5213_p1 = sext_ln151_167_fu_3903_p1;

assign mul_res_474_fu_5231_p0 = sext_ln151_156_fu_3519_p1;

assign mul_res_474_fu_5231_p1 = sext_ln151_168_fu_3924_p1;

assign mul_res_475_fu_5249_p0 = sext_ln151_157_fu_3551_p1;

assign mul_res_475_fu_5249_p1 = sext_ln151_169_fu_3945_p1;

assign mul_res_476_fu_5267_p0 = sext_ln151_158_fu_3583_p1;

assign mul_res_476_fu_5267_p1 = sext_ln151_170_fu_3966_p1;

assign mul_res_477_fu_5285_p0 = sext_ln151_159_fu_3615_p1;

assign mul_res_477_fu_5285_p1 = sext_ln151_171_fu_3987_p1;

assign mul_res_478_fu_5303_p0 = sext_ln151_160_fu_3647_p1;

assign mul_res_478_fu_5303_p1 = sext_ln151_172_fu_4008_p1;

assign mul_res_479_fu_5317_p0 = sext_ln151_161_fu_3679_p1;

assign mul_res_479_fu_5317_p1 = sext_ln151_173_fu_4029_p1;

assign mul_res_480_fu_5335_p0 = sext_ln151_162_fu_3711_p1;

assign mul_res_480_fu_5335_p1 = sext_ln151_174_fu_4050_p1;

assign mul_res_481_fu_5349_p0 = sext_ln151_163_fu_3743_p1;

assign mul_res_481_fu_5349_p1 = sext_ln151_175_fu_4071_p1;

assign mul_res_482_fu_5363_p0 = sext_ln151_164_fu_3775_p1;

assign mul_res_482_fu_5363_p1 = sext_ln151_176_fu_4092_p1;

assign mul_res_483_fu_5381_p0 = sext_ln151_165_fu_3807_p1;

assign mul_res_483_fu_5381_p1 = sext_ln151_177_fu_4113_p1;

assign mul_res_484_fu_5399_p0 = sext_ln151_166_fu_3839_p1;

assign mul_res_484_fu_5399_p1 = sext_ln151_178_fu_4134_p1;

assign mul_res_fu_1336_p0 = sext_ln151_84_fu_1324_p1;

assign mul_res_fu_1336_p1 = sext_ln151_fu_1321_p1;

assign or_ln121_fu_929_p2 = (icmp_ln121_reg_6525 | and_ln120_fu_917_p2);

assign select_ln120_fu_899_p3 = ((icmp_ln121_reg_6525[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cot_load);

assign select_ln121_5_fu_942_p3 = ((and_ln120_fu_917_p2[0:0] == 1'b1) ? add_ln121_fu_923_p2 : select_ln120_fu_899_p3);

assign select_ln121_6_fu_855_p3 = ((icmp_ln121_fu_843_p2[0:0] == 1'b1) ? 11'd1 : add_ln121_3_fu_849_p2);

assign select_ln121_fu_934_p3 = ((or_ln121_fu_929_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign select_ln126_24_fu_5521_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_85_reg_6723 : p_0_0_0_4384_fu_712);

assign select_ln126_25_fu_5527_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_84_reg_6717 : p_0_0_0_3382_fu_708);

assign select_ln126_26_fu_5533_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_83_reg_6711 : p_0_0_0_2380_fu_704);

assign select_ln126_27_fu_5539_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6705 : p_0_0_0_112378_fu_700);

assign select_ln126_28_fu_5545_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6699 : p_0_0_0376_fu_696);

assign select_ln126_29_fu_5551_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_5511_p1 : p_0_0_0_5374_fu_692);

assign select_ln126_30_fu_5558_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_85_reg_6723 : p_0_0_0_4372_fu_688);

assign select_ln126_31_fu_5564_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_84_reg_6717 : p_0_0_0_3370_fu_684);

assign select_ln126_32_fu_5570_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_83_reg_6711 : p_0_0_0_2368_fu_680);

assign select_ln126_33_fu_5576_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6705 : p_0_0_0_112366_fu_676);

assign select_ln126_34_fu_5582_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6699 : p_0_0_0364_fu_672);

assign select_ln126_fu_5514_p3 = ((icmp_ln126_reg_6559_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_5511_p1 : p_0_0_0_5386_fu_716);

assign sext_ln131_fu_5511_p1 = $signed(tmp_159_reg_6729);

assign sext_ln151_100_fu_1604_p1 = $signed(tmp_171_fu_1591_p4);

assign sext_ln151_101_fu_1636_p1 = $signed(trunc_ln137_20_reg_6620);

assign sext_ln151_102_fu_1639_p1 = $signed(tmp_172_fu_1626_p4);

assign sext_ln151_103_fu_1671_p1 = $signed(trunc_ln137_s_reg_6625);

assign sext_ln151_104_fu_1674_p1 = $signed(tmp_173_fu_1661_p4);

assign sext_ln151_105_fu_1706_p1 = $signed(trunc_ln137_21_reg_6630);

assign sext_ln151_106_fu_1709_p1 = $signed(tmp_174_fu_1696_p4);

assign sext_ln151_107_fu_1783_p1 = $signed(tmp_175_fu_1773_p4);

assign sext_ln151_108_fu_1815_p1 = $signed(tmp_176_fu_1805_p4);

assign sext_ln151_109_fu_1847_p1 = $signed(tmp_177_fu_1837_p4);

assign sext_ln151_110_fu_1879_p1 = $signed(tmp_178_fu_1869_p4);

assign sext_ln151_111_fu_1911_p1 = $signed(tmp_179_fu_1901_p4);

assign sext_ln151_112_fu_1943_p1 = $signed(tmp_180_fu_1933_p4);

assign sext_ln151_113_fu_1975_p1 = $signed(tmp_181_fu_1965_p4);

assign sext_ln151_114_fu_2007_p1 = $signed(tmp_182_fu_1997_p4);

assign sext_ln151_115_fu_2039_p1 = $signed(tmp_183_fu_2029_p4);

assign sext_ln151_116_fu_2071_p1 = $signed(tmp_184_fu_2061_p4);

assign sext_ln151_117_fu_2103_p1 = $signed(tmp_185_fu_2093_p4);

assign sext_ln151_118_fu_2135_p1 = $signed(tmp_186_fu_2125_p4);

assign sext_ln151_119_fu_2209_p1 = $signed(tmp_187_fu_2199_p4);

assign sext_ln151_120_fu_2241_p1 = $signed(tmp_188_fu_2231_p4);

assign sext_ln151_121_fu_2273_p1 = $signed(tmp_189_fu_2263_p4);

assign sext_ln151_122_fu_2305_p1 = $signed(tmp_190_fu_2295_p4);

assign sext_ln151_123_fu_2337_p1 = $signed(tmp_191_fu_2327_p4);

assign sext_ln151_124_fu_2369_p1 = $signed(tmp_192_fu_2359_p4);

assign sext_ln151_125_fu_2401_p1 = $signed(tmp_193_fu_2391_p4);

assign sext_ln151_126_fu_2433_p1 = $signed(tmp_194_fu_2423_p4);

assign sext_ln151_127_fu_2465_p1 = $signed(tmp_195_fu_2455_p4);

assign sext_ln151_128_fu_2497_p1 = $signed(tmp_196_fu_2487_p4);

assign sext_ln151_129_fu_2529_p1 = $signed(tmp_197_fu_2519_p4);

assign sext_ln151_130_fu_2561_p1 = $signed(tmp_198_fu_2551_p4);

assign sext_ln151_131_fu_2635_p1 = $signed(tmp_199_fu_2625_p4);

assign sext_ln151_132_fu_2667_p1 = $signed(tmp_200_fu_2657_p4);

assign sext_ln151_133_fu_2699_p1 = $signed(tmp_201_fu_2689_p4);

assign sext_ln151_134_fu_2731_p1 = $signed(tmp_202_fu_2721_p4);

assign sext_ln151_135_fu_2763_p1 = $signed(tmp_203_fu_2753_p4);

assign sext_ln151_136_fu_2795_p1 = $signed(tmp_204_fu_2785_p4);

assign sext_ln151_137_fu_2827_p1 = $signed(tmp_205_fu_2817_p4);

assign sext_ln151_138_fu_2859_p1 = $signed(tmp_206_fu_2849_p4);

assign sext_ln151_139_fu_2891_p1 = $signed(tmp_207_fu_2881_p4);

assign sext_ln151_140_fu_2923_p1 = $signed(tmp_208_fu_2913_p4);

assign sext_ln151_141_fu_2955_p1 = $signed(tmp_209_fu_2945_p4);

assign sext_ln151_142_fu_2987_p1 = $signed(tmp_210_fu_2977_p4);

assign sext_ln151_143_fu_3061_p1 = $signed(tmp_211_fu_3051_p4);

assign sext_ln151_144_fu_3093_p1 = $signed(tmp_212_fu_3083_p4);

assign sext_ln151_145_fu_3125_p1 = $signed(tmp_213_fu_3115_p4);

assign sext_ln151_146_fu_3157_p1 = $signed(tmp_214_fu_3147_p4);

assign sext_ln151_147_fu_3189_p1 = $signed(tmp_215_fu_3179_p4);

assign sext_ln151_148_fu_3221_p1 = $signed(tmp_216_fu_3211_p4);

assign sext_ln151_149_fu_3253_p1 = $signed(tmp_217_fu_3243_p4);

assign sext_ln151_150_fu_3285_p1 = $signed(tmp_218_fu_3275_p4);

assign sext_ln151_151_fu_3317_p1 = $signed(tmp_219_fu_3307_p4);

assign sext_ln151_152_fu_3349_p1 = $signed(tmp_220_fu_3339_p4);

assign sext_ln151_153_fu_3381_p1 = $signed(tmp_221_fu_3371_p4);

assign sext_ln151_154_fu_3413_p1 = $signed(tmp_222_fu_3403_p4);

assign sext_ln151_155_fu_3487_p1 = $signed(tmp_223_fu_3477_p4);

assign sext_ln151_156_fu_3519_p1 = $signed(tmp_224_fu_3509_p4);

assign sext_ln151_157_fu_3551_p1 = $signed(tmp_225_fu_3541_p4);

assign sext_ln151_158_fu_3583_p1 = $signed(tmp_226_fu_3573_p4);

assign sext_ln151_159_fu_3615_p1 = $signed(tmp_227_fu_3605_p4);

assign sext_ln151_160_fu_3647_p1 = $signed(tmp_228_fu_3637_p4);

assign sext_ln151_161_fu_3679_p1 = $signed(tmp_229_fu_3669_p4);

assign sext_ln151_162_fu_3711_p1 = $signed(tmp_230_fu_3701_p4);

assign sext_ln151_163_fu_3743_p1 = $signed(tmp_231_fu_3733_p4);

assign sext_ln151_164_fu_3775_p1 = $signed(tmp_232_fu_3765_p4);

assign sext_ln151_165_fu_3807_p1 = $signed(tmp_233_fu_3797_p4);

assign sext_ln151_166_fu_3839_p1 = $signed(tmp_234_fu_3829_p4);

assign sext_ln151_167_fu_3903_p1 = $signed(trunc_ln137_22_reg_6635);

assign sext_ln151_168_fu_3924_p1 = $signed(trunc_ln137_23_reg_6640);

assign sext_ln151_169_fu_3945_p1 = $signed(trunc_ln137_24_reg_6645);

assign sext_ln151_170_fu_3966_p1 = $signed(trunc_ln137_25_reg_6650);

assign sext_ln151_171_fu_3987_p1 = $signed(trunc_ln137_26_reg_6655);

assign sext_ln151_172_fu_4008_p1 = $signed(trunc_ln137_27_reg_6660);

assign sext_ln151_173_fu_4029_p1 = $signed(trunc_ln137_28_reg_6665);

assign sext_ln151_174_fu_4050_p1 = $signed(trunc_ln137_29_reg_6670);

assign sext_ln151_175_fu_4071_p1 = $signed(trunc_ln137_30_reg_6675);

assign sext_ln151_176_fu_4092_p1 = $signed(trunc_ln137_31_reg_6680);

assign sext_ln151_177_fu_4113_p1 = $signed(trunc_ln137_32_reg_6685);

assign sext_ln151_178_fu_4134_p1 = $signed(trunc_ln137_33_reg_6690);

assign sext_ln151_204_fu_1342_p1 = mul_res_fu_1336_p2;

assign sext_ln151_205_fu_1377_p1 = mul_res_342_fu_1371_p2;

assign sext_ln151_206_fu_1412_p1 = mul_res_343_fu_1406_p2;

assign sext_ln151_207_fu_1447_p1 = mul_res_344_fu_1441_p2;

assign sext_ln151_208_fu_1482_p1 = mul_res_345_fu_1476_p2;

assign sext_ln151_209_fu_1517_p1 = mul_res_346_fu_1511_p2;

assign sext_ln151_210_fu_1552_p1 = mul_res_347_fu_1546_p2;

assign sext_ln151_211_fu_1587_p1 = mul_res_348_fu_1581_p2;

assign sext_ln151_212_fu_1622_p1 = mul_res_349_fu_1616_p2;

assign sext_ln151_213_fu_1657_p1 = mul_res_350_fu_1651_p2;

assign sext_ln151_214_fu_1692_p1 = mul_res_351_fu_1686_p2;

assign sext_ln151_215_fu_1801_p1 = mul_res_353_fu_1795_p2;

assign sext_ln151_216_fu_1833_p1 = mul_res_354_fu_1827_p2;

assign sext_ln151_217_fu_1865_p1 = mul_res_355_fu_1859_p2;

assign sext_ln151_218_fu_1897_p1 = mul_res_356_fu_1891_p2;

assign sext_ln151_219_fu_1929_p1 = mul_res_357_fu_1923_p2;

assign sext_ln151_220_fu_1961_p1 = mul_res_358_fu_1955_p2;

assign sext_ln151_221_fu_1993_p1 = mul_res_359_fu_1987_p2;

assign sext_ln151_222_fu_2025_p1 = mul_res_360_fu_2019_p2;

assign sext_ln151_223_fu_2057_p1 = mul_res_361_fu_2051_p2;

assign sext_ln151_224_fu_2089_p1 = mul_res_362_fu_2083_p2;

assign sext_ln151_225_fu_2121_p1 = mul_res_363_fu_2115_p2;

assign sext_ln151_226_fu_2227_p1 = mul_res_365_fu_2221_p2;

assign sext_ln151_227_fu_2259_p1 = mul_res_366_fu_2253_p2;

assign sext_ln151_228_fu_2291_p1 = mul_res_367_fu_2285_p2;

assign sext_ln151_229_fu_2323_p1 = mul_res_368_fu_2317_p2;

assign sext_ln151_230_fu_2355_p1 = mul_res_369_fu_2349_p2;

assign sext_ln151_231_fu_2387_p1 = mul_res_370_fu_2381_p2;

assign sext_ln151_232_fu_2419_p1 = mul_res_371_fu_2413_p2;

assign sext_ln151_233_fu_2451_p1 = mul_res_372_fu_2445_p2;

assign sext_ln151_234_fu_2483_p1 = mul_res_373_fu_2477_p2;

assign sext_ln151_235_fu_2515_p1 = mul_res_374_fu_2509_p2;

assign sext_ln151_236_fu_2547_p1 = mul_res_375_fu_2541_p2;

assign sext_ln151_237_fu_2653_p1 = mul_res_377_fu_2647_p2;

assign sext_ln151_238_fu_2685_p1 = mul_res_378_fu_2679_p2;

assign sext_ln151_239_fu_2717_p1 = mul_res_379_fu_2711_p2;

assign sext_ln151_240_fu_2749_p1 = mul_res_380_fu_2743_p2;

assign sext_ln151_241_fu_2781_p1 = mul_res_381_fu_2775_p2;

assign sext_ln151_242_fu_2813_p1 = mul_res_382_fu_2807_p2;

assign sext_ln151_243_fu_2845_p1 = mul_res_383_fu_2839_p2;

assign sext_ln151_244_fu_2877_p1 = mul_res_384_fu_2871_p2;

assign sext_ln151_245_fu_2909_p1 = mul_res_385_fu_2903_p2;

assign sext_ln151_246_fu_2941_p1 = mul_res_386_fu_2935_p2;

assign sext_ln151_247_fu_2973_p1 = mul_res_387_fu_2967_p2;

assign sext_ln151_248_fu_3079_p1 = mul_res_389_fu_3073_p2;

assign sext_ln151_249_fu_3111_p1 = mul_res_390_fu_3105_p2;

assign sext_ln151_250_fu_3143_p1 = mul_res_391_fu_3137_p2;

assign sext_ln151_251_fu_3175_p1 = mul_res_392_fu_3169_p2;

assign sext_ln151_252_fu_3207_p1 = mul_res_393_fu_3201_p2;

assign sext_ln151_253_fu_3239_p1 = mul_res_394_fu_3233_p2;

assign sext_ln151_254_fu_3271_p1 = mul_res_395_fu_3265_p2;

assign sext_ln151_255_fu_3303_p1 = mul_res_396_fu_3297_p2;

assign sext_ln151_256_fu_3335_p1 = mul_res_397_fu_3329_p2;

assign sext_ln151_257_fu_3367_p1 = mul_res_398_fu_3361_p2;

assign sext_ln151_258_fu_3399_p1 = mul_res_399_fu_3393_p2;

assign sext_ln151_259_fu_3505_p1 = mul_res_401_fu_3499_p2;

assign sext_ln151_260_fu_3537_p1 = mul_res_402_fu_3531_p2;

assign sext_ln151_261_fu_3569_p1 = mul_res_403_fu_3563_p2;

assign sext_ln151_262_fu_3601_p1 = mul_res_404_fu_3595_p2;

assign sext_ln151_263_fu_3633_p1 = mul_res_405_fu_3627_p2;

assign sext_ln151_264_fu_3665_p1 = mul_res_406_fu_3659_p2;

assign sext_ln151_265_fu_3697_p1 = mul_res_407_fu_3691_p2;

assign sext_ln151_266_fu_3729_p1 = mul_res_408_fu_3723_p2;

assign sext_ln151_267_fu_3761_p1 = mul_res_409_fu_3755_p2;

assign sext_ln151_268_fu_3793_p1 = mul_res_410_fu_3787_p2;

assign sext_ln151_269_fu_3825_p1 = mul_res_411_fu_3819_p2;

assign sext_ln151_270_fu_3920_p1 = mul_res_413_fu_3914_p2;

assign sext_ln151_271_fu_3941_p1 = mul_res_414_fu_3935_p2;

assign sext_ln151_272_fu_3962_p1 = mul_res_415_fu_3956_p2;

assign sext_ln151_273_fu_3983_p1 = mul_res_416_fu_3977_p2;

assign sext_ln151_274_fu_4004_p1 = mul_res_417_fu_3998_p2;

assign sext_ln151_275_fu_4025_p1 = mul_res_418_fu_4019_p2;

assign sext_ln151_276_fu_4046_p1 = mul_res_419_fu_4040_p2;

assign sext_ln151_277_fu_4067_p1 = mul_res_420_fu_4061_p2;

assign sext_ln151_278_fu_4088_p1 = mul_res_421_fu_4082_p2;

assign sext_ln151_279_fu_4109_p1 = mul_res_422_fu_4103_p2;

assign sext_ln151_280_fu_4130_p1 = mul_res_423_fu_4124_p2;

assign sext_ln151_281_fu_4211_p1 = mul_res_425_fu_4205_p2;

assign sext_ln151_282_fu_4229_p1 = mul_res_426_fu_4223_p2;

assign sext_ln151_283_fu_4247_p1 = mul_res_427_fu_4241_p2;

assign sext_ln151_284_fu_4265_p1 = mul_res_428_fu_4259_p2;

assign sext_ln151_285_fu_4283_p1 = mul_res_429_fu_4277_p2;

assign sext_ln151_286_fu_4301_p1 = mul_res_430_fu_4295_p2;

assign sext_ln151_287_fu_4319_p1 = mul_res_431_fu_4313_p2;

assign sext_ln151_288_fu_4337_p1 = mul_res_432_fu_4331_p2;

assign sext_ln151_289_fu_4355_p1 = mul_res_433_fu_4349_p2;

assign sext_ln151_290_fu_4373_p1 = mul_res_434_fu_4367_p2;

assign sext_ln151_291_fu_4391_p1 = mul_res_435_fu_4385_p2;

assign sext_ln151_292_fu_4469_p1 = mul_res_437_fu_4463_p2;

assign sext_ln151_293_fu_4487_p1 = mul_res_438_fu_4481_p2;

assign sext_ln151_294_fu_4505_p1 = mul_res_439_fu_4499_p2;

assign sext_ln151_295_fu_4523_p1 = mul_res_440_fu_4517_p2;

assign sext_ln151_296_fu_4541_p1 = mul_res_441_fu_4535_p2;

assign sext_ln151_297_fu_4559_p1 = mul_res_442_fu_4553_p2;

assign sext_ln151_298_fu_4577_p1 = mul_res_443_fu_4571_p2;

assign sext_ln151_299_fu_4595_p1 = mul_res_444_fu_4589_p2;

assign sext_ln151_300_fu_4613_p1 = mul_res_445_fu_4607_p2;

assign sext_ln151_301_fu_4631_p1 = mul_res_446_fu_4625_p2;

assign sext_ln151_302_fu_4649_p1 = mul_res_447_fu_4643_p2;

assign sext_ln151_303_fu_4727_p1 = mul_res_449_fu_4721_p2;

assign sext_ln151_304_fu_4745_p1 = mul_res_450_fu_4739_p2;

assign sext_ln151_305_fu_4763_p1 = mul_res_451_fu_4757_p2;

assign sext_ln151_306_fu_4781_p1 = mul_res_452_fu_4775_p2;

assign sext_ln151_307_fu_4799_p1 = mul_res_453_fu_4793_p2;

assign sext_ln151_308_fu_4817_p1 = mul_res_454_fu_4811_p2;

assign sext_ln151_309_fu_4835_p1 = mul_res_455_fu_4829_p2;

assign sext_ln151_310_fu_4853_p1 = mul_res_456_fu_4847_p2;

assign sext_ln151_311_fu_4871_p1 = mul_res_457_fu_4865_p2;

assign sext_ln151_312_fu_4889_p1 = mul_res_458_fu_4883_p2;

assign sext_ln151_313_fu_4907_p1 = mul_res_459_fu_4901_p2;

assign sext_ln151_314_fu_4985_p1 = mul_res_461_fu_4979_p2;

assign sext_ln151_315_fu_5003_p1 = mul_res_462_fu_4997_p2;

assign sext_ln151_316_fu_5021_p1 = mul_res_463_fu_5015_p2;

assign sext_ln151_317_fu_5039_p1 = mul_res_464_fu_5033_p2;

assign sext_ln151_318_fu_5057_p1 = mul_res_465_fu_5051_p2;

assign sext_ln151_319_fu_6078_p1 = mul_res_466_reg_6984;

assign sext_ln151_320_fu_5089_p1 = mul_res_467_fu_5083_p2;

assign sext_ln151_321_fu_6081_p1 = mul_res_468_reg_6989;

assign sext_ln151_322_fu_6084_p1 = mul_res_469_reg_6994;

assign sext_ln151_323_fu_5135_p1 = mul_res_470_fu_5129_p2;

assign sext_ln151_324_fu_5153_p1 = mul_res_471_fu_5147_p2;

assign sext_ln151_325_fu_5219_p1 = mul_res_473_fu_5213_p2;

assign sext_ln151_326_fu_5237_p1 = mul_res_474_fu_5231_p2;

assign sext_ln151_327_fu_5255_p1 = mul_res_475_fu_5249_p2;

assign sext_ln151_328_fu_5273_p1 = mul_res_476_fu_5267_p2;

assign sext_ln151_329_fu_5291_p1 = mul_res_477_fu_5285_p2;

assign sext_ln151_330_fu_6149_p1 = mul_res_478_reg_7019;

assign sext_ln151_331_fu_5323_p1 = mul_res_479_fu_5317_p2;

assign sext_ln151_332_fu_6152_p1 = mul_res_480_reg_7024;

assign sext_ln151_333_fu_6155_p1 = mul_res_481_reg_7029;

assign sext_ln151_334_fu_5369_p1 = mul_res_482_fu_5363_p2;

assign sext_ln151_335_fu_5387_p1 = mul_res_483_fu_5381_p2;

assign sext_ln151_84_fu_1324_p1 = $signed(trunc_ln151_fu_1317_p1);

assign sext_ln151_85_fu_1356_p1 = $signed(trunc_ln137_12_reg_6580);

assign sext_ln151_86_fu_1359_p1 = $signed(tmp_164_fu_1346_p4);

assign sext_ln151_87_fu_1391_p1 = $signed(trunc_ln137_13_reg_6585);

assign sext_ln151_88_fu_1394_p1 = $signed(tmp_165_fu_1381_p4);

assign sext_ln151_89_fu_1426_p1 = $signed(trunc_ln137_14_reg_6590);

assign sext_ln151_90_fu_1429_p1 = $signed(tmp_166_fu_1416_p4);

assign sext_ln151_91_fu_1461_p1 = $signed(trunc_ln137_15_reg_6595);

assign sext_ln151_92_fu_1464_p1 = $signed(tmp_167_fu_1451_p4);

assign sext_ln151_93_fu_1496_p1 = $signed(trunc_ln137_16_reg_6600);

assign sext_ln151_94_fu_1499_p1 = $signed(tmp_168_fu_1486_p4);

assign sext_ln151_95_fu_1531_p1 = $signed(trunc_ln137_17_reg_6605);

assign sext_ln151_96_fu_1534_p1 = $signed(tmp_169_fu_1521_p4);

assign sext_ln151_97_fu_1566_p1 = $signed(trunc_ln137_18_reg_6610);

assign sext_ln151_98_fu_1569_p1 = $signed(tmp_170_fu_1556_p4);

assign sext_ln151_99_fu_1601_p1 = $signed(trunc_ln137_19_reg_6615);

assign sext_ln151_fu_1321_p1 = $signed(trunc_ln137_reg_6575);

assign sext_ln153_120_fu_5588_p1 = $signed(add_ln153_reg_6734);

assign sext_ln153_121_fu_5591_p1 = $signed(add_ln153_146_reg_6739);

assign sext_ln153_122_fu_5600_p1 = $signed(add_ln153_149_reg_6744);

assign sext_ln153_123_fu_5603_p1 = $signed(add_ln153_150_reg_6749);

assign sext_ln153_124_fu_5606_p1 = $signed(add_ln153_151_reg_6754);

assign sext_ln153_125_fu_5621_p1 = $signed(add_ln153_153_fu_5615_p2);

assign sext_ln153_126_fu_2153_p1 = mul_res_364_fu_2147_p2;

assign sext_ln153_127_fu_5637_p1 = $signed(add_ln153_155_reg_6759);

assign sext_ln153_128_fu_5640_p1 = $signed(add_ln153_158_reg_6764);

assign sext_ln153_129_fu_5649_p1 = $signed(add_ln153_161_reg_6769);

assign sext_ln153_130_fu_5652_p1 = $signed(add_ln153_162_reg_6774);

assign sext_ln153_131_fu_5655_p1 = $signed(add_ln153_163_reg_6779);

assign sext_ln153_132_fu_5670_p1 = $signed(add_ln153_165_fu_5664_p2);

assign sext_ln153_133_fu_2579_p1 = mul_res_376_fu_2573_p2;

assign sext_ln153_134_fu_5686_p1 = $signed(add_ln153_167_reg_6784);

assign sext_ln153_135_fu_5689_p1 = $signed(add_ln153_170_reg_6789);

assign sext_ln153_136_fu_5698_p1 = $signed(add_ln153_173_reg_6794);

assign sext_ln153_137_fu_5701_p1 = $signed(add_ln153_174_reg_6799);

assign sext_ln153_138_fu_5704_p1 = $signed(add_ln153_175_reg_6804);

assign sext_ln153_139_fu_5719_p1 = $signed(add_ln153_177_fu_5713_p2);

assign sext_ln153_140_fu_3005_p1 = mul_res_388_fu_2999_p2;

assign sext_ln153_141_fu_5735_p1 = $signed(add_ln153_179_reg_6809);

assign sext_ln153_142_fu_5738_p1 = $signed(add_ln153_182_reg_6814);

assign sext_ln153_143_fu_5747_p1 = $signed(add_ln153_185_reg_6819);

assign sext_ln153_144_fu_5750_p1 = $signed(add_ln153_186_reg_6824);

assign sext_ln153_145_fu_5753_p1 = $signed(add_ln153_187_reg_6829);

assign sext_ln153_146_fu_5768_p1 = $signed(add_ln153_189_fu_5762_p2);

assign sext_ln153_147_fu_3431_p1 = mul_res_400_fu_3425_p2;

assign sext_ln153_148_fu_5784_p1 = $signed(add_ln153_191_reg_6834);

assign sext_ln153_149_fu_5787_p1 = $signed(add_ln153_194_reg_6839);

assign sext_ln153_150_fu_5796_p1 = $signed(add_ln153_197_reg_6844);

assign sext_ln153_151_fu_5799_p1 = $signed(add_ln153_198_reg_6849);

assign sext_ln153_152_fu_5802_p1 = $signed(add_ln153_199_reg_6854);

assign sext_ln153_153_fu_5817_p1 = $signed(add_ln153_201_fu_5811_p2);

assign sext_ln153_154_fu_3857_p1 = mul_res_412_fu_3851_p2;

assign sext_ln153_155_fu_5833_p1 = $signed(add_ln153_203_reg_6859);

assign sext_ln153_156_fu_5836_p1 = $signed(add_ln153_206_reg_6864);

assign sext_ln153_157_fu_5845_p1 = $signed(add_ln153_209_reg_6869);

assign sext_ln153_158_fu_5848_p1 = $signed(add_ln153_210_reg_6874);

assign sext_ln153_159_fu_5851_p1 = $signed(add_ln153_211_reg_6879);

assign sext_ln153_160_fu_5866_p1 = $signed(add_ln153_213_fu_5860_p2);

assign sext_ln153_161_fu_4151_p1 = mul_res_424_fu_4145_p2;

assign sext_ln153_162_fu_5882_p1 = $signed(add_ln153_215_reg_6884);

assign sext_ln153_163_fu_5885_p1 = $signed(add_ln153_218_reg_6889);

assign sext_ln153_164_fu_5894_p1 = $signed(add_ln153_221_reg_6894);

assign sext_ln153_165_fu_5897_p1 = $signed(add_ln153_222_reg_6899);

assign sext_ln153_166_fu_5900_p1 = $signed(add_ln153_223_reg_6904);

assign sext_ln153_167_fu_5915_p1 = $signed(add_ln153_225_fu_5909_p2);

assign sext_ln153_168_fu_4409_p1 = mul_res_436_fu_4403_p2;

assign sext_ln153_169_fu_5931_p1 = $signed(add_ln153_227_reg_6909);

assign sext_ln153_170_fu_5934_p1 = $signed(add_ln153_230_reg_6914);

assign sext_ln153_171_fu_5943_p1 = $signed(add_ln153_233_reg_6919);

assign sext_ln153_172_fu_5946_p1 = $signed(add_ln153_234_reg_6924);

assign sext_ln153_173_fu_5949_p1 = $signed(add_ln153_235_reg_6929);

assign sext_ln153_174_fu_5964_p1 = $signed(add_ln153_237_fu_5958_p2);

assign sext_ln153_175_fu_4667_p1 = mul_res_448_fu_4661_p2;

assign sext_ln153_176_fu_5980_p1 = $signed(add_ln153_239_reg_6934);

assign sext_ln153_177_fu_5983_p1 = $signed(add_ln153_242_reg_6939);

assign sext_ln153_178_fu_5992_p1 = $signed(add_ln153_245_reg_6944);

assign sext_ln153_179_fu_5995_p1 = $signed(add_ln153_246_reg_6949);

assign sext_ln153_180_fu_5998_p1 = $signed(add_ln153_247_reg_6954);

assign sext_ln153_181_fu_6013_p1 = $signed(add_ln153_249_fu_6007_p2);

assign sext_ln153_182_fu_4925_p1 = mul_res_460_fu_4919_p2;

assign sext_ln153_183_fu_6029_p1 = $signed(add_ln153_251_reg_6959);

assign sext_ln153_184_fu_6032_p1 = $signed(add_ln153_254_reg_6964);

assign sext_ln153_185_fu_6041_p1 = $signed(add_ln153_257_reg_6969);

assign sext_ln153_186_fu_6044_p1 = $signed(add_ln153_258_reg_6974);

assign sext_ln153_187_fu_6047_p1 = $signed(add_ln153_259_reg_6979);

assign sext_ln153_188_fu_6062_p1 = $signed(add_ln153_261_fu_6056_p2);

assign sext_ln153_189_fu_5171_p1 = mul_res_472_fu_5165_p2;

assign sext_ln153_190_fu_6087_p1 = $signed(add_ln153_263_reg_6999);

assign sext_ln153_191_fu_6108_p1 = $signed(add_ln153_266_fu_6102_p2);

assign sext_ln153_192_fu_6118_p1 = $signed(add_ln153_269_reg_7004);

assign sext_ln153_193_fu_6121_p1 = $signed(add_ln153_270_reg_7009);

assign sext_ln153_194_fu_6124_p1 = $signed(add_ln153_271_reg_7014);

assign sext_ln153_195_fu_6139_p1 = $signed(add_ln153_273_fu_6133_p2);

assign sext_ln153_196_fu_5405_p1 = mul_res_484_fu_5399_p2;

assign sext_ln153_197_fu_6158_p1 = $signed(add_ln153_275_reg_7034);

assign sext_ln153_198_fu_6179_p1 = $signed(add_ln153_278_fu_6173_p2);

assign sext_ln153_199_fu_6189_p1 = $signed(add_ln153_281_reg_7039);

assign sext_ln153_200_fu_6192_p1 = $signed(add_ln153_282_reg_7044);

assign sext_ln153_201_fu_6195_p1 = $signed(add_ln153_283_reg_7049);

assign sext_ln153_202_fu_6210_p1 = $signed(add_ln153_285_fu_6204_p2);

assign sext_ln153_fu_1727_p1 = mul_res_352_fu_1721_p2;

assign start_out = real_start;

assign tmp_164_fu_1346_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[5:3]}};

assign tmp_165_fu_1381_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[8:6]}};

assign tmp_166_fu_1416_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[11:9]}};

assign tmp_167_fu_1451_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[14:12]}};

assign tmp_168_fu_1486_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[17:15]}};

assign tmp_169_fu_1521_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[20:18]}};

assign tmp_170_fu_1556_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[23:21]}};

assign tmp_171_fu_1591_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[26:24]}};

assign tmp_172_fu_1626_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[29:27]}};

assign tmp_173_fu_1661_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[32:30]}};

assign tmp_174_fu_1696_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[35:33]}};

assign tmp_175_fu_1773_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[38:36]}};

assign tmp_176_fu_1805_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[41:39]}};

assign tmp_177_fu_1837_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[44:42]}};

assign tmp_178_fu_1869_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[47:45]}};

assign tmp_179_fu_1901_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[50:48]}};

assign tmp_180_fu_1933_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[53:51]}};

assign tmp_181_fu_1965_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[56:54]}};

assign tmp_182_fu_1997_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[59:57]}};

assign tmp_183_fu_2029_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[62:60]}};

assign tmp_184_fu_2061_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[65:63]}};

assign tmp_185_fu_2093_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[68:66]}};

assign tmp_186_fu_2125_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[71:69]}};

assign tmp_187_fu_2199_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[74:72]}};

assign tmp_188_fu_2231_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[77:75]}};

assign tmp_189_fu_2263_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[80:78]}};

assign tmp_190_fu_2295_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[83:81]}};

assign tmp_191_fu_2327_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[86:84]}};

assign tmp_192_fu_2359_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[89:87]}};

assign tmp_193_fu_2391_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[92:90]}};

assign tmp_194_fu_2423_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[95:93]}};

assign tmp_195_fu_2455_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[98:96]}};

assign tmp_196_fu_2487_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[101:99]}};

assign tmp_197_fu_2519_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[104:102]}};

assign tmp_198_fu_2551_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[107:105]}};

assign tmp_199_fu_2625_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[110:108]}};

assign tmp_200_fu_2657_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[113:111]}};

assign tmp_201_fu_2689_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[116:114]}};

assign tmp_202_fu_2721_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[119:117]}};

assign tmp_203_fu_2753_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[122:120]}};

assign tmp_204_fu_2785_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[125:123]}};

assign tmp_205_fu_2817_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[128:126]}};

assign tmp_206_fu_2849_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[131:129]}};

assign tmp_207_fu_2881_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[134:132]}};

assign tmp_208_fu_2913_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[137:135]}};

assign tmp_209_fu_2945_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[140:138]}};

assign tmp_210_fu_2977_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[143:141]}};

assign tmp_211_fu_3051_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[146:144]}};

assign tmp_212_fu_3083_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[149:147]}};

assign tmp_213_fu_3115_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[152:150]}};

assign tmp_214_fu_3147_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[155:153]}};

assign tmp_215_fu_3179_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[158:156]}};

assign tmp_216_fu_3211_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[161:159]}};

assign tmp_217_fu_3243_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[164:162]}};

assign tmp_218_fu_3275_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[167:165]}};

assign tmp_219_fu_3307_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[170:168]}};

assign tmp_220_fu_3339_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[173:171]}};

assign tmp_221_fu_3371_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[176:174]}};

assign tmp_222_fu_3403_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[179:177]}};

assign tmp_223_fu_3477_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[182:180]}};

assign tmp_224_fu_3509_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[185:183]}};

assign tmp_225_fu_3541_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[188:186]}};

assign tmp_226_fu_3573_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[191:189]}};

assign tmp_227_fu_3605_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[194:192]}};

assign tmp_228_fu_3637_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[197:195]}};

assign tmp_229_fu_3669_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[200:198]}};

assign tmp_230_fu_3701_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[203:201]}};

assign tmp_231_fu_3733_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[206:204]}};

assign tmp_232_fu_3765_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[209:207]}};

assign tmp_233_fu_3797_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[212:210]}};

assign tmp_234_fu_3829_p4 = {{attn_inst_matmul_gen_o_weight_arr_662_q0[215:213]}};

assign tmp_39_fu_988_p3 = {{trunc_ln121_reg_6544}, {4'd0}};

assign trunc_ln121_fu_950_p1 = select_ln121_5_fu_942_p3[4:0];

assign trunc_ln131_fu_1263_p1 = attn_inst_matmul_gen_o_bias_arr_663_q0[11:0];

assign trunc_ln137_fu_1020_p1 = cache_window_sm_dout[2:0];

assign trunc_ln151_fu_1317_p1 = attn_inst_matmul_gen_o_weight_arr_662_q0[2:0];

assign xor_ln120_fu_906_p2 = (icmp_ln121_reg_6525 ^ 1'd1);

assign zext_ln121_fu_984_p1 = select_ln121_5_reg_6539;

assign zext_ln151_3_fu_1008_p1 = add_ln151_fu_1002_p2;

assign zext_ln151_fu_999_p1 = select_ln121_reg_6532;

endmodule //ATTN11_matmul_step2_mac_3
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_34 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_num_data_valid,
        weight_sm_fifo_cap,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [83:0] weight_sm_dout;
input  [2:0] weight_sm_num_data_valid;
input  [2:0] weight_sm_fifo_cap;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [139:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln378_reg_3204;
reg   [0:0] icmp_ln378_reg_3204_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_445_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln337_fu_451_p2;
reg   [0:0] icmp_ln337_reg_2925;
wire   [0:0] icmp_ln342_fu_531_p2;
reg   [0:0] icmp_ln342_reg_2931;
reg   [2:0] trunc_ln353_s_reg_2949;
reg   [2:0] trunc_ln353_4_reg_2954;
reg   [2:0] trunc_ln354_s_reg_2959;
reg   [2:0] trunc_ln354_4_reg_2964;
reg   [2:0] trunc_ln354_8_reg_2969;
reg   [2:0] trunc_ln354_12_reg_2974;
reg   [2:0] trunc_ln354_16_reg_2979;
reg   [2:0] trunc_ln354_20_reg_2984;
reg   [2:0] trunc_ln354_24_reg_2989;
wire  signed [5:0] mul_res_fu_905_p2;
reg  signed [5:0] mul_res_reg_2994;
wire  signed [5:0] mul_res_288_fu_927_p2;
reg  signed [5:0] mul_res_288_reg_2999;
wire  signed [5:0] mul_res_289_fu_949_p2;
reg  signed [5:0] mul_res_289_reg_3004;
wire  signed [5:0] mul_res_290_fu_967_p2;
reg  signed [5:0] mul_res_290_reg_3009;
wire  signed [5:0] mul_res_292_fu_985_p2;
reg  signed [5:0] mul_res_292_reg_3014;
wire  signed [5:0] mul_res_293_fu_1003_p2;
reg  signed [5:0] mul_res_293_reg_3019;
wire  signed [5:0] mul_res_294_fu_1021_p2;
reg  signed [5:0] mul_res_294_reg_3024;
wire  signed [5:0] mul_res_296_fu_1039_p2;
reg  signed [5:0] mul_res_296_reg_3029;
wire  signed [5:0] mul_res_297_fu_1057_p2;
reg  signed [5:0] mul_res_297_reg_3034;
wire  signed [5:0] mul_res_298_fu_1075_p2;
reg  signed [5:0] mul_res_298_reg_3039;
wire  signed [5:0] mul_res_300_fu_1093_p2;
reg  signed [5:0] mul_res_300_reg_3044;
wire  signed [5:0] mul_res_301_fu_1111_p2;
reg  signed [5:0] mul_res_301_reg_3049;
wire  signed [5:0] mul_res_302_fu_1129_p2;
reg  signed [5:0] mul_res_302_reg_3054;
wire  signed [5:0] mul_res_304_fu_1147_p2;
reg  signed [5:0] mul_res_304_reg_3059;
wire  signed [5:0] mul_res_305_fu_1165_p2;
reg  signed [5:0] mul_res_305_reg_3064;
wire  signed [5:0] mul_res_306_fu_1183_p2;
reg  signed [5:0] mul_res_306_reg_3069;
wire  signed [5:0] mul_res_308_fu_1201_p2;
reg  signed [5:0] mul_res_308_reg_3074;
wire  signed [5:0] mul_res_309_fu_1219_p2;
reg  signed [5:0] mul_res_309_reg_3079;
wire  signed [5:0] mul_res_310_fu_1237_p2;
reg  signed [5:0] mul_res_310_reg_3084;
wire  signed [5:0] mul_res_312_fu_1255_p2;
reg  signed [5:0] mul_res_312_reg_3089;
wire  signed [5:0] mul_res_313_fu_1273_p2;
reg  signed [5:0] mul_res_313_reg_3094;
wire  signed [5:0] mul_res_314_fu_1291_p2;
reg  signed [5:0] mul_res_314_reg_3099;
wire  signed [5:0] mul_res_316_fu_1309_p2;
reg  signed [5:0] mul_res_316_reg_3104;
wire  signed [5:0] mul_res_317_fu_1327_p2;
reg  signed [5:0] mul_res_317_reg_3109;
wire  signed [5:0] mul_res_318_fu_1341_p2;
reg  signed [5:0] mul_res_318_reg_3114;
wire  signed [5:0] mul_res_320_fu_1355_p2;
reg  signed [5:0] mul_res_320_reg_3119;
wire  signed [5:0] mul_res_321_fu_1369_p2;
reg  signed [5:0] mul_res_321_reg_3124;
wire  signed [5:0] mul_res_322_fu_1383_p2;
reg  signed [5:0] mul_res_322_reg_3129;
wire  signed [5:0] mul_res_324_fu_1397_p2;
reg  signed [5:0] mul_res_324_reg_3134;
wire  signed [5:0] mul_res_325_fu_1411_p2;
reg  signed [5:0] mul_res_325_reg_3139;
wire  signed [5:0] mul_res_326_fu_1425_p2;
reg  signed [5:0] mul_res_326_reg_3144;
wire  signed [5:0] mul_res_328_fu_1439_p2;
reg  signed [5:0] mul_res_328_reg_3149;
wire  signed [5:0] mul_res_329_fu_1453_p2;
reg  signed [5:0] mul_res_329_reg_3154;
wire  signed [5:0] mul_res_330_fu_1467_p2;
reg  signed [5:0] mul_res_330_reg_3159;
wire  signed [5:0] mul_res_332_fu_1481_p2;
reg  signed [5:0] mul_res_332_reg_3164;
wire  signed [5:0] mul_res_333_fu_1495_p2;
reg  signed [5:0] mul_res_333_reg_3169;
wire  signed [5:0] mul_res_334_fu_1509_p2;
reg  signed [5:0] mul_res_334_reg_3174;
wire  signed [5:0] mul_res_336_fu_1523_p2;
reg  signed [5:0] mul_res_336_reg_3179;
wire  signed [5:0] mul_res_337_fu_1537_p2;
reg  signed [5:0] mul_res_337_reg_3184;
wire  signed [5:0] mul_res_338_fu_1551_p2;
reg  signed [5:0] mul_res_338_reg_3189;
wire  signed [5:0] mul_res_340_fu_1565_p2;
reg  signed [5:0] mul_res_340_reg_3194;
wire  signed [5:0] mul_res_341_fu_1579_p2;
reg  signed [5:0] mul_res_341_reg_3199;
wire   [0:0] icmp_ln378_fu_1585_p2;
wire   [9:0] add_ln370_3_fu_1846_p2;
reg   [9:0] add_ln370_3_reg_3208;
wire   [9:0] add_ln370_7_fu_1904_p2;
reg   [9:0] add_ln370_7_reg_3213;
wire   [9:0] add_ln370_11_fu_1962_p2;
reg   [9:0] add_ln370_11_reg_3218;
wire   [9:0] add_ln370_15_fu_2020_p2;
reg   [9:0] add_ln370_15_reg_3223;
wire   [9:0] add_ln370_19_fu_2078_p2;
reg   [9:0] add_ln370_19_reg_3228;
wire   [9:0] add_ln370_23_fu_2136_p2;
reg   [9:0] add_ln370_23_reg_3233;
wire   [9:0] add_ln370_27_fu_2194_p2;
reg   [9:0] add_ln370_27_reg_3238;
wire   [9:0] add_ln370_31_fu_2252_p2;
reg   [9:0] add_ln370_31_reg_3243;
wire   [9:0] add_ln370_35_fu_2307_p2;
reg   [9:0] add_ln370_35_reg_3248;
wire   [9:0] add_ln370_39_fu_2362_p2;
reg   [9:0] add_ln370_39_reg_3253;
wire   [9:0] add_ln370_43_fu_2417_p2;
reg   [9:0] add_ln370_43_reg_3258;
wire   [9:0] add_ln370_47_fu_2472_p2;
reg   [9:0] add_ln370_47_reg_3263;
wire   [9:0] add_ln370_51_fu_2527_p2;
reg   [9:0] add_ln370_51_reg_3268;
wire   [9:0] add_ln370_55_fu_2582_p2;
reg   [9:0] add_ln370_55_reg_3273;
reg   [4:0] cit_fu_304;
wire   [4:0] cit_1_fu_1591_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [4:0] ap_sig_allocacmp_cit_load;
reg   [9:0] empty_fu_308;
reg   [9:0] empty_1091_fu_312;
reg   [9:0] empty_1092_fu_316;
reg   [9:0] empty_1093_fu_320;
reg   [9:0] empty_1094_fu_324;
reg   [9:0] empty_1095_fu_328;
reg   [9:0] empty_1096_fu_332;
reg   [9:0] empty_1097_fu_336;
reg   [9:0] empty_1098_fu_340;
reg   [9:0] empty_1099_fu_344;
reg   [9:0] empty_1100_fu_348;
reg   [9:0] empty_1101_fu_352;
reg   [9:0] empty_1102_fu_356;
reg   [9:0] empty_1103_fu_360;
reg   [9:0] indvar_flatten_fu_364;
wire   [9:0] select_ln337_1_fu_463_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten51_fu_368;
wire   [15:0] add_ln336_fu_439_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten51_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_457_p2;
wire   [0:0] icmp_ln338_fu_506_p2;
wire   [0:0] xor_ln336_fu_501_p2;
wire   [0:0] and_ln336_fu_512_p2;
wire   [0:0] or_ln337_fu_518_p2;
wire   [4:0] select_ln337_fu_523_p3;
wire   [2:0] trunc_ln353_fu_539_p1;
wire   [2:0] trunc_ln354_fu_615_p1;
wire  signed [2:0] mul_res_fu_905_p0;
wire  signed [5:0] sext_ln368_1_fu_893_p1;
wire  signed [2:0] mul_res_fu_905_p1;
wire  signed [5:0] sext_ln368_fu_889_p1;
wire   [2:0] trunc_ln353_1_fu_553_p4;
wire   [2:0] trunc_ln354_1_fu_629_p4;
wire  signed [2:0] mul_res_288_fu_927_p0;
wire  signed [5:0] sext_ln368_6_fu_915_p1;
wire  signed [2:0] mul_res_288_fu_927_p1;
wire  signed [5:0] sext_ln368_5_fu_911_p1;
wire   [2:0] trunc_ln353_2_fu_563_p4;
wire   [2:0] trunc_ln354_2_fu_639_p4;
wire  signed [2:0] mul_res_289_fu_949_p0;
wire  signed [5:0] sext_ln368_9_fu_937_p1;
wire  signed [2:0] mul_res_289_fu_949_p1;
wire  signed [5:0] sext_ln368_8_fu_933_p1;
wire   [2:0] trunc_ln354_3_fu_649_p4;
wire  signed [2:0] mul_res_290_fu_967_p0;
wire  signed [5:0] sext_ln368_10_fu_955_p1;
wire  signed [2:0] mul_res_290_fu_967_p1;
wire   [2:0] trunc_ln354_5_fu_669_p4;
wire  signed [2:0] mul_res_292_fu_985_p0;
wire  signed [5:0] sext_ln368_13_fu_973_p1;
wire  signed [2:0] mul_res_292_fu_985_p1;
wire   [2:0] trunc_ln354_6_fu_679_p4;
wire  signed [2:0] mul_res_293_fu_1003_p0;
wire  signed [5:0] sext_ln368_15_fu_991_p1;
wire  signed [2:0] mul_res_293_fu_1003_p1;
wire   [2:0] trunc_ln354_7_fu_689_p4;
wire  signed [2:0] mul_res_294_fu_1021_p0;
wire  signed [5:0] sext_ln368_16_fu_1009_p1;
wire  signed [2:0] mul_res_294_fu_1021_p1;
wire   [2:0] trunc_ln354_9_fu_709_p4;
wire  signed [2:0] mul_res_296_fu_1039_p0;
wire  signed [5:0] sext_ln368_19_fu_1027_p1;
wire  signed [2:0] mul_res_296_fu_1039_p1;
wire   [2:0] trunc_ln354_10_fu_719_p4;
wire  signed [2:0] mul_res_297_fu_1057_p0;
wire  signed [5:0] sext_ln368_21_fu_1045_p1;
wire  signed [2:0] mul_res_297_fu_1057_p1;
wire   [2:0] trunc_ln354_11_fu_729_p4;
wire  signed [2:0] mul_res_298_fu_1075_p0;
wire  signed [5:0] sext_ln368_22_fu_1063_p1;
wire  signed [2:0] mul_res_298_fu_1075_p1;
wire   [2:0] trunc_ln354_13_fu_749_p4;
wire  signed [2:0] mul_res_300_fu_1093_p0;
wire  signed [5:0] sext_ln368_25_fu_1081_p1;
wire  signed [2:0] mul_res_300_fu_1093_p1;
wire   [2:0] trunc_ln354_14_fu_759_p4;
wire  signed [2:0] mul_res_301_fu_1111_p0;
wire  signed [5:0] sext_ln368_27_fu_1099_p1;
wire  signed [2:0] mul_res_301_fu_1111_p1;
wire   [2:0] trunc_ln354_15_fu_769_p4;
wire  signed [2:0] mul_res_302_fu_1129_p0;
wire  signed [5:0] sext_ln368_28_fu_1117_p1;
wire  signed [2:0] mul_res_302_fu_1129_p1;
wire   [2:0] trunc_ln354_17_fu_789_p4;
wire  signed [2:0] mul_res_304_fu_1147_p0;
wire  signed [5:0] sext_ln368_31_fu_1135_p1;
wire  signed [2:0] mul_res_304_fu_1147_p1;
wire   [2:0] trunc_ln354_18_fu_799_p4;
wire  signed [2:0] mul_res_305_fu_1165_p0;
wire  signed [5:0] sext_ln368_33_fu_1153_p1;
wire  signed [2:0] mul_res_305_fu_1165_p1;
wire   [2:0] trunc_ln354_19_fu_809_p4;
wire  signed [2:0] mul_res_306_fu_1183_p0;
wire  signed [5:0] sext_ln368_34_fu_1171_p1;
wire  signed [2:0] mul_res_306_fu_1183_p1;
wire   [2:0] trunc_ln354_21_fu_829_p4;
wire  signed [2:0] mul_res_308_fu_1201_p0;
wire  signed [5:0] sext_ln368_37_fu_1189_p1;
wire  signed [2:0] mul_res_308_fu_1201_p1;
wire   [2:0] trunc_ln354_22_fu_839_p4;
wire  signed [2:0] mul_res_309_fu_1219_p0;
wire  signed [5:0] sext_ln368_39_fu_1207_p1;
wire  signed [2:0] mul_res_309_fu_1219_p1;
wire   [2:0] trunc_ln354_23_fu_849_p4;
wire  signed [2:0] mul_res_310_fu_1237_p0;
wire  signed [5:0] sext_ln368_40_fu_1225_p1;
wire  signed [2:0] mul_res_310_fu_1237_p1;
wire   [2:0] trunc_ln354_25_fu_869_p4;
wire  signed [2:0] mul_res_312_fu_1255_p0;
wire  signed [5:0] sext_ln368_43_fu_1243_p1;
wire  signed [2:0] mul_res_312_fu_1255_p1;
wire   [2:0] trunc_ln354_26_fu_879_p4;
wire  signed [2:0] mul_res_313_fu_1273_p0;
wire  signed [5:0] sext_ln368_45_fu_1261_p1;
wire  signed [2:0] mul_res_313_fu_1273_p1;
wire   [2:0] trunc_ln353_3_fu_573_p4;
wire  signed [2:0] mul_res_314_fu_1291_p0;
wire  signed [2:0] mul_res_314_fu_1291_p1;
wire  signed [5:0] sext_ln368_46_fu_1279_p1;
wire   [2:0] trunc_ln353_5_fu_593_p4;
wire  signed [2:0] mul_res_316_fu_1309_p0;
wire  signed [2:0] mul_res_316_fu_1309_p1;
wire  signed [5:0] sext_ln368_49_fu_1297_p1;
wire   [2:0] trunc_ln353_6_fu_603_p4;
wire  signed [2:0] mul_res_317_fu_1327_p0;
wire  signed [2:0] mul_res_317_fu_1327_p1;
wire  signed [5:0] sext_ln368_51_fu_1315_p1;
wire  signed [2:0] mul_res_318_fu_1341_p0;
wire  signed [2:0] mul_res_318_fu_1341_p1;
wire  signed [2:0] mul_res_320_fu_1355_p0;
wire  signed [2:0] mul_res_320_fu_1355_p1;
wire  signed [2:0] mul_res_321_fu_1369_p0;
wire  signed [2:0] mul_res_321_fu_1369_p1;
wire  signed [2:0] mul_res_322_fu_1383_p0;
wire  signed [2:0] mul_res_322_fu_1383_p1;
wire  signed [2:0] mul_res_324_fu_1397_p0;
wire  signed [2:0] mul_res_324_fu_1397_p1;
wire  signed [2:0] mul_res_325_fu_1411_p0;
wire  signed [2:0] mul_res_325_fu_1411_p1;
wire  signed [2:0] mul_res_326_fu_1425_p0;
wire  signed [2:0] mul_res_326_fu_1425_p1;
wire  signed [2:0] mul_res_328_fu_1439_p0;
wire  signed [2:0] mul_res_328_fu_1439_p1;
wire  signed [2:0] mul_res_329_fu_1453_p0;
wire  signed [2:0] mul_res_329_fu_1453_p1;
wire  signed [2:0] mul_res_330_fu_1467_p0;
wire  signed [2:0] mul_res_330_fu_1467_p1;
wire  signed [2:0] mul_res_332_fu_1481_p0;
wire  signed [2:0] mul_res_332_fu_1481_p1;
wire  signed [2:0] mul_res_333_fu_1495_p0;
wire  signed [2:0] mul_res_333_fu_1495_p1;
wire  signed [2:0] mul_res_334_fu_1509_p0;
wire  signed [2:0] mul_res_334_fu_1509_p1;
wire  signed [2:0] mul_res_336_fu_1523_p0;
wire  signed [2:0] mul_res_336_fu_1523_p1;
wire  signed [2:0] mul_res_337_fu_1537_p0;
wire  signed [2:0] mul_res_337_fu_1537_p1;
wire  signed [2:0] mul_res_338_fu_1551_p0;
wire  signed [2:0] mul_res_338_fu_1551_p1;
wire  signed [2:0] mul_res_340_fu_1565_p0;
wire  signed [2:0] mul_res_340_fu_1565_p1;
wire  signed [2:0] mul_res_341_fu_1579_p0;
wire  signed [2:0] mul_res_341_fu_1579_p1;
wire  signed [2:0] mul_res_287_fu_1808_p0;
wire  signed [5:0] sext_ln368_4_fu_1797_p1;
wire  signed [2:0] mul_res_287_fu_1808_p1;
wire  signed [5:0] sext_ln368_3_fu_1794_p1;
wire  signed [5:0] mul_res_287_fu_1808_p2;
wire  signed [6:0] sext_ln368_2_fu_1791_p1;
wire  signed [6:0] sext_ln370_1_fu_1821_p1;
wire   [6:0] add_ln370_1_fu_1824_p2;
wire  signed [6:0] sext_ln368_7_fu_1818_p1;
wire   [6:0] add_ln370_2_fu_1830_p2;
wire  signed [9:0] sext_ln370_2_fu_1836_p1;
wire  signed [9:0] sext_ln370_fu_1814_p1;
wire   [9:0] add_ln370_fu_1840_p2;
wire   [9:0] select_ln342_13_fu_1784_p3;
wire  signed [2:0] mul_res_291_fu_1866_p0;
wire  signed [5:0] sext_ln368_12_fu_1855_p1;
wire  signed [2:0] mul_res_291_fu_1866_p1;
wire  signed [5:0] mul_res_291_fu_1866_p2;
wire  signed [6:0] sext_ln368_11_fu_1852_p1;
wire  signed [6:0] sext_ln370_4_fu_1879_p1;
wire   [6:0] add_ln370_5_fu_1882_p2;
wire  signed [6:0] sext_ln368_14_fu_1876_p1;
wire   [6:0] add_ln370_6_fu_1888_p2;
wire  signed [9:0] sext_ln370_5_fu_1894_p1;
wire  signed [9:0] sext_ln370_3_fu_1872_p1;
wire   [9:0] add_ln370_4_fu_1898_p2;
wire   [9:0] select_ln342_12_fu_1777_p3;
wire  signed [2:0] mul_res_295_fu_1924_p0;
wire  signed [5:0] sext_ln368_18_fu_1913_p1;
wire  signed [2:0] mul_res_295_fu_1924_p1;
wire  signed [5:0] mul_res_295_fu_1924_p2;
wire  signed [6:0] sext_ln368_17_fu_1910_p1;
wire  signed [6:0] sext_ln370_7_fu_1937_p1;
wire   [6:0] add_ln370_9_fu_1940_p2;
wire  signed [6:0] sext_ln368_20_fu_1934_p1;
wire   [6:0] add_ln370_10_fu_1946_p2;
wire  signed [9:0] sext_ln370_8_fu_1952_p1;
wire  signed [9:0] sext_ln370_6_fu_1930_p1;
wire   [9:0] add_ln370_8_fu_1956_p2;
wire   [9:0] select_ln342_11_fu_1770_p3;
wire  signed [2:0] mul_res_299_fu_1982_p0;
wire  signed [5:0] sext_ln368_24_fu_1971_p1;
wire  signed [2:0] mul_res_299_fu_1982_p1;
wire  signed [5:0] mul_res_299_fu_1982_p2;
wire  signed [6:0] sext_ln368_23_fu_1968_p1;
wire  signed [6:0] sext_ln370_10_fu_1995_p1;
wire   [6:0] add_ln370_13_fu_1998_p2;
wire  signed [6:0] sext_ln368_26_fu_1992_p1;
wire   [6:0] add_ln370_14_fu_2004_p2;
wire  signed [9:0] sext_ln370_11_fu_2010_p1;
wire  signed [9:0] sext_ln370_9_fu_1988_p1;
wire   [9:0] add_ln370_12_fu_2014_p2;
wire   [9:0] select_ln342_10_fu_1763_p3;
wire  signed [2:0] mul_res_303_fu_2040_p0;
wire  signed [5:0] sext_ln368_30_fu_2029_p1;
wire  signed [2:0] mul_res_303_fu_2040_p1;
wire  signed [5:0] mul_res_303_fu_2040_p2;
wire  signed [6:0] sext_ln368_29_fu_2026_p1;
wire  signed [6:0] sext_ln370_13_fu_2053_p1;
wire   [6:0] add_ln370_17_fu_2056_p2;
wire  signed [6:0] sext_ln368_32_fu_2050_p1;
wire   [6:0] add_ln370_18_fu_2062_p2;
wire  signed [9:0] sext_ln370_14_fu_2068_p1;
wire  signed [9:0] sext_ln370_12_fu_2046_p1;
wire   [9:0] add_ln370_16_fu_2072_p2;
wire   [9:0] select_ln342_9_fu_1756_p3;
wire  signed [2:0] mul_res_307_fu_2098_p0;
wire  signed [5:0] sext_ln368_36_fu_2087_p1;
wire  signed [2:0] mul_res_307_fu_2098_p1;
wire  signed [5:0] mul_res_307_fu_2098_p2;
wire  signed [6:0] sext_ln368_35_fu_2084_p1;
wire  signed [6:0] sext_ln370_16_fu_2111_p1;
wire   [6:0] add_ln370_21_fu_2114_p2;
wire  signed [6:0] sext_ln368_38_fu_2108_p1;
wire   [6:0] add_ln370_22_fu_2120_p2;
wire  signed [9:0] sext_ln370_17_fu_2126_p1;
wire  signed [9:0] sext_ln370_15_fu_2104_p1;
wire   [9:0] add_ln370_20_fu_2130_p2;
wire   [9:0] select_ln342_8_fu_1749_p3;
wire  signed [2:0] mul_res_311_fu_2156_p0;
wire  signed [5:0] sext_ln368_42_fu_2145_p1;
wire  signed [2:0] mul_res_311_fu_2156_p1;
wire  signed [5:0] mul_res_311_fu_2156_p2;
wire  signed [6:0] sext_ln368_41_fu_2142_p1;
wire  signed [6:0] sext_ln370_19_fu_2169_p1;
wire   [6:0] add_ln370_25_fu_2172_p2;
wire  signed [6:0] sext_ln368_44_fu_2166_p1;
wire   [6:0] add_ln370_26_fu_2178_p2;
wire  signed [9:0] sext_ln370_20_fu_2184_p1;
wire  signed [9:0] sext_ln370_18_fu_2162_p1;
wire   [9:0] add_ln370_24_fu_2188_p2;
wire   [9:0] select_ln342_7_fu_1742_p3;
wire  signed [2:0] mul_res_315_fu_2214_p0;
wire  signed [2:0] mul_res_315_fu_2214_p1;
wire  signed [5:0] sext_ln368_48_fu_2203_p1;
wire  signed [5:0] mul_res_315_fu_2214_p2;
wire  signed [6:0] sext_ln368_47_fu_2200_p1;
wire  signed [6:0] sext_ln370_22_fu_2227_p1;
wire   [6:0] add_ln370_29_fu_2230_p2;
wire  signed [6:0] sext_ln368_50_fu_2224_p1;
wire   [6:0] add_ln370_30_fu_2236_p2;
wire  signed [9:0] sext_ln370_23_fu_2242_p1;
wire  signed [9:0] sext_ln370_21_fu_2220_p1;
wire   [9:0] add_ln370_28_fu_2246_p2;
wire   [9:0] select_ln342_6_fu_1735_p3;
wire  signed [2:0] mul_res_319_fu_2269_p0;
wire  signed [2:0] mul_res_319_fu_2269_p1;
wire  signed [5:0] mul_res_319_fu_2269_p2;
wire  signed [6:0] sext_ln368_52_fu_2258_p1;
wire  signed [6:0] sext_ln370_25_fu_2282_p1;
wire   [6:0] add_ln370_33_fu_2285_p2;
wire  signed [6:0] sext_ln368_53_fu_2279_p1;
wire   [6:0] add_ln370_34_fu_2291_p2;
wire  signed [9:0] sext_ln370_26_fu_2297_p1;
wire  signed [9:0] sext_ln370_24_fu_2275_p1;
wire   [9:0] add_ln370_32_fu_2301_p2;
wire   [9:0] select_ln342_5_fu_1728_p3;
wire  signed [2:0] mul_res_323_fu_2324_p0;
wire  signed [2:0] mul_res_323_fu_2324_p1;
wire  signed [5:0] mul_res_323_fu_2324_p2;
wire  signed [6:0] sext_ln368_54_fu_2313_p1;
wire  signed [6:0] sext_ln370_28_fu_2337_p1;
wire   [6:0] add_ln370_37_fu_2340_p2;
wire  signed [6:0] sext_ln368_55_fu_2334_p1;
wire   [6:0] add_ln370_38_fu_2346_p2;
wire  signed [9:0] sext_ln370_29_fu_2352_p1;
wire  signed [9:0] sext_ln370_27_fu_2330_p1;
wire   [9:0] add_ln370_36_fu_2356_p2;
wire   [9:0] select_ln342_4_fu_1721_p3;
wire  signed [2:0] mul_res_327_fu_2379_p0;
wire  signed [2:0] mul_res_327_fu_2379_p1;
wire  signed [5:0] mul_res_327_fu_2379_p2;
wire   [9:0] select_ln342_3_fu_1714_p3;
wire  signed [9:0] sext_ln370_30_fu_2385_p1;
wire  signed [6:0] sext_ln368_56_fu_2368_p1;
wire  signed [6:0] sext_ln370_31_fu_2392_p1;
wire   [6:0] add_ln370_41_fu_2401_p2;
wire  signed [6:0] sext_ln368_57_fu_2389_p1;
wire   [6:0] add_ln370_42_fu_2407_p2;
wire  signed [9:0] sext_ln370_32_fu_2413_p1;
wire   [9:0] add_ln370_40_fu_2395_p2;
wire  signed [2:0] mul_res_331_fu_2434_p0;
wire  signed [2:0] mul_res_331_fu_2434_p1;
wire  signed [5:0] mul_res_331_fu_2434_p2;
wire   [9:0] select_ln342_2_fu_1707_p3;
wire  signed [9:0] sext_ln370_33_fu_2440_p1;
wire  signed [6:0] sext_ln368_58_fu_2423_p1;
wire  signed [6:0] sext_ln370_34_fu_2447_p1;
wire   [6:0] add_ln370_45_fu_2456_p2;
wire  signed [6:0] sext_ln368_59_fu_2444_p1;
wire   [6:0] add_ln370_46_fu_2462_p2;
wire  signed [9:0] sext_ln370_35_fu_2468_p1;
wire   [9:0] add_ln370_44_fu_2450_p2;
wire  signed [2:0] mul_res_335_fu_2489_p0;
wire  signed [2:0] mul_res_335_fu_2489_p1;
wire  signed [5:0] mul_res_335_fu_2489_p2;
wire   [9:0] select_ln342_1_fu_1700_p3;
wire  signed [9:0] sext_ln370_36_fu_2495_p1;
wire  signed [6:0] sext_ln368_60_fu_2478_p1;
wire  signed [6:0] sext_ln370_37_fu_2502_p1;
wire   [6:0] add_ln370_49_fu_2511_p2;
wire  signed [6:0] sext_ln368_61_fu_2499_p1;
wire   [6:0] add_ln370_50_fu_2517_p2;
wire  signed [9:0] sext_ln370_38_fu_2523_p1;
wire   [9:0] add_ln370_48_fu_2505_p2;
wire  signed [2:0] mul_res_339_fu_2544_p0;
wire  signed [2:0] mul_res_339_fu_2544_p1;
wire  signed [5:0] mul_res_339_fu_2544_p2;
wire   [9:0] select_ln342_fu_1693_p3;
wire  signed [9:0] sext_ln370_39_fu_2550_p1;
wire  signed [6:0] sext_ln368_62_fu_2533_p1;
wire  signed [6:0] sext_ln370_40_fu_2557_p1;
wire   [6:0] add_ln370_53_fu_2566_p2;
wire  signed [6:0] sext_ln368_63_fu_2554_p1;
wire   [6:0] add_ln370_54_fu_2572_p2;
wire  signed [9:0] sext_ln370_41_fu_2578_p1;
wire   [9:0] add_ln370_52_fu_2560_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_313;
reg    ap_condition_372;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_304 = 5'd0;
//#0 empty_fu_308 = 10'd0;
//#0 empty_1091_fu_312 = 10'd0;
//#0 empty_1092_fu_316 = 10'd0;
//#0 empty_1093_fu_320 = 10'd0;
//#0 empty_1094_fu_324 = 10'd0;
//#0 empty_1095_fu_328 = 10'd0;
//#0 empty_1096_fu_332 = 10'd0;
//#0 empty_1097_fu_336 = 10'd0;
//#0 empty_1098_fu_340 = 10'd0;
//#0 empty_1099_fu_344 = 10'd0;
//#0 empty_1100_fu_348 = 10'd0;
//#0 empty_1101_fu_352 = 10'd0;
//#0 empty_1102_fu_356 = 10'd0;
//#0 empty_1103_fu_360 = 10'd0;
//#0 indvar_flatten_fu_364 = 10'd0;
//#0 indvar_flatten51_fu_368 = 16'd0;
end

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U673(
    .din0(mul_res_fu_905_p0),
    .din1(mul_res_fu_905_p1),
    .dout(mul_res_fu_905_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U674(
    .din0(mul_res_288_fu_927_p0),
    .din1(mul_res_288_fu_927_p1),
    .dout(mul_res_288_fu_927_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U675(
    .din0(mul_res_289_fu_949_p0),
    .din1(mul_res_289_fu_949_p1),
    .dout(mul_res_289_fu_949_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U676(
    .din0(mul_res_290_fu_967_p0),
    .din1(mul_res_290_fu_967_p1),
    .dout(mul_res_290_fu_967_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U677(
    .din0(mul_res_292_fu_985_p0),
    .din1(mul_res_292_fu_985_p1),
    .dout(mul_res_292_fu_985_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U678(
    .din0(mul_res_293_fu_1003_p0),
    .din1(mul_res_293_fu_1003_p1),
    .dout(mul_res_293_fu_1003_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U679(
    .din0(mul_res_294_fu_1021_p0),
    .din1(mul_res_294_fu_1021_p1),
    .dout(mul_res_294_fu_1021_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U680(
    .din0(mul_res_296_fu_1039_p0),
    .din1(mul_res_296_fu_1039_p1),
    .dout(mul_res_296_fu_1039_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U681(
    .din0(mul_res_297_fu_1057_p0),
    .din1(mul_res_297_fu_1057_p1),
    .dout(mul_res_297_fu_1057_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U682(
    .din0(mul_res_298_fu_1075_p0),
    .din1(mul_res_298_fu_1075_p1),
    .dout(mul_res_298_fu_1075_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U683(
    .din0(mul_res_300_fu_1093_p0),
    .din1(mul_res_300_fu_1093_p1),
    .dout(mul_res_300_fu_1093_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U684(
    .din0(mul_res_301_fu_1111_p0),
    .din1(mul_res_301_fu_1111_p1),
    .dout(mul_res_301_fu_1111_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U685(
    .din0(mul_res_302_fu_1129_p0),
    .din1(mul_res_302_fu_1129_p1),
    .dout(mul_res_302_fu_1129_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U686(
    .din0(mul_res_304_fu_1147_p0),
    .din1(mul_res_304_fu_1147_p1),
    .dout(mul_res_304_fu_1147_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U687(
    .din0(mul_res_305_fu_1165_p0),
    .din1(mul_res_305_fu_1165_p1),
    .dout(mul_res_305_fu_1165_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U688(
    .din0(mul_res_306_fu_1183_p0),
    .din1(mul_res_306_fu_1183_p1),
    .dout(mul_res_306_fu_1183_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U689(
    .din0(mul_res_308_fu_1201_p0),
    .din1(mul_res_308_fu_1201_p1),
    .dout(mul_res_308_fu_1201_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U690(
    .din0(mul_res_309_fu_1219_p0),
    .din1(mul_res_309_fu_1219_p1),
    .dout(mul_res_309_fu_1219_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U691(
    .din0(mul_res_310_fu_1237_p0),
    .din1(mul_res_310_fu_1237_p1),
    .dout(mul_res_310_fu_1237_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U692(
    .din0(mul_res_312_fu_1255_p0),
    .din1(mul_res_312_fu_1255_p1),
    .dout(mul_res_312_fu_1255_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U693(
    .din0(mul_res_313_fu_1273_p0),
    .din1(mul_res_313_fu_1273_p1),
    .dout(mul_res_313_fu_1273_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U694(
    .din0(mul_res_314_fu_1291_p0),
    .din1(mul_res_314_fu_1291_p1),
    .dout(mul_res_314_fu_1291_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U695(
    .din0(mul_res_316_fu_1309_p0),
    .din1(mul_res_316_fu_1309_p1),
    .dout(mul_res_316_fu_1309_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U696(
    .din0(mul_res_317_fu_1327_p0),
    .din1(mul_res_317_fu_1327_p1),
    .dout(mul_res_317_fu_1327_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U697(
    .din0(mul_res_318_fu_1341_p0),
    .din1(mul_res_318_fu_1341_p1),
    .dout(mul_res_318_fu_1341_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U698(
    .din0(mul_res_320_fu_1355_p0),
    .din1(mul_res_320_fu_1355_p1),
    .dout(mul_res_320_fu_1355_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U699(
    .din0(mul_res_321_fu_1369_p0),
    .din1(mul_res_321_fu_1369_p1),
    .dout(mul_res_321_fu_1369_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U700(
    .din0(mul_res_322_fu_1383_p0),
    .din1(mul_res_322_fu_1383_p1),
    .dout(mul_res_322_fu_1383_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U701(
    .din0(mul_res_324_fu_1397_p0),
    .din1(mul_res_324_fu_1397_p1),
    .dout(mul_res_324_fu_1397_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U702(
    .din0(mul_res_325_fu_1411_p0),
    .din1(mul_res_325_fu_1411_p1),
    .dout(mul_res_325_fu_1411_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U703(
    .din0(mul_res_326_fu_1425_p0),
    .din1(mul_res_326_fu_1425_p1),
    .dout(mul_res_326_fu_1425_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U704(
    .din0(mul_res_328_fu_1439_p0),
    .din1(mul_res_328_fu_1439_p1),
    .dout(mul_res_328_fu_1439_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U705(
    .din0(mul_res_329_fu_1453_p0),
    .din1(mul_res_329_fu_1453_p1),
    .dout(mul_res_329_fu_1453_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U706(
    .din0(mul_res_330_fu_1467_p0),
    .din1(mul_res_330_fu_1467_p1),
    .dout(mul_res_330_fu_1467_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U707(
    .din0(mul_res_332_fu_1481_p0),
    .din1(mul_res_332_fu_1481_p1),
    .dout(mul_res_332_fu_1481_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U708(
    .din0(mul_res_333_fu_1495_p0),
    .din1(mul_res_333_fu_1495_p1),
    .dout(mul_res_333_fu_1495_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U709(
    .din0(mul_res_334_fu_1509_p0),
    .din1(mul_res_334_fu_1509_p1),
    .dout(mul_res_334_fu_1509_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U710(
    .din0(mul_res_336_fu_1523_p0),
    .din1(mul_res_336_fu_1523_p1),
    .dout(mul_res_336_fu_1523_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U711(
    .din0(mul_res_337_fu_1537_p0),
    .din1(mul_res_337_fu_1537_p1),
    .dout(mul_res_337_fu_1537_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U712(
    .din0(mul_res_338_fu_1551_p0),
    .din1(mul_res_338_fu_1551_p1),
    .dout(mul_res_338_fu_1551_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U713(
    .din0(mul_res_340_fu_1565_p0),
    .din1(mul_res_340_fu_1565_p1),
    .dout(mul_res_340_fu_1565_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U714(
    .din0(mul_res_341_fu_1579_p0),
    .din1(mul_res_341_fu_1579_p1),
    .dout(mul_res_341_fu_1579_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U715(
    .din0(mul_res_287_fu_1808_p0),
    .din1(mul_res_287_fu_1808_p1),
    .dout(mul_res_287_fu_1808_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U716(
    .din0(mul_res_291_fu_1866_p0),
    .din1(mul_res_291_fu_1866_p1),
    .dout(mul_res_291_fu_1866_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U717(
    .din0(mul_res_295_fu_1924_p0),
    .din1(mul_res_295_fu_1924_p1),
    .dout(mul_res_295_fu_1924_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U718(
    .din0(mul_res_299_fu_1982_p0),
    .din1(mul_res_299_fu_1982_p1),
    .dout(mul_res_299_fu_1982_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U719(
    .din0(mul_res_303_fu_2040_p0),
    .din1(mul_res_303_fu_2040_p1),
    .dout(mul_res_303_fu_2040_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U720(
    .din0(mul_res_307_fu_2098_p0),
    .din1(mul_res_307_fu_2098_p1),
    .dout(mul_res_307_fu_2098_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U721(
    .din0(mul_res_311_fu_2156_p0),
    .din1(mul_res_311_fu_2156_p1),
    .dout(mul_res_311_fu_2156_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U722(
    .din0(mul_res_315_fu_2214_p0),
    .din1(mul_res_315_fu_2214_p1),
    .dout(mul_res_315_fu_2214_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U723(
    .din0(mul_res_319_fu_2269_p0),
    .din1(mul_res_319_fu_2269_p1),
    .dout(mul_res_319_fu_2269_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U724(
    .din0(mul_res_323_fu_2324_p0),
    .din1(mul_res_323_fu_2324_p1),
    .dout(mul_res_323_fu_2324_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U725(
    .din0(mul_res_327_fu_2379_p0),
    .din1(mul_res_327_fu_2379_p1),
    .dout(mul_res_327_fu_2379_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U726(
    .din0(mul_res_331_fu_2434_p0),
    .din1(mul_res_331_fu_2434_p1),
    .dout(mul_res_331_fu_2434_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U727(
    .din0(mul_res_335_fu_2489_p0),
    .din1(mul_res_335_fu_2489_p1),
    .dout(mul_res_335_fu_2489_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U728(
    .din0(mul_res_339_fu_2544_p0),
    .din1(mul_res_339_fu_2544_p1),
    .dout(mul_res_339_fu_2544_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_313)) begin
        cit_fu_304 <= cit_1_fu_1591_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_372)) begin
    if ((icmp_ln336_fu_445_p2 == 1'd0)) begin
        indvar_flatten51_fu_368 <= add_ln336_fu_439_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten51_fu_368 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_372)) begin
    if ((icmp_ln336_fu_445_p2 == 1'd0)) begin
        indvar_flatten_fu_364 <= select_ln337_1_fu_463_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_364 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln370_11_reg_3218 <= add_ln370_11_fu_1962_p2;
        add_ln370_15_reg_3223 <= add_ln370_15_fu_2020_p2;
        add_ln370_19_reg_3228 <= add_ln370_19_fu_2078_p2;
        add_ln370_23_reg_3233 <= add_ln370_23_fu_2136_p2;
        add_ln370_27_reg_3238 <= add_ln370_27_fu_2194_p2;
        add_ln370_31_reg_3243 <= add_ln370_31_fu_2252_p2;
        add_ln370_35_reg_3248 <= add_ln370_35_fu_2307_p2;
        add_ln370_39_reg_3253 <= add_ln370_39_fu_2362_p2;
        add_ln370_3_reg_3208 <= add_ln370_3_fu_1846_p2;
        add_ln370_43_reg_3258 <= add_ln370_43_fu_2417_p2;
        add_ln370_47_reg_3263 <= add_ln370_47_fu_2472_p2;
        add_ln370_51_reg_3268 <= add_ln370_51_fu_2527_p2;
        add_ln370_55_reg_3273 <= add_ln370_55_fu_2582_p2;
        add_ln370_7_reg_3213 <= add_ln370_7_fu_1904_p2;
        icmp_ln378_reg_3204_pp0_iter2_reg <= icmp_ln378_reg_3204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln337_reg_2925 <= icmp_ln337_fu_451_p2;
        icmp_ln342_reg_2931 <= icmp_ln342_fu_531_p2;
        icmp_ln378_reg_3204 <= icmp_ln378_fu_1585_p2;
        mul_res_288_reg_2999 <= mul_res_288_fu_927_p2;
        mul_res_289_reg_3004 <= mul_res_289_fu_949_p2;
        mul_res_290_reg_3009 <= mul_res_290_fu_967_p2;
        mul_res_292_reg_3014 <= mul_res_292_fu_985_p2;
        mul_res_293_reg_3019 <= mul_res_293_fu_1003_p2;
        mul_res_294_reg_3024 <= mul_res_294_fu_1021_p2;
        mul_res_296_reg_3029 <= mul_res_296_fu_1039_p2;
        mul_res_297_reg_3034 <= mul_res_297_fu_1057_p2;
        mul_res_298_reg_3039 <= mul_res_298_fu_1075_p2;
        mul_res_300_reg_3044 <= mul_res_300_fu_1093_p2;
        mul_res_301_reg_3049 <= mul_res_301_fu_1111_p2;
        mul_res_302_reg_3054 <= mul_res_302_fu_1129_p2;
        mul_res_304_reg_3059 <= mul_res_304_fu_1147_p2;
        mul_res_305_reg_3064 <= mul_res_305_fu_1165_p2;
        mul_res_306_reg_3069 <= mul_res_306_fu_1183_p2;
        mul_res_308_reg_3074 <= mul_res_308_fu_1201_p2;
        mul_res_309_reg_3079 <= mul_res_309_fu_1219_p2;
        mul_res_310_reg_3084 <= mul_res_310_fu_1237_p2;
        mul_res_312_reg_3089 <= mul_res_312_fu_1255_p2;
        mul_res_313_reg_3094 <= mul_res_313_fu_1273_p2;
        mul_res_314_reg_3099 <= mul_res_314_fu_1291_p2;
        mul_res_316_reg_3104 <= mul_res_316_fu_1309_p2;
        mul_res_317_reg_3109 <= mul_res_317_fu_1327_p2;
        mul_res_318_reg_3114 <= mul_res_318_fu_1341_p2;
        mul_res_320_reg_3119 <= mul_res_320_fu_1355_p2;
        mul_res_321_reg_3124 <= mul_res_321_fu_1369_p2;
        mul_res_322_reg_3129 <= mul_res_322_fu_1383_p2;
        mul_res_324_reg_3134 <= mul_res_324_fu_1397_p2;
        mul_res_325_reg_3139 <= mul_res_325_fu_1411_p2;
        mul_res_326_reg_3144 <= mul_res_326_fu_1425_p2;
        mul_res_328_reg_3149 <= mul_res_328_fu_1439_p2;
        mul_res_329_reg_3154 <= mul_res_329_fu_1453_p2;
        mul_res_330_reg_3159 <= mul_res_330_fu_1467_p2;
        mul_res_332_reg_3164 <= mul_res_332_fu_1481_p2;
        mul_res_333_reg_3169 <= mul_res_333_fu_1495_p2;
        mul_res_334_reg_3174 <= mul_res_334_fu_1509_p2;
        mul_res_336_reg_3179 <= mul_res_336_fu_1523_p2;
        mul_res_337_reg_3184 <= mul_res_337_fu_1537_p2;
        mul_res_338_reg_3189 <= mul_res_338_fu_1551_p2;
        mul_res_340_reg_3194 <= mul_res_340_fu_1565_p2;
        mul_res_341_reg_3199 <= mul_res_341_fu_1579_p2;
        mul_res_reg_2994 <= mul_res_fu_905_p2;
        trunc_ln353_4_reg_2954 <= {{cache_window_sm_dout[17:15]}};
        trunc_ln353_s_reg_2949 <= {{cache_window_sm_dout[5:3]}};
        trunc_ln354_12_reg_2974 <= {{weight_sm_dout[41:39]}};
        trunc_ln354_16_reg_2979 <= {{weight_sm_dout[53:51]}};
        trunc_ln354_20_reg_2984 <= {{weight_sm_dout[65:63]}};
        trunc_ln354_24_reg_2989 <= {{weight_sm_dout[77:75]}};
        trunc_ln354_4_reg_2964 <= {{weight_sm_dout[17:15]}};
        trunc_ln354_8_reg_2969 <= {{weight_sm_dout[29:27]}};
        trunc_ln354_s_reg_2959 <= {{weight_sm_dout[5:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_1091_fu_312 <= add_ln370_7_fu_1904_p2;
        empty_1092_fu_316 <= add_ln370_11_fu_1962_p2;
        empty_1093_fu_320 <= add_ln370_15_fu_2020_p2;
        empty_1094_fu_324 <= add_ln370_19_fu_2078_p2;
        empty_1095_fu_328 <= add_ln370_23_fu_2136_p2;
        empty_1096_fu_332 <= add_ln370_27_fu_2194_p2;
        empty_1097_fu_336 <= add_ln370_31_fu_2252_p2;
        empty_1098_fu_340 <= add_ln370_35_fu_2307_p2;
        empty_1099_fu_344 <= add_ln370_39_fu_2362_p2;
        empty_1100_fu_348 <= add_ln370_43_fu_2417_p2;
        empty_1101_fu_352 <= add_ln370_47_fu_2472_p2;
        empty_1102_fu_356 <= add_ln370_51_fu_2527_p2;
        empty_1103_fu_360 <= add_ln370_55_fu_2582_p2;
        empty_fu_308 <= add_ln370_3_fu_1846_p2;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_445_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_304;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten51_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten51_load = indvar_flatten51_fu_368;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_364;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten51_load + 16'd1);

assign add_ln337_fu_457_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln370_10_fu_1946_p2 = ($signed(add_ln370_9_fu_1940_p2) + $signed(sext_ln368_20_fu_1934_p1));

assign add_ln370_11_fu_1962_p2 = (add_ln370_8_fu_1956_p2 + select_ln342_11_fu_1770_p3);

assign add_ln370_12_fu_2014_p2 = ($signed(sext_ln370_11_fu_2010_p1) + $signed(sext_ln370_9_fu_1988_p1));

assign add_ln370_13_fu_1998_p2 = ($signed(sext_ln368_23_fu_1968_p1) + $signed(sext_ln370_10_fu_1995_p1));

assign add_ln370_14_fu_2004_p2 = ($signed(add_ln370_13_fu_1998_p2) + $signed(sext_ln368_26_fu_1992_p1));

assign add_ln370_15_fu_2020_p2 = (add_ln370_12_fu_2014_p2 + select_ln342_10_fu_1763_p3);

assign add_ln370_16_fu_2072_p2 = ($signed(sext_ln370_14_fu_2068_p1) + $signed(sext_ln370_12_fu_2046_p1));

assign add_ln370_17_fu_2056_p2 = ($signed(sext_ln368_29_fu_2026_p1) + $signed(sext_ln370_13_fu_2053_p1));

assign add_ln370_18_fu_2062_p2 = ($signed(add_ln370_17_fu_2056_p2) + $signed(sext_ln368_32_fu_2050_p1));

assign add_ln370_19_fu_2078_p2 = (add_ln370_16_fu_2072_p2 + select_ln342_9_fu_1756_p3);

assign add_ln370_1_fu_1824_p2 = ($signed(sext_ln368_2_fu_1791_p1) + $signed(sext_ln370_1_fu_1821_p1));

assign add_ln370_20_fu_2130_p2 = ($signed(sext_ln370_17_fu_2126_p1) + $signed(sext_ln370_15_fu_2104_p1));

assign add_ln370_21_fu_2114_p2 = ($signed(sext_ln368_35_fu_2084_p1) + $signed(sext_ln370_16_fu_2111_p1));

assign add_ln370_22_fu_2120_p2 = ($signed(add_ln370_21_fu_2114_p2) + $signed(sext_ln368_38_fu_2108_p1));

assign add_ln370_23_fu_2136_p2 = (add_ln370_20_fu_2130_p2 + select_ln342_8_fu_1749_p3);

assign add_ln370_24_fu_2188_p2 = ($signed(sext_ln370_20_fu_2184_p1) + $signed(sext_ln370_18_fu_2162_p1));

assign add_ln370_25_fu_2172_p2 = ($signed(sext_ln368_41_fu_2142_p1) + $signed(sext_ln370_19_fu_2169_p1));

assign add_ln370_26_fu_2178_p2 = ($signed(add_ln370_25_fu_2172_p2) + $signed(sext_ln368_44_fu_2166_p1));

assign add_ln370_27_fu_2194_p2 = (add_ln370_24_fu_2188_p2 + select_ln342_7_fu_1742_p3);

assign add_ln370_28_fu_2246_p2 = ($signed(sext_ln370_23_fu_2242_p1) + $signed(sext_ln370_21_fu_2220_p1));

assign add_ln370_29_fu_2230_p2 = ($signed(sext_ln368_47_fu_2200_p1) + $signed(sext_ln370_22_fu_2227_p1));

assign add_ln370_2_fu_1830_p2 = ($signed(add_ln370_1_fu_1824_p2) + $signed(sext_ln368_7_fu_1818_p1));

assign add_ln370_30_fu_2236_p2 = ($signed(add_ln370_29_fu_2230_p2) + $signed(sext_ln368_50_fu_2224_p1));

assign add_ln370_31_fu_2252_p2 = (add_ln370_28_fu_2246_p2 + select_ln342_6_fu_1735_p3);

assign add_ln370_32_fu_2301_p2 = ($signed(sext_ln370_26_fu_2297_p1) + $signed(sext_ln370_24_fu_2275_p1));

assign add_ln370_33_fu_2285_p2 = ($signed(sext_ln368_52_fu_2258_p1) + $signed(sext_ln370_25_fu_2282_p1));

assign add_ln370_34_fu_2291_p2 = ($signed(add_ln370_33_fu_2285_p2) + $signed(sext_ln368_53_fu_2279_p1));

assign add_ln370_35_fu_2307_p2 = (add_ln370_32_fu_2301_p2 + select_ln342_5_fu_1728_p3);

assign add_ln370_36_fu_2356_p2 = ($signed(sext_ln370_29_fu_2352_p1) + $signed(sext_ln370_27_fu_2330_p1));

assign add_ln370_37_fu_2340_p2 = ($signed(sext_ln368_54_fu_2313_p1) + $signed(sext_ln370_28_fu_2337_p1));

assign add_ln370_38_fu_2346_p2 = ($signed(add_ln370_37_fu_2340_p2) + $signed(sext_ln368_55_fu_2334_p1));

assign add_ln370_39_fu_2362_p2 = (add_ln370_36_fu_2356_p2 + select_ln342_4_fu_1721_p3);

assign add_ln370_3_fu_1846_p2 = (add_ln370_fu_1840_p2 + select_ln342_13_fu_1784_p3);

assign add_ln370_40_fu_2395_p2 = ($signed(select_ln342_3_fu_1714_p3) + $signed(sext_ln370_30_fu_2385_p1));

assign add_ln370_41_fu_2401_p2 = ($signed(sext_ln368_56_fu_2368_p1) + $signed(sext_ln370_31_fu_2392_p1));

assign add_ln370_42_fu_2407_p2 = ($signed(add_ln370_41_fu_2401_p2) + $signed(sext_ln368_57_fu_2389_p1));

assign add_ln370_43_fu_2417_p2 = ($signed(sext_ln370_32_fu_2413_p1) + $signed(add_ln370_40_fu_2395_p2));

assign add_ln370_44_fu_2450_p2 = ($signed(select_ln342_2_fu_1707_p3) + $signed(sext_ln370_33_fu_2440_p1));

assign add_ln370_45_fu_2456_p2 = ($signed(sext_ln368_58_fu_2423_p1) + $signed(sext_ln370_34_fu_2447_p1));

assign add_ln370_46_fu_2462_p2 = ($signed(add_ln370_45_fu_2456_p2) + $signed(sext_ln368_59_fu_2444_p1));

assign add_ln370_47_fu_2472_p2 = ($signed(sext_ln370_35_fu_2468_p1) + $signed(add_ln370_44_fu_2450_p2));

assign add_ln370_48_fu_2505_p2 = ($signed(select_ln342_1_fu_1700_p3) + $signed(sext_ln370_36_fu_2495_p1));

assign add_ln370_49_fu_2511_p2 = ($signed(sext_ln368_60_fu_2478_p1) + $signed(sext_ln370_37_fu_2502_p1));

assign add_ln370_4_fu_1898_p2 = ($signed(sext_ln370_5_fu_1894_p1) + $signed(sext_ln370_3_fu_1872_p1));

assign add_ln370_50_fu_2517_p2 = ($signed(add_ln370_49_fu_2511_p2) + $signed(sext_ln368_61_fu_2499_p1));

assign add_ln370_51_fu_2527_p2 = ($signed(sext_ln370_38_fu_2523_p1) + $signed(add_ln370_48_fu_2505_p2));

assign add_ln370_52_fu_2560_p2 = ($signed(select_ln342_fu_1693_p3) + $signed(sext_ln370_39_fu_2550_p1));

assign add_ln370_53_fu_2566_p2 = ($signed(sext_ln368_62_fu_2533_p1) + $signed(sext_ln370_40_fu_2557_p1));

assign add_ln370_54_fu_2572_p2 = ($signed(add_ln370_53_fu_2566_p2) + $signed(sext_ln368_63_fu_2554_p1));

assign add_ln370_55_fu_2582_p2 = ($signed(sext_ln370_41_fu_2578_p1) + $signed(add_ln370_52_fu_2560_p2));

assign add_ln370_5_fu_1882_p2 = ($signed(sext_ln368_11_fu_1852_p1) + $signed(sext_ln370_4_fu_1879_p1));

assign add_ln370_6_fu_1888_p2 = ($signed(add_ln370_5_fu_1882_p2) + $signed(sext_ln368_14_fu_1876_p1));

assign add_ln370_7_fu_1904_p2 = (add_ln370_4_fu_1898_p2 + select_ln342_12_fu_1777_p3);

assign add_ln370_8_fu_1956_p2 = ($signed(sext_ln370_8_fu_1952_p1) + $signed(sext_ln370_6_fu_1930_p1));

assign add_ln370_9_fu_1940_p2 = ($signed(sext_ln368_17_fu_1910_p1) + $signed(sext_ln370_7_fu_1937_p1));

assign add_ln370_fu_1840_p2 = ($signed(sext_ln370_2_fu_1836_p1) + $signed(sext_ln370_fu_1814_p1));

assign and_ln336_fu_512_p2 = (xor_ln336_fu_501_p2 & icmp_ln338_fu_506_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((weight_sm_empty_n == 1'b0) | (cache_window_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln378_reg_3204_pp0_iter2_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_313 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_372 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign cit_1_fu_1591_p2 = (select_ln337_fu_523_p3 + 5'd1);

assign icmp_ln336_fu_445_p2 = ((ap_sig_allocacmp_indvar_flatten51_load == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_451_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_506_p2 = ((ap_sig_allocacmp_cit_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_531_p2 = ((select_ln337_fu_523_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1585_p2 = ((select_ln337_fu_523_p3 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = {{{{{{{{{{{{{{add_ln370_55_reg_3273}, {add_ln370_51_reg_3268}}, {add_ln370_47_reg_3263}}, {add_ln370_43_reg_3258}}, {add_ln370_39_reg_3253}}, {add_ln370_35_reg_3248}}, {add_ln370_31_reg_3243}}, {add_ln370_27_reg_3238}}, {add_ln370_23_reg_3233}}, {add_ln370_19_reg_3228}}, {add_ln370_15_reg_3223}}, {add_ln370_11_reg_3218}}, {add_ln370_7_reg_3213}}, {add_ln370_3_reg_3208}};

assign mul_res_287_fu_1808_p0 = sext_ln368_4_fu_1797_p1;

assign mul_res_287_fu_1808_p1 = sext_ln368_3_fu_1794_p1;

assign mul_res_288_fu_927_p0 = sext_ln368_6_fu_915_p1;

assign mul_res_288_fu_927_p1 = sext_ln368_5_fu_911_p1;

assign mul_res_289_fu_949_p0 = sext_ln368_9_fu_937_p1;

assign mul_res_289_fu_949_p1 = sext_ln368_8_fu_933_p1;

assign mul_res_290_fu_967_p0 = sext_ln368_10_fu_955_p1;

assign mul_res_290_fu_967_p1 = sext_ln368_fu_889_p1;

assign mul_res_291_fu_1866_p0 = sext_ln368_12_fu_1855_p1;

assign mul_res_291_fu_1866_p1 = sext_ln368_3_fu_1794_p1;

assign mul_res_292_fu_985_p0 = sext_ln368_13_fu_973_p1;

assign mul_res_292_fu_985_p1 = sext_ln368_5_fu_911_p1;

assign mul_res_293_fu_1003_p0 = sext_ln368_15_fu_991_p1;

assign mul_res_293_fu_1003_p1 = sext_ln368_8_fu_933_p1;

assign mul_res_294_fu_1021_p0 = sext_ln368_16_fu_1009_p1;

assign mul_res_294_fu_1021_p1 = sext_ln368_fu_889_p1;

assign mul_res_295_fu_1924_p0 = sext_ln368_18_fu_1913_p1;

assign mul_res_295_fu_1924_p1 = sext_ln368_3_fu_1794_p1;

assign mul_res_296_fu_1039_p0 = sext_ln368_19_fu_1027_p1;

assign mul_res_296_fu_1039_p1 = sext_ln368_5_fu_911_p1;

assign mul_res_297_fu_1057_p0 = sext_ln368_21_fu_1045_p1;

assign mul_res_297_fu_1057_p1 = sext_ln368_8_fu_933_p1;

assign mul_res_298_fu_1075_p0 = sext_ln368_22_fu_1063_p1;

assign mul_res_298_fu_1075_p1 = sext_ln368_fu_889_p1;

assign mul_res_299_fu_1982_p0 = sext_ln368_24_fu_1971_p1;

assign mul_res_299_fu_1982_p1 = sext_ln368_3_fu_1794_p1;

assign mul_res_300_fu_1093_p0 = sext_ln368_25_fu_1081_p1;

assign mul_res_300_fu_1093_p1 = sext_ln368_5_fu_911_p1;

assign mul_res_301_fu_1111_p0 = sext_ln368_27_fu_1099_p1;

assign mul_res_301_fu_1111_p1 = sext_ln368_8_fu_933_p1;

assign mul_res_302_fu_1129_p0 = sext_ln368_28_fu_1117_p1;

assign mul_res_302_fu_1129_p1 = sext_ln368_fu_889_p1;

assign mul_res_303_fu_2040_p0 = sext_ln368_30_fu_2029_p1;

assign mul_res_303_fu_2040_p1 = sext_ln368_3_fu_1794_p1;

assign mul_res_304_fu_1147_p0 = sext_ln368_31_fu_1135_p1;

assign mul_res_304_fu_1147_p1 = sext_ln368_5_fu_911_p1;

assign mul_res_305_fu_1165_p0 = sext_ln368_33_fu_1153_p1;

assign mul_res_305_fu_1165_p1 = sext_ln368_8_fu_933_p1;

assign mul_res_306_fu_1183_p0 = sext_ln368_34_fu_1171_p1;

assign mul_res_306_fu_1183_p1 = sext_ln368_fu_889_p1;

assign mul_res_307_fu_2098_p0 = sext_ln368_36_fu_2087_p1;

assign mul_res_307_fu_2098_p1 = sext_ln368_3_fu_1794_p1;

assign mul_res_308_fu_1201_p0 = sext_ln368_37_fu_1189_p1;

assign mul_res_308_fu_1201_p1 = sext_ln368_5_fu_911_p1;

assign mul_res_309_fu_1219_p0 = sext_ln368_39_fu_1207_p1;

assign mul_res_309_fu_1219_p1 = sext_ln368_8_fu_933_p1;

assign mul_res_310_fu_1237_p0 = sext_ln368_40_fu_1225_p1;

assign mul_res_310_fu_1237_p1 = sext_ln368_fu_889_p1;

assign mul_res_311_fu_2156_p0 = sext_ln368_42_fu_2145_p1;

assign mul_res_311_fu_2156_p1 = sext_ln368_3_fu_1794_p1;

assign mul_res_312_fu_1255_p0 = sext_ln368_43_fu_1243_p1;

assign mul_res_312_fu_1255_p1 = sext_ln368_5_fu_911_p1;

assign mul_res_313_fu_1273_p0 = sext_ln368_45_fu_1261_p1;

assign mul_res_313_fu_1273_p1 = sext_ln368_8_fu_933_p1;

assign mul_res_314_fu_1291_p0 = sext_ln368_1_fu_893_p1;

assign mul_res_314_fu_1291_p1 = sext_ln368_46_fu_1279_p1;

assign mul_res_315_fu_2214_p0 = sext_ln368_4_fu_1797_p1;

assign mul_res_315_fu_2214_p1 = sext_ln368_48_fu_2203_p1;

assign mul_res_316_fu_1309_p0 = sext_ln368_6_fu_915_p1;

assign mul_res_316_fu_1309_p1 = sext_ln368_49_fu_1297_p1;

assign mul_res_317_fu_1327_p0 = sext_ln368_9_fu_937_p1;

assign mul_res_317_fu_1327_p1 = sext_ln368_51_fu_1315_p1;

assign mul_res_318_fu_1341_p0 = sext_ln368_10_fu_955_p1;

assign mul_res_318_fu_1341_p1 = sext_ln368_46_fu_1279_p1;

assign mul_res_319_fu_2269_p0 = sext_ln368_12_fu_1855_p1;

assign mul_res_319_fu_2269_p1 = sext_ln368_48_fu_2203_p1;

assign mul_res_320_fu_1355_p0 = sext_ln368_13_fu_973_p1;

assign mul_res_320_fu_1355_p1 = sext_ln368_49_fu_1297_p1;

assign mul_res_321_fu_1369_p0 = sext_ln368_15_fu_991_p1;

assign mul_res_321_fu_1369_p1 = sext_ln368_51_fu_1315_p1;

assign mul_res_322_fu_1383_p0 = sext_ln368_16_fu_1009_p1;

assign mul_res_322_fu_1383_p1 = sext_ln368_46_fu_1279_p1;

assign mul_res_323_fu_2324_p0 = sext_ln368_18_fu_1913_p1;

assign mul_res_323_fu_2324_p1 = sext_ln368_48_fu_2203_p1;

assign mul_res_324_fu_1397_p0 = sext_ln368_19_fu_1027_p1;

assign mul_res_324_fu_1397_p1 = sext_ln368_49_fu_1297_p1;

assign mul_res_325_fu_1411_p0 = sext_ln368_21_fu_1045_p1;

assign mul_res_325_fu_1411_p1 = sext_ln368_51_fu_1315_p1;

assign mul_res_326_fu_1425_p0 = sext_ln368_22_fu_1063_p1;

assign mul_res_326_fu_1425_p1 = sext_ln368_46_fu_1279_p1;

assign mul_res_327_fu_2379_p0 = sext_ln368_24_fu_1971_p1;

assign mul_res_327_fu_2379_p1 = sext_ln368_48_fu_2203_p1;

assign mul_res_328_fu_1439_p0 = sext_ln368_25_fu_1081_p1;

assign mul_res_328_fu_1439_p1 = sext_ln368_49_fu_1297_p1;

assign mul_res_329_fu_1453_p0 = sext_ln368_27_fu_1099_p1;

assign mul_res_329_fu_1453_p1 = sext_ln368_51_fu_1315_p1;

assign mul_res_330_fu_1467_p0 = sext_ln368_28_fu_1117_p1;

assign mul_res_330_fu_1467_p1 = sext_ln368_46_fu_1279_p1;

assign mul_res_331_fu_2434_p0 = sext_ln368_30_fu_2029_p1;

assign mul_res_331_fu_2434_p1 = sext_ln368_48_fu_2203_p1;

assign mul_res_332_fu_1481_p0 = sext_ln368_31_fu_1135_p1;

assign mul_res_332_fu_1481_p1 = sext_ln368_49_fu_1297_p1;

assign mul_res_333_fu_1495_p0 = sext_ln368_33_fu_1153_p1;

assign mul_res_333_fu_1495_p1 = sext_ln368_51_fu_1315_p1;

assign mul_res_334_fu_1509_p0 = sext_ln368_34_fu_1171_p1;

assign mul_res_334_fu_1509_p1 = sext_ln368_46_fu_1279_p1;

assign mul_res_335_fu_2489_p0 = sext_ln368_36_fu_2087_p1;

assign mul_res_335_fu_2489_p1 = sext_ln368_48_fu_2203_p1;

assign mul_res_336_fu_1523_p0 = sext_ln368_37_fu_1189_p1;

assign mul_res_336_fu_1523_p1 = sext_ln368_49_fu_1297_p1;

assign mul_res_337_fu_1537_p0 = sext_ln368_39_fu_1207_p1;

assign mul_res_337_fu_1537_p1 = sext_ln368_51_fu_1315_p1;

assign mul_res_338_fu_1551_p0 = sext_ln368_40_fu_1225_p1;

assign mul_res_338_fu_1551_p1 = sext_ln368_46_fu_1279_p1;

assign mul_res_339_fu_2544_p0 = sext_ln368_42_fu_2145_p1;

assign mul_res_339_fu_2544_p1 = sext_ln368_48_fu_2203_p1;

assign mul_res_340_fu_1565_p0 = sext_ln368_43_fu_1243_p1;

assign mul_res_340_fu_1565_p1 = sext_ln368_49_fu_1297_p1;

assign mul_res_341_fu_1579_p0 = sext_ln368_45_fu_1261_p1;

assign mul_res_341_fu_1579_p1 = sext_ln368_51_fu_1315_p1;

assign mul_res_fu_905_p0 = sext_ln368_1_fu_893_p1;

assign mul_res_fu_905_p1 = sext_ln368_fu_889_p1;

assign or_ln337_fu_518_p2 = (icmp_ln337_reg_2925 | and_ln336_fu_512_p2);

assign select_ln337_1_fu_463_p3 = ((icmp_ln337_fu_451_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_457_p2);

assign select_ln337_fu_523_p3 = ((or_ln337_fu_518_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cit_load);

assign select_ln342_10_fu_1763_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1093_fu_320);

assign select_ln342_11_fu_1770_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1092_fu_316);

assign select_ln342_12_fu_1777_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1091_fu_312);

assign select_ln342_13_fu_1784_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_fu_308);

assign select_ln342_1_fu_1700_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1102_fu_356);

assign select_ln342_2_fu_1707_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1101_fu_352);

assign select_ln342_3_fu_1714_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1100_fu_348);

assign select_ln342_4_fu_1721_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1099_fu_344);

assign select_ln342_5_fu_1728_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1098_fu_340);

assign select_ln342_6_fu_1735_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1097_fu_336);

assign select_ln342_7_fu_1742_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1096_fu_332);

assign select_ln342_8_fu_1749_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1095_fu_328);

assign select_ln342_9_fu_1756_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1094_fu_324);

assign select_ln342_fu_1693_p3 = ((icmp_ln342_reg_2931[0:0] == 1'b1) ? 10'd0 : empty_1103_fu_360);

assign sext_ln368_10_fu_955_p1 = $signed(trunc_ln354_3_fu_649_p4);

assign sext_ln368_11_fu_1852_p1 = mul_res_290_reg_3009;

assign sext_ln368_12_fu_1855_p1 = $signed(trunc_ln354_4_reg_2964);

assign sext_ln368_13_fu_973_p1 = $signed(trunc_ln354_5_fu_669_p4);

assign sext_ln368_14_fu_1876_p1 = mul_res_292_reg_3014;

assign sext_ln368_15_fu_991_p1 = $signed(trunc_ln354_6_fu_679_p4);

assign sext_ln368_16_fu_1009_p1 = $signed(trunc_ln354_7_fu_689_p4);

assign sext_ln368_17_fu_1910_p1 = mul_res_294_reg_3024;

assign sext_ln368_18_fu_1913_p1 = $signed(trunc_ln354_8_reg_2969);

assign sext_ln368_19_fu_1027_p1 = $signed(trunc_ln354_9_fu_709_p4);

assign sext_ln368_1_fu_893_p1 = $signed(trunc_ln354_fu_615_p1);

assign sext_ln368_20_fu_1934_p1 = mul_res_296_reg_3029;

assign sext_ln368_21_fu_1045_p1 = $signed(trunc_ln354_10_fu_719_p4);

assign sext_ln368_22_fu_1063_p1 = $signed(trunc_ln354_11_fu_729_p4);

assign sext_ln368_23_fu_1968_p1 = mul_res_298_reg_3039;

assign sext_ln368_24_fu_1971_p1 = $signed(trunc_ln354_12_reg_2974);

assign sext_ln368_25_fu_1081_p1 = $signed(trunc_ln354_13_fu_749_p4);

assign sext_ln368_26_fu_1992_p1 = mul_res_300_reg_3044;

assign sext_ln368_27_fu_1099_p1 = $signed(trunc_ln354_14_fu_759_p4);

assign sext_ln368_28_fu_1117_p1 = $signed(trunc_ln354_15_fu_769_p4);

assign sext_ln368_29_fu_2026_p1 = mul_res_302_reg_3054;

assign sext_ln368_2_fu_1791_p1 = mul_res_reg_2994;

assign sext_ln368_30_fu_2029_p1 = $signed(trunc_ln354_16_reg_2979);

assign sext_ln368_31_fu_1135_p1 = $signed(trunc_ln354_17_fu_789_p4);

assign sext_ln368_32_fu_2050_p1 = mul_res_304_reg_3059;

assign sext_ln368_33_fu_1153_p1 = $signed(trunc_ln354_18_fu_799_p4);

assign sext_ln368_34_fu_1171_p1 = $signed(trunc_ln354_19_fu_809_p4);

assign sext_ln368_35_fu_2084_p1 = mul_res_306_reg_3069;

assign sext_ln368_36_fu_2087_p1 = $signed(trunc_ln354_20_reg_2984);

assign sext_ln368_37_fu_1189_p1 = $signed(trunc_ln354_21_fu_829_p4);

assign sext_ln368_38_fu_2108_p1 = mul_res_308_reg_3074;

assign sext_ln368_39_fu_1207_p1 = $signed(trunc_ln354_22_fu_839_p4);

assign sext_ln368_3_fu_1794_p1 = $signed(trunc_ln353_s_reg_2949);

assign sext_ln368_40_fu_1225_p1 = $signed(trunc_ln354_23_fu_849_p4);

assign sext_ln368_41_fu_2142_p1 = mul_res_310_reg_3084;

assign sext_ln368_42_fu_2145_p1 = $signed(trunc_ln354_24_reg_2989);

assign sext_ln368_43_fu_1243_p1 = $signed(trunc_ln354_25_fu_869_p4);

assign sext_ln368_44_fu_2166_p1 = mul_res_312_reg_3089;

assign sext_ln368_45_fu_1261_p1 = $signed(trunc_ln354_26_fu_879_p4);

assign sext_ln368_46_fu_1279_p1 = $signed(trunc_ln353_3_fu_573_p4);

assign sext_ln368_47_fu_2200_p1 = mul_res_314_reg_3099;

assign sext_ln368_48_fu_2203_p1 = $signed(trunc_ln353_4_reg_2954);

assign sext_ln368_49_fu_1297_p1 = $signed(trunc_ln353_5_fu_593_p4);

assign sext_ln368_4_fu_1797_p1 = $signed(trunc_ln354_s_reg_2959);

assign sext_ln368_50_fu_2224_p1 = mul_res_316_reg_3104;

assign sext_ln368_51_fu_1315_p1 = $signed(trunc_ln353_6_fu_603_p4);

assign sext_ln368_52_fu_2258_p1 = mul_res_318_reg_3114;

assign sext_ln368_53_fu_2279_p1 = mul_res_320_reg_3119;

assign sext_ln368_54_fu_2313_p1 = mul_res_322_reg_3129;

assign sext_ln368_55_fu_2334_p1 = mul_res_324_reg_3134;

assign sext_ln368_56_fu_2368_p1 = mul_res_326_reg_3144;

assign sext_ln368_57_fu_2389_p1 = mul_res_328_reg_3149;

assign sext_ln368_58_fu_2423_p1 = mul_res_330_reg_3159;

assign sext_ln368_59_fu_2444_p1 = mul_res_332_reg_3164;

assign sext_ln368_5_fu_911_p1 = $signed(trunc_ln353_1_fu_553_p4);

assign sext_ln368_60_fu_2478_p1 = mul_res_334_reg_3174;

assign sext_ln368_61_fu_2499_p1 = mul_res_336_reg_3179;

assign sext_ln368_62_fu_2533_p1 = mul_res_338_reg_3189;

assign sext_ln368_63_fu_2554_p1 = mul_res_340_reg_3194;

assign sext_ln368_6_fu_915_p1 = $signed(trunc_ln354_1_fu_629_p4);

assign sext_ln368_7_fu_1818_p1 = mul_res_288_reg_2999;

assign sext_ln368_8_fu_933_p1 = $signed(trunc_ln353_2_fu_563_p4);

assign sext_ln368_9_fu_937_p1 = $signed(trunc_ln354_2_fu_639_p4);

assign sext_ln368_fu_889_p1 = $signed(trunc_ln353_fu_539_p1);

assign sext_ln370_10_fu_1995_p1 = mul_res_301_reg_3049;

assign sext_ln370_11_fu_2010_p1 = $signed(add_ln370_14_fu_2004_p2);

assign sext_ln370_12_fu_2046_p1 = mul_res_303_fu_2040_p2;

assign sext_ln370_13_fu_2053_p1 = mul_res_305_reg_3064;

assign sext_ln370_14_fu_2068_p1 = $signed(add_ln370_18_fu_2062_p2);

assign sext_ln370_15_fu_2104_p1 = mul_res_307_fu_2098_p2;

assign sext_ln370_16_fu_2111_p1 = mul_res_309_reg_3079;

assign sext_ln370_17_fu_2126_p1 = $signed(add_ln370_22_fu_2120_p2);

assign sext_ln370_18_fu_2162_p1 = mul_res_311_fu_2156_p2;

assign sext_ln370_19_fu_2169_p1 = mul_res_313_reg_3094;

assign sext_ln370_1_fu_1821_p1 = mul_res_289_reg_3004;

assign sext_ln370_20_fu_2184_p1 = $signed(add_ln370_26_fu_2178_p2);

assign sext_ln370_21_fu_2220_p1 = mul_res_315_fu_2214_p2;

assign sext_ln370_22_fu_2227_p1 = mul_res_317_reg_3109;

assign sext_ln370_23_fu_2242_p1 = $signed(add_ln370_30_fu_2236_p2);

assign sext_ln370_24_fu_2275_p1 = mul_res_319_fu_2269_p2;

assign sext_ln370_25_fu_2282_p1 = mul_res_321_reg_3124;

assign sext_ln370_26_fu_2297_p1 = $signed(add_ln370_34_fu_2291_p2);

assign sext_ln370_27_fu_2330_p1 = mul_res_323_fu_2324_p2;

assign sext_ln370_28_fu_2337_p1 = mul_res_325_reg_3139;

assign sext_ln370_29_fu_2352_p1 = $signed(add_ln370_38_fu_2346_p2);

assign sext_ln370_2_fu_1836_p1 = $signed(add_ln370_2_fu_1830_p2);

assign sext_ln370_30_fu_2385_p1 = mul_res_327_fu_2379_p2;

assign sext_ln370_31_fu_2392_p1 = mul_res_329_reg_3154;

assign sext_ln370_32_fu_2413_p1 = $signed(add_ln370_42_fu_2407_p2);

assign sext_ln370_33_fu_2440_p1 = mul_res_331_fu_2434_p2;

assign sext_ln370_34_fu_2447_p1 = mul_res_333_reg_3169;

assign sext_ln370_35_fu_2468_p1 = $signed(add_ln370_46_fu_2462_p2);

assign sext_ln370_36_fu_2495_p1 = mul_res_335_fu_2489_p2;

assign sext_ln370_37_fu_2502_p1 = mul_res_337_reg_3184;

assign sext_ln370_38_fu_2523_p1 = $signed(add_ln370_50_fu_2517_p2);

assign sext_ln370_39_fu_2550_p1 = mul_res_339_fu_2544_p2;

assign sext_ln370_3_fu_1872_p1 = mul_res_291_fu_1866_p2;

assign sext_ln370_40_fu_2557_p1 = mul_res_341_reg_3199;

assign sext_ln370_41_fu_2578_p1 = $signed(add_ln370_54_fu_2572_p2);

assign sext_ln370_4_fu_1879_p1 = mul_res_293_reg_3019;

assign sext_ln370_5_fu_1894_p1 = $signed(add_ln370_6_fu_1888_p2);

assign sext_ln370_6_fu_1930_p1 = mul_res_295_fu_1924_p2;

assign sext_ln370_7_fu_1937_p1 = mul_res_297_reg_3034;

assign sext_ln370_8_fu_1952_p1 = $signed(add_ln370_10_fu_1946_p2);

assign sext_ln370_9_fu_1988_p1 = mul_res_299_fu_1982_p2;

assign sext_ln370_fu_1814_p1 = mul_res_287_fu_1808_p2;

assign start_out = real_start;

assign trunc_ln353_1_fu_553_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln353_2_fu_563_p4 = {{cache_window_sm_dout[11:9]}};

assign trunc_ln353_3_fu_573_p4 = {{cache_window_sm_dout[14:12]}};

assign trunc_ln353_5_fu_593_p4 = {{cache_window_sm_dout[20:18]}};

assign trunc_ln353_6_fu_603_p4 = {{cache_window_sm_dout[23:21]}};

assign trunc_ln353_fu_539_p1 = cache_window_sm_dout[2:0];

assign trunc_ln354_10_fu_719_p4 = {{weight_sm_dout[35:33]}};

assign trunc_ln354_11_fu_729_p4 = {{weight_sm_dout[38:36]}};

assign trunc_ln354_13_fu_749_p4 = {{weight_sm_dout[44:42]}};

assign trunc_ln354_14_fu_759_p4 = {{weight_sm_dout[47:45]}};

assign trunc_ln354_15_fu_769_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln354_17_fu_789_p4 = {{weight_sm_dout[56:54]}};

assign trunc_ln354_18_fu_799_p4 = {{weight_sm_dout[59:57]}};

assign trunc_ln354_19_fu_809_p4 = {{weight_sm_dout[62:60]}};

assign trunc_ln354_1_fu_629_p4 = {{weight_sm_dout[8:6]}};

assign trunc_ln354_21_fu_829_p4 = {{weight_sm_dout[68:66]}};

assign trunc_ln354_22_fu_839_p4 = {{weight_sm_dout[71:69]}};

assign trunc_ln354_23_fu_849_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln354_25_fu_869_p4 = {{weight_sm_dout[80:78]}};

assign trunc_ln354_26_fu_879_p4 = {{weight_sm_dout[83:81]}};

assign trunc_ln354_2_fu_639_p4 = {{weight_sm_dout[11:9]}};

assign trunc_ln354_3_fu_649_p4 = {{weight_sm_dout[14:12]}};

assign trunc_ln354_5_fu_669_p4 = {{weight_sm_dout[20:18]}};

assign trunc_ln354_6_fu_679_p4 = {{weight_sm_dout[23:21]}};

assign trunc_ln354_7_fu_689_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln354_9_fu_709_p4 = {{weight_sm_dout[32:30]}};

assign trunc_ln354_fu_615_p1 = weight_sm_dout[2:0];

assign xor_ln336_fu_501_p2 = (icmp_ln337_reg_2925 ^ 1'd1);

endmodule //ATTN11_matmul_step2_mac_34
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_3_attn_inst_matmul_gen_o_bias_arr_663_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 65;
parameter AddressWidth = 5;
parameter AddressRange = 32;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_3_attn_inst_matmul_gen_o_bias_arr_663_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_3_attn_inst_matmul_gen_o_weight_arr_662_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 216;
parameter AddressWidth = 9;
parameter AddressRange = 512;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_3_attn_inst_matmul_gen_o_weight_arr_662_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [35:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [239:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln161_reg_6975;
reg   [0:0] icmp_ln161_reg_6975_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln120_fu_897_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] attn_inst_matmul_gen_v_bias_arr_661_address0;
reg    attn_inst_matmul_gen_v_bias_arr_661_ce0;
wire   [113:0] attn_inst_matmul_gen_v_bias_arr_661_q0;
wire   [8:0] attn_inst_matmul_gen_v_weight_arr_660_address0;
reg    attn_inst_matmul_gen_v_weight_arr_660_ce0;
wire   [215:0] attn_inst_matmul_gen_v_weight_arr_660_q0;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln121_fu_903_p2;
reg   [0:0] icmp_ln121_reg_6913;
wire   [5:0] select_ln121_fu_994_p3;
reg   [5:0] select_ln121_reg_6920;
wire   [4:0] select_ln121_3_fu_1002_p3;
reg   [4:0] select_ln121_3_reg_6927;
wire   [3:0] trunc_ln121_fu_1010_p1;
reg   [3:0] trunc_ln121_reg_6932;
wire   [0:0] icmp_ln126_fu_1073_p2;
reg   [0:0] icmp_ln126_reg_6947;
reg   [0:0] icmp_ln126_reg_6947_pp0_iter3_reg;
wire   [0:0] icmp_ln161_fu_1082_p2;
reg   [0:0] icmp_ln161_reg_6975_pp0_iter3_reg;
wire   [9:0] trunc_ln131_fu_1087_p1;
reg   [9:0] trunc_ln131_reg_6979;
reg   [9:0] tmp_s_reg_6985;
reg   [9:0] tmp_83_reg_6991;
reg   [9:0] tmp_84_reg_6997;
reg   [9:0] tmp_85_reg_7003;
reg   [9:0] tmp_86_reg_7009;
reg   [9:0] tmp_87_reg_7015;
reg   [9:0] tmp_88_reg_7021;
reg   [9:0] tmp_89_reg_7027;
reg   [9:0] tmp_90_reg_7033;
reg   [9:0] tmp_91_reg_7039;
reg   [3:0] tmp_92_reg_7045;
wire  signed [5:0] mul_res_fu_1337_p2;
reg  signed [5:0] mul_res_reg_7050;
wire  signed [5:0] mul_res_144_fu_1369_p2;
reg  signed [5:0] mul_res_144_reg_7055;
wire  signed [5:0] mul_res_145_fu_1401_p2;
reg  signed [5:0] mul_res_145_reg_7060;
wire  signed [5:0] mul_res_146_fu_1433_p2;
reg  signed [5:0] mul_res_146_reg_7065;
wire  signed [5:0] mul_res_147_fu_1465_p2;
reg  signed [5:0] mul_res_147_reg_7070;
wire  signed [5:0] mul_res_148_fu_1497_p2;
reg  signed [5:0] mul_res_148_reg_7075;
wire  signed [5:0] mul_res_149_fu_1525_p2;
reg  signed [5:0] mul_res_149_reg_7080;
wire  signed [5:0] mul_res_150_fu_1553_p2;
reg  signed [5:0] mul_res_150_reg_7085;
wire  signed [5:0] mul_res_151_fu_1581_p2;
reg  signed [5:0] mul_res_151_reg_7090;
wire  signed [5:0] mul_res_152_fu_1609_p2;
reg  signed [5:0] mul_res_152_reg_7095;
wire  signed [5:0] mul_res_153_fu_1637_p2;
reg  signed [5:0] mul_res_153_reg_7100;
wire  signed [5:0] mul_res_154_fu_1665_p2;
reg  signed [5:0] mul_res_154_reg_7105;
wire  signed [5:0] mul_res_155_fu_1693_p2;
reg  signed [5:0] mul_res_155_reg_7110;
wire  signed [5:0] mul_res_156_fu_1721_p2;
reg  signed [5:0] mul_res_156_reg_7115;
wire  signed [5:0] mul_res_157_fu_1749_p2;
reg  signed [5:0] mul_res_157_reg_7120;
wire  signed [5:0] mul_res_158_fu_1777_p2;
reg  signed [5:0] mul_res_158_reg_7125;
wire  signed [5:0] mul_res_159_fu_1805_p2;
reg  signed [5:0] mul_res_159_reg_7130;
wire  signed [5:0] mul_res_160_fu_1833_p2;
reg  signed [5:0] mul_res_160_reg_7135;
wire  signed [5:0] mul_res_161_fu_1861_p2;
reg  signed [5:0] mul_res_161_reg_7140;
wire  signed [5:0] mul_res_162_fu_1889_p2;
reg  signed [5:0] mul_res_162_reg_7145;
wire  signed [5:0] mul_res_163_fu_1917_p2;
reg  signed [5:0] mul_res_163_reg_7150;
wire  signed [5:0] mul_res_164_fu_1945_p2;
reg  signed [5:0] mul_res_164_reg_7155;
wire  signed [5:0] mul_res_165_fu_1973_p2;
reg  signed [5:0] mul_res_165_reg_7160;
wire  signed [5:0] mul_res_166_fu_2001_p2;
reg  signed [5:0] mul_res_166_reg_7165;
wire  signed [5:0] mul_res_167_fu_2029_p2;
reg  signed [5:0] mul_res_167_reg_7170;
wire  signed [5:0] mul_res_168_fu_2057_p2;
reg  signed [5:0] mul_res_168_reg_7175;
wire  signed [5:0] mul_res_169_fu_2085_p2;
reg  signed [5:0] mul_res_169_reg_7180;
wire  signed [5:0] mul_res_170_fu_2113_p2;
reg  signed [5:0] mul_res_170_reg_7185;
wire  signed [5:0] mul_res_171_fu_2141_p2;
reg  signed [5:0] mul_res_171_reg_7190;
wire  signed [5:0] mul_res_172_fu_2169_p2;
reg  signed [5:0] mul_res_172_reg_7195;
wire  signed [5:0] mul_res_173_fu_2197_p2;
reg  signed [5:0] mul_res_173_reg_7200;
wire  signed [5:0] mul_res_174_fu_2225_p2;
reg  signed [5:0] mul_res_174_reg_7205;
wire  signed [5:0] mul_res_175_fu_2253_p2;
reg  signed [5:0] mul_res_175_reg_7210;
wire  signed [5:0] mul_res_176_fu_2281_p2;
reg  signed [5:0] mul_res_176_reg_7215;
wire  signed [5:0] mul_res_177_fu_2309_p2;
reg  signed [5:0] mul_res_177_reg_7220;
wire  signed [5:0] mul_res_178_fu_2337_p2;
reg  signed [5:0] mul_res_178_reg_7225;
wire  signed [5:0] mul_res_179_fu_2365_p2;
reg  signed [5:0] mul_res_179_reg_7230;
wire  signed [5:0] mul_res_180_fu_2393_p2;
reg  signed [5:0] mul_res_180_reg_7235;
wire  signed [5:0] mul_res_181_fu_2421_p2;
reg  signed [5:0] mul_res_181_reg_7240;
wire  signed [5:0] mul_res_182_fu_2449_p2;
reg  signed [5:0] mul_res_182_reg_7245;
wire  signed [5:0] mul_res_183_fu_2477_p2;
reg  signed [5:0] mul_res_183_reg_7250;
wire  signed [5:0] mul_res_184_fu_2505_p2;
reg  signed [5:0] mul_res_184_reg_7255;
wire  signed [5:0] mul_res_185_fu_2533_p2;
reg  signed [5:0] mul_res_185_reg_7260;
wire  signed [5:0] mul_res_186_fu_2561_p2;
reg  signed [5:0] mul_res_186_reg_7265;
wire  signed [5:0] mul_res_187_fu_2589_p2;
reg  signed [5:0] mul_res_187_reg_7270;
wire  signed [5:0] mul_res_188_fu_2617_p2;
reg  signed [5:0] mul_res_188_reg_7275;
wire  signed [5:0] mul_res_189_fu_2645_p2;
reg  signed [5:0] mul_res_189_reg_7280;
wire  signed [5:0] mul_res_190_fu_2673_p2;
reg  signed [5:0] mul_res_190_reg_7285;
wire  signed [5:0] mul_res_191_fu_2701_p2;
reg  signed [5:0] mul_res_191_reg_7290;
wire  signed [5:0] mul_res_192_fu_2729_p2;
reg  signed [5:0] mul_res_192_reg_7295;
wire  signed [5:0] mul_res_193_fu_2757_p2;
reg  signed [5:0] mul_res_193_reg_7300;
wire  signed [5:0] mul_res_194_fu_2785_p2;
reg  signed [5:0] mul_res_194_reg_7305;
wire  signed [5:0] mul_res_195_fu_2813_p2;
reg  signed [5:0] mul_res_195_reg_7310;
wire  signed [5:0] mul_res_196_fu_2841_p2;
reg  signed [5:0] mul_res_196_reg_7315;
wire  signed [5:0] mul_res_197_fu_2869_p2;
reg  signed [5:0] mul_res_197_reg_7320;
wire  signed [5:0] mul_res_198_fu_2897_p2;
reg  signed [5:0] mul_res_198_reg_7325;
wire  signed [5:0] mul_res_199_fu_2925_p2;
reg  signed [5:0] mul_res_199_reg_7330;
wire  signed [5:0] mul_res_200_fu_2953_p2;
reg  signed [5:0] mul_res_200_reg_7335;
wire  signed [5:0] mul_res_201_fu_2981_p2;
reg  signed [5:0] mul_res_201_reg_7340;
wire  signed [5:0] mul_res_202_fu_3009_p2;
reg  signed [5:0] mul_res_202_reg_7345;
wire  signed [5:0] mul_res_203_fu_3037_p2;
reg  signed [5:0] mul_res_203_reg_7350;
wire  signed [5:0] mul_res_204_fu_3065_p2;
reg  signed [5:0] mul_res_204_reg_7355;
wire  signed [5:0] mul_res_205_fu_3093_p2;
reg  signed [5:0] mul_res_205_reg_7360;
wire  signed [5:0] mul_res_206_fu_3121_p2;
reg  signed [5:0] mul_res_206_reg_7365;
wire  signed [5:0] mul_res_207_fu_3149_p2;
reg  signed [5:0] mul_res_207_reg_7370;
wire  signed [5:0] mul_res_208_fu_3177_p2;
reg  signed [5:0] mul_res_208_reg_7375;
wire  signed [5:0] mul_res_209_fu_3205_p2;
reg  signed [5:0] mul_res_209_reg_7380;
wire  signed [5:0] mul_res_210_fu_3233_p2;
reg  signed [5:0] mul_res_210_reg_7385;
wire  signed [5:0] mul_res_211_fu_3261_p2;
reg  signed [5:0] mul_res_211_reg_7390;
wire  signed [5:0] mul_res_212_fu_3289_p2;
reg  signed [5:0] mul_res_212_reg_7395;
wire  signed [5:0] mul_res_213_fu_3317_p2;
reg  signed [5:0] mul_res_213_reg_7400;
wire  signed [5:0] mul_res_214_fu_3345_p2;
reg  signed [5:0] mul_res_214_reg_7405;
wire  signed [5:0] mul_res_215_fu_3363_p2;
reg  signed [5:0] mul_res_215_reg_7410;
wire  signed [5:0] mul_res_216_fu_3381_p2;
reg  signed [5:0] mul_res_216_reg_7415;
wire  signed [5:0] mul_res_217_fu_3399_p2;
reg  signed [5:0] mul_res_217_reg_7420;
wire  signed [5:0] mul_res_218_fu_3417_p2;
reg  signed [5:0] mul_res_218_reg_7425;
wire  signed [5:0] mul_res_219_fu_3435_p2;
reg  signed [5:0] mul_res_219_reg_7430;
wire  signed [5:0] mul_res_220_fu_3453_p2;
reg  signed [5:0] mul_res_220_reg_7435;
wire  signed [5:0] mul_res_221_fu_3467_p2;
reg  signed [5:0] mul_res_221_reg_7440;
wire  signed [5:0] mul_res_222_fu_3481_p2;
reg  signed [5:0] mul_res_222_reg_7445;
wire  signed [5:0] mul_res_223_fu_3495_p2;
reg  signed [5:0] mul_res_223_reg_7450;
wire  signed [5:0] mul_res_224_fu_3509_p2;
reg  signed [5:0] mul_res_224_reg_7455;
wire  signed [5:0] mul_res_225_fu_3523_p2;
reg  signed [5:0] mul_res_225_reg_7460;
wire  signed [5:0] mul_res_226_fu_3537_p2;
reg  signed [5:0] mul_res_226_reg_7465;
wire  signed [5:0] mul_res_227_fu_3551_p2;
reg  signed [5:0] mul_res_227_reg_7470;
wire  signed [5:0] mul_res_228_fu_3565_p2;
reg  signed [5:0] mul_res_228_reg_7475;
wire  signed [5:0] mul_res_229_fu_3579_p2;
reg  signed [5:0] mul_res_229_reg_7480;
wire  signed [5:0] mul_res_230_fu_3593_p2;
reg  signed [5:0] mul_res_230_reg_7485;
wire  signed [5:0] mul_res_231_fu_3607_p2;
reg  signed [5:0] mul_res_231_reg_7490;
wire  signed [5:0] mul_res_232_fu_3621_p2;
reg  signed [5:0] mul_res_232_reg_7495;
wire  signed [5:0] mul_res_233_fu_3635_p2;
reg  signed [5:0] mul_res_233_reg_7500;
wire  signed [5:0] mul_res_234_fu_3649_p2;
reg  signed [5:0] mul_res_234_reg_7505;
wire  signed [5:0] mul_res_235_fu_3663_p2;
reg  signed [5:0] mul_res_235_reg_7510;
wire  signed [5:0] mul_res_236_fu_3677_p2;
reg  signed [5:0] mul_res_236_reg_7515;
wire  signed [5:0] mul_res_237_fu_3691_p2;
reg  signed [5:0] mul_res_237_reg_7520;
wire  signed [5:0] mul_res_238_fu_3705_p2;
reg  signed [5:0] mul_res_238_reg_7525;
wire  signed [5:0] mul_res_239_fu_3719_p2;
reg  signed [5:0] mul_res_239_reg_7530;
wire  signed [5:0] mul_res_240_fu_3733_p2;
reg  signed [5:0] mul_res_240_reg_7535;
wire  signed [5:0] mul_res_241_fu_3747_p2;
reg  signed [5:0] mul_res_241_reg_7540;
wire  signed [5:0] mul_res_242_fu_3761_p2;
reg  signed [5:0] mul_res_242_reg_7545;
wire  signed [5:0] mul_res_243_fu_3775_p2;
reg  signed [5:0] mul_res_243_reg_7550;
wire  signed [5:0] mul_res_244_fu_3789_p2;
reg  signed [5:0] mul_res_244_reg_7555;
wire  signed [5:0] mul_res_245_fu_3803_p2;
reg  signed [5:0] mul_res_245_reg_7560;
wire  signed [5:0] mul_res_246_fu_3817_p2;
reg  signed [5:0] mul_res_246_reg_7565;
wire  signed [5:0] mul_res_247_fu_3831_p2;
reg  signed [5:0] mul_res_247_reg_7570;
wire  signed [5:0] mul_res_248_fu_3845_p2;
reg  signed [5:0] mul_res_248_reg_7575;
wire  signed [5:0] mul_res_249_fu_3859_p2;
reg  signed [5:0] mul_res_249_reg_7580;
wire  signed [5:0] mul_res_250_fu_3873_p2;
reg  signed [5:0] mul_res_250_reg_7585;
wire  signed [5:0] mul_res_251_fu_3887_p2;
reg  signed [5:0] mul_res_251_reg_7590;
wire  signed [5:0] mul_res_252_fu_3901_p2;
reg  signed [5:0] mul_res_252_reg_7595;
wire  signed [5:0] mul_res_253_fu_3915_p2;
reg  signed [5:0] mul_res_253_reg_7600;
wire  signed [5:0] mul_res_254_fu_3929_p2;
reg  signed [5:0] mul_res_254_reg_7605;
wire  signed [5:0] mul_res_255_fu_3943_p2;
reg  signed [5:0] mul_res_255_reg_7610;
wire  signed [5:0] mul_res_256_fu_3957_p2;
reg  signed [5:0] mul_res_256_reg_7615;
wire  signed [5:0] mul_res_257_fu_3971_p2;
reg  signed [5:0] mul_res_257_reg_7620;
wire  signed [5:0] mul_res_258_fu_3985_p2;
reg  signed [5:0] mul_res_258_reg_7625;
wire  signed [5:0] mul_res_259_fu_3999_p2;
reg  signed [5:0] mul_res_259_reg_7630;
wire  signed [5:0] mul_res_260_fu_4013_p2;
reg  signed [5:0] mul_res_260_reg_7635;
wire  signed [5:0] mul_res_261_fu_4027_p2;
reg  signed [5:0] mul_res_261_reg_7640;
wire  signed [5:0] mul_res_262_fu_4041_p2;
reg  signed [5:0] mul_res_262_reg_7645;
wire  signed [5:0] mul_res_263_fu_4055_p2;
reg  signed [5:0] mul_res_263_reg_7650;
wire  signed [5:0] mul_res_264_fu_4069_p2;
reg  signed [5:0] mul_res_264_reg_7655;
wire  signed [5:0] mul_res_265_fu_4083_p2;
reg  signed [5:0] mul_res_265_reg_7660;
wire  signed [5:0] mul_res_266_fu_4097_p2;
reg  signed [5:0] mul_res_266_reg_7665;
wire  signed [5:0] mul_res_267_fu_4111_p2;
reg  signed [5:0] mul_res_267_reg_7670;
wire  signed [5:0] mul_res_268_fu_4125_p2;
reg  signed [5:0] mul_res_268_reg_7675;
wire  signed [5:0] mul_res_269_fu_4139_p2;
reg  signed [5:0] mul_res_269_reg_7680;
wire  signed [5:0] mul_res_270_fu_4153_p2;
reg  signed [5:0] mul_res_270_reg_7685;
wire  signed [5:0] mul_res_271_fu_4167_p2;
reg  signed [5:0] mul_res_271_reg_7690;
wire  signed [5:0] mul_res_272_fu_4181_p2;
reg  signed [5:0] mul_res_272_reg_7695;
wire  signed [5:0] mul_res_273_fu_4195_p2;
reg  signed [5:0] mul_res_273_reg_7700;
wire  signed [5:0] mul_res_274_fu_4209_p2;
reg  signed [5:0] mul_res_274_reg_7705;
wire  signed [5:0] mul_res_275_fu_4223_p2;
reg  signed [5:0] mul_res_275_reg_7710;
wire  signed [5:0] mul_res_276_fu_4237_p2;
reg  signed [5:0] mul_res_276_reg_7715;
wire  signed [5:0] mul_res_277_fu_4251_p2;
reg  signed [5:0] mul_res_277_reg_7720;
wire  signed [5:0] mul_res_278_fu_4265_p2;
reg  signed [5:0] mul_res_278_reg_7725;
wire  signed [5:0] mul_res_279_fu_4279_p2;
reg  signed [5:0] mul_res_279_reg_7730;
wire  signed [5:0] mul_res_280_fu_4293_p2;
reg  signed [5:0] mul_res_280_reg_7735;
wire  signed [5:0] mul_res_281_fu_4307_p2;
reg  signed [5:0] mul_res_281_reg_7740;
wire  signed [5:0] mul_res_282_fu_4321_p2;
reg  signed [5:0] mul_res_282_reg_7745;
wire  signed [5:0] mul_res_283_fu_4335_p2;
reg  signed [5:0] mul_res_283_reg_7750;
wire  signed [5:0] mul_res_284_fu_4349_p2;
reg  signed [5:0] mul_res_284_reg_7755;
wire  signed [5:0] mul_res_285_fu_4363_p2;
reg  signed [5:0] mul_res_285_reg_7760;
wire  signed [5:0] mul_res_286_fu_4377_p2;
reg  signed [5:0] mul_res_286_reg_7765;
wire   [9:0] add_ln153_148_fu_4740_p2;
reg   [9:0] add_ln153_148_reg_7770;
wire   [9:0] add_ln153_154_fu_4810_p2;
reg   [9:0] add_ln153_154_reg_7775;
wire   [9:0] add_ln153_160_fu_4880_p2;
reg   [9:0] add_ln153_160_reg_7780;
wire   [9:0] add_ln153_166_fu_4950_p2;
reg   [9:0] add_ln153_166_reg_7785;
wire   [9:0] add_ln153_172_fu_5020_p2;
reg   [9:0] add_ln153_172_reg_7790;
wire   [9:0] add_ln153_178_fu_5090_p2;
reg   [9:0] add_ln153_178_reg_7795;
wire   [9:0] add_ln153_184_fu_5160_p2;
reg   [9:0] add_ln153_184_reg_7800;
wire   [9:0] add_ln153_190_fu_5230_p2;
reg   [9:0] add_ln153_190_reg_7805;
wire   [9:0] add_ln153_196_fu_5300_p2;
reg   [9:0] add_ln153_196_reg_7810;
wire   [9:0] add_ln153_202_fu_5370_p2;
reg   [9:0] add_ln153_202_reg_7815;
wire   [9:0] add_ln153_208_fu_5440_p2;
reg   [9:0] add_ln153_208_reg_7820;
wire   [9:0] add_ln153_214_fu_5510_p2;
reg   [9:0] add_ln153_214_reg_7825;
wire   [9:0] add_ln153_220_fu_5580_p2;
reg   [9:0] add_ln153_220_reg_7830;
wire   [9:0] add_ln153_226_fu_5650_p2;
reg   [9:0] add_ln153_226_reg_7835;
wire   [9:0] add_ln153_232_fu_5720_p2;
reg   [9:0] add_ln153_232_reg_7840;
wire   [9:0] add_ln153_238_fu_5790_p2;
reg   [9:0] add_ln153_238_reg_7845;
wire   [9:0] add_ln153_244_fu_5860_p2;
reg   [9:0] add_ln153_244_reg_7850;
wire   [9:0] add_ln153_250_fu_5930_p2;
reg   [9:0] add_ln153_250_reg_7855;
wire   [9:0] add_ln153_256_fu_6000_p2;
reg   [9:0] add_ln153_256_reg_7860;
wire   [9:0] add_ln153_262_fu_6070_p2;
reg   [9:0] add_ln153_262_reg_7865;
wire   [9:0] add_ln153_268_fu_6140_p2;
reg   [9:0] add_ln153_268_reg_7870;
wire   [9:0] add_ln153_274_fu_6210_p2;
reg   [9:0] add_ln153_274_reg_7875;
wire   [9:0] add_ln153_280_fu_6280_p2;
reg   [9:0] add_ln153_280_reg_7880;
wire   [9:0] add_ln153_286_fu_6350_p2;
reg   [9:0] add_ln153_286_reg_7885;
wire   [63:0] zext_ln121_fu_1044_p1;
wire   [63:0] zext_ln151_2_fu_1068_p1;
reg   [5:0] cit_fu_680;
wire   [5:0] add_ln122_fu_1014_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [9:0] p_0_0_0364_fu_684;
reg   [9:0] p_0_0_0_112366_fu_688;
reg   [9:0] p_0_0_0_2368_fu_692;
reg   [9:0] p_0_0_0_3370_fu_696;
reg   [9:0] p_0_0_0_4372_fu_700;
reg   [9:0] p_0_0_0_5374_fu_704;
reg   [9:0] p_0_0_0_6376_fu_708;
reg   [9:0] p_0_0_0_7378_fu_712;
reg   [9:0] p_0_0_0_8380_fu_716;
reg   [9:0] p_0_0_0_9382_fu_720;
reg   [9:0] p_0_0_0_10384_fu_724;
reg   [9:0] p_0_0_0_11386_fu_728;
reg   [9:0] p_0_0_0388_fu_732;
reg   [9:0] p_0_0_0_112390_fu_736;
reg   [9:0] p_0_0_0_2392_fu_740;
reg   [9:0] p_0_0_0_3394_fu_744;
reg   [9:0] p_0_0_0_4396_fu_748;
reg   [9:0] p_0_0_0_5398_fu_752;
reg   [9:0] p_0_0_0_6400_fu_756;
reg   [9:0] p_0_0_0_7402_fu_760;
reg   [9:0] p_0_0_0_8404_fu_764;
reg   [9:0] p_0_0_0_9406_fu_768;
reg   [9:0] p_0_0_0_10408_fu_772;
reg   [9:0] p_0_0_0_11410_fu_776;
reg   [4:0] cot_fu_780;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [10:0] indvar_flatten_fu_784;
wire   [10:0] select_ln121_4_fu_915_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten59_fu_788;
wire   [15:0] add_ln120_fu_891_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln121_2_fu_909_p2;
wire   [0:0] icmp_ln122_fu_971_p2;
wire   [0:0] xor_ln120_fu_966_p2;
wire   [4:0] select_ln120_fu_959_p3;
wire   [0:0] and_ln120_fu_977_p2;
wire   [0:0] or_ln121_fu_989_p2;
wire   [4:0] add_ln121_fu_983_p2;
wire   [8:0] tmp_38_fu_1048_p3;
wire   [8:0] zext_ln151_fu_1059_p1;
wire   [8:0] add_ln151_fu_1062_p2;
wire   [2:0] trunc_ln137_fu_1203_p1;
wire   [2:0] trunc_ln151_fu_1317_p1;
wire  signed [2:0] mul_res_fu_1337_p0;
wire  signed [5:0] sext_ln151_204_fu_1325_p1;
wire  signed [2:0] mul_res_fu_1337_p1;
wire  signed [5:0] sext_ln151_fu_1321_p1;
wire   [2:0] trunc_ln137_s_fu_1207_p4;
wire   [2:0] tmp_93_fu_1343_p4;
wire  signed [2:0] mul_res_144_fu_1369_p0;
wire  signed [5:0] sext_ln151_207_fu_1357_p1;
wire  signed [2:0] mul_res_144_fu_1369_p1;
wire  signed [5:0] sext_ln151_206_fu_1353_p1;
wire   [2:0] trunc_ln137_11_fu_1217_p4;
wire   [2:0] tmp_94_fu_1375_p4;
wire  signed [2:0] mul_res_145_fu_1401_p0;
wire  signed [5:0] sext_ln151_210_fu_1389_p1;
wire  signed [2:0] mul_res_145_fu_1401_p1;
wire  signed [5:0] sext_ln151_209_fu_1385_p1;
wire   [2:0] trunc_ln137_12_fu_1227_p4;
wire   [2:0] tmp_95_fu_1407_p4;
wire  signed [2:0] mul_res_146_fu_1433_p0;
wire  signed [5:0] sext_ln151_213_fu_1421_p1;
wire  signed [2:0] mul_res_146_fu_1433_p1;
wire  signed [5:0] sext_ln151_212_fu_1417_p1;
wire   [2:0] trunc_ln137_13_fu_1237_p4;
wire   [2:0] tmp_96_fu_1439_p4;
wire  signed [2:0] mul_res_147_fu_1465_p0;
wire  signed [5:0] sext_ln151_216_fu_1453_p1;
wire  signed [2:0] mul_res_147_fu_1465_p1;
wire  signed [5:0] sext_ln151_215_fu_1449_p1;
wire   [2:0] trunc_ln137_14_fu_1247_p4;
wire   [2:0] tmp_97_fu_1471_p4;
wire  signed [2:0] mul_res_148_fu_1497_p0;
wire  signed [5:0] sext_ln151_219_fu_1485_p1;
wire  signed [2:0] mul_res_148_fu_1497_p1;
wire  signed [5:0] sext_ln151_218_fu_1481_p1;
wire   [2:0] tmp_98_fu_1503_p4;
wire  signed [2:0] mul_res_149_fu_1525_p0;
wire  signed [5:0] sext_ln151_220_fu_1513_p1;
wire  signed [2:0] mul_res_149_fu_1525_p1;
wire   [2:0] tmp_99_fu_1531_p4;
wire  signed [2:0] mul_res_150_fu_1553_p0;
wire  signed [5:0] sext_ln151_222_fu_1541_p1;
wire  signed [2:0] mul_res_150_fu_1553_p1;
wire   [2:0] tmp_100_fu_1559_p4;
wire  signed [2:0] mul_res_151_fu_1581_p0;
wire  signed [5:0] sext_ln151_224_fu_1569_p1;
wire  signed [2:0] mul_res_151_fu_1581_p1;
wire   [2:0] tmp_101_fu_1587_p4;
wire  signed [2:0] mul_res_152_fu_1609_p0;
wire  signed [5:0] sext_ln151_226_fu_1597_p1;
wire  signed [2:0] mul_res_152_fu_1609_p1;
wire   [2:0] tmp_102_fu_1615_p4;
wire  signed [2:0] mul_res_153_fu_1637_p0;
wire  signed [5:0] sext_ln151_228_fu_1625_p1;
wire  signed [2:0] mul_res_153_fu_1637_p1;
wire   [2:0] tmp_103_fu_1643_p4;
wire  signed [2:0] mul_res_154_fu_1665_p0;
wire  signed [5:0] sext_ln151_230_fu_1653_p1;
wire  signed [2:0] mul_res_154_fu_1665_p1;
wire   [2:0] tmp_104_fu_1671_p4;
wire  signed [2:0] mul_res_155_fu_1693_p0;
wire  signed [5:0] sext_ln151_231_fu_1681_p1;
wire  signed [2:0] mul_res_155_fu_1693_p1;
wire   [2:0] tmp_105_fu_1699_p4;
wire  signed [2:0] mul_res_156_fu_1721_p0;
wire  signed [5:0] sext_ln151_233_fu_1709_p1;
wire  signed [2:0] mul_res_156_fu_1721_p1;
wire   [2:0] tmp_106_fu_1727_p4;
wire  signed [2:0] mul_res_157_fu_1749_p0;
wire  signed [5:0] sext_ln151_235_fu_1737_p1;
wire  signed [2:0] mul_res_157_fu_1749_p1;
wire   [2:0] tmp_107_fu_1755_p4;
wire  signed [2:0] mul_res_158_fu_1777_p0;
wire  signed [5:0] sext_ln151_237_fu_1765_p1;
wire  signed [2:0] mul_res_158_fu_1777_p1;
wire   [2:0] tmp_108_fu_1783_p4;
wire  signed [2:0] mul_res_159_fu_1805_p0;
wire  signed [5:0] sext_ln151_239_fu_1793_p1;
wire  signed [2:0] mul_res_159_fu_1805_p1;
wire   [2:0] tmp_109_fu_1811_p4;
wire  signed [2:0] mul_res_160_fu_1833_p0;
wire  signed [5:0] sext_ln151_241_fu_1821_p1;
wire  signed [2:0] mul_res_160_fu_1833_p1;
wire   [2:0] tmp_110_fu_1839_p4;
wire  signed [2:0] mul_res_161_fu_1861_p0;
wire  signed [5:0] sext_ln151_242_fu_1849_p1;
wire  signed [2:0] mul_res_161_fu_1861_p1;
wire   [2:0] tmp_111_fu_1867_p4;
wire  signed [2:0] mul_res_162_fu_1889_p0;
wire  signed [5:0] sext_ln151_244_fu_1877_p1;
wire  signed [2:0] mul_res_162_fu_1889_p1;
wire   [2:0] tmp_112_fu_1895_p4;
wire  signed [2:0] mul_res_163_fu_1917_p0;
wire  signed [5:0] sext_ln151_246_fu_1905_p1;
wire  signed [2:0] mul_res_163_fu_1917_p1;
wire   [2:0] tmp_113_fu_1923_p4;
wire  signed [2:0] mul_res_164_fu_1945_p0;
wire  signed [5:0] sext_ln151_248_fu_1933_p1;
wire  signed [2:0] mul_res_164_fu_1945_p1;
wire   [2:0] tmp_114_fu_1951_p4;
wire  signed [2:0] mul_res_165_fu_1973_p0;
wire  signed [5:0] sext_ln151_250_fu_1961_p1;
wire  signed [2:0] mul_res_165_fu_1973_p1;
wire   [2:0] tmp_115_fu_1979_p4;
wire  signed [2:0] mul_res_166_fu_2001_p0;
wire  signed [5:0] sext_ln151_252_fu_1989_p1;
wire  signed [2:0] mul_res_166_fu_2001_p1;
wire   [2:0] tmp_116_fu_2007_p4;
wire  signed [2:0] mul_res_167_fu_2029_p0;
wire  signed [5:0] sext_ln151_253_fu_2017_p1;
wire  signed [2:0] mul_res_167_fu_2029_p1;
wire   [2:0] tmp_117_fu_2035_p4;
wire  signed [2:0] mul_res_168_fu_2057_p0;
wire  signed [5:0] sext_ln151_255_fu_2045_p1;
wire  signed [2:0] mul_res_168_fu_2057_p1;
wire   [2:0] tmp_118_fu_2063_p4;
wire  signed [2:0] mul_res_169_fu_2085_p0;
wire  signed [5:0] sext_ln151_257_fu_2073_p1;
wire  signed [2:0] mul_res_169_fu_2085_p1;
wire   [2:0] tmp_119_fu_2091_p4;
wire  signed [2:0] mul_res_170_fu_2113_p0;
wire  signed [5:0] sext_ln151_259_fu_2101_p1;
wire  signed [2:0] mul_res_170_fu_2113_p1;
wire   [2:0] tmp_120_fu_2119_p4;
wire  signed [2:0] mul_res_171_fu_2141_p0;
wire  signed [5:0] sext_ln151_261_fu_2129_p1;
wire  signed [2:0] mul_res_171_fu_2141_p1;
wire   [2:0] tmp_121_fu_2147_p4;
wire  signed [2:0] mul_res_172_fu_2169_p0;
wire  signed [5:0] sext_ln151_263_fu_2157_p1;
wire  signed [2:0] mul_res_172_fu_2169_p1;
wire   [2:0] tmp_122_fu_2175_p4;
wire  signed [2:0] mul_res_173_fu_2197_p0;
wire  signed [5:0] sext_ln151_264_fu_2185_p1;
wire  signed [2:0] mul_res_173_fu_2197_p1;
wire   [2:0] tmp_123_fu_2203_p4;
wire  signed [2:0] mul_res_174_fu_2225_p0;
wire  signed [5:0] sext_ln151_266_fu_2213_p1;
wire  signed [2:0] mul_res_174_fu_2225_p1;
wire   [2:0] tmp_124_fu_2231_p4;
wire  signed [2:0] mul_res_175_fu_2253_p0;
wire  signed [5:0] sext_ln151_268_fu_2241_p1;
wire  signed [2:0] mul_res_175_fu_2253_p1;
wire   [2:0] tmp_125_fu_2259_p4;
wire  signed [2:0] mul_res_176_fu_2281_p0;
wire  signed [5:0] sext_ln151_270_fu_2269_p1;
wire  signed [2:0] mul_res_176_fu_2281_p1;
wire   [2:0] tmp_126_fu_2287_p4;
wire  signed [2:0] mul_res_177_fu_2309_p0;
wire  signed [5:0] sext_ln151_272_fu_2297_p1;
wire  signed [2:0] mul_res_177_fu_2309_p1;
wire   [2:0] tmp_127_fu_2315_p4;
wire  signed [2:0] mul_res_178_fu_2337_p0;
wire  signed [5:0] sext_ln151_274_fu_2325_p1;
wire  signed [2:0] mul_res_178_fu_2337_p1;
wire   [2:0] tmp_128_fu_2343_p4;
wire  signed [2:0] mul_res_179_fu_2365_p0;
wire  signed [5:0] sext_ln151_275_fu_2353_p1;
wire  signed [2:0] mul_res_179_fu_2365_p1;
wire   [2:0] tmp_129_fu_2371_p4;
wire  signed [2:0] mul_res_180_fu_2393_p0;
wire  signed [5:0] sext_ln151_277_fu_2381_p1;
wire  signed [2:0] mul_res_180_fu_2393_p1;
wire   [2:0] tmp_130_fu_2399_p4;
wire  signed [2:0] mul_res_181_fu_2421_p0;
wire  signed [5:0] sext_ln151_279_fu_2409_p1;
wire  signed [2:0] mul_res_181_fu_2421_p1;
wire   [2:0] tmp_131_fu_2427_p4;
wire  signed [2:0] mul_res_182_fu_2449_p0;
wire  signed [5:0] sext_ln151_281_fu_2437_p1;
wire  signed [2:0] mul_res_182_fu_2449_p1;
wire   [2:0] tmp_132_fu_2455_p4;
wire  signed [2:0] mul_res_183_fu_2477_p0;
wire  signed [5:0] sext_ln151_283_fu_2465_p1;
wire  signed [2:0] mul_res_183_fu_2477_p1;
wire   [2:0] tmp_133_fu_2483_p4;
wire  signed [2:0] mul_res_184_fu_2505_p0;
wire  signed [5:0] sext_ln151_285_fu_2493_p1;
wire  signed [2:0] mul_res_184_fu_2505_p1;
wire   [2:0] tmp_134_fu_2511_p4;
wire  signed [2:0] mul_res_185_fu_2533_p0;
wire  signed [5:0] sext_ln151_286_fu_2521_p1;
wire  signed [2:0] mul_res_185_fu_2533_p1;
wire   [2:0] tmp_135_fu_2539_p4;
wire  signed [2:0] mul_res_186_fu_2561_p0;
wire  signed [5:0] sext_ln151_288_fu_2549_p1;
wire  signed [2:0] mul_res_186_fu_2561_p1;
wire   [2:0] tmp_136_fu_2567_p4;
wire  signed [2:0] mul_res_187_fu_2589_p0;
wire  signed [5:0] sext_ln151_290_fu_2577_p1;
wire  signed [2:0] mul_res_187_fu_2589_p1;
wire   [2:0] tmp_137_fu_2595_p4;
wire  signed [2:0] mul_res_188_fu_2617_p0;
wire  signed [5:0] sext_ln151_292_fu_2605_p1;
wire  signed [2:0] mul_res_188_fu_2617_p1;
wire   [2:0] tmp_138_fu_2623_p4;
wire  signed [2:0] mul_res_189_fu_2645_p0;
wire  signed [5:0] sext_ln151_294_fu_2633_p1;
wire  signed [2:0] mul_res_189_fu_2645_p1;
wire   [2:0] tmp_139_fu_2651_p4;
wire  signed [2:0] mul_res_190_fu_2673_p0;
wire  signed [5:0] sext_ln151_296_fu_2661_p1;
wire  signed [2:0] mul_res_190_fu_2673_p1;
wire   [2:0] tmp_140_fu_2679_p4;
wire  signed [2:0] mul_res_191_fu_2701_p0;
wire  signed [5:0] sext_ln151_297_fu_2689_p1;
wire  signed [2:0] mul_res_191_fu_2701_p1;
wire   [2:0] tmp_141_fu_2707_p4;
wire  signed [2:0] mul_res_192_fu_2729_p0;
wire  signed [5:0] sext_ln151_299_fu_2717_p1;
wire  signed [2:0] mul_res_192_fu_2729_p1;
wire   [2:0] tmp_142_fu_2735_p4;
wire  signed [2:0] mul_res_193_fu_2757_p0;
wire  signed [5:0] sext_ln151_301_fu_2745_p1;
wire  signed [2:0] mul_res_193_fu_2757_p1;
wire   [2:0] tmp_143_fu_2763_p4;
wire  signed [2:0] mul_res_194_fu_2785_p0;
wire  signed [5:0] sext_ln151_303_fu_2773_p1;
wire  signed [2:0] mul_res_194_fu_2785_p1;
wire   [2:0] tmp_144_fu_2791_p4;
wire  signed [2:0] mul_res_195_fu_2813_p0;
wire  signed [5:0] sext_ln151_305_fu_2801_p1;
wire  signed [2:0] mul_res_195_fu_2813_p1;
wire   [2:0] tmp_145_fu_2819_p4;
wire  signed [2:0] mul_res_196_fu_2841_p0;
wire  signed [5:0] sext_ln151_307_fu_2829_p1;
wire  signed [2:0] mul_res_196_fu_2841_p1;
wire   [2:0] tmp_146_fu_2847_p4;
wire  signed [2:0] mul_res_197_fu_2869_p0;
wire  signed [5:0] sext_ln151_308_fu_2857_p1;
wire  signed [2:0] mul_res_197_fu_2869_p1;
wire   [2:0] tmp_147_fu_2875_p4;
wire  signed [2:0] mul_res_198_fu_2897_p0;
wire  signed [5:0] sext_ln151_310_fu_2885_p1;
wire  signed [2:0] mul_res_198_fu_2897_p1;
wire   [2:0] tmp_148_fu_2903_p4;
wire  signed [2:0] mul_res_199_fu_2925_p0;
wire  signed [5:0] sext_ln151_312_fu_2913_p1;
wire  signed [2:0] mul_res_199_fu_2925_p1;
wire   [2:0] tmp_149_fu_2931_p4;
wire  signed [2:0] mul_res_200_fu_2953_p0;
wire  signed [5:0] sext_ln151_314_fu_2941_p1;
wire  signed [2:0] mul_res_200_fu_2953_p1;
wire   [2:0] tmp_150_fu_2959_p4;
wire  signed [2:0] mul_res_201_fu_2981_p0;
wire  signed [5:0] sext_ln151_316_fu_2969_p1;
wire  signed [2:0] mul_res_201_fu_2981_p1;
wire   [2:0] tmp_151_fu_2987_p4;
wire  signed [2:0] mul_res_202_fu_3009_p0;
wire  signed [5:0] sext_ln151_318_fu_2997_p1;
wire  signed [2:0] mul_res_202_fu_3009_p1;
wire   [2:0] tmp_152_fu_3015_p4;
wire  signed [2:0] mul_res_203_fu_3037_p0;
wire  signed [5:0] sext_ln151_319_fu_3025_p1;
wire  signed [2:0] mul_res_203_fu_3037_p1;
wire   [2:0] tmp_153_fu_3043_p4;
wire  signed [2:0] mul_res_204_fu_3065_p0;
wire  signed [5:0] sext_ln151_321_fu_3053_p1;
wire  signed [2:0] mul_res_204_fu_3065_p1;
wire   [2:0] tmp_154_fu_3071_p4;
wire  signed [2:0] mul_res_205_fu_3093_p0;
wire  signed [5:0] sext_ln151_323_fu_3081_p1;
wire  signed [2:0] mul_res_205_fu_3093_p1;
wire   [2:0] tmp_155_fu_3099_p4;
wire  signed [2:0] mul_res_206_fu_3121_p0;
wire  signed [5:0] sext_ln151_325_fu_3109_p1;
wire  signed [2:0] mul_res_206_fu_3121_p1;
wire   [2:0] tmp_156_fu_3127_p4;
wire  signed [2:0] mul_res_207_fu_3149_p0;
wire  signed [5:0] sext_ln151_327_fu_3137_p1;
wire  signed [2:0] mul_res_207_fu_3149_p1;
wire   [2:0] tmp_157_fu_3155_p4;
wire  signed [2:0] mul_res_208_fu_3177_p0;
wire  signed [5:0] sext_ln151_329_fu_3165_p1;
wire  signed [2:0] mul_res_208_fu_3177_p1;
wire   [2:0] tmp_158_fu_3183_p4;
wire  signed [2:0] mul_res_209_fu_3205_p0;
wire  signed [5:0] sext_ln151_330_fu_3193_p1;
wire  signed [2:0] mul_res_209_fu_3205_p1;
wire   [2:0] tmp_159_fu_3211_p4;
wire  signed [2:0] mul_res_210_fu_3233_p0;
wire  signed [5:0] sext_ln151_332_fu_3221_p1;
wire  signed [2:0] mul_res_210_fu_3233_p1;
wire   [2:0] tmp_160_fu_3239_p4;
wire  signed [2:0] mul_res_211_fu_3261_p0;
wire  signed [5:0] sext_ln151_334_fu_3249_p1;
wire  signed [2:0] mul_res_211_fu_3261_p1;
wire   [2:0] tmp_161_fu_3267_p4;
wire  signed [2:0] mul_res_212_fu_3289_p0;
wire  signed [5:0] sext_ln151_336_fu_3277_p1;
wire  signed [2:0] mul_res_212_fu_3289_p1;
wire   [2:0] tmp_162_fu_3295_p4;
wire  signed [2:0] mul_res_213_fu_3317_p0;
wire  signed [5:0] sext_ln151_337_fu_3305_p1;
wire  signed [2:0] mul_res_213_fu_3317_p1;
wire   [2:0] tmp_163_fu_3323_p4;
wire  signed [2:0] mul_res_214_fu_3345_p0;
wire  signed [5:0] sext_ln151_338_fu_3333_p1;
wire  signed [2:0] mul_res_214_fu_3345_p1;
wire   [2:0] trunc_ln137_15_fu_1257_p4;
wire  signed [2:0] mul_res_215_fu_3363_p0;
wire  signed [2:0] mul_res_215_fu_3363_p1;
wire  signed [5:0] sext_ln151_339_fu_3351_p1;
wire   [2:0] trunc_ln137_16_fu_1267_p4;
wire  signed [2:0] mul_res_216_fu_3381_p0;
wire  signed [2:0] mul_res_216_fu_3381_p1;
wire  signed [5:0] sext_ln151_340_fu_3369_p1;
wire   [2:0] trunc_ln137_17_fu_1277_p4;
wire  signed [2:0] mul_res_217_fu_3399_p0;
wire  signed [2:0] mul_res_217_fu_3399_p1;
wire  signed [5:0] sext_ln151_341_fu_3387_p1;
wire   [2:0] trunc_ln137_18_fu_1287_p4;
wire  signed [2:0] mul_res_218_fu_3417_p0;
wire  signed [2:0] mul_res_218_fu_3417_p1;
wire  signed [5:0] sext_ln151_342_fu_3405_p1;
wire   [2:0] trunc_ln137_19_fu_1297_p4;
wire  signed [2:0] mul_res_219_fu_3435_p0;
wire  signed [2:0] mul_res_219_fu_3435_p1;
wire  signed [5:0] sext_ln151_343_fu_3423_p1;
wire   [2:0] trunc_ln137_20_fu_1307_p4;
wire  signed [2:0] mul_res_220_fu_3453_p0;
wire  signed [2:0] mul_res_220_fu_3453_p1;
wire  signed [5:0] sext_ln151_344_fu_3441_p1;
wire  signed [2:0] mul_res_221_fu_3467_p0;
wire  signed [2:0] mul_res_221_fu_3467_p1;
wire  signed [2:0] mul_res_222_fu_3481_p0;
wire  signed [2:0] mul_res_222_fu_3481_p1;
wire  signed [2:0] mul_res_223_fu_3495_p0;
wire  signed [2:0] mul_res_223_fu_3495_p1;
wire  signed [2:0] mul_res_224_fu_3509_p0;
wire  signed [2:0] mul_res_224_fu_3509_p1;
wire  signed [2:0] mul_res_225_fu_3523_p0;
wire  signed [2:0] mul_res_225_fu_3523_p1;
wire  signed [2:0] mul_res_226_fu_3537_p0;
wire  signed [2:0] mul_res_226_fu_3537_p1;
wire  signed [2:0] mul_res_227_fu_3551_p0;
wire  signed [2:0] mul_res_227_fu_3551_p1;
wire  signed [2:0] mul_res_228_fu_3565_p0;
wire  signed [2:0] mul_res_228_fu_3565_p1;
wire  signed [2:0] mul_res_229_fu_3579_p0;
wire  signed [2:0] mul_res_229_fu_3579_p1;
wire  signed [2:0] mul_res_230_fu_3593_p0;
wire  signed [2:0] mul_res_230_fu_3593_p1;
wire  signed [2:0] mul_res_231_fu_3607_p0;
wire  signed [2:0] mul_res_231_fu_3607_p1;
wire  signed [2:0] mul_res_232_fu_3621_p0;
wire  signed [2:0] mul_res_232_fu_3621_p1;
wire  signed [2:0] mul_res_233_fu_3635_p0;
wire  signed [2:0] mul_res_233_fu_3635_p1;
wire  signed [2:0] mul_res_234_fu_3649_p0;
wire  signed [2:0] mul_res_234_fu_3649_p1;
wire  signed [2:0] mul_res_235_fu_3663_p0;
wire  signed [2:0] mul_res_235_fu_3663_p1;
wire  signed [2:0] mul_res_236_fu_3677_p0;
wire  signed [2:0] mul_res_236_fu_3677_p1;
wire  signed [2:0] mul_res_237_fu_3691_p0;
wire  signed [2:0] mul_res_237_fu_3691_p1;
wire  signed [2:0] mul_res_238_fu_3705_p0;
wire  signed [2:0] mul_res_238_fu_3705_p1;
wire  signed [2:0] mul_res_239_fu_3719_p0;
wire  signed [2:0] mul_res_239_fu_3719_p1;
wire  signed [2:0] mul_res_240_fu_3733_p0;
wire  signed [2:0] mul_res_240_fu_3733_p1;
wire  signed [2:0] mul_res_241_fu_3747_p0;
wire  signed [2:0] mul_res_241_fu_3747_p1;
wire  signed [2:0] mul_res_242_fu_3761_p0;
wire  signed [2:0] mul_res_242_fu_3761_p1;
wire  signed [2:0] mul_res_243_fu_3775_p0;
wire  signed [2:0] mul_res_243_fu_3775_p1;
wire  signed [2:0] mul_res_244_fu_3789_p0;
wire  signed [2:0] mul_res_244_fu_3789_p1;
wire  signed [2:0] mul_res_245_fu_3803_p0;
wire  signed [2:0] mul_res_245_fu_3803_p1;
wire  signed [2:0] mul_res_246_fu_3817_p0;
wire  signed [2:0] mul_res_246_fu_3817_p1;
wire  signed [2:0] mul_res_247_fu_3831_p0;
wire  signed [2:0] mul_res_247_fu_3831_p1;
wire  signed [2:0] mul_res_248_fu_3845_p0;
wire  signed [2:0] mul_res_248_fu_3845_p1;
wire  signed [2:0] mul_res_249_fu_3859_p0;
wire  signed [2:0] mul_res_249_fu_3859_p1;
wire  signed [2:0] mul_res_250_fu_3873_p0;
wire  signed [2:0] mul_res_250_fu_3873_p1;
wire  signed [2:0] mul_res_251_fu_3887_p0;
wire  signed [2:0] mul_res_251_fu_3887_p1;
wire  signed [2:0] mul_res_252_fu_3901_p0;
wire  signed [2:0] mul_res_252_fu_3901_p1;
wire  signed [2:0] mul_res_253_fu_3915_p0;
wire  signed [2:0] mul_res_253_fu_3915_p1;
wire  signed [2:0] mul_res_254_fu_3929_p0;
wire  signed [2:0] mul_res_254_fu_3929_p1;
wire  signed [2:0] mul_res_255_fu_3943_p0;
wire  signed [2:0] mul_res_255_fu_3943_p1;
wire  signed [2:0] mul_res_256_fu_3957_p0;
wire  signed [2:0] mul_res_256_fu_3957_p1;
wire  signed [2:0] mul_res_257_fu_3971_p0;
wire  signed [2:0] mul_res_257_fu_3971_p1;
wire  signed [2:0] mul_res_258_fu_3985_p0;
wire  signed [2:0] mul_res_258_fu_3985_p1;
wire  signed [2:0] mul_res_259_fu_3999_p0;
wire  signed [2:0] mul_res_259_fu_3999_p1;
wire  signed [2:0] mul_res_260_fu_4013_p0;
wire  signed [2:0] mul_res_260_fu_4013_p1;
wire  signed [2:0] mul_res_261_fu_4027_p0;
wire  signed [2:0] mul_res_261_fu_4027_p1;
wire  signed [2:0] mul_res_262_fu_4041_p0;
wire  signed [2:0] mul_res_262_fu_4041_p1;
wire  signed [2:0] mul_res_263_fu_4055_p0;
wire  signed [2:0] mul_res_263_fu_4055_p1;
wire  signed [2:0] mul_res_264_fu_4069_p0;
wire  signed [2:0] mul_res_264_fu_4069_p1;
wire  signed [2:0] mul_res_265_fu_4083_p0;
wire  signed [2:0] mul_res_265_fu_4083_p1;
wire  signed [2:0] mul_res_266_fu_4097_p0;
wire  signed [2:0] mul_res_266_fu_4097_p1;
wire  signed [2:0] mul_res_267_fu_4111_p0;
wire  signed [2:0] mul_res_267_fu_4111_p1;
wire  signed [2:0] mul_res_268_fu_4125_p0;
wire  signed [2:0] mul_res_268_fu_4125_p1;
wire  signed [2:0] mul_res_269_fu_4139_p0;
wire  signed [2:0] mul_res_269_fu_4139_p1;
wire  signed [2:0] mul_res_270_fu_4153_p0;
wire  signed [2:0] mul_res_270_fu_4153_p1;
wire  signed [2:0] mul_res_271_fu_4167_p0;
wire  signed [2:0] mul_res_271_fu_4167_p1;
wire  signed [2:0] mul_res_272_fu_4181_p0;
wire  signed [2:0] mul_res_272_fu_4181_p1;
wire  signed [2:0] mul_res_273_fu_4195_p0;
wire  signed [2:0] mul_res_273_fu_4195_p1;
wire  signed [2:0] mul_res_274_fu_4209_p0;
wire  signed [2:0] mul_res_274_fu_4209_p1;
wire  signed [2:0] mul_res_275_fu_4223_p0;
wire  signed [2:0] mul_res_275_fu_4223_p1;
wire  signed [2:0] mul_res_276_fu_4237_p0;
wire  signed [2:0] mul_res_276_fu_4237_p1;
wire  signed [2:0] mul_res_277_fu_4251_p0;
wire  signed [2:0] mul_res_277_fu_4251_p1;
wire  signed [2:0] mul_res_278_fu_4265_p0;
wire  signed [2:0] mul_res_278_fu_4265_p1;
wire  signed [2:0] mul_res_279_fu_4279_p0;
wire  signed [2:0] mul_res_279_fu_4279_p1;
wire  signed [2:0] mul_res_280_fu_4293_p0;
wire  signed [2:0] mul_res_280_fu_4293_p1;
wire  signed [2:0] mul_res_281_fu_4307_p0;
wire  signed [2:0] mul_res_281_fu_4307_p1;
wire  signed [2:0] mul_res_282_fu_4321_p0;
wire  signed [2:0] mul_res_282_fu_4321_p1;
wire  signed [2:0] mul_res_283_fu_4335_p0;
wire  signed [2:0] mul_res_283_fu_4335_p1;
wire  signed [2:0] mul_res_284_fu_4349_p0;
wire  signed [2:0] mul_res_284_fu_4349_p1;
wire  signed [2:0] mul_res_285_fu_4363_p0;
wire  signed [2:0] mul_res_285_fu_4363_p1;
wire  signed [2:0] mul_res_286_fu_4377_p0;
wire  signed [2:0] mul_res_286_fu_4377_p1;
wire  signed [9:0] sext_ln131_fu_4527_p1;
wire  signed [6:0] sext_ln151_214_fu_4685_p1;
wire  signed [6:0] sext_ln151_217_fu_4688_p1;
wire   [6:0] add_ln153_fu_4694_p2;
wire  signed [6:0] sext_ln151_211_fu_4682_p1;
wire  signed [6:0] sext_ln151_208_fu_4679_p1;
wire   [6:0] add_ln153_145_fu_4704_p2;
wire  signed [6:0] sext_ln151_205_fu_4676_p1;
wire  signed [6:0] sext_ln153_fu_4691_p1;
wire   [6:0] add_ln153_146_fu_4714_p2;
wire  signed [7:0] sext_ln153_122_fu_4720_p1;
wire  signed [7:0] sext_ln153_121_fu_4710_p1;
wire   [7:0] add_ln153_147_fu_4724_p2;
wire  signed [9:0] sext_ln153_123_fu_4730_p1;
wire  signed [9:0] sext_ln153_120_fu_4700_p1;
wire   [9:0] add_ln153_144_fu_4734_p2;
wire   [9:0] select_ln126_46_fu_4670_p3;
wire  signed [6:0] sext_ln151_227_fu_4755_p1;
wire  signed [6:0] sext_ln151_229_fu_4758_p1;
wire   [6:0] add_ln153_149_fu_4764_p2;
wire  signed [6:0] sext_ln151_225_fu_4752_p1;
wire  signed [6:0] sext_ln151_223_fu_4749_p1;
wire   [6:0] add_ln153_151_fu_4774_p2;
wire  signed [6:0] sext_ln151_221_fu_4746_p1;
wire  signed [6:0] sext_ln153_124_fu_4761_p1;
wire   [6:0] add_ln153_152_fu_4784_p2;
wire  signed [7:0] sext_ln153_127_fu_4790_p1;
wire  signed [7:0] sext_ln153_126_fu_4780_p1;
wire   [7:0] add_ln153_153_fu_4794_p2;
wire  signed [9:0] sext_ln153_128_fu_4800_p1;
wire  signed [9:0] sext_ln153_125_fu_4770_p1;
wire   [9:0] add_ln153_150_fu_4804_p2;
wire   [9:0] select_ln126_45_fu_4664_p3;
wire  signed [6:0] sext_ln151_238_fu_4825_p1;
wire  signed [6:0] sext_ln151_240_fu_4828_p1;
wire   [6:0] add_ln153_155_fu_4834_p2;
wire  signed [6:0] sext_ln151_236_fu_4822_p1;
wire  signed [6:0] sext_ln151_234_fu_4819_p1;
wire   [6:0] add_ln153_157_fu_4844_p2;
wire  signed [6:0] sext_ln151_232_fu_4816_p1;
wire  signed [6:0] sext_ln153_129_fu_4831_p1;
wire   [6:0] add_ln153_158_fu_4854_p2;
wire  signed [7:0] sext_ln153_132_fu_4860_p1;
wire  signed [7:0] sext_ln153_131_fu_4850_p1;
wire   [7:0] add_ln153_159_fu_4864_p2;
wire  signed [9:0] sext_ln153_133_fu_4870_p1;
wire  signed [9:0] sext_ln153_130_fu_4840_p1;
wire   [9:0] add_ln153_156_fu_4874_p2;
wire   [9:0] select_ln126_44_fu_4658_p3;
wire  signed [6:0] sext_ln151_249_fu_4895_p1;
wire  signed [6:0] sext_ln151_251_fu_4898_p1;
wire   [6:0] add_ln153_161_fu_4904_p2;
wire  signed [6:0] sext_ln151_247_fu_4892_p1;
wire  signed [6:0] sext_ln151_245_fu_4889_p1;
wire   [6:0] add_ln153_163_fu_4914_p2;
wire  signed [6:0] sext_ln151_243_fu_4886_p1;
wire  signed [6:0] sext_ln153_134_fu_4901_p1;
wire   [6:0] add_ln153_164_fu_4924_p2;
wire  signed [7:0] sext_ln153_137_fu_4930_p1;
wire  signed [7:0] sext_ln153_136_fu_4920_p1;
wire   [7:0] add_ln153_165_fu_4934_p2;
wire  signed [9:0] sext_ln153_138_fu_4940_p1;
wire  signed [9:0] sext_ln153_135_fu_4910_p1;
wire   [9:0] add_ln153_162_fu_4944_p2;
wire   [9:0] select_ln126_43_fu_4652_p3;
wire  signed [6:0] sext_ln151_260_fu_4965_p1;
wire  signed [6:0] sext_ln151_262_fu_4968_p1;
wire   [6:0] add_ln153_167_fu_4974_p2;
wire  signed [6:0] sext_ln151_258_fu_4962_p1;
wire  signed [6:0] sext_ln151_256_fu_4959_p1;
wire   [6:0] add_ln153_169_fu_4984_p2;
wire  signed [6:0] sext_ln151_254_fu_4956_p1;
wire  signed [6:0] sext_ln153_139_fu_4971_p1;
wire   [6:0] add_ln153_170_fu_4994_p2;
wire  signed [7:0] sext_ln153_142_fu_5000_p1;
wire  signed [7:0] sext_ln153_141_fu_4990_p1;
wire   [7:0] add_ln153_171_fu_5004_p2;
wire  signed [9:0] sext_ln153_143_fu_5010_p1;
wire  signed [9:0] sext_ln153_140_fu_4980_p1;
wire   [9:0] add_ln153_168_fu_5014_p2;
wire   [9:0] select_ln126_42_fu_4646_p3;
wire  signed [6:0] sext_ln151_271_fu_5035_p1;
wire  signed [6:0] sext_ln151_273_fu_5038_p1;
wire   [6:0] add_ln153_173_fu_5044_p2;
wire  signed [6:0] sext_ln151_269_fu_5032_p1;
wire  signed [6:0] sext_ln151_267_fu_5029_p1;
wire   [6:0] add_ln153_175_fu_5054_p2;
wire  signed [6:0] sext_ln151_265_fu_5026_p1;
wire  signed [6:0] sext_ln153_144_fu_5041_p1;
wire   [6:0] add_ln153_176_fu_5064_p2;
wire  signed [7:0] sext_ln153_147_fu_5070_p1;
wire  signed [7:0] sext_ln153_146_fu_5060_p1;
wire   [7:0] add_ln153_177_fu_5074_p2;
wire  signed [9:0] sext_ln153_148_fu_5080_p1;
wire  signed [9:0] sext_ln153_145_fu_5050_p1;
wire   [9:0] add_ln153_174_fu_5084_p2;
wire   [9:0] select_ln126_41_fu_4640_p3;
wire  signed [6:0] sext_ln151_282_fu_5105_p1;
wire  signed [6:0] sext_ln151_284_fu_5108_p1;
wire   [6:0] add_ln153_179_fu_5114_p2;
wire  signed [6:0] sext_ln151_280_fu_5102_p1;
wire  signed [6:0] sext_ln151_278_fu_5099_p1;
wire   [6:0] add_ln153_181_fu_5124_p2;
wire  signed [6:0] sext_ln151_276_fu_5096_p1;
wire  signed [6:0] sext_ln153_149_fu_5111_p1;
wire   [6:0] add_ln153_182_fu_5134_p2;
wire  signed [7:0] sext_ln153_152_fu_5140_p1;
wire  signed [7:0] sext_ln153_151_fu_5130_p1;
wire   [7:0] add_ln153_183_fu_5144_p2;
wire  signed [9:0] sext_ln153_153_fu_5150_p1;
wire  signed [9:0] sext_ln153_150_fu_5120_p1;
wire   [9:0] add_ln153_180_fu_5154_p2;
wire   [9:0] select_ln126_40_fu_4634_p3;
wire  signed [6:0] sext_ln151_293_fu_5175_p1;
wire  signed [6:0] sext_ln151_295_fu_5178_p1;
wire   [6:0] add_ln153_185_fu_5184_p2;
wire  signed [6:0] sext_ln151_291_fu_5172_p1;
wire  signed [6:0] sext_ln151_289_fu_5169_p1;
wire   [6:0] add_ln153_187_fu_5194_p2;
wire  signed [6:0] sext_ln151_287_fu_5166_p1;
wire  signed [6:0] sext_ln153_154_fu_5181_p1;
wire   [6:0] add_ln153_188_fu_5204_p2;
wire  signed [7:0] sext_ln153_157_fu_5210_p1;
wire  signed [7:0] sext_ln153_156_fu_5200_p1;
wire   [7:0] add_ln153_189_fu_5214_p2;
wire  signed [9:0] sext_ln153_158_fu_5220_p1;
wire  signed [9:0] sext_ln153_155_fu_5190_p1;
wire   [9:0] add_ln153_186_fu_5224_p2;
wire   [9:0] select_ln126_39_fu_4628_p3;
wire  signed [6:0] sext_ln151_304_fu_5245_p1;
wire  signed [6:0] sext_ln151_306_fu_5248_p1;
wire   [6:0] add_ln153_191_fu_5254_p2;
wire  signed [6:0] sext_ln151_302_fu_5242_p1;
wire  signed [6:0] sext_ln151_300_fu_5239_p1;
wire   [6:0] add_ln153_193_fu_5264_p2;
wire  signed [6:0] sext_ln151_298_fu_5236_p1;
wire  signed [6:0] sext_ln153_159_fu_5251_p1;
wire   [6:0] add_ln153_194_fu_5274_p2;
wire  signed [7:0] sext_ln153_162_fu_5280_p1;
wire  signed [7:0] sext_ln153_161_fu_5270_p1;
wire   [7:0] add_ln153_195_fu_5284_p2;
wire  signed [9:0] sext_ln153_163_fu_5290_p1;
wire  signed [9:0] sext_ln153_160_fu_5260_p1;
wire   [9:0] add_ln153_192_fu_5294_p2;
wire   [9:0] select_ln126_38_fu_4622_p3;
wire  signed [6:0] sext_ln151_315_fu_5315_p1;
wire  signed [6:0] sext_ln151_317_fu_5318_p1;
wire   [6:0] add_ln153_197_fu_5324_p2;
wire  signed [6:0] sext_ln151_313_fu_5312_p1;
wire  signed [6:0] sext_ln151_311_fu_5309_p1;
wire   [6:0] add_ln153_199_fu_5334_p2;
wire  signed [6:0] sext_ln151_309_fu_5306_p1;
wire  signed [6:0] sext_ln153_164_fu_5321_p1;
wire   [6:0] add_ln153_200_fu_5344_p2;
wire  signed [7:0] sext_ln153_167_fu_5350_p1;
wire  signed [7:0] sext_ln153_166_fu_5340_p1;
wire   [7:0] add_ln153_201_fu_5354_p2;
wire  signed [9:0] sext_ln153_168_fu_5360_p1;
wire  signed [9:0] sext_ln153_165_fu_5330_p1;
wire   [9:0] add_ln153_198_fu_5364_p2;
wire   [9:0] select_ln126_37_fu_4616_p3;
wire  signed [6:0] sext_ln151_326_fu_5385_p1;
wire  signed [6:0] sext_ln151_328_fu_5388_p1;
wire   [6:0] add_ln153_203_fu_5394_p2;
wire  signed [9:0] sext_ln153_170_fu_5400_p1;
wire   [9:0] select_ln126_36_fu_4610_p3;
wire  signed [6:0] sext_ln151_324_fu_5382_p1;
wire  signed [6:0] sext_ln151_322_fu_5379_p1;
wire   [6:0] add_ln153_205_fu_5410_p2;
wire  signed [6:0] sext_ln151_320_fu_5376_p1;
wire  signed [6:0] sext_ln153_169_fu_5391_p1;
wire   [6:0] add_ln153_206_fu_5420_p2;
wire  signed [7:0] sext_ln153_172_fu_5426_p1;
wire  signed [7:0] sext_ln153_171_fu_5416_p1;
wire   [7:0] add_ln153_207_fu_5430_p2;
wire  signed [9:0] sext_ln153_173_fu_5436_p1;
wire   [9:0] add_ln153_204_fu_5404_p2;
wire  signed [6:0] sext_ln151_345_fu_5455_p1;
wire  signed [6:0] sext_ln151_346_fu_5458_p1;
wire   [6:0] add_ln153_209_fu_5464_p2;
wire  signed [9:0] sext_ln153_175_fu_5470_p1;
wire   [9:0] select_ln126_35_fu_4603_p3;
wire  signed [6:0] sext_ln151_335_fu_5452_p1;
wire  signed [6:0] sext_ln151_333_fu_5449_p1;
wire   [6:0] add_ln153_211_fu_5480_p2;
wire  signed [6:0] sext_ln151_331_fu_5446_p1;
wire  signed [6:0] sext_ln153_174_fu_5461_p1;
wire   [6:0] add_ln153_212_fu_5490_p2;
wire  signed [7:0] sext_ln153_177_fu_5496_p1;
wire  signed [7:0] sext_ln153_176_fu_5486_p1;
wire   [7:0] add_ln153_213_fu_5500_p2;
wire  signed [9:0] sext_ln153_178_fu_5506_p1;
wire   [9:0] add_ln153_210_fu_5474_p2;
wire  signed [6:0] sext_ln151_350_fu_5525_p1;
wire  signed [6:0] sext_ln151_351_fu_5528_p1;
wire   [6:0] add_ln153_215_fu_5534_p2;
wire  signed [9:0] sext_ln153_180_fu_5540_p1;
wire   [9:0] select_ln126_34_fu_4597_p3;
wire  signed [6:0] sext_ln151_349_fu_5522_p1;
wire  signed [6:0] sext_ln151_348_fu_5519_p1;
wire   [6:0] add_ln153_217_fu_5550_p2;
wire  signed [6:0] sext_ln151_347_fu_5516_p1;
wire  signed [6:0] sext_ln153_179_fu_5531_p1;
wire   [6:0] add_ln153_218_fu_5560_p2;
wire  signed [7:0] sext_ln153_182_fu_5566_p1;
wire  signed [7:0] sext_ln153_181_fu_5556_p1;
wire   [7:0] add_ln153_219_fu_5570_p2;
wire  signed [9:0] sext_ln153_183_fu_5576_p1;
wire   [9:0] add_ln153_216_fu_5544_p2;
wire  signed [6:0] sext_ln151_355_fu_5595_p1;
wire  signed [6:0] sext_ln151_356_fu_5598_p1;
wire   [6:0] add_ln153_221_fu_5604_p2;
wire  signed [9:0] sext_ln153_185_fu_5610_p1;
wire   [9:0] select_ln126_33_fu_4591_p3;
wire  signed [6:0] sext_ln151_354_fu_5592_p1;
wire  signed [6:0] sext_ln151_353_fu_5589_p1;
wire   [6:0] add_ln153_223_fu_5620_p2;
wire  signed [6:0] sext_ln151_352_fu_5586_p1;
wire  signed [6:0] sext_ln153_184_fu_5601_p1;
wire   [6:0] add_ln153_224_fu_5630_p2;
wire  signed [7:0] sext_ln153_187_fu_5636_p1;
wire  signed [7:0] sext_ln153_186_fu_5626_p1;
wire   [7:0] add_ln153_225_fu_5640_p2;
wire  signed [9:0] sext_ln153_188_fu_5646_p1;
wire   [9:0] add_ln153_222_fu_5614_p2;
wire  signed [6:0] sext_ln151_360_fu_5665_p1;
wire  signed [6:0] sext_ln151_361_fu_5668_p1;
wire   [6:0] add_ln153_227_fu_5674_p2;
wire  signed [9:0] sext_ln153_190_fu_5680_p1;
wire   [9:0] select_ln126_32_fu_4585_p3;
wire  signed [6:0] sext_ln151_359_fu_5662_p1;
wire  signed [6:0] sext_ln151_358_fu_5659_p1;
wire   [6:0] add_ln153_229_fu_5690_p2;
wire  signed [6:0] sext_ln151_357_fu_5656_p1;
wire  signed [6:0] sext_ln153_189_fu_5671_p1;
wire   [6:0] add_ln153_230_fu_5700_p2;
wire  signed [7:0] sext_ln153_192_fu_5706_p1;
wire  signed [7:0] sext_ln153_191_fu_5696_p1;
wire   [7:0] add_ln153_231_fu_5710_p2;
wire  signed [9:0] sext_ln153_193_fu_5716_p1;
wire   [9:0] add_ln153_228_fu_5684_p2;
wire  signed [6:0] sext_ln151_365_fu_5735_p1;
wire  signed [6:0] sext_ln151_366_fu_5738_p1;
wire   [6:0] add_ln153_233_fu_5744_p2;
wire  signed [9:0] sext_ln153_195_fu_5750_p1;
wire   [9:0] select_ln126_31_fu_4579_p3;
wire  signed [6:0] sext_ln151_364_fu_5732_p1;
wire  signed [6:0] sext_ln151_363_fu_5729_p1;
wire   [6:0] add_ln153_235_fu_5760_p2;
wire  signed [6:0] sext_ln151_362_fu_5726_p1;
wire  signed [6:0] sext_ln153_194_fu_5741_p1;
wire   [6:0] add_ln153_236_fu_5770_p2;
wire  signed [7:0] sext_ln153_197_fu_5776_p1;
wire  signed [7:0] sext_ln153_196_fu_5766_p1;
wire   [7:0] add_ln153_237_fu_5780_p2;
wire  signed [9:0] sext_ln153_198_fu_5786_p1;
wire   [9:0] add_ln153_234_fu_5754_p2;
wire  signed [6:0] sext_ln151_370_fu_5805_p1;
wire  signed [6:0] sext_ln151_371_fu_5808_p1;
wire   [6:0] add_ln153_239_fu_5814_p2;
wire  signed [9:0] sext_ln153_200_fu_5820_p1;
wire   [9:0] select_ln126_30_fu_4573_p3;
wire  signed [6:0] sext_ln151_369_fu_5802_p1;
wire  signed [6:0] sext_ln151_368_fu_5799_p1;
wire   [6:0] add_ln153_241_fu_5830_p2;
wire  signed [6:0] sext_ln151_367_fu_5796_p1;
wire  signed [6:0] sext_ln153_199_fu_5811_p1;
wire   [6:0] add_ln153_242_fu_5840_p2;
wire  signed [7:0] sext_ln153_202_fu_5846_p1;
wire  signed [7:0] sext_ln153_201_fu_5836_p1;
wire   [7:0] add_ln153_243_fu_5850_p2;
wire  signed [9:0] sext_ln153_203_fu_5856_p1;
wire   [9:0] add_ln153_240_fu_5824_p2;
wire  signed [6:0] sext_ln151_375_fu_5875_p1;
wire  signed [6:0] sext_ln151_376_fu_5878_p1;
wire   [6:0] add_ln153_245_fu_5884_p2;
wire  signed [9:0] sext_ln153_205_fu_5890_p1;
wire   [9:0] select_ln126_29_fu_4567_p3;
wire  signed [6:0] sext_ln151_374_fu_5872_p1;
wire  signed [6:0] sext_ln151_373_fu_5869_p1;
wire   [6:0] add_ln153_247_fu_5900_p2;
wire  signed [6:0] sext_ln151_372_fu_5866_p1;
wire  signed [6:0] sext_ln153_204_fu_5881_p1;
wire   [6:0] add_ln153_248_fu_5910_p2;
wire  signed [7:0] sext_ln153_207_fu_5916_p1;
wire  signed [7:0] sext_ln153_206_fu_5906_p1;
wire   [7:0] add_ln153_249_fu_5920_p2;
wire  signed [9:0] sext_ln153_208_fu_5926_p1;
wire   [9:0] add_ln153_246_fu_5894_p2;
wire  signed [6:0] sext_ln151_380_fu_5945_p1;
wire  signed [6:0] sext_ln151_381_fu_5948_p1;
wire   [6:0] add_ln153_251_fu_5954_p2;
wire  signed [9:0] sext_ln153_210_fu_5960_p1;
wire   [9:0] select_ln126_28_fu_4561_p3;
wire  signed [6:0] sext_ln151_379_fu_5942_p1;
wire  signed [6:0] sext_ln151_378_fu_5939_p1;
wire   [6:0] add_ln153_253_fu_5970_p2;
wire  signed [6:0] sext_ln151_377_fu_5936_p1;
wire  signed [6:0] sext_ln153_209_fu_5951_p1;
wire   [6:0] add_ln153_254_fu_5980_p2;
wire  signed [7:0] sext_ln153_212_fu_5986_p1;
wire  signed [7:0] sext_ln153_211_fu_5976_p1;
wire   [7:0] add_ln153_255_fu_5990_p2;
wire  signed [9:0] sext_ln153_213_fu_5996_p1;
wire   [9:0] add_ln153_252_fu_5964_p2;
wire  signed [6:0] sext_ln151_385_fu_6015_p1;
wire  signed [6:0] sext_ln151_386_fu_6018_p1;
wire   [6:0] add_ln153_257_fu_6024_p2;
wire  signed [9:0] sext_ln153_215_fu_6030_p1;
wire   [9:0] select_ln126_27_fu_4555_p3;
wire  signed [6:0] sext_ln151_384_fu_6012_p1;
wire  signed [6:0] sext_ln151_383_fu_6009_p1;
wire   [6:0] add_ln153_259_fu_6040_p2;
wire  signed [6:0] sext_ln151_382_fu_6006_p1;
wire  signed [6:0] sext_ln153_214_fu_6021_p1;
wire   [6:0] add_ln153_260_fu_6050_p2;
wire  signed [7:0] sext_ln153_217_fu_6056_p1;
wire  signed [7:0] sext_ln153_216_fu_6046_p1;
wire   [7:0] add_ln153_261_fu_6060_p2;
wire  signed [9:0] sext_ln153_218_fu_6066_p1;
wire   [9:0] add_ln153_258_fu_6034_p2;
wire  signed [6:0] sext_ln151_390_fu_6085_p1;
wire  signed [6:0] sext_ln151_391_fu_6088_p1;
wire   [6:0] add_ln153_263_fu_6094_p2;
wire  signed [9:0] sext_ln153_220_fu_6100_p1;
wire   [9:0] select_ln126_26_fu_4549_p3;
wire  signed [6:0] sext_ln151_389_fu_6082_p1;
wire  signed [6:0] sext_ln151_388_fu_6079_p1;
wire   [6:0] add_ln153_265_fu_6110_p2;
wire  signed [6:0] sext_ln151_387_fu_6076_p1;
wire  signed [6:0] sext_ln153_219_fu_6091_p1;
wire   [6:0] add_ln153_266_fu_6120_p2;
wire  signed [7:0] sext_ln153_222_fu_6126_p1;
wire  signed [7:0] sext_ln153_221_fu_6116_p1;
wire   [7:0] add_ln153_267_fu_6130_p2;
wire  signed [9:0] sext_ln153_223_fu_6136_p1;
wire   [9:0] add_ln153_264_fu_6104_p2;
wire  signed [6:0] sext_ln151_395_fu_6155_p1;
wire  signed [6:0] sext_ln151_396_fu_6158_p1;
wire   [6:0] add_ln153_269_fu_6164_p2;
wire  signed [9:0] sext_ln153_225_fu_6170_p1;
wire   [9:0] select_ln126_25_fu_4543_p3;
wire  signed [6:0] sext_ln151_394_fu_6152_p1;
wire  signed [6:0] sext_ln151_393_fu_6149_p1;
wire   [6:0] add_ln153_271_fu_6180_p2;
wire  signed [6:0] sext_ln151_392_fu_6146_p1;
wire  signed [6:0] sext_ln153_224_fu_6161_p1;
wire   [6:0] add_ln153_272_fu_6190_p2;
wire  signed [7:0] sext_ln153_227_fu_6196_p1;
wire  signed [7:0] sext_ln153_226_fu_6186_p1;
wire   [7:0] add_ln153_273_fu_6200_p2;
wire  signed [9:0] sext_ln153_228_fu_6206_p1;
wire   [9:0] add_ln153_270_fu_6174_p2;
wire  signed [6:0] sext_ln151_400_fu_6225_p1;
wire  signed [6:0] sext_ln151_401_fu_6228_p1;
wire   [6:0] add_ln153_275_fu_6234_p2;
wire  signed [9:0] sext_ln153_230_fu_6240_p1;
wire   [9:0] select_ln126_24_fu_4537_p3;
wire  signed [6:0] sext_ln151_399_fu_6222_p1;
wire  signed [6:0] sext_ln151_398_fu_6219_p1;
wire   [6:0] add_ln153_277_fu_6250_p2;
wire  signed [6:0] sext_ln151_397_fu_6216_p1;
wire  signed [6:0] sext_ln153_229_fu_6231_p1;
wire   [6:0] add_ln153_278_fu_6260_p2;
wire  signed [7:0] sext_ln153_232_fu_6266_p1;
wire  signed [7:0] sext_ln153_231_fu_6256_p1;
wire   [7:0] add_ln153_279_fu_6270_p2;
wire  signed [9:0] sext_ln153_233_fu_6276_p1;
wire   [9:0] add_ln153_276_fu_6244_p2;
wire  signed [6:0] sext_ln151_405_fu_6295_p1;
wire  signed [6:0] sext_ln151_406_fu_6298_p1;
wire   [6:0] add_ln153_281_fu_6304_p2;
wire  signed [9:0] sext_ln153_235_fu_6310_p1;
wire   [9:0] select_ln126_fu_4530_p3;
wire  signed [6:0] sext_ln151_404_fu_6292_p1;
wire  signed [6:0] sext_ln151_403_fu_6289_p1;
wire   [6:0] add_ln153_283_fu_6320_p2;
wire  signed [6:0] sext_ln151_402_fu_6286_p1;
wire  signed [6:0] sext_ln153_234_fu_6301_p1;
wire   [6:0] add_ln153_284_fu_6330_p2;
wire  signed [7:0] sext_ln153_237_fu_6336_p1;
wire  signed [7:0] sext_ln153_236_fu_6326_p1;
wire   [7:0] add_ln153_285_fu_6340_p2;
wire  signed [9:0] sext_ln153_238_fu_6346_p1;
wire   [9:0] add_ln153_282_fu_6314_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_652;
reg    ap_condition_749;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_680 = 6'd0;
//#0 p_0_0_0364_fu_684 = 10'd0;
//#0 p_0_0_0_112366_fu_688 = 10'd0;
//#0 p_0_0_0_2368_fu_692 = 10'd0;
//#0 p_0_0_0_3370_fu_696 = 10'd0;
//#0 p_0_0_0_4372_fu_700 = 10'd0;
//#0 p_0_0_0_5374_fu_704 = 10'd0;
//#0 p_0_0_0_6376_fu_708 = 10'd0;
//#0 p_0_0_0_7378_fu_712 = 10'd0;
//#0 p_0_0_0_8380_fu_716 = 10'd0;
//#0 p_0_0_0_9382_fu_720 = 10'd0;
//#0 p_0_0_0_10384_fu_724 = 10'd0;
//#0 p_0_0_0_11386_fu_728 = 10'd0;
//#0 p_0_0_0388_fu_732 = 10'd0;
//#0 p_0_0_0_112390_fu_736 = 10'd0;
//#0 p_0_0_0_2392_fu_740 = 10'd0;
//#0 p_0_0_0_3394_fu_744 = 10'd0;
//#0 p_0_0_0_4396_fu_748 = 10'd0;
//#0 p_0_0_0_5398_fu_752 = 10'd0;
//#0 p_0_0_0_6400_fu_756 = 10'd0;
//#0 p_0_0_0_7402_fu_760 = 10'd0;
//#0 p_0_0_0_8404_fu_764 = 10'd0;
//#0 p_0_0_0_9406_fu_768 = 10'd0;
//#0 p_0_0_0_10408_fu_772 = 10'd0;
//#0 p_0_0_0_11410_fu_776 = 10'd0;
//#0 cot_fu_780 = 5'd0;
//#0 indvar_flatten_fu_784 = 11'd0;
//#0 indvar_flatten59_fu_788 = 16'd0;
end

ATTN11_matmul_step2_mac_4_attn_inst_matmul_gen_v_bias_arr_661_ROM_AUTO_1R #(
    .DataWidth( 114 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
attn_inst_matmul_gen_v_bias_arr_661_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_v_bias_arr_661_address0),
    .ce0(attn_inst_matmul_gen_v_bias_arr_661_ce0),
    .q0(attn_inst_matmul_gen_v_bias_arr_661_q0)
);

ATTN11_matmul_step2_mac_4_attn_inst_matmul_gen_v_weight_arr_660_ROM_AUTO_1R #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_v_weight_arr_660_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_v_weight_arr_660_address0),
    .ce0(attn_inst_matmul_gen_v_weight_arr_660_ce0),
    .q0(attn_inst_matmul_gen_v_weight_arr_660_q0)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U361(
    .din0(mul_res_fu_1337_p0),
    .din1(mul_res_fu_1337_p1),
    .dout(mul_res_fu_1337_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U362(
    .din0(mul_res_144_fu_1369_p0),
    .din1(mul_res_144_fu_1369_p1),
    .dout(mul_res_144_fu_1369_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U363(
    .din0(mul_res_145_fu_1401_p0),
    .din1(mul_res_145_fu_1401_p1),
    .dout(mul_res_145_fu_1401_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U364(
    .din0(mul_res_146_fu_1433_p0),
    .din1(mul_res_146_fu_1433_p1),
    .dout(mul_res_146_fu_1433_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U365(
    .din0(mul_res_147_fu_1465_p0),
    .din1(mul_res_147_fu_1465_p1),
    .dout(mul_res_147_fu_1465_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U366(
    .din0(mul_res_148_fu_1497_p0),
    .din1(mul_res_148_fu_1497_p1),
    .dout(mul_res_148_fu_1497_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U367(
    .din0(mul_res_149_fu_1525_p0),
    .din1(mul_res_149_fu_1525_p1),
    .dout(mul_res_149_fu_1525_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U368(
    .din0(mul_res_150_fu_1553_p0),
    .din1(mul_res_150_fu_1553_p1),
    .dout(mul_res_150_fu_1553_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U369(
    .din0(mul_res_151_fu_1581_p0),
    .din1(mul_res_151_fu_1581_p1),
    .dout(mul_res_151_fu_1581_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U370(
    .din0(mul_res_152_fu_1609_p0),
    .din1(mul_res_152_fu_1609_p1),
    .dout(mul_res_152_fu_1609_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U371(
    .din0(mul_res_153_fu_1637_p0),
    .din1(mul_res_153_fu_1637_p1),
    .dout(mul_res_153_fu_1637_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U372(
    .din0(mul_res_154_fu_1665_p0),
    .din1(mul_res_154_fu_1665_p1),
    .dout(mul_res_154_fu_1665_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U373(
    .din0(mul_res_155_fu_1693_p0),
    .din1(mul_res_155_fu_1693_p1),
    .dout(mul_res_155_fu_1693_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U374(
    .din0(mul_res_156_fu_1721_p0),
    .din1(mul_res_156_fu_1721_p1),
    .dout(mul_res_156_fu_1721_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U375(
    .din0(mul_res_157_fu_1749_p0),
    .din1(mul_res_157_fu_1749_p1),
    .dout(mul_res_157_fu_1749_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U376(
    .din0(mul_res_158_fu_1777_p0),
    .din1(mul_res_158_fu_1777_p1),
    .dout(mul_res_158_fu_1777_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U377(
    .din0(mul_res_159_fu_1805_p0),
    .din1(mul_res_159_fu_1805_p1),
    .dout(mul_res_159_fu_1805_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U378(
    .din0(mul_res_160_fu_1833_p0),
    .din1(mul_res_160_fu_1833_p1),
    .dout(mul_res_160_fu_1833_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U379(
    .din0(mul_res_161_fu_1861_p0),
    .din1(mul_res_161_fu_1861_p1),
    .dout(mul_res_161_fu_1861_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U380(
    .din0(mul_res_162_fu_1889_p0),
    .din1(mul_res_162_fu_1889_p1),
    .dout(mul_res_162_fu_1889_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U381(
    .din0(mul_res_163_fu_1917_p0),
    .din1(mul_res_163_fu_1917_p1),
    .dout(mul_res_163_fu_1917_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U382(
    .din0(mul_res_164_fu_1945_p0),
    .din1(mul_res_164_fu_1945_p1),
    .dout(mul_res_164_fu_1945_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U383(
    .din0(mul_res_165_fu_1973_p0),
    .din1(mul_res_165_fu_1973_p1),
    .dout(mul_res_165_fu_1973_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U384(
    .din0(mul_res_166_fu_2001_p0),
    .din1(mul_res_166_fu_2001_p1),
    .dout(mul_res_166_fu_2001_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U385(
    .din0(mul_res_167_fu_2029_p0),
    .din1(mul_res_167_fu_2029_p1),
    .dout(mul_res_167_fu_2029_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U386(
    .din0(mul_res_168_fu_2057_p0),
    .din1(mul_res_168_fu_2057_p1),
    .dout(mul_res_168_fu_2057_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U387(
    .din0(mul_res_169_fu_2085_p0),
    .din1(mul_res_169_fu_2085_p1),
    .dout(mul_res_169_fu_2085_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U388(
    .din0(mul_res_170_fu_2113_p0),
    .din1(mul_res_170_fu_2113_p1),
    .dout(mul_res_170_fu_2113_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U389(
    .din0(mul_res_171_fu_2141_p0),
    .din1(mul_res_171_fu_2141_p1),
    .dout(mul_res_171_fu_2141_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U390(
    .din0(mul_res_172_fu_2169_p0),
    .din1(mul_res_172_fu_2169_p1),
    .dout(mul_res_172_fu_2169_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U391(
    .din0(mul_res_173_fu_2197_p0),
    .din1(mul_res_173_fu_2197_p1),
    .dout(mul_res_173_fu_2197_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U392(
    .din0(mul_res_174_fu_2225_p0),
    .din1(mul_res_174_fu_2225_p1),
    .dout(mul_res_174_fu_2225_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U393(
    .din0(mul_res_175_fu_2253_p0),
    .din1(mul_res_175_fu_2253_p1),
    .dout(mul_res_175_fu_2253_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U394(
    .din0(mul_res_176_fu_2281_p0),
    .din1(mul_res_176_fu_2281_p1),
    .dout(mul_res_176_fu_2281_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U395(
    .din0(mul_res_177_fu_2309_p0),
    .din1(mul_res_177_fu_2309_p1),
    .dout(mul_res_177_fu_2309_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U396(
    .din0(mul_res_178_fu_2337_p0),
    .din1(mul_res_178_fu_2337_p1),
    .dout(mul_res_178_fu_2337_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U397(
    .din0(mul_res_179_fu_2365_p0),
    .din1(mul_res_179_fu_2365_p1),
    .dout(mul_res_179_fu_2365_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U398(
    .din0(mul_res_180_fu_2393_p0),
    .din1(mul_res_180_fu_2393_p1),
    .dout(mul_res_180_fu_2393_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U399(
    .din0(mul_res_181_fu_2421_p0),
    .din1(mul_res_181_fu_2421_p1),
    .dout(mul_res_181_fu_2421_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U400(
    .din0(mul_res_182_fu_2449_p0),
    .din1(mul_res_182_fu_2449_p1),
    .dout(mul_res_182_fu_2449_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U401(
    .din0(mul_res_183_fu_2477_p0),
    .din1(mul_res_183_fu_2477_p1),
    .dout(mul_res_183_fu_2477_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U402(
    .din0(mul_res_184_fu_2505_p0),
    .din1(mul_res_184_fu_2505_p1),
    .dout(mul_res_184_fu_2505_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U403(
    .din0(mul_res_185_fu_2533_p0),
    .din1(mul_res_185_fu_2533_p1),
    .dout(mul_res_185_fu_2533_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U404(
    .din0(mul_res_186_fu_2561_p0),
    .din1(mul_res_186_fu_2561_p1),
    .dout(mul_res_186_fu_2561_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U405(
    .din0(mul_res_187_fu_2589_p0),
    .din1(mul_res_187_fu_2589_p1),
    .dout(mul_res_187_fu_2589_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U406(
    .din0(mul_res_188_fu_2617_p0),
    .din1(mul_res_188_fu_2617_p1),
    .dout(mul_res_188_fu_2617_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U407(
    .din0(mul_res_189_fu_2645_p0),
    .din1(mul_res_189_fu_2645_p1),
    .dout(mul_res_189_fu_2645_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U408(
    .din0(mul_res_190_fu_2673_p0),
    .din1(mul_res_190_fu_2673_p1),
    .dout(mul_res_190_fu_2673_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U409(
    .din0(mul_res_191_fu_2701_p0),
    .din1(mul_res_191_fu_2701_p1),
    .dout(mul_res_191_fu_2701_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U410(
    .din0(mul_res_192_fu_2729_p0),
    .din1(mul_res_192_fu_2729_p1),
    .dout(mul_res_192_fu_2729_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U411(
    .din0(mul_res_193_fu_2757_p0),
    .din1(mul_res_193_fu_2757_p1),
    .dout(mul_res_193_fu_2757_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U412(
    .din0(mul_res_194_fu_2785_p0),
    .din1(mul_res_194_fu_2785_p1),
    .dout(mul_res_194_fu_2785_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U413(
    .din0(mul_res_195_fu_2813_p0),
    .din1(mul_res_195_fu_2813_p1),
    .dout(mul_res_195_fu_2813_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U414(
    .din0(mul_res_196_fu_2841_p0),
    .din1(mul_res_196_fu_2841_p1),
    .dout(mul_res_196_fu_2841_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U415(
    .din0(mul_res_197_fu_2869_p0),
    .din1(mul_res_197_fu_2869_p1),
    .dout(mul_res_197_fu_2869_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U416(
    .din0(mul_res_198_fu_2897_p0),
    .din1(mul_res_198_fu_2897_p1),
    .dout(mul_res_198_fu_2897_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U417(
    .din0(mul_res_199_fu_2925_p0),
    .din1(mul_res_199_fu_2925_p1),
    .dout(mul_res_199_fu_2925_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U418(
    .din0(mul_res_200_fu_2953_p0),
    .din1(mul_res_200_fu_2953_p1),
    .dout(mul_res_200_fu_2953_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U419(
    .din0(mul_res_201_fu_2981_p0),
    .din1(mul_res_201_fu_2981_p1),
    .dout(mul_res_201_fu_2981_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U420(
    .din0(mul_res_202_fu_3009_p0),
    .din1(mul_res_202_fu_3009_p1),
    .dout(mul_res_202_fu_3009_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U421(
    .din0(mul_res_203_fu_3037_p0),
    .din1(mul_res_203_fu_3037_p1),
    .dout(mul_res_203_fu_3037_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U422(
    .din0(mul_res_204_fu_3065_p0),
    .din1(mul_res_204_fu_3065_p1),
    .dout(mul_res_204_fu_3065_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U423(
    .din0(mul_res_205_fu_3093_p0),
    .din1(mul_res_205_fu_3093_p1),
    .dout(mul_res_205_fu_3093_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U424(
    .din0(mul_res_206_fu_3121_p0),
    .din1(mul_res_206_fu_3121_p1),
    .dout(mul_res_206_fu_3121_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U425(
    .din0(mul_res_207_fu_3149_p0),
    .din1(mul_res_207_fu_3149_p1),
    .dout(mul_res_207_fu_3149_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U426(
    .din0(mul_res_208_fu_3177_p0),
    .din1(mul_res_208_fu_3177_p1),
    .dout(mul_res_208_fu_3177_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U427(
    .din0(mul_res_209_fu_3205_p0),
    .din1(mul_res_209_fu_3205_p1),
    .dout(mul_res_209_fu_3205_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U428(
    .din0(mul_res_210_fu_3233_p0),
    .din1(mul_res_210_fu_3233_p1),
    .dout(mul_res_210_fu_3233_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U429(
    .din0(mul_res_211_fu_3261_p0),
    .din1(mul_res_211_fu_3261_p1),
    .dout(mul_res_211_fu_3261_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U430(
    .din0(mul_res_212_fu_3289_p0),
    .din1(mul_res_212_fu_3289_p1),
    .dout(mul_res_212_fu_3289_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U431(
    .din0(mul_res_213_fu_3317_p0),
    .din1(mul_res_213_fu_3317_p1),
    .dout(mul_res_213_fu_3317_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U432(
    .din0(mul_res_214_fu_3345_p0),
    .din1(mul_res_214_fu_3345_p1),
    .dout(mul_res_214_fu_3345_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U433(
    .din0(mul_res_215_fu_3363_p0),
    .din1(mul_res_215_fu_3363_p1),
    .dout(mul_res_215_fu_3363_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U434(
    .din0(mul_res_216_fu_3381_p0),
    .din1(mul_res_216_fu_3381_p1),
    .dout(mul_res_216_fu_3381_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U435(
    .din0(mul_res_217_fu_3399_p0),
    .din1(mul_res_217_fu_3399_p1),
    .dout(mul_res_217_fu_3399_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U436(
    .din0(mul_res_218_fu_3417_p0),
    .din1(mul_res_218_fu_3417_p1),
    .dout(mul_res_218_fu_3417_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U437(
    .din0(mul_res_219_fu_3435_p0),
    .din1(mul_res_219_fu_3435_p1),
    .dout(mul_res_219_fu_3435_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U438(
    .din0(mul_res_220_fu_3453_p0),
    .din1(mul_res_220_fu_3453_p1),
    .dout(mul_res_220_fu_3453_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U439(
    .din0(mul_res_221_fu_3467_p0),
    .din1(mul_res_221_fu_3467_p1),
    .dout(mul_res_221_fu_3467_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U440(
    .din0(mul_res_222_fu_3481_p0),
    .din1(mul_res_222_fu_3481_p1),
    .dout(mul_res_222_fu_3481_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U441(
    .din0(mul_res_223_fu_3495_p0),
    .din1(mul_res_223_fu_3495_p1),
    .dout(mul_res_223_fu_3495_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U442(
    .din0(mul_res_224_fu_3509_p0),
    .din1(mul_res_224_fu_3509_p1),
    .dout(mul_res_224_fu_3509_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U443(
    .din0(mul_res_225_fu_3523_p0),
    .din1(mul_res_225_fu_3523_p1),
    .dout(mul_res_225_fu_3523_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U444(
    .din0(mul_res_226_fu_3537_p0),
    .din1(mul_res_226_fu_3537_p1),
    .dout(mul_res_226_fu_3537_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U445(
    .din0(mul_res_227_fu_3551_p0),
    .din1(mul_res_227_fu_3551_p1),
    .dout(mul_res_227_fu_3551_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U446(
    .din0(mul_res_228_fu_3565_p0),
    .din1(mul_res_228_fu_3565_p1),
    .dout(mul_res_228_fu_3565_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U447(
    .din0(mul_res_229_fu_3579_p0),
    .din1(mul_res_229_fu_3579_p1),
    .dout(mul_res_229_fu_3579_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U448(
    .din0(mul_res_230_fu_3593_p0),
    .din1(mul_res_230_fu_3593_p1),
    .dout(mul_res_230_fu_3593_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U449(
    .din0(mul_res_231_fu_3607_p0),
    .din1(mul_res_231_fu_3607_p1),
    .dout(mul_res_231_fu_3607_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U450(
    .din0(mul_res_232_fu_3621_p0),
    .din1(mul_res_232_fu_3621_p1),
    .dout(mul_res_232_fu_3621_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U451(
    .din0(mul_res_233_fu_3635_p0),
    .din1(mul_res_233_fu_3635_p1),
    .dout(mul_res_233_fu_3635_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U452(
    .din0(mul_res_234_fu_3649_p0),
    .din1(mul_res_234_fu_3649_p1),
    .dout(mul_res_234_fu_3649_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U453(
    .din0(mul_res_235_fu_3663_p0),
    .din1(mul_res_235_fu_3663_p1),
    .dout(mul_res_235_fu_3663_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U454(
    .din0(mul_res_236_fu_3677_p0),
    .din1(mul_res_236_fu_3677_p1),
    .dout(mul_res_236_fu_3677_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U455(
    .din0(mul_res_237_fu_3691_p0),
    .din1(mul_res_237_fu_3691_p1),
    .dout(mul_res_237_fu_3691_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U456(
    .din0(mul_res_238_fu_3705_p0),
    .din1(mul_res_238_fu_3705_p1),
    .dout(mul_res_238_fu_3705_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U457(
    .din0(mul_res_239_fu_3719_p0),
    .din1(mul_res_239_fu_3719_p1),
    .dout(mul_res_239_fu_3719_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U458(
    .din0(mul_res_240_fu_3733_p0),
    .din1(mul_res_240_fu_3733_p1),
    .dout(mul_res_240_fu_3733_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U459(
    .din0(mul_res_241_fu_3747_p0),
    .din1(mul_res_241_fu_3747_p1),
    .dout(mul_res_241_fu_3747_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U460(
    .din0(mul_res_242_fu_3761_p0),
    .din1(mul_res_242_fu_3761_p1),
    .dout(mul_res_242_fu_3761_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U461(
    .din0(mul_res_243_fu_3775_p0),
    .din1(mul_res_243_fu_3775_p1),
    .dout(mul_res_243_fu_3775_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U462(
    .din0(mul_res_244_fu_3789_p0),
    .din1(mul_res_244_fu_3789_p1),
    .dout(mul_res_244_fu_3789_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U463(
    .din0(mul_res_245_fu_3803_p0),
    .din1(mul_res_245_fu_3803_p1),
    .dout(mul_res_245_fu_3803_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U464(
    .din0(mul_res_246_fu_3817_p0),
    .din1(mul_res_246_fu_3817_p1),
    .dout(mul_res_246_fu_3817_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U465(
    .din0(mul_res_247_fu_3831_p0),
    .din1(mul_res_247_fu_3831_p1),
    .dout(mul_res_247_fu_3831_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U466(
    .din0(mul_res_248_fu_3845_p0),
    .din1(mul_res_248_fu_3845_p1),
    .dout(mul_res_248_fu_3845_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U467(
    .din0(mul_res_249_fu_3859_p0),
    .din1(mul_res_249_fu_3859_p1),
    .dout(mul_res_249_fu_3859_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U468(
    .din0(mul_res_250_fu_3873_p0),
    .din1(mul_res_250_fu_3873_p1),
    .dout(mul_res_250_fu_3873_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U469(
    .din0(mul_res_251_fu_3887_p0),
    .din1(mul_res_251_fu_3887_p1),
    .dout(mul_res_251_fu_3887_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U470(
    .din0(mul_res_252_fu_3901_p0),
    .din1(mul_res_252_fu_3901_p1),
    .dout(mul_res_252_fu_3901_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U471(
    .din0(mul_res_253_fu_3915_p0),
    .din1(mul_res_253_fu_3915_p1),
    .dout(mul_res_253_fu_3915_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U472(
    .din0(mul_res_254_fu_3929_p0),
    .din1(mul_res_254_fu_3929_p1),
    .dout(mul_res_254_fu_3929_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U473(
    .din0(mul_res_255_fu_3943_p0),
    .din1(mul_res_255_fu_3943_p1),
    .dout(mul_res_255_fu_3943_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U474(
    .din0(mul_res_256_fu_3957_p0),
    .din1(mul_res_256_fu_3957_p1),
    .dout(mul_res_256_fu_3957_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U475(
    .din0(mul_res_257_fu_3971_p0),
    .din1(mul_res_257_fu_3971_p1),
    .dout(mul_res_257_fu_3971_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U476(
    .din0(mul_res_258_fu_3985_p0),
    .din1(mul_res_258_fu_3985_p1),
    .dout(mul_res_258_fu_3985_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U477(
    .din0(mul_res_259_fu_3999_p0),
    .din1(mul_res_259_fu_3999_p1),
    .dout(mul_res_259_fu_3999_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U478(
    .din0(mul_res_260_fu_4013_p0),
    .din1(mul_res_260_fu_4013_p1),
    .dout(mul_res_260_fu_4013_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U479(
    .din0(mul_res_261_fu_4027_p0),
    .din1(mul_res_261_fu_4027_p1),
    .dout(mul_res_261_fu_4027_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U480(
    .din0(mul_res_262_fu_4041_p0),
    .din1(mul_res_262_fu_4041_p1),
    .dout(mul_res_262_fu_4041_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U481(
    .din0(mul_res_263_fu_4055_p0),
    .din1(mul_res_263_fu_4055_p1),
    .dout(mul_res_263_fu_4055_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U482(
    .din0(mul_res_264_fu_4069_p0),
    .din1(mul_res_264_fu_4069_p1),
    .dout(mul_res_264_fu_4069_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U483(
    .din0(mul_res_265_fu_4083_p0),
    .din1(mul_res_265_fu_4083_p1),
    .dout(mul_res_265_fu_4083_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U484(
    .din0(mul_res_266_fu_4097_p0),
    .din1(mul_res_266_fu_4097_p1),
    .dout(mul_res_266_fu_4097_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U485(
    .din0(mul_res_267_fu_4111_p0),
    .din1(mul_res_267_fu_4111_p1),
    .dout(mul_res_267_fu_4111_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U486(
    .din0(mul_res_268_fu_4125_p0),
    .din1(mul_res_268_fu_4125_p1),
    .dout(mul_res_268_fu_4125_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U487(
    .din0(mul_res_269_fu_4139_p0),
    .din1(mul_res_269_fu_4139_p1),
    .dout(mul_res_269_fu_4139_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U488(
    .din0(mul_res_270_fu_4153_p0),
    .din1(mul_res_270_fu_4153_p1),
    .dout(mul_res_270_fu_4153_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U489(
    .din0(mul_res_271_fu_4167_p0),
    .din1(mul_res_271_fu_4167_p1),
    .dout(mul_res_271_fu_4167_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U490(
    .din0(mul_res_272_fu_4181_p0),
    .din1(mul_res_272_fu_4181_p1),
    .dout(mul_res_272_fu_4181_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U491(
    .din0(mul_res_273_fu_4195_p0),
    .din1(mul_res_273_fu_4195_p1),
    .dout(mul_res_273_fu_4195_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U492(
    .din0(mul_res_274_fu_4209_p0),
    .din1(mul_res_274_fu_4209_p1),
    .dout(mul_res_274_fu_4209_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U493(
    .din0(mul_res_275_fu_4223_p0),
    .din1(mul_res_275_fu_4223_p1),
    .dout(mul_res_275_fu_4223_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U494(
    .din0(mul_res_276_fu_4237_p0),
    .din1(mul_res_276_fu_4237_p1),
    .dout(mul_res_276_fu_4237_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U495(
    .din0(mul_res_277_fu_4251_p0),
    .din1(mul_res_277_fu_4251_p1),
    .dout(mul_res_277_fu_4251_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U496(
    .din0(mul_res_278_fu_4265_p0),
    .din1(mul_res_278_fu_4265_p1),
    .dout(mul_res_278_fu_4265_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U497(
    .din0(mul_res_279_fu_4279_p0),
    .din1(mul_res_279_fu_4279_p1),
    .dout(mul_res_279_fu_4279_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U498(
    .din0(mul_res_280_fu_4293_p0),
    .din1(mul_res_280_fu_4293_p1),
    .dout(mul_res_280_fu_4293_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U499(
    .din0(mul_res_281_fu_4307_p0),
    .din1(mul_res_281_fu_4307_p1),
    .dout(mul_res_281_fu_4307_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U500(
    .din0(mul_res_282_fu_4321_p0),
    .din1(mul_res_282_fu_4321_p1),
    .dout(mul_res_282_fu_4321_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U501(
    .din0(mul_res_283_fu_4335_p0),
    .din1(mul_res_283_fu_4335_p1),
    .dout(mul_res_283_fu_4335_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U502(
    .din0(mul_res_284_fu_4349_p0),
    .din1(mul_res_284_fu_4349_p1),
    .dout(mul_res_284_fu_4349_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U503(
    .din0(mul_res_285_fu_4363_p0),
    .din1(mul_res_285_fu_4363_p1),
    .dout(mul_res_285_fu_4363_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U504(
    .din0(mul_res_286_fu_4377_p0),
    .din1(mul_res_286_fu_4377_p1),
    .dout(mul_res_286_fu_4377_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_652)) begin
        cit_fu_680 <= add_ln122_fu_1014_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_652)) begin
    cot_fu_780 <= select_ln121_3_fu_1002_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_749)) begin
    if ((icmp_ln120_fu_897_p2 == 1'd0)) begin
        indvar_flatten59_fu_788 <= add_ln120_fu_891_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten59_fu_788 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_749)) begin
    if ((icmp_ln120_fu_897_p2 == 1'd0)) begin
        indvar_flatten_fu_784 <= select_ln121_4_fu_915_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_784 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln153_148_reg_7770 <= add_ln153_148_fu_4740_p2;
        add_ln153_154_reg_7775 <= add_ln153_154_fu_4810_p2;
        add_ln153_160_reg_7780 <= add_ln153_160_fu_4880_p2;
        add_ln153_166_reg_7785 <= add_ln153_166_fu_4950_p2;
        add_ln153_172_reg_7790 <= add_ln153_172_fu_5020_p2;
        add_ln153_178_reg_7795 <= add_ln153_178_fu_5090_p2;
        add_ln153_184_reg_7800 <= add_ln153_184_fu_5160_p2;
        add_ln153_190_reg_7805 <= add_ln153_190_fu_5230_p2;
        add_ln153_196_reg_7810 <= add_ln153_196_fu_5300_p2;
        add_ln153_202_reg_7815 <= add_ln153_202_fu_5370_p2;
        add_ln153_208_reg_7820 <= add_ln153_208_fu_5440_p2;
        add_ln153_214_reg_7825 <= add_ln153_214_fu_5510_p2;
        add_ln153_220_reg_7830 <= add_ln153_220_fu_5580_p2;
        add_ln153_226_reg_7835 <= add_ln153_226_fu_5650_p2;
        add_ln153_232_reg_7840 <= add_ln153_232_fu_5720_p2;
        add_ln153_238_reg_7845 <= add_ln153_238_fu_5790_p2;
        add_ln153_244_reg_7850 <= add_ln153_244_fu_5860_p2;
        add_ln153_250_reg_7855 <= add_ln153_250_fu_5930_p2;
        add_ln153_256_reg_7860 <= add_ln153_256_fu_6000_p2;
        add_ln153_262_reg_7865 <= add_ln153_262_fu_6070_p2;
        add_ln153_268_reg_7870 <= add_ln153_268_fu_6140_p2;
        add_ln153_274_reg_7875 <= add_ln153_274_fu_6210_p2;
        add_ln153_280_reg_7880 <= add_ln153_280_fu_6280_p2;
        add_ln153_286_reg_7885 <= add_ln153_286_fu_6350_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln126_reg_6947 <= icmp_ln126_fu_1073_p2;
        icmp_ln126_reg_6947_pp0_iter3_reg <= icmp_ln126_reg_6947;
        icmp_ln161_reg_6975 <= icmp_ln161_fu_1082_p2;
        icmp_ln161_reg_6975_pp0_iter3_reg <= icmp_ln161_reg_6975;
        icmp_ln161_reg_6975_pp0_iter4_reg <= icmp_ln161_reg_6975_pp0_iter3_reg;
        mul_res_144_reg_7055 <= mul_res_144_fu_1369_p2;
        mul_res_145_reg_7060 <= mul_res_145_fu_1401_p2;
        mul_res_146_reg_7065 <= mul_res_146_fu_1433_p2;
        mul_res_147_reg_7070 <= mul_res_147_fu_1465_p2;
        mul_res_148_reg_7075 <= mul_res_148_fu_1497_p2;
        mul_res_149_reg_7080 <= mul_res_149_fu_1525_p2;
        mul_res_150_reg_7085 <= mul_res_150_fu_1553_p2;
        mul_res_151_reg_7090 <= mul_res_151_fu_1581_p2;
        mul_res_152_reg_7095 <= mul_res_152_fu_1609_p2;
        mul_res_153_reg_7100 <= mul_res_153_fu_1637_p2;
        mul_res_154_reg_7105 <= mul_res_154_fu_1665_p2;
        mul_res_155_reg_7110 <= mul_res_155_fu_1693_p2;
        mul_res_156_reg_7115 <= mul_res_156_fu_1721_p2;
        mul_res_157_reg_7120 <= mul_res_157_fu_1749_p2;
        mul_res_158_reg_7125 <= mul_res_158_fu_1777_p2;
        mul_res_159_reg_7130 <= mul_res_159_fu_1805_p2;
        mul_res_160_reg_7135 <= mul_res_160_fu_1833_p2;
        mul_res_161_reg_7140 <= mul_res_161_fu_1861_p2;
        mul_res_162_reg_7145 <= mul_res_162_fu_1889_p2;
        mul_res_163_reg_7150 <= mul_res_163_fu_1917_p2;
        mul_res_164_reg_7155 <= mul_res_164_fu_1945_p2;
        mul_res_165_reg_7160 <= mul_res_165_fu_1973_p2;
        mul_res_166_reg_7165 <= mul_res_166_fu_2001_p2;
        mul_res_167_reg_7170 <= mul_res_167_fu_2029_p2;
        mul_res_168_reg_7175 <= mul_res_168_fu_2057_p2;
        mul_res_169_reg_7180 <= mul_res_169_fu_2085_p2;
        mul_res_170_reg_7185 <= mul_res_170_fu_2113_p2;
        mul_res_171_reg_7190 <= mul_res_171_fu_2141_p2;
        mul_res_172_reg_7195 <= mul_res_172_fu_2169_p2;
        mul_res_173_reg_7200 <= mul_res_173_fu_2197_p2;
        mul_res_174_reg_7205 <= mul_res_174_fu_2225_p2;
        mul_res_175_reg_7210 <= mul_res_175_fu_2253_p2;
        mul_res_176_reg_7215 <= mul_res_176_fu_2281_p2;
        mul_res_177_reg_7220 <= mul_res_177_fu_2309_p2;
        mul_res_178_reg_7225 <= mul_res_178_fu_2337_p2;
        mul_res_179_reg_7230 <= mul_res_179_fu_2365_p2;
        mul_res_180_reg_7235 <= mul_res_180_fu_2393_p2;
        mul_res_181_reg_7240 <= mul_res_181_fu_2421_p2;
        mul_res_182_reg_7245 <= mul_res_182_fu_2449_p2;
        mul_res_183_reg_7250 <= mul_res_183_fu_2477_p2;
        mul_res_184_reg_7255 <= mul_res_184_fu_2505_p2;
        mul_res_185_reg_7260 <= mul_res_185_fu_2533_p2;
        mul_res_186_reg_7265 <= mul_res_186_fu_2561_p2;
        mul_res_187_reg_7270 <= mul_res_187_fu_2589_p2;
        mul_res_188_reg_7275 <= mul_res_188_fu_2617_p2;
        mul_res_189_reg_7280 <= mul_res_189_fu_2645_p2;
        mul_res_190_reg_7285 <= mul_res_190_fu_2673_p2;
        mul_res_191_reg_7290 <= mul_res_191_fu_2701_p2;
        mul_res_192_reg_7295 <= mul_res_192_fu_2729_p2;
        mul_res_193_reg_7300 <= mul_res_193_fu_2757_p2;
        mul_res_194_reg_7305 <= mul_res_194_fu_2785_p2;
        mul_res_195_reg_7310 <= mul_res_195_fu_2813_p2;
        mul_res_196_reg_7315 <= mul_res_196_fu_2841_p2;
        mul_res_197_reg_7320 <= mul_res_197_fu_2869_p2;
        mul_res_198_reg_7325 <= mul_res_198_fu_2897_p2;
        mul_res_199_reg_7330 <= mul_res_199_fu_2925_p2;
        mul_res_200_reg_7335 <= mul_res_200_fu_2953_p2;
        mul_res_201_reg_7340 <= mul_res_201_fu_2981_p2;
        mul_res_202_reg_7345 <= mul_res_202_fu_3009_p2;
        mul_res_203_reg_7350 <= mul_res_203_fu_3037_p2;
        mul_res_204_reg_7355 <= mul_res_204_fu_3065_p2;
        mul_res_205_reg_7360 <= mul_res_205_fu_3093_p2;
        mul_res_206_reg_7365 <= mul_res_206_fu_3121_p2;
        mul_res_207_reg_7370 <= mul_res_207_fu_3149_p2;
        mul_res_208_reg_7375 <= mul_res_208_fu_3177_p2;
        mul_res_209_reg_7380 <= mul_res_209_fu_3205_p2;
        mul_res_210_reg_7385 <= mul_res_210_fu_3233_p2;
        mul_res_211_reg_7390 <= mul_res_211_fu_3261_p2;
        mul_res_212_reg_7395 <= mul_res_212_fu_3289_p2;
        mul_res_213_reg_7400 <= mul_res_213_fu_3317_p2;
        mul_res_214_reg_7405 <= mul_res_214_fu_3345_p2;
        mul_res_215_reg_7410 <= mul_res_215_fu_3363_p2;
        mul_res_216_reg_7415 <= mul_res_216_fu_3381_p2;
        mul_res_217_reg_7420 <= mul_res_217_fu_3399_p2;
        mul_res_218_reg_7425 <= mul_res_218_fu_3417_p2;
        mul_res_219_reg_7430 <= mul_res_219_fu_3435_p2;
        mul_res_220_reg_7435 <= mul_res_220_fu_3453_p2;
        mul_res_221_reg_7440 <= mul_res_221_fu_3467_p2;
        mul_res_222_reg_7445 <= mul_res_222_fu_3481_p2;
        mul_res_223_reg_7450 <= mul_res_223_fu_3495_p2;
        mul_res_224_reg_7455 <= mul_res_224_fu_3509_p2;
        mul_res_225_reg_7460 <= mul_res_225_fu_3523_p2;
        mul_res_226_reg_7465 <= mul_res_226_fu_3537_p2;
        mul_res_227_reg_7470 <= mul_res_227_fu_3551_p2;
        mul_res_228_reg_7475 <= mul_res_228_fu_3565_p2;
        mul_res_229_reg_7480 <= mul_res_229_fu_3579_p2;
        mul_res_230_reg_7485 <= mul_res_230_fu_3593_p2;
        mul_res_231_reg_7490 <= mul_res_231_fu_3607_p2;
        mul_res_232_reg_7495 <= mul_res_232_fu_3621_p2;
        mul_res_233_reg_7500 <= mul_res_233_fu_3635_p2;
        mul_res_234_reg_7505 <= mul_res_234_fu_3649_p2;
        mul_res_235_reg_7510 <= mul_res_235_fu_3663_p2;
        mul_res_236_reg_7515 <= mul_res_236_fu_3677_p2;
        mul_res_237_reg_7520 <= mul_res_237_fu_3691_p2;
        mul_res_238_reg_7525 <= mul_res_238_fu_3705_p2;
        mul_res_239_reg_7530 <= mul_res_239_fu_3719_p2;
        mul_res_240_reg_7535 <= mul_res_240_fu_3733_p2;
        mul_res_241_reg_7540 <= mul_res_241_fu_3747_p2;
        mul_res_242_reg_7545 <= mul_res_242_fu_3761_p2;
        mul_res_243_reg_7550 <= mul_res_243_fu_3775_p2;
        mul_res_244_reg_7555 <= mul_res_244_fu_3789_p2;
        mul_res_245_reg_7560 <= mul_res_245_fu_3803_p2;
        mul_res_246_reg_7565 <= mul_res_246_fu_3817_p2;
        mul_res_247_reg_7570 <= mul_res_247_fu_3831_p2;
        mul_res_248_reg_7575 <= mul_res_248_fu_3845_p2;
        mul_res_249_reg_7580 <= mul_res_249_fu_3859_p2;
        mul_res_250_reg_7585 <= mul_res_250_fu_3873_p2;
        mul_res_251_reg_7590 <= mul_res_251_fu_3887_p2;
        mul_res_252_reg_7595 <= mul_res_252_fu_3901_p2;
        mul_res_253_reg_7600 <= mul_res_253_fu_3915_p2;
        mul_res_254_reg_7605 <= mul_res_254_fu_3929_p2;
        mul_res_255_reg_7610 <= mul_res_255_fu_3943_p2;
        mul_res_256_reg_7615 <= mul_res_256_fu_3957_p2;
        mul_res_257_reg_7620 <= mul_res_257_fu_3971_p2;
        mul_res_258_reg_7625 <= mul_res_258_fu_3985_p2;
        mul_res_259_reg_7630 <= mul_res_259_fu_3999_p2;
        mul_res_260_reg_7635 <= mul_res_260_fu_4013_p2;
        mul_res_261_reg_7640 <= mul_res_261_fu_4027_p2;
        mul_res_262_reg_7645 <= mul_res_262_fu_4041_p2;
        mul_res_263_reg_7650 <= mul_res_263_fu_4055_p2;
        mul_res_264_reg_7655 <= mul_res_264_fu_4069_p2;
        mul_res_265_reg_7660 <= mul_res_265_fu_4083_p2;
        mul_res_266_reg_7665 <= mul_res_266_fu_4097_p2;
        mul_res_267_reg_7670 <= mul_res_267_fu_4111_p2;
        mul_res_268_reg_7675 <= mul_res_268_fu_4125_p2;
        mul_res_269_reg_7680 <= mul_res_269_fu_4139_p2;
        mul_res_270_reg_7685 <= mul_res_270_fu_4153_p2;
        mul_res_271_reg_7690 <= mul_res_271_fu_4167_p2;
        mul_res_272_reg_7695 <= mul_res_272_fu_4181_p2;
        mul_res_273_reg_7700 <= mul_res_273_fu_4195_p2;
        mul_res_274_reg_7705 <= mul_res_274_fu_4209_p2;
        mul_res_275_reg_7710 <= mul_res_275_fu_4223_p2;
        mul_res_276_reg_7715 <= mul_res_276_fu_4237_p2;
        mul_res_277_reg_7720 <= mul_res_277_fu_4251_p2;
        mul_res_278_reg_7725 <= mul_res_278_fu_4265_p2;
        mul_res_279_reg_7730 <= mul_res_279_fu_4279_p2;
        mul_res_280_reg_7735 <= mul_res_280_fu_4293_p2;
        mul_res_281_reg_7740 <= mul_res_281_fu_4307_p2;
        mul_res_282_reg_7745 <= mul_res_282_fu_4321_p2;
        mul_res_283_reg_7750 <= mul_res_283_fu_4335_p2;
        mul_res_284_reg_7755 <= mul_res_284_fu_4349_p2;
        mul_res_285_reg_7760 <= mul_res_285_fu_4363_p2;
        mul_res_286_reg_7765 <= mul_res_286_fu_4377_p2;
        mul_res_reg_7050 <= mul_res_fu_1337_p2;
        tmp_83_reg_6991 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[29:20]}};
        tmp_84_reg_6997 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[39:30]}};
        tmp_85_reg_7003 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[49:40]}};
        tmp_86_reg_7009 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[59:50]}};
        tmp_87_reg_7015 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[69:60]}};
        tmp_88_reg_7021 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[79:70]}};
        tmp_89_reg_7027 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[89:80]}};
        tmp_90_reg_7033 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[99:90]}};
        tmp_91_reg_7039 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[109:100]}};
        tmp_92_reg_7045 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[113:110]}};
        tmp_s_reg_6985 <= {{attn_inst_matmul_gen_v_bias_arr_661_q0[19:10]}};
        trunc_ln131_reg_6979 <= trunc_ln131_fu_1087_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln121_reg_6913 <= icmp_ln121_fu_903_p2;
        select_ln121_3_reg_6927 <= select_ln121_3_fu_1002_p3;
        select_ln121_reg_6920 <= select_ln121_fu_994_p3;
        trunc_ln121_reg_6932 <= trunc_ln121_fu_1010_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_0_0_0364_fu_684 <= add_ln153_148_fu_4740_p2;
        p_0_0_0388_fu_732 <= add_ln153_220_fu_5580_p2;
        p_0_0_0_10384_fu_724 <= add_ln153_208_fu_5440_p2;
        p_0_0_0_10408_fu_772 <= add_ln153_280_fu_6280_p2;
        p_0_0_0_112366_fu_688 <= add_ln153_154_fu_4810_p2;
        p_0_0_0_112390_fu_736 <= add_ln153_226_fu_5650_p2;
        p_0_0_0_11386_fu_728 <= add_ln153_214_fu_5510_p2;
        p_0_0_0_11410_fu_776 <= add_ln153_286_fu_6350_p2;
        p_0_0_0_2368_fu_692 <= add_ln153_160_fu_4880_p2;
        p_0_0_0_2392_fu_740 <= add_ln153_232_fu_5720_p2;
        p_0_0_0_3370_fu_696 <= add_ln153_166_fu_4950_p2;
        p_0_0_0_3394_fu_744 <= add_ln153_238_fu_5790_p2;
        p_0_0_0_4372_fu_700 <= add_ln153_172_fu_5020_p2;
        p_0_0_0_4396_fu_748 <= add_ln153_244_fu_5860_p2;
        p_0_0_0_5374_fu_704 <= add_ln153_178_fu_5090_p2;
        p_0_0_0_5398_fu_752 <= add_ln153_250_fu_5930_p2;
        p_0_0_0_6376_fu_708 <= add_ln153_184_fu_5160_p2;
        p_0_0_0_6400_fu_756 <= add_ln153_256_fu_6000_p2;
        p_0_0_0_7378_fu_712 <= add_ln153_190_fu_5230_p2;
        p_0_0_0_7402_fu_760 <= add_ln153_262_fu_6070_p2;
        p_0_0_0_8380_fu_716 <= add_ln153_196_fu_5300_p2;
        p_0_0_0_8404_fu_764 <= add_ln153_268_fu_6140_p2;
        p_0_0_0_9382_fu_720 <= add_ln153_202_fu_5370_p2;
        p_0_0_0_9406_fu_768 <= add_ln153_274_fu_6210_p2;
    end
end

always @ (*) begin
    if (((icmp_ln120_fu_897_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_680;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_780;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_788;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_784;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_v_bias_arr_661_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_v_bias_arr_661_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_v_weight_arr_660_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_v_weight_arr_660_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln161_reg_6975_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln161_reg_6975_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_891_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 16'd1);

assign add_ln121_2_fu_909_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln121_fu_983_p2 = (select_ln120_fu_959_p3 + 5'd1);

assign add_ln122_fu_1014_p2 = (select_ln121_fu_994_p3 + 6'd1);

assign add_ln151_fu_1062_p2 = (tmp_38_fu_1048_p3 + zext_ln151_fu_1059_p1);

assign add_ln153_144_fu_4734_p2 = ($signed(sext_ln153_123_fu_4730_p1) + $signed(sext_ln153_120_fu_4700_p1));

assign add_ln153_145_fu_4704_p2 = ($signed(sext_ln151_211_fu_4682_p1) + $signed(sext_ln151_208_fu_4679_p1));

assign add_ln153_146_fu_4714_p2 = ($signed(sext_ln151_205_fu_4676_p1) + $signed(sext_ln153_fu_4691_p1));

assign add_ln153_147_fu_4724_p2 = ($signed(sext_ln153_122_fu_4720_p1) + $signed(sext_ln153_121_fu_4710_p1));

assign add_ln153_148_fu_4740_p2 = (add_ln153_144_fu_4734_p2 + select_ln126_46_fu_4670_p3);

assign add_ln153_149_fu_4764_p2 = ($signed(sext_ln151_227_fu_4755_p1) + $signed(sext_ln151_229_fu_4758_p1));

assign add_ln153_150_fu_4804_p2 = ($signed(sext_ln153_128_fu_4800_p1) + $signed(sext_ln153_125_fu_4770_p1));

assign add_ln153_151_fu_4774_p2 = ($signed(sext_ln151_225_fu_4752_p1) + $signed(sext_ln151_223_fu_4749_p1));

assign add_ln153_152_fu_4784_p2 = ($signed(sext_ln151_221_fu_4746_p1) + $signed(sext_ln153_124_fu_4761_p1));

assign add_ln153_153_fu_4794_p2 = ($signed(sext_ln153_127_fu_4790_p1) + $signed(sext_ln153_126_fu_4780_p1));

assign add_ln153_154_fu_4810_p2 = (add_ln153_150_fu_4804_p2 + select_ln126_45_fu_4664_p3);

assign add_ln153_155_fu_4834_p2 = ($signed(sext_ln151_238_fu_4825_p1) + $signed(sext_ln151_240_fu_4828_p1));

assign add_ln153_156_fu_4874_p2 = ($signed(sext_ln153_133_fu_4870_p1) + $signed(sext_ln153_130_fu_4840_p1));

assign add_ln153_157_fu_4844_p2 = ($signed(sext_ln151_236_fu_4822_p1) + $signed(sext_ln151_234_fu_4819_p1));

assign add_ln153_158_fu_4854_p2 = ($signed(sext_ln151_232_fu_4816_p1) + $signed(sext_ln153_129_fu_4831_p1));

assign add_ln153_159_fu_4864_p2 = ($signed(sext_ln153_132_fu_4860_p1) + $signed(sext_ln153_131_fu_4850_p1));

assign add_ln153_160_fu_4880_p2 = (add_ln153_156_fu_4874_p2 + select_ln126_44_fu_4658_p3);

assign add_ln153_161_fu_4904_p2 = ($signed(sext_ln151_249_fu_4895_p1) + $signed(sext_ln151_251_fu_4898_p1));

assign add_ln153_162_fu_4944_p2 = ($signed(sext_ln153_138_fu_4940_p1) + $signed(sext_ln153_135_fu_4910_p1));

assign add_ln153_163_fu_4914_p2 = ($signed(sext_ln151_247_fu_4892_p1) + $signed(sext_ln151_245_fu_4889_p1));

assign add_ln153_164_fu_4924_p2 = ($signed(sext_ln151_243_fu_4886_p1) + $signed(sext_ln153_134_fu_4901_p1));

assign add_ln153_165_fu_4934_p2 = ($signed(sext_ln153_137_fu_4930_p1) + $signed(sext_ln153_136_fu_4920_p1));

assign add_ln153_166_fu_4950_p2 = (add_ln153_162_fu_4944_p2 + select_ln126_43_fu_4652_p3);

assign add_ln153_167_fu_4974_p2 = ($signed(sext_ln151_260_fu_4965_p1) + $signed(sext_ln151_262_fu_4968_p1));

assign add_ln153_168_fu_5014_p2 = ($signed(sext_ln153_143_fu_5010_p1) + $signed(sext_ln153_140_fu_4980_p1));

assign add_ln153_169_fu_4984_p2 = ($signed(sext_ln151_258_fu_4962_p1) + $signed(sext_ln151_256_fu_4959_p1));

assign add_ln153_170_fu_4994_p2 = ($signed(sext_ln151_254_fu_4956_p1) + $signed(sext_ln153_139_fu_4971_p1));

assign add_ln153_171_fu_5004_p2 = ($signed(sext_ln153_142_fu_5000_p1) + $signed(sext_ln153_141_fu_4990_p1));

assign add_ln153_172_fu_5020_p2 = (add_ln153_168_fu_5014_p2 + select_ln126_42_fu_4646_p3);

assign add_ln153_173_fu_5044_p2 = ($signed(sext_ln151_271_fu_5035_p1) + $signed(sext_ln151_273_fu_5038_p1));

assign add_ln153_174_fu_5084_p2 = ($signed(sext_ln153_148_fu_5080_p1) + $signed(sext_ln153_145_fu_5050_p1));

assign add_ln153_175_fu_5054_p2 = ($signed(sext_ln151_269_fu_5032_p1) + $signed(sext_ln151_267_fu_5029_p1));

assign add_ln153_176_fu_5064_p2 = ($signed(sext_ln151_265_fu_5026_p1) + $signed(sext_ln153_144_fu_5041_p1));

assign add_ln153_177_fu_5074_p2 = ($signed(sext_ln153_147_fu_5070_p1) + $signed(sext_ln153_146_fu_5060_p1));

assign add_ln153_178_fu_5090_p2 = (add_ln153_174_fu_5084_p2 + select_ln126_41_fu_4640_p3);

assign add_ln153_179_fu_5114_p2 = ($signed(sext_ln151_282_fu_5105_p1) + $signed(sext_ln151_284_fu_5108_p1));

assign add_ln153_180_fu_5154_p2 = ($signed(sext_ln153_153_fu_5150_p1) + $signed(sext_ln153_150_fu_5120_p1));

assign add_ln153_181_fu_5124_p2 = ($signed(sext_ln151_280_fu_5102_p1) + $signed(sext_ln151_278_fu_5099_p1));

assign add_ln153_182_fu_5134_p2 = ($signed(sext_ln151_276_fu_5096_p1) + $signed(sext_ln153_149_fu_5111_p1));

assign add_ln153_183_fu_5144_p2 = ($signed(sext_ln153_152_fu_5140_p1) + $signed(sext_ln153_151_fu_5130_p1));

assign add_ln153_184_fu_5160_p2 = (add_ln153_180_fu_5154_p2 + select_ln126_40_fu_4634_p3);

assign add_ln153_185_fu_5184_p2 = ($signed(sext_ln151_293_fu_5175_p1) + $signed(sext_ln151_295_fu_5178_p1));

assign add_ln153_186_fu_5224_p2 = ($signed(sext_ln153_158_fu_5220_p1) + $signed(sext_ln153_155_fu_5190_p1));

assign add_ln153_187_fu_5194_p2 = ($signed(sext_ln151_291_fu_5172_p1) + $signed(sext_ln151_289_fu_5169_p1));

assign add_ln153_188_fu_5204_p2 = ($signed(sext_ln151_287_fu_5166_p1) + $signed(sext_ln153_154_fu_5181_p1));

assign add_ln153_189_fu_5214_p2 = ($signed(sext_ln153_157_fu_5210_p1) + $signed(sext_ln153_156_fu_5200_p1));

assign add_ln153_190_fu_5230_p2 = (add_ln153_186_fu_5224_p2 + select_ln126_39_fu_4628_p3);

assign add_ln153_191_fu_5254_p2 = ($signed(sext_ln151_304_fu_5245_p1) + $signed(sext_ln151_306_fu_5248_p1));

assign add_ln153_192_fu_5294_p2 = ($signed(sext_ln153_163_fu_5290_p1) + $signed(sext_ln153_160_fu_5260_p1));

assign add_ln153_193_fu_5264_p2 = ($signed(sext_ln151_302_fu_5242_p1) + $signed(sext_ln151_300_fu_5239_p1));

assign add_ln153_194_fu_5274_p2 = ($signed(sext_ln151_298_fu_5236_p1) + $signed(sext_ln153_159_fu_5251_p1));

assign add_ln153_195_fu_5284_p2 = ($signed(sext_ln153_162_fu_5280_p1) + $signed(sext_ln153_161_fu_5270_p1));

assign add_ln153_196_fu_5300_p2 = (add_ln153_192_fu_5294_p2 + select_ln126_38_fu_4622_p3);

assign add_ln153_197_fu_5324_p2 = ($signed(sext_ln151_315_fu_5315_p1) + $signed(sext_ln151_317_fu_5318_p1));

assign add_ln153_198_fu_5364_p2 = ($signed(sext_ln153_168_fu_5360_p1) + $signed(sext_ln153_165_fu_5330_p1));

assign add_ln153_199_fu_5334_p2 = ($signed(sext_ln151_313_fu_5312_p1) + $signed(sext_ln151_311_fu_5309_p1));

assign add_ln153_200_fu_5344_p2 = ($signed(sext_ln151_309_fu_5306_p1) + $signed(sext_ln153_164_fu_5321_p1));

assign add_ln153_201_fu_5354_p2 = ($signed(sext_ln153_167_fu_5350_p1) + $signed(sext_ln153_166_fu_5340_p1));

assign add_ln153_202_fu_5370_p2 = (add_ln153_198_fu_5364_p2 + select_ln126_37_fu_4616_p3);

assign add_ln153_203_fu_5394_p2 = ($signed(sext_ln151_326_fu_5385_p1) + $signed(sext_ln151_328_fu_5388_p1));

assign add_ln153_204_fu_5404_p2 = ($signed(sext_ln153_170_fu_5400_p1) + $signed(select_ln126_36_fu_4610_p3));

assign add_ln153_205_fu_5410_p2 = ($signed(sext_ln151_324_fu_5382_p1) + $signed(sext_ln151_322_fu_5379_p1));

assign add_ln153_206_fu_5420_p2 = ($signed(sext_ln151_320_fu_5376_p1) + $signed(sext_ln153_169_fu_5391_p1));

assign add_ln153_207_fu_5430_p2 = ($signed(sext_ln153_172_fu_5426_p1) + $signed(sext_ln153_171_fu_5416_p1));

assign add_ln153_208_fu_5440_p2 = ($signed(sext_ln153_173_fu_5436_p1) + $signed(add_ln153_204_fu_5404_p2));

assign add_ln153_209_fu_5464_p2 = ($signed(sext_ln151_345_fu_5455_p1) + $signed(sext_ln151_346_fu_5458_p1));

assign add_ln153_210_fu_5474_p2 = ($signed(sext_ln153_175_fu_5470_p1) + $signed(select_ln126_35_fu_4603_p3));

assign add_ln153_211_fu_5480_p2 = ($signed(sext_ln151_335_fu_5452_p1) + $signed(sext_ln151_333_fu_5449_p1));

assign add_ln153_212_fu_5490_p2 = ($signed(sext_ln151_331_fu_5446_p1) + $signed(sext_ln153_174_fu_5461_p1));

assign add_ln153_213_fu_5500_p2 = ($signed(sext_ln153_177_fu_5496_p1) + $signed(sext_ln153_176_fu_5486_p1));

assign add_ln153_214_fu_5510_p2 = ($signed(sext_ln153_178_fu_5506_p1) + $signed(add_ln153_210_fu_5474_p2));

assign add_ln153_215_fu_5534_p2 = ($signed(sext_ln151_350_fu_5525_p1) + $signed(sext_ln151_351_fu_5528_p1));

assign add_ln153_216_fu_5544_p2 = ($signed(sext_ln153_180_fu_5540_p1) + $signed(select_ln126_34_fu_4597_p3));

assign add_ln153_217_fu_5550_p2 = ($signed(sext_ln151_349_fu_5522_p1) + $signed(sext_ln151_348_fu_5519_p1));

assign add_ln153_218_fu_5560_p2 = ($signed(sext_ln151_347_fu_5516_p1) + $signed(sext_ln153_179_fu_5531_p1));

assign add_ln153_219_fu_5570_p2 = ($signed(sext_ln153_182_fu_5566_p1) + $signed(sext_ln153_181_fu_5556_p1));

assign add_ln153_220_fu_5580_p2 = ($signed(sext_ln153_183_fu_5576_p1) + $signed(add_ln153_216_fu_5544_p2));

assign add_ln153_221_fu_5604_p2 = ($signed(sext_ln151_355_fu_5595_p1) + $signed(sext_ln151_356_fu_5598_p1));

assign add_ln153_222_fu_5614_p2 = ($signed(sext_ln153_185_fu_5610_p1) + $signed(select_ln126_33_fu_4591_p3));

assign add_ln153_223_fu_5620_p2 = ($signed(sext_ln151_354_fu_5592_p1) + $signed(sext_ln151_353_fu_5589_p1));

assign add_ln153_224_fu_5630_p2 = ($signed(sext_ln151_352_fu_5586_p1) + $signed(sext_ln153_184_fu_5601_p1));

assign add_ln153_225_fu_5640_p2 = ($signed(sext_ln153_187_fu_5636_p1) + $signed(sext_ln153_186_fu_5626_p1));

assign add_ln153_226_fu_5650_p2 = ($signed(sext_ln153_188_fu_5646_p1) + $signed(add_ln153_222_fu_5614_p2));

assign add_ln153_227_fu_5674_p2 = ($signed(sext_ln151_360_fu_5665_p1) + $signed(sext_ln151_361_fu_5668_p1));

assign add_ln153_228_fu_5684_p2 = ($signed(sext_ln153_190_fu_5680_p1) + $signed(select_ln126_32_fu_4585_p3));

assign add_ln153_229_fu_5690_p2 = ($signed(sext_ln151_359_fu_5662_p1) + $signed(sext_ln151_358_fu_5659_p1));

assign add_ln153_230_fu_5700_p2 = ($signed(sext_ln151_357_fu_5656_p1) + $signed(sext_ln153_189_fu_5671_p1));

assign add_ln153_231_fu_5710_p2 = ($signed(sext_ln153_192_fu_5706_p1) + $signed(sext_ln153_191_fu_5696_p1));

assign add_ln153_232_fu_5720_p2 = ($signed(sext_ln153_193_fu_5716_p1) + $signed(add_ln153_228_fu_5684_p2));

assign add_ln153_233_fu_5744_p2 = ($signed(sext_ln151_365_fu_5735_p1) + $signed(sext_ln151_366_fu_5738_p1));

assign add_ln153_234_fu_5754_p2 = ($signed(sext_ln153_195_fu_5750_p1) + $signed(select_ln126_31_fu_4579_p3));

assign add_ln153_235_fu_5760_p2 = ($signed(sext_ln151_364_fu_5732_p1) + $signed(sext_ln151_363_fu_5729_p1));

assign add_ln153_236_fu_5770_p2 = ($signed(sext_ln151_362_fu_5726_p1) + $signed(sext_ln153_194_fu_5741_p1));

assign add_ln153_237_fu_5780_p2 = ($signed(sext_ln153_197_fu_5776_p1) + $signed(sext_ln153_196_fu_5766_p1));

assign add_ln153_238_fu_5790_p2 = ($signed(sext_ln153_198_fu_5786_p1) + $signed(add_ln153_234_fu_5754_p2));

assign add_ln153_239_fu_5814_p2 = ($signed(sext_ln151_370_fu_5805_p1) + $signed(sext_ln151_371_fu_5808_p1));

assign add_ln153_240_fu_5824_p2 = ($signed(sext_ln153_200_fu_5820_p1) + $signed(select_ln126_30_fu_4573_p3));

assign add_ln153_241_fu_5830_p2 = ($signed(sext_ln151_369_fu_5802_p1) + $signed(sext_ln151_368_fu_5799_p1));

assign add_ln153_242_fu_5840_p2 = ($signed(sext_ln151_367_fu_5796_p1) + $signed(sext_ln153_199_fu_5811_p1));

assign add_ln153_243_fu_5850_p2 = ($signed(sext_ln153_202_fu_5846_p1) + $signed(sext_ln153_201_fu_5836_p1));

assign add_ln153_244_fu_5860_p2 = ($signed(sext_ln153_203_fu_5856_p1) + $signed(add_ln153_240_fu_5824_p2));

assign add_ln153_245_fu_5884_p2 = ($signed(sext_ln151_375_fu_5875_p1) + $signed(sext_ln151_376_fu_5878_p1));

assign add_ln153_246_fu_5894_p2 = ($signed(sext_ln153_205_fu_5890_p1) + $signed(select_ln126_29_fu_4567_p3));

assign add_ln153_247_fu_5900_p2 = ($signed(sext_ln151_374_fu_5872_p1) + $signed(sext_ln151_373_fu_5869_p1));

assign add_ln153_248_fu_5910_p2 = ($signed(sext_ln151_372_fu_5866_p1) + $signed(sext_ln153_204_fu_5881_p1));

assign add_ln153_249_fu_5920_p2 = ($signed(sext_ln153_207_fu_5916_p1) + $signed(sext_ln153_206_fu_5906_p1));

assign add_ln153_250_fu_5930_p2 = ($signed(sext_ln153_208_fu_5926_p1) + $signed(add_ln153_246_fu_5894_p2));

assign add_ln153_251_fu_5954_p2 = ($signed(sext_ln151_380_fu_5945_p1) + $signed(sext_ln151_381_fu_5948_p1));

assign add_ln153_252_fu_5964_p2 = ($signed(sext_ln153_210_fu_5960_p1) + $signed(select_ln126_28_fu_4561_p3));

assign add_ln153_253_fu_5970_p2 = ($signed(sext_ln151_379_fu_5942_p1) + $signed(sext_ln151_378_fu_5939_p1));

assign add_ln153_254_fu_5980_p2 = ($signed(sext_ln151_377_fu_5936_p1) + $signed(sext_ln153_209_fu_5951_p1));

assign add_ln153_255_fu_5990_p2 = ($signed(sext_ln153_212_fu_5986_p1) + $signed(sext_ln153_211_fu_5976_p1));

assign add_ln153_256_fu_6000_p2 = ($signed(sext_ln153_213_fu_5996_p1) + $signed(add_ln153_252_fu_5964_p2));

assign add_ln153_257_fu_6024_p2 = ($signed(sext_ln151_385_fu_6015_p1) + $signed(sext_ln151_386_fu_6018_p1));

assign add_ln153_258_fu_6034_p2 = ($signed(sext_ln153_215_fu_6030_p1) + $signed(select_ln126_27_fu_4555_p3));

assign add_ln153_259_fu_6040_p2 = ($signed(sext_ln151_384_fu_6012_p1) + $signed(sext_ln151_383_fu_6009_p1));

assign add_ln153_260_fu_6050_p2 = ($signed(sext_ln151_382_fu_6006_p1) + $signed(sext_ln153_214_fu_6021_p1));

assign add_ln153_261_fu_6060_p2 = ($signed(sext_ln153_217_fu_6056_p1) + $signed(sext_ln153_216_fu_6046_p1));

assign add_ln153_262_fu_6070_p2 = ($signed(sext_ln153_218_fu_6066_p1) + $signed(add_ln153_258_fu_6034_p2));

assign add_ln153_263_fu_6094_p2 = ($signed(sext_ln151_390_fu_6085_p1) + $signed(sext_ln151_391_fu_6088_p1));

assign add_ln153_264_fu_6104_p2 = ($signed(sext_ln153_220_fu_6100_p1) + $signed(select_ln126_26_fu_4549_p3));

assign add_ln153_265_fu_6110_p2 = ($signed(sext_ln151_389_fu_6082_p1) + $signed(sext_ln151_388_fu_6079_p1));

assign add_ln153_266_fu_6120_p2 = ($signed(sext_ln151_387_fu_6076_p1) + $signed(sext_ln153_219_fu_6091_p1));

assign add_ln153_267_fu_6130_p2 = ($signed(sext_ln153_222_fu_6126_p1) + $signed(sext_ln153_221_fu_6116_p1));

assign add_ln153_268_fu_6140_p2 = ($signed(sext_ln153_223_fu_6136_p1) + $signed(add_ln153_264_fu_6104_p2));

assign add_ln153_269_fu_6164_p2 = ($signed(sext_ln151_395_fu_6155_p1) + $signed(sext_ln151_396_fu_6158_p1));

assign add_ln153_270_fu_6174_p2 = ($signed(sext_ln153_225_fu_6170_p1) + $signed(select_ln126_25_fu_4543_p3));

assign add_ln153_271_fu_6180_p2 = ($signed(sext_ln151_394_fu_6152_p1) + $signed(sext_ln151_393_fu_6149_p1));

assign add_ln153_272_fu_6190_p2 = ($signed(sext_ln151_392_fu_6146_p1) + $signed(sext_ln153_224_fu_6161_p1));

assign add_ln153_273_fu_6200_p2 = ($signed(sext_ln153_227_fu_6196_p1) + $signed(sext_ln153_226_fu_6186_p1));

assign add_ln153_274_fu_6210_p2 = ($signed(sext_ln153_228_fu_6206_p1) + $signed(add_ln153_270_fu_6174_p2));

assign add_ln153_275_fu_6234_p2 = ($signed(sext_ln151_400_fu_6225_p1) + $signed(sext_ln151_401_fu_6228_p1));

assign add_ln153_276_fu_6244_p2 = ($signed(sext_ln153_230_fu_6240_p1) + $signed(select_ln126_24_fu_4537_p3));

assign add_ln153_277_fu_6250_p2 = ($signed(sext_ln151_399_fu_6222_p1) + $signed(sext_ln151_398_fu_6219_p1));

assign add_ln153_278_fu_6260_p2 = ($signed(sext_ln151_397_fu_6216_p1) + $signed(sext_ln153_229_fu_6231_p1));

assign add_ln153_279_fu_6270_p2 = ($signed(sext_ln153_232_fu_6266_p1) + $signed(sext_ln153_231_fu_6256_p1));

assign add_ln153_280_fu_6280_p2 = ($signed(sext_ln153_233_fu_6276_p1) + $signed(add_ln153_276_fu_6244_p2));

assign add_ln153_281_fu_6304_p2 = ($signed(sext_ln151_405_fu_6295_p1) + $signed(sext_ln151_406_fu_6298_p1));

assign add_ln153_282_fu_6314_p2 = ($signed(sext_ln153_235_fu_6310_p1) + $signed(select_ln126_fu_4530_p3));

assign add_ln153_283_fu_6320_p2 = ($signed(sext_ln151_404_fu_6292_p1) + $signed(sext_ln151_403_fu_6289_p1));

assign add_ln153_284_fu_6330_p2 = ($signed(sext_ln151_402_fu_6286_p1) + $signed(sext_ln153_234_fu_6301_p1));

assign add_ln153_285_fu_6340_p2 = ($signed(sext_ln153_237_fu_6336_p1) + $signed(sext_ln153_236_fu_6326_p1));

assign add_ln153_286_fu_6350_p2 = ($signed(sext_ln153_238_fu_6346_p1) + $signed(add_ln153_282_fu_6314_p2));

assign add_ln153_fu_4694_p2 = ($signed(sext_ln151_214_fu_4685_p1) + $signed(sext_ln151_217_fu_4688_p1));

assign and_ln120_fu_977_p2 = (xor_ln120_fu_966_p2 & icmp_ln122_fu_971_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln161_reg_6975_pp0_iter4_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_652 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_749 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_v_bias_arr_661_address0 = zext_ln121_fu_1044_p1;

assign attn_inst_matmul_gen_v_weight_arr_660_address0 = zext_ln151_2_fu_1068_p1;

assign icmp_ln120_fu_897_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_903_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_971_p2 = ((ap_sig_allocacmp_cit_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_1073_p2 = ((select_ln121_reg_6920 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_1082_p2 = ((select_ln121_reg_6920 == 6'd31) ? 1'b1 : 1'b0);

assign mac_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{add_ln153_286_reg_7885}, {add_ln153_280_reg_7880}}, {add_ln153_274_reg_7875}}, {add_ln153_268_reg_7870}}, {add_ln153_262_reg_7865}}, {add_ln153_256_reg_7860}}, {add_ln153_250_reg_7855}}, {add_ln153_244_reg_7850}}, {add_ln153_238_reg_7845}}, {add_ln153_232_reg_7840}}, {add_ln153_226_reg_7835}}, {add_ln153_220_reg_7830}}, {add_ln153_214_reg_7825}}, {add_ln153_208_reg_7820}}, {add_ln153_202_reg_7815}}, {add_ln153_196_reg_7810}}, {add_ln153_190_reg_7805}}, {add_ln153_184_reg_7800}}, {add_ln153_178_reg_7795}}, {add_ln153_172_reg_7790}}, {add_ln153_166_reg_7785}}, {add_ln153_160_reg_7780}}, {add_ln153_154_reg_7775}}, {add_ln153_148_reg_7770}};

assign mul_res_144_fu_1369_p0 = sext_ln151_207_fu_1357_p1;

assign mul_res_144_fu_1369_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_145_fu_1401_p0 = sext_ln151_210_fu_1389_p1;

assign mul_res_145_fu_1401_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_146_fu_1433_p0 = sext_ln151_213_fu_1421_p1;

assign mul_res_146_fu_1433_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_147_fu_1465_p0 = sext_ln151_216_fu_1453_p1;

assign mul_res_147_fu_1465_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_148_fu_1497_p0 = sext_ln151_219_fu_1485_p1;

assign mul_res_148_fu_1497_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_149_fu_1525_p0 = sext_ln151_220_fu_1513_p1;

assign mul_res_149_fu_1525_p1 = sext_ln151_fu_1321_p1;

assign mul_res_150_fu_1553_p0 = sext_ln151_222_fu_1541_p1;

assign mul_res_150_fu_1553_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_151_fu_1581_p0 = sext_ln151_224_fu_1569_p1;

assign mul_res_151_fu_1581_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_152_fu_1609_p0 = sext_ln151_226_fu_1597_p1;

assign mul_res_152_fu_1609_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_153_fu_1637_p0 = sext_ln151_228_fu_1625_p1;

assign mul_res_153_fu_1637_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_154_fu_1665_p0 = sext_ln151_230_fu_1653_p1;

assign mul_res_154_fu_1665_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_155_fu_1693_p0 = sext_ln151_231_fu_1681_p1;

assign mul_res_155_fu_1693_p1 = sext_ln151_fu_1321_p1;

assign mul_res_156_fu_1721_p0 = sext_ln151_233_fu_1709_p1;

assign mul_res_156_fu_1721_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_157_fu_1749_p0 = sext_ln151_235_fu_1737_p1;

assign mul_res_157_fu_1749_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_158_fu_1777_p0 = sext_ln151_237_fu_1765_p1;

assign mul_res_158_fu_1777_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_159_fu_1805_p0 = sext_ln151_239_fu_1793_p1;

assign mul_res_159_fu_1805_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_160_fu_1833_p0 = sext_ln151_241_fu_1821_p1;

assign mul_res_160_fu_1833_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_161_fu_1861_p0 = sext_ln151_242_fu_1849_p1;

assign mul_res_161_fu_1861_p1 = sext_ln151_fu_1321_p1;

assign mul_res_162_fu_1889_p0 = sext_ln151_244_fu_1877_p1;

assign mul_res_162_fu_1889_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_163_fu_1917_p0 = sext_ln151_246_fu_1905_p1;

assign mul_res_163_fu_1917_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_164_fu_1945_p0 = sext_ln151_248_fu_1933_p1;

assign mul_res_164_fu_1945_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_165_fu_1973_p0 = sext_ln151_250_fu_1961_p1;

assign mul_res_165_fu_1973_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_166_fu_2001_p0 = sext_ln151_252_fu_1989_p1;

assign mul_res_166_fu_2001_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_167_fu_2029_p0 = sext_ln151_253_fu_2017_p1;

assign mul_res_167_fu_2029_p1 = sext_ln151_fu_1321_p1;

assign mul_res_168_fu_2057_p0 = sext_ln151_255_fu_2045_p1;

assign mul_res_168_fu_2057_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_169_fu_2085_p0 = sext_ln151_257_fu_2073_p1;

assign mul_res_169_fu_2085_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_170_fu_2113_p0 = sext_ln151_259_fu_2101_p1;

assign mul_res_170_fu_2113_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_171_fu_2141_p0 = sext_ln151_261_fu_2129_p1;

assign mul_res_171_fu_2141_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_172_fu_2169_p0 = sext_ln151_263_fu_2157_p1;

assign mul_res_172_fu_2169_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_173_fu_2197_p0 = sext_ln151_264_fu_2185_p1;

assign mul_res_173_fu_2197_p1 = sext_ln151_fu_1321_p1;

assign mul_res_174_fu_2225_p0 = sext_ln151_266_fu_2213_p1;

assign mul_res_174_fu_2225_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_175_fu_2253_p0 = sext_ln151_268_fu_2241_p1;

assign mul_res_175_fu_2253_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_176_fu_2281_p0 = sext_ln151_270_fu_2269_p1;

assign mul_res_176_fu_2281_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_177_fu_2309_p0 = sext_ln151_272_fu_2297_p1;

assign mul_res_177_fu_2309_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_178_fu_2337_p0 = sext_ln151_274_fu_2325_p1;

assign mul_res_178_fu_2337_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_179_fu_2365_p0 = sext_ln151_275_fu_2353_p1;

assign mul_res_179_fu_2365_p1 = sext_ln151_fu_1321_p1;

assign mul_res_180_fu_2393_p0 = sext_ln151_277_fu_2381_p1;

assign mul_res_180_fu_2393_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_181_fu_2421_p0 = sext_ln151_279_fu_2409_p1;

assign mul_res_181_fu_2421_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_182_fu_2449_p0 = sext_ln151_281_fu_2437_p1;

assign mul_res_182_fu_2449_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_183_fu_2477_p0 = sext_ln151_283_fu_2465_p1;

assign mul_res_183_fu_2477_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_184_fu_2505_p0 = sext_ln151_285_fu_2493_p1;

assign mul_res_184_fu_2505_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_185_fu_2533_p0 = sext_ln151_286_fu_2521_p1;

assign mul_res_185_fu_2533_p1 = sext_ln151_fu_1321_p1;

assign mul_res_186_fu_2561_p0 = sext_ln151_288_fu_2549_p1;

assign mul_res_186_fu_2561_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_187_fu_2589_p0 = sext_ln151_290_fu_2577_p1;

assign mul_res_187_fu_2589_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_188_fu_2617_p0 = sext_ln151_292_fu_2605_p1;

assign mul_res_188_fu_2617_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_189_fu_2645_p0 = sext_ln151_294_fu_2633_p1;

assign mul_res_189_fu_2645_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_190_fu_2673_p0 = sext_ln151_296_fu_2661_p1;

assign mul_res_190_fu_2673_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_191_fu_2701_p0 = sext_ln151_297_fu_2689_p1;

assign mul_res_191_fu_2701_p1 = sext_ln151_fu_1321_p1;

assign mul_res_192_fu_2729_p0 = sext_ln151_299_fu_2717_p1;

assign mul_res_192_fu_2729_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_193_fu_2757_p0 = sext_ln151_301_fu_2745_p1;

assign mul_res_193_fu_2757_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_194_fu_2785_p0 = sext_ln151_303_fu_2773_p1;

assign mul_res_194_fu_2785_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_195_fu_2813_p0 = sext_ln151_305_fu_2801_p1;

assign mul_res_195_fu_2813_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_196_fu_2841_p0 = sext_ln151_307_fu_2829_p1;

assign mul_res_196_fu_2841_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_197_fu_2869_p0 = sext_ln151_308_fu_2857_p1;

assign mul_res_197_fu_2869_p1 = sext_ln151_fu_1321_p1;

assign mul_res_198_fu_2897_p0 = sext_ln151_310_fu_2885_p1;

assign mul_res_198_fu_2897_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_199_fu_2925_p0 = sext_ln151_312_fu_2913_p1;

assign mul_res_199_fu_2925_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_200_fu_2953_p0 = sext_ln151_314_fu_2941_p1;

assign mul_res_200_fu_2953_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_201_fu_2981_p0 = sext_ln151_316_fu_2969_p1;

assign mul_res_201_fu_2981_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_202_fu_3009_p0 = sext_ln151_318_fu_2997_p1;

assign mul_res_202_fu_3009_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_203_fu_3037_p0 = sext_ln151_319_fu_3025_p1;

assign mul_res_203_fu_3037_p1 = sext_ln151_fu_1321_p1;

assign mul_res_204_fu_3065_p0 = sext_ln151_321_fu_3053_p1;

assign mul_res_204_fu_3065_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_205_fu_3093_p0 = sext_ln151_323_fu_3081_p1;

assign mul_res_205_fu_3093_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_206_fu_3121_p0 = sext_ln151_325_fu_3109_p1;

assign mul_res_206_fu_3121_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_207_fu_3149_p0 = sext_ln151_327_fu_3137_p1;

assign mul_res_207_fu_3149_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_208_fu_3177_p0 = sext_ln151_329_fu_3165_p1;

assign mul_res_208_fu_3177_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_209_fu_3205_p0 = sext_ln151_330_fu_3193_p1;

assign mul_res_209_fu_3205_p1 = sext_ln151_fu_1321_p1;

assign mul_res_210_fu_3233_p0 = sext_ln151_332_fu_3221_p1;

assign mul_res_210_fu_3233_p1 = sext_ln151_206_fu_1353_p1;

assign mul_res_211_fu_3261_p0 = sext_ln151_334_fu_3249_p1;

assign mul_res_211_fu_3261_p1 = sext_ln151_209_fu_1385_p1;

assign mul_res_212_fu_3289_p0 = sext_ln151_336_fu_3277_p1;

assign mul_res_212_fu_3289_p1 = sext_ln151_212_fu_1417_p1;

assign mul_res_213_fu_3317_p0 = sext_ln151_337_fu_3305_p1;

assign mul_res_213_fu_3317_p1 = sext_ln151_215_fu_1449_p1;

assign mul_res_214_fu_3345_p0 = sext_ln151_338_fu_3333_p1;

assign mul_res_214_fu_3345_p1 = sext_ln151_218_fu_1481_p1;

assign mul_res_215_fu_3363_p0 = sext_ln151_204_fu_1325_p1;

assign mul_res_215_fu_3363_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_216_fu_3381_p0 = sext_ln151_207_fu_1357_p1;

assign mul_res_216_fu_3381_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_217_fu_3399_p0 = sext_ln151_210_fu_1389_p1;

assign mul_res_217_fu_3399_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_218_fu_3417_p0 = sext_ln151_213_fu_1421_p1;

assign mul_res_218_fu_3417_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_219_fu_3435_p0 = sext_ln151_216_fu_1453_p1;

assign mul_res_219_fu_3435_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_220_fu_3453_p0 = sext_ln151_219_fu_1485_p1;

assign mul_res_220_fu_3453_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_221_fu_3467_p0 = sext_ln151_220_fu_1513_p1;

assign mul_res_221_fu_3467_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_222_fu_3481_p0 = sext_ln151_222_fu_1541_p1;

assign mul_res_222_fu_3481_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_223_fu_3495_p0 = sext_ln151_224_fu_1569_p1;

assign mul_res_223_fu_3495_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_224_fu_3509_p0 = sext_ln151_226_fu_1597_p1;

assign mul_res_224_fu_3509_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_225_fu_3523_p0 = sext_ln151_228_fu_1625_p1;

assign mul_res_225_fu_3523_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_226_fu_3537_p0 = sext_ln151_230_fu_1653_p1;

assign mul_res_226_fu_3537_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_227_fu_3551_p0 = sext_ln151_231_fu_1681_p1;

assign mul_res_227_fu_3551_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_228_fu_3565_p0 = sext_ln151_233_fu_1709_p1;

assign mul_res_228_fu_3565_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_229_fu_3579_p0 = sext_ln151_235_fu_1737_p1;

assign mul_res_229_fu_3579_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_230_fu_3593_p0 = sext_ln151_237_fu_1765_p1;

assign mul_res_230_fu_3593_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_231_fu_3607_p0 = sext_ln151_239_fu_1793_p1;

assign mul_res_231_fu_3607_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_232_fu_3621_p0 = sext_ln151_241_fu_1821_p1;

assign mul_res_232_fu_3621_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_233_fu_3635_p0 = sext_ln151_242_fu_1849_p1;

assign mul_res_233_fu_3635_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_234_fu_3649_p0 = sext_ln151_244_fu_1877_p1;

assign mul_res_234_fu_3649_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_235_fu_3663_p0 = sext_ln151_246_fu_1905_p1;

assign mul_res_235_fu_3663_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_236_fu_3677_p0 = sext_ln151_248_fu_1933_p1;

assign mul_res_236_fu_3677_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_237_fu_3691_p0 = sext_ln151_250_fu_1961_p1;

assign mul_res_237_fu_3691_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_238_fu_3705_p0 = sext_ln151_252_fu_1989_p1;

assign mul_res_238_fu_3705_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_239_fu_3719_p0 = sext_ln151_253_fu_2017_p1;

assign mul_res_239_fu_3719_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_240_fu_3733_p0 = sext_ln151_255_fu_2045_p1;

assign mul_res_240_fu_3733_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_241_fu_3747_p0 = sext_ln151_257_fu_2073_p1;

assign mul_res_241_fu_3747_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_242_fu_3761_p0 = sext_ln151_259_fu_2101_p1;

assign mul_res_242_fu_3761_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_243_fu_3775_p0 = sext_ln151_261_fu_2129_p1;

assign mul_res_243_fu_3775_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_244_fu_3789_p0 = sext_ln151_263_fu_2157_p1;

assign mul_res_244_fu_3789_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_245_fu_3803_p0 = sext_ln151_264_fu_2185_p1;

assign mul_res_245_fu_3803_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_246_fu_3817_p0 = sext_ln151_266_fu_2213_p1;

assign mul_res_246_fu_3817_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_247_fu_3831_p0 = sext_ln151_268_fu_2241_p1;

assign mul_res_247_fu_3831_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_248_fu_3845_p0 = sext_ln151_270_fu_2269_p1;

assign mul_res_248_fu_3845_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_249_fu_3859_p0 = sext_ln151_272_fu_2297_p1;

assign mul_res_249_fu_3859_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_250_fu_3873_p0 = sext_ln151_274_fu_2325_p1;

assign mul_res_250_fu_3873_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_251_fu_3887_p0 = sext_ln151_275_fu_2353_p1;

assign mul_res_251_fu_3887_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_252_fu_3901_p0 = sext_ln151_277_fu_2381_p1;

assign mul_res_252_fu_3901_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_253_fu_3915_p0 = sext_ln151_279_fu_2409_p1;

assign mul_res_253_fu_3915_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_254_fu_3929_p0 = sext_ln151_281_fu_2437_p1;

assign mul_res_254_fu_3929_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_255_fu_3943_p0 = sext_ln151_283_fu_2465_p1;

assign mul_res_255_fu_3943_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_256_fu_3957_p0 = sext_ln151_285_fu_2493_p1;

assign mul_res_256_fu_3957_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_257_fu_3971_p0 = sext_ln151_286_fu_2521_p1;

assign mul_res_257_fu_3971_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_258_fu_3985_p0 = sext_ln151_288_fu_2549_p1;

assign mul_res_258_fu_3985_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_259_fu_3999_p0 = sext_ln151_290_fu_2577_p1;

assign mul_res_259_fu_3999_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_260_fu_4013_p0 = sext_ln151_292_fu_2605_p1;

assign mul_res_260_fu_4013_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_261_fu_4027_p0 = sext_ln151_294_fu_2633_p1;

assign mul_res_261_fu_4027_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_262_fu_4041_p0 = sext_ln151_296_fu_2661_p1;

assign mul_res_262_fu_4041_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_263_fu_4055_p0 = sext_ln151_297_fu_2689_p1;

assign mul_res_263_fu_4055_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_264_fu_4069_p0 = sext_ln151_299_fu_2717_p1;

assign mul_res_264_fu_4069_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_265_fu_4083_p0 = sext_ln151_301_fu_2745_p1;

assign mul_res_265_fu_4083_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_266_fu_4097_p0 = sext_ln151_303_fu_2773_p1;

assign mul_res_266_fu_4097_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_267_fu_4111_p0 = sext_ln151_305_fu_2801_p1;

assign mul_res_267_fu_4111_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_268_fu_4125_p0 = sext_ln151_307_fu_2829_p1;

assign mul_res_268_fu_4125_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_269_fu_4139_p0 = sext_ln151_308_fu_2857_p1;

assign mul_res_269_fu_4139_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_270_fu_4153_p0 = sext_ln151_310_fu_2885_p1;

assign mul_res_270_fu_4153_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_271_fu_4167_p0 = sext_ln151_312_fu_2913_p1;

assign mul_res_271_fu_4167_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_272_fu_4181_p0 = sext_ln151_314_fu_2941_p1;

assign mul_res_272_fu_4181_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_273_fu_4195_p0 = sext_ln151_316_fu_2969_p1;

assign mul_res_273_fu_4195_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_274_fu_4209_p0 = sext_ln151_318_fu_2997_p1;

assign mul_res_274_fu_4209_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_275_fu_4223_p0 = sext_ln151_319_fu_3025_p1;

assign mul_res_275_fu_4223_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_276_fu_4237_p0 = sext_ln151_321_fu_3053_p1;

assign mul_res_276_fu_4237_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_277_fu_4251_p0 = sext_ln151_323_fu_3081_p1;

assign mul_res_277_fu_4251_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_278_fu_4265_p0 = sext_ln151_325_fu_3109_p1;

assign mul_res_278_fu_4265_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_279_fu_4279_p0 = sext_ln151_327_fu_3137_p1;

assign mul_res_279_fu_4279_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_280_fu_4293_p0 = sext_ln151_329_fu_3165_p1;

assign mul_res_280_fu_4293_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_281_fu_4307_p0 = sext_ln151_330_fu_3193_p1;

assign mul_res_281_fu_4307_p1 = sext_ln151_339_fu_3351_p1;

assign mul_res_282_fu_4321_p0 = sext_ln151_332_fu_3221_p1;

assign mul_res_282_fu_4321_p1 = sext_ln151_340_fu_3369_p1;

assign mul_res_283_fu_4335_p0 = sext_ln151_334_fu_3249_p1;

assign mul_res_283_fu_4335_p1 = sext_ln151_341_fu_3387_p1;

assign mul_res_284_fu_4349_p0 = sext_ln151_336_fu_3277_p1;

assign mul_res_284_fu_4349_p1 = sext_ln151_342_fu_3405_p1;

assign mul_res_285_fu_4363_p0 = sext_ln151_337_fu_3305_p1;

assign mul_res_285_fu_4363_p1 = sext_ln151_343_fu_3423_p1;

assign mul_res_286_fu_4377_p0 = sext_ln151_338_fu_3333_p1;

assign mul_res_286_fu_4377_p1 = sext_ln151_344_fu_3441_p1;

assign mul_res_fu_1337_p0 = sext_ln151_204_fu_1325_p1;

assign mul_res_fu_1337_p1 = sext_ln151_fu_1321_p1;

assign or_ln121_fu_989_p2 = (icmp_ln121_reg_6913 | and_ln120_fu_977_p2);

assign select_ln120_fu_959_p3 = ((icmp_ln121_reg_6913[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln121_3_fu_1002_p3 = ((and_ln120_fu_977_p2[0:0] == 1'b1) ? add_ln121_fu_983_p2 : select_ln120_fu_959_p3);

assign select_ln121_4_fu_915_p3 = ((icmp_ln121_fu_903_p2[0:0] == 1'b1) ? 11'd1 : add_ln121_2_fu_909_p2);

assign select_ln121_fu_994_p3 = ((or_ln121_fu_989_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign select_ln126_24_fu_4537_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_91_reg_7039 : p_0_0_0_10408_fu_772);

assign select_ln126_25_fu_4543_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_90_reg_7033 : p_0_0_0_9406_fu_768);

assign select_ln126_26_fu_4549_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_89_reg_7027 : p_0_0_0_8404_fu_764);

assign select_ln126_27_fu_4555_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_88_reg_7021 : p_0_0_0_7402_fu_760);

assign select_ln126_28_fu_4561_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_87_reg_7015 : p_0_0_0_6400_fu_756);

assign select_ln126_29_fu_4567_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_86_reg_7009 : p_0_0_0_5398_fu_752);

assign select_ln126_30_fu_4573_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_85_reg_7003 : p_0_0_0_4396_fu_748);

assign select_ln126_31_fu_4579_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_84_reg_6997 : p_0_0_0_3394_fu_744);

assign select_ln126_32_fu_4585_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_83_reg_6991 : p_0_0_0_2392_fu_740);

assign select_ln126_33_fu_4591_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6985 : p_0_0_0_112390_fu_736);

assign select_ln126_34_fu_4597_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6979 : p_0_0_0388_fu_732);

assign select_ln126_35_fu_4603_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_4527_p1 : p_0_0_0_11386_fu_728);

assign select_ln126_36_fu_4610_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_91_reg_7039 : p_0_0_0_10384_fu_724);

assign select_ln126_37_fu_4616_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_90_reg_7033 : p_0_0_0_9382_fu_720);

assign select_ln126_38_fu_4622_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_89_reg_7027 : p_0_0_0_8380_fu_716);

assign select_ln126_39_fu_4628_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_88_reg_7021 : p_0_0_0_7378_fu_712);

assign select_ln126_40_fu_4634_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_87_reg_7015 : p_0_0_0_6376_fu_708);

assign select_ln126_41_fu_4640_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_86_reg_7009 : p_0_0_0_5374_fu_704);

assign select_ln126_42_fu_4646_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_85_reg_7003 : p_0_0_0_4372_fu_700);

assign select_ln126_43_fu_4652_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_84_reg_6997 : p_0_0_0_3370_fu_696);

assign select_ln126_44_fu_4658_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_83_reg_6991 : p_0_0_0_2368_fu_692);

assign select_ln126_45_fu_4664_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6985 : p_0_0_0_112366_fu_688);

assign select_ln126_46_fu_4670_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6979 : p_0_0_0364_fu_684);

assign select_ln126_fu_4530_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_4527_p1 : p_0_0_0_11410_fu_776);

assign sext_ln131_fu_4527_p1 = $signed(tmp_92_reg_7045);

assign sext_ln151_204_fu_1325_p1 = $signed(trunc_ln151_fu_1317_p1);

assign sext_ln151_205_fu_4676_p1 = mul_res_reg_7050;

assign sext_ln151_206_fu_1353_p1 = $signed(trunc_ln137_s_fu_1207_p4);

assign sext_ln151_207_fu_1357_p1 = $signed(tmp_93_fu_1343_p4);

assign sext_ln151_208_fu_4679_p1 = mul_res_144_reg_7055;

assign sext_ln151_209_fu_1385_p1 = $signed(trunc_ln137_11_fu_1217_p4);

assign sext_ln151_210_fu_1389_p1 = $signed(tmp_94_fu_1375_p4);

assign sext_ln151_211_fu_4682_p1 = mul_res_145_reg_7060;

assign sext_ln151_212_fu_1417_p1 = $signed(trunc_ln137_12_fu_1227_p4);

assign sext_ln151_213_fu_1421_p1 = $signed(tmp_95_fu_1407_p4);

assign sext_ln151_214_fu_4685_p1 = mul_res_146_reg_7065;

assign sext_ln151_215_fu_1449_p1 = $signed(trunc_ln137_13_fu_1237_p4);

assign sext_ln151_216_fu_1453_p1 = $signed(tmp_96_fu_1439_p4);

assign sext_ln151_217_fu_4688_p1 = mul_res_147_reg_7070;

assign sext_ln151_218_fu_1481_p1 = $signed(trunc_ln137_14_fu_1247_p4);

assign sext_ln151_219_fu_1485_p1 = $signed(tmp_97_fu_1471_p4);

assign sext_ln151_220_fu_1513_p1 = $signed(tmp_98_fu_1503_p4);

assign sext_ln151_221_fu_4746_p1 = mul_res_149_reg_7080;

assign sext_ln151_222_fu_1541_p1 = $signed(tmp_99_fu_1531_p4);

assign sext_ln151_223_fu_4749_p1 = mul_res_150_reg_7085;

assign sext_ln151_224_fu_1569_p1 = $signed(tmp_100_fu_1559_p4);

assign sext_ln151_225_fu_4752_p1 = mul_res_151_reg_7090;

assign sext_ln151_226_fu_1597_p1 = $signed(tmp_101_fu_1587_p4);

assign sext_ln151_227_fu_4755_p1 = mul_res_152_reg_7095;

assign sext_ln151_228_fu_1625_p1 = $signed(tmp_102_fu_1615_p4);

assign sext_ln151_229_fu_4758_p1 = mul_res_153_reg_7100;

assign sext_ln151_230_fu_1653_p1 = $signed(tmp_103_fu_1643_p4);

assign sext_ln151_231_fu_1681_p1 = $signed(tmp_104_fu_1671_p4);

assign sext_ln151_232_fu_4816_p1 = mul_res_155_reg_7110;

assign sext_ln151_233_fu_1709_p1 = $signed(tmp_105_fu_1699_p4);

assign sext_ln151_234_fu_4819_p1 = mul_res_156_reg_7115;

assign sext_ln151_235_fu_1737_p1 = $signed(tmp_106_fu_1727_p4);

assign sext_ln151_236_fu_4822_p1 = mul_res_157_reg_7120;

assign sext_ln151_237_fu_1765_p1 = $signed(tmp_107_fu_1755_p4);

assign sext_ln151_238_fu_4825_p1 = mul_res_158_reg_7125;

assign sext_ln151_239_fu_1793_p1 = $signed(tmp_108_fu_1783_p4);

assign sext_ln151_240_fu_4828_p1 = mul_res_159_reg_7130;

assign sext_ln151_241_fu_1821_p1 = $signed(tmp_109_fu_1811_p4);

assign sext_ln151_242_fu_1849_p1 = $signed(tmp_110_fu_1839_p4);

assign sext_ln151_243_fu_4886_p1 = mul_res_161_reg_7140;

assign sext_ln151_244_fu_1877_p1 = $signed(tmp_111_fu_1867_p4);

assign sext_ln151_245_fu_4889_p1 = mul_res_162_reg_7145;

assign sext_ln151_246_fu_1905_p1 = $signed(tmp_112_fu_1895_p4);

assign sext_ln151_247_fu_4892_p1 = mul_res_163_reg_7150;

assign sext_ln151_248_fu_1933_p1 = $signed(tmp_113_fu_1923_p4);

assign sext_ln151_249_fu_4895_p1 = mul_res_164_reg_7155;

assign sext_ln151_250_fu_1961_p1 = $signed(tmp_114_fu_1951_p4);

assign sext_ln151_251_fu_4898_p1 = mul_res_165_reg_7160;

assign sext_ln151_252_fu_1989_p1 = $signed(tmp_115_fu_1979_p4);

assign sext_ln151_253_fu_2017_p1 = $signed(tmp_116_fu_2007_p4);

assign sext_ln151_254_fu_4956_p1 = mul_res_167_reg_7170;

assign sext_ln151_255_fu_2045_p1 = $signed(tmp_117_fu_2035_p4);

assign sext_ln151_256_fu_4959_p1 = mul_res_168_reg_7175;

assign sext_ln151_257_fu_2073_p1 = $signed(tmp_118_fu_2063_p4);

assign sext_ln151_258_fu_4962_p1 = mul_res_169_reg_7180;

assign sext_ln151_259_fu_2101_p1 = $signed(tmp_119_fu_2091_p4);

assign sext_ln151_260_fu_4965_p1 = mul_res_170_reg_7185;

assign sext_ln151_261_fu_2129_p1 = $signed(tmp_120_fu_2119_p4);

assign sext_ln151_262_fu_4968_p1 = mul_res_171_reg_7190;

assign sext_ln151_263_fu_2157_p1 = $signed(tmp_121_fu_2147_p4);

assign sext_ln151_264_fu_2185_p1 = $signed(tmp_122_fu_2175_p4);

assign sext_ln151_265_fu_5026_p1 = mul_res_173_reg_7200;

assign sext_ln151_266_fu_2213_p1 = $signed(tmp_123_fu_2203_p4);

assign sext_ln151_267_fu_5029_p1 = mul_res_174_reg_7205;

assign sext_ln151_268_fu_2241_p1 = $signed(tmp_124_fu_2231_p4);

assign sext_ln151_269_fu_5032_p1 = mul_res_175_reg_7210;

assign sext_ln151_270_fu_2269_p1 = $signed(tmp_125_fu_2259_p4);

assign sext_ln151_271_fu_5035_p1 = mul_res_176_reg_7215;

assign sext_ln151_272_fu_2297_p1 = $signed(tmp_126_fu_2287_p4);

assign sext_ln151_273_fu_5038_p1 = mul_res_177_reg_7220;

assign sext_ln151_274_fu_2325_p1 = $signed(tmp_127_fu_2315_p4);

assign sext_ln151_275_fu_2353_p1 = $signed(tmp_128_fu_2343_p4);

assign sext_ln151_276_fu_5096_p1 = mul_res_179_reg_7230;

assign sext_ln151_277_fu_2381_p1 = $signed(tmp_129_fu_2371_p4);

assign sext_ln151_278_fu_5099_p1 = mul_res_180_reg_7235;

assign sext_ln151_279_fu_2409_p1 = $signed(tmp_130_fu_2399_p4);

assign sext_ln151_280_fu_5102_p1 = mul_res_181_reg_7240;

assign sext_ln151_281_fu_2437_p1 = $signed(tmp_131_fu_2427_p4);

assign sext_ln151_282_fu_5105_p1 = mul_res_182_reg_7245;

assign sext_ln151_283_fu_2465_p1 = $signed(tmp_132_fu_2455_p4);

assign sext_ln151_284_fu_5108_p1 = mul_res_183_reg_7250;

assign sext_ln151_285_fu_2493_p1 = $signed(tmp_133_fu_2483_p4);

assign sext_ln151_286_fu_2521_p1 = $signed(tmp_134_fu_2511_p4);

assign sext_ln151_287_fu_5166_p1 = mul_res_185_reg_7260;

assign sext_ln151_288_fu_2549_p1 = $signed(tmp_135_fu_2539_p4);

assign sext_ln151_289_fu_5169_p1 = mul_res_186_reg_7265;

assign sext_ln151_290_fu_2577_p1 = $signed(tmp_136_fu_2567_p4);

assign sext_ln151_291_fu_5172_p1 = mul_res_187_reg_7270;

assign sext_ln151_292_fu_2605_p1 = $signed(tmp_137_fu_2595_p4);

assign sext_ln151_293_fu_5175_p1 = mul_res_188_reg_7275;

assign sext_ln151_294_fu_2633_p1 = $signed(tmp_138_fu_2623_p4);

assign sext_ln151_295_fu_5178_p1 = mul_res_189_reg_7280;

assign sext_ln151_296_fu_2661_p1 = $signed(tmp_139_fu_2651_p4);

assign sext_ln151_297_fu_2689_p1 = $signed(tmp_140_fu_2679_p4);

assign sext_ln151_298_fu_5236_p1 = mul_res_191_reg_7290;

assign sext_ln151_299_fu_2717_p1 = $signed(tmp_141_fu_2707_p4);

assign sext_ln151_300_fu_5239_p1 = mul_res_192_reg_7295;

assign sext_ln151_301_fu_2745_p1 = $signed(tmp_142_fu_2735_p4);

assign sext_ln151_302_fu_5242_p1 = mul_res_193_reg_7300;

assign sext_ln151_303_fu_2773_p1 = $signed(tmp_143_fu_2763_p4);

assign sext_ln151_304_fu_5245_p1 = mul_res_194_reg_7305;

assign sext_ln151_305_fu_2801_p1 = $signed(tmp_144_fu_2791_p4);

assign sext_ln151_306_fu_5248_p1 = mul_res_195_reg_7310;

assign sext_ln151_307_fu_2829_p1 = $signed(tmp_145_fu_2819_p4);

assign sext_ln151_308_fu_2857_p1 = $signed(tmp_146_fu_2847_p4);

assign sext_ln151_309_fu_5306_p1 = mul_res_197_reg_7320;

assign sext_ln151_310_fu_2885_p1 = $signed(tmp_147_fu_2875_p4);

assign sext_ln151_311_fu_5309_p1 = mul_res_198_reg_7325;

assign sext_ln151_312_fu_2913_p1 = $signed(tmp_148_fu_2903_p4);

assign sext_ln151_313_fu_5312_p1 = mul_res_199_reg_7330;

assign sext_ln151_314_fu_2941_p1 = $signed(tmp_149_fu_2931_p4);

assign sext_ln151_315_fu_5315_p1 = mul_res_200_reg_7335;

assign sext_ln151_316_fu_2969_p1 = $signed(tmp_150_fu_2959_p4);

assign sext_ln151_317_fu_5318_p1 = mul_res_201_reg_7340;

assign sext_ln151_318_fu_2997_p1 = $signed(tmp_151_fu_2987_p4);

assign sext_ln151_319_fu_3025_p1 = $signed(tmp_152_fu_3015_p4);

assign sext_ln151_320_fu_5376_p1 = mul_res_203_reg_7350;

assign sext_ln151_321_fu_3053_p1 = $signed(tmp_153_fu_3043_p4);

assign sext_ln151_322_fu_5379_p1 = mul_res_204_reg_7355;

assign sext_ln151_323_fu_3081_p1 = $signed(tmp_154_fu_3071_p4);

assign sext_ln151_324_fu_5382_p1 = mul_res_205_reg_7360;

assign sext_ln151_325_fu_3109_p1 = $signed(tmp_155_fu_3099_p4);

assign sext_ln151_326_fu_5385_p1 = mul_res_206_reg_7365;

assign sext_ln151_327_fu_3137_p1 = $signed(tmp_156_fu_3127_p4);

assign sext_ln151_328_fu_5388_p1 = mul_res_207_reg_7370;

assign sext_ln151_329_fu_3165_p1 = $signed(tmp_157_fu_3155_p4);

assign sext_ln151_330_fu_3193_p1 = $signed(tmp_158_fu_3183_p4);

assign sext_ln151_331_fu_5446_p1 = mul_res_209_reg_7380;

assign sext_ln151_332_fu_3221_p1 = $signed(tmp_159_fu_3211_p4);

assign sext_ln151_333_fu_5449_p1 = mul_res_210_reg_7385;

assign sext_ln151_334_fu_3249_p1 = $signed(tmp_160_fu_3239_p4);

assign sext_ln151_335_fu_5452_p1 = mul_res_211_reg_7390;

assign sext_ln151_336_fu_3277_p1 = $signed(tmp_161_fu_3267_p4);

assign sext_ln151_337_fu_3305_p1 = $signed(tmp_162_fu_3295_p4);

assign sext_ln151_338_fu_3333_p1 = $signed(tmp_163_fu_3323_p4);

assign sext_ln151_339_fu_3351_p1 = $signed(trunc_ln137_15_fu_1257_p4);

assign sext_ln151_340_fu_3369_p1 = $signed(trunc_ln137_16_fu_1267_p4);

assign sext_ln151_341_fu_3387_p1 = $signed(trunc_ln137_17_fu_1277_p4);

assign sext_ln151_342_fu_3405_p1 = $signed(trunc_ln137_18_fu_1287_p4);

assign sext_ln151_343_fu_3423_p1 = $signed(trunc_ln137_19_fu_1297_p4);

assign sext_ln151_344_fu_3441_p1 = $signed(trunc_ln137_20_fu_1307_p4);

assign sext_ln151_345_fu_5455_p1 = mul_res_212_reg_7395;

assign sext_ln151_346_fu_5458_p1 = mul_res_213_reg_7400;

assign sext_ln151_347_fu_5516_p1 = mul_res_215_reg_7410;

assign sext_ln151_348_fu_5519_p1 = mul_res_216_reg_7415;

assign sext_ln151_349_fu_5522_p1 = mul_res_217_reg_7420;

assign sext_ln151_350_fu_5525_p1 = mul_res_218_reg_7425;

assign sext_ln151_351_fu_5528_p1 = mul_res_219_reg_7430;

assign sext_ln151_352_fu_5586_p1 = mul_res_221_reg_7440;

assign sext_ln151_353_fu_5589_p1 = mul_res_222_reg_7445;

assign sext_ln151_354_fu_5592_p1 = mul_res_223_reg_7450;

assign sext_ln151_355_fu_5595_p1 = mul_res_224_reg_7455;

assign sext_ln151_356_fu_5598_p1 = mul_res_225_reg_7460;

assign sext_ln151_357_fu_5656_p1 = mul_res_227_reg_7470;

assign sext_ln151_358_fu_5659_p1 = mul_res_228_reg_7475;

assign sext_ln151_359_fu_5662_p1 = mul_res_229_reg_7480;

assign sext_ln151_360_fu_5665_p1 = mul_res_230_reg_7485;

assign sext_ln151_361_fu_5668_p1 = mul_res_231_reg_7490;

assign sext_ln151_362_fu_5726_p1 = mul_res_233_reg_7500;

assign sext_ln151_363_fu_5729_p1 = mul_res_234_reg_7505;

assign sext_ln151_364_fu_5732_p1 = mul_res_235_reg_7510;

assign sext_ln151_365_fu_5735_p1 = mul_res_236_reg_7515;

assign sext_ln151_366_fu_5738_p1 = mul_res_237_reg_7520;

assign sext_ln151_367_fu_5796_p1 = mul_res_239_reg_7530;

assign sext_ln151_368_fu_5799_p1 = mul_res_240_reg_7535;

assign sext_ln151_369_fu_5802_p1 = mul_res_241_reg_7540;

assign sext_ln151_370_fu_5805_p1 = mul_res_242_reg_7545;

assign sext_ln151_371_fu_5808_p1 = mul_res_243_reg_7550;

assign sext_ln151_372_fu_5866_p1 = mul_res_245_reg_7560;

assign sext_ln151_373_fu_5869_p1 = mul_res_246_reg_7565;

assign sext_ln151_374_fu_5872_p1 = mul_res_247_reg_7570;

assign sext_ln151_375_fu_5875_p1 = mul_res_248_reg_7575;

assign sext_ln151_376_fu_5878_p1 = mul_res_249_reg_7580;

assign sext_ln151_377_fu_5936_p1 = mul_res_251_reg_7590;

assign sext_ln151_378_fu_5939_p1 = mul_res_252_reg_7595;

assign sext_ln151_379_fu_5942_p1 = mul_res_253_reg_7600;

assign sext_ln151_380_fu_5945_p1 = mul_res_254_reg_7605;

assign sext_ln151_381_fu_5948_p1 = mul_res_255_reg_7610;

assign sext_ln151_382_fu_6006_p1 = mul_res_257_reg_7620;

assign sext_ln151_383_fu_6009_p1 = mul_res_258_reg_7625;

assign sext_ln151_384_fu_6012_p1 = mul_res_259_reg_7630;

assign sext_ln151_385_fu_6015_p1 = mul_res_260_reg_7635;

assign sext_ln151_386_fu_6018_p1 = mul_res_261_reg_7640;

assign sext_ln151_387_fu_6076_p1 = mul_res_263_reg_7650;

assign sext_ln151_388_fu_6079_p1 = mul_res_264_reg_7655;

assign sext_ln151_389_fu_6082_p1 = mul_res_265_reg_7660;

assign sext_ln151_390_fu_6085_p1 = mul_res_266_reg_7665;

assign sext_ln151_391_fu_6088_p1 = mul_res_267_reg_7670;

assign sext_ln151_392_fu_6146_p1 = mul_res_269_reg_7680;

assign sext_ln151_393_fu_6149_p1 = mul_res_270_reg_7685;

assign sext_ln151_394_fu_6152_p1 = mul_res_271_reg_7690;

assign sext_ln151_395_fu_6155_p1 = mul_res_272_reg_7695;

assign sext_ln151_396_fu_6158_p1 = mul_res_273_reg_7700;

assign sext_ln151_397_fu_6216_p1 = mul_res_275_reg_7710;

assign sext_ln151_398_fu_6219_p1 = mul_res_276_reg_7715;

assign sext_ln151_399_fu_6222_p1 = mul_res_277_reg_7720;

assign sext_ln151_400_fu_6225_p1 = mul_res_278_reg_7725;

assign sext_ln151_401_fu_6228_p1 = mul_res_279_reg_7730;

assign sext_ln151_402_fu_6286_p1 = mul_res_281_reg_7740;

assign sext_ln151_403_fu_6289_p1 = mul_res_282_reg_7745;

assign sext_ln151_404_fu_6292_p1 = mul_res_283_reg_7750;

assign sext_ln151_405_fu_6295_p1 = mul_res_284_reg_7755;

assign sext_ln151_406_fu_6298_p1 = mul_res_285_reg_7760;

assign sext_ln151_fu_1321_p1 = $signed(trunc_ln137_fu_1203_p1);

assign sext_ln153_120_fu_4700_p1 = $signed(add_ln153_fu_4694_p2);

assign sext_ln153_121_fu_4710_p1 = $signed(add_ln153_145_fu_4704_p2);

assign sext_ln153_122_fu_4720_p1 = $signed(add_ln153_146_fu_4714_p2);

assign sext_ln153_123_fu_4730_p1 = $signed(add_ln153_147_fu_4724_p2);

assign sext_ln153_124_fu_4761_p1 = mul_res_154_reg_7105;

assign sext_ln153_125_fu_4770_p1 = $signed(add_ln153_149_fu_4764_p2);

assign sext_ln153_126_fu_4780_p1 = $signed(add_ln153_151_fu_4774_p2);

assign sext_ln153_127_fu_4790_p1 = $signed(add_ln153_152_fu_4784_p2);

assign sext_ln153_128_fu_4800_p1 = $signed(add_ln153_153_fu_4794_p2);

assign sext_ln153_129_fu_4831_p1 = mul_res_160_reg_7135;

assign sext_ln153_130_fu_4840_p1 = $signed(add_ln153_155_fu_4834_p2);

assign sext_ln153_131_fu_4850_p1 = $signed(add_ln153_157_fu_4844_p2);

assign sext_ln153_132_fu_4860_p1 = $signed(add_ln153_158_fu_4854_p2);

assign sext_ln153_133_fu_4870_p1 = $signed(add_ln153_159_fu_4864_p2);

assign sext_ln153_134_fu_4901_p1 = mul_res_166_reg_7165;

assign sext_ln153_135_fu_4910_p1 = $signed(add_ln153_161_fu_4904_p2);

assign sext_ln153_136_fu_4920_p1 = $signed(add_ln153_163_fu_4914_p2);

assign sext_ln153_137_fu_4930_p1 = $signed(add_ln153_164_fu_4924_p2);

assign sext_ln153_138_fu_4940_p1 = $signed(add_ln153_165_fu_4934_p2);

assign sext_ln153_139_fu_4971_p1 = mul_res_172_reg_7195;

assign sext_ln153_140_fu_4980_p1 = $signed(add_ln153_167_fu_4974_p2);

assign sext_ln153_141_fu_4990_p1 = $signed(add_ln153_169_fu_4984_p2);

assign sext_ln153_142_fu_5000_p1 = $signed(add_ln153_170_fu_4994_p2);

assign sext_ln153_143_fu_5010_p1 = $signed(add_ln153_171_fu_5004_p2);

assign sext_ln153_144_fu_5041_p1 = mul_res_178_reg_7225;

assign sext_ln153_145_fu_5050_p1 = $signed(add_ln153_173_fu_5044_p2);

assign sext_ln153_146_fu_5060_p1 = $signed(add_ln153_175_fu_5054_p2);

assign sext_ln153_147_fu_5070_p1 = $signed(add_ln153_176_fu_5064_p2);

assign sext_ln153_148_fu_5080_p1 = $signed(add_ln153_177_fu_5074_p2);

assign sext_ln153_149_fu_5111_p1 = mul_res_184_reg_7255;

assign sext_ln153_150_fu_5120_p1 = $signed(add_ln153_179_fu_5114_p2);

assign sext_ln153_151_fu_5130_p1 = $signed(add_ln153_181_fu_5124_p2);

assign sext_ln153_152_fu_5140_p1 = $signed(add_ln153_182_fu_5134_p2);

assign sext_ln153_153_fu_5150_p1 = $signed(add_ln153_183_fu_5144_p2);

assign sext_ln153_154_fu_5181_p1 = mul_res_190_reg_7285;

assign sext_ln153_155_fu_5190_p1 = $signed(add_ln153_185_fu_5184_p2);

assign sext_ln153_156_fu_5200_p1 = $signed(add_ln153_187_fu_5194_p2);

assign sext_ln153_157_fu_5210_p1 = $signed(add_ln153_188_fu_5204_p2);

assign sext_ln153_158_fu_5220_p1 = $signed(add_ln153_189_fu_5214_p2);

assign sext_ln153_159_fu_5251_p1 = mul_res_196_reg_7315;

assign sext_ln153_160_fu_5260_p1 = $signed(add_ln153_191_fu_5254_p2);

assign sext_ln153_161_fu_5270_p1 = $signed(add_ln153_193_fu_5264_p2);

assign sext_ln153_162_fu_5280_p1 = $signed(add_ln153_194_fu_5274_p2);

assign sext_ln153_163_fu_5290_p1 = $signed(add_ln153_195_fu_5284_p2);

assign sext_ln153_164_fu_5321_p1 = mul_res_202_reg_7345;

assign sext_ln153_165_fu_5330_p1 = $signed(add_ln153_197_fu_5324_p2);

assign sext_ln153_166_fu_5340_p1 = $signed(add_ln153_199_fu_5334_p2);

assign sext_ln153_167_fu_5350_p1 = $signed(add_ln153_200_fu_5344_p2);

assign sext_ln153_168_fu_5360_p1 = $signed(add_ln153_201_fu_5354_p2);

assign sext_ln153_169_fu_5391_p1 = mul_res_208_reg_7375;

assign sext_ln153_170_fu_5400_p1 = $signed(add_ln153_203_fu_5394_p2);

assign sext_ln153_171_fu_5416_p1 = $signed(add_ln153_205_fu_5410_p2);

assign sext_ln153_172_fu_5426_p1 = $signed(add_ln153_206_fu_5420_p2);

assign sext_ln153_173_fu_5436_p1 = $signed(add_ln153_207_fu_5430_p2);

assign sext_ln153_174_fu_5461_p1 = mul_res_214_reg_7405;

assign sext_ln153_175_fu_5470_p1 = $signed(add_ln153_209_fu_5464_p2);

assign sext_ln153_176_fu_5486_p1 = $signed(add_ln153_211_fu_5480_p2);

assign sext_ln153_177_fu_5496_p1 = $signed(add_ln153_212_fu_5490_p2);

assign sext_ln153_178_fu_5506_p1 = $signed(add_ln153_213_fu_5500_p2);

assign sext_ln153_179_fu_5531_p1 = mul_res_220_reg_7435;

assign sext_ln153_180_fu_5540_p1 = $signed(add_ln153_215_fu_5534_p2);

assign sext_ln153_181_fu_5556_p1 = $signed(add_ln153_217_fu_5550_p2);

assign sext_ln153_182_fu_5566_p1 = $signed(add_ln153_218_fu_5560_p2);

assign sext_ln153_183_fu_5576_p1 = $signed(add_ln153_219_fu_5570_p2);

assign sext_ln153_184_fu_5601_p1 = mul_res_226_reg_7465;

assign sext_ln153_185_fu_5610_p1 = $signed(add_ln153_221_fu_5604_p2);

assign sext_ln153_186_fu_5626_p1 = $signed(add_ln153_223_fu_5620_p2);

assign sext_ln153_187_fu_5636_p1 = $signed(add_ln153_224_fu_5630_p2);

assign sext_ln153_188_fu_5646_p1 = $signed(add_ln153_225_fu_5640_p2);

assign sext_ln153_189_fu_5671_p1 = mul_res_232_reg_7495;

assign sext_ln153_190_fu_5680_p1 = $signed(add_ln153_227_fu_5674_p2);

assign sext_ln153_191_fu_5696_p1 = $signed(add_ln153_229_fu_5690_p2);

assign sext_ln153_192_fu_5706_p1 = $signed(add_ln153_230_fu_5700_p2);

assign sext_ln153_193_fu_5716_p1 = $signed(add_ln153_231_fu_5710_p2);

assign sext_ln153_194_fu_5741_p1 = mul_res_238_reg_7525;

assign sext_ln153_195_fu_5750_p1 = $signed(add_ln153_233_fu_5744_p2);

assign sext_ln153_196_fu_5766_p1 = $signed(add_ln153_235_fu_5760_p2);

assign sext_ln153_197_fu_5776_p1 = $signed(add_ln153_236_fu_5770_p2);

assign sext_ln153_198_fu_5786_p1 = $signed(add_ln153_237_fu_5780_p2);

assign sext_ln153_199_fu_5811_p1 = mul_res_244_reg_7555;

assign sext_ln153_200_fu_5820_p1 = $signed(add_ln153_239_fu_5814_p2);

assign sext_ln153_201_fu_5836_p1 = $signed(add_ln153_241_fu_5830_p2);

assign sext_ln153_202_fu_5846_p1 = $signed(add_ln153_242_fu_5840_p2);

assign sext_ln153_203_fu_5856_p1 = $signed(add_ln153_243_fu_5850_p2);

assign sext_ln153_204_fu_5881_p1 = mul_res_250_reg_7585;

assign sext_ln153_205_fu_5890_p1 = $signed(add_ln153_245_fu_5884_p2);

assign sext_ln153_206_fu_5906_p1 = $signed(add_ln153_247_fu_5900_p2);

assign sext_ln153_207_fu_5916_p1 = $signed(add_ln153_248_fu_5910_p2);

assign sext_ln153_208_fu_5926_p1 = $signed(add_ln153_249_fu_5920_p2);

assign sext_ln153_209_fu_5951_p1 = mul_res_256_reg_7615;

assign sext_ln153_210_fu_5960_p1 = $signed(add_ln153_251_fu_5954_p2);

assign sext_ln153_211_fu_5976_p1 = $signed(add_ln153_253_fu_5970_p2);

assign sext_ln153_212_fu_5986_p1 = $signed(add_ln153_254_fu_5980_p2);

assign sext_ln153_213_fu_5996_p1 = $signed(add_ln153_255_fu_5990_p2);

assign sext_ln153_214_fu_6021_p1 = mul_res_262_reg_7645;

assign sext_ln153_215_fu_6030_p1 = $signed(add_ln153_257_fu_6024_p2);

assign sext_ln153_216_fu_6046_p1 = $signed(add_ln153_259_fu_6040_p2);

assign sext_ln153_217_fu_6056_p1 = $signed(add_ln153_260_fu_6050_p2);

assign sext_ln153_218_fu_6066_p1 = $signed(add_ln153_261_fu_6060_p2);

assign sext_ln153_219_fu_6091_p1 = mul_res_268_reg_7675;

assign sext_ln153_220_fu_6100_p1 = $signed(add_ln153_263_fu_6094_p2);

assign sext_ln153_221_fu_6116_p1 = $signed(add_ln153_265_fu_6110_p2);

assign sext_ln153_222_fu_6126_p1 = $signed(add_ln153_266_fu_6120_p2);

assign sext_ln153_223_fu_6136_p1 = $signed(add_ln153_267_fu_6130_p2);

assign sext_ln153_224_fu_6161_p1 = mul_res_274_reg_7705;

assign sext_ln153_225_fu_6170_p1 = $signed(add_ln153_269_fu_6164_p2);

assign sext_ln153_226_fu_6186_p1 = $signed(add_ln153_271_fu_6180_p2);

assign sext_ln153_227_fu_6196_p1 = $signed(add_ln153_272_fu_6190_p2);

assign sext_ln153_228_fu_6206_p1 = $signed(add_ln153_273_fu_6200_p2);

assign sext_ln153_229_fu_6231_p1 = mul_res_280_reg_7735;

assign sext_ln153_230_fu_6240_p1 = $signed(add_ln153_275_fu_6234_p2);

assign sext_ln153_231_fu_6256_p1 = $signed(add_ln153_277_fu_6250_p2);

assign sext_ln153_232_fu_6266_p1 = $signed(add_ln153_278_fu_6260_p2);

assign sext_ln153_233_fu_6276_p1 = $signed(add_ln153_279_fu_6270_p2);

assign sext_ln153_234_fu_6301_p1 = mul_res_286_reg_7765;

assign sext_ln153_235_fu_6310_p1 = $signed(add_ln153_281_fu_6304_p2);

assign sext_ln153_236_fu_6326_p1 = $signed(add_ln153_283_fu_6320_p2);

assign sext_ln153_237_fu_6336_p1 = $signed(add_ln153_284_fu_6330_p2);

assign sext_ln153_238_fu_6346_p1 = $signed(add_ln153_285_fu_6340_p2);

assign sext_ln153_fu_4691_p1 = mul_res_148_reg_7075;

assign start_out = real_start;

assign tmp_100_fu_1559_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[26:24]}};

assign tmp_101_fu_1587_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[29:27]}};

assign tmp_102_fu_1615_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[32:30]}};

assign tmp_103_fu_1643_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[35:33]}};

assign tmp_104_fu_1671_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[38:36]}};

assign tmp_105_fu_1699_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[41:39]}};

assign tmp_106_fu_1727_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[44:42]}};

assign tmp_107_fu_1755_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[47:45]}};

assign tmp_108_fu_1783_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[50:48]}};

assign tmp_109_fu_1811_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[53:51]}};

assign tmp_110_fu_1839_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[56:54]}};

assign tmp_111_fu_1867_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[59:57]}};

assign tmp_112_fu_1895_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[62:60]}};

assign tmp_113_fu_1923_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[65:63]}};

assign tmp_114_fu_1951_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[68:66]}};

assign tmp_115_fu_1979_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[71:69]}};

assign tmp_116_fu_2007_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[74:72]}};

assign tmp_117_fu_2035_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[77:75]}};

assign tmp_118_fu_2063_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[80:78]}};

assign tmp_119_fu_2091_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[83:81]}};

assign tmp_120_fu_2119_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[86:84]}};

assign tmp_121_fu_2147_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[89:87]}};

assign tmp_122_fu_2175_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[92:90]}};

assign tmp_123_fu_2203_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[95:93]}};

assign tmp_124_fu_2231_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[98:96]}};

assign tmp_125_fu_2259_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[101:99]}};

assign tmp_126_fu_2287_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[104:102]}};

assign tmp_127_fu_2315_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[107:105]}};

assign tmp_128_fu_2343_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[110:108]}};

assign tmp_129_fu_2371_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[113:111]}};

assign tmp_130_fu_2399_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[116:114]}};

assign tmp_131_fu_2427_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[119:117]}};

assign tmp_132_fu_2455_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[122:120]}};

assign tmp_133_fu_2483_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[125:123]}};

assign tmp_134_fu_2511_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[128:126]}};

assign tmp_135_fu_2539_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[131:129]}};

assign tmp_136_fu_2567_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[134:132]}};

assign tmp_137_fu_2595_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[137:135]}};

assign tmp_138_fu_2623_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[140:138]}};

assign tmp_139_fu_2651_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[143:141]}};

assign tmp_140_fu_2679_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[146:144]}};

assign tmp_141_fu_2707_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[149:147]}};

assign tmp_142_fu_2735_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[152:150]}};

assign tmp_143_fu_2763_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[155:153]}};

assign tmp_144_fu_2791_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[158:156]}};

assign tmp_145_fu_2819_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[161:159]}};

assign tmp_146_fu_2847_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[164:162]}};

assign tmp_147_fu_2875_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[167:165]}};

assign tmp_148_fu_2903_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[170:168]}};

assign tmp_149_fu_2931_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[173:171]}};

assign tmp_150_fu_2959_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[176:174]}};

assign tmp_151_fu_2987_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[179:177]}};

assign tmp_152_fu_3015_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[182:180]}};

assign tmp_153_fu_3043_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[185:183]}};

assign tmp_154_fu_3071_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[188:186]}};

assign tmp_155_fu_3099_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[191:189]}};

assign tmp_156_fu_3127_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[194:192]}};

assign tmp_157_fu_3155_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[197:195]}};

assign tmp_158_fu_3183_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[200:198]}};

assign tmp_159_fu_3211_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[203:201]}};

assign tmp_160_fu_3239_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[206:204]}};

assign tmp_161_fu_3267_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[209:207]}};

assign tmp_162_fu_3295_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[212:210]}};

assign tmp_163_fu_3323_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[215:213]}};

assign tmp_38_fu_1048_p3 = {{trunc_ln121_reg_6932}, {5'd0}};

assign tmp_93_fu_1343_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[5:3]}};

assign tmp_94_fu_1375_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[8:6]}};

assign tmp_95_fu_1407_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[11:9]}};

assign tmp_96_fu_1439_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[14:12]}};

assign tmp_97_fu_1471_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[17:15]}};

assign tmp_98_fu_1503_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[20:18]}};

assign tmp_99_fu_1531_p4 = {{attn_inst_matmul_gen_v_weight_arr_660_q0[23:21]}};

assign trunc_ln121_fu_1010_p1 = select_ln121_3_fu_1002_p3[3:0];

assign trunc_ln131_fu_1087_p1 = attn_inst_matmul_gen_v_bias_arr_661_q0[9:0];

assign trunc_ln137_11_fu_1217_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln137_12_fu_1227_p4 = {{cache_window_sm_dout[11:9]}};

assign trunc_ln137_13_fu_1237_p4 = {{cache_window_sm_dout[14:12]}};

assign trunc_ln137_14_fu_1247_p4 = {{cache_window_sm_dout[17:15]}};

assign trunc_ln137_15_fu_1257_p4 = {{cache_window_sm_dout[20:18]}};

assign trunc_ln137_16_fu_1267_p4 = {{cache_window_sm_dout[23:21]}};

assign trunc_ln137_17_fu_1277_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln137_18_fu_1287_p4 = {{cache_window_sm_dout[29:27]}};

assign trunc_ln137_19_fu_1297_p4 = {{cache_window_sm_dout[32:30]}};

assign trunc_ln137_20_fu_1307_p4 = {{cache_window_sm_dout[35:33]}};

assign trunc_ln137_fu_1203_p1 = cache_window_sm_dout[2:0];

assign trunc_ln137_s_fu_1207_p4 = {{cache_window_sm_dout[5:3]}};

assign trunc_ln151_fu_1317_p1 = attn_inst_matmul_gen_v_weight_arr_660_q0[2:0];

assign xor_ln120_fu_966_p2 = (icmp_ln121_reg_6913 ^ 1'd1);

assign zext_ln121_fu_1044_p1 = select_ln121_3_reg_6927;

assign zext_ln151_2_fu_1068_p1 = add_ln151_fu_1062_p2;

assign zext_ln151_fu_1059_p1 = select_ln121_reg_6920;

endmodule //ATTN11_matmul_step2_mac_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_matmul_step2_mac_48 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cache_window_sm_dout,
        cache_window_sm_num_data_valid,
        cache_window_sm_fifo_cap,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_num_data_valid,
        mac_sm_fifo_cap,
        mac_sm_full_n,
        mac_sm_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [35:0] cache_window_sm_dout;
input  [2:0] cache_window_sm_num_data_valid;
input  [2:0] cache_window_sm_fifo_cap;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [239:0] mac_sm_din;
input  [2:0] mac_sm_num_data_valid;
input  [2:0] mac_sm_fifo_cap;
input   mac_sm_full_n;
output   mac_sm_write;
output   start_out;
output   start_write;

reg ap_idle;
reg cache_window_sm_read;
reg mac_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln161_reg_6975;
reg   [0:0] icmp_ln161_reg_6975_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln120_fu_897_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] attn_inst_matmul_gen_k_bias_arr_659_address0;
reg    attn_inst_matmul_gen_k_bias_arr_659_ce0;
wire   [116:0] attn_inst_matmul_gen_k_bias_arr_659_q0;
wire   [8:0] attn_inst_matmul_gen_k_weight_arr_658_address0;
reg    attn_inst_matmul_gen_k_weight_arr_658_ce0;
wire   [215:0] attn_inst_matmul_gen_k_weight_arr_658_q0;
reg    cache_window_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    mac_sm_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln121_fu_903_p2;
reg   [0:0] icmp_ln121_reg_6913;
wire   [5:0] select_ln121_fu_994_p3;
reg   [5:0] select_ln121_reg_6920;
wire   [4:0] select_ln121_1_fu_1002_p3;
reg   [4:0] select_ln121_1_reg_6927;
wire   [3:0] trunc_ln121_fu_1010_p1;
reg   [3:0] trunc_ln121_reg_6932;
wire   [0:0] icmp_ln126_fu_1073_p2;
reg   [0:0] icmp_ln126_reg_6947;
reg   [0:0] icmp_ln126_reg_6947_pp0_iter3_reg;
wire   [0:0] icmp_ln161_fu_1082_p2;
reg   [0:0] icmp_ln161_reg_6975_pp0_iter3_reg;
wire   [9:0] trunc_ln131_fu_1087_p1;
reg   [9:0] trunc_ln131_reg_6979;
reg   [9:0] tmp_s_reg_6985;
reg   [9:0] tmp_1_reg_6991;
reg   [9:0] tmp_2_reg_6997;
reg   [9:0] tmp_3_reg_7003;
reg   [9:0] tmp_4_reg_7009;
reg   [9:0] tmp_5_reg_7015;
reg   [9:0] tmp_6_reg_7021;
reg   [9:0] tmp_7_reg_7027;
reg   [9:0] tmp_8_reg_7033;
reg   [9:0] tmp_9_reg_7039;
reg   [6:0] tmp_10_reg_7045;
wire  signed [5:0] mul_res_fu_1337_p2;
reg  signed [5:0] mul_res_reg_7050;
wire  signed [5:0] mul_res_1_fu_1369_p2;
reg  signed [5:0] mul_res_1_reg_7055;
wire  signed [5:0] mul_res_2_fu_1401_p2;
reg  signed [5:0] mul_res_2_reg_7060;
wire  signed [5:0] mul_res_3_fu_1433_p2;
reg  signed [5:0] mul_res_3_reg_7065;
wire  signed [5:0] mul_res_4_fu_1465_p2;
reg  signed [5:0] mul_res_4_reg_7070;
wire  signed [5:0] mul_res_5_fu_1497_p2;
reg  signed [5:0] mul_res_5_reg_7075;
wire  signed [5:0] mul_res_6_fu_1525_p2;
reg  signed [5:0] mul_res_6_reg_7080;
wire  signed [5:0] mul_res_7_fu_1553_p2;
reg  signed [5:0] mul_res_7_reg_7085;
wire  signed [5:0] mul_res_8_fu_1581_p2;
reg  signed [5:0] mul_res_8_reg_7090;
wire  signed [5:0] mul_res_9_fu_1609_p2;
reg  signed [5:0] mul_res_9_reg_7095;
wire  signed [5:0] mul_res_10_fu_1637_p2;
reg  signed [5:0] mul_res_10_reg_7100;
wire  signed [5:0] mul_res_11_fu_1665_p2;
reg  signed [5:0] mul_res_11_reg_7105;
wire  signed [5:0] mul_res_12_fu_1693_p2;
reg  signed [5:0] mul_res_12_reg_7110;
wire  signed [5:0] mul_res_13_fu_1721_p2;
reg  signed [5:0] mul_res_13_reg_7115;
wire  signed [5:0] mul_res_14_fu_1749_p2;
reg  signed [5:0] mul_res_14_reg_7120;
wire  signed [5:0] mul_res_15_fu_1777_p2;
reg  signed [5:0] mul_res_15_reg_7125;
wire  signed [5:0] mul_res_16_fu_1805_p2;
reg  signed [5:0] mul_res_16_reg_7130;
wire  signed [5:0] mul_res_17_fu_1833_p2;
reg  signed [5:0] mul_res_17_reg_7135;
wire  signed [5:0] mul_res_18_fu_1861_p2;
reg  signed [5:0] mul_res_18_reg_7140;
wire  signed [5:0] mul_res_19_fu_1889_p2;
reg  signed [5:0] mul_res_19_reg_7145;
wire  signed [5:0] mul_res_20_fu_1917_p2;
reg  signed [5:0] mul_res_20_reg_7150;
wire  signed [5:0] mul_res_21_fu_1945_p2;
reg  signed [5:0] mul_res_21_reg_7155;
wire  signed [5:0] mul_res_22_fu_1973_p2;
reg  signed [5:0] mul_res_22_reg_7160;
wire  signed [5:0] mul_res_23_fu_2001_p2;
reg  signed [5:0] mul_res_23_reg_7165;
wire  signed [5:0] mul_res_24_fu_2029_p2;
reg  signed [5:0] mul_res_24_reg_7170;
wire  signed [5:0] mul_res_25_fu_2057_p2;
reg  signed [5:0] mul_res_25_reg_7175;
wire  signed [5:0] mul_res_26_fu_2085_p2;
reg  signed [5:0] mul_res_26_reg_7180;
wire  signed [5:0] mul_res_27_fu_2113_p2;
reg  signed [5:0] mul_res_27_reg_7185;
wire  signed [5:0] mul_res_28_fu_2141_p2;
reg  signed [5:0] mul_res_28_reg_7190;
wire  signed [5:0] mul_res_29_fu_2169_p2;
reg  signed [5:0] mul_res_29_reg_7195;
wire  signed [5:0] mul_res_30_fu_2197_p2;
reg  signed [5:0] mul_res_30_reg_7200;
wire  signed [5:0] mul_res_31_fu_2225_p2;
reg  signed [5:0] mul_res_31_reg_7205;
wire  signed [5:0] mul_res_32_fu_2253_p2;
reg  signed [5:0] mul_res_32_reg_7210;
wire  signed [5:0] mul_res_33_fu_2281_p2;
reg  signed [5:0] mul_res_33_reg_7215;
wire  signed [5:0] mul_res_34_fu_2309_p2;
reg  signed [5:0] mul_res_34_reg_7220;
wire  signed [5:0] mul_res_35_fu_2337_p2;
reg  signed [5:0] mul_res_35_reg_7225;
wire  signed [5:0] mul_res_36_fu_2365_p2;
reg  signed [5:0] mul_res_36_reg_7230;
wire  signed [5:0] mul_res_37_fu_2393_p2;
reg  signed [5:0] mul_res_37_reg_7235;
wire  signed [5:0] mul_res_38_fu_2421_p2;
reg  signed [5:0] mul_res_38_reg_7240;
wire  signed [5:0] mul_res_39_fu_2449_p2;
reg  signed [5:0] mul_res_39_reg_7245;
wire  signed [5:0] mul_res_40_fu_2477_p2;
reg  signed [5:0] mul_res_40_reg_7250;
wire  signed [5:0] mul_res_41_fu_2505_p2;
reg  signed [5:0] mul_res_41_reg_7255;
wire  signed [5:0] mul_res_42_fu_2533_p2;
reg  signed [5:0] mul_res_42_reg_7260;
wire  signed [5:0] mul_res_43_fu_2561_p2;
reg  signed [5:0] mul_res_43_reg_7265;
wire  signed [5:0] mul_res_44_fu_2589_p2;
reg  signed [5:0] mul_res_44_reg_7270;
wire  signed [5:0] mul_res_45_fu_2617_p2;
reg  signed [5:0] mul_res_45_reg_7275;
wire  signed [5:0] mul_res_46_fu_2645_p2;
reg  signed [5:0] mul_res_46_reg_7280;
wire  signed [5:0] mul_res_47_fu_2673_p2;
reg  signed [5:0] mul_res_47_reg_7285;
wire  signed [5:0] mul_res_48_fu_2701_p2;
reg  signed [5:0] mul_res_48_reg_7290;
wire  signed [5:0] mul_res_49_fu_2729_p2;
reg  signed [5:0] mul_res_49_reg_7295;
wire  signed [5:0] mul_res_50_fu_2757_p2;
reg  signed [5:0] mul_res_50_reg_7300;
wire  signed [5:0] mul_res_51_fu_2785_p2;
reg  signed [5:0] mul_res_51_reg_7305;
wire  signed [5:0] mul_res_52_fu_2813_p2;
reg  signed [5:0] mul_res_52_reg_7310;
wire  signed [5:0] mul_res_53_fu_2841_p2;
reg  signed [5:0] mul_res_53_reg_7315;
wire  signed [5:0] mul_res_54_fu_2869_p2;
reg  signed [5:0] mul_res_54_reg_7320;
wire  signed [5:0] mul_res_55_fu_2897_p2;
reg  signed [5:0] mul_res_55_reg_7325;
wire  signed [5:0] mul_res_56_fu_2925_p2;
reg  signed [5:0] mul_res_56_reg_7330;
wire  signed [5:0] mul_res_57_fu_2953_p2;
reg  signed [5:0] mul_res_57_reg_7335;
wire  signed [5:0] mul_res_58_fu_2981_p2;
reg  signed [5:0] mul_res_58_reg_7340;
wire  signed [5:0] mul_res_59_fu_3009_p2;
reg  signed [5:0] mul_res_59_reg_7345;
wire  signed [5:0] mul_res_60_fu_3037_p2;
reg  signed [5:0] mul_res_60_reg_7350;
wire  signed [5:0] mul_res_61_fu_3065_p2;
reg  signed [5:0] mul_res_61_reg_7355;
wire  signed [5:0] mul_res_62_fu_3093_p2;
reg  signed [5:0] mul_res_62_reg_7360;
wire  signed [5:0] mul_res_63_fu_3121_p2;
reg  signed [5:0] mul_res_63_reg_7365;
wire  signed [5:0] mul_res_64_fu_3149_p2;
reg  signed [5:0] mul_res_64_reg_7370;
wire  signed [5:0] mul_res_65_fu_3177_p2;
reg  signed [5:0] mul_res_65_reg_7375;
wire  signed [5:0] mul_res_66_fu_3205_p2;
reg  signed [5:0] mul_res_66_reg_7380;
wire  signed [5:0] mul_res_67_fu_3233_p2;
reg  signed [5:0] mul_res_67_reg_7385;
wire  signed [5:0] mul_res_68_fu_3261_p2;
reg  signed [5:0] mul_res_68_reg_7390;
wire  signed [5:0] mul_res_69_fu_3289_p2;
reg  signed [5:0] mul_res_69_reg_7395;
wire  signed [5:0] mul_res_70_fu_3317_p2;
reg  signed [5:0] mul_res_70_reg_7400;
wire  signed [5:0] mul_res_71_fu_3345_p2;
reg  signed [5:0] mul_res_71_reg_7405;
wire  signed [5:0] mul_res_72_fu_3363_p2;
reg  signed [5:0] mul_res_72_reg_7410;
wire  signed [5:0] mul_res_73_fu_3381_p2;
reg  signed [5:0] mul_res_73_reg_7415;
wire  signed [5:0] mul_res_74_fu_3399_p2;
reg  signed [5:0] mul_res_74_reg_7420;
wire  signed [5:0] mul_res_75_fu_3417_p2;
reg  signed [5:0] mul_res_75_reg_7425;
wire  signed [5:0] mul_res_76_fu_3435_p2;
reg  signed [5:0] mul_res_76_reg_7430;
wire  signed [5:0] mul_res_77_fu_3453_p2;
reg  signed [5:0] mul_res_77_reg_7435;
wire  signed [5:0] mul_res_78_fu_3467_p2;
reg  signed [5:0] mul_res_78_reg_7440;
wire  signed [5:0] mul_res_79_fu_3481_p2;
reg  signed [5:0] mul_res_79_reg_7445;
wire  signed [5:0] mul_res_80_fu_3495_p2;
reg  signed [5:0] mul_res_80_reg_7450;
wire  signed [5:0] mul_res_81_fu_3509_p2;
reg  signed [5:0] mul_res_81_reg_7455;
wire  signed [5:0] mul_res_82_fu_3523_p2;
reg  signed [5:0] mul_res_82_reg_7460;
wire  signed [5:0] mul_res_83_fu_3537_p2;
reg  signed [5:0] mul_res_83_reg_7465;
wire  signed [5:0] mul_res_84_fu_3551_p2;
reg  signed [5:0] mul_res_84_reg_7470;
wire  signed [5:0] mul_res_85_fu_3565_p2;
reg  signed [5:0] mul_res_85_reg_7475;
wire  signed [5:0] mul_res_86_fu_3579_p2;
reg  signed [5:0] mul_res_86_reg_7480;
wire  signed [5:0] mul_res_87_fu_3593_p2;
reg  signed [5:0] mul_res_87_reg_7485;
wire  signed [5:0] mul_res_88_fu_3607_p2;
reg  signed [5:0] mul_res_88_reg_7490;
wire  signed [5:0] mul_res_89_fu_3621_p2;
reg  signed [5:0] mul_res_89_reg_7495;
wire  signed [5:0] mul_res_90_fu_3635_p2;
reg  signed [5:0] mul_res_90_reg_7500;
wire  signed [5:0] mul_res_91_fu_3649_p2;
reg  signed [5:0] mul_res_91_reg_7505;
wire  signed [5:0] mul_res_92_fu_3663_p2;
reg  signed [5:0] mul_res_92_reg_7510;
wire  signed [5:0] mul_res_93_fu_3677_p2;
reg  signed [5:0] mul_res_93_reg_7515;
wire  signed [5:0] mul_res_94_fu_3691_p2;
reg  signed [5:0] mul_res_94_reg_7520;
wire  signed [5:0] mul_res_95_fu_3705_p2;
reg  signed [5:0] mul_res_95_reg_7525;
wire  signed [5:0] mul_res_96_fu_3719_p2;
reg  signed [5:0] mul_res_96_reg_7530;
wire  signed [5:0] mul_res_97_fu_3733_p2;
reg  signed [5:0] mul_res_97_reg_7535;
wire  signed [5:0] mul_res_98_fu_3747_p2;
reg  signed [5:0] mul_res_98_reg_7540;
wire  signed [5:0] mul_res_99_fu_3761_p2;
reg  signed [5:0] mul_res_99_reg_7545;
wire  signed [5:0] mul_res_100_fu_3775_p2;
reg  signed [5:0] mul_res_100_reg_7550;
wire  signed [5:0] mul_res_101_fu_3789_p2;
reg  signed [5:0] mul_res_101_reg_7555;
wire  signed [5:0] mul_res_102_fu_3803_p2;
reg  signed [5:0] mul_res_102_reg_7560;
wire  signed [5:0] mul_res_103_fu_3817_p2;
reg  signed [5:0] mul_res_103_reg_7565;
wire  signed [5:0] mul_res_104_fu_3831_p2;
reg  signed [5:0] mul_res_104_reg_7570;
wire  signed [5:0] mul_res_105_fu_3845_p2;
reg  signed [5:0] mul_res_105_reg_7575;
wire  signed [5:0] mul_res_106_fu_3859_p2;
reg  signed [5:0] mul_res_106_reg_7580;
wire  signed [5:0] mul_res_107_fu_3873_p2;
reg  signed [5:0] mul_res_107_reg_7585;
wire  signed [5:0] mul_res_108_fu_3887_p2;
reg  signed [5:0] mul_res_108_reg_7590;
wire  signed [5:0] mul_res_109_fu_3901_p2;
reg  signed [5:0] mul_res_109_reg_7595;
wire  signed [5:0] mul_res_110_fu_3915_p2;
reg  signed [5:0] mul_res_110_reg_7600;
wire  signed [5:0] mul_res_111_fu_3929_p2;
reg  signed [5:0] mul_res_111_reg_7605;
wire  signed [5:0] mul_res_112_fu_3943_p2;
reg  signed [5:0] mul_res_112_reg_7610;
wire  signed [5:0] mul_res_113_fu_3957_p2;
reg  signed [5:0] mul_res_113_reg_7615;
wire  signed [5:0] mul_res_114_fu_3971_p2;
reg  signed [5:0] mul_res_114_reg_7620;
wire  signed [5:0] mul_res_115_fu_3985_p2;
reg  signed [5:0] mul_res_115_reg_7625;
wire  signed [5:0] mul_res_116_fu_3999_p2;
reg  signed [5:0] mul_res_116_reg_7630;
wire  signed [5:0] mul_res_117_fu_4013_p2;
reg  signed [5:0] mul_res_117_reg_7635;
wire  signed [5:0] mul_res_118_fu_4027_p2;
reg  signed [5:0] mul_res_118_reg_7640;
wire  signed [5:0] mul_res_119_fu_4041_p2;
reg  signed [5:0] mul_res_119_reg_7645;
wire  signed [5:0] mul_res_120_fu_4055_p2;
reg  signed [5:0] mul_res_120_reg_7650;
wire  signed [5:0] mul_res_121_fu_4069_p2;
reg  signed [5:0] mul_res_121_reg_7655;
wire  signed [5:0] mul_res_122_fu_4083_p2;
reg  signed [5:0] mul_res_122_reg_7660;
wire  signed [5:0] mul_res_123_fu_4097_p2;
reg  signed [5:0] mul_res_123_reg_7665;
wire  signed [5:0] mul_res_124_fu_4111_p2;
reg  signed [5:0] mul_res_124_reg_7670;
wire  signed [5:0] mul_res_125_fu_4125_p2;
reg  signed [5:0] mul_res_125_reg_7675;
wire  signed [5:0] mul_res_126_fu_4139_p2;
reg  signed [5:0] mul_res_126_reg_7680;
wire  signed [5:0] mul_res_127_fu_4153_p2;
reg  signed [5:0] mul_res_127_reg_7685;
wire  signed [5:0] mul_res_128_fu_4167_p2;
reg  signed [5:0] mul_res_128_reg_7690;
wire  signed [5:0] mul_res_129_fu_4181_p2;
reg  signed [5:0] mul_res_129_reg_7695;
wire  signed [5:0] mul_res_130_fu_4195_p2;
reg  signed [5:0] mul_res_130_reg_7700;
wire  signed [5:0] mul_res_131_fu_4209_p2;
reg  signed [5:0] mul_res_131_reg_7705;
wire  signed [5:0] mul_res_132_fu_4223_p2;
reg  signed [5:0] mul_res_132_reg_7710;
wire  signed [5:0] mul_res_133_fu_4237_p2;
reg  signed [5:0] mul_res_133_reg_7715;
wire  signed [5:0] mul_res_134_fu_4251_p2;
reg  signed [5:0] mul_res_134_reg_7720;
wire  signed [5:0] mul_res_135_fu_4265_p2;
reg  signed [5:0] mul_res_135_reg_7725;
wire  signed [5:0] mul_res_136_fu_4279_p2;
reg  signed [5:0] mul_res_136_reg_7730;
wire  signed [5:0] mul_res_137_fu_4293_p2;
reg  signed [5:0] mul_res_137_reg_7735;
wire  signed [5:0] mul_res_138_fu_4307_p2;
reg  signed [5:0] mul_res_138_reg_7740;
wire  signed [5:0] mul_res_139_fu_4321_p2;
reg  signed [5:0] mul_res_139_reg_7745;
wire  signed [5:0] mul_res_140_fu_4335_p2;
reg  signed [5:0] mul_res_140_reg_7750;
wire  signed [5:0] mul_res_141_fu_4349_p2;
reg  signed [5:0] mul_res_141_reg_7755;
wire  signed [5:0] mul_res_142_fu_4363_p2;
reg  signed [5:0] mul_res_142_reg_7760;
wire  signed [5:0] mul_res_143_fu_4377_p2;
reg  signed [5:0] mul_res_143_reg_7765;
wire   [9:0] add_ln153_5_fu_4740_p2;
reg   [9:0] add_ln153_5_reg_7770;
wire   [9:0] add_ln153_11_fu_4810_p2;
reg   [9:0] add_ln153_11_reg_7775;
wire   [9:0] add_ln153_17_fu_4880_p2;
reg   [9:0] add_ln153_17_reg_7780;
wire   [9:0] add_ln153_23_fu_4950_p2;
reg   [9:0] add_ln153_23_reg_7785;
wire   [9:0] add_ln153_29_fu_5020_p2;
reg   [9:0] add_ln153_29_reg_7790;
wire   [9:0] add_ln153_35_fu_5090_p2;
reg   [9:0] add_ln153_35_reg_7795;
wire   [9:0] add_ln153_41_fu_5160_p2;
reg   [9:0] add_ln153_41_reg_7800;
wire   [9:0] add_ln153_47_fu_5230_p2;
reg   [9:0] add_ln153_47_reg_7805;
wire   [9:0] add_ln153_53_fu_5300_p2;
reg   [9:0] add_ln153_53_reg_7810;
wire   [9:0] add_ln153_59_fu_5370_p2;
reg   [9:0] add_ln153_59_reg_7815;
wire   [9:0] add_ln153_65_fu_5440_p2;
reg   [9:0] add_ln153_65_reg_7820;
wire   [9:0] add_ln153_71_fu_5510_p2;
reg   [9:0] add_ln153_71_reg_7825;
wire   [9:0] add_ln153_77_fu_5580_p2;
reg   [9:0] add_ln153_77_reg_7830;
wire   [9:0] add_ln153_83_fu_5650_p2;
reg   [9:0] add_ln153_83_reg_7835;
wire   [9:0] add_ln153_89_fu_5720_p2;
reg   [9:0] add_ln153_89_reg_7840;
wire   [9:0] add_ln153_95_fu_5790_p2;
reg   [9:0] add_ln153_95_reg_7845;
wire   [9:0] add_ln153_101_fu_5860_p2;
reg   [9:0] add_ln153_101_reg_7850;
wire   [9:0] add_ln153_107_fu_5930_p2;
reg   [9:0] add_ln153_107_reg_7855;
wire   [9:0] add_ln153_113_fu_6000_p2;
reg   [9:0] add_ln153_113_reg_7860;
wire   [9:0] add_ln153_119_fu_6070_p2;
reg   [9:0] add_ln153_119_reg_7865;
wire   [9:0] add_ln153_125_fu_6140_p2;
reg   [9:0] add_ln153_125_reg_7870;
wire   [9:0] add_ln153_131_fu_6210_p2;
reg   [9:0] add_ln153_131_reg_7875;
wire   [9:0] add_ln153_137_fu_6280_p2;
reg   [9:0] add_ln153_137_reg_7880;
wire   [9:0] add_ln153_143_fu_6350_p2;
reg   [9:0] add_ln153_143_reg_7885;
wire   [63:0] zext_ln121_fu_1044_p1;
wire   [63:0] zext_ln151_1_fu_1068_p1;
reg   [5:0] cit_fu_680;
wire   [5:0] add_ln122_fu_1014_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [5:0] ap_sig_allocacmp_cit_load;
reg   [9:0] p_0_0_0364_fu_684;
reg   [9:0] p_0_0_0_112366_fu_688;
reg   [9:0] p_0_0_0_2368_fu_692;
reg   [9:0] p_0_0_0_3370_fu_696;
reg   [9:0] p_0_0_0_4372_fu_700;
reg   [9:0] p_0_0_0_5374_fu_704;
reg   [9:0] p_0_0_0_6376_fu_708;
reg   [9:0] p_0_0_0_7378_fu_712;
reg   [9:0] p_0_0_0_8380_fu_716;
reg   [9:0] p_0_0_0_9382_fu_720;
reg   [9:0] p_0_0_0_10384_fu_724;
reg   [9:0] p_0_0_0_11386_fu_728;
reg   [9:0] p_0_0_0388_fu_732;
reg   [9:0] p_0_0_0_112390_fu_736;
reg   [9:0] p_0_0_0_2392_fu_740;
reg   [9:0] p_0_0_0_3394_fu_744;
reg   [9:0] p_0_0_0_4396_fu_748;
reg   [9:0] p_0_0_0_5398_fu_752;
reg   [9:0] p_0_0_0_6400_fu_756;
reg   [9:0] p_0_0_0_7402_fu_760;
reg   [9:0] p_0_0_0_8404_fu_764;
reg   [9:0] p_0_0_0_9406_fu_768;
reg   [9:0] p_0_0_0_10408_fu_772;
reg   [9:0] p_0_0_0_11410_fu_776;
reg   [4:0] cot_fu_780;
reg   [4:0] ap_sig_allocacmp_cot_load;
reg   [10:0] indvar_flatten_fu_784;
wire   [10:0] select_ln121_2_fu_915_p3;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] indvar_flatten59_fu_788;
wire   [15:0] add_ln120_fu_891_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] add_ln121_1_fu_909_p2;
wire   [0:0] icmp_ln122_fu_971_p2;
wire   [0:0] xor_ln120_fu_966_p2;
wire   [4:0] select_ln120_fu_959_p3;
wire   [0:0] and_ln120_fu_977_p2;
wire   [0:0] or_ln121_fu_989_p2;
wire   [4:0] add_ln121_fu_983_p2;
wire   [8:0] tmp_11_fu_1048_p3;
wire   [8:0] zext_ln151_fu_1059_p1;
wire   [8:0] add_ln151_fu_1062_p2;
wire   [2:0] trunc_ln137_fu_1203_p1;
wire   [2:0] trunc_ln151_fu_1317_p1;
wire  signed [2:0] mul_res_fu_1337_p0;
wire  signed [5:0] sext_ln151_1_fu_1325_p1;
wire  signed [2:0] mul_res_fu_1337_p1;
wire  signed [5:0] sext_ln151_fu_1321_p1;
wire   [2:0] trunc_ln137_s_fu_1207_p4;
wire   [2:0] tmp_12_fu_1343_p4;
wire  signed [2:0] mul_res_1_fu_1369_p0;
wire  signed [5:0] sext_ln151_4_fu_1357_p1;
wire  signed [2:0] mul_res_1_fu_1369_p1;
wire  signed [5:0] sext_ln151_3_fu_1353_p1;
wire   [2:0] trunc_ln137_1_fu_1217_p4;
wire   [2:0] tmp_13_fu_1375_p4;
wire  signed [2:0] mul_res_2_fu_1401_p0;
wire  signed [5:0] sext_ln151_7_fu_1389_p1;
wire  signed [2:0] mul_res_2_fu_1401_p1;
wire  signed [5:0] sext_ln151_6_fu_1385_p1;
wire   [2:0] trunc_ln137_2_fu_1227_p4;
wire   [2:0] tmp_14_fu_1407_p4;
wire  signed [2:0] mul_res_3_fu_1433_p0;
wire  signed [5:0] sext_ln151_10_fu_1421_p1;
wire  signed [2:0] mul_res_3_fu_1433_p1;
wire  signed [5:0] sext_ln151_9_fu_1417_p1;
wire   [2:0] trunc_ln137_3_fu_1237_p4;
wire   [2:0] tmp_15_fu_1439_p4;
wire  signed [2:0] mul_res_4_fu_1465_p0;
wire  signed [5:0] sext_ln151_13_fu_1453_p1;
wire  signed [2:0] mul_res_4_fu_1465_p1;
wire  signed [5:0] sext_ln151_12_fu_1449_p1;
wire   [2:0] trunc_ln137_4_fu_1247_p4;
wire   [2:0] tmp_16_fu_1471_p4;
wire  signed [2:0] mul_res_5_fu_1497_p0;
wire  signed [5:0] sext_ln151_16_fu_1485_p1;
wire  signed [2:0] mul_res_5_fu_1497_p1;
wire  signed [5:0] sext_ln151_15_fu_1481_p1;
wire   [2:0] tmp_17_fu_1503_p4;
wire  signed [2:0] mul_res_6_fu_1525_p0;
wire  signed [5:0] sext_ln151_17_fu_1513_p1;
wire  signed [2:0] mul_res_6_fu_1525_p1;
wire   [2:0] tmp_18_fu_1531_p4;
wire  signed [2:0] mul_res_7_fu_1553_p0;
wire  signed [5:0] sext_ln151_19_fu_1541_p1;
wire  signed [2:0] mul_res_7_fu_1553_p1;
wire   [2:0] tmp_19_fu_1559_p4;
wire  signed [2:0] mul_res_8_fu_1581_p0;
wire  signed [5:0] sext_ln151_21_fu_1569_p1;
wire  signed [2:0] mul_res_8_fu_1581_p1;
wire   [2:0] tmp_20_fu_1587_p4;
wire  signed [2:0] mul_res_9_fu_1609_p0;
wire  signed [5:0] sext_ln151_23_fu_1597_p1;
wire  signed [2:0] mul_res_9_fu_1609_p1;
wire   [2:0] tmp_21_fu_1615_p4;
wire  signed [2:0] mul_res_10_fu_1637_p0;
wire  signed [5:0] sext_ln151_25_fu_1625_p1;
wire  signed [2:0] mul_res_10_fu_1637_p1;
wire   [2:0] tmp_22_fu_1643_p4;
wire  signed [2:0] mul_res_11_fu_1665_p0;
wire  signed [5:0] sext_ln151_27_fu_1653_p1;
wire  signed [2:0] mul_res_11_fu_1665_p1;
wire   [2:0] tmp_23_fu_1671_p4;
wire  signed [2:0] mul_res_12_fu_1693_p0;
wire  signed [5:0] sext_ln151_28_fu_1681_p1;
wire  signed [2:0] mul_res_12_fu_1693_p1;
wire   [2:0] tmp_24_fu_1699_p4;
wire  signed [2:0] mul_res_13_fu_1721_p0;
wire  signed [5:0] sext_ln151_30_fu_1709_p1;
wire  signed [2:0] mul_res_13_fu_1721_p1;
wire   [2:0] tmp_25_fu_1727_p4;
wire  signed [2:0] mul_res_14_fu_1749_p0;
wire  signed [5:0] sext_ln151_32_fu_1737_p1;
wire  signed [2:0] mul_res_14_fu_1749_p1;
wire   [2:0] tmp_26_fu_1755_p4;
wire  signed [2:0] mul_res_15_fu_1777_p0;
wire  signed [5:0] sext_ln151_34_fu_1765_p1;
wire  signed [2:0] mul_res_15_fu_1777_p1;
wire   [2:0] tmp_27_fu_1783_p4;
wire  signed [2:0] mul_res_16_fu_1805_p0;
wire  signed [5:0] sext_ln151_36_fu_1793_p1;
wire  signed [2:0] mul_res_16_fu_1805_p1;
wire   [2:0] tmp_28_fu_1811_p4;
wire  signed [2:0] mul_res_17_fu_1833_p0;
wire  signed [5:0] sext_ln151_38_fu_1821_p1;
wire  signed [2:0] mul_res_17_fu_1833_p1;
wire   [2:0] tmp_29_fu_1839_p4;
wire  signed [2:0] mul_res_18_fu_1861_p0;
wire  signed [5:0] sext_ln151_39_fu_1849_p1;
wire  signed [2:0] mul_res_18_fu_1861_p1;
wire   [2:0] tmp_30_fu_1867_p4;
wire  signed [2:0] mul_res_19_fu_1889_p0;
wire  signed [5:0] sext_ln151_41_fu_1877_p1;
wire  signed [2:0] mul_res_19_fu_1889_p1;
wire   [2:0] tmp_31_fu_1895_p4;
wire  signed [2:0] mul_res_20_fu_1917_p0;
wire  signed [5:0] sext_ln151_43_fu_1905_p1;
wire  signed [2:0] mul_res_20_fu_1917_p1;
wire   [2:0] tmp_32_fu_1923_p4;
wire  signed [2:0] mul_res_21_fu_1945_p0;
wire  signed [5:0] sext_ln151_45_fu_1933_p1;
wire  signed [2:0] mul_res_21_fu_1945_p1;
wire   [2:0] tmp_33_fu_1951_p4;
wire  signed [2:0] mul_res_22_fu_1973_p0;
wire  signed [5:0] sext_ln151_47_fu_1961_p1;
wire  signed [2:0] mul_res_22_fu_1973_p1;
wire   [2:0] tmp_34_fu_1979_p4;
wire  signed [2:0] mul_res_23_fu_2001_p0;
wire  signed [5:0] sext_ln151_49_fu_1989_p1;
wire  signed [2:0] mul_res_23_fu_2001_p1;
wire   [2:0] tmp_35_fu_2007_p4;
wire  signed [2:0] mul_res_24_fu_2029_p0;
wire  signed [5:0] sext_ln151_50_fu_2017_p1;
wire  signed [2:0] mul_res_24_fu_2029_p1;
wire   [2:0] tmp_36_fu_2035_p4;
wire  signed [2:0] mul_res_25_fu_2057_p0;
wire  signed [5:0] sext_ln151_52_fu_2045_p1;
wire  signed [2:0] mul_res_25_fu_2057_p1;
wire   [2:0] tmp_37_fu_2063_p4;
wire  signed [2:0] mul_res_26_fu_2085_p0;
wire  signed [5:0] sext_ln151_54_fu_2073_p1;
wire  signed [2:0] mul_res_26_fu_2085_p1;
wire   [2:0] tmp_38_fu_2091_p4;
wire  signed [2:0] mul_res_27_fu_2113_p0;
wire  signed [5:0] sext_ln151_56_fu_2101_p1;
wire  signed [2:0] mul_res_27_fu_2113_p1;
wire   [2:0] tmp_39_fu_2119_p4;
wire  signed [2:0] mul_res_28_fu_2141_p0;
wire  signed [5:0] sext_ln151_58_fu_2129_p1;
wire  signed [2:0] mul_res_28_fu_2141_p1;
wire   [2:0] tmp_40_fu_2147_p4;
wire  signed [2:0] mul_res_29_fu_2169_p0;
wire  signed [5:0] sext_ln151_60_fu_2157_p1;
wire  signed [2:0] mul_res_29_fu_2169_p1;
wire   [2:0] tmp_41_fu_2175_p4;
wire  signed [2:0] mul_res_30_fu_2197_p0;
wire  signed [5:0] sext_ln151_61_fu_2185_p1;
wire  signed [2:0] mul_res_30_fu_2197_p1;
wire   [2:0] tmp_42_fu_2203_p4;
wire  signed [2:0] mul_res_31_fu_2225_p0;
wire  signed [5:0] sext_ln151_63_fu_2213_p1;
wire  signed [2:0] mul_res_31_fu_2225_p1;
wire   [2:0] tmp_43_fu_2231_p4;
wire  signed [2:0] mul_res_32_fu_2253_p0;
wire  signed [5:0] sext_ln151_65_fu_2241_p1;
wire  signed [2:0] mul_res_32_fu_2253_p1;
wire   [2:0] tmp_44_fu_2259_p4;
wire  signed [2:0] mul_res_33_fu_2281_p0;
wire  signed [5:0] sext_ln151_67_fu_2269_p1;
wire  signed [2:0] mul_res_33_fu_2281_p1;
wire   [2:0] tmp_45_fu_2287_p4;
wire  signed [2:0] mul_res_34_fu_2309_p0;
wire  signed [5:0] sext_ln151_69_fu_2297_p1;
wire  signed [2:0] mul_res_34_fu_2309_p1;
wire   [2:0] tmp_46_fu_2315_p4;
wire  signed [2:0] mul_res_35_fu_2337_p0;
wire  signed [5:0] sext_ln151_71_fu_2325_p1;
wire  signed [2:0] mul_res_35_fu_2337_p1;
wire   [2:0] tmp_47_fu_2343_p4;
wire  signed [2:0] mul_res_36_fu_2365_p0;
wire  signed [5:0] sext_ln151_72_fu_2353_p1;
wire  signed [2:0] mul_res_36_fu_2365_p1;
wire   [2:0] tmp_48_fu_2371_p4;
wire  signed [2:0] mul_res_37_fu_2393_p0;
wire  signed [5:0] sext_ln151_74_fu_2381_p1;
wire  signed [2:0] mul_res_37_fu_2393_p1;
wire   [2:0] tmp_49_fu_2399_p4;
wire  signed [2:0] mul_res_38_fu_2421_p0;
wire  signed [5:0] sext_ln151_76_fu_2409_p1;
wire  signed [2:0] mul_res_38_fu_2421_p1;
wire   [2:0] tmp_50_fu_2427_p4;
wire  signed [2:0] mul_res_39_fu_2449_p0;
wire  signed [5:0] sext_ln151_78_fu_2437_p1;
wire  signed [2:0] mul_res_39_fu_2449_p1;
wire   [2:0] tmp_51_fu_2455_p4;
wire  signed [2:0] mul_res_40_fu_2477_p0;
wire  signed [5:0] sext_ln151_80_fu_2465_p1;
wire  signed [2:0] mul_res_40_fu_2477_p1;
wire   [2:0] tmp_52_fu_2483_p4;
wire  signed [2:0] mul_res_41_fu_2505_p0;
wire  signed [5:0] sext_ln151_82_fu_2493_p1;
wire  signed [2:0] mul_res_41_fu_2505_p1;
wire   [2:0] tmp_53_fu_2511_p4;
wire  signed [2:0] mul_res_42_fu_2533_p0;
wire  signed [5:0] sext_ln151_83_fu_2521_p1;
wire  signed [2:0] mul_res_42_fu_2533_p1;
wire   [2:0] tmp_54_fu_2539_p4;
wire  signed [2:0] mul_res_43_fu_2561_p0;
wire  signed [5:0] sext_ln151_85_fu_2549_p1;
wire  signed [2:0] mul_res_43_fu_2561_p1;
wire   [2:0] tmp_55_fu_2567_p4;
wire  signed [2:0] mul_res_44_fu_2589_p0;
wire  signed [5:0] sext_ln151_87_fu_2577_p1;
wire  signed [2:0] mul_res_44_fu_2589_p1;
wire   [2:0] tmp_56_fu_2595_p4;
wire  signed [2:0] mul_res_45_fu_2617_p0;
wire  signed [5:0] sext_ln151_89_fu_2605_p1;
wire  signed [2:0] mul_res_45_fu_2617_p1;
wire   [2:0] tmp_57_fu_2623_p4;
wire  signed [2:0] mul_res_46_fu_2645_p0;
wire  signed [5:0] sext_ln151_91_fu_2633_p1;
wire  signed [2:0] mul_res_46_fu_2645_p1;
wire   [2:0] tmp_58_fu_2651_p4;
wire  signed [2:0] mul_res_47_fu_2673_p0;
wire  signed [5:0] sext_ln151_93_fu_2661_p1;
wire  signed [2:0] mul_res_47_fu_2673_p1;
wire   [2:0] tmp_59_fu_2679_p4;
wire  signed [2:0] mul_res_48_fu_2701_p0;
wire  signed [5:0] sext_ln151_94_fu_2689_p1;
wire  signed [2:0] mul_res_48_fu_2701_p1;
wire   [2:0] tmp_60_fu_2707_p4;
wire  signed [2:0] mul_res_49_fu_2729_p0;
wire  signed [5:0] sext_ln151_96_fu_2717_p1;
wire  signed [2:0] mul_res_49_fu_2729_p1;
wire   [2:0] tmp_61_fu_2735_p4;
wire  signed [2:0] mul_res_50_fu_2757_p0;
wire  signed [5:0] sext_ln151_98_fu_2745_p1;
wire  signed [2:0] mul_res_50_fu_2757_p1;
wire   [2:0] tmp_62_fu_2763_p4;
wire  signed [2:0] mul_res_51_fu_2785_p0;
wire  signed [5:0] sext_ln151_100_fu_2773_p1;
wire  signed [2:0] mul_res_51_fu_2785_p1;
wire   [2:0] tmp_63_fu_2791_p4;
wire  signed [2:0] mul_res_52_fu_2813_p0;
wire  signed [5:0] sext_ln151_102_fu_2801_p1;
wire  signed [2:0] mul_res_52_fu_2813_p1;
wire   [2:0] tmp_64_fu_2819_p4;
wire  signed [2:0] mul_res_53_fu_2841_p0;
wire  signed [5:0] sext_ln151_104_fu_2829_p1;
wire  signed [2:0] mul_res_53_fu_2841_p1;
wire   [2:0] tmp_65_fu_2847_p4;
wire  signed [2:0] mul_res_54_fu_2869_p0;
wire  signed [5:0] sext_ln151_105_fu_2857_p1;
wire  signed [2:0] mul_res_54_fu_2869_p1;
wire   [2:0] tmp_66_fu_2875_p4;
wire  signed [2:0] mul_res_55_fu_2897_p0;
wire  signed [5:0] sext_ln151_107_fu_2885_p1;
wire  signed [2:0] mul_res_55_fu_2897_p1;
wire   [2:0] tmp_67_fu_2903_p4;
wire  signed [2:0] mul_res_56_fu_2925_p0;
wire  signed [5:0] sext_ln151_109_fu_2913_p1;
wire  signed [2:0] mul_res_56_fu_2925_p1;
wire   [2:0] tmp_68_fu_2931_p4;
wire  signed [2:0] mul_res_57_fu_2953_p0;
wire  signed [5:0] sext_ln151_111_fu_2941_p1;
wire  signed [2:0] mul_res_57_fu_2953_p1;
wire   [2:0] tmp_69_fu_2959_p4;
wire  signed [2:0] mul_res_58_fu_2981_p0;
wire  signed [5:0] sext_ln151_113_fu_2969_p1;
wire  signed [2:0] mul_res_58_fu_2981_p1;
wire   [2:0] tmp_70_fu_2987_p4;
wire  signed [2:0] mul_res_59_fu_3009_p0;
wire  signed [5:0] sext_ln151_115_fu_2997_p1;
wire  signed [2:0] mul_res_59_fu_3009_p1;
wire   [2:0] tmp_71_fu_3015_p4;
wire  signed [2:0] mul_res_60_fu_3037_p0;
wire  signed [5:0] sext_ln151_116_fu_3025_p1;
wire  signed [2:0] mul_res_60_fu_3037_p1;
wire   [2:0] tmp_72_fu_3043_p4;
wire  signed [2:0] mul_res_61_fu_3065_p0;
wire  signed [5:0] sext_ln151_118_fu_3053_p1;
wire  signed [2:0] mul_res_61_fu_3065_p1;
wire   [2:0] tmp_73_fu_3071_p4;
wire  signed [2:0] mul_res_62_fu_3093_p0;
wire  signed [5:0] sext_ln151_120_fu_3081_p1;
wire  signed [2:0] mul_res_62_fu_3093_p1;
wire   [2:0] tmp_74_fu_3099_p4;
wire  signed [2:0] mul_res_63_fu_3121_p0;
wire  signed [5:0] sext_ln151_122_fu_3109_p1;
wire  signed [2:0] mul_res_63_fu_3121_p1;
wire   [2:0] tmp_75_fu_3127_p4;
wire  signed [2:0] mul_res_64_fu_3149_p0;
wire  signed [5:0] sext_ln151_124_fu_3137_p1;
wire  signed [2:0] mul_res_64_fu_3149_p1;
wire   [2:0] tmp_76_fu_3155_p4;
wire  signed [2:0] mul_res_65_fu_3177_p0;
wire  signed [5:0] sext_ln151_126_fu_3165_p1;
wire  signed [2:0] mul_res_65_fu_3177_p1;
wire   [2:0] tmp_77_fu_3183_p4;
wire  signed [2:0] mul_res_66_fu_3205_p0;
wire  signed [5:0] sext_ln151_127_fu_3193_p1;
wire  signed [2:0] mul_res_66_fu_3205_p1;
wire   [2:0] tmp_78_fu_3211_p4;
wire  signed [2:0] mul_res_67_fu_3233_p0;
wire  signed [5:0] sext_ln151_129_fu_3221_p1;
wire  signed [2:0] mul_res_67_fu_3233_p1;
wire   [2:0] tmp_79_fu_3239_p4;
wire  signed [2:0] mul_res_68_fu_3261_p0;
wire  signed [5:0] sext_ln151_131_fu_3249_p1;
wire  signed [2:0] mul_res_68_fu_3261_p1;
wire   [2:0] tmp_80_fu_3267_p4;
wire  signed [2:0] mul_res_69_fu_3289_p0;
wire  signed [5:0] sext_ln151_133_fu_3277_p1;
wire  signed [2:0] mul_res_69_fu_3289_p1;
wire   [2:0] tmp_81_fu_3295_p4;
wire  signed [2:0] mul_res_70_fu_3317_p0;
wire  signed [5:0] sext_ln151_135_fu_3305_p1;
wire  signed [2:0] mul_res_70_fu_3317_p1;
wire   [2:0] tmp_82_fu_3323_p4;
wire  signed [2:0] mul_res_71_fu_3345_p0;
wire  signed [5:0] sext_ln151_137_fu_3333_p1;
wire  signed [2:0] mul_res_71_fu_3345_p1;
wire   [2:0] trunc_ln137_5_fu_1257_p4;
wire  signed [2:0] mul_res_72_fu_3363_p0;
wire  signed [2:0] mul_res_72_fu_3363_p1;
wire  signed [5:0] sext_ln151_138_fu_3351_p1;
wire   [2:0] trunc_ln137_6_fu_1267_p4;
wire  signed [2:0] mul_res_73_fu_3381_p0;
wire  signed [2:0] mul_res_73_fu_3381_p1;
wire  signed [5:0] sext_ln151_140_fu_3369_p1;
wire   [2:0] trunc_ln137_7_fu_1277_p4;
wire  signed [2:0] mul_res_74_fu_3399_p0;
wire  signed [2:0] mul_res_74_fu_3399_p1;
wire  signed [5:0] sext_ln151_142_fu_3387_p1;
wire   [2:0] trunc_ln137_8_fu_1287_p4;
wire  signed [2:0] mul_res_75_fu_3417_p0;
wire  signed [2:0] mul_res_75_fu_3417_p1;
wire  signed [5:0] sext_ln151_144_fu_3405_p1;
wire   [2:0] trunc_ln137_9_fu_1297_p4;
wire  signed [2:0] mul_res_76_fu_3435_p0;
wire  signed [2:0] mul_res_76_fu_3435_p1;
wire  signed [5:0] sext_ln151_146_fu_3423_p1;
wire   [2:0] trunc_ln137_10_fu_1307_p4;
wire  signed [2:0] mul_res_77_fu_3453_p0;
wire  signed [2:0] mul_res_77_fu_3453_p1;
wire  signed [5:0] sext_ln151_148_fu_3441_p1;
wire  signed [2:0] mul_res_78_fu_3467_p0;
wire  signed [2:0] mul_res_78_fu_3467_p1;
wire  signed [2:0] mul_res_79_fu_3481_p0;
wire  signed [2:0] mul_res_79_fu_3481_p1;
wire  signed [2:0] mul_res_80_fu_3495_p0;
wire  signed [2:0] mul_res_80_fu_3495_p1;
wire  signed [2:0] mul_res_81_fu_3509_p0;
wire  signed [2:0] mul_res_81_fu_3509_p1;
wire  signed [2:0] mul_res_82_fu_3523_p0;
wire  signed [2:0] mul_res_82_fu_3523_p1;
wire  signed [2:0] mul_res_83_fu_3537_p0;
wire  signed [2:0] mul_res_83_fu_3537_p1;
wire  signed [2:0] mul_res_84_fu_3551_p0;
wire  signed [2:0] mul_res_84_fu_3551_p1;
wire  signed [2:0] mul_res_85_fu_3565_p0;
wire  signed [2:0] mul_res_85_fu_3565_p1;
wire  signed [2:0] mul_res_86_fu_3579_p0;
wire  signed [2:0] mul_res_86_fu_3579_p1;
wire  signed [2:0] mul_res_87_fu_3593_p0;
wire  signed [2:0] mul_res_87_fu_3593_p1;
wire  signed [2:0] mul_res_88_fu_3607_p0;
wire  signed [2:0] mul_res_88_fu_3607_p1;
wire  signed [2:0] mul_res_89_fu_3621_p0;
wire  signed [2:0] mul_res_89_fu_3621_p1;
wire  signed [2:0] mul_res_90_fu_3635_p0;
wire  signed [2:0] mul_res_90_fu_3635_p1;
wire  signed [2:0] mul_res_91_fu_3649_p0;
wire  signed [2:0] mul_res_91_fu_3649_p1;
wire  signed [2:0] mul_res_92_fu_3663_p0;
wire  signed [2:0] mul_res_92_fu_3663_p1;
wire  signed [2:0] mul_res_93_fu_3677_p0;
wire  signed [2:0] mul_res_93_fu_3677_p1;
wire  signed [2:0] mul_res_94_fu_3691_p0;
wire  signed [2:0] mul_res_94_fu_3691_p1;
wire  signed [2:0] mul_res_95_fu_3705_p0;
wire  signed [2:0] mul_res_95_fu_3705_p1;
wire  signed [2:0] mul_res_96_fu_3719_p0;
wire  signed [2:0] mul_res_96_fu_3719_p1;
wire  signed [2:0] mul_res_97_fu_3733_p0;
wire  signed [2:0] mul_res_97_fu_3733_p1;
wire  signed [2:0] mul_res_98_fu_3747_p0;
wire  signed [2:0] mul_res_98_fu_3747_p1;
wire  signed [2:0] mul_res_99_fu_3761_p0;
wire  signed [2:0] mul_res_99_fu_3761_p1;
wire  signed [2:0] mul_res_100_fu_3775_p0;
wire  signed [2:0] mul_res_100_fu_3775_p1;
wire  signed [2:0] mul_res_101_fu_3789_p0;
wire  signed [2:0] mul_res_101_fu_3789_p1;
wire  signed [2:0] mul_res_102_fu_3803_p0;
wire  signed [2:0] mul_res_102_fu_3803_p1;
wire  signed [2:0] mul_res_103_fu_3817_p0;
wire  signed [2:0] mul_res_103_fu_3817_p1;
wire  signed [2:0] mul_res_104_fu_3831_p0;
wire  signed [2:0] mul_res_104_fu_3831_p1;
wire  signed [2:0] mul_res_105_fu_3845_p0;
wire  signed [2:0] mul_res_105_fu_3845_p1;
wire  signed [2:0] mul_res_106_fu_3859_p0;
wire  signed [2:0] mul_res_106_fu_3859_p1;
wire  signed [2:0] mul_res_107_fu_3873_p0;
wire  signed [2:0] mul_res_107_fu_3873_p1;
wire  signed [2:0] mul_res_108_fu_3887_p0;
wire  signed [2:0] mul_res_108_fu_3887_p1;
wire  signed [2:0] mul_res_109_fu_3901_p0;
wire  signed [2:0] mul_res_109_fu_3901_p1;
wire  signed [2:0] mul_res_110_fu_3915_p0;
wire  signed [2:0] mul_res_110_fu_3915_p1;
wire  signed [2:0] mul_res_111_fu_3929_p0;
wire  signed [2:0] mul_res_111_fu_3929_p1;
wire  signed [2:0] mul_res_112_fu_3943_p0;
wire  signed [2:0] mul_res_112_fu_3943_p1;
wire  signed [2:0] mul_res_113_fu_3957_p0;
wire  signed [2:0] mul_res_113_fu_3957_p1;
wire  signed [2:0] mul_res_114_fu_3971_p0;
wire  signed [2:0] mul_res_114_fu_3971_p1;
wire  signed [2:0] mul_res_115_fu_3985_p0;
wire  signed [2:0] mul_res_115_fu_3985_p1;
wire  signed [2:0] mul_res_116_fu_3999_p0;
wire  signed [2:0] mul_res_116_fu_3999_p1;
wire  signed [2:0] mul_res_117_fu_4013_p0;
wire  signed [2:0] mul_res_117_fu_4013_p1;
wire  signed [2:0] mul_res_118_fu_4027_p0;
wire  signed [2:0] mul_res_118_fu_4027_p1;
wire  signed [2:0] mul_res_119_fu_4041_p0;
wire  signed [2:0] mul_res_119_fu_4041_p1;
wire  signed [2:0] mul_res_120_fu_4055_p0;
wire  signed [2:0] mul_res_120_fu_4055_p1;
wire  signed [2:0] mul_res_121_fu_4069_p0;
wire  signed [2:0] mul_res_121_fu_4069_p1;
wire  signed [2:0] mul_res_122_fu_4083_p0;
wire  signed [2:0] mul_res_122_fu_4083_p1;
wire  signed [2:0] mul_res_123_fu_4097_p0;
wire  signed [2:0] mul_res_123_fu_4097_p1;
wire  signed [2:0] mul_res_124_fu_4111_p0;
wire  signed [2:0] mul_res_124_fu_4111_p1;
wire  signed [2:0] mul_res_125_fu_4125_p0;
wire  signed [2:0] mul_res_125_fu_4125_p1;
wire  signed [2:0] mul_res_126_fu_4139_p0;
wire  signed [2:0] mul_res_126_fu_4139_p1;
wire  signed [2:0] mul_res_127_fu_4153_p0;
wire  signed [2:0] mul_res_127_fu_4153_p1;
wire  signed [2:0] mul_res_128_fu_4167_p0;
wire  signed [2:0] mul_res_128_fu_4167_p1;
wire  signed [2:0] mul_res_129_fu_4181_p0;
wire  signed [2:0] mul_res_129_fu_4181_p1;
wire  signed [2:0] mul_res_130_fu_4195_p0;
wire  signed [2:0] mul_res_130_fu_4195_p1;
wire  signed [2:0] mul_res_131_fu_4209_p0;
wire  signed [2:0] mul_res_131_fu_4209_p1;
wire  signed [2:0] mul_res_132_fu_4223_p0;
wire  signed [2:0] mul_res_132_fu_4223_p1;
wire  signed [2:0] mul_res_133_fu_4237_p0;
wire  signed [2:0] mul_res_133_fu_4237_p1;
wire  signed [2:0] mul_res_134_fu_4251_p0;
wire  signed [2:0] mul_res_134_fu_4251_p1;
wire  signed [2:0] mul_res_135_fu_4265_p0;
wire  signed [2:0] mul_res_135_fu_4265_p1;
wire  signed [2:0] mul_res_136_fu_4279_p0;
wire  signed [2:0] mul_res_136_fu_4279_p1;
wire  signed [2:0] mul_res_137_fu_4293_p0;
wire  signed [2:0] mul_res_137_fu_4293_p1;
wire  signed [2:0] mul_res_138_fu_4307_p0;
wire  signed [2:0] mul_res_138_fu_4307_p1;
wire  signed [2:0] mul_res_139_fu_4321_p0;
wire  signed [2:0] mul_res_139_fu_4321_p1;
wire  signed [2:0] mul_res_140_fu_4335_p0;
wire  signed [2:0] mul_res_140_fu_4335_p1;
wire  signed [2:0] mul_res_141_fu_4349_p0;
wire  signed [2:0] mul_res_141_fu_4349_p1;
wire  signed [2:0] mul_res_142_fu_4363_p0;
wire  signed [2:0] mul_res_142_fu_4363_p1;
wire  signed [2:0] mul_res_143_fu_4377_p0;
wire  signed [2:0] mul_res_143_fu_4377_p1;
wire  signed [9:0] sext_ln131_fu_4527_p1;
wire  signed [6:0] sext_ln151_11_fu_4685_p1;
wire  signed [6:0] sext_ln151_14_fu_4688_p1;
wire   [6:0] add_ln153_fu_4694_p2;
wire  signed [6:0] sext_ln151_8_fu_4682_p1;
wire  signed [6:0] sext_ln151_5_fu_4679_p1;
wire   [6:0] add_ln153_2_fu_4704_p2;
wire  signed [6:0] sext_ln151_2_fu_4676_p1;
wire  signed [6:0] sext_ln153_fu_4691_p1;
wire   [6:0] add_ln153_3_fu_4714_p2;
wire  signed [7:0] sext_ln153_3_fu_4720_p1;
wire  signed [7:0] sext_ln153_2_fu_4710_p1;
wire   [7:0] add_ln153_4_fu_4724_p2;
wire  signed [9:0] sext_ln153_4_fu_4730_p1;
wire  signed [9:0] sext_ln153_1_fu_4700_p1;
wire   [9:0] add_ln153_1_fu_4734_p2;
wire   [9:0] select_ln126_23_fu_4670_p3;
wire  signed [6:0] sext_ln151_24_fu_4755_p1;
wire  signed [6:0] sext_ln151_26_fu_4758_p1;
wire   [6:0] add_ln153_6_fu_4764_p2;
wire  signed [6:0] sext_ln151_22_fu_4752_p1;
wire  signed [6:0] sext_ln151_20_fu_4749_p1;
wire   [6:0] add_ln153_8_fu_4774_p2;
wire  signed [6:0] sext_ln151_18_fu_4746_p1;
wire  signed [6:0] sext_ln153_5_fu_4761_p1;
wire   [6:0] add_ln153_9_fu_4784_p2;
wire  signed [7:0] sext_ln153_8_fu_4790_p1;
wire  signed [7:0] sext_ln153_7_fu_4780_p1;
wire   [7:0] add_ln153_10_fu_4794_p2;
wire  signed [9:0] sext_ln153_9_fu_4800_p1;
wire  signed [9:0] sext_ln153_6_fu_4770_p1;
wire   [9:0] add_ln153_7_fu_4804_p2;
wire   [9:0] select_ln126_22_fu_4664_p3;
wire  signed [6:0] sext_ln151_35_fu_4825_p1;
wire  signed [6:0] sext_ln151_37_fu_4828_p1;
wire   [6:0] add_ln153_12_fu_4834_p2;
wire  signed [6:0] sext_ln151_33_fu_4822_p1;
wire  signed [6:0] sext_ln151_31_fu_4819_p1;
wire   [6:0] add_ln153_14_fu_4844_p2;
wire  signed [6:0] sext_ln151_29_fu_4816_p1;
wire  signed [6:0] sext_ln153_10_fu_4831_p1;
wire   [6:0] add_ln153_15_fu_4854_p2;
wire  signed [7:0] sext_ln153_13_fu_4860_p1;
wire  signed [7:0] sext_ln153_12_fu_4850_p1;
wire   [7:0] add_ln153_16_fu_4864_p2;
wire  signed [9:0] sext_ln153_14_fu_4870_p1;
wire  signed [9:0] sext_ln153_11_fu_4840_p1;
wire   [9:0] add_ln153_13_fu_4874_p2;
wire   [9:0] select_ln126_21_fu_4658_p3;
wire  signed [6:0] sext_ln151_46_fu_4895_p1;
wire  signed [6:0] sext_ln151_48_fu_4898_p1;
wire   [6:0] add_ln153_18_fu_4904_p2;
wire  signed [6:0] sext_ln151_44_fu_4892_p1;
wire  signed [6:0] sext_ln151_42_fu_4889_p1;
wire   [6:0] add_ln153_20_fu_4914_p2;
wire  signed [6:0] sext_ln151_40_fu_4886_p1;
wire  signed [6:0] sext_ln153_15_fu_4901_p1;
wire   [6:0] add_ln153_21_fu_4924_p2;
wire  signed [7:0] sext_ln153_18_fu_4930_p1;
wire  signed [7:0] sext_ln153_17_fu_4920_p1;
wire   [7:0] add_ln153_22_fu_4934_p2;
wire  signed [9:0] sext_ln153_19_fu_4940_p1;
wire  signed [9:0] sext_ln153_16_fu_4910_p1;
wire   [9:0] add_ln153_19_fu_4944_p2;
wire   [9:0] select_ln126_20_fu_4652_p3;
wire  signed [6:0] sext_ln151_57_fu_4965_p1;
wire  signed [6:0] sext_ln151_59_fu_4968_p1;
wire   [6:0] add_ln153_24_fu_4974_p2;
wire  signed [6:0] sext_ln151_55_fu_4962_p1;
wire  signed [6:0] sext_ln151_53_fu_4959_p1;
wire   [6:0] add_ln153_26_fu_4984_p2;
wire  signed [6:0] sext_ln151_51_fu_4956_p1;
wire  signed [6:0] sext_ln153_20_fu_4971_p1;
wire   [6:0] add_ln153_27_fu_4994_p2;
wire  signed [7:0] sext_ln153_23_fu_5000_p1;
wire  signed [7:0] sext_ln153_22_fu_4990_p1;
wire   [7:0] add_ln153_28_fu_5004_p2;
wire  signed [9:0] sext_ln153_24_fu_5010_p1;
wire  signed [9:0] sext_ln153_21_fu_4980_p1;
wire   [9:0] add_ln153_25_fu_5014_p2;
wire   [9:0] select_ln126_19_fu_4646_p3;
wire  signed [6:0] sext_ln151_68_fu_5035_p1;
wire  signed [6:0] sext_ln151_70_fu_5038_p1;
wire   [6:0] add_ln153_30_fu_5044_p2;
wire  signed [6:0] sext_ln151_66_fu_5032_p1;
wire  signed [6:0] sext_ln151_64_fu_5029_p1;
wire   [6:0] add_ln153_32_fu_5054_p2;
wire  signed [6:0] sext_ln151_62_fu_5026_p1;
wire  signed [6:0] sext_ln153_25_fu_5041_p1;
wire   [6:0] add_ln153_33_fu_5064_p2;
wire  signed [7:0] sext_ln153_28_fu_5070_p1;
wire  signed [7:0] sext_ln153_27_fu_5060_p1;
wire   [7:0] add_ln153_34_fu_5074_p2;
wire  signed [9:0] sext_ln153_29_fu_5080_p1;
wire  signed [9:0] sext_ln153_26_fu_5050_p1;
wire   [9:0] add_ln153_31_fu_5084_p2;
wire   [9:0] select_ln126_18_fu_4640_p3;
wire  signed [6:0] sext_ln151_79_fu_5105_p1;
wire  signed [6:0] sext_ln151_81_fu_5108_p1;
wire   [6:0] add_ln153_36_fu_5114_p2;
wire  signed [6:0] sext_ln151_77_fu_5102_p1;
wire  signed [6:0] sext_ln151_75_fu_5099_p1;
wire   [6:0] add_ln153_38_fu_5124_p2;
wire  signed [6:0] sext_ln151_73_fu_5096_p1;
wire  signed [6:0] sext_ln153_30_fu_5111_p1;
wire   [6:0] add_ln153_39_fu_5134_p2;
wire  signed [7:0] sext_ln153_33_fu_5140_p1;
wire  signed [7:0] sext_ln153_32_fu_5130_p1;
wire   [7:0] add_ln153_40_fu_5144_p2;
wire  signed [9:0] sext_ln153_34_fu_5150_p1;
wire  signed [9:0] sext_ln153_31_fu_5120_p1;
wire   [9:0] add_ln153_37_fu_5154_p2;
wire   [9:0] select_ln126_17_fu_4634_p3;
wire  signed [6:0] sext_ln151_90_fu_5175_p1;
wire  signed [6:0] sext_ln151_92_fu_5178_p1;
wire   [6:0] add_ln153_42_fu_5184_p2;
wire  signed [6:0] sext_ln151_88_fu_5172_p1;
wire  signed [6:0] sext_ln151_86_fu_5169_p1;
wire   [6:0] add_ln153_44_fu_5194_p2;
wire  signed [6:0] sext_ln151_84_fu_5166_p1;
wire  signed [6:0] sext_ln153_35_fu_5181_p1;
wire   [6:0] add_ln153_45_fu_5204_p2;
wire  signed [7:0] sext_ln153_38_fu_5210_p1;
wire  signed [7:0] sext_ln153_37_fu_5200_p1;
wire   [7:0] add_ln153_46_fu_5214_p2;
wire  signed [9:0] sext_ln153_39_fu_5220_p1;
wire  signed [9:0] sext_ln153_36_fu_5190_p1;
wire   [9:0] add_ln153_43_fu_5224_p2;
wire   [9:0] select_ln126_16_fu_4628_p3;
wire  signed [6:0] sext_ln151_101_fu_5245_p1;
wire  signed [6:0] sext_ln151_103_fu_5248_p1;
wire   [6:0] add_ln153_48_fu_5254_p2;
wire  signed [6:0] sext_ln151_99_fu_5242_p1;
wire  signed [6:0] sext_ln151_97_fu_5239_p1;
wire   [6:0] add_ln153_50_fu_5264_p2;
wire  signed [6:0] sext_ln151_95_fu_5236_p1;
wire  signed [6:0] sext_ln153_40_fu_5251_p1;
wire   [6:0] add_ln153_51_fu_5274_p2;
wire  signed [7:0] sext_ln153_43_fu_5280_p1;
wire  signed [7:0] sext_ln153_42_fu_5270_p1;
wire   [7:0] add_ln153_52_fu_5284_p2;
wire  signed [9:0] sext_ln153_44_fu_5290_p1;
wire  signed [9:0] sext_ln153_41_fu_5260_p1;
wire   [9:0] add_ln153_49_fu_5294_p2;
wire   [9:0] select_ln126_15_fu_4622_p3;
wire  signed [6:0] sext_ln151_112_fu_5315_p1;
wire  signed [6:0] sext_ln151_114_fu_5318_p1;
wire   [6:0] add_ln153_54_fu_5324_p2;
wire  signed [6:0] sext_ln151_110_fu_5312_p1;
wire  signed [6:0] sext_ln151_108_fu_5309_p1;
wire   [6:0] add_ln153_56_fu_5334_p2;
wire  signed [6:0] sext_ln151_106_fu_5306_p1;
wire  signed [6:0] sext_ln153_45_fu_5321_p1;
wire   [6:0] add_ln153_57_fu_5344_p2;
wire  signed [7:0] sext_ln153_48_fu_5350_p1;
wire  signed [7:0] sext_ln153_47_fu_5340_p1;
wire   [7:0] add_ln153_58_fu_5354_p2;
wire  signed [9:0] sext_ln153_49_fu_5360_p1;
wire  signed [9:0] sext_ln153_46_fu_5330_p1;
wire   [9:0] add_ln153_55_fu_5364_p2;
wire   [9:0] select_ln126_14_fu_4616_p3;
wire  signed [6:0] sext_ln151_123_fu_5385_p1;
wire  signed [6:0] sext_ln151_125_fu_5388_p1;
wire   [6:0] add_ln153_60_fu_5394_p2;
wire  signed [9:0] sext_ln153_51_fu_5400_p1;
wire   [9:0] select_ln126_13_fu_4610_p3;
wire  signed [6:0] sext_ln151_121_fu_5382_p1;
wire  signed [6:0] sext_ln151_119_fu_5379_p1;
wire   [6:0] add_ln153_62_fu_5410_p2;
wire  signed [6:0] sext_ln151_117_fu_5376_p1;
wire  signed [6:0] sext_ln153_50_fu_5391_p1;
wire   [6:0] add_ln153_63_fu_5420_p2;
wire  signed [7:0] sext_ln153_53_fu_5426_p1;
wire  signed [7:0] sext_ln153_52_fu_5416_p1;
wire   [7:0] add_ln153_64_fu_5430_p2;
wire  signed [9:0] sext_ln153_54_fu_5436_p1;
wire   [9:0] add_ln153_61_fu_5404_p2;
wire  signed [6:0] sext_ln151_134_fu_5455_p1;
wire  signed [6:0] sext_ln151_136_fu_5458_p1;
wire   [6:0] add_ln153_66_fu_5464_p2;
wire  signed [9:0] sext_ln153_56_fu_5470_p1;
wire   [9:0] select_ln126_12_fu_4603_p3;
wire  signed [6:0] sext_ln151_132_fu_5452_p1;
wire  signed [6:0] sext_ln151_130_fu_5449_p1;
wire   [6:0] add_ln153_68_fu_5480_p2;
wire  signed [6:0] sext_ln151_128_fu_5446_p1;
wire  signed [6:0] sext_ln153_55_fu_5461_p1;
wire   [6:0] add_ln153_69_fu_5490_p2;
wire  signed [7:0] sext_ln153_58_fu_5496_p1;
wire  signed [7:0] sext_ln153_57_fu_5486_p1;
wire   [7:0] add_ln153_70_fu_5500_p2;
wire  signed [9:0] sext_ln153_59_fu_5506_p1;
wire   [9:0] add_ln153_67_fu_5474_p2;
wire  signed [6:0] sext_ln151_145_fu_5525_p1;
wire  signed [6:0] sext_ln151_147_fu_5528_p1;
wire   [6:0] add_ln153_72_fu_5534_p2;
wire  signed [9:0] sext_ln153_61_fu_5540_p1;
wire   [9:0] select_ln126_11_fu_4597_p3;
wire  signed [6:0] sext_ln151_143_fu_5522_p1;
wire  signed [6:0] sext_ln151_141_fu_5519_p1;
wire   [6:0] add_ln153_74_fu_5550_p2;
wire  signed [6:0] sext_ln151_139_fu_5516_p1;
wire  signed [6:0] sext_ln153_60_fu_5531_p1;
wire   [6:0] add_ln153_75_fu_5560_p2;
wire  signed [7:0] sext_ln153_63_fu_5566_p1;
wire  signed [7:0] sext_ln153_62_fu_5556_p1;
wire   [7:0] add_ln153_76_fu_5570_p2;
wire  signed [9:0] sext_ln153_64_fu_5576_p1;
wire   [9:0] add_ln153_73_fu_5544_p2;
wire  signed [6:0] sext_ln151_152_fu_5595_p1;
wire  signed [6:0] sext_ln151_153_fu_5598_p1;
wire   [6:0] add_ln153_78_fu_5604_p2;
wire  signed [9:0] sext_ln153_66_fu_5610_p1;
wire   [9:0] select_ln126_10_fu_4591_p3;
wire  signed [6:0] sext_ln151_151_fu_5592_p1;
wire  signed [6:0] sext_ln151_150_fu_5589_p1;
wire   [6:0] add_ln153_80_fu_5620_p2;
wire  signed [6:0] sext_ln151_149_fu_5586_p1;
wire  signed [6:0] sext_ln153_65_fu_5601_p1;
wire   [6:0] add_ln153_81_fu_5630_p2;
wire  signed [7:0] sext_ln153_68_fu_5636_p1;
wire  signed [7:0] sext_ln153_67_fu_5626_p1;
wire   [7:0] add_ln153_82_fu_5640_p2;
wire  signed [9:0] sext_ln153_69_fu_5646_p1;
wire   [9:0] add_ln153_79_fu_5614_p2;
wire  signed [6:0] sext_ln151_157_fu_5665_p1;
wire  signed [6:0] sext_ln151_158_fu_5668_p1;
wire   [6:0] add_ln153_84_fu_5674_p2;
wire  signed [9:0] sext_ln153_71_fu_5680_p1;
wire   [9:0] select_ln126_9_fu_4585_p3;
wire  signed [6:0] sext_ln151_156_fu_5662_p1;
wire  signed [6:0] sext_ln151_155_fu_5659_p1;
wire   [6:0] add_ln153_86_fu_5690_p2;
wire  signed [6:0] sext_ln151_154_fu_5656_p1;
wire  signed [6:0] sext_ln153_70_fu_5671_p1;
wire   [6:0] add_ln153_87_fu_5700_p2;
wire  signed [7:0] sext_ln153_73_fu_5706_p1;
wire  signed [7:0] sext_ln153_72_fu_5696_p1;
wire   [7:0] add_ln153_88_fu_5710_p2;
wire  signed [9:0] sext_ln153_74_fu_5716_p1;
wire   [9:0] add_ln153_85_fu_5684_p2;
wire  signed [6:0] sext_ln151_162_fu_5735_p1;
wire  signed [6:0] sext_ln151_163_fu_5738_p1;
wire   [6:0] add_ln153_90_fu_5744_p2;
wire  signed [9:0] sext_ln153_76_fu_5750_p1;
wire   [9:0] select_ln126_8_fu_4579_p3;
wire  signed [6:0] sext_ln151_161_fu_5732_p1;
wire  signed [6:0] sext_ln151_160_fu_5729_p1;
wire   [6:0] add_ln153_92_fu_5760_p2;
wire  signed [6:0] sext_ln151_159_fu_5726_p1;
wire  signed [6:0] sext_ln153_75_fu_5741_p1;
wire   [6:0] add_ln153_93_fu_5770_p2;
wire  signed [7:0] sext_ln153_78_fu_5776_p1;
wire  signed [7:0] sext_ln153_77_fu_5766_p1;
wire   [7:0] add_ln153_94_fu_5780_p2;
wire  signed [9:0] sext_ln153_79_fu_5786_p1;
wire   [9:0] add_ln153_91_fu_5754_p2;
wire  signed [6:0] sext_ln151_167_fu_5805_p1;
wire  signed [6:0] sext_ln151_168_fu_5808_p1;
wire   [6:0] add_ln153_96_fu_5814_p2;
wire  signed [9:0] sext_ln153_81_fu_5820_p1;
wire   [9:0] select_ln126_7_fu_4573_p3;
wire  signed [6:0] sext_ln151_166_fu_5802_p1;
wire  signed [6:0] sext_ln151_165_fu_5799_p1;
wire   [6:0] add_ln153_98_fu_5830_p2;
wire  signed [6:0] sext_ln151_164_fu_5796_p1;
wire  signed [6:0] sext_ln153_80_fu_5811_p1;
wire   [6:0] add_ln153_99_fu_5840_p2;
wire  signed [7:0] sext_ln153_83_fu_5846_p1;
wire  signed [7:0] sext_ln153_82_fu_5836_p1;
wire   [7:0] add_ln153_100_fu_5850_p2;
wire  signed [9:0] sext_ln153_84_fu_5856_p1;
wire   [9:0] add_ln153_97_fu_5824_p2;
wire  signed [6:0] sext_ln151_172_fu_5875_p1;
wire  signed [6:0] sext_ln151_173_fu_5878_p1;
wire   [6:0] add_ln153_102_fu_5884_p2;
wire  signed [9:0] sext_ln153_86_fu_5890_p1;
wire   [9:0] select_ln126_6_fu_4567_p3;
wire  signed [6:0] sext_ln151_171_fu_5872_p1;
wire  signed [6:0] sext_ln151_170_fu_5869_p1;
wire   [6:0] add_ln153_104_fu_5900_p2;
wire  signed [6:0] sext_ln151_169_fu_5866_p1;
wire  signed [6:0] sext_ln153_85_fu_5881_p1;
wire   [6:0] add_ln153_105_fu_5910_p2;
wire  signed [7:0] sext_ln153_88_fu_5916_p1;
wire  signed [7:0] sext_ln153_87_fu_5906_p1;
wire   [7:0] add_ln153_106_fu_5920_p2;
wire  signed [9:0] sext_ln153_89_fu_5926_p1;
wire   [9:0] add_ln153_103_fu_5894_p2;
wire  signed [6:0] sext_ln151_177_fu_5945_p1;
wire  signed [6:0] sext_ln151_178_fu_5948_p1;
wire   [6:0] add_ln153_108_fu_5954_p2;
wire  signed [9:0] sext_ln153_91_fu_5960_p1;
wire   [9:0] select_ln126_5_fu_4561_p3;
wire  signed [6:0] sext_ln151_176_fu_5942_p1;
wire  signed [6:0] sext_ln151_175_fu_5939_p1;
wire   [6:0] add_ln153_110_fu_5970_p2;
wire  signed [6:0] sext_ln151_174_fu_5936_p1;
wire  signed [6:0] sext_ln153_90_fu_5951_p1;
wire   [6:0] add_ln153_111_fu_5980_p2;
wire  signed [7:0] sext_ln153_93_fu_5986_p1;
wire  signed [7:0] sext_ln153_92_fu_5976_p1;
wire   [7:0] add_ln153_112_fu_5990_p2;
wire  signed [9:0] sext_ln153_94_fu_5996_p1;
wire   [9:0] add_ln153_109_fu_5964_p2;
wire  signed [6:0] sext_ln151_182_fu_6015_p1;
wire  signed [6:0] sext_ln151_183_fu_6018_p1;
wire   [6:0] add_ln153_114_fu_6024_p2;
wire  signed [9:0] sext_ln153_96_fu_6030_p1;
wire   [9:0] select_ln126_4_fu_4555_p3;
wire  signed [6:0] sext_ln151_181_fu_6012_p1;
wire  signed [6:0] sext_ln151_180_fu_6009_p1;
wire   [6:0] add_ln153_116_fu_6040_p2;
wire  signed [6:0] sext_ln151_179_fu_6006_p1;
wire  signed [6:0] sext_ln153_95_fu_6021_p1;
wire   [6:0] add_ln153_117_fu_6050_p2;
wire  signed [7:0] sext_ln153_98_fu_6056_p1;
wire  signed [7:0] sext_ln153_97_fu_6046_p1;
wire   [7:0] add_ln153_118_fu_6060_p2;
wire  signed [9:0] sext_ln153_99_fu_6066_p1;
wire   [9:0] add_ln153_115_fu_6034_p2;
wire  signed [6:0] sext_ln151_187_fu_6085_p1;
wire  signed [6:0] sext_ln151_188_fu_6088_p1;
wire   [6:0] add_ln153_120_fu_6094_p2;
wire  signed [9:0] sext_ln153_101_fu_6100_p1;
wire   [9:0] select_ln126_3_fu_4549_p3;
wire  signed [6:0] sext_ln151_186_fu_6082_p1;
wire  signed [6:0] sext_ln151_185_fu_6079_p1;
wire   [6:0] add_ln153_122_fu_6110_p2;
wire  signed [6:0] sext_ln151_184_fu_6076_p1;
wire  signed [6:0] sext_ln153_100_fu_6091_p1;
wire   [6:0] add_ln153_123_fu_6120_p2;
wire  signed [7:0] sext_ln153_103_fu_6126_p1;
wire  signed [7:0] sext_ln153_102_fu_6116_p1;
wire   [7:0] add_ln153_124_fu_6130_p2;
wire  signed [9:0] sext_ln153_104_fu_6136_p1;
wire   [9:0] add_ln153_121_fu_6104_p2;
wire  signed [6:0] sext_ln151_192_fu_6155_p1;
wire  signed [6:0] sext_ln151_193_fu_6158_p1;
wire   [6:0] add_ln153_126_fu_6164_p2;
wire  signed [9:0] sext_ln153_106_fu_6170_p1;
wire   [9:0] select_ln126_2_fu_4543_p3;
wire  signed [6:0] sext_ln151_191_fu_6152_p1;
wire  signed [6:0] sext_ln151_190_fu_6149_p1;
wire   [6:0] add_ln153_128_fu_6180_p2;
wire  signed [6:0] sext_ln151_189_fu_6146_p1;
wire  signed [6:0] sext_ln153_105_fu_6161_p1;
wire   [6:0] add_ln153_129_fu_6190_p2;
wire  signed [7:0] sext_ln153_108_fu_6196_p1;
wire  signed [7:0] sext_ln153_107_fu_6186_p1;
wire   [7:0] add_ln153_130_fu_6200_p2;
wire  signed [9:0] sext_ln153_109_fu_6206_p1;
wire   [9:0] add_ln153_127_fu_6174_p2;
wire  signed [6:0] sext_ln151_197_fu_6225_p1;
wire  signed [6:0] sext_ln151_198_fu_6228_p1;
wire   [6:0] add_ln153_132_fu_6234_p2;
wire  signed [9:0] sext_ln153_111_fu_6240_p1;
wire   [9:0] select_ln126_1_fu_4537_p3;
wire  signed [6:0] sext_ln151_196_fu_6222_p1;
wire  signed [6:0] sext_ln151_195_fu_6219_p1;
wire   [6:0] add_ln153_134_fu_6250_p2;
wire  signed [6:0] sext_ln151_194_fu_6216_p1;
wire  signed [6:0] sext_ln153_110_fu_6231_p1;
wire   [6:0] add_ln153_135_fu_6260_p2;
wire  signed [7:0] sext_ln153_113_fu_6266_p1;
wire  signed [7:0] sext_ln153_112_fu_6256_p1;
wire   [7:0] add_ln153_136_fu_6270_p2;
wire  signed [9:0] sext_ln153_114_fu_6276_p1;
wire   [9:0] add_ln153_133_fu_6244_p2;
wire  signed [6:0] sext_ln151_202_fu_6295_p1;
wire  signed [6:0] sext_ln151_203_fu_6298_p1;
wire   [6:0] add_ln153_138_fu_6304_p2;
wire  signed [9:0] sext_ln153_116_fu_6310_p1;
wire   [9:0] select_ln126_fu_4530_p3;
wire  signed [6:0] sext_ln151_201_fu_6292_p1;
wire  signed [6:0] sext_ln151_200_fu_6289_p1;
wire   [6:0] add_ln153_140_fu_6320_p2;
wire  signed [6:0] sext_ln151_199_fu_6286_p1;
wire  signed [6:0] sext_ln153_115_fu_6301_p1;
wire   [6:0] add_ln153_141_fu_6330_p2;
wire  signed [7:0] sext_ln153_118_fu_6336_p1;
wire  signed [7:0] sext_ln153_117_fu_6326_p1;
wire   [7:0] add_ln153_142_fu_6340_p2;
wire  signed [9:0] sext_ln153_119_fu_6346_p1;
wire   [9:0] add_ln153_139_fu_6314_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_652;
reg    ap_condition_749;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 cit_fu_680 = 6'd0;
//#0 p_0_0_0364_fu_684 = 10'd0;
//#0 p_0_0_0_112366_fu_688 = 10'd0;
//#0 p_0_0_0_2368_fu_692 = 10'd0;
//#0 p_0_0_0_3370_fu_696 = 10'd0;
//#0 p_0_0_0_4372_fu_700 = 10'd0;
//#0 p_0_0_0_5374_fu_704 = 10'd0;
//#0 p_0_0_0_6376_fu_708 = 10'd0;
//#0 p_0_0_0_7378_fu_712 = 10'd0;
//#0 p_0_0_0_8380_fu_716 = 10'd0;
//#0 p_0_0_0_9382_fu_720 = 10'd0;
//#0 p_0_0_0_10384_fu_724 = 10'd0;
//#0 p_0_0_0_11386_fu_728 = 10'd0;
//#0 p_0_0_0388_fu_732 = 10'd0;
//#0 p_0_0_0_112390_fu_736 = 10'd0;
//#0 p_0_0_0_2392_fu_740 = 10'd0;
//#0 p_0_0_0_3394_fu_744 = 10'd0;
//#0 p_0_0_0_4396_fu_748 = 10'd0;
//#0 p_0_0_0_5398_fu_752 = 10'd0;
//#0 p_0_0_0_6400_fu_756 = 10'd0;
//#0 p_0_0_0_7402_fu_760 = 10'd0;
//#0 p_0_0_0_8404_fu_764 = 10'd0;
//#0 p_0_0_0_9406_fu_768 = 10'd0;
//#0 p_0_0_0_10408_fu_772 = 10'd0;
//#0 p_0_0_0_11410_fu_776 = 10'd0;
//#0 cot_fu_780 = 5'd0;
//#0 indvar_flatten_fu_784 = 11'd0;
//#0 indvar_flatten59_fu_788 = 16'd0;
end

ATTN11_matmul_step2_mac_48_attn_inst_matmul_gen_k_bias_arr_659_ROM_AUTO_1R #(
    .DataWidth( 117 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
attn_inst_matmul_gen_k_bias_arr_659_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_k_bias_arr_659_address0),
    .ce0(attn_inst_matmul_gen_k_bias_arr_659_ce0),
    .q0(attn_inst_matmul_gen_k_bias_arr_659_q0)
);

ATTN11_matmul_step2_mac_48_attn_inst_matmul_gen_k_weight_arr_658_ROM_AUTO_1R #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_k_weight_arr_658_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_k_weight_arr_658_address0),
    .ce0(attn_inst_matmul_gen_k_weight_arr_658_ce0),
    .q0(attn_inst_matmul_gen_k_weight_arr_658_q0)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U199(
    .din0(mul_res_fu_1337_p0),
    .din1(mul_res_fu_1337_p1),
    .dout(mul_res_fu_1337_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U200(
    .din0(mul_res_1_fu_1369_p0),
    .din1(mul_res_1_fu_1369_p1),
    .dout(mul_res_1_fu_1369_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U201(
    .din0(mul_res_2_fu_1401_p0),
    .din1(mul_res_2_fu_1401_p1),
    .dout(mul_res_2_fu_1401_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U202(
    .din0(mul_res_3_fu_1433_p0),
    .din1(mul_res_3_fu_1433_p1),
    .dout(mul_res_3_fu_1433_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U203(
    .din0(mul_res_4_fu_1465_p0),
    .din1(mul_res_4_fu_1465_p1),
    .dout(mul_res_4_fu_1465_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U204(
    .din0(mul_res_5_fu_1497_p0),
    .din1(mul_res_5_fu_1497_p1),
    .dout(mul_res_5_fu_1497_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U205(
    .din0(mul_res_6_fu_1525_p0),
    .din1(mul_res_6_fu_1525_p1),
    .dout(mul_res_6_fu_1525_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U206(
    .din0(mul_res_7_fu_1553_p0),
    .din1(mul_res_7_fu_1553_p1),
    .dout(mul_res_7_fu_1553_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U207(
    .din0(mul_res_8_fu_1581_p0),
    .din1(mul_res_8_fu_1581_p1),
    .dout(mul_res_8_fu_1581_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U208(
    .din0(mul_res_9_fu_1609_p0),
    .din1(mul_res_9_fu_1609_p1),
    .dout(mul_res_9_fu_1609_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U209(
    .din0(mul_res_10_fu_1637_p0),
    .din1(mul_res_10_fu_1637_p1),
    .dout(mul_res_10_fu_1637_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U210(
    .din0(mul_res_11_fu_1665_p0),
    .din1(mul_res_11_fu_1665_p1),
    .dout(mul_res_11_fu_1665_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U211(
    .din0(mul_res_12_fu_1693_p0),
    .din1(mul_res_12_fu_1693_p1),
    .dout(mul_res_12_fu_1693_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U212(
    .din0(mul_res_13_fu_1721_p0),
    .din1(mul_res_13_fu_1721_p1),
    .dout(mul_res_13_fu_1721_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U213(
    .din0(mul_res_14_fu_1749_p0),
    .din1(mul_res_14_fu_1749_p1),
    .dout(mul_res_14_fu_1749_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U214(
    .din0(mul_res_15_fu_1777_p0),
    .din1(mul_res_15_fu_1777_p1),
    .dout(mul_res_15_fu_1777_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U215(
    .din0(mul_res_16_fu_1805_p0),
    .din1(mul_res_16_fu_1805_p1),
    .dout(mul_res_16_fu_1805_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U216(
    .din0(mul_res_17_fu_1833_p0),
    .din1(mul_res_17_fu_1833_p1),
    .dout(mul_res_17_fu_1833_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U217(
    .din0(mul_res_18_fu_1861_p0),
    .din1(mul_res_18_fu_1861_p1),
    .dout(mul_res_18_fu_1861_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U218(
    .din0(mul_res_19_fu_1889_p0),
    .din1(mul_res_19_fu_1889_p1),
    .dout(mul_res_19_fu_1889_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U219(
    .din0(mul_res_20_fu_1917_p0),
    .din1(mul_res_20_fu_1917_p1),
    .dout(mul_res_20_fu_1917_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U220(
    .din0(mul_res_21_fu_1945_p0),
    .din1(mul_res_21_fu_1945_p1),
    .dout(mul_res_21_fu_1945_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U221(
    .din0(mul_res_22_fu_1973_p0),
    .din1(mul_res_22_fu_1973_p1),
    .dout(mul_res_22_fu_1973_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U222(
    .din0(mul_res_23_fu_2001_p0),
    .din1(mul_res_23_fu_2001_p1),
    .dout(mul_res_23_fu_2001_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U223(
    .din0(mul_res_24_fu_2029_p0),
    .din1(mul_res_24_fu_2029_p1),
    .dout(mul_res_24_fu_2029_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U224(
    .din0(mul_res_25_fu_2057_p0),
    .din1(mul_res_25_fu_2057_p1),
    .dout(mul_res_25_fu_2057_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U225(
    .din0(mul_res_26_fu_2085_p0),
    .din1(mul_res_26_fu_2085_p1),
    .dout(mul_res_26_fu_2085_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U226(
    .din0(mul_res_27_fu_2113_p0),
    .din1(mul_res_27_fu_2113_p1),
    .dout(mul_res_27_fu_2113_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U227(
    .din0(mul_res_28_fu_2141_p0),
    .din1(mul_res_28_fu_2141_p1),
    .dout(mul_res_28_fu_2141_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U228(
    .din0(mul_res_29_fu_2169_p0),
    .din1(mul_res_29_fu_2169_p1),
    .dout(mul_res_29_fu_2169_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U229(
    .din0(mul_res_30_fu_2197_p0),
    .din1(mul_res_30_fu_2197_p1),
    .dout(mul_res_30_fu_2197_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U230(
    .din0(mul_res_31_fu_2225_p0),
    .din1(mul_res_31_fu_2225_p1),
    .dout(mul_res_31_fu_2225_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U231(
    .din0(mul_res_32_fu_2253_p0),
    .din1(mul_res_32_fu_2253_p1),
    .dout(mul_res_32_fu_2253_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U232(
    .din0(mul_res_33_fu_2281_p0),
    .din1(mul_res_33_fu_2281_p1),
    .dout(mul_res_33_fu_2281_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U233(
    .din0(mul_res_34_fu_2309_p0),
    .din1(mul_res_34_fu_2309_p1),
    .dout(mul_res_34_fu_2309_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U234(
    .din0(mul_res_35_fu_2337_p0),
    .din1(mul_res_35_fu_2337_p1),
    .dout(mul_res_35_fu_2337_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U235(
    .din0(mul_res_36_fu_2365_p0),
    .din1(mul_res_36_fu_2365_p1),
    .dout(mul_res_36_fu_2365_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U236(
    .din0(mul_res_37_fu_2393_p0),
    .din1(mul_res_37_fu_2393_p1),
    .dout(mul_res_37_fu_2393_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U237(
    .din0(mul_res_38_fu_2421_p0),
    .din1(mul_res_38_fu_2421_p1),
    .dout(mul_res_38_fu_2421_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U238(
    .din0(mul_res_39_fu_2449_p0),
    .din1(mul_res_39_fu_2449_p1),
    .dout(mul_res_39_fu_2449_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U239(
    .din0(mul_res_40_fu_2477_p0),
    .din1(mul_res_40_fu_2477_p1),
    .dout(mul_res_40_fu_2477_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U240(
    .din0(mul_res_41_fu_2505_p0),
    .din1(mul_res_41_fu_2505_p1),
    .dout(mul_res_41_fu_2505_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U241(
    .din0(mul_res_42_fu_2533_p0),
    .din1(mul_res_42_fu_2533_p1),
    .dout(mul_res_42_fu_2533_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U242(
    .din0(mul_res_43_fu_2561_p0),
    .din1(mul_res_43_fu_2561_p1),
    .dout(mul_res_43_fu_2561_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U243(
    .din0(mul_res_44_fu_2589_p0),
    .din1(mul_res_44_fu_2589_p1),
    .dout(mul_res_44_fu_2589_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U244(
    .din0(mul_res_45_fu_2617_p0),
    .din1(mul_res_45_fu_2617_p1),
    .dout(mul_res_45_fu_2617_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U245(
    .din0(mul_res_46_fu_2645_p0),
    .din1(mul_res_46_fu_2645_p1),
    .dout(mul_res_46_fu_2645_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U246(
    .din0(mul_res_47_fu_2673_p0),
    .din1(mul_res_47_fu_2673_p1),
    .dout(mul_res_47_fu_2673_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U247(
    .din0(mul_res_48_fu_2701_p0),
    .din1(mul_res_48_fu_2701_p1),
    .dout(mul_res_48_fu_2701_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U248(
    .din0(mul_res_49_fu_2729_p0),
    .din1(mul_res_49_fu_2729_p1),
    .dout(mul_res_49_fu_2729_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U249(
    .din0(mul_res_50_fu_2757_p0),
    .din1(mul_res_50_fu_2757_p1),
    .dout(mul_res_50_fu_2757_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U250(
    .din0(mul_res_51_fu_2785_p0),
    .din1(mul_res_51_fu_2785_p1),
    .dout(mul_res_51_fu_2785_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U251(
    .din0(mul_res_52_fu_2813_p0),
    .din1(mul_res_52_fu_2813_p1),
    .dout(mul_res_52_fu_2813_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U252(
    .din0(mul_res_53_fu_2841_p0),
    .din1(mul_res_53_fu_2841_p1),
    .dout(mul_res_53_fu_2841_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U253(
    .din0(mul_res_54_fu_2869_p0),
    .din1(mul_res_54_fu_2869_p1),
    .dout(mul_res_54_fu_2869_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U254(
    .din0(mul_res_55_fu_2897_p0),
    .din1(mul_res_55_fu_2897_p1),
    .dout(mul_res_55_fu_2897_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U255(
    .din0(mul_res_56_fu_2925_p0),
    .din1(mul_res_56_fu_2925_p1),
    .dout(mul_res_56_fu_2925_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U256(
    .din0(mul_res_57_fu_2953_p0),
    .din1(mul_res_57_fu_2953_p1),
    .dout(mul_res_57_fu_2953_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U257(
    .din0(mul_res_58_fu_2981_p0),
    .din1(mul_res_58_fu_2981_p1),
    .dout(mul_res_58_fu_2981_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U258(
    .din0(mul_res_59_fu_3009_p0),
    .din1(mul_res_59_fu_3009_p1),
    .dout(mul_res_59_fu_3009_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U259(
    .din0(mul_res_60_fu_3037_p0),
    .din1(mul_res_60_fu_3037_p1),
    .dout(mul_res_60_fu_3037_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U260(
    .din0(mul_res_61_fu_3065_p0),
    .din1(mul_res_61_fu_3065_p1),
    .dout(mul_res_61_fu_3065_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U261(
    .din0(mul_res_62_fu_3093_p0),
    .din1(mul_res_62_fu_3093_p1),
    .dout(mul_res_62_fu_3093_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U262(
    .din0(mul_res_63_fu_3121_p0),
    .din1(mul_res_63_fu_3121_p1),
    .dout(mul_res_63_fu_3121_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U263(
    .din0(mul_res_64_fu_3149_p0),
    .din1(mul_res_64_fu_3149_p1),
    .dout(mul_res_64_fu_3149_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U264(
    .din0(mul_res_65_fu_3177_p0),
    .din1(mul_res_65_fu_3177_p1),
    .dout(mul_res_65_fu_3177_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U265(
    .din0(mul_res_66_fu_3205_p0),
    .din1(mul_res_66_fu_3205_p1),
    .dout(mul_res_66_fu_3205_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U266(
    .din0(mul_res_67_fu_3233_p0),
    .din1(mul_res_67_fu_3233_p1),
    .dout(mul_res_67_fu_3233_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U267(
    .din0(mul_res_68_fu_3261_p0),
    .din1(mul_res_68_fu_3261_p1),
    .dout(mul_res_68_fu_3261_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U268(
    .din0(mul_res_69_fu_3289_p0),
    .din1(mul_res_69_fu_3289_p1),
    .dout(mul_res_69_fu_3289_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U269(
    .din0(mul_res_70_fu_3317_p0),
    .din1(mul_res_70_fu_3317_p1),
    .dout(mul_res_70_fu_3317_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U270(
    .din0(mul_res_71_fu_3345_p0),
    .din1(mul_res_71_fu_3345_p1),
    .dout(mul_res_71_fu_3345_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U271(
    .din0(mul_res_72_fu_3363_p0),
    .din1(mul_res_72_fu_3363_p1),
    .dout(mul_res_72_fu_3363_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U272(
    .din0(mul_res_73_fu_3381_p0),
    .din1(mul_res_73_fu_3381_p1),
    .dout(mul_res_73_fu_3381_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U273(
    .din0(mul_res_74_fu_3399_p0),
    .din1(mul_res_74_fu_3399_p1),
    .dout(mul_res_74_fu_3399_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U274(
    .din0(mul_res_75_fu_3417_p0),
    .din1(mul_res_75_fu_3417_p1),
    .dout(mul_res_75_fu_3417_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U275(
    .din0(mul_res_76_fu_3435_p0),
    .din1(mul_res_76_fu_3435_p1),
    .dout(mul_res_76_fu_3435_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U276(
    .din0(mul_res_77_fu_3453_p0),
    .din1(mul_res_77_fu_3453_p1),
    .dout(mul_res_77_fu_3453_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U277(
    .din0(mul_res_78_fu_3467_p0),
    .din1(mul_res_78_fu_3467_p1),
    .dout(mul_res_78_fu_3467_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U278(
    .din0(mul_res_79_fu_3481_p0),
    .din1(mul_res_79_fu_3481_p1),
    .dout(mul_res_79_fu_3481_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U279(
    .din0(mul_res_80_fu_3495_p0),
    .din1(mul_res_80_fu_3495_p1),
    .dout(mul_res_80_fu_3495_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U280(
    .din0(mul_res_81_fu_3509_p0),
    .din1(mul_res_81_fu_3509_p1),
    .dout(mul_res_81_fu_3509_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U281(
    .din0(mul_res_82_fu_3523_p0),
    .din1(mul_res_82_fu_3523_p1),
    .dout(mul_res_82_fu_3523_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U282(
    .din0(mul_res_83_fu_3537_p0),
    .din1(mul_res_83_fu_3537_p1),
    .dout(mul_res_83_fu_3537_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U283(
    .din0(mul_res_84_fu_3551_p0),
    .din1(mul_res_84_fu_3551_p1),
    .dout(mul_res_84_fu_3551_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U284(
    .din0(mul_res_85_fu_3565_p0),
    .din1(mul_res_85_fu_3565_p1),
    .dout(mul_res_85_fu_3565_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U285(
    .din0(mul_res_86_fu_3579_p0),
    .din1(mul_res_86_fu_3579_p1),
    .dout(mul_res_86_fu_3579_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U286(
    .din0(mul_res_87_fu_3593_p0),
    .din1(mul_res_87_fu_3593_p1),
    .dout(mul_res_87_fu_3593_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U287(
    .din0(mul_res_88_fu_3607_p0),
    .din1(mul_res_88_fu_3607_p1),
    .dout(mul_res_88_fu_3607_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U288(
    .din0(mul_res_89_fu_3621_p0),
    .din1(mul_res_89_fu_3621_p1),
    .dout(mul_res_89_fu_3621_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U289(
    .din0(mul_res_90_fu_3635_p0),
    .din1(mul_res_90_fu_3635_p1),
    .dout(mul_res_90_fu_3635_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U290(
    .din0(mul_res_91_fu_3649_p0),
    .din1(mul_res_91_fu_3649_p1),
    .dout(mul_res_91_fu_3649_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U291(
    .din0(mul_res_92_fu_3663_p0),
    .din1(mul_res_92_fu_3663_p1),
    .dout(mul_res_92_fu_3663_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U292(
    .din0(mul_res_93_fu_3677_p0),
    .din1(mul_res_93_fu_3677_p1),
    .dout(mul_res_93_fu_3677_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U293(
    .din0(mul_res_94_fu_3691_p0),
    .din1(mul_res_94_fu_3691_p1),
    .dout(mul_res_94_fu_3691_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U294(
    .din0(mul_res_95_fu_3705_p0),
    .din1(mul_res_95_fu_3705_p1),
    .dout(mul_res_95_fu_3705_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U295(
    .din0(mul_res_96_fu_3719_p0),
    .din1(mul_res_96_fu_3719_p1),
    .dout(mul_res_96_fu_3719_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U296(
    .din0(mul_res_97_fu_3733_p0),
    .din1(mul_res_97_fu_3733_p1),
    .dout(mul_res_97_fu_3733_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U297(
    .din0(mul_res_98_fu_3747_p0),
    .din1(mul_res_98_fu_3747_p1),
    .dout(mul_res_98_fu_3747_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U298(
    .din0(mul_res_99_fu_3761_p0),
    .din1(mul_res_99_fu_3761_p1),
    .dout(mul_res_99_fu_3761_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U299(
    .din0(mul_res_100_fu_3775_p0),
    .din1(mul_res_100_fu_3775_p1),
    .dout(mul_res_100_fu_3775_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U300(
    .din0(mul_res_101_fu_3789_p0),
    .din1(mul_res_101_fu_3789_p1),
    .dout(mul_res_101_fu_3789_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U301(
    .din0(mul_res_102_fu_3803_p0),
    .din1(mul_res_102_fu_3803_p1),
    .dout(mul_res_102_fu_3803_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U302(
    .din0(mul_res_103_fu_3817_p0),
    .din1(mul_res_103_fu_3817_p1),
    .dout(mul_res_103_fu_3817_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U303(
    .din0(mul_res_104_fu_3831_p0),
    .din1(mul_res_104_fu_3831_p1),
    .dout(mul_res_104_fu_3831_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U304(
    .din0(mul_res_105_fu_3845_p0),
    .din1(mul_res_105_fu_3845_p1),
    .dout(mul_res_105_fu_3845_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U305(
    .din0(mul_res_106_fu_3859_p0),
    .din1(mul_res_106_fu_3859_p1),
    .dout(mul_res_106_fu_3859_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U306(
    .din0(mul_res_107_fu_3873_p0),
    .din1(mul_res_107_fu_3873_p1),
    .dout(mul_res_107_fu_3873_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U307(
    .din0(mul_res_108_fu_3887_p0),
    .din1(mul_res_108_fu_3887_p1),
    .dout(mul_res_108_fu_3887_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U308(
    .din0(mul_res_109_fu_3901_p0),
    .din1(mul_res_109_fu_3901_p1),
    .dout(mul_res_109_fu_3901_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U309(
    .din0(mul_res_110_fu_3915_p0),
    .din1(mul_res_110_fu_3915_p1),
    .dout(mul_res_110_fu_3915_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U310(
    .din0(mul_res_111_fu_3929_p0),
    .din1(mul_res_111_fu_3929_p1),
    .dout(mul_res_111_fu_3929_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U311(
    .din0(mul_res_112_fu_3943_p0),
    .din1(mul_res_112_fu_3943_p1),
    .dout(mul_res_112_fu_3943_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U312(
    .din0(mul_res_113_fu_3957_p0),
    .din1(mul_res_113_fu_3957_p1),
    .dout(mul_res_113_fu_3957_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U313(
    .din0(mul_res_114_fu_3971_p0),
    .din1(mul_res_114_fu_3971_p1),
    .dout(mul_res_114_fu_3971_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U314(
    .din0(mul_res_115_fu_3985_p0),
    .din1(mul_res_115_fu_3985_p1),
    .dout(mul_res_115_fu_3985_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U315(
    .din0(mul_res_116_fu_3999_p0),
    .din1(mul_res_116_fu_3999_p1),
    .dout(mul_res_116_fu_3999_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U316(
    .din0(mul_res_117_fu_4013_p0),
    .din1(mul_res_117_fu_4013_p1),
    .dout(mul_res_117_fu_4013_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U317(
    .din0(mul_res_118_fu_4027_p0),
    .din1(mul_res_118_fu_4027_p1),
    .dout(mul_res_118_fu_4027_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U318(
    .din0(mul_res_119_fu_4041_p0),
    .din1(mul_res_119_fu_4041_p1),
    .dout(mul_res_119_fu_4041_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U319(
    .din0(mul_res_120_fu_4055_p0),
    .din1(mul_res_120_fu_4055_p1),
    .dout(mul_res_120_fu_4055_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U320(
    .din0(mul_res_121_fu_4069_p0),
    .din1(mul_res_121_fu_4069_p1),
    .dout(mul_res_121_fu_4069_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U321(
    .din0(mul_res_122_fu_4083_p0),
    .din1(mul_res_122_fu_4083_p1),
    .dout(mul_res_122_fu_4083_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U322(
    .din0(mul_res_123_fu_4097_p0),
    .din1(mul_res_123_fu_4097_p1),
    .dout(mul_res_123_fu_4097_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U323(
    .din0(mul_res_124_fu_4111_p0),
    .din1(mul_res_124_fu_4111_p1),
    .dout(mul_res_124_fu_4111_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U324(
    .din0(mul_res_125_fu_4125_p0),
    .din1(mul_res_125_fu_4125_p1),
    .dout(mul_res_125_fu_4125_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U325(
    .din0(mul_res_126_fu_4139_p0),
    .din1(mul_res_126_fu_4139_p1),
    .dout(mul_res_126_fu_4139_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U326(
    .din0(mul_res_127_fu_4153_p0),
    .din1(mul_res_127_fu_4153_p1),
    .dout(mul_res_127_fu_4153_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U327(
    .din0(mul_res_128_fu_4167_p0),
    .din1(mul_res_128_fu_4167_p1),
    .dout(mul_res_128_fu_4167_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U328(
    .din0(mul_res_129_fu_4181_p0),
    .din1(mul_res_129_fu_4181_p1),
    .dout(mul_res_129_fu_4181_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U329(
    .din0(mul_res_130_fu_4195_p0),
    .din1(mul_res_130_fu_4195_p1),
    .dout(mul_res_130_fu_4195_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U330(
    .din0(mul_res_131_fu_4209_p0),
    .din1(mul_res_131_fu_4209_p1),
    .dout(mul_res_131_fu_4209_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U331(
    .din0(mul_res_132_fu_4223_p0),
    .din1(mul_res_132_fu_4223_p1),
    .dout(mul_res_132_fu_4223_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U332(
    .din0(mul_res_133_fu_4237_p0),
    .din1(mul_res_133_fu_4237_p1),
    .dout(mul_res_133_fu_4237_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U333(
    .din0(mul_res_134_fu_4251_p0),
    .din1(mul_res_134_fu_4251_p1),
    .dout(mul_res_134_fu_4251_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U334(
    .din0(mul_res_135_fu_4265_p0),
    .din1(mul_res_135_fu_4265_p1),
    .dout(mul_res_135_fu_4265_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U335(
    .din0(mul_res_136_fu_4279_p0),
    .din1(mul_res_136_fu_4279_p1),
    .dout(mul_res_136_fu_4279_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U336(
    .din0(mul_res_137_fu_4293_p0),
    .din1(mul_res_137_fu_4293_p1),
    .dout(mul_res_137_fu_4293_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U337(
    .din0(mul_res_138_fu_4307_p0),
    .din1(mul_res_138_fu_4307_p1),
    .dout(mul_res_138_fu_4307_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U338(
    .din0(mul_res_139_fu_4321_p0),
    .din1(mul_res_139_fu_4321_p1),
    .dout(mul_res_139_fu_4321_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U339(
    .din0(mul_res_140_fu_4335_p0),
    .din1(mul_res_140_fu_4335_p1),
    .dout(mul_res_140_fu_4335_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U340(
    .din0(mul_res_141_fu_4349_p0),
    .din1(mul_res_141_fu_4349_p1),
    .dout(mul_res_141_fu_4349_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U341(
    .din0(mul_res_142_fu_4363_p0),
    .din1(mul_res_142_fu_4363_p1),
    .dout(mul_res_142_fu_4363_p2)
);

ATTN11_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U342(
    .din0(mul_res_143_fu_4377_p0),
    .din1(mul_res_143_fu_4377_p1),
    .dout(mul_res_143_fu_4377_p2)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_652)) begin
        cit_fu_680 <= add_ln122_fu_1014_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_652)) begin
    cot_fu_780 <= select_ln121_1_fu_1002_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_749)) begin
    if ((icmp_ln120_fu_897_p2 == 1'd0)) begin
        indvar_flatten59_fu_788 <= add_ln120_fu_891_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten59_fu_788 <= 16'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_749)) begin
    if ((icmp_ln120_fu_897_p2 == 1'd0)) begin
        indvar_flatten_fu_784 <= select_ln121_2_fu_915_p3;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_784 <= 11'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln153_101_reg_7850 <= add_ln153_101_fu_5860_p2;
        add_ln153_107_reg_7855 <= add_ln153_107_fu_5930_p2;
        add_ln153_113_reg_7860 <= add_ln153_113_fu_6000_p2;
        add_ln153_119_reg_7865 <= add_ln153_119_fu_6070_p2;
        add_ln153_11_reg_7775 <= add_ln153_11_fu_4810_p2;
        add_ln153_125_reg_7870 <= add_ln153_125_fu_6140_p2;
        add_ln153_131_reg_7875 <= add_ln153_131_fu_6210_p2;
        add_ln153_137_reg_7880 <= add_ln153_137_fu_6280_p2;
        add_ln153_143_reg_7885 <= add_ln153_143_fu_6350_p2;
        add_ln153_17_reg_7780 <= add_ln153_17_fu_4880_p2;
        add_ln153_23_reg_7785 <= add_ln153_23_fu_4950_p2;
        add_ln153_29_reg_7790 <= add_ln153_29_fu_5020_p2;
        add_ln153_35_reg_7795 <= add_ln153_35_fu_5090_p2;
        add_ln153_41_reg_7800 <= add_ln153_41_fu_5160_p2;
        add_ln153_47_reg_7805 <= add_ln153_47_fu_5230_p2;
        add_ln153_53_reg_7810 <= add_ln153_53_fu_5300_p2;
        add_ln153_59_reg_7815 <= add_ln153_59_fu_5370_p2;
        add_ln153_5_reg_7770 <= add_ln153_5_fu_4740_p2;
        add_ln153_65_reg_7820 <= add_ln153_65_fu_5440_p2;
        add_ln153_71_reg_7825 <= add_ln153_71_fu_5510_p2;
        add_ln153_77_reg_7830 <= add_ln153_77_fu_5580_p2;
        add_ln153_83_reg_7835 <= add_ln153_83_fu_5650_p2;
        add_ln153_89_reg_7840 <= add_ln153_89_fu_5720_p2;
        add_ln153_95_reg_7845 <= add_ln153_95_fu_5790_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln126_reg_6947 <= icmp_ln126_fu_1073_p2;
        icmp_ln126_reg_6947_pp0_iter3_reg <= icmp_ln126_reg_6947;
        icmp_ln161_reg_6975 <= icmp_ln161_fu_1082_p2;
        icmp_ln161_reg_6975_pp0_iter3_reg <= icmp_ln161_reg_6975;
        icmp_ln161_reg_6975_pp0_iter4_reg <= icmp_ln161_reg_6975_pp0_iter3_reg;
        mul_res_100_reg_7550 <= mul_res_100_fu_3775_p2;
        mul_res_101_reg_7555 <= mul_res_101_fu_3789_p2;
        mul_res_102_reg_7560 <= mul_res_102_fu_3803_p2;
        mul_res_103_reg_7565 <= mul_res_103_fu_3817_p2;
        mul_res_104_reg_7570 <= mul_res_104_fu_3831_p2;
        mul_res_105_reg_7575 <= mul_res_105_fu_3845_p2;
        mul_res_106_reg_7580 <= mul_res_106_fu_3859_p2;
        mul_res_107_reg_7585 <= mul_res_107_fu_3873_p2;
        mul_res_108_reg_7590 <= mul_res_108_fu_3887_p2;
        mul_res_109_reg_7595 <= mul_res_109_fu_3901_p2;
        mul_res_10_reg_7100 <= mul_res_10_fu_1637_p2;
        mul_res_110_reg_7600 <= mul_res_110_fu_3915_p2;
        mul_res_111_reg_7605 <= mul_res_111_fu_3929_p2;
        mul_res_112_reg_7610 <= mul_res_112_fu_3943_p2;
        mul_res_113_reg_7615 <= mul_res_113_fu_3957_p2;
        mul_res_114_reg_7620 <= mul_res_114_fu_3971_p2;
        mul_res_115_reg_7625 <= mul_res_115_fu_3985_p2;
        mul_res_116_reg_7630 <= mul_res_116_fu_3999_p2;
        mul_res_117_reg_7635 <= mul_res_117_fu_4013_p2;
        mul_res_118_reg_7640 <= mul_res_118_fu_4027_p2;
        mul_res_119_reg_7645 <= mul_res_119_fu_4041_p2;
        mul_res_11_reg_7105 <= mul_res_11_fu_1665_p2;
        mul_res_120_reg_7650 <= mul_res_120_fu_4055_p2;
        mul_res_121_reg_7655 <= mul_res_121_fu_4069_p2;
        mul_res_122_reg_7660 <= mul_res_122_fu_4083_p2;
        mul_res_123_reg_7665 <= mul_res_123_fu_4097_p2;
        mul_res_124_reg_7670 <= mul_res_124_fu_4111_p2;
        mul_res_125_reg_7675 <= mul_res_125_fu_4125_p2;
        mul_res_126_reg_7680 <= mul_res_126_fu_4139_p2;
        mul_res_127_reg_7685 <= mul_res_127_fu_4153_p2;
        mul_res_128_reg_7690 <= mul_res_128_fu_4167_p2;
        mul_res_129_reg_7695 <= mul_res_129_fu_4181_p2;
        mul_res_12_reg_7110 <= mul_res_12_fu_1693_p2;
        mul_res_130_reg_7700 <= mul_res_130_fu_4195_p2;
        mul_res_131_reg_7705 <= mul_res_131_fu_4209_p2;
        mul_res_132_reg_7710 <= mul_res_132_fu_4223_p2;
        mul_res_133_reg_7715 <= mul_res_133_fu_4237_p2;
        mul_res_134_reg_7720 <= mul_res_134_fu_4251_p2;
        mul_res_135_reg_7725 <= mul_res_135_fu_4265_p2;
        mul_res_136_reg_7730 <= mul_res_136_fu_4279_p2;
        mul_res_137_reg_7735 <= mul_res_137_fu_4293_p2;
        mul_res_138_reg_7740 <= mul_res_138_fu_4307_p2;
        mul_res_139_reg_7745 <= mul_res_139_fu_4321_p2;
        mul_res_13_reg_7115 <= mul_res_13_fu_1721_p2;
        mul_res_140_reg_7750 <= mul_res_140_fu_4335_p2;
        mul_res_141_reg_7755 <= mul_res_141_fu_4349_p2;
        mul_res_142_reg_7760 <= mul_res_142_fu_4363_p2;
        mul_res_143_reg_7765 <= mul_res_143_fu_4377_p2;
        mul_res_14_reg_7120 <= mul_res_14_fu_1749_p2;
        mul_res_15_reg_7125 <= mul_res_15_fu_1777_p2;
        mul_res_16_reg_7130 <= mul_res_16_fu_1805_p2;
        mul_res_17_reg_7135 <= mul_res_17_fu_1833_p2;
        mul_res_18_reg_7140 <= mul_res_18_fu_1861_p2;
        mul_res_19_reg_7145 <= mul_res_19_fu_1889_p2;
        mul_res_1_reg_7055 <= mul_res_1_fu_1369_p2;
        mul_res_20_reg_7150 <= mul_res_20_fu_1917_p2;
        mul_res_21_reg_7155 <= mul_res_21_fu_1945_p2;
        mul_res_22_reg_7160 <= mul_res_22_fu_1973_p2;
        mul_res_23_reg_7165 <= mul_res_23_fu_2001_p2;
        mul_res_24_reg_7170 <= mul_res_24_fu_2029_p2;
        mul_res_25_reg_7175 <= mul_res_25_fu_2057_p2;
        mul_res_26_reg_7180 <= mul_res_26_fu_2085_p2;
        mul_res_27_reg_7185 <= mul_res_27_fu_2113_p2;
        mul_res_28_reg_7190 <= mul_res_28_fu_2141_p2;
        mul_res_29_reg_7195 <= mul_res_29_fu_2169_p2;
        mul_res_2_reg_7060 <= mul_res_2_fu_1401_p2;
        mul_res_30_reg_7200 <= mul_res_30_fu_2197_p2;
        mul_res_31_reg_7205 <= mul_res_31_fu_2225_p2;
        mul_res_32_reg_7210 <= mul_res_32_fu_2253_p2;
        mul_res_33_reg_7215 <= mul_res_33_fu_2281_p2;
        mul_res_34_reg_7220 <= mul_res_34_fu_2309_p2;
        mul_res_35_reg_7225 <= mul_res_35_fu_2337_p2;
        mul_res_36_reg_7230 <= mul_res_36_fu_2365_p2;
        mul_res_37_reg_7235 <= mul_res_37_fu_2393_p2;
        mul_res_38_reg_7240 <= mul_res_38_fu_2421_p2;
        mul_res_39_reg_7245 <= mul_res_39_fu_2449_p2;
        mul_res_3_reg_7065 <= mul_res_3_fu_1433_p2;
        mul_res_40_reg_7250 <= mul_res_40_fu_2477_p2;
        mul_res_41_reg_7255 <= mul_res_41_fu_2505_p2;
        mul_res_42_reg_7260 <= mul_res_42_fu_2533_p2;
        mul_res_43_reg_7265 <= mul_res_43_fu_2561_p2;
        mul_res_44_reg_7270 <= mul_res_44_fu_2589_p2;
        mul_res_45_reg_7275 <= mul_res_45_fu_2617_p2;
        mul_res_46_reg_7280 <= mul_res_46_fu_2645_p2;
        mul_res_47_reg_7285 <= mul_res_47_fu_2673_p2;
        mul_res_48_reg_7290 <= mul_res_48_fu_2701_p2;
        mul_res_49_reg_7295 <= mul_res_49_fu_2729_p2;
        mul_res_4_reg_7070 <= mul_res_4_fu_1465_p2;
        mul_res_50_reg_7300 <= mul_res_50_fu_2757_p2;
        mul_res_51_reg_7305 <= mul_res_51_fu_2785_p2;
        mul_res_52_reg_7310 <= mul_res_52_fu_2813_p2;
        mul_res_53_reg_7315 <= mul_res_53_fu_2841_p2;
        mul_res_54_reg_7320 <= mul_res_54_fu_2869_p2;
        mul_res_55_reg_7325 <= mul_res_55_fu_2897_p2;
        mul_res_56_reg_7330 <= mul_res_56_fu_2925_p2;
        mul_res_57_reg_7335 <= mul_res_57_fu_2953_p2;
        mul_res_58_reg_7340 <= mul_res_58_fu_2981_p2;
        mul_res_59_reg_7345 <= mul_res_59_fu_3009_p2;
        mul_res_5_reg_7075 <= mul_res_5_fu_1497_p2;
        mul_res_60_reg_7350 <= mul_res_60_fu_3037_p2;
        mul_res_61_reg_7355 <= mul_res_61_fu_3065_p2;
        mul_res_62_reg_7360 <= mul_res_62_fu_3093_p2;
        mul_res_63_reg_7365 <= mul_res_63_fu_3121_p2;
        mul_res_64_reg_7370 <= mul_res_64_fu_3149_p2;
        mul_res_65_reg_7375 <= mul_res_65_fu_3177_p2;
        mul_res_66_reg_7380 <= mul_res_66_fu_3205_p2;
        mul_res_67_reg_7385 <= mul_res_67_fu_3233_p2;
        mul_res_68_reg_7390 <= mul_res_68_fu_3261_p2;
        mul_res_69_reg_7395 <= mul_res_69_fu_3289_p2;
        mul_res_6_reg_7080 <= mul_res_6_fu_1525_p2;
        mul_res_70_reg_7400 <= mul_res_70_fu_3317_p2;
        mul_res_71_reg_7405 <= mul_res_71_fu_3345_p2;
        mul_res_72_reg_7410 <= mul_res_72_fu_3363_p2;
        mul_res_73_reg_7415 <= mul_res_73_fu_3381_p2;
        mul_res_74_reg_7420 <= mul_res_74_fu_3399_p2;
        mul_res_75_reg_7425 <= mul_res_75_fu_3417_p2;
        mul_res_76_reg_7430 <= mul_res_76_fu_3435_p2;
        mul_res_77_reg_7435 <= mul_res_77_fu_3453_p2;
        mul_res_78_reg_7440 <= mul_res_78_fu_3467_p2;
        mul_res_79_reg_7445 <= mul_res_79_fu_3481_p2;
        mul_res_7_reg_7085 <= mul_res_7_fu_1553_p2;
        mul_res_80_reg_7450 <= mul_res_80_fu_3495_p2;
        mul_res_81_reg_7455 <= mul_res_81_fu_3509_p2;
        mul_res_82_reg_7460 <= mul_res_82_fu_3523_p2;
        mul_res_83_reg_7465 <= mul_res_83_fu_3537_p2;
        mul_res_84_reg_7470 <= mul_res_84_fu_3551_p2;
        mul_res_85_reg_7475 <= mul_res_85_fu_3565_p2;
        mul_res_86_reg_7480 <= mul_res_86_fu_3579_p2;
        mul_res_87_reg_7485 <= mul_res_87_fu_3593_p2;
        mul_res_88_reg_7490 <= mul_res_88_fu_3607_p2;
        mul_res_89_reg_7495 <= mul_res_89_fu_3621_p2;
        mul_res_8_reg_7090 <= mul_res_8_fu_1581_p2;
        mul_res_90_reg_7500 <= mul_res_90_fu_3635_p2;
        mul_res_91_reg_7505 <= mul_res_91_fu_3649_p2;
        mul_res_92_reg_7510 <= mul_res_92_fu_3663_p2;
        mul_res_93_reg_7515 <= mul_res_93_fu_3677_p2;
        mul_res_94_reg_7520 <= mul_res_94_fu_3691_p2;
        mul_res_95_reg_7525 <= mul_res_95_fu_3705_p2;
        mul_res_96_reg_7530 <= mul_res_96_fu_3719_p2;
        mul_res_97_reg_7535 <= mul_res_97_fu_3733_p2;
        mul_res_98_reg_7540 <= mul_res_98_fu_3747_p2;
        mul_res_99_reg_7545 <= mul_res_99_fu_3761_p2;
        mul_res_9_reg_7095 <= mul_res_9_fu_1609_p2;
        mul_res_reg_7050 <= mul_res_fu_1337_p2;
        tmp_10_reg_7045 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[116:110]}};
        tmp_1_reg_6991 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[29:20]}};
        tmp_2_reg_6997 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[39:30]}};
        tmp_3_reg_7003 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[49:40]}};
        tmp_4_reg_7009 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[59:50]}};
        tmp_5_reg_7015 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[69:60]}};
        tmp_6_reg_7021 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[79:70]}};
        tmp_7_reg_7027 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[89:80]}};
        tmp_8_reg_7033 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[99:90]}};
        tmp_9_reg_7039 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[109:100]}};
        tmp_s_reg_6985 <= {{attn_inst_matmul_gen_k_bias_arr_659_q0[19:10]}};
        trunc_ln131_reg_6979 <= trunc_ln131_fu_1087_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln121_reg_6913 <= icmp_ln121_fu_903_p2;
        select_ln121_1_reg_6927 <= select_ln121_1_fu_1002_p3;
        select_ln121_reg_6920 <= select_ln121_fu_994_p3;
        trunc_ln121_reg_6932 <= trunc_ln121_fu_1010_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_0_0_0364_fu_684 <= add_ln153_5_fu_4740_p2;
        p_0_0_0388_fu_732 <= add_ln153_77_fu_5580_p2;
        p_0_0_0_10384_fu_724 <= add_ln153_65_fu_5440_p2;
        p_0_0_0_10408_fu_772 <= add_ln153_137_fu_6280_p2;
        p_0_0_0_112366_fu_688 <= add_ln153_11_fu_4810_p2;
        p_0_0_0_112390_fu_736 <= add_ln153_83_fu_5650_p2;
        p_0_0_0_11386_fu_728 <= add_ln153_71_fu_5510_p2;
        p_0_0_0_11410_fu_776 <= add_ln153_143_fu_6350_p2;
        p_0_0_0_2368_fu_692 <= add_ln153_17_fu_4880_p2;
        p_0_0_0_2392_fu_740 <= add_ln153_89_fu_5720_p2;
        p_0_0_0_3370_fu_696 <= add_ln153_23_fu_4950_p2;
        p_0_0_0_3394_fu_744 <= add_ln153_95_fu_5790_p2;
        p_0_0_0_4372_fu_700 <= add_ln153_29_fu_5020_p2;
        p_0_0_0_4396_fu_748 <= add_ln153_101_fu_5860_p2;
        p_0_0_0_5374_fu_704 <= add_ln153_35_fu_5090_p2;
        p_0_0_0_5398_fu_752 <= add_ln153_107_fu_5930_p2;
        p_0_0_0_6376_fu_708 <= add_ln153_41_fu_5160_p2;
        p_0_0_0_6400_fu_756 <= add_ln153_113_fu_6000_p2;
        p_0_0_0_7378_fu_712 <= add_ln153_47_fu_5230_p2;
        p_0_0_0_7402_fu_760 <= add_ln153_119_fu_6070_p2;
        p_0_0_0_8380_fu_716 <= add_ln153_53_fu_5300_p2;
        p_0_0_0_8404_fu_764 <= add_ln153_125_fu_6140_p2;
        p_0_0_0_9382_fu_720 <= add_ln153_59_fu_5370_p2;
        p_0_0_0_9406_fu_768 <= add_ln153_131_fu_6210_p2;
    end
end

always @ (*) begin
    if (((icmp_ln120_fu_897_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cit_load = 6'd0;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_680;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_cot_load = 5'd0;
    end else begin
        ap_sig_allocacmp_cot_load = cot_fu_780;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_788;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_784;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_k_bias_arr_659_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_k_bias_arr_659_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_matmul_gen_k_weight_arr_658_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_k_weight_arr_658_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln161_reg_6975_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln161_reg_6975_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_891_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 16'd1);

assign add_ln121_1_fu_909_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln121_fu_983_p2 = (select_ln120_fu_959_p3 + 5'd1);

assign add_ln122_fu_1014_p2 = (select_ln121_fu_994_p3 + 6'd1);

assign add_ln151_fu_1062_p2 = (tmp_11_fu_1048_p3 + zext_ln151_fu_1059_p1);

assign add_ln153_100_fu_5850_p2 = ($signed(sext_ln153_83_fu_5846_p1) + $signed(sext_ln153_82_fu_5836_p1));

assign add_ln153_101_fu_5860_p2 = ($signed(sext_ln153_84_fu_5856_p1) + $signed(add_ln153_97_fu_5824_p2));

assign add_ln153_102_fu_5884_p2 = ($signed(sext_ln151_172_fu_5875_p1) + $signed(sext_ln151_173_fu_5878_p1));

assign add_ln153_103_fu_5894_p2 = ($signed(sext_ln153_86_fu_5890_p1) + $signed(select_ln126_6_fu_4567_p3));

assign add_ln153_104_fu_5900_p2 = ($signed(sext_ln151_171_fu_5872_p1) + $signed(sext_ln151_170_fu_5869_p1));

assign add_ln153_105_fu_5910_p2 = ($signed(sext_ln151_169_fu_5866_p1) + $signed(sext_ln153_85_fu_5881_p1));

assign add_ln153_106_fu_5920_p2 = ($signed(sext_ln153_88_fu_5916_p1) + $signed(sext_ln153_87_fu_5906_p1));

assign add_ln153_107_fu_5930_p2 = ($signed(sext_ln153_89_fu_5926_p1) + $signed(add_ln153_103_fu_5894_p2));

assign add_ln153_108_fu_5954_p2 = ($signed(sext_ln151_177_fu_5945_p1) + $signed(sext_ln151_178_fu_5948_p1));

assign add_ln153_109_fu_5964_p2 = ($signed(sext_ln153_91_fu_5960_p1) + $signed(select_ln126_5_fu_4561_p3));

assign add_ln153_10_fu_4794_p2 = ($signed(sext_ln153_8_fu_4790_p1) + $signed(sext_ln153_7_fu_4780_p1));

assign add_ln153_110_fu_5970_p2 = ($signed(sext_ln151_176_fu_5942_p1) + $signed(sext_ln151_175_fu_5939_p1));

assign add_ln153_111_fu_5980_p2 = ($signed(sext_ln151_174_fu_5936_p1) + $signed(sext_ln153_90_fu_5951_p1));

assign add_ln153_112_fu_5990_p2 = ($signed(sext_ln153_93_fu_5986_p1) + $signed(sext_ln153_92_fu_5976_p1));

assign add_ln153_113_fu_6000_p2 = ($signed(sext_ln153_94_fu_5996_p1) + $signed(add_ln153_109_fu_5964_p2));

assign add_ln153_114_fu_6024_p2 = ($signed(sext_ln151_182_fu_6015_p1) + $signed(sext_ln151_183_fu_6018_p1));

assign add_ln153_115_fu_6034_p2 = ($signed(sext_ln153_96_fu_6030_p1) + $signed(select_ln126_4_fu_4555_p3));

assign add_ln153_116_fu_6040_p2 = ($signed(sext_ln151_181_fu_6012_p1) + $signed(sext_ln151_180_fu_6009_p1));

assign add_ln153_117_fu_6050_p2 = ($signed(sext_ln151_179_fu_6006_p1) + $signed(sext_ln153_95_fu_6021_p1));

assign add_ln153_118_fu_6060_p2 = ($signed(sext_ln153_98_fu_6056_p1) + $signed(sext_ln153_97_fu_6046_p1));

assign add_ln153_119_fu_6070_p2 = ($signed(sext_ln153_99_fu_6066_p1) + $signed(add_ln153_115_fu_6034_p2));

assign add_ln153_11_fu_4810_p2 = (add_ln153_7_fu_4804_p2 + select_ln126_22_fu_4664_p3);

assign add_ln153_120_fu_6094_p2 = ($signed(sext_ln151_187_fu_6085_p1) + $signed(sext_ln151_188_fu_6088_p1));

assign add_ln153_121_fu_6104_p2 = ($signed(sext_ln153_101_fu_6100_p1) + $signed(select_ln126_3_fu_4549_p3));

assign add_ln153_122_fu_6110_p2 = ($signed(sext_ln151_186_fu_6082_p1) + $signed(sext_ln151_185_fu_6079_p1));

assign add_ln153_123_fu_6120_p2 = ($signed(sext_ln151_184_fu_6076_p1) + $signed(sext_ln153_100_fu_6091_p1));

assign add_ln153_124_fu_6130_p2 = ($signed(sext_ln153_103_fu_6126_p1) + $signed(sext_ln153_102_fu_6116_p1));

assign add_ln153_125_fu_6140_p2 = ($signed(sext_ln153_104_fu_6136_p1) + $signed(add_ln153_121_fu_6104_p2));

assign add_ln153_126_fu_6164_p2 = ($signed(sext_ln151_192_fu_6155_p1) + $signed(sext_ln151_193_fu_6158_p1));

assign add_ln153_127_fu_6174_p2 = ($signed(sext_ln153_106_fu_6170_p1) + $signed(select_ln126_2_fu_4543_p3));

assign add_ln153_128_fu_6180_p2 = ($signed(sext_ln151_191_fu_6152_p1) + $signed(sext_ln151_190_fu_6149_p1));

assign add_ln153_129_fu_6190_p2 = ($signed(sext_ln151_189_fu_6146_p1) + $signed(sext_ln153_105_fu_6161_p1));

assign add_ln153_12_fu_4834_p2 = ($signed(sext_ln151_35_fu_4825_p1) + $signed(sext_ln151_37_fu_4828_p1));

assign add_ln153_130_fu_6200_p2 = ($signed(sext_ln153_108_fu_6196_p1) + $signed(sext_ln153_107_fu_6186_p1));

assign add_ln153_131_fu_6210_p2 = ($signed(sext_ln153_109_fu_6206_p1) + $signed(add_ln153_127_fu_6174_p2));

assign add_ln153_132_fu_6234_p2 = ($signed(sext_ln151_197_fu_6225_p1) + $signed(sext_ln151_198_fu_6228_p1));

assign add_ln153_133_fu_6244_p2 = ($signed(sext_ln153_111_fu_6240_p1) + $signed(select_ln126_1_fu_4537_p3));

assign add_ln153_134_fu_6250_p2 = ($signed(sext_ln151_196_fu_6222_p1) + $signed(sext_ln151_195_fu_6219_p1));

assign add_ln153_135_fu_6260_p2 = ($signed(sext_ln151_194_fu_6216_p1) + $signed(sext_ln153_110_fu_6231_p1));

assign add_ln153_136_fu_6270_p2 = ($signed(sext_ln153_113_fu_6266_p1) + $signed(sext_ln153_112_fu_6256_p1));

assign add_ln153_137_fu_6280_p2 = ($signed(sext_ln153_114_fu_6276_p1) + $signed(add_ln153_133_fu_6244_p2));

assign add_ln153_138_fu_6304_p2 = ($signed(sext_ln151_202_fu_6295_p1) + $signed(sext_ln151_203_fu_6298_p1));

assign add_ln153_139_fu_6314_p2 = ($signed(sext_ln153_116_fu_6310_p1) + $signed(select_ln126_fu_4530_p3));

assign add_ln153_13_fu_4874_p2 = ($signed(sext_ln153_14_fu_4870_p1) + $signed(sext_ln153_11_fu_4840_p1));

assign add_ln153_140_fu_6320_p2 = ($signed(sext_ln151_201_fu_6292_p1) + $signed(sext_ln151_200_fu_6289_p1));

assign add_ln153_141_fu_6330_p2 = ($signed(sext_ln151_199_fu_6286_p1) + $signed(sext_ln153_115_fu_6301_p1));

assign add_ln153_142_fu_6340_p2 = ($signed(sext_ln153_118_fu_6336_p1) + $signed(sext_ln153_117_fu_6326_p1));

assign add_ln153_143_fu_6350_p2 = ($signed(sext_ln153_119_fu_6346_p1) + $signed(add_ln153_139_fu_6314_p2));

assign add_ln153_14_fu_4844_p2 = ($signed(sext_ln151_33_fu_4822_p1) + $signed(sext_ln151_31_fu_4819_p1));

assign add_ln153_15_fu_4854_p2 = ($signed(sext_ln151_29_fu_4816_p1) + $signed(sext_ln153_10_fu_4831_p1));

assign add_ln153_16_fu_4864_p2 = ($signed(sext_ln153_13_fu_4860_p1) + $signed(sext_ln153_12_fu_4850_p1));

assign add_ln153_17_fu_4880_p2 = (add_ln153_13_fu_4874_p2 + select_ln126_21_fu_4658_p3);

assign add_ln153_18_fu_4904_p2 = ($signed(sext_ln151_46_fu_4895_p1) + $signed(sext_ln151_48_fu_4898_p1));

assign add_ln153_19_fu_4944_p2 = ($signed(sext_ln153_19_fu_4940_p1) + $signed(sext_ln153_16_fu_4910_p1));

assign add_ln153_1_fu_4734_p2 = ($signed(sext_ln153_4_fu_4730_p1) + $signed(sext_ln153_1_fu_4700_p1));

assign add_ln153_20_fu_4914_p2 = ($signed(sext_ln151_44_fu_4892_p1) + $signed(sext_ln151_42_fu_4889_p1));

assign add_ln153_21_fu_4924_p2 = ($signed(sext_ln151_40_fu_4886_p1) + $signed(sext_ln153_15_fu_4901_p1));

assign add_ln153_22_fu_4934_p2 = ($signed(sext_ln153_18_fu_4930_p1) + $signed(sext_ln153_17_fu_4920_p1));

assign add_ln153_23_fu_4950_p2 = (add_ln153_19_fu_4944_p2 + select_ln126_20_fu_4652_p3);

assign add_ln153_24_fu_4974_p2 = ($signed(sext_ln151_57_fu_4965_p1) + $signed(sext_ln151_59_fu_4968_p1));

assign add_ln153_25_fu_5014_p2 = ($signed(sext_ln153_24_fu_5010_p1) + $signed(sext_ln153_21_fu_4980_p1));

assign add_ln153_26_fu_4984_p2 = ($signed(sext_ln151_55_fu_4962_p1) + $signed(sext_ln151_53_fu_4959_p1));

assign add_ln153_27_fu_4994_p2 = ($signed(sext_ln151_51_fu_4956_p1) + $signed(sext_ln153_20_fu_4971_p1));

assign add_ln153_28_fu_5004_p2 = ($signed(sext_ln153_23_fu_5000_p1) + $signed(sext_ln153_22_fu_4990_p1));

assign add_ln153_29_fu_5020_p2 = (add_ln153_25_fu_5014_p2 + select_ln126_19_fu_4646_p3);

assign add_ln153_2_fu_4704_p2 = ($signed(sext_ln151_8_fu_4682_p1) + $signed(sext_ln151_5_fu_4679_p1));

assign add_ln153_30_fu_5044_p2 = ($signed(sext_ln151_68_fu_5035_p1) + $signed(sext_ln151_70_fu_5038_p1));

assign add_ln153_31_fu_5084_p2 = ($signed(sext_ln153_29_fu_5080_p1) + $signed(sext_ln153_26_fu_5050_p1));

assign add_ln153_32_fu_5054_p2 = ($signed(sext_ln151_66_fu_5032_p1) + $signed(sext_ln151_64_fu_5029_p1));

assign add_ln153_33_fu_5064_p2 = ($signed(sext_ln151_62_fu_5026_p1) + $signed(sext_ln153_25_fu_5041_p1));

assign add_ln153_34_fu_5074_p2 = ($signed(sext_ln153_28_fu_5070_p1) + $signed(sext_ln153_27_fu_5060_p1));

assign add_ln153_35_fu_5090_p2 = (add_ln153_31_fu_5084_p2 + select_ln126_18_fu_4640_p3);

assign add_ln153_36_fu_5114_p2 = ($signed(sext_ln151_79_fu_5105_p1) + $signed(sext_ln151_81_fu_5108_p1));

assign add_ln153_37_fu_5154_p2 = ($signed(sext_ln153_34_fu_5150_p1) + $signed(sext_ln153_31_fu_5120_p1));

assign add_ln153_38_fu_5124_p2 = ($signed(sext_ln151_77_fu_5102_p1) + $signed(sext_ln151_75_fu_5099_p1));

assign add_ln153_39_fu_5134_p2 = ($signed(sext_ln151_73_fu_5096_p1) + $signed(sext_ln153_30_fu_5111_p1));

assign add_ln153_3_fu_4714_p2 = ($signed(sext_ln151_2_fu_4676_p1) + $signed(sext_ln153_fu_4691_p1));

assign add_ln153_40_fu_5144_p2 = ($signed(sext_ln153_33_fu_5140_p1) + $signed(sext_ln153_32_fu_5130_p1));

assign add_ln153_41_fu_5160_p2 = (add_ln153_37_fu_5154_p2 + select_ln126_17_fu_4634_p3);

assign add_ln153_42_fu_5184_p2 = ($signed(sext_ln151_90_fu_5175_p1) + $signed(sext_ln151_92_fu_5178_p1));

assign add_ln153_43_fu_5224_p2 = ($signed(sext_ln153_39_fu_5220_p1) + $signed(sext_ln153_36_fu_5190_p1));

assign add_ln153_44_fu_5194_p2 = ($signed(sext_ln151_88_fu_5172_p1) + $signed(sext_ln151_86_fu_5169_p1));

assign add_ln153_45_fu_5204_p2 = ($signed(sext_ln151_84_fu_5166_p1) + $signed(sext_ln153_35_fu_5181_p1));

assign add_ln153_46_fu_5214_p2 = ($signed(sext_ln153_38_fu_5210_p1) + $signed(sext_ln153_37_fu_5200_p1));

assign add_ln153_47_fu_5230_p2 = (add_ln153_43_fu_5224_p2 + select_ln126_16_fu_4628_p3);

assign add_ln153_48_fu_5254_p2 = ($signed(sext_ln151_101_fu_5245_p1) + $signed(sext_ln151_103_fu_5248_p1));

assign add_ln153_49_fu_5294_p2 = ($signed(sext_ln153_44_fu_5290_p1) + $signed(sext_ln153_41_fu_5260_p1));

assign add_ln153_4_fu_4724_p2 = ($signed(sext_ln153_3_fu_4720_p1) + $signed(sext_ln153_2_fu_4710_p1));

assign add_ln153_50_fu_5264_p2 = ($signed(sext_ln151_99_fu_5242_p1) + $signed(sext_ln151_97_fu_5239_p1));

assign add_ln153_51_fu_5274_p2 = ($signed(sext_ln151_95_fu_5236_p1) + $signed(sext_ln153_40_fu_5251_p1));

assign add_ln153_52_fu_5284_p2 = ($signed(sext_ln153_43_fu_5280_p1) + $signed(sext_ln153_42_fu_5270_p1));

assign add_ln153_53_fu_5300_p2 = (add_ln153_49_fu_5294_p2 + select_ln126_15_fu_4622_p3);

assign add_ln153_54_fu_5324_p2 = ($signed(sext_ln151_112_fu_5315_p1) + $signed(sext_ln151_114_fu_5318_p1));

assign add_ln153_55_fu_5364_p2 = ($signed(sext_ln153_49_fu_5360_p1) + $signed(sext_ln153_46_fu_5330_p1));

assign add_ln153_56_fu_5334_p2 = ($signed(sext_ln151_110_fu_5312_p1) + $signed(sext_ln151_108_fu_5309_p1));

assign add_ln153_57_fu_5344_p2 = ($signed(sext_ln151_106_fu_5306_p1) + $signed(sext_ln153_45_fu_5321_p1));

assign add_ln153_58_fu_5354_p2 = ($signed(sext_ln153_48_fu_5350_p1) + $signed(sext_ln153_47_fu_5340_p1));

assign add_ln153_59_fu_5370_p2 = (add_ln153_55_fu_5364_p2 + select_ln126_14_fu_4616_p3);

assign add_ln153_5_fu_4740_p2 = (add_ln153_1_fu_4734_p2 + select_ln126_23_fu_4670_p3);

assign add_ln153_60_fu_5394_p2 = ($signed(sext_ln151_123_fu_5385_p1) + $signed(sext_ln151_125_fu_5388_p1));

assign add_ln153_61_fu_5404_p2 = ($signed(sext_ln153_51_fu_5400_p1) + $signed(select_ln126_13_fu_4610_p3));

assign add_ln153_62_fu_5410_p2 = ($signed(sext_ln151_121_fu_5382_p1) + $signed(sext_ln151_119_fu_5379_p1));

assign add_ln153_63_fu_5420_p2 = ($signed(sext_ln151_117_fu_5376_p1) + $signed(sext_ln153_50_fu_5391_p1));

assign add_ln153_64_fu_5430_p2 = ($signed(sext_ln153_53_fu_5426_p1) + $signed(sext_ln153_52_fu_5416_p1));

assign add_ln153_65_fu_5440_p2 = ($signed(sext_ln153_54_fu_5436_p1) + $signed(add_ln153_61_fu_5404_p2));

assign add_ln153_66_fu_5464_p2 = ($signed(sext_ln151_134_fu_5455_p1) + $signed(sext_ln151_136_fu_5458_p1));

assign add_ln153_67_fu_5474_p2 = ($signed(sext_ln153_56_fu_5470_p1) + $signed(select_ln126_12_fu_4603_p3));

assign add_ln153_68_fu_5480_p2 = ($signed(sext_ln151_132_fu_5452_p1) + $signed(sext_ln151_130_fu_5449_p1));

assign add_ln153_69_fu_5490_p2 = ($signed(sext_ln151_128_fu_5446_p1) + $signed(sext_ln153_55_fu_5461_p1));

assign add_ln153_6_fu_4764_p2 = ($signed(sext_ln151_24_fu_4755_p1) + $signed(sext_ln151_26_fu_4758_p1));

assign add_ln153_70_fu_5500_p2 = ($signed(sext_ln153_58_fu_5496_p1) + $signed(sext_ln153_57_fu_5486_p1));

assign add_ln153_71_fu_5510_p2 = ($signed(sext_ln153_59_fu_5506_p1) + $signed(add_ln153_67_fu_5474_p2));

assign add_ln153_72_fu_5534_p2 = ($signed(sext_ln151_145_fu_5525_p1) + $signed(sext_ln151_147_fu_5528_p1));

assign add_ln153_73_fu_5544_p2 = ($signed(sext_ln153_61_fu_5540_p1) + $signed(select_ln126_11_fu_4597_p3));

assign add_ln153_74_fu_5550_p2 = ($signed(sext_ln151_143_fu_5522_p1) + $signed(sext_ln151_141_fu_5519_p1));

assign add_ln153_75_fu_5560_p2 = ($signed(sext_ln151_139_fu_5516_p1) + $signed(sext_ln153_60_fu_5531_p1));

assign add_ln153_76_fu_5570_p2 = ($signed(sext_ln153_63_fu_5566_p1) + $signed(sext_ln153_62_fu_5556_p1));

assign add_ln153_77_fu_5580_p2 = ($signed(sext_ln153_64_fu_5576_p1) + $signed(add_ln153_73_fu_5544_p2));

assign add_ln153_78_fu_5604_p2 = ($signed(sext_ln151_152_fu_5595_p1) + $signed(sext_ln151_153_fu_5598_p1));

assign add_ln153_79_fu_5614_p2 = ($signed(sext_ln153_66_fu_5610_p1) + $signed(select_ln126_10_fu_4591_p3));

assign add_ln153_7_fu_4804_p2 = ($signed(sext_ln153_9_fu_4800_p1) + $signed(sext_ln153_6_fu_4770_p1));

assign add_ln153_80_fu_5620_p2 = ($signed(sext_ln151_151_fu_5592_p1) + $signed(sext_ln151_150_fu_5589_p1));

assign add_ln153_81_fu_5630_p2 = ($signed(sext_ln151_149_fu_5586_p1) + $signed(sext_ln153_65_fu_5601_p1));

assign add_ln153_82_fu_5640_p2 = ($signed(sext_ln153_68_fu_5636_p1) + $signed(sext_ln153_67_fu_5626_p1));

assign add_ln153_83_fu_5650_p2 = ($signed(sext_ln153_69_fu_5646_p1) + $signed(add_ln153_79_fu_5614_p2));

assign add_ln153_84_fu_5674_p2 = ($signed(sext_ln151_157_fu_5665_p1) + $signed(sext_ln151_158_fu_5668_p1));

assign add_ln153_85_fu_5684_p2 = ($signed(sext_ln153_71_fu_5680_p1) + $signed(select_ln126_9_fu_4585_p3));

assign add_ln153_86_fu_5690_p2 = ($signed(sext_ln151_156_fu_5662_p1) + $signed(sext_ln151_155_fu_5659_p1));

assign add_ln153_87_fu_5700_p2 = ($signed(sext_ln151_154_fu_5656_p1) + $signed(sext_ln153_70_fu_5671_p1));

assign add_ln153_88_fu_5710_p2 = ($signed(sext_ln153_73_fu_5706_p1) + $signed(sext_ln153_72_fu_5696_p1));

assign add_ln153_89_fu_5720_p2 = ($signed(sext_ln153_74_fu_5716_p1) + $signed(add_ln153_85_fu_5684_p2));

assign add_ln153_8_fu_4774_p2 = ($signed(sext_ln151_22_fu_4752_p1) + $signed(sext_ln151_20_fu_4749_p1));

assign add_ln153_90_fu_5744_p2 = ($signed(sext_ln151_162_fu_5735_p1) + $signed(sext_ln151_163_fu_5738_p1));

assign add_ln153_91_fu_5754_p2 = ($signed(sext_ln153_76_fu_5750_p1) + $signed(select_ln126_8_fu_4579_p3));

assign add_ln153_92_fu_5760_p2 = ($signed(sext_ln151_161_fu_5732_p1) + $signed(sext_ln151_160_fu_5729_p1));

assign add_ln153_93_fu_5770_p2 = ($signed(sext_ln151_159_fu_5726_p1) + $signed(sext_ln153_75_fu_5741_p1));

assign add_ln153_94_fu_5780_p2 = ($signed(sext_ln153_78_fu_5776_p1) + $signed(sext_ln153_77_fu_5766_p1));

assign add_ln153_95_fu_5790_p2 = ($signed(sext_ln153_79_fu_5786_p1) + $signed(add_ln153_91_fu_5754_p2));

assign add_ln153_96_fu_5814_p2 = ($signed(sext_ln151_167_fu_5805_p1) + $signed(sext_ln151_168_fu_5808_p1));

assign add_ln153_97_fu_5824_p2 = ($signed(sext_ln153_81_fu_5820_p1) + $signed(select_ln126_7_fu_4573_p3));

assign add_ln153_98_fu_5830_p2 = ($signed(sext_ln151_166_fu_5802_p1) + $signed(sext_ln151_165_fu_5799_p1));

assign add_ln153_99_fu_5840_p2 = ($signed(sext_ln151_164_fu_5796_p1) + $signed(sext_ln153_80_fu_5811_p1));

assign add_ln153_9_fu_4784_p2 = ($signed(sext_ln151_18_fu_4746_p1) + $signed(sext_ln153_5_fu_4761_p1));

assign add_ln153_fu_4694_p2 = ($signed(sext_ln151_11_fu_4685_p1) + $signed(sext_ln151_14_fu_4688_p1));

assign and_ln120_fu_977_p2 = (xor_ln120_fu_966_p2 & icmp_ln122_fu_971_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (cache_window_sm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln161_reg_6975_pp0_iter4_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_652 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_749 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_k_bias_arr_659_address0 = zext_ln121_fu_1044_p1;

assign attn_inst_matmul_gen_k_weight_arr_658_address0 = zext_ln151_1_fu_1068_p1;

assign icmp_ln120_fu_897_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_903_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_971_p2 = ((ap_sig_allocacmp_cit_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_1073_p2 = ((select_ln121_reg_6920 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_1082_p2 = ((select_ln121_reg_6920 == 6'd31) ? 1'b1 : 1'b0);

assign mac_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{add_ln153_143_reg_7885}, {add_ln153_137_reg_7880}}, {add_ln153_131_reg_7875}}, {add_ln153_125_reg_7870}}, {add_ln153_119_reg_7865}}, {add_ln153_113_reg_7860}}, {add_ln153_107_reg_7855}}, {add_ln153_101_reg_7850}}, {add_ln153_95_reg_7845}}, {add_ln153_89_reg_7840}}, {add_ln153_83_reg_7835}}, {add_ln153_77_reg_7830}}, {add_ln153_71_reg_7825}}, {add_ln153_65_reg_7820}}, {add_ln153_59_reg_7815}}, {add_ln153_53_reg_7810}}, {add_ln153_47_reg_7805}}, {add_ln153_41_reg_7800}}, {add_ln153_35_reg_7795}}, {add_ln153_29_reg_7790}}, {add_ln153_23_reg_7785}}, {add_ln153_17_reg_7780}}, {add_ln153_11_reg_7775}}, {add_ln153_5_reg_7770}};

assign mul_res_100_fu_3775_p0 = sext_ln151_58_fu_2129_p1;

assign mul_res_100_fu_3775_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_101_fu_3789_p0 = sext_ln151_60_fu_2157_p1;

assign mul_res_101_fu_3789_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_102_fu_3803_p0 = sext_ln151_61_fu_2185_p1;

assign mul_res_102_fu_3803_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_103_fu_3817_p0 = sext_ln151_63_fu_2213_p1;

assign mul_res_103_fu_3817_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_104_fu_3831_p0 = sext_ln151_65_fu_2241_p1;

assign mul_res_104_fu_3831_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_105_fu_3845_p0 = sext_ln151_67_fu_2269_p1;

assign mul_res_105_fu_3845_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_106_fu_3859_p0 = sext_ln151_69_fu_2297_p1;

assign mul_res_106_fu_3859_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_107_fu_3873_p0 = sext_ln151_71_fu_2325_p1;

assign mul_res_107_fu_3873_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_108_fu_3887_p0 = sext_ln151_72_fu_2353_p1;

assign mul_res_108_fu_3887_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_109_fu_3901_p0 = sext_ln151_74_fu_2381_p1;

assign mul_res_109_fu_3901_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_10_fu_1637_p0 = sext_ln151_25_fu_1625_p1;

assign mul_res_10_fu_1637_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_110_fu_3915_p0 = sext_ln151_76_fu_2409_p1;

assign mul_res_110_fu_3915_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_111_fu_3929_p0 = sext_ln151_78_fu_2437_p1;

assign mul_res_111_fu_3929_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_112_fu_3943_p0 = sext_ln151_80_fu_2465_p1;

assign mul_res_112_fu_3943_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_113_fu_3957_p0 = sext_ln151_82_fu_2493_p1;

assign mul_res_113_fu_3957_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_114_fu_3971_p0 = sext_ln151_83_fu_2521_p1;

assign mul_res_114_fu_3971_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_115_fu_3985_p0 = sext_ln151_85_fu_2549_p1;

assign mul_res_115_fu_3985_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_116_fu_3999_p0 = sext_ln151_87_fu_2577_p1;

assign mul_res_116_fu_3999_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_117_fu_4013_p0 = sext_ln151_89_fu_2605_p1;

assign mul_res_117_fu_4013_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_118_fu_4027_p0 = sext_ln151_91_fu_2633_p1;

assign mul_res_118_fu_4027_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_119_fu_4041_p0 = sext_ln151_93_fu_2661_p1;

assign mul_res_119_fu_4041_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_11_fu_1665_p0 = sext_ln151_27_fu_1653_p1;

assign mul_res_11_fu_1665_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_120_fu_4055_p0 = sext_ln151_94_fu_2689_p1;

assign mul_res_120_fu_4055_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_121_fu_4069_p0 = sext_ln151_96_fu_2717_p1;

assign mul_res_121_fu_4069_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_122_fu_4083_p0 = sext_ln151_98_fu_2745_p1;

assign mul_res_122_fu_4083_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_123_fu_4097_p0 = sext_ln151_100_fu_2773_p1;

assign mul_res_123_fu_4097_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_124_fu_4111_p0 = sext_ln151_102_fu_2801_p1;

assign mul_res_124_fu_4111_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_125_fu_4125_p0 = sext_ln151_104_fu_2829_p1;

assign mul_res_125_fu_4125_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_126_fu_4139_p0 = sext_ln151_105_fu_2857_p1;

assign mul_res_126_fu_4139_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_127_fu_4153_p0 = sext_ln151_107_fu_2885_p1;

assign mul_res_127_fu_4153_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_128_fu_4167_p0 = sext_ln151_109_fu_2913_p1;

assign mul_res_128_fu_4167_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_129_fu_4181_p0 = sext_ln151_111_fu_2941_p1;

assign mul_res_129_fu_4181_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_12_fu_1693_p0 = sext_ln151_28_fu_1681_p1;

assign mul_res_12_fu_1693_p1 = sext_ln151_fu_1321_p1;

assign mul_res_130_fu_4195_p0 = sext_ln151_113_fu_2969_p1;

assign mul_res_130_fu_4195_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_131_fu_4209_p0 = sext_ln151_115_fu_2997_p1;

assign mul_res_131_fu_4209_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_132_fu_4223_p0 = sext_ln151_116_fu_3025_p1;

assign mul_res_132_fu_4223_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_133_fu_4237_p0 = sext_ln151_118_fu_3053_p1;

assign mul_res_133_fu_4237_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_134_fu_4251_p0 = sext_ln151_120_fu_3081_p1;

assign mul_res_134_fu_4251_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_135_fu_4265_p0 = sext_ln151_122_fu_3109_p1;

assign mul_res_135_fu_4265_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_136_fu_4279_p0 = sext_ln151_124_fu_3137_p1;

assign mul_res_136_fu_4279_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_137_fu_4293_p0 = sext_ln151_126_fu_3165_p1;

assign mul_res_137_fu_4293_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_138_fu_4307_p0 = sext_ln151_127_fu_3193_p1;

assign mul_res_138_fu_4307_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_139_fu_4321_p0 = sext_ln151_129_fu_3221_p1;

assign mul_res_139_fu_4321_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_13_fu_1721_p0 = sext_ln151_30_fu_1709_p1;

assign mul_res_13_fu_1721_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_140_fu_4335_p0 = sext_ln151_131_fu_3249_p1;

assign mul_res_140_fu_4335_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_141_fu_4349_p0 = sext_ln151_133_fu_3277_p1;

assign mul_res_141_fu_4349_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_142_fu_4363_p0 = sext_ln151_135_fu_3305_p1;

assign mul_res_142_fu_4363_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_143_fu_4377_p0 = sext_ln151_137_fu_3333_p1;

assign mul_res_143_fu_4377_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_14_fu_1749_p0 = sext_ln151_32_fu_1737_p1;

assign mul_res_14_fu_1749_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_15_fu_1777_p0 = sext_ln151_34_fu_1765_p1;

assign mul_res_15_fu_1777_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_16_fu_1805_p0 = sext_ln151_36_fu_1793_p1;

assign mul_res_16_fu_1805_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_17_fu_1833_p0 = sext_ln151_38_fu_1821_p1;

assign mul_res_17_fu_1833_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_18_fu_1861_p0 = sext_ln151_39_fu_1849_p1;

assign mul_res_18_fu_1861_p1 = sext_ln151_fu_1321_p1;

assign mul_res_19_fu_1889_p0 = sext_ln151_41_fu_1877_p1;

assign mul_res_19_fu_1889_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_1_fu_1369_p0 = sext_ln151_4_fu_1357_p1;

assign mul_res_1_fu_1369_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_20_fu_1917_p0 = sext_ln151_43_fu_1905_p1;

assign mul_res_20_fu_1917_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_21_fu_1945_p0 = sext_ln151_45_fu_1933_p1;

assign mul_res_21_fu_1945_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_22_fu_1973_p0 = sext_ln151_47_fu_1961_p1;

assign mul_res_22_fu_1973_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_23_fu_2001_p0 = sext_ln151_49_fu_1989_p1;

assign mul_res_23_fu_2001_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_24_fu_2029_p0 = sext_ln151_50_fu_2017_p1;

assign mul_res_24_fu_2029_p1 = sext_ln151_fu_1321_p1;

assign mul_res_25_fu_2057_p0 = sext_ln151_52_fu_2045_p1;

assign mul_res_25_fu_2057_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_26_fu_2085_p0 = sext_ln151_54_fu_2073_p1;

assign mul_res_26_fu_2085_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_27_fu_2113_p0 = sext_ln151_56_fu_2101_p1;

assign mul_res_27_fu_2113_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_28_fu_2141_p0 = sext_ln151_58_fu_2129_p1;

assign mul_res_28_fu_2141_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_29_fu_2169_p0 = sext_ln151_60_fu_2157_p1;

assign mul_res_29_fu_2169_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_2_fu_1401_p0 = sext_ln151_7_fu_1389_p1;

assign mul_res_2_fu_1401_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_30_fu_2197_p0 = sext_ln151_61_fu_2185_p1;

assign mul_res_30_fu_2197_p1 = sext_ln151_fu_1321_p1;

assign mul_res_31_fu_2225_p0 = sext_ln151_63_fu_2213_p1;

assign mul_res_31_fu_2225_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_32_fu_2253_p0 = sext_ln151_65_fu_2241_p1;

assign mul_res_32_fu_2253_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_33_fu_2281_p0 = sext_ln151_67_fu_2269_p1;

assign mul_res_33_fu_2281_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_34_fu_2309_p0 = sext_ln151_69_fu_2297_p1;

assign mul_res_34_fu_2309_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_35_fu_2337_p0 = sext_ln151_71_fu_2325_p1;

assign mul_res_35_fu_2337_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_36_fu_2365_p0 = sext_ln151_72_fu_2353_p1;

assign mul_res_36_fu_2365_p1 = sext_ln151_fu_1321_p1;

assign mul_res_37_fu_2393_p0 = sext_ln151_74_fu_2381_p1;

assign mul_res_37_fu_2393_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_38_fu_2421_p0 = sext_ln151_76_fu_2409_p1;

assign mul_res_38_fu_2421_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_39_fu_2449_p0 = sext_ln151_78_fu_2437_p1;

assign mul_res_39_fu_2449_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_3_fu_1433_p0 = sext_ln151_10_fu_1421_p1;

assign mul_res_3_fu_1433_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_40_fu_2477_p0 = sext_ln151_80_fu_2465_p1;

assign mul_res_40_fu_2477_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_41_fu_2505_p0 = sext_ln151_82_fu_2493_p1;

assign mul_res_41_fu_2505_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_42_fu_2533_p0 = sext_ln151_83_fu_2521_p1;

assign mul_res_42_fu_2533_p1 = sext_ln151_fu_1321_p1;

assign mul_res_43_fu_2561_p0 = sext_ln151_85_fu_2549_p1;

assign mul_res_43_fu_2561_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_44_fu_2589_p0 = sext_ln151_87_fu_2577_p1;

assign mul_res_44_fu_2589_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_45_fu_2617_p0 = sext_ln151_89_fu_2605_p1;

assign mul_res_45_fu_2617_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_46_fu_2645_p0 = sext_ln151_91_fu_2633_p1;

assign mul_res_46_fu_2645_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_47_fu_2673_p0 = sext_ln151_93_fu_2661_p1;

assign mul_res_47_fu_2673_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_48_fu_2701_p0 = sext_ln151_94_fu_2689_p1;

assign mul_res_48_fu_2701_p1 = sext_ln151_fu_1321_p1;

assign mul_res_49_fu_2729_p0 = sext_ln151_96_fu_2717_p1;

assign mul_res_49_fu_2729_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_4_fu_1465_p0 = sext_ln151_13_fu_1453_p1;

assign mul_res_4_fu_1465_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_50_fu_2757_p0 = sext_ln151_98_fu_2745_p1;

assign mul_res_50_fu_2757_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_51_fu_2785_p0 = sext_ln151_100_fu_2773_p1;

assign mul_res_51_fu_2785_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_52_fu_2813_p0 = sext_ln151_102_fu_2801_p1;

assign mul_res_52_fu_2813_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_53_fu_2841_p0 = sext_ln151_104_fu_2829_p1;

assign mul_res_53_fu_2841_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_54_fu_2869_p0 = sext_ln151_105_fu_2857_p1;

assign mul_res_54_fu_2869_p1 = sext_ln151_fu_1321_p1;

assign mul_res_55_fu_2897_p0 = sext_ln151_107_fu_2885_p1;

assign mul_res_55_fu_2897_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_56_fu_2925_p0 = sext_ln151_109_fu_2913_p1;

assign mul_res_56_fu_2925_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_57_fu_2953_p0 = sext_ln151_111_fu_2941_p1;

assign mul_res_57_fu_2953_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_58_fu_2981_p0 = sext_ln151_113_fu_2969_p1;

assign mul_res_58_fu_2981_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_59_fu_3009_p0 = sext_ln151_115_fu_2997_p1;

assign mul_res_59_fu_3009_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_5_fu_1497_p0 = sext_ln151_16_fu_1485_p1;

assign mul_res_5_fu_1497_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_60_fu_3037_p0 = sext_ln151_116_fu_3025_p1;

assign mul_res_60_fu_3037_p1 = sext_ln151_fu_1321_p1;

assign mul_res_61_fu_3065_p0 = sext_ln151_118_fu_3053_p1;

assign mul_res_61_fu_3065_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_62_fu_3093_p0 = sext_ln151_120_fu_3081_p1;

assign mul_res_62_fu_3093_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_63_fu_3121_p0 = sext_ln151_122_fu_3109_p1;

assign mul_res_63_fu_3121_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_64_fu_3149_p0 = sext_ln151_124_fu_3137_p1;

assign mul_res_64_fu_3149_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_65_fu_3177_p0 = sext_ln151_126_fu_3165_p1;

assign mul_res_65_fu_3177_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_66_fu_3205_p0 = sext_ln151_127_fu_3193_p1;

assign mul_res_66_fu_3205_p1 = sext_ln151_fu_1321_p1;

assign mul_res_67_fu_3233_p0 = sext_ln151_129_fu_3221_p1;

assign mul_res_67_fu_3233_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_68_fu_3261_p0 = sext_ln151_131_fu_3249_p1;

assign mul_res_68_fu_3261_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_69_fu_3289_p0 = sext_ln151_133_fu_3277_p1;

assign mul_res_69_fu_3289_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_6_fu_1525_p0 = sext_ln151_17_fu_1513_p1;

assign mul_res_6_fu_1525_p1 = sext_ln151_fu_1321_p1;

assign mul_res_70_fu_3317_p0 = sext_ln151_135_fu_3305_p1;

assign mul_res_70_fu_3317_p1 = sext_ln151_12_fu_1449_p1;

assign mul_res_71_fu_3345_p0 = sext_ln151_137_fu_3333_p1;

assign mul_res_71_fu_3345_p1 = sext_ln151_15_fu_1481_p1;

assign mul_res_72_fu_3363_p0 = sext_ln151_1_fu_1325_p1;

assign mul_res_72_fu_3363_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_73_fu_3381_p0 = sext_ln151_4_fu_1357_p1;

assign mul_res_73_fu_3381_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_74_fu_3399_p0 = sext_ln151_7_fu_1389_p1;

assign mul_res_74_fu_3399_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_75_fu_3417_p0 = sext_ln151_10_fu_1421_p1;

assign mul_res_75_fu_3417_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_76_fu_3435_p0 = sext_ln151_13_fu_1453_p1;

assign mul_res_76_fu_3435_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_77_fu_3453_p0 = sext_ln151_16_fu_1485_p1;

assign mul_res_77_fu_3453_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_78_fu_3467_p0 = sext_ln151_17_fu_1513_p1;

assign mul_res_78_fu_3467_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_79_fu_3481_p0 = sext_ln151_19_fu_1541_p1;

assign mul_res_79_fu_3481_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_7_fu_1553_p0 = sext_ln151_19_fu_1541_p1;

assign mul_res_7_fu_1553_p1 = sext_ln151_3_fu_1353_p1;

assign mul_res_80_fu_3495_p0 = sext_ln151_21_fu_1569_p1;

assign mul_res_80_fu_3495_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_81_fu_3509_p0 = sext_ln151_23_fu_1597_p1;

assign mul_res_81_fu_3509_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_82_fu_3523_p0 = sext_ln151_25_fu_1625_p1;

assign mul_res_82_fu_3523_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_83_fu_3537_p0 = sext_ln151_27_fu_1653_p1;

assign mul_res_83_fu_3537_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_84_fu_3551_p0 = sext_ln151_28_fu_1681_p1;

assign mul_res_84_fu_3551_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_85_fu_3565_p0 = sext_ln151_30_fu_1709_p1;

assign mul_res_85_fu_3565_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_86_fu_3579_p0 = sext_ln151_32_fu_1737_p1;

assign mul_res_86_fu_3579_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_87_fu_3593_p0 = sext_ln151_34_fu_1765_p1;

assign mul_res_87_fu_3593_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_88_fu_3607_p0 = sext_ln151_36_fu_1793_p1;

assign mul_res_88_fu_3607_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_89_fu_3621_p0 = sext_ln151_38_fu_1821_p1;

assign mul_res_89_fu_3621_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_8_fu_1581_p0 = sext_ln151_21_fu_1569_p1;

assign mul_res_8_fu_1581_p1 = sext_ln151_6_fu_1385_p1;

assign mul_res_90_fu_3635_p0 = sext_ln151_39_fu_1849_p1;

assign mul_res_90_fu_3635_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_91_fu_3649_p0 = sext_ln151_41_fu_1877_p1;

assign mul_res_91_fu_3649_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_92_fu_3663_p0 = sext_ln151_43_fu_1905_p1;

assign mul_res_92_fu_3663_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_93_fu_3677_p0 = sext_ln151_45_fu_1933_p1;

assign mul_res_93_fu_3677_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_94_fu_3691_p0 = sext_ln151_47_fu_1961_p1;

assign mul_res_94_fu_3691_p1 = sext_ln151_146_fu_3423_p1;

assign mul_res_95_fu_3705_p0 = sext_ln151_49_fu_1989_p1;

assign mul_res_95_fu_3705_p1 = sext_ln151_148_fu_3441_p1;

assign mul_res_96_fu_3719_p0 = sext_ln151_50_fu_2017_p1;

assign mul_res_96_fu_3719_p1 = sext_ln151_138_fu_3351_p1;

assign mul_res_97_fu_3733_p0 = sext_ln151_52_fu_2045_p1;

assign mul_res_97_fu_3733_p1 = sext_ln151_140_fu_3369_p1;

assign mul_res_98_fu_3747_p0 = sext_ln151_54_fu_2073_p1;

assign mul_res_98_fu_3747_p1 = sext_ln151_142_fu_3387_p1;

assign mul_res_99_fu_3761_p0 = sext_ln151_56_fu_2101_p1;

assign mul_res_99_fu_3761_p1 = sext_ln151_144_fu_3405_p1;

assign mul_res_9_fu_1609_p0 = sext_ln151_23_fu_1597_p1;

assign mul_res_9_fu_1609_p1 = sext_ln151_9_fu_1417_p1;

assign mul_res_fu_1337_p0 = sext_ln151_1_fu_1325_p1;

assign mul_res_fu_1337_p1 = sext_ln151_fu_1321_p1;

assign or_ln121_fu_989_p2 = (icmp_ln121_reg_6913 | and_ln120_fu_977_p2);

assign select_ln120_fu_959_p3 = ((icmp_ln121_reg_6913[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_cot_load);

assign select_ln121_1_fu_1002_p3 = ((and_ln120_fu_977_p2[0:0] == 1'b1) ? add_ln121_fu_983_p2 : select_ln120_fu_959_p3);

assign select_ln121_2_fu_915_p3 = ((icmp_ln121_fu_903_p2[0:0] == 1'b1) ? 11'd1 : add_ln121_1_fu_909_p2);

assign select_ln121_fu_994_p3 = ((or_ln121_fu_989_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_cit_load);

assign select_ln126_10_fu_4591_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6985 : p_0_0_0_112390_fu_736);

assign select_ln126_11_fu_4597_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6979 : p_0_0_0388_fu_732);

assign select_ln126_12_fu_4603_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_4527_p1 : p_0_0_0_11386_fu_728);

assign select_ln126_13_fu_4610_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_9_reg_7039 : p_0_0_0_10384_fu_724);

assign select_ln126_14_fu_4616_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_8_reg_7033 : p_0_0_0_9382_fu_720);

assign select_ln126_15_fu_4622_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_7_reg_7027 : p_0_0_0_8380_fu_716);

assign select_ln126_16_fu_4628_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_6_reg_7021 : p_0_0_0_7378_fu_712);

assign select_ln126_17_fu_4634_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_5_reg_7015 : p_0_0_0_6376_fu_708);

assign select_ln126_18_fu_4640_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_4_reg_7009 : p_0_0_0_5374_fu_704);

assign select_ln126_19_fu_4646_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_3_reg_7003 : p_0_0_0_4372_fu_700);

assign select_ln126_1_fu_4537_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_9_reg_7039 : p_0_0_0_10408_fu_772);

assign select_ln126_20_fu_4652_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_2_reg_6997 : p_0_0_0_3370_fu_696);

assign select_ln126_21_fu_4658_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_1_reg_6991 : p_0_0_0_2368_fu_692);

assign select_ln126_22_fu_4664_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_s_reg_6985 : p_0_0_0_112366_fu_688);

assign select_ln126_23_fu_4670_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? trunc_ln131_reg_6979 : p_0_0_0364_fu_684);

assign select_ln126_2_fu_4543_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_8_reg_7033 : p_0_0_0_9406_fu_768);

assign select_ln126_3_fu_4549_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_7_reg_7027 : p_0_0_0_8404_fu_764);

assign select_ln126_4_fu_4555_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_6_reg_7021 : p_0_0_0_7402_fu_760);

assign select_ln126_5_fu_4561_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_5_reg_7015 : p_0_0_0_6400_fu_756);

assign select_ln126_6_fu_4567_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_4_reg_7009 : p_0_0_0_5398_fu_752);

assign select_ln126_7_fu_4573_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_3_reg_7003 : p_0_0_0_4396_fu_748);

assign select_ln126_8_fu_4579_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_2_reg_6997 : p_0_0_0_3394_fu_744);

assign select_ln126_9_fu_4585_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? tmp_1_reg_6991 : p_0_0_0_2392_fu_740);

assign select_ln126_fu_4530_p3 = ((icmp_ln126_reg_6947_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln131_fu_4527_p1 : p_0_0_0_11410_fu_776);

assign sext_ln131_fu_4527_p1 = $signed(tmp_10_reg_7045);

assign sext_ln151_100_fu_2773_p1 = $signed(tmp_62_fu_2763_p4);

assign sext_ln151_101_fu_5245_p1 = mul_res_51_reg_7305;

assign sext_ln151_102_fu_2801_p1 = $signed(tmp_63_fu_2791_p4);

assign sext_ln151_103_fu_5248_p1 = mul_res_52_reg_7310;

assign sext_ln151_104_fu_2829_p1 = $signed(tmp_64_fu_2819_p4);

assign sext_ln151_105_fu_2857_p1 = $signed(tmp_65_fu_2847_p4);

assign sext_ln151_106_fu_5306_p1 = mul_res_54_reg_7320;

assign sext_ln151_107_fu_2885_p1 = $signed(tmp_66_fu_2875_p4);

assign sext_ln151_108_fu_5309_p1 = mul_res_55_reg_7325;

assign sext_ln151_109_fu_2913_p1 = $signed(tmp_67_fu_2903_p4);

assign sext_ln151_10_fu_1421_p1 = $signed(tmp_14_fu_1407_p4);

assign sext_ln151_110_fu_5312_p1 = mul_res_56_reg_7330;

assign sext_ln151_111_fu_2941_p1 = $signed(tmp_68_fu_2931_p4);

assign sext_ln151_112_fu_5315_p1 = mul_res_57_reg_7335;

assign sext_ln151_113_fu_2969_p1 = $signed(tmp_69_fu_2959_p4);

assign sext_ln151_114_fu_5318_p1 = mul_res_58_reg_7340;

assign sext_ln151_115_fu_2997_p1 = $signed(tmp_70_fu_2987_p4);

assign sext_ln151_116_fu_3025_p1 = $signed(tmp_71_fu_3015_p4);

assign sext_ln151_117_fu_5376_p1 = mul_res_60_reg_7350;

assign sext_ln151_118_fu_3053_p1 = $signed(tmp_72_fu_3043_p4);

assign sext_ln151_119_fu_5379_p1 = mul_res_61_reg_7355;

assign sext_ln151_11_fu_4685_p1 = mul_res_3_reg_7065;

assign sext_ln151_120_fu_3081_p1 = $signed(tmp_73_fu_3071_p4);

assign sext_ln151_121_fu_5382_p1 = mul_res_62_reg_7360;

assign sext_ln151_122_fu_3109_p1 = $signed(tmp_74_fu_3099_p4);

assign sext_ln151_123_fu_5385_p1 = mul_res_63_reg_7365;

assign sext_ln151_124_fu_3137_p1 = $signed(tmp_75_fu_3127_p4);

assign sext_ln151_125_fu_5388_p1 = mul_res_64_reg_7370;

assign sext_ln151_126_fu_3165_p1 = $signed(tmp_76_fu_3155_p4);

assign sext_ln151_127_fu_3193_p1 = $signed(tmp_77_fu_3183_p4);

assign sext_ln151_128_fu_5446_p1 = mul_res_66_reg_7380;

assign sext_ln151_129_fu_3221_p1 = $signed(tmp_78_fu_3211_p4);

assign sext_ln151_12_fu_1449_p1 = $signed(trunc_ln137_3_fu_1237_p4);

assign sext_ln151_130_fu_5449_p1 = mul_res_67_reg_7385;

assign sext_ln151_131_fu_3249_p1 = $signed(tmp_79_fu_3239_p4);

assign sext_ln151_132_fu_5452_p1 = mul_res_68_reg_7390;

assign sext_ln151_133_fu_3277_p1 = $signed(tmp_80_fu_3267_p4);

assign sext_ln151_134_fu_5455_p1 = mul_res_69_reg_7395;

assign sext_ln151_135_fu_3305_p1 = $signed(tmp_81_fu_3295_p4);

assign sext_ln151_136_fu_5458_p1 = mul_res_70_reg_7400;

assign sext_ln151_137_fu_3333_p1 = $signed(tmp_82_fu_3323_p4);

assign sext_ln151_138_fu_3351_p1 = $signed(trunc_ln137_5_fu_1257_p4);

assign sext_ln151_139_fu_5516_p1 = mul_res_72_reg_7410;

assign sext_ln151_13_fu_1453_p1 = $signed(tmp_15_fu_1439_p4);

assign sext_ln151_140_fu_3369_p1 = $signed(trunc_ln137_6_fu_1267_p4);

assign sext_ln151_141_fu_5519_p1 = mul_res_73_reg_7415;

assign sext_ln151_142_fu_3387_p1 = $signed(trunc_ln137_7_fu_1277_p4);

assign sext_ln151_143_fu_5522_p1 = mul_res_74_reg_7420;

assign sext_ln151_144_fu_3405_p1 = $signed(trunc_ln137_8_fu_1287_p4);

assign sext_ln151_145_fu_5525_p1 = mul_res_75_reg_7425;

assign sext_ln151_146_fu_3423_p1 = $signed(trunc_ln137_9_fu_1297_p4);

assign sext_ln151_147_fu_5528_p1 = mul_res_76_reg_7430;

assign sext_ln151_148_fu_3441_p1 = $signed(trunc_ln137_10_fu_1307_p4);

assign sext_ln151_149_fu_5586_p1 = mul_res_78_reg_7440;

assign sext_ln151_14_fu_4688_p1 = mul_res_4_reg_7070;

assign sext_ln151_150_fu_5589_p1 = mul_res_79_reg_7445;

assign sext_ln151_151_fu_5592_p1 = mul_res_80_reg_7450;

assign sext_ln151_152_fu_5595_p1 = mul_res_81_reg_7455;

assign sext_ln151_153_fu_5598_p1 = mul_res_82_reg_7460;

assign sext_ln151_154_fu_5656_p1 = mul_res_84_reg_7470;

assign sext_ln151_155_fu_5659_p1 = mul_res_85_reg_7475;

assign sext_ln151_156_fu_5662_p1 = mul_res_86_reg_7480;

assign sext_ln151_157_fu_5665_p1 = mul_res_87_reg_7485;

assign sext_ln151_158_fu_5668_p1 = mul_res_88_reg_7490;

assign sext_ln151_159_fu_5726_p1 = mul_res_90_reg_7500;

assign sext_ln151_15_fu_1481_p1 = $signed(trunc_ln137_4_fu_1247_p4);

assign sext_ln151_160_fu_5729_p1 = mul_res_91_reg_7505;

assign sext_ln151_161_fu_5732_p1 = mul_res_92_reg_7510;

assign sext_ln151_162_fu_5735_p1 = mul_res_93_reg_7515;

assign sext_ln151_163_fu_5738_p1 = mul_res_94_reg_7520;

assign sext_ln151_164_fu_5796_p1 = mul_res_96_reg_7530;

assign sext_ln151_165_fu_5799_p1 = mul_res_97_reg_7535;

assign sext_ln151_166_fu_5802_p1 = mul_res_98_reg_7540;

assign sext_ln151_167_fu_5805_p1 = mul_res_99_reg_7545;

assign sext_ln151_168_fu_5808_p1 = mul_res_100_reg_7550;

assign sext_ln151_169_fu_5866_p1 = mul_res_102_reg_7560;

assign sext_ln151_16_fu_1485_p1 = $signed(tmp_16_fu_1471_p4);

assign sext_ln151_170_fu_5869_p1 = mul_res_103_reg_7565;

assign sext_ln151_171_fu_5872_p1 = mul_res_104_reg_7570;

assign sext_ln151_172_fu_5875_p1 = mul_res_105_reg_7575;

assign sext_ln151_173_fu_5878_p1 = mul_res_106_reg_7580;

assign sext_ln151_174_fu_5936_p1 = mul_res_108_reg_7590;

assign sext_ln151_175_fu_5939_p1 = mul_res_109_reg_7595;

assign sext_ln151_176_fu_5942_p1 = mul_res_110_reg_7600;

assign sext_ln151_177_fu_5945_p1 = mul_res_111_reg_7605;

assign sext_ln151_178_fu_5948_p1 = mul_res_112_reg_7610;

assign sext_ln151_179_fu_6006_p1 = mul_res_114_reg_7620;

assign sext_ln151_17_fu_1513_p1 = $signed(tmp_17_fu_1503_p4);

assign sext_ln151_180_fu_6009_p1 = mul_res_115_reg_7625;

assign sext_ln151_181_fu_6012_p1 = mul_res_116_reg_7630;

assign sext_ln151_182_fu_6015_p1 = mul_res_117_reg_7635;

assign sext_ln151_183_fu_6018_p1 = mul_res_118_reg_7640;

assign sext_ln151_184_fu_6076_p1 = mul_res_120_reg_7650;

assign sext_ln151_185_fu_6079_p1 = mul_res_121_reg_7655;

assign sext_ln151_186_fu_6082_p1 = mul_res_122_reg_7660;

assign sext_ln151_187_fu_6085_p1 = mul_res_123_reg_7665;

assign sext_ln151_188_fu_6088_p1 = mul_res_124_reg_7670;

assign sext_ln151_189_fu_6146_p1 = mul_res_126_reg_7680;

assign sext_ln151_18_fu_4746_p1 = mul_res_6_reg_7080;

assign sext_ln151_190_fu_6149_p1 = mul_res_127_reg_7685;

assign sext_ln151_191_fu_6152_p1 = mul_res_128_reg_7690;

assign sext_ln151_192_fu_6155_p1 = mul_res_129_reg_7695;

assign sext_ln151_193_fu_6158_p1 = mul_res_130_reg_7700;

assign sext_ln151_194_fu_6216_p1 = mul_res_132_reg_7710;

assign sext_ln151_195_fu_6219_p1 = mul_res_133_reg_7715;

assign sext_ln151_196_fu_6222_p1 = mul_res_134_reg_7720;

assign sext_ln151_197_fu_6225_p1 = mul_res_135_reg_7725;

assign sext_ln151_198_fu_6228_p1 = mul_res_136_reg_7730;

assign sext_ln151_199_fu_6286_p1 = mul_res_138_reg_7740;

assign sext_ln151_19_fu_1541_p1 = $signed(tmp_18_fu_1531_p4);

assign sext_ln151_1_fu_1325_p1 = $signed(trunc_ln151_fu_1317_p1);

assign sext_ln151_200_fu_6289_p1 = mul_res_139_reg_7745;

assign sext_ln151_201_fu_6292_p1 = mul_res_140_reg_7750;

assign sext_ln151_202_fu_6295_p1 = mul_res_141_reg_7755;

assign sext_ln151_203_fu_6298_p1 = mul_res_142_reg_7760;

assign sext_ln151_20_fu_4749_p1 = mul_res_7_reg_7085;

assign sext_ln151_21_fu_1569_p1 = $signed(tmp_19_fu_1559_p4);

assign sext_ln151_22_fu_4752_p1 = mul_res_8_reg_7090;

assign sext_ln151_23_fu_1597_p1 = $signed(tmp_20_fu_1587_p4);

assign sext_ln151_24_fu_4755_p1 = mul_res_9_reg_7095;

assign sext_ln151_25_fu_1625_p1 = $signed(tmp_21_fu_1615_p4);

assign sext_ln151_26_fu_4758_p1 = mul_res_10_reg_7100;

assign sext_ln151_27_fu_1653_p1 = $signed(tmp_22_fu_1643_p4);

assign sext_ln151_28_fu_1681_p1 = $signed(tmp_23_fu_1671_p4);

assign sext_ln151_29_fu_4816_p1 = mul_res_12_reg_7110;

assign sext_ln151_2_fu_4676_p1 = mul_res_reg_7050;

assign sext_ln151_30_fu_1709_p1 = $signed(tmp_24_fu_1699_p4);

assign sext_ln151_31_fu_4819_p1 = mul_res_13_reg_7115;

assign sext_ln151_32_fu_1737_p1 = $signed(tmp_25_fu_1727_p4);

assign sext_ln151_33_fu_4822_p1 = mul_res_14_reg_7120;

assign sext_ln151_34_fu_1765_p1 = $signed(tmp_26_fu_1755_p4);

assign sext_ln151_35_fu_4825_p1 = mul_res_15_reg_7125;

assign sext_ln151_36_fu_1793_p1 = $signed(tmp_27_fu_1783_p4);

assign sext_ln151_37_fu_4828_p1 = mul_res_16_reg_7130;

assign sext_ln151_38_fu_1821_p1 = $signed(tmp_28_fu_1811_p4);

assign sext_ln151_39_fu_1849_p1 = $signed(tmp_29_fu_1839_p4);

assign sext_ln151_3_fu_1353_p1 = $signed(trunc_ln137_s_fu_1207_p4);

assign sext_ln151_40_fu_4886_p1 = mul_res_18_reg_7140;

assign sext_ln151_41_fu_1877_p1 = $signed(tmp_30_fu_1867_p4);

assign sext_ln151_42_fu_4889_p1 = mul_res_19_reg_7145;

assign sext_ln151_43_fu_1905_p1 = $signed(tmp_31_fu_1895_p4);

assign sext_ln151_44_fu_4892_p1 = mul_res_20_reg_7150;

assign sext_ln151_45_fu_1933_p1 = $signed(tmp_32_fu_1923_p4);

assign sext_ln151_46_fu_4895_p1 = mul_res_21_reg_7155;

assign sext_ln151_47_fu_1961_p1 = $signed(tmp_33_fu_1951_p4);

assign sext_ln151_48_fu_4898_p1 = mul_res_22_reg_7160;

assign sext_ln151_49_fu_1989_p1 = $signed(tmp_34_fu_1979_p4);

assign sext_ln151_4_fu_1357_p1 = $signed(tmp_12_fu_1343_p4);

assign sext_ln151_50_fu_2017_p1 = $signed(tmp_35_fu_2007_p4);

assign sext_ln151_51_fu_4956_p1 = mul_res_24_reg_7170;

assign sext_ln151_52_fu_2045_p1 = $signed(tmp_36_fu_2035_p4);

assign sext_ln151_53_fu_4959_p1 = mul_res_25_reg_7175;

assign sext_ln151_54_fu_2073_p1 = $signed(tmp_37_fu_2063_p4);

assign sext_ln151_55_fu_4962_p1 = mul_res_26_reg_7180;

assign sext_ln151_56_fu_2101_p1 = $signed(tmp_38_fu_2091_p4);

assign sext_ln151_57_fu_4965_p1 = mul_res_27_reg_7185;

assign sext_ln151_58_fu_2129_p1 = $signed(tmp_39_fu_2119_p4);

assign sext_ln151_59_fu_4968_p1 = mul_res_28_reg_7190;

assign sext_ln151_5_fu_4679_p1 = mul_res_1_reg_7055;

assign sext_ln151_60_fu_2157_p1 = $signed(tmp_40_fu_2147_p4);

assign sext_ln151_61_fu_2185_p1 = $signed(tmp_41_fu_2175_p4);

assign sext_ln151_62_fu_5026_p1 = mul_res_30_reg_7200;

assign sext_ln151_63_fu_2213_p1 = $signed(tmp_42_fu_2203_p4);

assign sext_ln151_64_fu_5029_p1 = mul_res_31_reg_7205;

assign sext_ln151_65_fu_2241_p1 = $signed(tmp_43_fu_2231_p4);

assign sext_ln151_66_fu_5032_p1 = mul_res_32_reg_7210;

assign sext_ln151_67_fu_2269_p1 = $signed(tmp_44_fu_2259_p4);

assign sext_ln151_68_fu_5035_p1 = mul_res_33_reg_7215;

assign sext_ln151_69_fu_2297_p1 = $signed(tmp_45_fu_2287_p4);

assign sext_ln151_6_fu_1385_p1 = $signed(trunc_ln137_1_fu_1217_p4);

assign sext_ln151_70_fu_5038_p1 = mul_res_34_reg_7220;

assign sext_ln151_71_fu_2325_p1 = $signed(tmp_46_fu_2315_p4);

assign sext_ln151_72_fu_2353_p1 = $signed(tmp_47_fu_2343_p4);

assign sext_ln151_73_fu_5096_p1 = mul_res_36_reg_7230;

assign sext_ln151_74_fu_2381_p1 = $signed(tmp_48_fu_2371_p4);

assign sext_ln151_75_fu_5099_p1 = mul_res_37_reg_7235;

assign sext_ln151_76_fu_2409_p1 = $signed(tmp_49_fu_2399_p4);

assign sext_ln151_77_fu_5102_p1 = mul_res_38_reg_7240;

assign sext_ln151_78_fu_2437_p1 = $signed(tmp_50_fu_2427_p4);

assign sext_ln151_79_fu_5105_p1 = mul_res_39_reg_7245;

assign sext_ln151_7_fu_1389_p1 = $signed(tmp_13_fu_1375_p4);

assign sext_ln151_80_fu_2465_p1 = $signed(tmp_51_fu_2455_p4);

assign sext_ln151_81_fu_5108_p1 = mul_res_40_reg_7250;

assign sext_ln151_82_fu_2493_p1 = $signed(tmp_52_fu_2483_p4);

assign sext_ln151_83_fu_2521_p1 = $signed(tmp_53_fu_2511_p4);

assign sext_ln151_84_fu_5166_p1 = mul_res_42_reg_7260;

assign sext_ln151_85_fu_2549_p1 = $signed(tmp_54_fu_2539_p4);

assign sext_ln151_86_fu_5169_p1 = mul_res_43_reg_7265;

assign sext_ln151_87_fu_2577_p1 = $signed(tmp_55_fu_2567_p4);

assign sext_ln151_88_fu_5172_p1 = mul_res_44_reg_7270;

assign sext_ln151_89_fu_2605_p1 = $signed(tmp_56_fu_2595_p4);

assign sext_ln151_8_fu_4682_p1 = mul_res_2_reg_7060;

assign sext_ln151_90_fu_5175_p1 = mul_res_45_reg_7275;

assign sext_ln151_91_fu_2633_p1 = $signed(tmp_57_fu_2623_p4);

assign sext_ln151_92_fu_5178_p1 = mul_res_46_reg_7280;

assign sext_ln151_93_fu_2661_p1 = $signed(tmp_58_fu_2651_p4);

assign sext_ln151_94_fu_2689_p1 = $signed(tmp_59_fu_2679_p4);

assign sext_ln151_95_fu_5236_p1 = mul_res_48_reg_7290;

assign sext_ln151_96_fu_2717_p1 = $signed(tmp_60_fu_2707_p4);

assign sext_ln151_97_fu_5239_p1 = mul_res_49_reg_7295;

assign sext_ln151_98_fu_2745_p1 = $signed(tmp_61_fu_2735_p4);

assign sext_ln151_99_fu_5242_p1 = mul_res_50_reg_7300;

assign sext_ln151_9_fu_1417_p1 = $signed(trunc_ln137_2_fu_1227_p4);

assign sext_ln151_fu_1321_p1 = $signed(trunc_ln137_fu_1203_p1);

assign sext_ln153_100_fu_6091_p1 = mul_res_125_reg_7675;

assign sext_ln153_101_fu_6100_p1 = $signed(add_ln153_120_fu_6094_p2);

assign sext_ln153_102_fu_6116_p1 = $signed(add_ln153_122_fu_6110_p2);

assign sext_ln153_103_fu_6126_p1 = $signed(add_ln153_123_fu_6120_p2);

assign sext_ln153_104_fu_6136_p1 = $signed(add_ln153_124_fu_6130_p2);

assign sext_ln153_105_fu_6161_p1 = mul_res_131_reg_7705;

assign sext_ln153_106_fu_6170_p1 = $signed(add_ln153_126_fu_6164_p2);

assign sext_ln153_107_fu_6186_p1 = $signed(add_ln153_128_fu_6180_p2);

assign sext_ln153_108_fu_6196_p1 = $signed(add_ln153_129_fu_6190_p2);

assign sext_ln153_109_fu_6206_p1 = $signed(add_ln153_130_fu_6200_p2);

assign sext_ln153_10_fu_4831_p1 = mul_res_17_reg_7135;

assign sext_ln153_110_fu_6231_p1 = mul_res_137_reg_7735;

assign sext_ln153_111_fu_6240_p1 = $signed(add_ln153_132_fu_6234_p2);

assign sext_ln153_112_fu_6256_p1 = $signed(add_ln153_134_fu_6250_p2);

assign sext_ln153_113_fu_6266_p1 = $signed(add_ln153_135_fu_6260_p2);

assign sext_ln153_114_fu_6276_p1 = $signed(add_ln153_136_fu_6270_p2);

assign sext_ln153_115_fu_6301_p1 = mul_res_143_reg_7765;

assign sext_ln153_116_fu_6310_p1 = $signed(add_ln153_138_fu_6304_p2);

assign sext_ln153_117_fu_6326_p1 = $signed(add_ln153_140_fu_6320_p2);

assign sext_ln153_118_fu_6336_p1 = $signed(add_ln153_141_fu_6330_p2);

assign sext_ln153_119_fu_6346_p1 = $signed(add_ln153_142_fu_6340_p2);

assign sext_ln153_11_fu_4840_p1 = $signed(add_ln153_12_fu_4834_p2);

assign sext_ln153_12_fu_4850_p1 = $signed(add_ln153_14_fu_4844_p2);

assign sext_ln153_13_fu_4860_p1 = $signed(add_ln153_15_fu_4854_p2);

assign sext_ln153_14_fu_4870_p1 = $signed(add_ln153_16_fu_4864_p2);

assign sext_ln153_15_fu_4901_p1 = mul_res_23_reg_7165;

assign sext_ln153_16_fu_4910_p1 = $signed(add_ln153_18_fu_4904_p2);

assign sext_ln153_17_fu_4920_p1 = $signed(add_ln153_20_fu_4914_p2);

assign sext_ln153_18_fu_4930_p1 = $signed(add_ln153_21_fu_4924_p2);

assign sext_ln153_19_fu_4940_p1 = $signed(add_ln153_22_fu_4934_p2);

assign sext_ln153_1_fu_4700_p1 = $signed(add_ln153_fu_4694_p2);

assign sext_ln153_20_fu_4971_p1 = mul_res_29_reg_7195;

assign sext_ln153_21_fu_4980_p1 = $signed(add_ln153_24_fu_4974_p2);

assign sext_ln153_22_fu_4990_p1 = $signed(add_ln153_26_fu_4984_p2);

assign sext_ln153_23_fu_5000_p1 = $signed(add_ln153_27_fu_4994_p2);

assign sext_ln153_24_fu_5010_p1 = $signed(add_ln153_28_fu_5004_p2);

assign sext_ln153_25_fu_5041_p1 = mul_res_35_reg_7225;

assign sext_ln153_26_fu_5050_p1 = $signed(add_ln153_30_fu_5044_p2);

assign sext_ln153_27_fu_5060_p1 = $signed(add_ln153_32_fu_5054_p2);

assign sext_ln153_28_fu_5070_p1 = $signed(add_ln153_33_fu_5064_p2);

assign sext_ln153_29_fu_5080_p1 = $signed(add_ln153_34_fu_5074_p2);

assign sext_ln153_2_fu_4710_p1 = $signed(add_ln153_2_fu_4704_p2);

assign sext_ln153_30_fu_5111_p1 = mul_res_41_reg_7255;

assign sext_ln153_31_fu_5120_p1 = $signed(add_ln153_36_fu_5114_p2);

assign sext_ln153_32_fu_5130_p1 = $signed(add_ln153_38_fu_5124_p2);

assign sext_ln153_33_fu_5140_p1 = $signed(add_ln153_39_fu_5134_p2);

assign sext_ln153_34_fu_5150_p1 = $signed(add_ln153_40_fu_5144_p2);

assign sext_ln153_35_fu_5181_p1 = mul_res_47_reg_7285;

assign sext_ln153_36_fu_5190_p1 = $signed(add_ln153_42_fu_5184_p2);

assign sext_ln153_37_fu_5200_p1 = $signed(add_ln153_44_fu_5194_p2);

assign sext_ln153_38_fu_5210_p1 = $signed(add_ln153_45_fu_5204_p2);

assign sext_ln153_39_fu_5220_p1 = $signed(add_ln153_46_fu_5214_p2);

assign sext_ln153_3_fu_4720_p1 = $signed(add_ln153_3_fu_4714_p2);

assign sext_ln153_40_fu_5251_p1 = mul_res_53_reg_7315;

assign sext_ln153_41_fu_5260_p1 = $signed(add_ln153_48_fu_5254_p2);

assign sext_ln153_42_fu_5270_p1 = $signed(add_ln153_50_fu_5264_p2);

assign sext_ln153_43_fu_5280_p1 = $signed(add_ln153_51_fu_5274_p2);

assign sext_ln153_44_fu_5290_p1 = $signed(add_ln153_52_fu_5284_p2);

assign sext_ln153_45_fu_5321_p1 = mul_res_59_reg_7345;

assign sext_ln153_46_fu_5330_p1 = $signed(add_ln153_54_fu_5324_p2);

assign sext_ln153_47_fu_5340_p1 = $signed(add_ln153_56_fu_5334_p2);

assign sext_ln153_48_fu_5350_p1 = $signed(add_ln153_57_fu_5344_p2);

assign sext_ln153_49_fu_5360_p1 = $signed(add_ln153_58_fu_5354_p2);

assign sext_ln153_4_fu_4730_p1 = $signed(add_ln153_4_fu_4724_p2);

assign sext_ln153_50_fu_5391_p1 = mul_res_65_reg_7375;

assign sext_ln153_51_fu_5400_p1 = $signed(add_ln153_60_fu_5394_p2);

assign sext_ln153_52_fu_5416_p1 = $signed(add_ln153_62_fu_5410_p2);

assign sext_ln153_53_fu_5426_p1 = $signed(add_ln153_63_fu_5420_p2);

assign sext_ln153_54_fu_5436_p1 = $signed(add_ln153_64_fu_5430_p2);

assign sext_ln153_55_fu_5461_p1 = mul_res_71_reg_7405;

assign sext_ln153_56_fu_5470_p1 = $signed(add_ln153_66_fu_5464_p2);

assign sext_ln153_57_fu_5486_p1 = $signed(add_ln153_68_fu_5480_p2);

assign sext_ln153_58_fu_5496_p1 = $signed(add_ln153_69_fu_5490_p2);

assign sext_ln153_59_fu_5506_p1 = $signed(add_ln153_70_fu_5500_p2);

assign sext_ln153_5_fu_4761_p1 = mul_res_11_reg_7105;

assign sext_ln153_60_fu_5531_p1 = mul_res_77_reg_7435;

assign sext_ln153_61_fu_5540_p1 = $signed(add_ln153_72_fu_5534_p2);

assign sext_ln153_62_fu_5556_p1 = $signed(add_ln153_74_fu_5550_p2);

assign sext_ln153_63_fu_5566_p1 = $signed(add_ln153_75_fu_5560_p2);

assign sext_ln153_64_fu_5576_p1 = $signed(add_ln153_76_fu_5570_p2);

assign sext_ln153_65_fu_5601_p1 = mul_res_83_reg_7465;

assign sext_ln153_66_fu_5610_p1 = $signed(add_ln153_78_fu_5604_p2);

assign sext_ln153_67_fu_5626_p1 = $signed(add_ln153_80_fu_5620_p2);

assign sext_ln153_68_fu_5636_p1 = $signed(add_ln153_81_fu_5630_p2);

assign sext_ln153_69_fu_5646_p1 = $signed(add_ln153_82_fu_5640_p2);

assign sext_ln153_6_fu_4770_p1 = $signed(add_ln153_6_fu_4764_p2);

assign sext_ln153_70_fu_5671_p1 = mul_res_89_reg_7495;

assign sext_ln153_71_fu_5680_p1 = $signed(add_ln153_84_fu_5674_p2);

assign sext_ln153_72_fu_5696_p1 = $signed(add_ln153_86_fu_5690_p2);

assign sext_ln153_73_fu_5706_p1 = $signed(add_ln153_87_fu_5700_p2);

assign sext_ln153_74_fu_5716_p1 = $signed(add_ln153_88_fu_5710_p2);

assign sext_ln153_75_fu_5741_p1 = mul_res_95_reg_7525;

assign sext_ln153_76_fu_5750_p1 = $signed(add_ln153_90_fu_5744_p2);

assign sext_ln153_77_fu_5766_p1 = $signed(add_ln153_92_fu_5760_p2);

assign sext_ln153_78_fu_5776_p1 = $signed(add_ln153_93_fu_5770_p2);

assign sext_ln153_79_fu_5786_p1 = $signed(add_ln153_94_fu_5780_p2);

assign sext_ln153_7_fu_4780_p1 = $signed(add_ln153_8_fu_4774_p2);

assign sext_ln153_80_fu_5811_p1 = mul_res_101_reg_7555;

assign sext_ln153_81_fu_5820_p1 = $signed(add_ln153_96_fu_5814_p2);

assign sext_ln153_82_fu_5836_p1 = $signed(add_ln153_98_fu_5830_p2);

assign sext_ln153_83_fu_5846_p1 = $signed(add_ln153_99_fu_5840_p2);

assign sext_ln153_84_fu_5856_p1 = $signed(add_ln153_100_fu_5850_p2);

assign sext_ln153_85_fu_5881_p1 = mul_res_107_reg_7585;

assign sext_ln153_86_fu_5890_p1 = $signed(add_ln153_102_fu_5884_p2);

assign sext_ln153_87_fu_5906_p1 = $signed(add_ln153_104_fu_5900_p2);

assign sext_ln153_88_fu_5916_p1 = $signed(add_ln153_105_fu_5910_p2);

assign sext_ln153_89_fu_5926_p1 = $signed(add_ln153_106_fu_5920_p2);

assign sext_ln153_8_fu_4790_p1 = $signed(add_ln153_9_fu_4784_p2);

assign sext_ln153_90_fu_5951_p1 = mul_res_113_reg_7615;

assign sext_ln153_91_fu_5960_p1 = $signed(add_ln153_108_fu_5954_p2);

assign sext_ln153_92_fu_5976_p1 = $signed(add_ln153_110_fu_5970_p2);

assign sext_ln153_93_fu_5986_p1 = $signed(add_ln153_111_fu_5980_p2);

assign sext_ln153_94_fu_5996_p1 = $signed(add_ln153_112_fu_5990_p2);

assign sext_ln153_95_fu_6021_p1 = mul_res_119_reg_7645;

assign sext_ln153_96_fu_6030_p1 = $signed(add_ln153_114_fu_6024_p2);

assign sext_ln153_97_fu_6046_p1 = $signed(add_ln153_116_fu_6040_p2);

assign sext_ln153_98_fu_6056_p1 = $signed(add_ln153_117_fu_6050_p2);

assign sext_ln153_99_fu_6066_p1 = $signed(add_ln153_118_fu_6060_p2);

assign sext_ln153_9_fu_4800_p1 = $signed(add_ln153_10_fu_4794_p2);

assign sext_ln153_fu_4691_p1 = mul_res_5_reg_7075;

assign start_out = real_start;

assign tmp_11_fu_1048_p3 = {{trunc_ln121_reg_6932}, {5'd0}};

assign tmp_12_fu_1343_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[5:3]}};

assign tmp_13_fu_1375_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[8:6]}};

assign tmp_14_fu_1407_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[11:9]}};

assign tmp_15_fu_1439_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[14:12]}};

assign tmp_16_fu_1471_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[17:15]}};

assign tmp_17_fu_1503_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[20:18]}};

assign tmp_18_fu_1531_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[23:21]}};

assign tmp_19_fu_1559_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[26:24]}};

assign tmp_20_fu_1587_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[29:27]}};

assign tmp_21_fu_1615_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[32:30]}};

assign tmp_22_fu_1643_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[35:33]}};

assign tmp_23_fu_1671_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[38:36]}};

assign tmp_24_fu_1699_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[41:39]}};

assign tmp_25_fu_1727_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[44:42]}};

assign tmp_26_fu_1755_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[47:45]}};

assign tmp_27_fu_1783_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[50:48]}};

assign tmp_28_fu_1811_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[53:51]}};

assign tmp_29_fu_1839_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[56:54]}};

assign tmp_30_fu_1867_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[59:57]}};

assign tmp_31_fu_1895_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[62:60]}};

assign tmp_32_fu_1923_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[65:63]}};

assign tmp_33_fu_1951_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[68:66]}};

assign tmp_34_fu_1979_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[71:69]}};

assign tmp_35_fu_2007_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[74:72]}};

assign tmp_36_fu_2035_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[77:75]}};

assign tmp_37_fu_2063_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[80:78]}};

assign tmp_38_fu_2091_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[83:81]}};

assign tmp_39_fu_2119_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[86:84]}};

assign tmp_40_fu_2147_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[89:87]}};

assign tmp_41_fu_2175_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[92:90]}};

assign tmp_42_fu_2203_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[95:93]}};

assign tmp_43_fu_2231_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[98:96]}};

assign tmp_44_fu_2259_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[101:99]}};

assign tmp_45_fu_2287_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[104:102]}};

assign tmp_46_fu_2315_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[107:105]}};

assign tmp_47_fu_2343_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[110:108]}};

assign tmp_48_fu_2371_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[113:111]}};

assign tmp_49_fu_2399_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[116:114]}};

assign tmp_50_fu_2427_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[119:117]}};

assign tmp_51_fu_2455_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[122:120]}};

assign tmp_52_fu_2483_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[125:123]}};

assign tmp_53_fu_2511_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[128:126]}};

assign tmp_54_fu_2539_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[131:129]}};

assign tmp_55_fu_2567_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[134:132]}};

assign tmp_56_fu_2595_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[137:135]}};

assign tmp_57_fu_2623_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[140:138]}};

assign tmp_58_fu_2651_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[143:141]}};

assign tmp_59_fu_2679_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[146:144]}};

assign tmp_60_fu_2707_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[149:147]}};

assign tmp_61_fu_2735_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[152:150]}};

assign tmp_62_fu_2763_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[155:153]}};

assign tmp_63_fu_2791_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[158:156]}};

assign tmp_64_fu_2819_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[161:159]}};

assign tmp_65_fu_2847_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[164:162]}};

assign tmp_66_fu_2875_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[167:165]}};

assign tmp_67_fu_2903_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[170:168]}};

assign tmp_68_fu_2931_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[173:171]}};

assign tmp_69_fu_2959_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[176:174]}};

assign tmp_70_fu_2987_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[179:177]}};

assign tmp_71_fu_3015_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[182:180]}};

assign tmp_72_fu_3043_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[185:183]}};

assign tmp_73_fu_3071_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[188:186]}};

assign tmp_74_fu_3099_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[191:189]}};

assign tmp_75_fu_3127_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[194:192]}};

assign tmp_76_fu_3155_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[197:195]}};

assign tmp_77_fu_3183_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[200:198]}};

assign tmp_78_fu_3211_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[203:201]}};

assign tmp_79_fu_3239_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[206:204]}};

assign tmp_80_fu_3267_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[209:207]}};

assign tmp_81_fu_3295_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[212:210]}};

assign tmp_82_fu_3323_p4 = {{attn_inst_matmul_gen_k_weight_arr_658_q0[215:213]}};

assign trunc_ln121_fu_1010_p1 = select_ln121_1_fu_1002_p3[3:0];

assign trunc_ln131_fu_1087_p1 = attn_inst_matmul_gen_k_bias_arr_659_q0[9:0];

assign trunc_ln137_10_fu_1307_p4 = {{cache_window_sm_dout[35:33]}};

assign trunc_ln137_1_fu_1217_p4 = {{cache_window_sm_dout[8:6]}};

assign trunc_ln137_2_fu_1227_p4 = {{cache_window_sm_dout[11:9]}};

assign trunc_ln137_3_fu_1237_p4 = {{cache_window_sm_dout[14:12]}};

assign trunc_ln137_4_fu_1247_p4 = {{cache_window_sm_dout[17:15]}};

assign trunc_ln137_5_fu_1257_p4 = {{cache_window_sm_dout[20:18]}};

assign trunc_ln137_6_fu_1267_p4 = {{cache_window_sm_dout[23:21]}};

assign trunc_ln137_7_fu_1277_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln137_8_fu_1287_p4 = {{cache_window_sm_dout[29:27]}};

assign trunc_ln137_9_fu_1297_p4 = {{cache_window_sm_dout[32:30]}};

assign trunc_ln137_fu_1203_p1 = cache_window_sm_dout[2:0];

assign trunc_ln137_s_fu_1207_p4 = {{cache_window_sm_dout[5:3]}};

assign trunc_ln151_fu_1317_p1 = attn_inst_matmul_gen_k_weight_arr_658_q0[2:0];

assign xor_ln120_fu_966_p2 = (icmp_ln121_reg_6913 ^ 1'd1);

assign zext_ln121_fu_1044_p1 = select_ln121_1_reg_6927;

assign zext_ln151_1_fu_1068_p1 = add_ln151_fu_1062_p2;

assign zext_ln151_fu_1059_p1 = select_ln121_reg_6920;

endmodule //ATTN11_matmul_step2_mac_48
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_48_attn_inst_matmul_gen_k_bias_arr_659_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 117;
parameter AddressWidth = 4;
parameter AddressRange = 16;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_48_attn_inst_matmul_gen_k_bias_arr_659_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_48_attn_inst_matmul_gen_k_weight_arr_658_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 216;
parameter AddressWidth = 9;
parameter AddressRange = 512;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_48_attn_inst_matmul_gen_k_weight_arr_658_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_4_attn_inst_matmul_gen_v_bias_arr_661_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 114;
parameter AddressWidth = 4;
parameter AddressRange = 16;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_4_attn_inst_matmul_gen_v_bias_arr_661_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_matmul_step2_mac_4_attn_inst_matmul_gen_v_weight_arr_660_ROM_AUTO_1R (
    address0, ce0, q0, 
    reset, clk);

parameter DataWidth = 216;
parameter AddressWidth = 9;
parameter AddressRange = 512;
 
input[AddressWidth-1:0] address0;
input ce0;
output reg[DataWidth-1:0] q0;

input reset;
input clk;

 
reg [DataWidth-1:0] rom0[0:AddressRange-1];


initial begin
     
    $readmemh("C:/projects/AAAProjects/PROJ15_HG_PIPE_GITHUB/HG-PIPE/SPINAL/src/main/verilog/ATTN11/ATTN11_matmul_step2_mac_4_attn_inst_matmul_gen_v_weight_arr_660_ROM_AUTO_1R.dat", rom0);
end

  
always @(posedge clk) 
begin 
    if (ce0) 
    begin
        q0 <= rom0[address0];
    end
end


endmodule

// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

  (* use_dsp = "yes" *)  module ATTN11_mul_13s_12ns_25_2_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;











assign tmp_product = $signed(din0) * $signed({1'b0, din1});







always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;





    end
end




assign dout = buff0;






endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

  (* use_dsp = "yes" *)  module ATTN11_mul_13s_13s_24_2_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;












assign tmp_product = $signed(din0) * $signed(din1);






always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;





    end
end




assign dout = buff0;






endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

  module ATTN11_mul_16ns_8ns_23_2_1(clk,ce,reset,din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input clk;
input ce;
input reset;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;


reg signed [dout_WIDTH - 1 : 0] buff0;









assign tmp_product = $signed({1'b0, din0}) * $signed({1'b0, din1});









always @(posedge clk)
begin
    if (ce) begin
        buff0 <= tmp_product;





    end
end




assign dout = buff0;






endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

  (* use_dsp = "no" *)  module ATTN11_mul_3ns_3s_6_1_1(din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;











assign tmp_product = $signed({1'b0, din0}) * $signed(din1);










assign dout = tmp_product;







endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

  (* use_dsp = "no" *)  module ATTN11_mul_3s_3ns_6_1_1(din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;












assign tmp_product = $signed(din0) * $signed({1'b0, din1});









assign dout = tmp_product;







endmodule
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1 ns / 1 ps

  (* use_dsp = "no" *)  module ATTN11_mul_3s_3s_6_1_1(din0, din1, dout);
parameter ID = 1;
parameter NUM_STAGE = 0;
parameter din0_WIDTH = 14;
parameter din1_WIDTH = 12;
parameter dout_WIDTH = 26;

input [din0_WIDTH - 1 : 0] din0; 
input [din1_WIDTH - 1 : 0] din1; 
output [dout_WIDTH - 1 : 0] dout;

wire signed [dout_WIDTH - 1 : 0] tmp_product;













assign tmp_product = $signed(din0) * $signed(din1);








assign dout = tmp_product;







endmodule
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.2 (64-bit)
// Tool Version Limit: 2023.10
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps

module ATTN11_regslice_both
#(parameter 
    DataWidth=32
)(
    input ap_clk ,
    input ap_rst,

    input [DataWidth-1:0] data_in , 
    input vld_in , 
    output ack_in ,
    output [DataWidth-1:0] data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);
 

reg   [1:0] B_V_data_1_state;
wire   [DataWidth-1:0] B_V_data_1_data_in;
reg   [DataWidth-1:0] B_V_data_1_data_out;
wire    B_V_data_1_vld_reg;
wire    B_V_data_1_vld_in;
wire    B_V_data_1_vld_out;
reg   [DataWidth-1:0] B_V_data_1_payload_A;
reg   [DataWidth-1:0] B_V_data_1_payload_B;
reg    B_V_data_1_sel_rd;
reg    B_V_data_1_sel_wr;
wire    B_V_data_1_sel;
wire    B_V_data_1_load_A;
wire    B_V_data_1_load_B;
wire    B_V_data_1_state_cmp_full;
wire    B_V_data_1_ack_in;
wire    B_V_data_1_ack_out;

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_out) & (1'b1 == B_V_data_1_ack_out))) begin
            B_V_data_1_sel_rd <= ~B_V_data_1_sel_rd;
        end else begin
            B_V_data_1_sel_rd <= B_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_in))) begin
            B_V_data_1_sel_wr <= ~B_V_data_1_sel_wr;
        end else begin
            B_V_data_1_sel_wr <= B_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) | ((2'd2 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out)) | ((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd1;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b1 == B_V_data_1_ack_out)) | (~((1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)) & ~((1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) & (2'd3 == B_V_data_1_state)) | ((2'd2 == B_V_data_1_state) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd3;
        end else begin
            B_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_A)) begin
        B_V_data_1_payload_A <= B_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_B)) begin
        B_V_data_1_payload_B <= B_V_data_1_data_in;
    end
end

always @ (*) begin
    if ((1'b1 == B_V_data_1_sel)) begin
        B_V_data_1_data_out = B_V_data_1_payload_B;
    end else begin
        B_V_data_1_data_out = B_V_data_1_payload_A;
    end
end

assign B_V_data_1_ack_in = B_V_data_1_state[1'd1];
assign B_V_data_1_load_A = (~B_V_data_1_sel_wr & B_V_data_1_state_cmp_full);
assign B_V_data_1_load_B = (B_V_data_1_state_cmp_full & B_V_data_1_sel_wr);
assign B_V_data_1_sel = B_V_data_1_sel_rd;
assign B_V_data_1_state_cmp_full = ((B_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);
assign B_V_data_1_vld_out = B_V_data_1_state[1'd0];

assign ack_in = B_V_data_1_ack_in;
assign B_V_data_1_data_in = data_in;
assign B_V_data_1_vld_in = vld_in;

assign vld_out = B_V_data_1_vld_out;
assign data_out = B_V_data_1_data_out;
assign B_V_data_1_ack_out = ack_out;

assign apdone_blk = ((B_V_data_1_state == 2'd3 && ack_out == 1'b0) | (B_V_data_1_state == 2'd1));

endmodule // both

module ATTN11_regslice_both_w1
#(parameter 
    DataWidth=1
)(
    input ap_clk ,
    input ap_rst,

    input data_in , 
    input vld_in , 
    output ack_in ,
    output data_out, 
    output vld_out,
    input ack_out,
    output apdone_blk
);

reg     [1:0] B_V_data_1_state;
wire    B_V_data_1_data_in;
reg     B_V_data_1_data_out;
wire    B_V_data_1_vld_reg;
wire    B_V_data_1_vld_in;
wire    B_V_data_1_vld_out;
reg     B_V_data_1_payload_A;
reg     B_V_data_1_payload_B;
reg     B_V_data_1_sel_rd;
reg     B_V_data_1_sel_wr;
wire    B_V_data_1_sel;
wire    B_V_data_1_load_A;
wire    B_V_data_1_load_B;
wire    B_V_data_1_state_cmp_full;
wire    B_V_data_1_ack_in;
wire    B_V_data_1_ack_out;

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_out) & (1'b1 == B_V_data_1_ack_out))) begin
            B_V_data_1_sel_rd <= ~B_V_data_1_sel_rd;
        end else begin
            B_V_data_1_sel_rd <= B_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_in))) begin
            B_V_data_1_sel_wr <= ~B_V_data_1_sel_wr;
        end else begin
            B_V_data_1_sel_wr <= B_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        B_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) | ((2'd2 == B_V_data_1_state) & (1'b0 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out)) | ((2'd3 == B_V_data_1_state) & (1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd1;
        end else if ((((2'd1 == B_V_data_1_state) & (1'b1 == B_V_data_1_ack_out)) | (~((1'b0 == B_V_data_1_ack_out) & (1'b1 == B_V_data_1_vld_in)) & ~((1'b0 == B_V_data_1_vld_in) & (1'b1 == B_V_data_1_ack_out)) & (2'd3 == B_V_data_1_state)) | ((2'd2 == B_V_data_1_state) & (1'b1 == B_V_data_1_vld_in)))) begin
            B_V_data_1_state <= 2'd3;
        end else begin
            B_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_A)) begin
        B_V_data_1_payload_A <= B_V_data_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_V_data_1_load_B)) begin
        B_V_data_1_payload_B <= B_V_data_1_data_in;
    end
end

always @ (*) begin
    if ((1'b1 == B_V_data_1_sel)) begin
        B_V_data_1_data_out = B_V_data_1_payload_B;
    end else begin
        B_V_data_1_data_out = B_V_data_1_payload_A;
    end
end

assign B_V_data_1_ack_in = B_V_data_1_state[1'd1];
assign B_V_data_1_load_A = (~B_V_data_1_sel_wr & B_V_data_1_state_cmp_full);
assign B_V_data_1_load_B = (B_V_data_1_state_cmp_full & B_V_data_1_sel_wr);
assign B_V_data_1_sel = B_V_data_1_sel_rd;
assign B_V_data_1_state_cmp_full = ((B_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);
assign B_V_data_1_vld_out = B_V_data_1_state[1'd0];

assign ack_in = B_V_data_1_ack_in;
assign B_V_data_1_data_in = data_in;
assign B_V_data_1_vld_in = vld_in;

assign vld_out = B_V_data_1_vld_out;
assign data_out = B_V_data_1_data_out;
assign B_V_data_1_ack_out = ack_out;

assign apdone_blk = ((B_V_data_1_state == 2'd3 && ack_out == 1'b0) | (B_V_data_1_state == 2'd1));

endmodule // both


// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        vq_sm_transpose_head3_din,
        vq_sm_transpose_head3_num_data_valid,
        vq_sm_transpose_head3_fifo_cap,
        vq_sm_transpose_head3_full_n,
        vq_sm_transpose_head3_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [83:0] vq_sm_transpose_head3_din;
input  [9:0] vq_sm_transpose_head3_num_data_valid;
input  [9:0] vq_sm_transpose_head3_fifo_cap;
input   vq_sm_transpose_head3_full_n;
output   vq_sm_transpose_head3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream_read;
reg vq_sm_transpose_head3_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buffer_ce0;
wire   [2:0] buffer_q0;
reg    buffer_ce1;
reg    buffer_we1;
wire    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start;
wire    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done;
wire    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle;
wire    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready;
wire    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
wire   [9:0] grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1;
wire    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
wire    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
wire   [2:0] grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1;
wire    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start;
wire    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_done;
wire    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_idle;
wire    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_ready;
wire   [83:0] grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vq_sm_transpose_head3_din;
wire    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vq_sm_transpose_head3_write;
wire   [9:0] grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_buffer_r_address0;
wire    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_buffer_r_ce0;
wire   [83:0] grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vec_o_4_out_o;
wire    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vec_o_4_out_o_ap_vld;
reg    grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_97_p2;
wire    ap_CS_fsm_state3;
reg    grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [83:0] vec_o_0_fu_50;
reg   [3:0] tt_fu_46;
wire   [3:0] tt_12_fu_91_p2;
reg    ap_block_state1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg = 1'b0;
//#0 grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start_reg = 1'b0;
//#0 tt_fu_46 = 4'd0;
end

ATTN11_reorder_37_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_buffer_r_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start),
    .ap_done(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done),
    .ap_idle(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle),
    .ap_ready(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(3'd0),
    .unpacked_stream_fifo_cap(3'd0),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read),
    .buffer_r_address1(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .buffer_r_ce1(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1),
    .buffer_r_we1(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1),
    .buffer_r_d1(grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9 grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start),
    .ap_done(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_done),
    .ap_idle(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_idle),
    .ap_ready(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_ready),
    .vq_sm_transpose_head3_din(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vq_sm_transpose_head3_din),
    .vq_sm_transpose_head3_num_data_valid(10'd0),
    .vq_sm_transpose_head3_fifo_cap(10'd0),
    .vq_sm_transpose_head3_full_n(vq_sm_transpose_head3_full_n),
    .vq_sm_transpose_head3_write(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vq_sm_transpose_head3_write),
    .buffer_r_address0(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_buffer_r_address0),
    .buffer_r_ce0(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .vec_o_4_out_i(vec_o_0_fu_50),
    .vec_o_4_out_o(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vec_o_4_out_o),
    .vec_o_4_out_o_ap_vld(grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vec_o_4_out_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready == 1'b1)) begin
            grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_ready == 1'b1)) begin
            grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        tt_fu_46 <= 4'd0;
    end else if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tt_fu_46 <= tt_12_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vec_o_4_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        vec_o_0_fu_50 <= grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vec_o_4_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_ce0 = grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_ce1 = grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_we1 = grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        unpacked_stream_read = grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vq_sm_transpose_head3_write = grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vq_sm_transpose_head3_write;
    end else begin
        vq_sm_transpose_head3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start = grp_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;

assign grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start = grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_ap_start_reg;

assign icmp_ln69_fu_97_p2 = ((tt_fu_46 == 4'd14) ? 1'b1 : 1'b0);

assign tt_12_fu_91_p2 = (tt_fu_46 + 4'd1);

assign vq_sm_transpose_head3_din = grp_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9_fu_65_vq_sm_transpose_head3_din;

endmodule //ATTN11_reorder
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_37 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_num_data_valid,
        kq_sm_reshape_head1_fifo_cap,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [83:0] kq_sm_reshape_head1_din;
input  [9:0] kq_sm_reshape_head1_num_data_valid;
input  [9:0] kq_sm_reshape_head1_fifo_cap;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream_read;
reg kq_sm_reshape_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buffer_ce0;
wire   [2:0] buffer_q0;
reg    buffer_ce1;
reg    buffer_we1;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
wire   [9:0] grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
wire   [2:0] grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready;
wire   [83:0] grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head1_din;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head1_write;
wire   [9:0] grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
wire   [83:0] grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
wire    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld;
reg    grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_97_p2;
wire    ap_CS_fsm_state3;
reg    grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [83:0] vec_o_0_fu_50;
reg   [3:0] tt_fu_46;
wire   [3:0] tt_10_fu_91_p2;
reg    ap_block_state1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg = 1'b0;
//#0 grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg = 1'b0;
//#0 tt_fu_46 = 4'd0;
end

ATTN11_reorder_37_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start),
    .ap_done(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done),
    .ap_idle(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle),
    .ap_ready(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(3'd0),
    .unpacked_stream_fifo_cap(3'd0),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read),
    .buffer_r_address1(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .buffer_r_ce1(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1),
    .buffer_r_we1(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1),
    .buffer_r_d1(grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start),
    .ap_done(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done),
    .ap_idle(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle),
    .ap_ready(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready),
    .kq_sm_reshape_head1_din(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_num_data_valid(10'd0),
    .kq_sm_reshape_head1_fifo_cap(10'd0),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head1_write),
    .buffer_r_address0(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .buffer_r_ce0(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .vec_o_4_out_i(vec_o_0_fu_50),
    .vec_o_4_out_o(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o),
    .vec_o_4_out_o_ap_vld(grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready == 1'b1)) begin
            grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready == 1'b1)) begin
            grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        tt_fu_46 <= 4'd0;
    end else if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tt_fu_46 <= tt_10_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        vec_o_0_fu_50 <= grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_ce0 = grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_ce1 = grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_we1 = grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kq_sm_reshape_head1_write = grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head1_write;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        unpacked_stream_read = grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start = grp_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;

assign grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start = grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;

assign icmp_ln69_fu_97_p2 = ((tt_fu_46 == 4'd14) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = grp_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head1_din;

assign tt_10_fu_91_p2 = (tt_fu_46 + 4'd1);

endmodule //ATTN11_reorder_37
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN11_reorder_37_buffer_RAM_2P_LUTRAM_1R1W (
     
    address0, ce0,
    
    q0, 
      
    address1, ce1,
    d1, we1, 
    
     
    reset, clk);

parameter DataWidth = 3;
parameter AddressWidth = 10;
parameter AddressRange = 896;
 
input[AddressWidth-1:0] address0;
input ce0;

output reg[DataWidth-1:0] q0; 
 
input[AddressWidth-1:0] address1;
input ce1;
input[DataWidth-1:0] d1;
input we1; 


input reset;
input clk;

(* ram_style = "distributed"  *)reg [DataWidth-1:0] ram[0:AddressRange-1];


 



always @(posedge clk) 
begin 
    if (ce0) begin
        q0 <= ram[address0];
    end
end 

 
  

always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[address1] <= d1; 
    end
end 



 
 

endmodule

// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [2:0] buffer_r_d1;

reg ap_idle;
reg unpacked_stream_read;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_201_p2;
reg   [0:0] icmp_ln73_reg_466;
wire   [6:0] select_ln72_fu_269_p3;
reg   [6:0] select_ln72_reg_474;
wire   [0:0] and_ln72_fu_287_p2;
reg   [0:0] and_ln72_reg_479;
wire   [2:0] select_ln72_5_fu_293_p3;
reg   [2:0] select_ln72_5_reg_484;
wire   [6:0] add_ln73_fu_300_p2;
reg   [6:0] add_ln73_reg_489;
wire   [1:0] select_ln73_fu_311_p3;
reg   [1:0] select_ln73_reg_494;
wire   [9:0] add_ln78_fu_364_p2;
reg   [9:0] add_ln78_reg_500;
reg   [2:0] unpacked_stream_read_reg_505;
wire   [63:0] zext_ln78_fu_401_p1;
reg   [1:0] tip_fu_74;
wire   [1:0] add_ln74_fu_372_p2;
reg   [1:0] ap_sig_allocacmp_tip_load;
wire    ap_loop_init;
reg   [6:0] cit_fu_78;
wire   [6:0] select_ln73_9_fu_331_p3;
reg   [6:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_82;
wire   [8:0] select_ln73_10_fu_213_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] tp_tip_fu_86;
reg   [9:0] indvar_flatten12_fu_90;
wire   [9:0] add_ln72_5_fu_183_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [8:0] add_ln73_5_fu_207_p2;
wire   [0:0] icmp_ln74_fu_281_p2;
wire   [0:0] xor_ln72_fu_276_p2;
wire   [2:0] add_ln72_fu_263_p2;
wire   [0:0] or_ln73_fu_306_p2;
wire   [3:0] tmp_fu_336_p3;
wire   [3:0] zext_ln74_fu_347_p1;
wire   [3:0] empty_fu_350_p2;
wire   [9:0] tmp_s_fu_356_p3;
wire   [9:0] zext_ln74_6_fu_343_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 tip_fu_74 = 2'd0;
//#0 cit_fu_78 = 7'd0;
//#0 indvar_flatten_fu_82 = 9'd0;
//#0 tp_tip_fu_86 = 3'd0;
//#0 indvar_flatten12_fu_90 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cit_fu_78 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cit_fu_78 <= select_ln73_9_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_90 <= add_ln72_5_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_90 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= select_ln73_10_fu_213_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tip_fu_74 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            tip_fu_74 <= add_ln74_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tp_tip_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tp_tip_fu_86 <= select_ln72_5_fu_293_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln73_reg_489 <= add_ln73_fu_300_p2;
        and_ln72_reg_479 <= and_ln72_fu_287_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln73_reg_466 <= icmp_ln73_fu_201_p2;
        select_ln72_5_reg_484 <= select_ln72_5_fu_293_p3;
        select_ln72_reg_474 <= select_ln72_fu_269_p3;
        select_ln73_reg_494 <= select_ln73_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln78_reg_500 <= add_ln78_fu_364_p2;
        unpacked_stream_read_reg_505 <= unpacked_stream_dout;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_cit_load = select_ln73_9_fu_331_p3;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_tip_load = add_ln74_fu_372_p2;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_blk_n = unpacked_stream_empty_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_read = 1'b1;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_5_fu_183_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln72_fu_263_p2 = (tp_tip_fu_86 + 3'd1);

assign add_ln73_5_fu_207_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln73_fu_300_p2 = (select_ln72_fu_269_p3 + 7'd1);

assign add_ln74_fu_372_p2 = (select_ln73_reg_494 + 2'd1);

assign add_ln78_fu_364_p2 = (tmp_s_fu_356_p3 + zext_ln74_6_fu_343_p1);

assign and_ln72_fu_287_p2 = (xor_ln72_fu_276_p2 & icmp_ln74_fu_281_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (unpacked_stream_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address1 = zext_ln78_fu_401_p1;

assign buffer_r_d1 = unpacked_stream_read_reg_505;

assign empty_fu_350_p2 = (tmp_fu_336_p3 + zext_ln74_fu_347_p1);

assign icmp_ln72_fu_189_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_201_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_281_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln73_fu_306_p2 = (icmp_ln73_reg_466 | and_ln72_fu_287_p2);

assign select_ln72_5_fu_293_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? add_ln72_fu_263_p2 : tp_tip_fu_86);

assign select_ln72_fu_269_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_cit_load);

assign select_ln73_10_fu_213_p3 = ((icmp_ln73_fu_201_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_5_fu_207_p2);

assign select_ln73_9_fu_331_p3 = ((and_ln72_reg_479[0:0] == 1'b1) ? add_ln73_reg_489 : select_ln72_reg_474);

assign select_ln73_fu_311_p3 = ((or_ln73_fu_306_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign tmp_fu_336_p3 = {{select_ln72_5_reg_484}, {1'd0}};

assign tmp_s_fu_356_p3 = {{empty_fu_350_p2}, {6'd0}};

assign xor_ln72_fu_276_p2 = (icmp_ln73_reg_466 ^ 1'd1);

assign zext_ln74_6_fu_343_p1 = select_ln73_9_fu_331_p3;

assign zext_ln74_fu_347_p1 = select_ln73_reg_494;

assign zext_ln78_fu_401_p1 = add_ln78_reg_500;

endmodule //ATTN11_reorder_37_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_num_data_valid,
        kq_sm_reshape_head1_fifo_cap,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        vec_o_4_out_i,
        vec_o_4_out_o,
        vec_o_4_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] kq_sm_reshape_head1_din;
input  [9:0] kq_sm_reshape_head1_num_data_valid;
input  [9:0] kq_sm_reshape_head1_fifo_cap;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [2:0] buffer_r_q0;
input  [83:0] vec_o_4_out_i;
output  [83:0] vec_o_4_out_o;
output   vec_o_4_out_o_ap_vld;

reg ap_idle;
reg kq_sm_reshape_head1_write;
reg buffer_r_ce0;
reg[83:0] vec_o_4_out_o;
reg vec_o_4_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg   [0:0] and_ln99_reg_2155;
reg   [0:0] and_ln99_reg_2155_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_466_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_sm_reshape_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_2085;
wire   [0:0] icmp_ln86_fu_472_p2;
reg   [0:0] icmp_ln86_reg_2089;
reg   [0:0] icmp_ln86_reg_2089_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_2089_pp0_iter2_reg;
wire   [0:0] xor_ln85_fu_522_p2;
reg   [0:0] xor_ln85_reg_2099;
wire   [0:0] icmp_ln87_fu_527_p2;
reg   [0:0] icmp_ln87_reg_2104;
wire   [0:0] and_ln85_5_fu_533_p2;
reg   [0:0] and_ln85_5_reg_2109;
wire   [0:0] or_ln86_fu_539_p2;
reg   [0:0] or_ln86_reg_2115;
wire   [2:0] select_ln87_fu_658_p3;
reg   [2:0] select_ln87_reg_2120;
wire   [2:0] select_ln87_9_fu_666_p3;
reg   [2:0] select_ln87_9_reg_2127;
wire   [3:0] empty_1085_fu_674_p1;
reg   [3:0] empty_1085_reg_2134;
wire   [3:0] empty_1086_fu_771_p2;
reg   [3:0] empty_1086_reg_2139;
wire   [5:0] add_ln93_fu_795_p2;
reg   [5:0] add_ln93_reg_2144;
wire   [4:0] add_ln93_3_fu_801_p2;
reg   [4:0] add_ln93_3_reg_2149;
reg   [4:0] add_ln93_3_reg_2149_pp0_iter4_reg;
wire   [0:0] and_ln99_fu_812_p2;
reg   [0:0] and_ln99_reg_2155_pp0_iter4_reg;
reg   [0:0] and_ln99_reg_2155_pp0_iter5_reg;
reg   [2:0] buffer_load_reg_2164;
wire   [7:0] sub_ln93_fu_859_p2;
reg   [7:0] sub_ln93_reg_2169;
reg   [83:0] vec_o_4_out_load_reg_2174;
wire   [83:0] shl_ln93_fu_880_p2;
reg   [83:0] shl_ln93_reg_2192;
wire   [83:0] shl_ln93_3_fu_889_p2;
reg   [83:0] shl_ln93_3_reg_2210;
wire   [2:0] and_ln93_3_fu_1089_p2;
reg   [2:0] and_ln93_3_reg_2228;
wire   [2:0] trunc_ln93_214_fu_1095_p1;
reg   [2:0] trunc_ln93_214_reg_2233;
reg   [2:0] trunc_ln7_reg_2238;
reg   [2:0] trunc_ln100_s_reg_2243;
reg   [2:0] trunc_ln100_115_reg_2248;
reg   [2:0] trunc_ln100_116_reg_2253;
reg   [2:0] trunc_ln100_117_reg_2258;
reg   [2:0] trunc_ln100_118_reg_2263;
reg   [2:0] trunc_ln100_119_reg_2268;
reg   [2:0] trunc_ln100_120_reg_2273;
reg   [2:0] trunc_ln100_121_reg_2278;
reg   [2:0] trunc_ln100_122_reg_2283;
reg   [2:0] trunc_ln100_123_reg_2288;
reg   [2:0] trunc_ln100_124_reg_2293;
reg   [2:0] trunc_ln100_125_reg_2298;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln93_fu_836_p1;
wire   [83:0] or_ln93_fu_1219_p2;
reg   [2:0] cop_fu_316;
wire   [2:0] add_ln88_fu_678_p2;
wire    ap_loop_init;
reg   [2:0] ATTN11_1_fu_320;
reg   [5:0] indvar_flatten19_fu_324;
wire   [5:0] select_ln87_10_fu_550_p3;
reg   [4:0] cot_fu_328;
wire   [4:0] select_ln86_9_fu_635_p3;
reg   [9:0] indvar_flatten34_fu_332;
wire   [9:0] select_ln86_10_fu_484_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [1:0] tp_ATTN11_fu_336;
wire   [1:0] select_ln85_6_fu_732_p3;
reg   [9:0] indvar_flatten59_fu_340;
wire   [9:0] add_ln85_5_fu_460_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln86_5_fu_478_p2;
wire   [5:0] add_ln87_5_fu_544_p2;
wire   [0:0] icmp_ln88_fu_595_p2;
wire   [4:0] select_ln85_fu_588_p3;
wire   [0:0] xor_ln86_fu_619_p2;
wire   [0:0] and_ln85_fu_601_p2;
wire   [0:0] or_ln86_5_fu_624_p2;
wire   [4:0] add_ln86_fu_606_p2;
wire   [2:0] select_ln86_fu_612_p3;
wire   [0:0] and_ln86_fu_629_p2;
wire   [0:0] or_ln87_fu_648_p2;
wire   [0:0] or_ln87_6_fu_653_p2;
wire   [2:0] add_ln87_fu_642_p2;
wire   [1:0] add_ln85_fu_726_p2;
wire   [0:0] empty_fu_743_p1;
wire   [3:0] p_shl_fu_747_p3;
wire   [3:0] zext_ln85_fu_739_p1;
wire   [3:0] empty_1084_fu_755_p2;
wire   [3:0] zext_ln87_fu_768_p1;
wire   [5:0] tmp_s_fu_761_p3;
wire   [5:0] zext_ln88_3_fu_792_p1;
wire   [4:0] tmp_7_fu_782_p3;
wire   [4:0] zext_ln88_fu_789_p1;
wire   [0:0] cmp69_fu_777_p2;
wire   [0:0] icmp_ln99_fu_807_p2;
wire   [9:0] tmp_8_fu_830_p3;
wire   [6:0] shl_ln93_4_fu_848_p3;
wire   [7:0] zext_ln93_9_fu_855_p1;
wire   [7:0] zext_ln93_8_fu_845_p1;
wire  signed [63:0] sext_ln93_fu_873_p1;
wire   [83:0] zext_ln93_10_fu_876_p1;
wire   [83:0] zext_ln93_3_fu_886_p1;
wire   [2:0] trunc_ln93_fu_895_p1;
wire   [80:0] trunc_ln93_186_fu_943_p1;
wire   [77:0] trunc_ln93_185_fu_939_p1;
wire   [74:0] trunc_ln93_184_fu_935_p1;
wire   [71:0] trunc_ln93_183_fu_931_p1;
wire   [68:0] trunc_ln93_182_fu_927_p1;
wire   [65:0] trunc_ln93_181_fu_923_p1;
wire   [62:0] trunc_ln93_180_fu_919_p1;
wire   [59:0] trunc_ln93_179_fu_915_p1;
wire   [56:0] trunc_ln93_178_fu_911_p1;
wire   [53:0] trunc_ln93_177_fu_907_p1;
wire   [8:0] trunc_ln93_162_fu_903_p1;
wire   [5:0] trunc_ln93_161_fu_899_p1;
wire   [83:0] xor_ln93_fu_947_p2;
wire   [2:0] trunc_ln93_187_fu_959_p1;
wire   [2:0] xor_ln93_3_fu_953_p2;
wire   [5:0] trunc_ln93_213_fu_1079_p1;
wire   [5:0] xor_ln93_79_fu_1073_p2;
wire   [8:0] trunc_ln93_212_fu_1069_p1;
wire   [8:0] xor_ln93_78_fu_1063_p2;
wire   [53:0] trunc_ln93_197_fu_1059_p1;
wire   [53:0] xor_ln93_63_fu_1053_p2;
wire   [56:0] trunc_ln93_196_fu_1049_p1;
wire   [56:0] xor_ln93_62_fu_1043_p2;
wire   [59:0] trunc_ln93_195_fu_1039_p1;
wire   [59:0] xor_ln93_61_fu_1033_p2;
wire   [62:0] trunc_ln93_194_fu_1029_p1;
wire   [62:0] xor_ln93_60_fu_1023_p2;
wire   [65:0] trunc_ln93_193_fu_1019_p1;
wire   [65:0] xor_ln93_59_fu_1013_p2;
wire   [68:0] trunc_ln93_192_fu_1009_p1;
wire   [68:0] xor_ln93_58_fu_1003_p2;
wire   [71:0] trunc_ln93_191_fu_999_p1;
wire   [71:0] xor_ln93_57_fu_993_p2;
wire   [74:0] trunc_ln93_190_fu_989_p1;
wire   [74:0] xor_ln93_56_fu_983_p2;
wire   [77:0] trunc_ln93_189_fu_979_p1;
wire   [77:0] xor_ln93_55_fu_973_p2;
wire   [80:0] trunc_ln93_188_fu_969_p1;
wire   [80:0] xor_ln93_54_fu_963_p2;
wire   [83:0] and_ln93_fu_1083_p2;
wire   [80:0] trunc_ln93_240_fu_1215_p1;
wire   [80:0] and_ln93_79_fu_1209_p2;
wire   [77:0] trunc_ln93_239_fu_1205_p1;
wire   [77:0] and_ln93_78_fu_1199_p2;
wire   [74:0] trunc_ln93_238_fu_1195_p1;
wire   [74:0] and_ln93_77_fu_1189_p2;
wire   [71:0] trunc_ln93_237_fu_1185_p1;
wire   [71:0] and_ln93_76_fu_1179_p2;
wire   [68:0] trunc_ln93_236_fu_1175_p1;
wire   [68:0] and_ln93_75_fu_1169_p2;
wire   [65:0] trunc_ln93_235_fu_1165_p1;
wire   [65:0] and_ln93_74_fu_1159_p2;
wire   [62:0] trunc_ln93_234_fu_1155_p1;
wire   [62:0] and_ln93_73_fu_1149_p2;
wire   [59:0] trunc_ln93_233_fu_1145_p1;
wire   [59:0] and_ln93_72_fu_1139_p2;
wire   [56:0] trunc_ln93_232_fu_1135_p1;
wire   [56:0] and_ln93_71_fu_1129_p2;
wire   [53:0] trunc_ln93_231_fu_1125_p1;
wire   [53:0] and_ln93_70_fu_1119_p2;
wire   [8:0] trunc_ln93_216_fu_1115_p1;
wire   [8:0] and_ln93_55_fu_1109_p2;
wire   [5:0] trunc_ln93_215_fu_1105_p1;
wire   [5:0] and_ln93_54_fu_1099_p2;
wire   [5:0] or_ln99_125_fu_1291_p2;
wire   [8:0] or_ln99_124_fu_1285_p2;
wire   [53:0] or_ln99_109_fu_1279_p2;
wire   [56:0] or_ln99_108_fu_1273_p2;
wire   [59:0] or_ln99_107_fu_1267_p2;
wire   [62:0] or_ln99_106_fu_1261_p2;
wire   [65:0] or_ln99_105_fu_1255_p2;
wire   [68:0] or_ln99_104_fu_1249_p2;
wire   [71:0] or_ln99_103_fu_1243_p2;
wire   [74:0] or_ln99_102_fu_1237_p2;
wire   [77:0] or_ln99_101_fu_1231_p2;
wire   [80:0] or_ln99_fu_1225_p2;
wire   [50:0] trunc_ln93_176_fu_1480_p1;
wire   [47:0] trunc_ln93_175_fu_1477_p1;
wire   [44:0] trunc_ln93_174_fu_1474_p1;
wire   [41:0] trunc_ln93_173_fu_1471_p1;
wire   [38:0] trunc_ln93_172_fu_1468_p1;
wire   [35:0] trunc_ln93_171_fu_1465_p1;
wire   [32:0] trunc_ln93_170_fu_1462_p1;
wire   [29:0] trunc_ln93_169_fu_1459_p1;
wire   [26:0] trunc_ln93_168_fu_1456_p1;
wire   [23:0] trunc_ln93_167_fu_1453_p1;
wire   [20:0] trunc_ln93_166_fu_1450_p1;
wire   [17:0] trunc_ln93_165_fu_1447_p1;
wire   [14:0] trunc_ln93_164_fu_1444_p1;
wire   [11:0] trunc_ln93_163_fu_1441_p1;
wire   [11:0] trunc_ln93_211_fu_1606_p1;
wire   [11:0] xor_ln93_77_fu_1600_p2;
wire   [14:0] trunc_ln93_210_fu_1597_p1;
wire   [14:0] xor_ln93_76_fu_1591_p2;
wire   [17:0] trunc_ln93_209_fu_1588_p1;
wire   [17:0] xor_ln93_75_fu_1582_p2;
wire   [20:0] trunc_ln93_208_fu_1579_p1;
wire   [20:0] xor_ln93_74_fu_1573_p2;
wire   [23:0] trunc_ln93_207_fu_1570_p1;
wire   [23:0] xor_ln93_73_fu_1564_p2;
wire   [26:0] trunc_ln93_206_fu_1561_p1;
wire   [26:0] xor_ln93_72_fu_1555_p2;
wire   [29:0] trunc_ln93_205_fu_1552_p1;
wire   [29:0] xor_ln93_71_fu_1546_p2;
wire   [32:0] trunc_ln93_204_fu_1543_p1;
wire   [32:0] xor_ln93_70_fu_1537_p2;
wire   [35:0] trunc_ln93_203_fu_1534_p1;
wire   [35:0] xor_ln93_69_fu_1528_p2;
wire   [38:0] trunc_ln93_202_fu_1525_p1;
wire   [38:0] xor_ln93_68_fu_1519_p2;
wire   [41:0] trunc_ln93_201_fu_1516_p1;
wire   [41:0] xor_ln93_67_fu_1510_p2;
wire   [44:0] trunc_ln93_200_fu_1507_p1;
wire   [44:0] xor_ln93_66_fu_1501_p2;
wire   [47:0] trunc_ln93_199_fu_1498_p1;
wire   [47:0] xor_ln93_65_fu_1492_p2;
wire   [50:0] trunc_ln93_198_fu_1489_p1;
wire   [50:0] xor_ln93_64_fu_1483_p2;
wire   [50:0] trunc_ln93_230_fu_1732_p1;
wire   [50:0] and_ln93_69_fu_1726_p2;
wire   [47:0] trunc_ln93_229_fu_1723_p1;
wire   [47:0] and_ln93_68_fu_1717_p2;
wire   [44:0] trunc_ln93_228_fu_1714_p1;
wire   [44:0] and_ln93_67_fu_1708_p2;
wire   [41:0] trunc_ln93_227_fu_1705_p1;
wire   [41:0] and_ln93_66_fu_1699_p2;
wire   [38:0] trunc_ln93_226_fu_1696_p1;
wire   [38:0] and_ln93_65_fu_1690_p2;
wire   [35:0] trunc_ln93_225_fu_1687_p1;
wire   [35:0] and_ln93_64_fu_1681_p2;
wire   [32:0] trunc_ln93_224_fu_1678_p1;
wire   [32:0] and_ln93_63_fu_1672_p2;
wire   [29:0] trunc_ln93_223_fu_1669_p1;
wire   [29:0] and_ln93_62_fu_1663_p2;
wire   [26:0] trunc_ln93_222_fu_1660_p1;
wire   [26:0] and_ln93_61_fu_1654_p2;
wire   [23:0] trunc_ln93_221_fu_1651_p1;
wire   [23:0] and_ln93_60_fu_1645_p2;
wire   [20:0] trunc_ln93_220_fu_1642_p1;
wire   [20:0] and_ln93_59_fu_1636_p2;
wire   [17:0] trunc_ln93_219_fu_1633_p1;
wire   [17:0] and_ln93_58_fu_1627_p2;
wire   [14:0] trunc_ln93_218_fu_1624_p1;
wire   [14:0] and_ln93_57_fu_1618_p2;
wire   [11:0] trunc_ln93_217_fu_1615_p1;
wire   [11:0] and_ln93_56_fu_1609_p2;
wire   [11:0] or_ln99_123_fu_1813_p2;
wire   [14:0] or_ln99_122_fu_1807_p2;
wire   [17:0] or_ln99_121_fu_1801_p2;
wire   [20:0] or_ln99_120_fu_1795_p2;
wire   [23:0] or_ln99_119_fu_1789_p2;
wire   [26:0] or_ln99_118_fu_1783_p2;
wire   [29:0] or_ln99_117_fu_1777_p2;
wire   [32:0] or_ln99_116_fu_1771_p2;
wire   [35:0] or_ln99_115_fu_1765_p2;
wire   [38:0] or_ln99_114_fu_1759_p2;
wire   [41:0] or_ln99_113_fu_1753_p2;
wire   [44:0] or_ln99_112_fu_1747_p2;
wire   [47:0] or_ln99_111_fu_1741_p2;
wire   [50:0] or_ln99_110_fu_1735_p2;
wire   [2:0] trunc_ln100_114_fu_1949_p4;
wire   [2:0] trunc_ln100_113_fu_1939_p4;
wire   [2:0] trunc_ln100_112_fu_1929_p4;
wire   [2:0] trunc_ln100_111_fu_1919_p4;
wire   [2:0] trunc_ln100_110_fu_1909_p4;
wire   [2:0] trunc_ln100_109_fu_1899_p4;
wire   [2:0] trunc_ln100_108_fu_1889_p4;
wire   [2:0] trunc_ln100_107_fu_1879_p4;
wire   [2:0] trunc_ln100_106_fu_1869_p4;
wire   [2:0] trunc_ln100_105_fu_1859_p4;
wire   [2:0] trunc_ln100_104_fu_1849_p4;
wire   [2:0] trunc_ln100_103_fu_1839_p4;
wire   [2:0] trunc_ln100_102_fu_1829_p4;
wire   [2:0] trunc_ln100_101_fu_1819_p4;
wire   [2:0] or_ln100_fu_1959_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 cop_fu_316 = 3'd0;
//#0 ATTN11_1_fu_320 = 3'd0;
//#0 indvar_flatten19_fu_324 = 6'd0;
//#0 cot_fu_328 = 5'd0;
//#0 indvar_flatten34_fu_332 = 10'd0;
//#0 tp_ATTN11_fu_336 = 2'd0;
//#0 indvar_flatten59_fu_340 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cop_fu_316 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cop_fu_316 <= add_ln88_fu_678_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cot_fu_328 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cot_fu_328 <= select_ln86_9_fu_635_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_324 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln85_reg_2085 == 1'd0))) begin
            indvar_flatten19_fu_324 <= select_ln87_10_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_332 <= select_ln86_10_fu_484_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_332 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_340 <= add_ln85_5_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_340 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ATTN11_1_fu_320 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ATTN11_1_fu_320 <= select_ln87_9_fu_666_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tp_ATTN11_fu_336 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tp_ATTN11_fu_336 <= select_ln85_6_fu_732_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln93_3_reg_2149 <= add_ln93_3_fu_801_p2;
        add_ln93_3_reg_2149_pp0_iter4_reg <= add_ln93_3_reg_2149;
        add_ln93_reg_2144 <= add_ln93_fu_795_p2;
        and_ln93_3_reg_2228 <= and_ln93_3_fu_1089_p2;
        and_ln99_reg_2155 <= and_ln99_fu_812_p2;
        and_ln99_reg_2155_pp0_iter4_reg <= and_ln99_reg_2155;
        and_ln99_reg_2155_pp0_iter5_reg <= and_ln99_reg_2155_pp0_iter4_reg;
        and_ln99_reg_2155_pp0_iter6_reg <= and_ln99_reg_2155_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        buffer_load_reg_2164 <= buffer_r_q0;
        empty_1085_reg_2134 <= empty_1085_fu_674_p1;
        empty_1086_reg_2139 <= empty_1086_fu_771_p2;
        icmp_ln86_reg_2089_pp0_iter2_reg <= icmp_ln86_reg_2089_pp0_iter1_reg;
        select_ln87_9_reg_2127 <= select_ln87_9_fu_666_p3;
        select_ln87_reg_2120 <= select_ln87_fu_658_p3;
        shl_ln93_3_reg_2210 <= shl_ln93_3_fu_889_p2;
        shl_ln93_reg_2192 <= shl_ln93_fu_880_p2;
        sub_ln93_reg_2169 <= sub_ln93_fu_859_p2;
        trunc_ln100_115_reg_2248 <= {{or_ln99_109_fu_1279_p2[53:51]}};
        trunc_ln100_116_reg_2253 <= {{or_ln99_108_fu_1273_p2[56:54]}};
        trunc_ln100_117_reg_2258 <= {{or_ln99_107_fu_1267_p2[59:57]}};
        trunc_ln100_118_reg_2263 <= {{or_ln99_106_fu_1261_p2[62:60]}};
        trunc_ln100_119_reg_2268 <= {{or_ln99_105_fu_1255_p2[65:63]}};
        trunc_ln100_120_reg_2273 <= {{or_ln99_104_fu_1249_p2[68:66]}};
        trunc_ln100_121_reg_2278 <= {{or_ln99_103_fu_1243_p2[71:69]}};
        trunc_ln100_122_reg_2283 <= {{or_ln99_102_fu_1237_p2[74:72]}};
        trunc_ln100_123_reg_2288 <= {{or_ln99_101_fu_1231_p2[77:75]}};
        trunc_ln100_124_reg_2293 <= {{or_ln99_fu_1225_p2[80:78]}};
        trunc_ln100_125_reg_2298 <= {{or_ln93_fu_1219_p2[83:81]}};
        trunc_ln100_s_reg_2243 <= {{or_ln99_124_fu_1285_p2[8:6]}};
        trunc_ln7_reg_2238 <= {{or_ln99_125_fu_1291_p2[5:3]}};
        trunc_ln93_214_reg_2233 <= trunc_ln93_214_fu_1095_p1;
        vec_o_4_out_load_reg_2174 <= vec_o_4_out_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_5_reg_2109 <= and_ln85_5_fu_533_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln85_reg_2085 <= icmp_ln85_fu_466_p2;
        icmp_ln86_reg_2089 <= icmp_ln86_fu_472_p2;
        icmp_ln86_reg_2089_pp0_iter1_reg <= icmp_ln86_reg_2089;
        icmp_ln87_reg_2104 <= icmp_ln87_fu_527_p2;
        or_ln86_reg_2115 <= or_ln86_fu_539_p2;
        xor_ln85_reg_2099 <= xor_ln85_fu_522_p2;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_466_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln85_reg_2085 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_332;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_340;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_full_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        kq_sm_reshape_head1_write = 1'b1;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o = or_ln93_fu_1219_p2;
    end else begin
        vec_o_4_out_o = vec_o_4_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o_ap_vld = 1'b1;
    end else begin
        vec_o_4_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_5_fu_460_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 10'd1);

assign add_ln85_fu_726_p2 = (tp_ATTN11_fu_336 + 2'd1);

assign add_ln86_5_fu_478_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 10'd1);

assign add_ln86_fu_606_p2 = (select_ln85_fu_588_p3 + 5'd1);

assign add_ln87_5_fu_544_p2 = (indvar_flatten19_fu_324 + 6'd1);

assign add_ln87_fu_642_p2 = (select_ln86_fu_612_p3 + 3'd1);

assign add_ln88_fu_678_p2 = (select_ln87_fu_658_p3 + 3'd1);

assign add_ln93_3_fu_801_p2 = (tmp_7_fu_782_p3 + zext_ln88_fu_789_p1);

assign add_ln93_fu_795_p2 = (tmp_s_fu_761_p3 + zext_ln88_3_fu_792_p1);

assign and_ln85_5_fu_533_p2 = (xor_ln85_fu_522_p2 & icmp_ln87_fu_527_p2);

assign and_ln85_fu_601_p2 = (xor_ln85_reg_2099 & icmp_ln88_fu_595_p2);

assign and_ln86_fu_629_p2 = (or_ln86_5_fu_624_p2 & and_ln85_fu_601_p2);

assign and_ln93_3_fu_1089_p2 = (xor_ln93_3_fu_953_p2 & trunc_ln93_187_fu_959_p1);

assign and_ln93_54_fu_1099_p2 = (xor_ln93_79_fu_1073_p2 & trunc_ln93_213_fu_1079_p1);

assign and_ln93_55_fu_1109_p2 = (xor_ln93_78_fu_1063_p2 & trunc_ln93_212_fu_1069_p1);

assign and_ln93_56_fu_1609_p2 = (xor_ln93_77_fu_1600_p2 & trunc_ln93_211_fu_1606_p1);

assign and_ln93_57_fu_1618_p2 = (xor_ln93_76_fu_1591_p2 & trunc_ln93_210_fu_1597_p1);

assign and_ln93_58_fu_1627_p2 = (xor_ln93_75_fu_1582_p2 & trunc_ln93_209_fu_1588_p1);

assign and_ln93_59_fu_1636_p2 = (xor_ln93_74_fu_1573_p2 & trunc_ln93_208_fu_1579_p1);

assign and_ln93_60_fu_1645_p2 = (xor_ln93_73_fu_1564_p2 & trunc_ln93_207_fu_1570_p1);

assign and_ln93_61_fu_1654_p2 = (xor_ln93_72_fu_1555_p2 & trunc_ln93_206_fu_1561_p1);

assign and_ln93_62_fu_1663_p2 = (xor_ln93_71_fu_1546_p2 & trunc_ln93_205_fu_1552_p1);

assign and_ln93_63_fu_1672_p2 = (xor_ln93_70_fu_1537_p2 & trunc_ln93_204_fu_1543_p1);

assign and_ln93_64_fu_1681_p2 = (xor_ln93_69_fu_1528_p2 & trunc_ln93_203_fu_1534_p1);

assign and_ln93_65_fu_1690_p2 = (xor_ln93_68_fu_1519_p2 & trunc_ln93_202_fu_1525_p1);

assign and_ln93_66_fu_1699_p2 = (xor_ln93_67_fu_1510_p2 & trunc_ln93_201_fu_1516_p1);

assign and_ln93_67_fu_1708_p2 = (xor_ln93_66_fu_1501_p2 & trunc_ln93_200_fu_1507_p1);

assign and_ln93_68_fu_1717_p2 = (xor_ln93_65_fu_1492_p2 & trunc_ln93_199_fu_1498_p1);

assign and_ln93_69_fu_1726_p2 = (xor_ln93_64_fu_1483_p2 & trunc_ln93_198_fu_1489_p1);

assign and_ln93_70_fu_1119_p2 = (xor_ln93_63_fu_1053_p2 & trunc_ln93_197_fu_1059_p1);

assign and_ln93_71_fu_1129_p2 = (xor_ln93_62_fu_1043_p2 & trunc_ln93_196_fu_1049_p1);

assign and_ln93_72_fu_1139_p2 = (xor_ln93_61_fu_1033_p2 & trunc_ln93_195_fu_1039_p1);

assign and_ln93_73_fu_1149_p2 = (xor_ln93_60_fu_1023_p2 & trunc_ln93_194_fu_1029_p1);

assign and_ln93_74_fu_1159_p2 = (xor_ln93_59_fu_1013_p2 & trunc_ln93_193_fu_1019_p1);

assign and_ln93_75_fu_1169_p2 = (xor_ln93_58_fu_1003_p2 & trunc_ln93_192_fu_1009_p1);

assign and_ln93_76_fu_1179_p2 = (xor_ln93_57_fu_993_p2 & trunc_ln93_191_fu_999_p1);

assign and_ln93_77_fu_1189_p2 = (xor_ln93_56_fu_983_p2 & trunc_ln93_190_fu_989_p1);

assign and_ln93_78_fu_1199_p2 = (xor_ln93_55_fu_973_p2 & trunc_ln93_189_fu_979_p1);

assign and_ln93_79_fu_1209_p2 = (xor_ln93_54_fu_963_p2 & trunc_ln93_188_fu_969_p1);

assign and_ln93_fu_1083_p2 = (xor_ln93_fu_947_p2 & vec_o_4_out_i);

assign and_ln99_fu_812_p2 = (icmp_ln99_fu_807_p2 & cmp69_fu_777_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (kq_sm_reshape_head1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address0 = zext_ln93_fu_836_p1;

assign cmp69_fu_777_p2 = ((select_ln87_9_reg_2127 == 3'd6) ? 1'b1 : 1'b0);

assign empty_1084_fu_755_p2 = (p_shl_fu_747_p3 - zext_ln85_fu_739_p1);

assign empty_1085_fu_674_p1 = select_ln86_9_fu_635_p3[3:0];

assign empty_1086_fu_771_p2 = (empty_1084_fu_755_p2 + zext_ln87_fu_768_p1);

assign empty_fu_743_p1 = select_ln85_6_fu_732_p3[0:0];

assign icmp_ln85_fu_466_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_472_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_527_p2 = ((indvar_flatten19_fu_324 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_595_p2 = ((cop_fu_316 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_807_p2 = ((select_ln87_reg_2120 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln100_125_reg_2298}, {trunc_ln100_124_reg_2293}}, {trunc_ln100_123_reg_2288}}, {trunc_ln100_122_reg_2283}}, {trunc_ln100_121_reg_2278}}, {trunc_ln100_120_reg_2273}}, {trunc_ln100_119_reg_2268}}, {trunc_ln100_118_reg_2263}}, {trunc_ln100_117_reg_2258}}, {trunc_ln100_116_reg_2253}}, {trunc_ln100_115_reg_2248}}, {trunc_ln100_114_fu_1949_p4}}, {trunc_ln100_113_fu_1939_p4}}, {trunc_ln100_112_fu_1929_p4}}, {trunc_ln100_111_fu_1919_p4}}, {trunc_ln100_110_fu_1909_p4}}, {trunc_ln100_109_fu_1899_p4}}, {trunc_ln100_108_fu_1889_p4}}, {trunc_ln100_107_fu_1879_p4}}, {trunc_ln100_106_fu_1869_p4}}, {trunc_ln100_105_fu_1859_p4}}, {trunc_ln100_104_fu_1849_p4}}, {trunc_ln100_103_fu_1839_p4}}, {trunc_ln100_102_fu_1829_p4}}, {trunc_ln100_101_fu_1819_p4}}, {trunc_ln100_s_reg_2243}}, {trunc_ln7_reg_2238}}, {or_ln100_fu_1959_p2}};

assign or_ln100_fu_1959_p2 = (trunc_ln93_214_reg_2233 | and_ln93_3_reg_2228);

assign or_ln86_5_fu_624_p2 = (xor_ln86_fu_619_p2 | icmp_ln86_reg_2089_pp0_iter1_reg);

assign or_ln86_fu_539_p2 = (icmp_ln86_reg_2089 | and_ln85_5_fu_533_p2);

assign or_ln87_6_fu_653_p2 = (or_ln87_fu_648_p2 | icmp_ln86_reg_2089_pp0_iter1_reg);

assign or_ln87_fu_648_p2 = (and_ln86_fu_629_p2 | and_ln85_5_reg_2109);

assign or_ln93_fu_1219_p2 = (shl_ln93_3_fu_889_p2 | and_ln93_fu_1083_p2);

assign or_ln99_101_fu_1231_p2 = (trunc_ln93_239_fu_1205_p1 | and_ln93_78_fu_1199_p2);

assign or_ln99_102_fu_1237_p2 = (trunc_ln93_238_fu_1195_p1 | and_ln93_77_fu_1189_p2);

assign or_ln99_103_fu_1243_p2 = (trunc_ln93_237_fu_1185_p1 | and_ln93_76_fu_1179_p2);

assign or_ln99_104_fu_1249_p2 = (trunc_ln93_236_fu_1175_p1 | and_ln93_75_fu_1169_p2);

assign or_ln99_105_fu_1255_p2 = (trunc_ln93_235_fu_1165_p1 | and_ln93_74_fu_1159_p2);

assign or_ln99_106_fu_1261_p2 = (trunc_ln93_234_fu_1155_p1 | and_ln93_73_fu_1149_p2);

assign or_ln99_107_fu_1267_p2 = (trunc_ln93_233_fu_1145_p1 | and_ln93_72_fu_1139_p2);

assign or_ln99_108_fu_1273_p2 = (trunc_ln93_232_fu_1135_p1 | and_ln93_71_fu_1129_p2);

assign or_ln99_109_fu_1279_p2 = (trunc_ln93_231_fu_1125_p1 | and_ln93_70_fu_1119_p2);

assign or_ln99_110_fu_1735_p2 = (trunc_ln93_230_fu_1732_p1 | and_ln93_69_fu_1726_p2);

assign or_ln99_111_fu_1741_p2 = (trunc_ln93_229_fu_1723_p1 | and_ln93_68_fu_1717_p2);

assign or_ln99_112_fu_1747_p2 = (trunc_ln93_228_fu_1714_p1 | and_ln93_67_fu_1708_p2);

assign or_ln99_113_fu_1753_p2 = (trunc_ln93_227_fu_1705_p1 | and_ln93_66_fu_1699_p2);

assign or_ln99_114_fu_1759_p2 = (trunc_ln93_226_fu_1696_p1 | and_ln93_65_fu_1690_p2);

assign or_ln99_115_fu_1765_p2 = (trunc_ln93_225_fu_1687_p1 | and_ln93_64_fu_1681_p2);

assign or_ln99_116_fu_1771_p2 = (trunc_ln93_224_fu_1678_p1 | and_ln93_63_fu_1672_p2);

assign or_ln99_117_fu_1777_p2 = (trunc_ln93_223_fu_1669_p1 | and_ln93_62_fu_1663_p2);

assign or_ln99_118_fu_1783_p2 = (trunc_ln93_222_fu_1660_p1 | and_ln93_61_fu_1654_p2);

assign or_ln99_119_fu_1789_p2 = (trunc_ln93_221_fu_1651_p1 | and_ln93_60_fu_1645_p2);

assign or_ln99_120_fu_1795_p2 = (trunc_ln93_220_fu_1642_p1 | and_ln93_59_fu_1636_p2);

assign or_ln99_121_fu_1801_p2 = (trunc_ln93_219_fu_1633_p1 | and_ln93_58_fu_1627_p2);

assign or_ln99_122_fu_1807_p2 = (trunc_ln93_218_fu_1624_p1 | and_ln93_57_fu_1618_p2);

assign or_ln99_123_fu_1813_p2 = (trunc_ln93_217_fu_1615_p1 | and_ln93_56_fu_1609_p2);

assign or_ln99_124_fu_1285_p2 = (trunc_ln93_216_fu_1115_p1 | and_ln93_55_fu_1109_p2);

assign or_ln99_125_fu_1291_p2 = (trunc_ln93_215_fu_1105_p1 | and_ln93_54_fu_1099_p2);

assign or_ln99_fu_1225_p2 = (trunc_ln93_240_fu_1215_p1 | and_ln93_79_fu_1209_p2);

assign p_shl_fu_747_p3 = {{empty_fu_743_p1}, {3'd0}};

assign select_ln85_6_fu_732_p3 = ((icmp_ln86_reg_2089_pp0_iter2_reg[0:0] == 1'b1) ? add_ln85_fu_726_p2 : tp_ATTN11_fu_336);

assign select_ln85_fu_588_p3 = ((icmp_ln86_reg_2089_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : cot_fu_328);

assign select_ln86_10_fu_484_p3 = ((icmp_ln86_fu_472_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_5_fu_478_p2);

assign select_ln86_9_fu_635_p3 = ((and_ln85_5_reg_2109[0:0] == 1'b1) ? add_ln86_fu_606_p2 : select_ln85_fu_588_p3);

assign select_ln86_fu_612_p3 = ((or_ln86_reg_2115[0:0] == 1'b1) ? 3'd0 : ATTN11_1_fu_320);

assign select_ln87_10_fu_550_p3 = ((or_ln86_fu_539_p2[0:0] == 1'b1) ? 6'd1 : add_ln87_5_fu_544_p2);

assign select_ln87_9_fu_666_p3 = ((and_ln86_fu_629_p2[0:0] == 1'b1) ? add_ln87_fu_642_p2 : select_ln86_fu_612_p3);

assign select_ln87_fu_658_p3 = ((or_ln87_6_fu_653_p2[0:0] == 1'b1) ? 3'd0 : cop_fu_316);

assign sext_ln93_fu_873_p1 = $signed(sub_ln93_reg_2169);

assign shl_ln93_3_fu_889_p2 = zext_ln93_3_fu_886_p1 << zext_ln93_10_fu_876_p1;

assign shl_ln93_4_fu_848_p3 = {{add_ln93_3_reg_2149_pp0_iter4_reg}, {2'd0}};

assign shl_ln93_fu_880_p2 = 84'd7 << zext_ln93_10_fu_876_p1;

assign sub_ln93_fu_859_p2 = (zext_ln93_9_fu_855_p1 - zext_ln93_8_fu_845_p1);

assign tmp_7_fu_782_p3 = {{select_ln87_9_reg_2127}, {2'd0}};

assign tmp_8_fu_830_p3 = {{empty_1086_reg_2139}, {add_ln93_reg_2144}};

assign tmp_s_fu_761_p3 = {{empty_1085_reg_2134}, {2'd0}};

assign trunc_ln100_101_fu_1819_p4 = {{or_ln99_123_fu_1813_p2[11:9]}};

assign trunc_ln100_102_fu_1829_p4 = {{or_ln99_122_fu_1807_p2[14:12]}};

assign trunc_ln100_103_fu_1839_p4 = {{or_ln99_121_fu_1801_p2[17:15]}};

assign trunc_ln100_104_fu_1849_p4 = {{or_ln99_120_fu_1795_p2[20:18]}};

assign trunc_ln100_105_fu_1859_p4 = {{or_ln99_119_fu_1789_p2[23:21]}};

assign trunc_ln100_106_fu_1869_p4 = {{or_ln99_118_fu_1783_p2[26:24]}};

assign trunc_ln100_107_fu_1879_p4 = {{or_ln99_117_fu_1777_p2[29:27]}};

assign trunc_ln100_108_fu_1889_p4 = {{or_ln99_116_fu_1771_p2[32:30]}};

assign trunc_ln100_109_fu_1899_p4 = {{or_ln99_115_fu_1765_p2[35:33]}};

assign trunc_ln100_110_fu_1909_p4 = {{or_ln99_114_fu_1759_p2[38:36]}};

assign trunc_ln100_111_fu_1919_p4 = {{or_ln99_113_fu_1753_p2[41:39]}};

assign trunc_ln100_112_fu_1929_p4 = {{or_ln99_112_fu_1747_p2[44:42]}};

assign trunc_ln100_113_fu_1939_p4 = {{or_ln99_111_fu_1741_p2[47:45]}};

assign trunc_ln100_114_fu_1949_p4 = {{or_ln99_110_fu_1735_p2[50:48]}};

assign trunc_ln93_161_fu_899_p1 = shl_ln93_fu_880_p2[5:0];

assign trunc_ln93_162_fu_903_p1 = shl_ln93_fu_880_p2[8:0];

assign trunc_ln93_163_fu_1441_p1 = shl_ln93_reg_2192[11:0];

assign trunc_ln93_164_fu_1444_p1 = shl_ln93_reg_2192[14:0];

assign trunc_ln93_165_fu_1447_p1 = shl_ln93_reg_2192[17:0];

assign trunc_ln93_166_fu_1450_p1 = shl_ln93_reg_2192[20:0];

assign trunc_ln93_167_fu_1453_p1 = shl_ln93_reg_2192[23:0];

assign trunc_ln93_168_fu_1456_p1 = shl_ln93_reg_2192[26:0];

assign trunc_ln93_169_fu_1459_p1 = shl_ln93_reg_2192[29:0];

assign trunc_ln93_170_fu_1462_p1 = shl_ln93_reg_2192[32:0];

assign trunc_ln93_171_fu_1465_p1 = shl_ln93_reg_2192[35:0];

assign trunc_ln93_172_fu_1468_p1 = shl_ln93_reg_2192[38:0];

assign trunc_ln93_173_fu_1471_p1 = shl_ln93_reg_2192[41:0];

assign trunc_ln93_174_fu_1474_p1 = shl_ln93_reg_2192[44:0];

assign trunc_ln93_175_fu_1477_p1 = shl_ln93_reg_2192[47:0];

assign trunc_ln93_176_fu_1480_p1 = shl_ln93_reg_2192[50:0];

assign trunc_ln93_177_fu_907_p1 = shl_ln93_fu_880_p2[53:0];

assign trunc_ln93_178_fu_911_p1 = shl_ln93_fu_880_p2[56:0];

assign trunc_ln93_179_fu_915_p1 = shl_ln93_fu_880_p2[59:0];

assign trunc_ln93_180_fu_919_p1 = shl_ln93_fu_880_p2[62:0];

assign trunc_ln93_181_fu_923_p1 = shl_ln93_fu_880_p2[65:0];

assign trunc_ln93_182_fu_927_p1 = shl_ln93_fu_880_p2[68:0];

assign trunc_ln93_183_fu_931_p1 = shl_ln93_fu_880_p2[71:0];

assign trunc_ln93_184_fu_935_p1 = shl_ln93_fu_880_p2[74:0];

assign trunc_ln93_185_fu_939_p1 = shl_ln93_fu_880_p2[77:0];

assign trunc_ln93_186_fu_943_p1 = shl_ln93_fu_880_p2[80:0];

assign trunc_ln93_187_fu_959_p1 = vec_o_4_out_i[2:0];

assign trunc_ln93_188_fu_969_p1 = vec_o_4_out_i[80:0];

assign trunc_ln93_189_fu_979_p1 = vec_o_4_out_i[77:0];

assign trunc_ln93_190_fu_989_p1 = vec_o_4_out_i[74:0];

assign trunc_ln93_191_fu_999_p1 = vec_o_4_out_i[71:0];

assign trunc_ln93_192_fu_1009_p1 = vec_o_4_out_i[68:0];

assign trunc_ln93_193_fu_1019_p1 = vec_o_4_out_i[65:0];

assign trunc_ln93_194_fu_1029_p1 = vec_o_4_out_i[62:0];

assign trunc_ln93_195_fu_1039_p1 = vec_o_4_out_i[59:0];

assign trunc_ln93_196_fu_1049_p1 = vec_o_4_out_i[56:0];

assign trunc_ln93_197_fu_1059_p1 = vec_o_4_out_i[53:0];

assign trunc_ln93_198_fu_1489_p1 = vec_o_4_out_load_reg_2174[50:0];

assign trunc_ln93_199_fu_1498_p1 = vec_o_4_out_load_reg_2174[47:0];

assign trunc_ln93_200_fu_1507_p1 = vec_o_4_out_load_reg_2174[44:0];

assign trunc_ln93_201_fu_1516_p1 = vec_o_4_out_load_reg_2174[41:0];

assign trunc_ln93_202_fu_1525_p1 = vec_o_4_out_load_reg_2174[38:0];

assign trunc_ln93_203_fu_1534_p1 = vec_o_4_out_load_reg_2174[35:0];

assign trunc_ln93_204_fu_1543_p1 = vec_o_4_out_load_reg_2174[32:0];

assign trunc_ln93_205_fu_1552_p1 = vec_o_4_out_load_reg_2174[29:0];

assign trunc_ln93_206_fu_1561_p1 = vec_o_4_out_load_reg_2174[26:0];

assign trunc_ln93_207_fu_1570_p1 = vec_o_4_out_load_reg_2174[23:0];

assign trunc_ln93_208_fu_1579_p1 = vec_o_4_out_load_reg_2174[20:0];

assign trunc_ln93_209_fu_1588_p1 = vec_o_4_out_load_reg_2174[17:0];

assign trunc_ln93_210_fu_1597_p1 = vec_o_4_out_load_reg_2174[14:0];

assign trunc_ln93_211_fu_1606_p1 = vec_o_4_out_load_reg_2174[11:0];

assign trunc_ln93_212_fu_1069_p1 = vec_o_4_out_i[8:0];

assign trunc_ln93_213_fu_1079_p1 = vec_o_4_out_i[5:0];

assign trunc_ln93_214_fu_1095_p1 = shl_ln93_3_fu_889_p2[2:0];

assign trunc_ln93_215_fu_1105_p1 = shl_ln93_3_fu_889_p2[5:0];

assign trunc_ln93_216_fu_1115_p1 = shl_ln93_3_fu_889_p2[8:0];

assign trunc_ln93_217_fu_1615_p1 = shl_ln93_3_reg_2210[11:0];

assign trunc_ln93_218_fu_1624_p1 = shl_ln93_3_reg_2210[14:0];

assign trunc_ln93_219_fu_1633_p1 = shl_ln93_3_reg_2210[17:0];

assign trunc_ln93_220_fu_1642_p1 = shl_ln93_3_reg_2210[20:0];

assign trunc_ln93_221_fu_1651_p1 = shl_ln93_3_reg_2210[23:0];

assign trunc_ln93_222_fu_1660_p1 = shl_ln93_3_reg_2210[26:0];

assign trunc_ln93_223_fu_1669_p1 = shl_ln93_3_reg_2210[29:0];

assign trunc_ln93_224_fu_1678_p1 = shl_ln93_3_reg_2210[32:0];

assign trunc_ln93_225_fu_1687_p1 = shl_ln93_3_reg_2210[35:0];

assign trunc_ln93_226_fu_1696_p1 = shl_ln93_3_reg_2210[38:0];

assign trunc_ln93_227_fu_1705_p1 = shl_ln93_3_reg_2210[41:0];

assign trunc_ln93_228_fu_1714_p1 = shl_ln93_3_reg_2210[44:0];

assign trunc_ln93_229_fu_1723_p1 = shl_ln93_3_reg_2210[47:0];

assign trunc_ln93_230_fu_1732_p1 = shl_ln93_3_reg_2210[50:0];

assign trunc_ln93_231_fu_1125_p1 = shl_ln93_3_fu_889_p2[53:0];

assign trunc_ln93_232_fu_1135_p1 = shl_ln93_3_fu_889_p2[56:0];

assign trunc_ln93_233_fu_1145_p1 = shl_ln93_3_fu_889_p2[59:0];

assign trunc_ln93_234_fu_1155_p1 = shl_ln93_3_fu_889_p2[62:0];

assign trunc_ln93_235_fu_1165_p1 = shl_ln93_3_fu_889_p2[65:0];

assign trunc_ln93_236_fu_1175_p1 = shl_ln93_3_fu_889_p2[68:0];

assign trunc_ln93_237_fu_1185_p1 = shl_ln93_3_fu_889_p2[71:0];

assign trunc_ln93_238_fu_1195_p1 = shl_ln93_3_fu_889_p2[74:0];

assign trunc_ln93_239_fu_1205_p1 = shl_ln93_3_fu_889_p2[77:0];

assign trunc_ln93_240_fu_1215_p1 = shl_ln93_3_fu_889_p2[80:0];

assign trunc_ln93_fu_895_p1 = shl_ln93_fu_880_p2[2:0];

assign xor_ln85_fu_522_p2 = (icmp_ln86_reg_2089 ^ 1'd1);

assign xor_ln86_fu_619_p2 = (icmp_ln87_reg_2104 ^ 1'd1);

assign xor_ln93_3_fu_953_p2 = (trunc_ln93_fu_895_p1 ^ 3'd7);

assign xor_ln93_54_fu_963_p2 = (trunc_ln93_186_fu_943_p1 ^ 81'd2115620184325601055735808);

assign xor_ln93_55_fu_973_p2 = (trunc_ln93_185_fu_939_p1 ^ 78'd264452523040700131966976);

assign xor_ln93_56_fu_983_p2 = (trunc_ln93_184_fu_935_p1 ^ 75'd33056565380087516495872);

assign xor_ln93_57_fu_993_p2 = (trunc_ln93_183_fu_931_p1 ^ 72'd4132070672510939561984);

assign xor_ln93_58_fu_1003_p2 = (trunc_ln93_182_fu_927_p1 ^ 69'd516508834063867445248);

assign xor_ln93_59_fu_1013_p2 = (trunc_ln93_181_fu_923_p1 ^ 66'd64563604257983430656);

assign xor_ln93_60_fu_1023_p2 = (trunc_ln93_180_fu_919_p1 ^ 63'd8070450532247928832);

assign xor_ln93_61_fu_1033_p2 = (trunc_ln93_179_fu_915_p1 ^ 60'd1008806316530991104);

assign xor_ln93_62_fu_1043_p2 = (trunc_ln93_178_fu_911_p1 ^ 57'd126100789566373888);

assign xor_ln93_63_fu_1053_p2 = (trunc_ln93_177_fu_907_p1 ^ 54'd15762598695796736);

assign xor_ln93_64_fu_1483_p2 = (trunc_ln93_176_fu_1480_p1 ^ 51'd1970324836974592);

assign xor_ln93_65_fu_1492_p2 = (trunc_ln93_175_fu_1477_p1 ^ 48'd246290604621824);

assign xor_ln93_66_fu_1501_p2 = (trunc_ln93_174_fu_1474_p1 ^ 45'd30786325577728);

assign xor_ln93_67_fu_1510_p2 = (trunc_ln93_173_fu_1471_p1 ^ 42'd3848290697216);

assign xor_ln93_68_fu_1519_p2 = (trunc_ln93_172_fu_1468_p1 ^ 39'd481036337152);

assign xor_ln93_69_fu_1528_p2 = (trunc_ln93_171_fu_1465_p1 ^ 36'd60129542144);

assign xor_ln93_70_fu_1537_p2 = (trunc_ln93_170_fu_1462_p1 ^ 33'd7516192768);

assign xor_ln93_71_fu_1546_p2 = (trunc_ln93_169_fu_1459_p1 ^ 30'd939524096);

assign xor_ln93_72_fu_1555_p2 = (trunc_ln93_168_fu_1456_p1 ^ 27'd117440512);

assign xor_ln93_73_fu_1564_p2 = (trunc_ln93_167_fu_1453_p1 ^ 24'd14680064);

assign xor_ln93_74_fu_1573_p2 = (trunc_ln93_166_fu_1450_p1 ^ 21'd1835008);

assign xor_ln93_75_fu_1582_p2 = (trunc_ln93_165_fu_1447_p1 ^ 18'd229376);

assign xor_ln93_76_fu_1591_p2 = (trunc_ln93_164_fu_1444_p1 ^ 15'd28672);

assign xor_ln93_77_fu_1600_p2 = (trunc_ln93_163_fu_1441_p1 ^ 12'd3584);

assign xor_ln93_78_fu_1063_p2 = (trunc_ln93_162_fu_903_p1 ^ 9'd448);

assign xor_ln93_79_fu_1073_p2 = (trunc_ln93_161_fu_899_p1 ^ 6'd56);

assign xor_ln93_fu_947_p2 = (shl_ln93_fu_880_p2 ^ 84'd19342813113834066795298815);

assign zext_ln85_fu_739_p1 = select_ln85_6_fu_732_p3;

assign zext_ln87_fu_768_p1 = select_ln87_9_reg_2127;

assign zext_ln88_3_fu_792_p1 = select_ln87_reg_2120;

assign zext_ln88_fu_789_p1 = select_ln87_reg_2120;

assign zext_ln93_10_fu_876_p1 = $unsigned(sext_ln93_fu_873_p1);

assign zext_ln93_3_fu_886_p1 = buffer_load_reg_2164;

assign zext_ln93_8_fu_845_p1 = add_ln93_3_reg_2149_pp0_iter4_reg;

assign zext_ln93_9_fu_855_p1 = shl_ln93_4_fu_848_p3;

assign zext_ln93_fu_836_p1 = tmp_8_fu_830_p3;

endmodule //ATTN11_reorder_37_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_39 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        kq_sm_reshape_head2_din,
        kq_sm_reshape_head2_num_data_valid,
        kq_sm_reshape_head2_fifo_cap,
        kq_sm_reshape_head2_full_n,
        kq_sm_reshape_head2_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [83:0] kq_sm_reshape_head2_din;
input  [9:0] kq_sm_reshape_head2_num_data_valid;
input  [9:0] kq_sm_reshape_head2_fifo_cap;
input   kq_sm_reshape_head2_full_n;
output   kq_sm_reshape_head2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream_read;
reg kq_sm_reshape_head2_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buffer_ce0;
wire   [2:0] buffer_q0;
reg    buffer_ce1;
reg    buffer_we1;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
wire   [9:0] grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
wire   [2:0] grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready;
wire   [83:0] grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head2_din;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head2_write;
wire   [9:0] grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
wire   [83:0] grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
wire    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld;
reg    grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_97_p2;
wire    ap_CS_fsm_state3;
reg    grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [83:0] vec_o_0_fu_50;
reg   [3:0] tt_fu_46;
wire   [3:0] tt_8_fu_91_p2;
reg    ap_block_state1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg = 1'b0;
//#0 grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg = 1'b0;
//#0 tt_fu_46 = 4'd0;
end

ATTN11_reorder_37_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start),
    .ap_done(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done),
    .ap_idle(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle),
    .ap_ready(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(3'd0),
    .unpacked_stream_fifo_cap(3'd0),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read),
    .buffer_r_address1(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .buffer_r_ce1(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1),
    .buffer_r_we1(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1),
    .buffer_r_d1(grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start),
    .ap_done(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done),
    .ap_idle(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle),
    .ap_ready(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready),
    .kq_sm_reshape_head2_din(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head2_din),
    .kq_sm_reshape_head2_num_data_valid(10'd0),
    .kq_sm_reshape_head2_fifo_cap(10'd0),
    .kq_sm_reshape_head2_full_n(kq_sm_reshape_head2_full_n),
    .kq_sm_reshape_head2_write(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head2_write),
    .buffer_r_address0(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .buffer_r_ce0(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .vec_o_4_out_i(vec_o_0_fu_50),
    .vec_o_4_out_o(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o),
    .vec_o_4_out_o_ap_vld(grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready == 1'b1)) begin
            grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready == 1'b1)) begin
            grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        tt_fu_46 <= 4'd0;
    end else if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tt_fu_46 <= tt_8_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        vec_o_0_fu_50 <= grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_ce0 = grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_ce1 = grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_we1 = grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kq_sm_reshape_head2_write = grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head2_write;
    end else begin
        kq_sm_reshape_head2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        unpacked_stream_read = grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start = grp_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;

assign grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start = grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;

assign icmp_ln69_fu_97_p2 = ((tt_fu_46 == 4'd14) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head2_din = grp_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head2_din;

assign tt_8_fu_91_p2 = (tt_fu_46 + 4'd1);

endmodule //ATTN11_reorder_39
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [2:0] buffer_r_d1;

reg ap_idle;
reg unpacked_stream_read;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_201_p2;
reg   [0:0] icmp_ln73_reg_466;
wire   [6:0] select_ln72_fu_269_p3;
reg   [6:0] select_ln72_reg_474;
wire   [0:0] and_ln72_fu_287_p2;
reg   [0:0] and_ln72_reg_479;
wire   [2:0] select_ln72_4_fu_293_p3;
reg   [2:0] select_ln72_4_reg_484;
wire   [6:0] add_ln73_fu_300_p2;
reg   [6:0] add_ln73_reg_489;
wire   [1:0] select_ln73_fu_311_p3;
reg   [1:0] select_ln73_reg_494;
wire   [9:0] add_ln78_fu_364_p2;
reg   [9:0] add_ln78_reg_500;
reg   [2:0] unpacked_stream_read_reg_505;
wire   [63:0] zext_ln78_fu_401_p1;
reg   [1:0] tip_fu_74;
wire   [1:0] add_ln74_fu_372_p2;
reg   [1:0] ap_sig_allocacmp_tip_load;
wire    ap_loop_init;
reg   [6:0] cit_fu_78;
wire   [6:0] select_ln73_7_fu_331_p3;
reg   [6:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_82;
wire   [8:0] select_ln73_8_fu_213_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] tp_tip_fu_86;
reg   [9:0] indvar_flatten12_fu_90;
wire   [9:0] add_ln72_4_fu_183_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [8:0] add_ln73_4_fu_207_p2;
wire   [0:0] icmp_ln74_fu_281_p2;
wire   [0:0] xor_ln72_fu_276_p2;
wire   [2:0] add_ln72_fu_263_p2;
wire   [0:0] or_ln73_fu_306_p2;
wire   [3:0] tmp_fu_336_p3;
wire   [3:0] zext_ln74_fu_347_p1;
wire   [3:0] empty_fu_350_p2;
wire   [9:0] tmp_s_fu_356_p3;
wire   [9:0] zext_ln74_5_fu_343_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 tip_fu_74 = 2'd0;
//#0 cit_fu_78 = 7'd0;
//#0 indvar_flatten_fu_82 = 9'd0;
//#0 tp_tip_fu_86 = 3'd0;
//#0 indvar_flatten12_fu_90 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cit_fu_78 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cit_fu_78 <= select_ln73_7_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_90 <= add_ln72_4_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_90 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= select_ln73_8_fu_213_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tip_fu_74 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            tip_fu_74 <= add_ln74_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tp_tip_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tp_tip_fu_86 <= select_ln72_4_fu_293_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln73_reg_489 <= add_ln73_fu_300_p2;
        and_ln72_reg_479 <= and_ln72_fu_287_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln73_reg_466 <= icmp_ln73_fu_201_p2;
        select_ln72_4_reg_484 <= select_ln72_4_fu_293_p3;
        select_ln72_reg_474 <= select_ln72_fu_269_p3;
        select_ln73_reg_494 <= select_ln73_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln78_reg_500 <= add_ln78_fu_364_p2;
        unpacked_stream_read_reg_505 <= unpacked_stream_dout;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_cit_load = select_ln73_7_fu_331_p3;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_tip_load = add_ln74_fu_372_p2;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_blk_n = unpacked_stream_empty_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_read = 1'b1;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_4_fu_183_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln72_fu_263_p2 = (tp_tip_fu_86 + 3'd1);

assign add_ln73_4_fu_207_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln73_fu_300_p2 = (select_ln72_fu_269_p3 + 7'd1);

assign add_ln74_fu_372_p2 = (select_ln73_reg_494 + 2'd1);

assign add_ln78_fu_364_p2 = (tmp_s_fu_356_p3 + zext_ln74_5_fu_343_p1);

assign and_ln72_fu_287_p2 = (xor_ln72_fu_276_p2 & icmp_ln74_fu_281_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (unpacked_stream_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address1 = zext_ln78_fu_401_p1;

assign buffer_r_d1 = unpacked_stream_read_reg_505;

assign empty_fu_350_p2 = (tmp_fu_336_p3 + zext_ln74_fu_347_p1);

assign icmp_ln72_fu_189_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_201_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_281_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln73_fu_306_p2 = (icmp_ln73_reg_466 | and_ln72_fu_287_p2);

assign select_ln72_4_fu_293_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? add_ln72_fu_263_p2 : tp_tip_fu_86);

assign select_ln72_fu_269_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_cit_load);

assign select_ln73_7_fu_331_p3 = ((and_ln72_reg_479[0:0] == 1'b1) ? add_ln73_reg_489 : select_ln72_reg_474);

assign select_ln73_8_fu_213_p3 = ((icmp_ln73_fu_201_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_4_fu_207_p2);

assign select_ln73_fu_311_p3 = ((or_ln73_fu_306_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign tmp_fu_336_p3 = {{select_ln72_4_reg_484}, {1'd0}};

assign tmp_s_fu_356_p3 = {{empty_fu_350_p2}, {6'd0}};

assign xor_ln72_fu_276_p2 = (icmp_ln73_reg_466 ^ 1'd1);

assign zext_ln74_5_fu_343_p1 = select_ln73_7_fu_331_p3;

assign zext_ln74_fu_347_p1 = select_ln73_reg_494;

assign zext_ln78_fu_401_p1 = add_ln78_reg_500;

endmodule //ATTN11_reorder_39_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_sm_reshape_head2_din,
        kq_sm_reshape_head2_num_data_valid,
        kq_sm_reshape_head2_fifo_cap,
        kq_sm_reshape_head2_full_n,
        kq_sm_reshape_head2_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        vec_o_4_out_i,
        vec_o_4_out_o,
        vec_o_4_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] kq_sm_reshape_head2_din;
input  [9:0] kq_sm_reshape_head2_num_data_valid;
input  [9:0] kq_sm_reshape_head2_fifo_cap;
input   kq_sm_reshape_head2_full_n;
output   kq_sm_reshape_head2_write;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [2:0] buffer_r_q0;
input  [83:0] vec_o_4_out_i;
output  [83:0] vec_o_4_out_o;
output   vec_o_4_out_o_ap_vld;

reg ap_idle;
reg kq_sm_reshape_head2_write;
reg buffer_r_ce0;
reg[83:0] vec_o_4_out_o;
reg vec_o_4_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg   [0:0] and_ln99_reg_2155;
reg   [0:0] and_ln99_reg_2155_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_466_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_sm_reshape_head2_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_2085;
wire   [0:0] icmp_ln86_fu_472_p2;
reg   [0:0] icmp_ln86_reg_2089;
reg   [0:0] icmp_ln86_reg_2089_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_2089_pp0_iter2_reg;
wire   [0:0] xor_ln85_fu_522_p2;
reg   [0:0] xor_ln85_reg_2099;
wire   [0:0] icmp_ln87_fu_527_p2;
reg   [0:0] icmp_ln87_reg_2104;
wire   [0:0] and_ln85_4_fu_533_p2;
reg   [0:0] and_ln85_4_reg_2109;
wire   [0:0] or_ln86_fu_539_p2;
reg   [0:0] or_ln86_reg_2115;
wire   [2:0] select_ln87_fu_658_p3;
reg   [2:0] select_ln87_reg_2120;
wire   [2:0] select_ln87_7_fu_666_p3;
reg   [2:0] select_ln87_7_reg_2127;
wire   [3:0] empty_1080_fu_674_p1;
reg   [3:0] empty_1080_reg_2134;
wire   [3:0] empty_1081_fu_771_p2;
reg   [3:0] empty_1081_reg_2139;
wire   [5:0] add_ln93_fu_795_p2;
reg   [5:0] add_ln93_reg_2144;
wire   [4:0] add_ln93_2_fu_801_p2;
reg   [4:0] add_ln93_2_reg_2149;
reg   [4:0] add_ln93_2_reg_2149_pp0_iter4_reg;
wire   [0:0] and_ln99_fu_812_p2;
reg   [0:0] and_ln99_reg_2155_pp0_iter4_reg;
reg   [0:0] and_ln99_reg_2155_pp0_iter5_reg;
reg   [2:0] buffer_load_reg_2164;
wire   [7:0] sub_ln93_fu_859_p2;
reg   [7:0] sub_ln93_reg_2169;
reg   [83:0] vec_o_4_out_load_reg_2174;
wire   [83:0] shl_ln93_fu_880_p2;
reg   [83:0] shl_ln93_reg_2192;
wire   [83:0] shl_ln93_2_fu_889_p2;
reg   [83:0] shl_ln93_2_reg_2210;
wire   [2:0] and_ln93_2_fu_1089_p2;
reg   [2:0] and_ln93_2_reg_2228;
wire   [2:0] trunc_ln93_134_fu_1095_p1;
reg   [2:0] trunc_ln93_134_reg_2233;
reg   [2:0] trunc_ln6_reg_2238;
reg   [2:0] trunc_ln100_s_reg_2243;
reg   [2:0] trunc_ln100_90_reg_2248;
reg   [2:0] trunc_ln100_91_reg_2253;
reg   [2:0] trunc_ln100_92_reg_2258;
reg   [2:0] trunc_ln100_93_reg_2263;
reg   [2:0] trunc_ln100_94_reg_2268;
reg   [2:0] trunc_ln100_95_reg_2273;
reg   [2:0] trunc_ln100_96_reg_2278;
reg   [2:0] trunc_ln100_97_reg_2283;
reg   [2:0] trunc_ln100_98_reg_2288;
reg   [2:0] trunc_ln100_99_reg_2293;
reg   [2:0] trunc_ln100_100_reg_2298;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln93_fu_836_p1;
wire   [83:0] or_ln93_fu_1219_p2;
reg   [2:0] cop_fu_316;
wire   [2:0] add_ln88_fu_678_p2;
wire    ap_loop_init;
reg   [2:0] ATTN11_1_fu_320;
reg   [5:0] indvar_flatten19_fu_324;
wire   [5:0] select_ln87_8_fu_550_p3;
reg   [4:0] cot_fu_328;
wire   [4:0] select_ln86_7_fu_635_p3;
reg   [9:0] indvar_flatten34_fu_332;
wire   [9:0] select_ln86_8_fu_484_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [1:0] tp_ATTN11_fu_336;
wire   [1:0] select_ln85_5_fu_732_p3;
reg   [9:0] indvar_flatten59_fu_340;
wire   [9:0] add_ln85_4_fu_460_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln86_4_fu_478_p2;
wire   [5:0] add_ln87_4_fu_544_p2;
wire   [0:0] icmp_ln88_fu_595_p2;
wire   [4:0] select_ln85_fu_588_p3;
wire   [0:0] xor_ln86_fu_619_p2;
wire   [0:0] and_ln85_fu_601_p2;
wire   [0:0] or_ln86_4_fu_624_p2;
wire   [4:0] add_ln86_fu_606_p2;
wire   [2:0] select_ln86_fu_612_p3;
wire   [0:0] and_ln86_fu_629_p2;
wire   [0:0] or_ln87_fu_648_p2;
wire   [0:0] or_ln87_5_fu_653_p2;
wire   [2:0] add_ln87_fu_642_p2;
wire   [1:0] add_ln85_fu_726_p2;
wire   [0:0] empty_fu_743_p1;
wire   [3:0] p_shl_fu_747_p3;
wire   [3:0] zext_ln85_fu_739_p1;
wire   [3:0] empty_1079_fu_755_p2;
wire   [3:0] zext_ln87_fu_768_p1;
wire   [5:0] tmp_s_fu_761_p3;
wire   [5:0] zext_ln88_2_fu_792_p1;
wire   [4:0] tmp_5_fu_782_p3;
wire   [4:0] zext_ln88_fu_789_p1;
wire   [0:0] cmp69_fu_777_p2;
wire   [0:0] icmp_ln99_fu_807_p2;
wire   [9:0] tmp_6_fu_830_p3;
wire   [6:0] shl_ln93_3_fu_848_p3;
wire   [7:0] zext_ln93_6_fu_855_p1;
wire   [7:0] zext_ln93_5_fu_845_p1;
wire  signed [63:0] sext_ln93_fu_873_p1;
wire   [83:0] zext_ln93_7_fu_876_p1;
wire   [83:0] zext_ln93_2_fu_886_p1;
wire   [2:0] trunc_ln93_fu_895_p1;
wire   [80:0] trunc_ln93_106_fu_943_p1;
wire   [77:0] trunc_ln93_105_fu_939_p1;
wire   [74:0] trunc_ln93_104_fu_935_p1;
wire   [71:0] trunc_ln93_103_fu_931_p1;
wire   [68:0] trunc_ln93_102_fu_927_p1;
wire   [65:0] trunc_ln93_101_fu_923_p1;
wire   [62:0] trunc_ln93_100_fu_919_p1;
wire   [59:0] trunc_ln93_99_fu_915_p1;
wire   [56:0] trunc_ln93_98_fu_911_p1;
wire   [53:0] trunc_ln93_97_fu_907_p1;
wire   [8:0] trunc_ln93_82_fu_903_p1;
wire   [5:0] trunc_ln93_81_fu_899_p1;
wire   [83:0] xor_ln93_fu_947_p2;
wire   [2:0] trunc_ln93_107_fu_959_p1;
wire   [2:0] xor_ln93_2_fu_953_p2;
wire   [5:0] trunc_ln93_133_fu_1079_p1;
wire   [5:0] xor_ln93_53_fu_1073_p2;
wire   [8:0] trunc_ln93_132_fu_1069_p1;
wire   [8:0] xor_ln93_52_fu_1063_p2;
wire   [53:0] trunc_ln93_117_fu_1059_p1;
wire   [53:0] xor_ln93_37_fu_1053_p2;
wire   [56:0] trunc_ln93_116_fu_1049_p1;
wire   [56:0] xor_ln93_36_fu_1043_p2;
wire   [59:0] trunc_ln93_115_fu_1039_p1;
wire   [59:0] xor_ln93_35_fu_1033_p2;
wire   [62:0] trunc_ln93_114_fu_1029_p1;
wire   [62:0] xor_ln93_34_fu_1023_p2;
wire   [65:0] trunc_ln93_113_fu_1019_p1;
wire   [65:0] xor_ln93_33_fu_1013_p2;
wire   [68:0] trunc_ln93_112_fu_1009_p1;
wire   [68:0] xor_ln93_32_fu_1003_p2;
wire   [71:0] trunc_ln93_111_fu_999_p1;
wire   [71:0] xor_ln93_31_fu_993_p2;
wire   [74:0] trunc_ln93_110_fu_989_p1;
wire   [74:0] xor_ln93_30_fu_983_p2;
wire   [77:0] trunc_ln93_109_fu_979_p1;
wire   [77:0] xor_ln93_29_fu_973_p2;
wire   [80:0] trunc_ln93_108_fu_969_p1;
wire   [80:0] xor_ln93_28_fu_963_p2;
wire   [83:0] and_ln93_fu_1083_p2;
wire   [80:0] trunc_ln93_160_fu_1215_p1;
wire   [80:0] and_ln93_53_fu_1209_p2;
wire   [77:0] trunc_ln93_159_fu_1205_p1;
wire   [77:0] and_ln93_52_fu_1199_p2;
wire   [74:0] trunc_ln93_158_fu_1195_p1;
wire   [74:0] and_ln93_51_fu_1189_p2;
wire   [71:0] trunc_ln93_157_fu_1185_p1;
wire   [71:0] and_ln93_50_fu_1179_p2;
wire   [68:0] trunc_ln93_156_fu_1175_p1;
wire   [68:0] and_ln93_49_fu_1169_p2;
wire   [65:0] trunc_ln93_155_fu_1165_p1;
wire   [65:0] and_ln93_48_fu_1159_p2;
wire   [62:0] trunc_ln93_154_fu_1155_p1;
wire   [62:0] and_ln93_47_fu_1149_p2;
wire   [59:0] trunc_ln93_153_fu_1145_p1;
wire   [59:0] and_ln93_46_fu_1139_p2;
wire   [56:0] trunc_ln93_152_fu_1135_p1;
wire   [56:0] and_ln93_45_fu_1129_p2;
wire   [53:0] trunc_ln93_151_fu_1125_p1;
wire   [53:0] and_ln93_44_fu_1119_p2;
wire   [8:0] trunc_ln93_136_fu_1115_p1;
wire   [8:0] and_ln93_29_fu_1109_p2;
wire   [5:0] trunc_ln93_135_fu_1105_p1;
wire   [5:0] and_ln93_28_fu_1099_p2;
wire   [5:0] or_ln99_100_fu_1291_p2;
wire   [8:0] or_ln99_99_fu_1285_p2;
wire   [53:0] or_ln99_84_fu_1279_p2;
wire   [56:0] or_ln99_83_fu_1273_p2;
wire   [59:0] or_ln99_82_fu_1267_p2;
wire   [62:0] or_ln99_81_fu_1261_p2;
wire   [65:0] or_ln99_80_fu_1255_p2;
wire   [68:0] or_ln99_79_fu_1249_p2;
wire   [71:0] or_ln99_78_fu_1243_p2;
wire   [74:0] or_ln99_77_fu_1237_p2;
wire   [77:0] or_ln99_76_fu_1231_p2;
wire   [80:0] or_ln99_fu_1225_p2;
wire   [50:0] trunc_ln93_96_fu_1480_p1;
wire   [47:0] trunc_ln93_95_fu_1477_p1;
wire   [44:0] trunc_ln93_94_fu_1474_p1;
wire   [41:0] trunc_ln93_93_fu_1471_p1;
wire   [38:0] trunc_ln93_92_fu_1468_p1;
wire   [35:0] trunc_ln93_91_fu_1465_p1;
wire   [32:0] trunc_ln93_90_fu_1462_p1;
wire   [29:0] trunc_ln93_89_fu_1459_p1;
wire   [26:0] trunc_ln93_88_fu_1456_p1;
wire   [23:0] trunc_ln93_87_fu_1453_p1;
wire   [20:0] trunc_ln93_86_fu_1450_p1;
wire   [17:0] trunc_ln93_85_fu_1447_p1;
wire   [14:0] trunc_ln93_84_fu_1444_p1;
wire   [11:0] trunc_ln93_83_fu_1441_p1;
wire   [11:0] trunc_ln93_131_fu_1606_p1;
wire   [11:0] xor_ln93_51_fu_1600_p2;
wire   [14:0] trunc_ln93_130_fu_1597_p1;
wire   [14:0] xor_ln93_50_fu_1591_p2;
wire   [17:0] trunc_ln93_129_fu_1588_p1;
wire   [17:0] xor_ln93_49_fu_1582_p2;
wire   [20:0] trunc_ln93_128_fu_1579_p1;
wire   [20:0] xor_ln93_48_fu_1573_p2;
wire   [23:0] trunc_ln93_127_fu_1570_p1;
wire   [23:0] xor_ln93_47_fu_1564_p2;
wire   [26:0] trunc_ln93_126_fu_1561_p1;
wire   [26:0] xor_ln93_46_fu_1555_p2;
wire   [29:0] trunc_ln93_125_fu_1552_p1;
wire   [29:0] xor_ln93_45_fu_1546_p2;
wire   [32:0] trunc_ln93_124_fu_1543_p1;
wire   [32:0] xor_ln93_44_fu_1537_p2;
wire   [35:0] trunc_ln93_123_fu_1534_p1;
wire   [35:0] xor_ln93_43_fu_1528_p2;
wire   [38:0] trunc_ln93_122_fu_1525_p1;
wire   [38:0] xor_ln93_42_fu_1519_p2;
wire   [41:0] trunc_ln93_121_fu_1516_p1;
wire   [41:0] xor_ln93_41_fu_1510_p2;
wire   [44:0] trunc_ln93_120_fu_1507_p1;
wire   [44:0] xor_ln93_40_fu_1501_p2;
wire   [47:0] trunc_ln93_119_fu_1498_p1;
wire   [47:0] xor_ln93_39_fu_1492_p2;
wire   [50:0] trunc_ln93_118_fu_1489_p1;
wire   [50:0] xor_ln93_38_fu_1483_p2;
wire   [50:0] trunc_ln93_150_fu_1732_p1;
wire   [50:0] and_ln93_43_fu_1726_p2;
wire   [47:0] trunc_ln93_149_fu_1723_p1;
wire   [47:0] and_ln93_42_fu_1717_p2;
wire   [44:0] trunc_ln93_148_fu_1714_p1;
wire   [44:0] and_ln93_41_fu_1708_p2;
wire   [41:0] trunc_ln93_147_fu_1705_p1;
wire   [41:0] and_ln93_40_fu_1699_p2;
wire   [38:0] trunc_ln93_146_fu_1696_p1;
wire   [38:0] and_ln93_39_fu_1690_p2;
wire   [35:0] trunc_ln93_145_fu_1687_p1;
wire   [35:0] and_ln93_38_fu_1681_p2;
wire   [32:0] trunc_ln93_144_fu_1678_p1;
wire   [32:0] and_ln93_37_fu_1672_p2;
wire   [29:0] trunc_ln93_143_fu_1669_p1;
wire   [29:0] and_ln93_36_fu_1663_p2;
wire   [26:0] trunc_ln93_142_fu_1660_p1;
wire   [26:0] and_ln93_35_fu_1654_p2;
wire   [23:0] trunc_ln93_141_fu_1651_p1;
wire   [23:0] and_ln93_34_fu_1645_p2;
wire   [20:0] trunc_ln93_140_fu_1642_p1;
wire   [20:0] and_ln93_33_fu_1636_p2;
wire   [17:0] trunc_ln93_139_fu_1633_p1;
wire   [17:0] and_ln93_32_fu_1627_p2;
wire   [14:0] trunc_ln93_138_fu_1624_p1;
wire   [14:0] and_ln93_31_fu_1618_p2;
wire   [11:0] trunc_ln93_137_fu_1615_p1;
wire   [11:0] and_ln93_30_fu_1609_p2;
wire   [11:0] or_ln99_98_fu_1813_p2;
wire   [14:0] or_ln99_97_fu_1807_p2;
wire   [17:0] or_ln99_96_fu_1801_p2;
wire   [20:0] or_ln99_95_fu_1795_p2;
wire   [23:0] or_ln99_94_fu_1789_p2;
wire   [26:0] or_ln99_93_fu_1783_p2;
wire   [29:0] or_ln99_92_fu_1777_p2;
wire   [32:0] or_ln99_91_fu_1771_p2;
wire   [35:0] or_ln99_90_fu_1765_p2;
wire   [38:0] or_ln99_89_fu_1759_p2;
wire   [41:0] or_ln99_88_fu_1753_p2;
wire   [44:0] or_ln99_87_fu_1747_p2;
wire   [47:0] or_ln99_86_fu_1741_p2;
wire   [50:0] or_ln99_85_fu_1735_p2;
wire   [2:0] trunc_ln100_89_fu_1949_p4;
wire   [2:0] trunc_ln100_88_fu_1939_p4;
wire   [2:0] trunc_ln100_87_fu_1929_p4;
wire   [2:0] trunc_ln100_86_fu_1919_p4;
wire   [2:0] trunc_ln100_85_fu_1909_p4;
wire   [2:0] trunc_ln100_84_fu_1899_p4;
wire   [2:0] trunc_ln100_83_fu_1889_p4;
wire   [2:0] trunc_ln100_82_fu_1879_p4;
wire   [2:0] trunc_ln100_81_fu_1869_p4;
wire   [2:0] trunc_ln100_80_fu_1859_p4;
wire   [2:0] trunc_ln100_79_fu_1849_p4;
wire   [2:0] trunc_ln100_78_fu_1839_p4;
wire   [2:0] trunc_ln100_77_fu_1829_p4;
wire   [2:0] trunc_ln100_76_fu_1819_p4;
wire   [2:0] or_ln100_fu_1959_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 cop_fu_316 = 3'd0;
//#0 ATTN11_1_fu_320 = 3'd0;
//#0 indvar_flatten19_fu_324 = 6'd0;
//#0 cot_fu_328 = 5'd0;
//#0 indvar_flatten34_fu_332 = 10'd0;
//#0 tp_ATTN11_fu_336 = 2'd0;
//#0 indvar_flatten59_fu_340 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cop_fu_316 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cop_fu_316 <= add_ln88_fu_678_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cot_fu_328 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cot_fu_328 <= select_ln86_7_fu_635_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_324 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln85_reg_2085 == 1'd0))) begin
            indvar_flatten19_fu_324 <= select_ln87_8_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_332 <= select_ln86_8_fu_484_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_332 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_340 <= add_ln85_4_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_340 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ATTN11_1_fu_320 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ATTN11_1_fu_320 <= select_ln87_7_fu_666_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tp_ATTN11_fu_336 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tp_ATTN11_fu_336 <= select_ln85_5_fu_732_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln93_2_reg_2149 <= add_ln93_2_fu_801_p2;
        add_ln93_2_reg_2149_pp0_iter4_reg <= add_ln93_2_reg_2149;
        add_ln93_reg_2144 <= add_ln93_fu_795_p2;
        and_ln93_2_reg_2228 <= and_ln93_2_fu_1089_p2;
        and_ln99_reg_2155 <= and_ln99_fu_812_p2;
        and_ln99_reg_2155_pp0_iter4_reg <= and_ln99_reg_2155;
        and_ln99_reg_2155_pp0_iter5_reg <= and_ln99_reg_2155_pp0_iter4_reg;
        and_ln99_reg_2155_pp0_iter6_reg <= and_ln99_reg_2155_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        buffer_load_reg_2164 <= buffer_r_q0;
        empty_1080_reg_2134 <= empty_1080_fu_674_p1;
        empty_1081_reg_2139 <= empty_1081_fu_771_p2;
        icmp_ln86_reg_2089_pp0_iter2_reg <= icmp_ln86_reg_2089_pp0_iter1_reg;
        select_ln87_7_reg_2127 <= select_ln87_7_fu_666_p3;
        select_ln87_reg_2120 <= select_ln87_fu_658_p3;
        shl_ln93_2_reg_2210 <= shl_ln93_2_fu_889_p2;
        shl_ln93_reg_2192 <= shl_ln93_fu_880_p2;
        sub_ln93_reg_2169 <= sub_ln93_fu_859_p2;
        trunc_ln100_100_reg_2298 <= {{or_ln93_fu_1219_p2[83:81]}};
        trunc_ln100_90_reg_2248 <= {{or_ln99_84_fu_1279_p2[53:51]}};
        trunc_ln100_91_reg_2253 <= {{or_ln99_83_fu_1273_p2[56:54]}};
        trunc_ln100_92_reg_2258 <= {{or_ln99_82_fu_1267_p2[59:57]}};
        trunc_ln100_93_reg_2263 <= {{or_ln99_81_fu_1261_p2[62:60]}};
        trunc_ln100_94_reg_2268 <= {{or_ln99_80_fu_1255_p2[65:63]}};
        trunc_ln100_95_reg_2273 <= {{or_ln99_79_fu_1249_p2[68:66]}};
        trunc_ln100_96_reg_2278 <= {{or_ln99_78_fu_1243_p2[71:69]}};
        trunc_ln100_97_reg_2283 <= {{or_ln99_77_fu_1237_p2[74:72]}};
        trunc_ln100_98_reg_2288 <= {{or_ln99_76_fu_1231_p2[77:75]}};
        trunc_ln100_99_reg_2293 <= {{or_ln99_fu_1225_p2[80:78]}};
        trunc_ln100_s_reg_2243 <= {{or_ln99_99_fu_1285_p2[8:6]}};
        trunc_ln6_reg_2238 <= {{or_ln99_100_fu_1291_p2[5:3]}};
        trunc_ln93_134_reg_2233 <= trunc_ln93_134_fu_1095_p1;
        vec_o_4_out_load_reg_2174 <= vec_o_4_out_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_4_reg_2109 <= and_ln85_4_fu_533_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln85_reg_2085 <= icmp_ln85_fu_466_p2;
        icmp_ln86_reg_2089 <= icmp_ln86_fu_472_p2;
        icmp_ln86_reg_2089_pp0_iter1_reg <= icmp_ln86_reg_2089;
        icmp_ln87_reg_2104 <= icmp_ln87_fu_527_p2;
        or_ln86_reg_2115 <= or_ln86_fu_539_p2;
        xor_ln85_reg_2099 <= xor_ln85_fu_522_p2;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_466_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln85_reg_2085 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_332;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_340;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        kq_sm_reshape_head2_blk_n = kq_sm_reshape_head2_full_n;
    end else begin
        kq_sm_reshape_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        kq_sm_reshape_head2_write = 1'b1;
    end else begin
        kq_sm_reshape_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o = or_ln93_fu_1219_p2;
    end else begin
        vec_o_4_out_o = vec_o_4_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o_ap_vld = 1'b1;
    end else begin
        vec_o_4_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_4_fu_460_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 10'd1);

assign add_ln85_fu_726_p2 = (tp_ATTN11_fu_336 + 2'd1);

assign add_ln86_4_fu_478_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 10'd1);

assign add_ln86_fu_606_p2 = (select_ln85_fu_588_p3 + 5'd1);

assign add_ln87_4_fu_544_p2 = (indvar_flatten19_fu_324 + 6'd1);

assign add_ln87_fu_642_p2 = (select_ln86_fu_612_p3 + 3'd1);

assign add_ln88_fu_678_p2 = (select_ln87_fu_658_p3 + 3'd1);

assign add_ln93_2_fu_801_p2 = (tmp_5_fu_782_p3 + zext_ln88_fu_789_p1);

assign add_ln93_fu_795_p2 = (tmp_s_fu_761_p3 + zext_ln88_2_fu_792_p1);

assign and_ln85_4_fu_533_p2 = (xor_ln85_fu_522_p2 & icmp_ln87_fu_527_p2);

assign and_ln85_fu_601_p2 = (xor_ln85_reg_2099 & icmp_ln88_fu_595_p2);

assign and_ln86_fu_629_p2 = (or_ln86_4_fu_624_p2 & and_ln85_fu_601_p2);

assign and_ln93_28_fu_1099_p2 = (xor_ln93_53_fu_1073_p2 & trunc_ln93_133_fu_1079_p1);

assign and_ln93_29_fu_1109_p2 = (xor_ln93_52_fu_1063_p2 & trunc_ln93_132_fu_1069_p1);

assign and_ln93_2_fu_1089_p2 = (xor_ln93_2_fu_953_p2 & trunc_ln93_107_fu_959_p1);

assign and_ln93_30_fu_1609_p2 = (xor_ln93_51_fu_1600_p2 & trunc_ln93_131_fu_1606_p1);

assign and_ln93_31_fu_1618_p2 = (xor_ln93_50_fu_1591_p2 & trunc_ln93_130_fu_1597_p1);

assign and_ln93_32_fu_1627_p2 = (xor_ln93_49_fu_1582_p2 & trunc_ln93_129_fu_1588_p1);

assign and_ln93_33_fu_1636_p2 = (xor_ln93_48_fu_1573_p2 & trunc_ln93_128_fu_1579_p1);

assign and_ln93_34_fu_1645_p2 = (xor_ln93_47_fu_1564_p2 & trunc_ln93_127_fu_1570_p1);

assign and_ln93_35_fu_1654_p2 = (xor_ln93_46_fu_1555_p2 & trunc_ln93_126_fu_1561_p1);

assign and_ln93_36_fu_1663_p2 = (xor_ln93_45_fu_1546_p2 & trunc_ln93_125_fu_1552_p1);

assign and_ln93_37_fu_1672_p2 = (xor_ln93_44_fu_1537_p2 & trunc_ln93_124_fu_1543_p1);

assign and_ln93_38_fu_1681_p2 = (xor_ln93_43_fu_1528_p2 & trunc_ln93_123_fu_1534_p1);

assign and_ln93_39_fu_1690_p2 = (xor_ln93_42_fu_1519_p2 & trunc_ln93_122_fu_1525_p1);

assign and_ln93_40_fu_1699_p2 = (xor_ln93_41_fu_1510_p2 & trunc_ln93_121_fu_1516_p1);

assign and_ln93_41_fu_1708_p2 = (xor_ln93_40_fu_1501_p2 & trunc_ln93_120_fu_1507_p1);

assign and_ln93_42_fu_1717_p2 = (xor_ln93_39_fu_1492_p2 & trunc_ln93_119_fu_1498_p1);

assign and_ln93_43_fu_1726_p2 = (xor_ln93_38_fu_1483_p2 & trunc_ln93_118_fu_1489_p1);

assign and_ln93_44_fu_1119_p2 = (xor_ln93_37_fu_1053_p2 & trunc_ln93_117_fu_1059_p1);

assign and_ln93_45_fu_1129_p2 = (xor_ln93_36_fu_1043_p2 & trunc_ln93_116_fu_1049_p1);

assign and_ln93_46_fu_1139_p2 = (xor_ln93_35_fu_1033_p2 & trunc_ln93_115_fu_1039_p1);

assign and_ln93_47_fu_1149_p2 = (xor_ln93_34_fu_1023_p2 & trunc_ln93_114_fu_1029_p1);

assign and_ln93_48_fu_1159_p2 = (xor_ln93_33_fu_1013_p2 & trunc_ln93_113_fu_1019_p1);

assign and_ln93_49_fu_1169_p2 = (xor_ln93_32_fu_1003_p2 & trunc_ln93_112_fu_1009_p1);

assign and_ln93_50_fu_1179_p2 = (xor_ln93_31_fu_993_p2 & trunc_ln93_111_fu_999_p1);

assign and_ln93_51_fu_1189_p2 = (xor_ln93_30_fu_983_p2 & trunc_ln93_110_fu_989_p1);

assign and_ln93_52_fu_1199_p2 = (xor_ln93_29_fu_973_p2 & trunc_ln93_109_fu_979_p1);

assign and_ln93_53_fu_1209_p2 = (xor_ln93_28_fu_963_p2 & trunc_ln93_108_fu_969_p1);

assign and_ln93_fu_1083_p2 = (xor_ln93_fu_947_p2 & vec_o_4_out_i);

assign and_ln99_fu_812_p2 = (icmp_ln99_fu_807_p2 & cmp69_fu_777_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (kq_sm_reshape_head2_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address0 = zext_ln93_fu_836_p1;

assign cmp69_fu_777_p2 = ((select_ln87_7_reg_2127 == 3'd6) ? 1'b1 : 1'b0);

assign empty_1079_fu_755_p2 = (p_shl_fu_747_p3 - zext_ln85_fu_739_p1);

assign empty_1080_fu_674_p1 = select_ln86_7_fu_635_p3[3:0];

assign empty_1081_fu_771_p2 = (empty_1079_fu_755_p2 + zext_ln87_fu_768_p1);

assign empty_fu_743_p1 = select_ln85_5_fu_732_p3[0:0];

assign icmp_ln85_fu_466_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_472_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_527_p2 = ((indvar_flatten19_fu_324 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_595_p2 = ((cop_fu_316 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_807_p2 = ((select_ln87_reg_2120 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head2_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln100_100_reg_2298}, {trunc_ln100_99_reg_2293}}, {trunc_ln100_98_reg_2288}}, {trunc_ln100_97_reg_2283}}, {trunc_ln100_96_reg_2278}}, {trunc_ln100_95_reg_2273}}, {trunc_ln100_94_reg_2268}}, {trunc_ln100_93_reg_2263}}, {trunc_ln100_92_reg_2258}}, {trunc_ln100_91_reg_2253}}, {trunc_ln100_90_reg_2248}}, {trunc_ln100_89_fu_1949_p4}}, {trunc_ln100_88_fu_1939_p4}}, {trunc_ln100_87_fu_1929_p4}}, {trunc_ln100_86_fu_1919_p4}}, {trunc_ln100_85_fu_1909_p4}}, {trunc_ln100_84_fu_1899_p4}}, {trunc_ln100_83_fu_1889_p4}}, {trunc_ln100_82_fu_1879_p4}}, {trunc_ln100_81_fu_1869_p4}}, {trunc_ln100_80_fu_1859_p4}}, {trunc_ln100_79_fu_1849_p4}}, {trunc_ln100_78_fu_1839_p4}}, {trunc_ln100_77_fu_1829_p4}}, {trunc_ln100_76_fu_1819_p4}}, {trunc_ln100_s_reg_2243}}, {trunc_ln6_reg_2238}}, {or_ln100_fu_1959_p2}};

assign or_ln100_fu_1959_p2 = (trunc_ln93_134_reg_2233 | and_ln93_2_reg_2228);

assign or_ln86_4_fu_624_p2 = (xor_ln86_fu_619_p2 | icmp_ln86_reg_2089_pp0_iter1_reg);

assign or_ln86_fu_539_p2 = (icmp_ln86_reg_2089 | and_ln85_4_fu_533_p2);

assign or_ln87_5_fu_653_p2 = (or_ln87_fu_648_p2 | icmp_ln86_reg_2089_pp0_iter1_reg);

assign or_ln87_fu_648_p2 = (and_ln86_fu_629_p2 | and_ln85_4_reg_2109);

assign or_ln93_fu_1219_p2 = (shl_ln93_2_fu_889_p2 | and_ln93_fu_1083_p2);

assign or_ln99_100_fu_1291_p2 = (trunc_ln93_135_fu_1105_p1 | and_ln93_28_fu_1099_p2);

assign or_ln99_76_fu_1231_p2 = (trunc_ln93_159_fu_1205_p1 | and_ln93_52_fu_1199_p2);

assign or_ln99_77_fu_1237_p2 = (trunc_ln93_158_fu_1195_p1 | and_ln93_51_fu_1189_p2);

assign or_ln99_78_fu_1243_p2 = (trunc_ln93_157_fu_1185_p1 | and_ln93_50_fu_1179_p2);

assign or_ln99_79_fu_1249_p2 = (trunc_ln93_156_fu_1175_p1 | and_ln93_49_fu_1169_p2);

assign or_ln99_80_fu_1255_p2 = (trunc_ln93_155_fu_1165_p1 | and_ln93_48_fu_1159_p2);

assign or_ln99_81_fu_1261_p2 = (trunc_ln93_154_fu_1155_p1 | and_ln93_47_fu_1149_p2);

assign or_ln99_82_fu_1267_p2 = (trunc_ln93_153_fu_1145_p1 | and_ln93_46_fu_1139_p2);

assign or_ln99_83_fu_1273_p2 = (trunc_ln93_152_fu_1135_p1 | and_ln93_45_fu_1129_p2);

assign or_ln99_84_fu_1279_p2 = (trunc_ln93_151_fu_1125_p1 | and_ln93_44_fu_1119_p2);

assign or_ln99_85_fu_1735_p2 = (trunc_ln93_150_fu_1732_p1 | and_ln93_43_fu_1726_p2);

assign or_ln99_86_fu_1741_p2 = (trunc_ln93_149_fu_1723_p1 | and_ln93_42_fu_1717_p2);

assign or_ln99_87_fu_1747_p2 = (trunc_ln93_148_fu_1714_p1 | and_ln93_41_fu_1708_p2);

assign or_ln99_88_fu_1753_p2 = (trunc_ln93_147_fu_1705_p1 | and_ln93_40_fu_1699_p2);

assign or_ln99_89_fu_1759_p2 = (trunc_ln93_146_fu_1696_p1 | and_ln93_39_fu_1690_p2);

assign or_ln99_90_fu_1765_p2 = (trunc_ln93_145_fu_1687_p1 | and_ln93_38_fu_1681_p2);

assign or_ln99_91_fu_1771_p2 = (trunc_ln93_144_fu_1678_p1 | and_ln93_37_fu_1672_p2);

assign or_ln99_92_fu_1777_p2 = (trunc_ln93_143_fu_1669_p1 | and_ln93_36_fu_1663_p2);

assign or_ln99_93_fu_1783_p2 = (trunc_ln93_142_fu_1660_p1 | and_ln93_35_fu_1654_p2);

assign or_ln99_94_fu_1789_p2 = (trunc_ln93_141_fu_1651_p1 | and_ln93_34_fu_1645_p2);

assign or_ln99_95_fu_1795_p2 = (trunc_ln93_140_fu_1642_p1 | and_ln93_33_fu_1636_p2);

assign or_ln99_96_fu_1801_p2 = (trunc_ln93_139_fu_1633_p1 | and_ln93_32_fu_1627_p2);

assign or_ln99_97_fu_1807_p2 = (trunc_ln93_138_fu_1624_p1 | and_ln93_31_fu_1618_p2);

assign or_ln99_98_fu_1813_p2 = (trunc_ln93_137_fu_1615_p1 | and_ln93_30_fu_1609_p2);

assign or_ln99_99_fu_1285_p2 = (trunc_ln93_136_fu_1115_p1 | and_ln93_29_fu_1109_p2);

assign or_ln99_fu_1225_p2 = (trunc_ln93_160_fu_1215_p1 | and_ln93_53_fu_1209_p2);

assign p_shl_fu_747_p3 = {{empty_fu_743_p1}, {3'd0}};

assign select_ln85_5_fu_732_p3 = ((icmp_ln86_reg_2089_pp0_iter2_reg[0:0] == 1'b1) ? add_ln85_fu_726_p2 : tp_ATTN11_fu_336);

assign select_ln85_fu_588_p3 = ((icmp_ln86_reg_2089_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : cot_fu_328);

assign select_ln86_7_fu_635_p3 = ((and_ln85_4_reg_2109[0:0] == 1'b1) ? add_ln86_fu_606_p2 : select_ln85_fu_588_p3);

assign select_ln86_8_fu_484_p3 = ((icmp_ln86_fu_472_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_4_fu_478_p2);

assign select_ln86_fu_612_p3 = ((or_ln86_reg_2115[0:0] == 1'b1) ? 3'd0 : ATTN11_1_fu_320);

assign select_ln87_7_fu_666_p3 = ((and_ln86_fu_629_p2[0:0] == 1'b1) ? add_ln87_fu_642_p2 : select_ln86_fu_612_p3);

assign select_ln87_8_fu_550_p3 = ((or_ln86_fu_539_p2[0:0] == 1'b1) ? 6'd1 : add_ln87_4_fu_544_p2);

assign select_ln87_fu_658_p3 = ((or_ln87_5_fu_653_p2[0:0] == 1'b1) ? 3'd0 : cop_fu_316);

assign sext_ln93_fu_873_p1 = $signed(sub_ln93_reg_2169);

assign shl_ln93_2_fu_889_p2 = zext_ln93_2_fu_886_p1 << zext_ln93_7_fu_876_p1;

assign shl_ln93_3_fu_848_p3 = {{add_ln93_2_reg_2149_pp0_iter4_reg}, {2'd0}};

assign shl_ln93_fu_880_p2 = 84'd7 << zext_ln93_7_fu_876_p1;

assign sub_ln93_fu_859_p2 = (zext_ln93_6_fu_855_p1 - zext_ln93_5_fu_845_p1);

assign tmp_5_fu_782_p3 = {{select_ln87_7_reg_2127}, {2'd0}};

assign tmp_6_fu_830_p3 = {{empty_1081_reg_2139}, {add_ln93_reg_2144}};

assign tmp_s_fu_761_p3 = {{empty_1080_reg_2134}, {2'd0}};

assign trunc_ln100_76_fu_1819_p4 = {{or_ln99_98_fu_1813_p2[11:9]}};

assign trunc_ln100_77_fu_1829_p4 = {{or_ln99_97_fu_1807_p2[14:12]}};

assign trunc_ln100_78_fu_1839_p4 = {{or_ln99_96_fu_1801_p2[17:15]}};

assign trunc_ln100_79_fu_1849_p4 = {{or_ln99_95_fu_1795_p2[20:18]}};

assign trunc_ln100_80_fu_1859_p4 = {{or_ln99_94_fu_1789_p2[23:21]}};

assign trunc_ln100_81_fu_1869_p4 = {{or_ln99_93_fu_1783_p2[26:24]}};

assign trunc_ln100_82_fu_1879_p4 = {{or_ln99_92_fu_1777_p2[29:27]}};

assign trunc_ln100_83_fu_1889_p4 = {{or_ln99_91_fu_1771_p2[32:30]}};

assign trunc_ln100_84_fu_1899_p4 = {{or_ln99_90_fu_1765_p2[35:33]}};

assign trunc_ln100_85_fu_1909_p4 = {{or_ln99_89_fu_1759_p2[38:36]}};

assign trunc_ln100_86_fu_1919_p4 = {{or_ln99_88_fu_1753_p2[41:39]}};

assign trunc_ln100_87_fu_1929_p4 = {{or_ln99_87_fu_1747_p2[44:42]}};

assign trunc_ln100_88_fu_1939_p4 = {{or_ln99_86_fu_1741_p2[47:45]}};

assign trunc_ln100_89_fu_1949_p4 = {{or_ln99_85_fu_1735_p2[50:48]}};

assign trunc_ln93_100_fu_919_p1 = shl_ln93_fu_880_p2[62:0];

assign trunc_ln93_101_fu_923_p1 = shl_ln93_fu_880_p2[65:0];

assign trunc_ln93_102_fu_927_p1 = shl_ln93_fu_880_p2[68:0];

assign trunc_ln93_103_fu_931_p1 = shl_ln93_fu_880_p2[71:0];

assign trunc_ln93_104_fu_935_p1 = shl_ln93_fu_880_p2[74:0];

assign trunc_ln93_105_fu_939_p1 = shl_ln93_fu_880_p2[77:0];

assign trunc_ln93_106_fu_943_p1 = shl_ln93_fu_880_p2[80:0];

assign trunc_ln93_107_fu_959_p1 = vec_o_4_out_i[2:0];

assign trunc_ln93_108_fu_969_p1 = vec_o_4_out_i[80:0];

assign trunc_ln93_109_fu_979_p1 = vec_o_4_out_i[77:0];

assign trunc_ln93_110_fu_989_p1 = vec_o_4_out_i[74:0];

assign trunc_ln93_111_fu_999_p1 = vec_o_4_out_i[71:0];

assign trunc_ln93_112_fu_1009_p1 = vec_o_4_out_i[68:0];

assign trunc_ln93_113_fu_1019_p1 = vec_o_4_out_i[65:0];

assign trunc_ln93_114_fu_1029_p1 = vec_o_4_out_i[62:0];

assign trunc_ln93_115_fu_1039_p1 = vec_o_4_out_i[59:0];

assign trunc_ln93_116_fu_1049_p1 = vec_o_4_out_i[56:0];

assign trunc_ln93_117_fu_1059_p1 = vec_o_4_out_i[53:0];

assign trunc_ln93_118_fu_1489_p1 = vec_o_4_out_load_reg_2174[50:0];

assign trunc_ln93_119_fu_1498_p1 = vec_o_4_out_load_reg_2174[47:0];

assign trunc_ln93_120_fu_1507_p1 = vec_o_4_out_load_reg_2174[44:0];

assign trunc_ln93_121_fu_1516_p1 = vec_o_4_out_load_reg_2174[41:0];

assign trunc_ln93_122_fu_1525_p1 = vec_o_4_out_load_reg_2174[38:0];

assign trunc_ln93_123_fu_1534_p1 = vec_o_4_out_load_reg_2174[35:0];

assign trunc_ln93_124_fu_1543_p1 = vec_o_4_out_load_reg_2174[32:0];

assign trunc_ln93_125_fu_1552_p1 = vec_o_4_out_load_reg_2174[29:0];

assign trunc_ln93_126_fu_1561_p1 = vec_o_4_out_load_reg_2174[26:0];

assign trunc_ln93_127_fu_1570_p1 = vec_o_4_out_load_reg_2174[23:0];

assign trunc_ln93_128_fu_1579_p1 = vec_o_4_out_load_reg_2174[20:0];

assign trunc_ln93_129_fu_1588_p1 = vec_o_4_out_load_reg_2174[17:0];

assign trunc_ln93_130_fu_1597_p1 = vec_o_4_out_load_reg_2174[14:0];

assign trunc_ln93_131_fu_1606_p1 = vec_o_4_out_load_reg_2174[11:0];

assign trunc_ln93_132_fu_1069_p1 = vec_o_4_out_i[8:0];

assign trunc_ln93_133_fu_1079_p1 = vec_o_4_out_i[5:0];

assign trunc_ln93_134_fu_1095_p1 = shl_ln93_2_fu_889_p2[2:0];

assign trunc_ln93_135_fu_1105_p1 = shl_ln93_2_fu_889_p2[5:0];

assign trunc_ln93_136_fu_1115_p1 = shl_ln93_2_fu_889_p2[8:0];

assign trunc_ln93_137_fu_1615_p1 = shl_ln93_2_reg_2210[11:0];

assign trunc_ln93_138_fu_1624_p1 = shl_ln93_2_reg_2210[14:0];

assign trunc_ln93_139_fu_1633_p1 = shl_ln93_2_reg_2210[17:0];

assign trunc_ln93_140_fu_1642_p1 = shl_ln93_2_reg_2210[20:0];

assign trunc_ln93_141_fu_1651_p1 = shl_ln93_2_reg_2210[23:0];

assign trunc_ln93_142_fu_1660_p1 = shl_ln93_2_reg_2210[26:0];

assign trunc_ln93_143_fu_1669_p1 = shl_ln93_2_reg_2210[29:0];

assign trunc_ln93_144_fu_1678_p1 = shl_ln93_2_reg_2210[32:0];

assign trunc_ln93_145_fu_1687_p1 = shl_ln93_2_reg_2210[35:0];

assign trunc_ln93_146_fu_1696_p1 = shl_ln93_2_reg_2210[38:0];

assign trunc_ln93_147_fu_1705_p1 = shl_ln93_2_reg_2210[41:0];

assign trunc_ln93_148_fu_1714_p1 = shl_ln93_2_reg_2210[44:0];

assign trunc_ln93_149_fu_1723_p1 = shl_ln93_2_reg_2210[47:0];

assign trunc_ln93_150_fu_1732_p1 = shl_ln93_2_reg_2210[50:0];

assign trunc_ln93_151_fu_1125_p1 = shl_ln93_2_fu_889_p2[53:0];

assign trunc_ln93_152_fu_1135_p1 = shl_ln93_2_fu_889_p2[56:0];

assign trunc_ln93_153_fu_1145_p1 = shl_ln93_2_fu_889_p2[59:0];

assign trunc_ln93_154_fu_1155_p1 = shl_ln93_2_fu_889_p2[62:0];

assign trunc_ln93_155_fu_1165_p1 = shl_ln93_2_fu_889_p2[65:0];

assign trunc_ln93_156_fu_1175_p1 = shl_ln93_2_fu_889_p2[68:0];

assign trunc_ln93_157_fu_1185_p1 = shl_ln93_2_fu_889_p2[71:0];

assign trunc_ln93_158_fu_1195_p1 = shl_ln93_2_fu_889_p2[74:0];

assign trunc_ln93_159_fu_1205_p1 = shl_ln93_2_fu_889_p2[77:0];

assign trunc_ln93_160_fu_1215_p1 = shl_ln93_2_fu_889_p2[80:0];

assign trunc_ln93_81_fu_899_p1 = shl_ln93_fu_880_p2[5:0];

assign trunc_ln93_82_fu_903_p1 = shl_ln93_fu_880_p2[8:0];

assign trunc_ln93_83_fu_1441_p1 = shl_ln93_reg_2192[11:0];

assign trunc_ln93_84_fu_1444_p1 = shl_ln93_reg_2192[14:0];

assign trunc_ln93_85_fu_1447_p1 = shl_ln93_reg_2192[17:0];

assign trunc_ln93_86_fu_1450_p1 = shl_ln93_reg_2192[20:0];

assign trunc_ln93_87_fu_1453_p1 = shl_ln93_reg_2192[23:0];

assign trunc_ln93_88_fu_1456_p1 = shl_ln93_reg_2192[26:0];

assign trunc_ln93_89_fu_1459_p1 = shl_ln93_reg_2192[29:0];

assign trunc_ln93_90_fu_1462_p1 = shl_ln93_reg_2192[32:0];

assign trunc_ln93_91_fu_1465_p1 = shl_ln93_reg_2192[35:0];

assign trunc_ln93_92_fu_1468_p1 = shl_ln93_reg_2192[38:0];

assign trunc_ln93_93_fu_1471_p1 = shl_ln93_reg_2192[41:0];

assign trunc_ln93_94_fu_1474_p1 = shl_ln93_reg_2192[44:0];

assign trunc_ln93_95_fu_1477_p1 = shl_ln93_reg_2192[47:0];

assign trunc_ln93_96_fu_1480_p1 = shl_ln93_reg_2192[50:0];

assign trunc_ln93_97_fu_907_p1 = shl_ln93_fu_880_p2[53:0];

assign trunc_ln93_98_fu_911_p1 = shl_ln93_fu_880_p2[56:0];

assign trunc_ln93_99_fu_915_p1 = shl_ln93_fu_880_p2[59:0];

assign trunc_ln93_fu_895_p1 = shl_ln93_fu_880_p2[2:0];

assign xor_ln85_fu_522_p2 = (icmp_ln86_reg_2089 ^ 1'd1);

assign xor_ln86_fu_619_p2 = (icmp_ln87_reg_2104 ^ 1'd1);

assign xor_ln93_28_fu_963_p2 = (trunc_ln93_106_fu_943_p1 ^ 81'd2115620184325601055735808);

assign xor_ln93_29_fu_973_p2 = (trunc_ln93_105_fu_939_p1 ^ 78'd264452523040700131966976);

assign xor_ln93_2_fu_953_p2 = (trunc_ln93_fu_895_p1 ^ 3'd7);

assign xor_ln93_30_fu_983_p2 = (trunc_ln93_104_fu_935_p1 ^ 75'd33056565380087516495872);

assign xor_ln93_31_fu_993_p2 = (trunc_ln93_103_fu_931_p1 ^ 72'd4132070672510939561984);

assign xor_ln93_32_fu_1003_p2 = (trunc_ln93_102_fu_927_p1 ^ 69'd516508834063867445248);

assign xor_ln93_33_fu_1013_p2 = (trunc_ln93_101_fu_923_p1 ^ 66'd64563604257983430656);

assign xor_ln93_34_fu_1023_p2 = (trunc_ln93_100_fu_919_p1 ^ 63'd8070450532247928832);

assign xor_ln93_35_fu_1033_p2 = (trunc_ln93_99_fu_915_p1 ^ 60'd1008806316530991104);

assign xor_ln93_36_fu_1043_p2 = (trunc_ln93_98_fu_911_p1 ^ 57'd126100789566373888);

assign xor_ln93_37_fu_1053_p2 = (trunc_ln93_97_fu_907_p1 ^ 54'd15762598695796736);

assign xor_ln93_38_fu_1483_p2 = (trunc_ln93_96_fu_1480_p1 ^ 51'd1970324836974592);

assign xor_ln93_39_fu_1492_p2 = (trunc_ln93_95_fu_1477_p1 ^ 48'd246290604621824);

assign xor_ln93_40_fu_1501_p2 = (trunc_ln93_94_fu_1474_p1 ^ 45'd30786325577728);

assign xor_ln93_41_fu_1510_p2 = (trunc_ln93_93_fu_1471_p1 ^ 42'd3848290697216);

assign xor_ln93_42_fu_1519_p2 = (trunc_ln93_92_fu_1468_p1 ^ 39'd481036337152);

assign xor_ln93_43_fu_1528_p2 = (trunc_ln93_91_fu_1465_p1 ^ 36'd60129542144);

assign xor_ln93_44_fu_1537_p2 = (trunc_ln93_90_fu_1462_p1 ^ 33'd7516192768);

assign xor_ln93_45_fu_1546_p2 = (trunc_ln93_89_fu_1459_p1 ^ 30'd939524096);

assign xor_ln93_46_fu_1555_p2 = (trunc_ln93_88_fu_1456_p1 ^ 27'd117440512);

assign xor_ln93_47_fu_1564_p2 = (trunc_ln93_87_fu_1453_p1 ^ 24'd14680064);

assign xor_ln93_48_fu_1573_p2 = (trunc_ln93_86_fu_1450_p1 ^ 21'd1835008);

assign xor_ln93_49_fu_1582_p2 = (trunc_ln93_85_fu_1447_p1 ^ 18'd229376);

assign xor_ln93_50_fu_1591_p2 = (trunc_ln93_84_fu_1444_p1 ^ 15'd28672);

assign xor_ln93_51_fu_1600_p2 = (trunc_ln93_83_fu_1441_p1 ^ 12'd3584);

assign xor_ln93_52_fu_1063_p2 = (trunc_ln93_82_fu_903_p1 ^ 9'd448);

assign xor_ln93_53_fu_1073_p2 = (trunc_ln93_81_fu_899_p1 ^ 6'd56);

assign xor_ln93_fu_947_p2 = (shl_ln93_fu_880_p2 ^ 84'd19342813113834066795298815);

assign zext_ln85_fu_739_p1 = select_ln85_5_fu_732_p3;

assign zext_ln87_fu_768_p1 = select_ln87_7_reg_2127;

assign zext_ln88_2_fu_792_p1 = select_ln87_reg_2120;

assign zext_ln88_fu_789_p1 = select_ln87_reg_2120;

assign zext_ln93_2_fu_886_p1 = buffer_load_reg_2164;

assign zext_ln93_5_fu_845_p1 = add_ln93_2_reg_2149_pp0_iter4_reg;

assign zext_ln93_6_fu_855_p1 = shl_ln93_3_fu_848_p3;

assign zext_ln93_7_fu_876_p1 = $unsigned(sext_ln93_fu_873_p1);

assign zext_ln93_fu_836_p1 = tmp_6_fu_830_p3;

endmodule //ATTN11_reorder_39_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_41 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        kq_sm_reshape_head3_din,
        kq_sm_reshape_head3_num_data_valid,
        kq_sm_reshape_head3_fifo_cap,
        kq_sm_reshape_head3_full_n,
        kq_sm_reshape_head3_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [83:0] kq_sm_reshape_head3_din;
input  [9:0] kq_sm_reshape_head3_num_data_valid;
input  [9:0] kq_sm_reshape_head3_fifo_cap;
input   kq_sm_reshape_head3_full_n;
output   kq_sm_reshape_head3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream_read;
reg kq_sm_reshape_head3_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buffer_ce0;
wire   [2:0] buffer_q0;
reg    buffer_ce1;
reg    buffer_we1;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
wire   [9:0] grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
wire   [2:0] grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready;
wire   [83:0] grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head3_din;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head3_write;
wire   [9:0] grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
wire   [83:0] grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
wire    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld;
reg    grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_97_p2;
wire    ap_CS_fsm_state3;
reg    grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [83:0] vec_o_0_fu_50;
reg   [3:0] tt_fu_46;
wire   [3:0] tt_6_fu_91_p2;
reg    ap_block_state1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg = 1'b0;
//#0 grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg = 1'b0;
//#0 tt_fu_46 = 4'd0;
end

ATTN11_reorder_37_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start),
    .ap_done(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done),
    .ap_idle(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle),
    .ap_ready(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(3'd0),
    .unpacked_stream_fifo_cap(3'd0),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read),
    .buffer_r_address1(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .buffer_r_ce1(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1),
    .buffer_r_we1(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1),
    .buffer_r_d1(grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start),
    .ap_done(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done),
    .ap_idle(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle),
    .ap_ready(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready),
    .kq_sm_reshape_head3_din(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head3_din),
    .kq_sm_reshape_head3_num_data_valid(10'd0),
    .kq_sm_reshape_head3_fifo_cap(10'd0),
    .kq_sm_reshape_head3_full_n(kq_sm_reshape_head3_full_n),
    .kq_sm_reshape_head3_write(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head3_write),
    .buffer_r_address0(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .buffer_r_ce0(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .vec_o_4_out_i(vec_o_0_fu_50),
    .vec_o_4_out_o(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o),
    .vec_o_4_out_o_ap_vld(grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready == 1'b1)) begin
            grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready == 1'b1)) begin
            grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        tt_fu_46 <= 4'd0;
    end else if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tt_fu_46 <= tt_6_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        vec_o_0_fu_50 <= grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_ce0 = grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_ce1 = grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_we1 = grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kq_sm_reshape_head3_write = grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head3_write;
    end else begin
        kq_sm_reshape_head3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        unpacked_stream_read = grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start = grp_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;

assign grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start = grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;

assign icmp_ln69_fu_97_p2 = ((tt_fu_46 == 4'd14) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head3_din = grp_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_kq_sm_reshape_head3_din;

assign tt_6_fu_91_p2 = (tt_fu_46 + 4'd1);

endmodule //ATTN11_reorder_41
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [2:0] buffer_r_d1;

reg ap_idle;
reg unpacked_stream_read;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_201_p2;
reg   [0:0] icmp_ln73_reg_466;
wire   [6:0] select_ln72_fu_269_p3;
reg   [6:0] select_ln72_reg_474;
wire   [0:0] and_ln72_fu_287_p2;
reg   [0:0] and_ln72_reg_479;
wire   [2:0] select_ln72_3_fu_293_p3;
reg   [2:0] select_ln72_3_reg_484;
wire   [6:0] add_ln73_fu_300_p2;
reg   [6:0] add_ln73_reg_489;
wire   [1:0] select_ln73_fu_311_p3;
reg   [1:0] select_ln73_reg_494;
wire   [9:0] add_ln78_fu_364_p2;
reg   [9:0] add_ln78_reg_500;
reg   [2:0] unpacked_stream_read_reg_505;
wire   [63:0] zext_ln78_fu_401_p1;
reg   [1:0] tip_fu_74;
wire   [1:0] add_ln74_fu_372_p2;
reg   [1:0] ap_sig_allocacmp_tip_load;
wire    ap_loop_init;
reg   [6:0] cit_fu_78;
wire   [6:0] select_ln73_5_fu_331_p3;
reg   [6:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_82;
wire   [8:0] select_ln73_6_fu_213_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] tp_tip_fu_86;
reg   [9:0] indvar_flatten12_fu_90;
wire   [9:0] add_ln72_3_fu_183_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [8:0] add_ln73_3_fu_207_p2;
wire   [0:0] icmp_ln74_fu_281_p2;
wire   [0:0] xor_ln72_fu_276_p2;
wire   [2:0] add_ln72_fu_263_p2;
wire   [0:0] or_ln73_fu_306_p2;
wire   [3:0] tmp_fu_336_p3;
wire   [3:0] zext_ln74_fu_347_p1;
wire   [3:0] empty_fu_350_p2;
wire   [9:0] tmp_s_fu_356_p3;
wire   [9:0] zext_ln74_4_fu_343_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 tip_fu_74 = 2'd0;
//#0 cit_fu_78 = 7'd0;
//#0 indvar_flatten_fu_82 = 9'd0;
//#0 tp_tip_fu_86 = 3'd0;
//#0 indvar_flatten12_fu_90 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cit_fu_78 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cit_fu_78 <= select_ln73_5_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_90 <= add_ln72_3_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_90 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= select_ln73_6_fu_213_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tip_fu_74 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            tip_fu_74 <= add_ln74_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tp_tip_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tp_tip_fu_86 <= select_ln72_3_fu_293_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln73_reg_489 <= add_ln73_fu_300_p2;
        and_ln72_reg_479 <= and_ln72_fu_287_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln73_reg_466 <= icmp_ln73_fu_201_p2;
        select_ln72_3_reg_484 <= select_ln72_3_fu_293_p3;
        select_ln72_reg_474 <= select_ln72_fu_269_p3;
        select_ln73_reg_494 <= select_ln73_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln78_reg_500 <= add_ln78_fu_364_p2;
        unpacked_stream_read_reg_505 <= unpacked_stream_dout;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_cit_load = select_ln73_5_fu_331_p3;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_tip_load = add_ln74_fu_372_p2;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_blk_n = unpacked_stream_empty_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_read = 1'b1;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_3_fu_183_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln72_fu_263_p2 = (tp_tip_fu_86 + 3'd1);

assign add_ln73_3_fu_207_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln73_fu_300_p2 = (select_ln72_fu_269_p3 + 7'd1);

assign add_ln74_fu_372_p2 = (select_ln73_reg_494 + 2'd1);

assign add_ln78_fu_364_p2 = (tmp_s_fu_356_p3 + zext_ln74_4_fu_343_p1);

assign and_ln72_fu_287_p2 = (xor_ln72_fu_276_p2 & icmp_ln74_fu_281_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (unpacked_stream_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address1 = zext_ln78_fu_401_p1;

assign buffer_r_d1 = unpacked_stream_read_reg_505;

assign empty_fu_350_p2 = (tmp_fu_336_p3 + zext_ln74_fu_347_p1);

assign icmp_ln72_fu_189_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_201_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_281_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln73_fu_306_p2 = (icmp_ln73_reg_466 | and_ln72_fu_287_p2);

assign select_ln72_3_fu_293_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? add_ln72_fu_263_p2 : tp_tip_fu_86);

assign select_ln72_fu_269_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_cit_load);

assign select_ln73_5_fu_331_p3 = ((and_ln72_reg_479[0:0] == 1'b1) ? add_ln73_reg_489 : select_ln72_reg_474);

assign select_ln73_6_fu_213_p3 = ((icmp_ln73_fu_201_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_3_fu_207_p2);

assign select_ln73_fu_311_p3 = ((or_ln73_fu_306_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign tmp_fu_336_p3 = {{select_ln72_3_reg_484}, {1'd0}};

assign tmp_s_fu_356_p3 = {{empty_fu_350_p2}, {6'd0}};

assign xor_ln72_fu_276_p2 = (icmp_ln73_reg_466 ^ 1'd1);

assign zext_ln74_4_fu_343_p1 = select_ln73_5_fu_331_p3;

assign zext_ln74_fu_347_p1 = select_ln73_reg_494;

assign zext_ln78_fu_401_p1 = add_ln78_reg_500;

endmodule //ATTN11_reorder_41_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kq_sm_reshape_head3_din,
        kq_sm_reshape_head3_num_data_valid,
        kq_sm_reshape_head3_fifo_cap,
        kq_sm_reshape_head3_full_n,
        kq_sm_reshape_head3_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        vec_o_4_out_i,
        vec_o_4_out_o,
        vec_o_4_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] kq_sm_reshape_head3_din;
input  [9:0] kq_sm_reshape_head3_num_data_valid;
input  [9:0] kq_sm_reshape_head3_fifo_cap;
input   kq_sm_reshape_head3_full_n;
output   kq_sm_reshape_head3_write;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [2:0] buffer_r_q0;
input  [83:0] vec_o_4_out_i;
output  [83:0] vec_o_4_out_o;
output   vec_o_4_out_o_ap_vld;

reg ap_idle;
reg kq_sm_reshape_head3_write;
reg buffer_r_ce0;
reg[83:0] vec_o_4_out_o;
reg vec_o_4_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg   [0:0] and_ln99_reg_2155;
reg   [0:0] and_ln99_reg_2155_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_466_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kq_sm_reshape_head3_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_2085;
wire   [0:0] icmp_ln86_fu_472_p2;
reg   [0:0] icmp_ln86_reg_2089;
reg   [0:0] icmp_ln86_reg_2089_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_2089_pp0_iter2_reg;
wire   [0:0] xor_ln85_fu_522_p2;
reg   [0:0] xor_ln85_reg_2099;
wire   [0:0] icmp_ln87_fu_527_p2;
reg   [0:0] icmp_ln87_reg_2104;
wire   [0:0] and_ln85_3_fu_533_p2;
reg   [0:0] and_ln85_3_reg_2109;
wire   [0:0] or_ln86_fu_539_p2;
reg   [0:0] or_ln86_reg_2115;
wire   [2:0] select_ln87_fu_658_p3;
reg   [2:0] select_ln87_reg_2120;
wire   [2:0] select_ln87_5_fu_666_p3;
reg   [2:0] select_ln87_5_reg_2127;
wire   [3:0] empty_1075_fu_674_p1;
reg   [3:0] empty_1075_reg_2134;
wire   [3:0] empty_1076_fu_771_p2;
reg   [3:0] empty_1076_reg_2139;
wire   [5:0] add_ln93_fu_795_p2;
reg   [5:0] add_ln93_reg_2144;
wire   [4:0] add_ln93_1_fu_801_p2;
reg   [4:0] add_ln93_1_reg_2149;
reg   [4:0] add_ln93_1_reg_2149_pp0_iter4_reg;
wire   [0:0] and_ln99_fu_812_p2;
reg   [0:0] and_ln99_reg_2155_pp0_iter4_reg;
reg   [0:0] and_ln99_reg_2155_pp0_iter5_reg;
reg   [2:0] buffer_load_reg_2164;
wire   [7:0] sub_ln93_fu_859_p2;
reg   [7:0] sub_ln93_reg_2169;
reg   [83:0] vec_o_4_out_load_reg_2174;
wire   [83:0] shl_ln93_fu_880_p2;
reg   [83:0] shl_ln93_reg_2192;
wire   [83:0] shl_ln93_1_fu_889_p2;
reg   [83:0] shl_ln93_1_reg_2210;
wire   [2:0] and_ln93_1_fu_1089_p2;
reg   [2:0] and_ln93_1_reg_2228;
wire   [2:0] trunc_ln93_54_fu_1095_p1;
reg   [2:0] trunc_ln93_54_reg_2233;
reg   [2:0] trunc_ln5_reg_2238;
reg   [2:0] trunc_ln100_s_reg_2243;
reg   [2:0] trunc_ln100_65_reg_2248;
reg   [2:0] trunc_ln100_66_reg_2253;
reg   [2:0] trunc_ln100_67_reg_2258;
reg   [2:0] trunc_ln100_68_reg_2263;
reg   [2:0] trunc_ln100_69_reg_2268;
reg   [2:0] trunc_ln100_70_reg_2273;
reg   [2:0] trunc_ln100_71_reg_2278;
reg   [2:0] trunc_ln100_72_reg_2283;
reg   [2:0] trunc_ln100_73_reg_2288;
reg   [2:0] trunc_ln100_74_reg_2293;
reg   [2:0] trunc_ln100_75_reg_2298;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln93_fu_836_p1;
wire   [83:0] or_ln93_fu_1219_p2;
reg   [2:0] cop_fu_316;
wire   [2:0] add_ln88_fu_678_p2;
wire    ap_loop_init;
reg   [2:0] ATTN11_1_fu_320;
reg   [5:0] indvar_flatten19_fu_324;
wire   [5:0] select_ln87_6_fu_550_p3;
reg   [4:0] cot_fu_328;
wire   [4:0] select_ln86_5_fu_635_p3;
reg   [9:0] indvar_flatten34_fu_332;
wire   [9:0] select_ln86_6_fu_484_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [1:0] tp_ATTN11_fu_336;
wire   [1:0] select_ln85_4_fu_732_p3;
reg   [9:0] indvar_flatten59_fu_340;
wire   [9:0] add_ln85_3_fu_460_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln86_3_fu_478_p2;
wire   [5:0] add_ln87_3_fu_544_p2;
wire   [0:0] icmp_ln88_fu_595_p2;
wire   [4:0] select_ln85_fu_588_p3;
wire   [0:0] xor_ln86_fu_619_p2;
wire   [0:0] and_ln85_fu_601_p2;
wire   [0:0] or_ln86_3_fu_624_p2;
wire   [4:0] add_ln86_fu_606_p2;
wire   [2:0] select_ln86_fu_612_p3;
wire   [0:0] and_ln86_fu_629_p2;
wire   [0:0] or_ln87_fu_648_p2;
wire   [0:0] or_ln87_4_fu_653_p2;
wire   [2:0] add_ln87_fu_642_p2;
wire   [1:0] add_ln85_fu_726_p2;
wire   [0:0] empty_fu_743_p1;
wire   [3:0] p_shl_fu_747_p3;
wire   [3:0] zext_ln85_fu_739_p1;
wire   [3:0] empty_1074_fu_755_p2;
wire   [3:0] zext_ln87_fu_768_p1;
wire   [5:0] tmp_s_fu_761_p3;
wire   [5:0] zext_ln88_1_fu_792_p1;
wire   [4:0] tmp_3_fu_782_p3;
wire   [4:0] zext_ln88_fu_789_p1;
wire   [0:0] cmp69_fu_777_p2;
wire   [0:0] icmp_ln99_fu_807_p2;
wire   [9:0] tmp_4_fu_830_p3;
wire   [6:0] shl_ln93_2_fu_848_p3;
wire   [7:0] zext_ln93_3_fu_855_p1;
wire   [7:0] zext_ln93_2_fu_845_p1;
wire  signed [63:0] sext_ln93_fu_873_p1;
wire   [83:0] zext_ln93_4_fu_876_p1;
wire   [83:0] zext_ln93_1_fu_886_p1;
wire   [2:0] trunc_ln93_fu_895_p1;
wire   [80:0] trunc_ln93_26_fu_943_p1;
wire   [77:0] trunc_ln93_25_fu_939_p1;
wire   [74:0] trunc_ln93_24_fu_935_p1;
wire   [71:0] trunc_ln93_23_fu_931_p1;
wire   [68:0] trunc_ln93_22_fu_927_p1;
wire   [65:0] trunc_ln93_21_fu_923_p1;
wire   [62:0] trunc_ln93_20_fu_919_p1;
wire   [59:0] trunc_ln93_19_fu_915_p1;
wire   [56:0] trunc_ln93_18_fu_911_p1;
wire   [53:0] trunc_ln93_17_fu_907_p1;
wire   [8:0] trunc_ln93_2_fu_903_p1;
wire   [5:0] trunc_ln93_1_fu_899_p1;
wire   [83:0] xor_ln93_fu_947_p2;
wire   [2:0] trunc_ln93_27_fu_959_p1;
wire   [2:0] xor_ln93_1_fu_953_p2;
wire   [5:0] trunc_ln93_53_fu_1079_p1;
wire   [5:0] xor_ln93_27_fu_1073_p2;
wire   [8:0] trunc_ln93_52_fu_1069_p1;
wire   [8:0] xor_ln93_26_fu_1063_p2;
wire   [53:0] trunc_ln93_37_fu_1059_p1;
wire   [53:0] xor_ln93_11_fu_1053_p2;
wire   [56:0] trunc_ln93_36_fu_1049_p1;
wire   [56:0] xor_ln93_10_fu_1043_p2;
wire   [59:0] trunc_ln93_35_fu_1039_p1;
wire   [59:0] xor_ln93_9_fu_1033_p2;
wire   [62:0] trunc_ln93_34_fu_1029_p1;
wire   [62:0] xor_ln93_8_fu_1023_p2;
wire   [65:0] trunc_ln93_33_fu_1019_p1;
wire   [65:0] xor_ln93_7_fu_1013_p2;
wire   [68:0] trunc_ln93_32_fu_1009_p1;
wire   [68:0] xor_ln93_6_fu_1003_p2;
wire   [71:0] trunc_ln93_31_fu_999_p1;
wire   [71:0] xor_ln93_5_fu_993_p2;
wire   [74:0] trunc_ln93_30_fu_989_p1;
wire   [74:0] xor_ln93_4_fu_983_p2;
wire   [77:0] trunc_ln93_29_fu_979_p1;
wire   [77:0] xor_ln93_3_fu_973_p2;
wire   [80:0] trunc_ln93_28_fu_969_p1;
wire   [80:0] xor_ln93_2_fu_963_p2;
wire   [83:0] and_ln93_fu_1083_p2;
wire   [80:0] trunc_ln93_80_fu_1215_p1;
wire   [80:0] and_ln93_27_fu_1209_p2;
wire   [77:0] trunc_ln93_79_fu_1205_p1;
wire   [77:0] and_ln93_26_fu_1199_p2;
wire   [74:0] trunc_ln93_78_fu_1195_p1;
wire   [74:0] and_ln93_25_fu_1189_p2;
wire   [71:0] trunc_ln93_77_fu_1185_p1;
wire   [71:0] and_ln93_24_fu_1179_p2;
wire   [68:0] trunc_ln93_76_fu_1175_p1;
wire   [68:0] and_ln93_23_fu_1169_p2;
wire   [65:0] trunc_ln93_75_fu_1165_p1;
wire   [65:0] and_ln93_22_fu_1159_p2;
wire   [62:0] trunc_ln93_74_fu_1155_p1;
wire   [62:0] and_ln93_21_fu_1149_p2;
wire   [59:0] trunc_ln93_73_fu_1145_p1;
wire   [59:0] and_ln93_20_fu_1139_p2;
wire   [56:0] trunc_ln93_72_fu_1135_p1;
wire   [56:0] and_ln93_19_fu_1129_p2;
wire   [53:0] trunc_ln93_71_fu_1125_p1;
wire   [53:0] and_ln93_18_fu_1119_p2;
wire   [8:0] trunc_ln93_56_fu_1115_p1;
wire   [8:0] and_ln93_3_fu_1109_p2;
wire   [5:0] trunc_ln93_55_fu_1105_p1;
wire   [5:0] and_ln93_2_fu_1099_p2;
wire   [5:0] or_ln99_75_fu_1291_p2;
wire   [8:0] or_ln99_74_fu_1285_p2;
wire   [53:0] or_ln99_59_fu_1279_p2;
wire   [56:0] or_ln99_58_fu_1273_p2;
wire   [59:0] or_ln99_57_fu_1267_p2;
wire   [62:0] or_ln99_56_fu_1261_p2;
wire   [65:0] or_ln99_55_fu_1255_p2;
wire   [68:0] or_ln99_54_fu_1249_p2;
wire   [71:0] or_ln99_53_fu_1243_p2;
wire   [74:0] or_ln99_52_fu_1237_p2;
wire   [77:0] or_ln99_51_fu_1231_p2;
wire   [80:0] or_ln99_fu_1225_p2;
wire   [50:0] trunc_ln93_16_fu_1480_p1;
wire   [47:0] trunc_ln93_15_fu_1477_p1;
wire   [44:0] trunc_ln93_14_fu_1474_p1;
wire   [41:0] trunc_ln93_13_fu_1471_p1;
wire   [38:0] trunc_ln93_12_fu_1468_p1;
wire   [35:0] trunc_ln93_11_fu_1465_p1;
wire   [32:0] trunc_ln93_10_fu_1462_p1;
wire   [29:0] trunc_ln93_9_fu_1459_p1;
wire   [26:0] trunc_ln93_8_fu_1456_p1;
wire   [23:0] trunc_ln93_7_fu_1453_p1;
wire   [20:0] trunc_ln93_6_fu_1450_p1;
wire   [17:0] trunc_ln93_5_fu_1447_p1;
wire   [14:0] trunc_ln93_4_fu_1444_p1;
wire   [11:0] trunc_ln93_3_fu_1441_p1;
wire   [11:0] trunc_ln93_51_fu_1606_p1;
wire   [11:0] xor_ln93_25_fu_1600_p2;
wire   [14:0] trunc_ln93_50_fu_1597_p1;
wire   [14:0] xor_ln93_24_fu_1591_p2;
wire   [17:0] trunc_ln93_49_fu_1588_p1;
wire   [17:0] xor_ln93_23_fu_1582_p2;
wire   [20:0] trunc_ln93_48_fu_1579_p1;
wire   [20:0] xor_ln93_22_fu_1573_p2;
wire   [23:0] trunc_ln93_47_fu_1570_p1;
wire   [23:0] xor_ln93_21_fu_1564_p2;
wire   [26:0] trunc_ln93_46_fu_1561_p1;
wire   [26:0] xor_ln93_20_fu_1555_p2;
wire   [29:0] trunc_ln93_45_fu_1552_p1;
wire   [29:0] xor_ln93_19_fu_1546_p2;
wire   [32:0] trunc_ln93_44_fu_1543_p1;
wire   [32:0] xor_ln93_18_fu_1537_p2;
wire   [35:0] trunc_ln93_43_fu_1534_p1;
wire   [35:0] xor_ln93_17_fu_1528_p2;
wire   [38:0] trunc_ln93_42_fu_1525_p1;
wire   [38:0] xor_ln93_16_fu_1519_p2;
wire   [41:0] trunc_ln93_41_fu_1516_p1;
wire   [41:0] xor_ln93_15_fu_1510_p2;
wire   [44:0] trunc_ln93_40_fu_1507_p1;
wire   [44:0] xor_ln93_14_fu_1501_p2;
wire   [47:0] trunc_ln93_39_fu_1498_p1;
wire   [47:0] xor_ln93_13_fu_1492_p2;
wire   [50:0] trunc_ln93_38_fu_1489_p1;
wire   [50:0] xor_ln93_12_fu_1483_p2;
wire   [50:0] trunc_ln93_70_fu_1732_p1;
wire   [50:0] and_ln93_17_fu_1726_p2;
wire   [47:0] trunc_ln93_69_fu_1723_p1;
wire   [47:0] and_ln93_16_fu_1717_p2;
wire   [44:0] trunc_ln93_68_fu_1714_p1;
wire   [44:0] and_ln93_15_fu_1708_p2;
wire   [41:0] trunc_ln93_67_fu_1705_p1;
wire   [41:0] and_ln93_14_fu_1699_p2;
wire   [38:0] trunc_ln93_66_fu_1696_p1;
wire   [38:0] and_ln93_13_fu_1690_p2;
wire   [35:0] trunc_ln93_65_fu_1687_p1;
wire   [35:0] and_ln93_12_fu_1681_p2;
wire   [32:0] trunc_ln93_64_fu_1678_p1;
wire   [32:0] and_ln93_11_fu_1672_p2;
wire   [29:0] trunc_ln93_63_fu_1669_p1;
wire   [29:0] and_ln93_10_fu_1663_p2;
wire   [26:0] trunc_ln93_62_fu_1660_p1;
wire   [26:0] and_ln93_9_fu_1654_p2;
wire   [23:0] trunc_ln93_61_fu_1651_p1;
wire   [23:0] and_ln93_8_fu_1645_p2;
wire   [20:0] trunc_ln93_60_fu_1642_p1;
wire   [20:0] and_ln93_7_fu_1636_p2;
wire   [17:0] trunc_ln93_59_fu_1633_p1;
wire   [17:0] and_ln93_6_fu_1627_p2;
wire   [14:0] trunc_ln93_58_fu_1624_p1;
wire   [14:0] and_ln93_5_fu_1618_p2;
wire   [11:0] trunc_ln93_57_fu_1615_p1;
wire   [11:0] and_ln93_4_fu_1609_p2;
wire   [11:0] or_ln99_73_fu_1813_p2;
wire   [14:0] or_ln99_72_fu_1807_p2;
wire   [17:0] or_ln99_71_fu_1801_p2;
wire   [20:0] or_ln99_70_fu_1795_p2;
wire   [23:0] or_ln99_69_fu_1789_p2;
wire   [26:0] or_ln99_68_fu_1783_p2;
wire   [29:0] or_ln99_67_fu_1777_p2;
wire   [32:0] or_ln99_66_fu_1771_p2;
wire   [35:0] or_ln99_65_fu_1765_p2;
wire   [38:0] or_ln99_64_fu_1759_p2;
wire   [41:0] or_ln99_63_fu_1753_p2;
wire   [44:0] or_ln99_62_fu_1747_p2;
wire   [47:0] or_ln99_61_fu_1741_p2;
wire   [50:0] or_ln99_60_fu_1735_p2;
wire   [2:0] trunc_ln100_64_fu_1949_p4;
wire   [2:0] trunc_ln100_63_fu_1939_p4;
wire   [2:0] trunc_ln100_62_fu_1929_p4;
wire   [2:0] trunc_ln100_61_fu_1919_p4;
wire   [2:0] trunc_ln100_60_fu_1909_p4;
wire   [2:0] trunc_ln100_59_fu_1899_p4;
wire   [2:0] trunc_ln100_58_fu_1889_p4;
wire   [2:0] trunc_ln100_57_fu_1879_p4;
wire   [2:0] trunc_ln100_56_fu_1869_p4;
wire   [2:0] trunc_ln100_55_fu_1859_p4;
wire   [2:0] trunc_ln100_54_fu_1849_p4;
wire   [2:0] trunc_ln100_53_fu_1839_p4;
wire   [2:0] trunc_ln100_52_fu_1829_p4;
wire   [2:0] trunc_ln100_51_fu_1819_p4;
wire   [2:0] or_ln100_fu_1959_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 cop_fu_316 = 3'd0;
//#0 ATTN11_1_fu_320 = 3'd0;
//#0 indvar_flatten19_fu_324 = 6'd0;
//#0 cot_fu_328 = 5'd0;
//#0 indvar_flatten34_fu_332 = 10'd0;
//#0 tp_ATTN11_fu_336 = 2'd0;
//#0 indvar_flatten59_fu_340 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cop_fu_316 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cop_fu_316 <= add_ln88_fu_678_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cot_fu_328 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cot_fu_328 <= select_ln86_5_fu_635_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_324 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln85_reg_2085 == 1'd0))) begin
            indvar_flatten19_fu_324 <= select_ln87_6_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_332 <= select_ln86_6_fu_484_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_332 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_340 <= add_ln85_3_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_340 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ATTN11_1_fu_320 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ATTN11_1_fu_320 <= select_ln87_5_fu_666_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tp_ATTN11_fu_336 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tp_ATTN11_fu_336 <= select_ln85_4_fu_732_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln93_1_reg_2149 <= add_ln93_1_fu_801_p2;
        add_ln93_1_reg_2149_pp0_iter4_reg <= add_ln93_1_reg_2149;
        add_ln93_reg_2144 <= add_ln93_fu_795_p2;
        and_ln93_1_reg_2228 <= and_ln93_1_fu_1089_p2;
        and_ln99_reg_2155 <= and_ln99_fu_812_p2;
        and_ln99_reg_2155_pp0_iter4_reg <= and_ln99_reg_2155;
        and_ln99_reg_2155_pp0_iter5_reg <= and_ln99_reg_2155_pp0_iter4_reg;
        and_ln99_reg_2155_pp0_iter6_reg <= and_ln99_reg_2155_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        buffer_load_reg_2164 <= buffer_r_q0;
        empty_1075_reg_2134 <= empty_1075_fu_674_p1;
        empty_1076_reg_2139 <= empty_1076_fu_771_p2;
        icmp_ln86_reg_2089_pp0_iter2_reg <= icmp_ln86_reg_2089_pp0_iter1_reg;
        select_ln87_5_reg_2127 <= select_ln87_5_fu_666_p3;
        select_ln87_reg_2120 <= select_ln87_fu_658_p3;
        shl_ln93_1_reg_2210 <= shl_ln93_1_fu_889_p2;
        shl_ln93_reg_2192 <= shl_ln93_fu_880_p2;
        sub_ln93_reg_2169 <= sub_ln93_fu_859_p2;
        trunc_ln100_65_reg_2248 <= {{or_ln99_59_fu_1279_p2[53:51]}};
        trunc_ln100_66_reg_2253 <= {{or_ln99_58_fu_1273_p2[56:54]}};
        trunc_ln100_67_reg_2258 <= {{or_ln99_57_fu_1267_p2[59:57]}};
        trunc_ln100_68_reg_2263 <= {{or_ln99_56_fu_1261_p2[62:60]}};
        trunc_ln100_69_reg_2268 <= {{or_ln99_55_fu_1255_p2[65:63]}};
        trunc_ln100_70_reg_2273 <= {{or_ln99_54_fu_1249_p2[68:66]}};
        trunc_ln100_71_reg_2278 <= {{or_ln99_53_fu_1243_p2[71:69]}};
        trunc_ln100_72_reg_2283 <= {{or_ln99_52_fu_1237_p2[74:72]}};
        trunc_ln100_73_reg_2288 <= {{or_ln99_51_fu_1231_p2[77:75]}};
        trunc_ln100_74_reg_2293 <= {{or_ln99_fu_1225_p2[80:78]}};
        trunc_ln100_75_reg_2298 <= {{or_ln93_fu_1219_p2[83:81]}};
        trunc_ln100_s_reg_2243 <= {{or_ln99_74_fu_1285_p2[8:6]}};
        trunc_ln5_reg_2238 <= {{or_ln99_75_fu_1291_p2[5:3]}};
        trunc_ln93_54_reg_2233 <= trunc_ln93_54_fu_1095_p1;
        vec_o_4_out_load_reg_2174 <= vec_o_4_out_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_3_reg_2109 <= and_ln85_3_fu_533_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln85_reg_2085 <= icmp_ln85_fu_466_p2;
        icmp_ln86_reg_2089 <= icmp_ln86_fu_472_p2;
        icmp_ln86_reg_2089_pp0_iter1_reg <= icmp_ln86_reg_2089;
        icmp_ln87_reg_2104 <= icmp_ln87_fu_527_p2;
        or_ln86_reg_2115 <= or_ln86_fu_539_p2;
        xor_ln85_reg_2099 <= xor_ln85_fu_522_p2;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_466_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln85_reg_2085 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_332;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_340;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        kq_sm_reshape_head3_blk_n = kq_sm_reshape_head3_full_n;
    end else begin
        kq_sm_reshape_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        kq_sm_reshape_head3_write = 1'b1;
    end else begin
        kq_sm_reshape_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o = or_ln93_fu_1219_p2;
    end else begin
        vec_o_4_out_o = vec_o_4_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o_ap_vld = 1'b1;
    end else begin
        vec_o_4_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_3_fu_460_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 10'd1);

assign add_ln85_fu_726_p2 = (tp_ATTN11_fu_336 + 2'd1);

assign add_ln86_3_fu_478_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 10'd1);

assign add_ln86_fu_606_p2 = (select_ln85_fu_588_p3 + 5'd1);

assign add_ln87_3_fu_544_p2 = (indvar_flatten19_fu_324 + 6'd1);

assign add_ln87_fu_642_p2 = (select_ln86_fu_612_p3 + 3'd1);

assign add_ln88_fu_678_p2 = (select_ln87_fu_658_p3 + 3'd1);

assign add_ln93_1_fu_801_p2 = (tmp_3_fu_782_p3 + zext_ln88_fu_789_p1);

assign add_ln93_fu_795_p2 = (tmp_s_fu_761_p3 + zext_ln88_1_fu_792_p1);

assign and_ln85_3_fu_533_p2 = (xor_ln85_fu_522_p2 & icmp_ln87_fu_527_p2);

assign and_ln85_fu_601_p2 = (xor_ln85_reg_2099 & icmp_ln88_fu_595_p2);

assign and_ln86_fu_629_p2 = (or_ln86_3_fu_624_p2 & and_ln85_fu_601_p2);

assign and_ln93_10_fu_1663_p2 = (xor_ln93_19_fu_1546_p2 & trunc_ln93_45_fu_1552_p1);

assign and_ln93_11_fu_1672_p2 = (xor_ln93_18_fu_1537_p2 & trunc_ln93_44_fu_1543_p1);

assign and_ln93_12_fu_1681_p2 = (xor_ln93_17_fu_1528_p2 & trunc_ln93_43_fu_1534_p1);

assign and_ln93_13_fu_1690_p2 = (xor_ln93_16_fu_1519_p2 & trunc_ln93_42_fu_1525_p1);

assign and_ln93_14_fu_1699_p2 = (xor_ln93_15_fu_1510_p2 & trunc_ln93_41_fu_1516_p1);

assign and_ln93_15_fu_1708_p2 = (xor_ln93_14_fu_1501_p2 & trunc_ln93_40_fu_1507_p1);

assign and_ln93_16_fu_1717_p2 = (xor_ln93_13_fu_1492_p2 & trunc_ln93_39_fu_1498_p1);

assign and_ln93_17_fu_1726_p2 = (xor_ln93_12_fu_1483_p2 & trunc_ln93_38_fu_1489_p1);

assign and_ln93_18_fu_1119_p2 = (xor_ln93_11_fu_1053_p2 & trunc_ln93_37_fu_1059_p1);

assign and_ln93_19_fu_1129_p2 = (xor_ln93_10_fu_1043_p2 & trunc_ln93_36_fu_1049_p1);

assign and_ln93_1_fu_1089_p2 = (xor_ln93_1_fu_953_p2 & trunc_ln93_27_fu_959_p1);

assign and_ln93_20_fu_1139_p2 = (xor_ln93_9_fu_1033_p2 & trunc_ln93_35_fu_1039_p1);

assign and_ln93_21_fu_1149_p2 = (xor_ln93_8_fu_1023_p2 & trunc_ln93_34_fu_1029_p1);

assign and_ln93_22_fu_1159_p2 = (xor_ln93_7_fu_1013_p2 & trunc_ln93_33_fu_1019_p1);

assign and_ln93_23_fu_1169_p2 = (xor_ln93_6_fu_1003_p2 & trunc_ln93_32_fu_1009_p1);

assign and_ln93_24_fu_1179_p2 = (xor_ln93_5_fu_993_p2 & trunc_ln93_31_fu_999_p1);

assign and_ln93_25_fu_1189_p2 = (xor_ln93_4_fu_983_p2 & trunc_ln93_30_fu_989_p1);

assign and_ln93_26_fu_1199_p2 = (xor_ln93_3_fu_973_p2 & trunc_ln93_29_fu_979_p1);

assign and_ln93_27_fu_1209_p2 = (xor_ln93_2_fu_963_p2 & trunc_ln93_28_fu_969_p1);

assign and_ln93_2_fu_1099_p2 = (xor_ln93_27_fu_1073_p2 & trunc_ln93_53_fu_1079_p1);

assign and_ln93_3_fu_1109_p2 = (xor_ln93_26_fu_1063_p2 & trunc_ln93_52_fu_1069_p1);

assign and_ln93_4_fu_1609_p2 = (xor_ln93_25_fu_1600_p2 & trunc_ln93_51_fu_1606_p1);

assign and_ln93_5_fu_1618_p2 = (xor_ln93_24_fu_1591_p2 & trunc_ln93_50_fu_1597_p1);

assign and_ln93_6_fu_1627_p2 = (xor_ln93_23_fu_1582_p2 & trunc_ln93_49_fu_1588_p1);

assign and_ln93_7_fu_1636_p2 = (xor_ln93_22_fu_1573_p2 & trunc_ln93_48_fu_1579_p1);

assign and_ln93_8_fu_1645_p2 = (xor_ln93_21_fu_1564_p2 & trunc_ln93_47_fu_1570_p1);

assign and_ln93_9_fu_1654_p2 = (xor_ln93_20_fu_1555_p2 & trunc_ln93_46_fu_1561_p1);

assign and_ln93_fu_1083_p2 = (xor_ln93_fu_947_p2 & vec_o_4_out_i);

assign and_ln99_fu_812_p2 = (icmp_ln99_fu_807_p2 & cmp69_fu_777_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((1'd1 == and_ln99_reg_2155_pp0_iter6_reg) & (kq_sm_reshape_head3_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address0 = zext_ln93_fu_836_p1;

assign cmp69_fu_777_p2 = ((select_ln87_5_reg_2127 == 3'd6) ? 1'b1 : 1'b0);

assign empty_1074_fu_755_p2 = (p_shl_fu_747_p3 - zext_ln85_fu_739_p1);

assign empty_1075_fu_674_p1 = select_ln86_5_fu_635_p3[3:0];

assign empty_1076_fu_771_p2 = (empty_1074_fu_755_p2 + zext_ln87_fu_768_p1);

assign empty_fu_743_p1 = select_ln85_4_fu_732_p3[0:0];

assign icmp_ln85_fu_466_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_472_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_527_p2 = ((indvar_flatten19_fu_324 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_595_p2 = ((cop_fu_316 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_807_p2 = ((select_ln87_reg_2120 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head3_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln100_75_reg_2298}, {trunc_ln100_74_reg_2293}}, {trunc_ln100_73_reg_2288}}, {trunc_ln100_72_reg_2283}}, {trunc_ln100_71_reg_2278}}, {trunc_ln100_70_reg_2273}}, {trunc_ln100_69_reg_2268}}, {trunc_ln100_68_reg_2263}}, {trunc_ln100_67_reg_2258}}, {trunc_ln100_66_reg_2253}}, {trunc_ln100_65_reg_2248}}, {trunc_ln100_64_fu_1949_p4}}, {trunc_ln100_63_fu_1939_p4}}, {trunc_ln100_62_fu_1929_p4}}, {trunc_ln100_61_fu_1919_p4}}, {trunc_ln100_60_fu_1909_p4}}, {trunc_ln100_59_fu_1899_p4}}, {trunc_ln100_58_fu_1889_p4}}, {trunc_ln100_57_fu_1879_p4}}, {trunc_ln100_56_fu_1869_p4}}, {trunc_ln100_55_fu_1859_p4}}, {trunc_ln100_54_fu_1849_p4}}, {trunc_ln100_53_fu_1839_p4}}, {trunc_ln100_52_fu_1829_p4}}, {trunc_ln100_51_fu_1819_p4}}, {trunc_ln100_s_reg_2243}}, {trunc_ln5_reg_2238}}, {or_ln100_fu_1959_p2}};

assign or_ln100_fu_1959_p2 = (trunc_ln93_54_reg_2233 | and_ln93_1_reg_2228);

assign or_ln86_3_fu_624_p2 = (xor_ln86_fu_619_p2 | icmp_ln86_reg_2089_pp0_iter1_reg);

assign or_ln86_fu_539_p2 = (icmp_ln86_reg_2089 | and_ln85_3_fu_533_p2);

assign or_ln87_4_fu_653_p2 = (or_ln87_fu_648_p2 | icmp_ln86_reg_2089_pp0_iter1_reg);

assign or_ln87_fu_648_p2 = (and_ln86_fu_629_p2 | and_ln85_3_reg_2109);

assign or_ln93_fu_1219_p2 = (shl_ln93_1_fu_889_p2 | and_ln93_fu_1083_p2);

assign or_ln99_51_fu_1231_p2 = (trunc_ln93_79_fu_1205_p1 | and_ln93_26_fu_1199_p2);

assign or_ln99_52_fu_1237_p2 = (trunc_ln93_78_fu_1195_p1 | and_ln93_25_fu_1189_p2);

assign or_ln99_53_fu_1243_p2 = (trunc_ln93_77_fu_1185_p1 | and_ln93_24_fu_1179_p2);

assign or_ln99_54_fu_1249_p2 = (trunc_ln93_76_fu_1175_p1 | and_ln93_23_fu_1169_p2);

assign or_ln99_55_fu_1255_p2 = (trunc_ln93_75_fu_1165_p1 | and_ln93_22_fu_1159_p2);

assign or_ln99_56_fu_1261_p2 = (trunc_ln93_74_fu_1155_p1 | and_ln93_21_fu_1149_p2);

assign or_ln99_57_fu_1267_p2 = (trunc_ln93_73_fu_1145_p1 | and_ln93_20_fu_1139_p2);

assign or_ln99_58_fu_1273_p2 = (trunc_ln93_72_fu_1135_p1 | and_ln93_19_fu_1129_p2);

assign or_ln99_59_fu_1279_p2 = (trunc_ln93_71_fu_1125_p1 | and_ln93_18_fu_1119_p2);

assign or_ln99_60_fu_1735_p2 = (trunc_ln93_70_fu_1732_p1 | and_ln93_17_fu_1726_p2);

assign or_ln99_61_fu_1741_p2 = (trunc_ln93_69_fu_1723_p1 | and_ln93_16_fu_1717_p2);

assign or_ln99_62_fu_1747_p2 = (trunc_ln93_68_fu_1714_p1 | and_ln93_15_fu_1708_p2);

assign or_ln99_63_fu_1753_p2 = (trunc_ln93_67_fu_1705_p1 | and_ln93_14_fu_1699_p2);

assign or_ln99_64_fu_1759_p2 = (trunc_ln93_66_fu_1696_p1 | and_ln93_13_fu_1690_p2);

assign or_ln99_65_fu_1765_p2 = (trunc_ln93_65_fu_1687_p1 | and_ln93_12_fu_1681_p2);

assign or_ln99_66_fu_1771_p2 = (trunc_ln93_64_fu_1678_p1 | and_ln93_11_fu_1672_p2);

assign or_ln99_67_fu_1777_p2 = (trunc_ln93_63_fu_1669_p1 | and_ln93_10_fu_1663_p2);

assign or_ln99_68_fu_1783_p2 = (trunc_ln93_62_fu_1660_p1 | and_ln93_9_fu_1654_p2);

assign or_ln99_69_fu_1789_p2 = (trunc_ln93_61_fu_1651_p1 | and_ln93_8_fu_1645_p2);

assign or_ln99_70_fu_1795_p2 = (trunc_ln93_60_fu_1642_p1 | and_ln93_7_fu_1636_p2);

assign or_ln99_71_fu_1801_p2 = (trunc_ln93_59_fu_1633_p1 | and_ln93_6_fu_1627_p2);

assign or_ln99_72_fu_1807_p2 = (trunc_ln93_58_fu_1624_p1 | and_ln93_5_fu_1618_p2);

assign or_ln99_73_fu_1813_p2 = (trunc_ln93_57_fu_1615_p1 | and_ln93_4_fu_1609_p2);

assign or_ln99_74_fu_1285_p2 = (trunc_ln93_56_fu_1115_p1 | and_ln93_3_fu_1109_p2);

assign or_ln99_75_fu_1291_p2 = (trunc_ln93_55_fu_1105_p1 | and_ln93_2_fu_1099_p2);

assign or_ln99_fu_1225_p2 = (trunc_ln93_80_fu_1215_p1 | and_ln93_27_fu_1209_p2);

assign p_shl_fu_747_p3 = {{empty_fu_743_p1}, {3'd0}};

assign select_ln85_4_fu_732_p3 = ((icmp_ln86_reg_2089_pp0_iter2_reg[0:0] == 1'b1) ? add_ln85_fu_726_p2 : tp_ATTN11_fu_336);

assign select_ln85_fu_588_p3 = ((icmp_ln86_reg_2089_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : cot_fu_328);

assign select_ln86_5_fu_635_p3 = ((and_ln85_3_reg_2109[0:0] == 1'b1) ? add_ln86_fu_606_p2 : select_ln85_fu_588_p3);

assign select_ln86_6_fu_484_p3 = ((icmp_ln86_fu_472_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_3_fu_478_p2);

assign select_ln86_fu_612_p3 = ((or_ln86_reg_2115[0:0] == 1'b1) ? 3'd0 : ATTN11_1_fu_320);

assign select_ln87_5_fu_666_p3 = ((and_ln86_fu_629_p2[0:0] == 1'b1) ? add_ln87_fu_642_p2 : select_ln86_fu_612_p3);

assign select_ln87_6_fu_550_p3 = ((or_ln86_fu_539_p2[0:0] == 1'b1) ? 6'd1 : add_ln87_3_fu_544_p2);

assign select_ln87_fu_658_p3 = ((or_ln87_4_fu_653_p2[0:0] == 1'b1) ? 3'd0 : cop_fu_316);

assign sext_ln93_fu_873_p1 = $signed(sub_ln93_reg_2169);

assign shl_ln93_1_fu_889_p2 = zext_ln93_1_fu_886_p1 << zext_ln93_4_fu_876_p1;

assign shl_ln93_2_fu_848_p3 = {{add_ln93_1_reg_2149_pp0_iter4_reg}, {2'd0}};

assign shl_ln93_fu_880_p2 = 84'd7 << zext_ln93_4_fu_876_p1;

assign sub_ln93_fu_859_p2 = (zext_ln93_3_fu_855_p1 - zext_ln93_2_fu_845_p1);

assign tmp_3_fu_782_p3 = {{select_ln87_5_reg_2127}, {2'd0}};

assign tmp_4_fu_830_p3 = {{empty_1076_reg_2139}, {add_ln93_reg_2144}};

assign tmp_s_fu_761_p3 = {{empty_1075_reg_2134}, {2'd0}};

assign trunc_ln100_51_fu_1819_p4 = {{or_ln99_73_fu_1813_p2[11:9]}};

assign trunc_ln100_52_fu_1829_p4 = {{or_ln99_72_fu_1807_p2[14:12]}};

assign trunc_ln100_53_fu_1839_p4 = {{or_ln99_71_fu_1801_p2[17:15]}};

assign trunc_ln100_54_fu_1849_p4 = {{or_ln99_70_fu_1795_p2[20:18]}};

assign trunc_ln100_55_fu_1859_p4 = {{or_ln99_69_fu_1789_p2[23:21]}};

assign trunc_ln100_56_fu_1869_p4 = {{or_ln99_68_fu_1783_p2[26:24]}};

assign trunc_ln100_57_fu_1879_p4 = {{or_ln99_67_fu_1777_p2[29:27]}};

assign trunc_ln100_58_fu_1889_p4 = {{or_ln99_66_fu_1771_p2[32:30]}};

assign trunc_ln100_59_fu_1899_p4 = {{or_ln99_65_fu_1765_p2[35:33]}};

assign trunc_ln100_60_fu_1909_p4 = {{or_ln99_64_fu_1759_p2[38:36]}};

assign trunc_ln100_61_fu_1919_p4 = {{or_ln99_63_fu_1753_p2[41:39]}};

assign trunc_ln100_62_fu_1929_p4 = {{or_ln99_62_fu_1747_p2[44:42]}};

assign trunc_ln100_63_fu_1939_p4 = {{or_ln99_61_fu_1741_p2[47:45]}};

assign trunc_ln100_64_fu_1949_p4 = {{or_ln99_60_fu_1735_p2[50:48]}};

assign trunc_ln93_10_fu_1462_p1 = shl_ln93_reg_2192[32:0];

assign trunc_ln93_11_fu_1465_p1 = shl_ln93_reg_2192[35:0];

assign trunc_ln93_12_fu_1468_p1 = shl_ln93_reg_2192[38:0];

assign trunc_ln93_13_fu_1471_p1 = shl_ln93_reg_2192[41:0];

assign trunc_ln93_14_fu_1474_p1 = shl_ln93_reg_2192[44:0];

assign trunc_ln93_15_fu_1477_p1 = shl_ln93_reg_2192[47:0];

assign trunc_ln93_16_fu_1480_p1 = shl_ln93_reg_2192[50:0];

assign trunc_ln93_17_fu_907_p1 = shl_ln93_fu_880_p2[53:0];

assign trunc_ln93_18_fu_911_p1 = shl_ln93_fu_880_p2[56:0];

assign trunc_ln93_19_fu_915_p1 = shl_ln93_fu_880_p2[59:0];

assign trunc_ln93_1_fu_899_p1 = shl_ln93_fu_880_p2[5:0];

assign trunc_ln93_20_fu_919_p1 = shl_ln93_fu_880_p2[62:0];

assign trunc_ln93_21_fu_923_p1 = shl_ln93_fu_880_p2[65:0];

assign trunc_ln93_22_fu_927_p1 = shl_ln93_fu_880_p2[68:0];

assign trunc_ln93_23_fu_931_p1 = shl_ln93_fu_880_p2[71:0];

assign trunc_ln93_24_fu_935_p1 = shl_ln93_fu_880_p2[74:0];

assign trunc_ln93_25_fu_939_p1 = shl_ln93_fu_880_p2[77:0];

assign trunc_ln93_26_fu_943_p1 = shl_ln93_fu_880_p2[80:0];

assign trunc_ln93_27_fu_959_p1 = vec_o_4_out_i[2:0];

assign trunc_ln93_28_fu_969_p1 = vec_o_4_out_i[80:0];

assign trunc_ln93_29_fu_979_p1 = vec_o_4_out_i[77:0];

assign trunc_ln93_2_fu_903_p1 = shl_ln93_fu_880_p2[8:0];

assign trunc_ln93_30_fu_989_p1 = vec_o_4_out_i[74:0];

assign trunc_ln93_31_fu_999_p1 = vec_o_4_out_i[71:0];

assign trunc_ln93_32_fu_1009_p1 = vec_o_4_out_i[68:0];

assign trunc_ln93_33_fu_1019_p1 = vec_o_4_out_i[65:0];

assign trunc_ln93_34_fu_1029_p1 = vec_o_4_out_i[62:0];

assign trunc_ln93_35_fu_1039_p1 = vec_o_4_out_i[59:0];

assign trunc_ln93_36_fu_1049_p1 = vec_o_4_out_i[56:0];

assign trunc_ln93_37_fu_1059_p1 = vec_o_4_out_i[53:0];

assign trunc_ln93_38_fu_1489_p1 = vec_o_4_out_load_reg_2174[50:0];

assign trunc_ln93_39_fu_1498_p1 = vec_o_4_out_load_reg_2174[47:0];

assign trunc_ln93_3_fu_1441_p1 = shl_ln93_reg_2192[11:0];

assign trunc_ln93_40_fu_1507_p1 = vec_o_4_out_load_reg_2174[44:0];

assign trunc_ln93_41_fu_1516_p1 = vec_o_4_out_load_reg_2174[41:0];

assign trunc_ln93_42_fu_1525_p1 = vec_o_4_out_load_reg_2174[38:0];

assign trunc_ln93_43_fu_1534_p1 = vec_o_4_out_load_reg_2174[35:0];

assign trunc_ln93_44_fu_1543_p1 = vec_o_4_out_load_reg_2174[32:0];

assign trunc_ln93_45_fu_1552_p1 = vec_o_4_out_load_reg_2174[29:0];

assign trunc_ln93_46_fu_1561_p1 = vec_o_4_out_load_reg_2174[26:0];

assign trunc_ln93_47_fu_1570_p1 = vec_o_4_out_load_reg_2174[23:0];

assign trunc_ln93_48_fu_1579_p1 = vec_o_4_out_load_reg_2174[20:0];

assign trunc_ln93_49_fu_1588_p1 = vec_o_4_out_load_reg_2174[17:0];

assign trunc_ln93_4_fu_1444_p1 = shl_ln93_reg_2192[14:0];

assign trunc_ln93_50_fu_1597_p1 = vec_o_4_out_load_reg_2174[14:0];

assign trunc_ln93_51_fu_1606_p1 = vec_o_4_out_load_reg_2174[11:0];

assign trunc_ln93_52_fu_1069_p1 = vec_o_4_out_i[8:0];

assign trunc_ln93_53_fu_1079_p1 = vec_o_4_out_i[5:0];

assign trunc_ln93_54_fu_1095_p1 = shl_ln93_1_fu_889_p2[2:0];

assign trunc_ln93_55_fu_1105_p1 = shl_ln93_1_fu_889_p2[5:0];

assign trunc_ln93_56_fu_1115_p1 = shl_ln93_1_fu_889_p2[8:0];

assign trunc_ln93_57_fu_1615_p1 = shl_ln93_1_reg_2210[11:0];

assign trunc_ln93_58_fu_1624_p1 = shl_ln93_1_reg_2210[14:0];

assign trunc_ln93_59_fu_1633_p1 = shl_ln93_1_reg_2210[17:0];

assign trunc_ln93_5_fu_1447_p1 = shl_ln93_reg_2192[17:0];

assign trunc_ln93_60_fu_1642_p1 = shl_ln93_1_reg_2210[20:0];

assign trunc_ln93_61_fu_1651_p1 = shl_ln93_1_reg_2210[23:0];

assign trunc_ln93_62_fu_1660_p1 = shl_ln93_1_reg_2210[26:0];

assign trunc_ln93_63_fu_1669_p1 = shl_ln93_1_reg_2210[29:0];

assign trunc_ln93_64_fu_1678_p1 = shl_ln93_1_reg_2210[32:0];

assign trunc_ln93_65_fu_1687_p1 = shl_ln93_1_reg_2210[35:0];

assign trunc_ln93_66_fu_1696_p1 = shl_ln93_1_reg_2210[38:0];

assign trunc_ln93_67_fu_1705_p1 = shl_ln93_1_reg_2210[41:0];

assign trunc_ln93_68_fu_1714_p1 = shl_ln93_1_reg_2210[44:0];

assign trunc_ln93_69_fu_1723_p1 = shl_ln93_1_reg_2210[47:0];

assign trunc_ln93_6_fu_1450_p1 = shl_ln93_reg_2192[20:0];

assign trunc_ln93_70_fu_1732_p1 = shl_ln93_1_reg_2210[50:0];

assign trunc_ln93_71_fu_1125_p1 = shl_ln93_1_fu_889_p2[53:0];

assign trunc_ln93_72_fu_1135_p1 = shl_ln93_1_fu_889_p2[56:0];

assign trunc_ln93_73_fu_1145_p1 = shl_ln93_1_fu_889_p2[59:0];

assign trunc_ln93_74_fu_1155_p1 = shl_ln93_1_fu_889_p2[62:0];

assign trunc_ln93_75_fu_1165_p1 = shl_ln93_1_fu_889_p2[65:0];

assign trunc_ln93_76_fu_1175_p1 = shl_ln93_1_fu_889_p2[68:0];

assign trunc_ln93_77_fu_1185_p1 = shl_ln93_1_fu_889_p2[71:0];

assign trunc_ln93_78_fu_1195_p1 = shl_ln93_1_fu_889_p2[74:0];

assign trunc_ln93_79_fu_1205_p1 = shl_ln93_1_fu_889_p2[77:0];

assign trunc_ln93_7_fu_1453_p1 = shl_ln93_reg_2192[23:0];

assign trunc_ln93_80_fu_1215_p1 = shl_ln93_1_fu_889_p2[80:0];

assign trunc_ln93_8_fu_1456_p1 = shl_ln93_reg_2192[26:0];

assign trunc_ln93_9_fu_1459_p1 = shl_ln93_reg_2192[29:0];

assign trunc_ln93_fu_895_p1 = shl_ln93_fu_880_p2[2:0];

assign xor_ln85_fu_522_p2 = (icmp_ln86_reg_2089 ^ 1'd1);

assign xor_ln86_fu_619_p2 = (icmp_ln87_reg_2104 ^ 1'd1);

assign xor_ln93_10_fu_1043_p2 = (trunc_ln93_18_fu_911_p1 ^ 57'd126100789566373888);

assign xor_ln93_11_fu_1053_p2 = (trunc_ln93_17_fu_907_p1 ^ 54'd15762598695796736);

assign xor_ln93_12_fu_1483_p2 = (trunc_ln93_16_fu_1480_p1 ^ 51'd1970324836974592);

assign xor_ln93_13_fu_1492_p2 = (trunc_ln93_15_fu_1477_p1 ^ 48'd246290604621824);

assign xor_ln93_14_fu_1501_p2 = (trunc_ln93_14_fu_1474_p1 ^ 45'd30786325577728);

assign xor_ln93_15_fu_1510_p2 = (trunc_ln93_13_fu_1471_p1 ^ 42'd3848290697216);

assign xor_ln93_16_fu_1519_p2 = (trunc_ln93_12_fu_1468_p1 ^ 39'd481036337152);

assign xor_ln93_17_fu_1528_p2 = (trunc_ln93_11_fu_1465_p1 ^ 36'd60129542144);

assign xor_ln93_18_fu_1537_p2 = (trunc_ln93_10_fu_1462_p1 ^ 33'd7516192768);

assign xor_ln93_19_fu_1546_p2 = (trunc_ln93_9_fu_1459_p1 ^ 30'd939524096);

assign xor_ln93_1_fu_953_p2 = (trunc_ln93_fu_895_p1 ^ 3'd7);

assign xor_ln93_20_fu_1555_p2 = (trunc_ln93_8_fu_1456_p1 ^ 27'd117440512);

assign xor_ln93_21_fu_1564_p2 = (trunc_ln93_7_fu_1453_p1 ^ 24'd14680064);

assign xor_ln93_22_fu_1573_p2 = (trunc_ln93_6_fu_1450_p1 ^ 21'd1835008);

assign xor_ln93_23_fu_1582_p2 = (trunc_ln93_5_fu_1447_p1 ^ 18'd229376);

assign xor_ln93_24_fu_1591_p2 = (trunc_ln93_4_fu_1444_p1 ^ 15'd28672);

assign xor_ln93_25_fu_1600_p2 = (trunc_ln93_3_fu_1441_p1 ^ 12'd3584);

assign xor_ln93_26_fu_1063_p2 = (trunc_ln93_2_fu_903_p1 ^ 9'd448);

assign xor_ln93_27_fu_1073_p2 = (trunc_ln93_1_fu_899_p1 ^ 6'd56);

assign xor_ln93_2_fu_963_p2 = (trunc_ln93_26_fu_943_p1 ^ 81'd2115620184325601055735808);

assign xor_ln93_3_fu_973_p2 = (trunc_ln93_25_fu_939_p1 ^ 78'd264452523040700131966976);

assign xor_ln93_4_fu_983_p2 = (trunc_ln93_24_fu_935_p1 ^ 75'd33056565380087516495872);

assign xor_ln93_5_fu_993_p2 = (trunc_ln93_23_fu_931_p1 ^ 72'd4132070672510939561984);

assign xor_ln93_6_fu_1003_p2 = (trunc_ln93_22_fu_927_p1 ^ 69'd516508834063867445248);

assign xor_ln93_7_fu_1013_p2 = (trunc_ln93_21_fu_923_p1 ^ 66'd64563604257983430656);

assign xor_ln93_8_fu_1023_p2 = (trunc_ln93_20_fu_919_p1 ^ 63'd8070450532247928832);

assign xor_ln93_9_fu_1033_p2 = (trunc_ln93_19_fu_915_p1 ^ 60'd1008806316530991104);

assign xor_ln93_fu_947_p2 = (shl_ln93_fu_880_p2 ^ 84'd19342813113834066795298815);

assign zext_ln85_fu_739_p1 = select_ln85_4_fu_732_p3;

assign zext_ln87_fu_768_p1 = select_ln87_5_reg_2127;

assign zext_ln88_1_fu_792_p1 = select_ln87_reg_2120;

assign zext_ln88_fu_789_p1 = select_ln87_reg_2120;

assign zext_ln93_1_fu_886_p1 = buffer_load_reg_2164;

assign zext_ln93_2_fu_845_p1 = add_ln93_1_reg_2149_pp0_iter4_reg;

assign zext_ln93_3_fu_855_p1 = shl_ln93_2_fu_848_p3;

assign zext_ln93_4_fu_876_p1 = $unsigned(sext_ln93_fu_873_p1);

assign zext_ln93_fu_836_p1 = tmp_4_fu_830_p3;

endmodule //ATTN11_reorder_41_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_43 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        vq_sm_transpose_head1_din,
        vq_sm_transpose_head1_num_data_valid,
        vq_sm_transpose_head1_fifo_cap,
        vq_sm_transpose_head1_full_n,
        vq_sm_transpose_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [83:0] vq_sm_transpose_head1_din;
input  [9:0] vq_sm_transpose_head1_num_data_valid;
input  [9:0] vq_sm_transpose_head1_fifo_cap;
input   vq_sm_transpose_head1_full_n;
output   vq_sm_transpose_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream_read;
reg vq_sm_transpose_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buffer_ce0;
wire   [2:0] buffer_q0;
reg    buffer_ce1;
reg    buffer_we1;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
wire   [9:0] grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
wire   [2:0] grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready;
wire   [83:0] grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head1_din;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head1_write;
wire   [9:0] grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
wire   [83:0] grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
wire    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld;
reg    grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_97_p2;
wire    ap_CS_fsm_state3;
reg    grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [83:0] vec_o_0_fu_50;
reg   [3:0] tt_fu_46;
wire   [3:0] tt_4_fu_91_p2;
reg    ap_block_state1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg = 1'b0;
//#0 grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg = 1'b0;
//#0 tt_fu_46 = 4'd0;
end

ATTN11_reorder_37_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start),
    .ap_done(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done),
    .ap_idle(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle),
    .ap_ready(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(3'd0),
    .unpacked_stream_fifo_cap(3'd0),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read),
    .buffer_r_address1(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .buffer_r_ce1(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1),
    .buffer_r_we1(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1),
    .buffer_r_d1(grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start),
    .ap_done(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done),
    .ap_idle(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle),
    .ap_ready(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready),
    .vq_sm_transpose_head1_din(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head1_din),
    .vq_sm_transpose_head1_num_data_valid(10'd0),
    .vq_sm_transpose_head1_fifo_cap(10'd0),
    .vq_sm_transpose_head1_full_n(vq_sm_transpose_head1_full_n),
    .vq_sm_transpose_head1_write(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head1_write),
    .buffer_r_address0(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .buffer_r_ce0(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .vec_o_4_out_i(vec_o_0_fu_50),
    .vec_o_4_out_o(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o),
    .vec_o_4_out_o_ap_vld(grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready == 1'b1)) begin
            grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready == 1'b1)) begin
            grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        tt_fu_46 <= 4'd0;
    end else if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tt_fu_46 <= tt_4_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        vec_o_0_fu_50 <= grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_ce0 = grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_ce1 = grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_we1 = grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        unpacked_stream_read = grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vq_sm_transpose_head1_write = grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head1_write;
    end else begin
        vq_sm_transpose_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start = grp_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;

assign grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start = grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;

assign icmp_ln69_fu_97_p2 = ((tt_fu_46 == 4'd14) ? 1'b1 : 1'b0);

assign tt_4_fu_91_p2 = (tt_fu_46 + 4'd1);

assign vq_sm_transpose_head1_din = grp_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head1_din;

endmodule //ATTN11_reorder_43
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [2:0] buffer_r_d1;

reg ap_idle;
reg unpacked_stream_read;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_201_p2;
reg   [0:0] icmp_ln73_reg_466;
wire   [6:0] select_ln72_fu_269_p3;
reg   [6:0] select_ln72_reg_474;
wire   [0:0] and_ln72_fu_287_p2;
reg   [0:0] and_ln72_reg_479;
wire   [2:0] select_ln72_2_fu_293_p3;
reg   [2:0] select_ln72_2_reg_484;
wire   [6:0] add_ln73_fu_300_p2;
reg   [6:0] add_ln73_reg_489;
wire   [1:0] select_ln73_fu_311_p3;
reg   [1:0] select_ln73_reg_494;
wire   [9:0] add_ln78_fu_364_p2;
reg   [9:0] add_ln78_reg_500;
reg   [2:0] unpacked_stream_read_reg_505;
wire   [63:0] zext_ln78_fu_401_p1;
reg   [1:0] tip_fu_74;
wire   [1:0] add_ln74_fu_372_p2;
reg   [1:0] ap_sig_allocacmp_tip_load;
wire    ap_loop_init;
reg   [6:0] cit_fu_78;
wire   [6:0] select_ln73_3_fu_331_p3;
reg   [6:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_82;
wire   [8:0] select_ln73_4_fu_213_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] tp_tip_fu_86;
reg   [9:0] indvar_flatten12_fu_90;
wire   [9:0] add_ln72_2_fu_183_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [8:0] add_ln73_2_fu_207_p2;
wire   [0:0] icmp_ln74_fu_281_p2;
wire   [0:0] xor_ln72_fu_276_p2;
wire   [2:0] add_ln72_fu_263_p2;
wire   [0:0] or_ln73_fu_306_p2;
wire   [3:0] tmp_fu_336_p3;
wire   [3:0] zext_ln74_fu_347_p1;
wire   [3:0] empty_fu_350_p2;
wire   [9:0] tmp_7_fu_356_p3;
wire   [9:0] zext_ln74_3_fu_343_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 tip_fu_74 = 2'd0;
//#0 cit_fu_78 = 7'd0;
//#0 indvar_flatten_fu_82 = 9'd0;
//#0 tp_tip_fu_86 = 3'd0;
//#0 indvar_flatten12_fu_90 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cit_fu_78 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cit_fu_78 <= select_ln73_3_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_90 <= add_ln72_2_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_90 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= select_ln73_4_fu_213_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tip_fu_74 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            tip_fu_74 <= add_ln74_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tp_tip_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tp_tip_fu_86 <= select_ln72_2_fu_293_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln73_reg_489 <= add_ln73_fu_300_p2;
        and_ln72_reg_479 <= and_ln72_fu_287_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln73_reg_466 <= icmp_ln73_fu_201_p2;
        select_ln72_2_reg_484 <= select_ln72_2_fu_293_p3;
        select_ln72_reg_474 <= select_ln72_fu_269_p3;
        select_ln73_reg_494 <= select_ln73_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln78_reg_500 <= add_ln78_fu_364_p2;
        unpacked_stream_read_reg_505 <= unpacked_stream_dout;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_cit_load = select_ln73_3_fu_331_p3;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_tip_load = add_ln74_fu_372_p2;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_blk_n = unpacked_stream_empty_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_read = 1'b1;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_2_fu_183_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln72_fu_263_p2 = (tp_tip_fu_86 + 3'd1);

assign add_ln73_2_fu_207_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln73_fu_300_p2 = (select_ln72_fu_269_p3 + 7'd1);

assign add_ln74_fu_372_p2 = (select_ln73_reg_494 + 2'd1);

assign add_ln78_fu_364_p2 = (tmp_7_fu_356_p3 + zext_ln74_3_fu_343_p1);

assign and_ln72_fu_287_p2 = (xor_ln72_fu_276_p2 & icmp_ln74_fu_281_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (unpacked_stream_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address1 = zext_ln78_fu_401_p1;

assign buffer_r_d1 = unpacked_stream_read_reg_505;

assign empty_fu_350_p2 = (tmp_fu_336_p3 + zext_ln74_fu_347_p1);

assign icmp_ln72_fu_189_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_201_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_281_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln73_fu_306_p2 = (icmp_ln73_reg_466 | and_ln72_fu_287_p2);

assign select_ln72_2_fu_293_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? add_ln72_fu_263_p2 : tp_tip_fu_86);

assign select_ln72_fu_269_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_cit_load);

assign select_ln73_3_fu_331_p3 = ((and_ln72_reg_479[0:0] == 1'b1) ? add_ln73_reg_489 : select_ln72_reg_474);

assign select_ln73_4_fu_213_p3 = ((icmp_ln73_fu_201_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_2_fu_207_p2);

assign select_ln73_fu_311_p3 = ((or_ln73_fu_306_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign tmp_7_fu_356_p3 = {{empty_fu_350_p2}, {6'd0}};

assign tmp_fu_336_p3 = {{select_ln72_2_reg_484}, {1'd0}};

assign xor_ln72_fu_276_p2 = (icmp_ln73_reg_466 ^ 1'd1);

assign zext_ln74_3_fu_343_p1 = select_ln73_3_fu_331_p3;

assign zext_ln74_fu_347_p1 = select_ln73_reg_494;

assign zext_ln78_fu_401_p1 = add_ln78_reg_500;

endmodule //ATTN11_reorder_43_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_sm_transpose_head1_din,
        vq_sm_transpose_head1_num_data_valid,
        vq_sm_transpose_head1_fifo_cap,
        vq_sm_transpose_head1_full_n,
        vq_sm_transpose_head1_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        vec_o_4_out_i,
        vec_o_4_out_o,
        vec_o_4_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] vq_sm_transpose_head1_din;
input  [9:0] vq_sm_transpose_head1_num_data_valid;
input  [9:0] vq_sm_transpose_head1_fifo_cap;
input   vq_sm_transpose_head1_full_n;
output   vq_sm_transpose_head1_write;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [2:0] buffer_r_q0;
input  [83:0] vec_o_4_out_i;
output  [83:0] vec_o_4_out_o;
output   vec_o_4_out_o_ap_vld;

reg ap_idle;
reg vq_sm_transpose_head1_write;
reg buffer_r_ce0;
reg[83:0] vec_o_4_out_o;
reg vec_o_4_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg   [0:0] and_ln99_reg_2169;
reg   [0:0] and_ln99_reg_2169_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_466_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_sm_transpose_head1_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_2095;
wire   [0:0] icmp_ln86_fu_472_p2;
reg   [0:0] icmp_ln86_reg_2099;
reg   [0:0] icmp_ln86_reg_2099_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_2099_pp0_iter2_reg;
wire   [0:0] xor_ln85_fu_522_p2;
reg   [0:0] xor_ln85_reg_2109;
wire   [0:0] icmp_ln87_fu_527_p2;
reg   [0:0] icmp_ln87_reg_2114;
wire   [0:0] and_ln85_2_fu_533_p2;
reg   [0:0] and_ln85_2_reg_2119;
wire   [0:0] or_ln86_fu_539_p2;
reg   [0:0] or_ln86_reg_2125;
wire   [2:0] select_ln87_fu_658_p3;
reg   [2:0] select_ln87_reg_2130;
wire   [2:0] select_ln87_3_fu_666_p3;
reg   [2:0] select_ln87_3_reg_2136;
wire   [3:0] empty_1070_fu_674_p1;
reg   [3:0] empty_1070_reg_2143;
wire   [1:0] trunc_ln96_fu_678_p1;
reg   [1:0] trunc_ln96_reg_2148;
wire   [3:0] empty_1071_fu_778_p2;
reg   [3:0] empty_1071_reg_2153;
wire   [5:0] add_ln93_fu_792_p2;
reg   [5:0] add_ln93_reg_2158;
wire  signed [5:0] add_ln96_fu_815_p2;
reg  signed [5:0] add_ln96_reg_2163;
reg  signed [5:0] add_ln96_reg_2163_pp0_iter4_reg;
wire   [0:0] and_ln99_fu_826_p2;
reg   [0:0] and_ln99_reg_2169_pp0_iter4_reg;
reg   [0:0] and_ln99_reg_2169_pp0_iter5_reg;
reg   [2:0] buffer_load_reg_2178;
wire   [7:0] sub_ln96_2_fu_869_p2;
reg   [7:0] sub_ln96_2_reg_2183;
reg   [83:0] vec_o_4_out_load_reg_2188;
wire   [83:0] shl_ln96_fu_890_p2;
reg   [83:0] shl_ln96_reg_2206;
wire   [83:0] shl_ln96_2_fu_899_p2;
reg   [83:0] shl_ln96_2_reg_2224;
wire   [2:0] and_ln96_2_fu_1099_p2;
reg   [2:0] and_ln96_2_reg_2242;
wire   [2:0] trunc_ln96_217_fu_1105_p1;
reg   [2:0] trunc_ln96_217_reg_2247;
reg   [2:0] trunc_ln4_reg_2252;
reg   [2:0] trunc_ln100_s_reg_2257;
reg   [2:0] trunc_ln100_40_reg_2262;
reg   [2:0] trunc_ln100_41_reg_2267;
reg   [2:0] trunc_ln100_42_reg_2272;
reg   [2:0] trunc_ln100_43_reg_2277;
reg   [2:0] trunc_ln100_44_reg_2282;
reg   [2:0] trunc_ln100_45_reg_2287;
reg   [2:0] trunc_ln100_46_reg_2292;
reg   [2:0] trunc_ln100_47_reg_2297;
reg   [2:0] trunc_ln100_48_reg_2302;
reg   [2:0] trunc_ln100_49_reg_2307;
reg   [2:0] trunc_ln100_50_reg_2312;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln93_fu_850_p1;
wire   [83:0] or_ln96_fu_1229_p2;
reg   [2:0] cop_fu_316;
wire   [2:0] add_ln88_fu_682_p2;
wire    ap_loop_init;
reg   [2:0] ATTN11_1_fu_320;
reg   [5:0] indvar_flatten19_fu_324;
wire   [5:0] select_ln87_4_fu_550_p3;
reg   [4:0] cot_fu_328;
wire   [4:0] select_ln86_3_fu_635_p3;
reg   [9:0] indvar_flatten34_fu_332;
wire   [9:0] select_ln86_4_fu_484_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [1:0] tp_ATTN11_fu_336;
wire   [1:0] select_ln85_3_fu_736_p3;
reg   [9:0] indvar_flatten59_fu_340;
wire   [9:0] add_ln85_2_fu_460_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln86_2_fu_478_p2;
wire   [5:0] add_ln87_2_fu_544_p2;
wire   [0:0] icmp_ln88_fu_595_p2;
wire   [4:0] select_ln85_fu_588_p3;
wire   [0:0] xor_ln86_fu_619_p2;
wire   [0:0] and_ln85_fu_601_p2;
wire   [0:0] or_ln86_2_fu_624_p2;
wire   [4:0] add_ln86_fu_606_p2;
wire   [2:0] select_ln86_fu_612_p3;
wire   [0:0] and_ln86_fu_629_p2;
wire   [0:0] or_ln87_fu_648_p2;
wire   [0:0] or_ln87_3_fu_653_p2;
wire   [2:0] add_ln87_fu_642_p2;
wire   [1:0] add_ln85_fu_730_p2;
wire   [0:0] empty_fu_747_p1;
wire   [3:0] p_shl_fu_751_p3;
wire   [3:0] zext_ln85_fu_743_p1;
wire   [3:0] empty_1069_fu_759_p2;
wire   [3:0] zext_ln87_2_fu_775_p1;
wire   [5:0] tmp_s_fu_765_p3;
wire   [5:0] zext_ln88_fu_789_p1;
wire   [4:0] shl_ln96_4_fu_798_p3;
wire   [5:0] zext_ln96_fu_805_p1;
wire   [5:0] sub_ln96_fu_809_p2;
wire   [5:0] zext_ln87_fu_772_p1;
wire   [0:0] cmp69_fu_784_p2;
wire   [0:0] icmp_ln99_fu_821_p2;
wire   [9:0] tmp_2_fu_844_p3;
wire   [7:0] shl_ln96_5_fu_862_p3;
wire  signed [7:0] sext_ln96_fu_859_p1;
wire  signed [63:0] sext_ln96_3_fu_883_p1;
wire   [83:0] zext_ln96_4_fu_886_p1;
wire   [83:0] zext_ln96_2_fu_896_p1;
wire   [2:0] trunc_ln96_163_fu_905_p1;
wire   [80:0] trunc_ln96_189_fu_953_p1;
wire   [77:0] trunc_ln96_188_fu_949_p1;
wire   [74:0] trunc_ln96_187_fu_945_p1;
wire   [71:0] trunc_ln96_186_fu_941_p1;
wire   [68:0] trunc_ln96_185_fu_937_p1;
wire   [65:0] trunc_ln96_184_fu_933_p1;
wire   [62:0] trunc_ln96_183_fu_929_p1;
wire   [59:0] trunc_ln96_182_fu_925_p1;
wire   [56:0] trunc_ln96_181_fu_921_p1;
wire   [53:0] trunc_ln96_180_fu_917_p1;
wire   [8:0] trunc_ln96_165_fu_913_p1;
wire   [5:0] trunc_ln96_164_fu_909_p1;
wire   [83:0] xor_ln96_fu_957_p2;
wire   [2:0] trunc_ln96_190_fu_969_p1;
wire   [2:0] xor_ln96_2_fu_963_p2;
wire   [5:0] trunc_ln96_216_fu_1089_p1;
wire   [5:0] xor_ln96_53_fu_1083_p2;
wire   [8:0] trunc_ln96_215_fu_1079_p1;
wire   [8:0] xor_ln96_52_fu_1073_p2;
wire   [53:0] trunc_ln96_200_fu_1069_p1;
wire   [53:0] xor_ln96_37_fu_1063_p2;
wire   [56:0] trunc_ln96_199_fu_1059_p1;
wire   [56:0] xor_ln96_36_fu_1053_p2;
wire   [59:0] trunc_ln96_198_fu_1049_p1;
wire   [59:0] xor_ln96_35_fu_1043_p2;
wire   [62:0] trunc_ln96_197_fu_1039_p1;
wire   [62:0] xor_ln96_34_fu_1033_p2;
wire   [65:0] trunc_ln96_196_fu_1029_p1;
wire   [65:0] xor_ln96_33_fu_1023_p2;
wire   [68:0] trunc_ln96_195_fu_1019_p1;
wire   [68:0] xor_ln96_32_fu_1013_p2;
wire   [71:0] trunc_ln96_194_fu_1009_p1;
wire   [71:0] xor_ln96_31_fu_1003_p2;
wire   [74:0] trunc_ln96_193_fu_999_p1;
wire   [74:0] xor_ln96_30_fu_993_p2;
wire   [77:0] trunc_ln96_192_fu_989_p1;
wire   [77:0] xor_ln96_29_fu_983_p2;
wire   [80:0] trunc_ln96_191_fu_979_p1;
wire   [80:0] xor_ln96_28_fu_973_p2;
wire   [83:0] and_ln96_fu_1093_p2;
wire   [80:0] trunc_ln96_243_fu_1225_p1;
wire   [80:0] and_ln96_53_fu_1219_p2;
wire   [77:0] trunc_ln96_242_fu_1215_p1;
wire   [77:0] and_ln96_52_fu_1209_p2;
wire   [74:0] trunc_ln96_241_fu_1205_p1;
wire   [74:0] and_ln96_51_fu_1199_p2;
wire   [71:0] trunc_ln96_240_fu_1195_p1;
wire   [71:0] and_ln96_50_fu_1189_p2;
wire   [68:0] trunc_ln96_239_fu_1185_p1;
wire   [68:0] and_ln96_49_fu_1179_p2;
wire   [65:0] trunc_ln96_238_fu_1175_p1;
wire   [65:0] and_ln96_48_fu_1169_p2;
wire   [62:0] trunc_ln96_237_fu_1165_p1;
wire   [62:0] and_ln96_47_fu_1159_p2;
wire   [59:0] trunc_ln96_236_fu_1155_p1;
wire   [59:0] and_ln96_46_fu_1149_p2;
wire   [56:0] trunc_ln96_235_fu_1145_p1;
wire   [56:0] and_ln96_45_fu_1139_p2;
wire   [53:0] trunc_ln96_234_fu_1135_p1;
wire   [53:0] and_ln96_44_fu_1129_p2;
wire   [8:0] trunc_ln96_219_fu_1125_p1;
wire   [8:0] and_ln96_29_fu_1119_p2;
wire   [5:0] trunc_ln96_218_fu_1115_p1;
wire   [5:0] and_ln96_28_fu_1109_p2;
wire   [5:0] or_ln99_50_fu_1301_p2;
wire   [8:0] or_ln99_49_fu_1295_p2;
wire   [53:0] or_ln99_34_fu_1289_p2;
wire   [56:0] or_ln99_33_fu_1283_p2;
wire   [59:0] or_ln99_32_fu_1277_p2;
wire   [62:0] or_ln99_31_fu_1271_p2;
wire   [65:0] or_ln99_30_fu_1265_p2;
wire   [68:0] or_ln99_29_fu_1259_p2;
wire   [71:0] or_ln99_28_fu_1253_p2;
wire   [74:0] or_ln99_27_fu_1247_p2;
wire   [77:0] or_ln99_26_fu_1241_p2;
wire   [80:0] or_ln99_fu_1235_p2;
wire   [50:0] trunc_ln96_179_fu_1490_p1;
wire   [47:0] trunc_ln96_178_fu_1487_p1;
wire   [44:0] trunc_ln96_177_fu_1484_p1;
wire   [41:0] trunc_ln96_176_fu_1481_p1;
wire   [38:0] trunc_ln96_175_fu_1478_p1;
wire   [35:0] trunc_ln96_174_fu_1475_p1;
wire   [32:0] trunc_ln96_173_fu_1472_p1;
wire   [29:0] trunc_ln96_172_fu_1469_p1;
wire   [26:0] trunc_ln96_171_fu_1466_p1;
wire   [23:0] trunc_ln96_170_fu_1463_p1;
wire   [20:0] trunc_ln96_169_fu_1460_p1;
wire   [17:0] trunc_ln96_168_fu_1457_p1;
wire   [14:0] trunc_ln96_167_fu_1454_p1;
wire   [11:0] trunc_ln96_166_fu_1451_p1;
wire   [11:0] trunc_ln96_214_fu_1616_p1;
wire   [11:0] xor_ln96_51_fu_1610_p2;
wire   [14:0] trunc_ln96_213_fu_1607_p1;
wire   [14:0] xor_ln96_50_fu_1601_p2;
wire   [17:0] trunc_ln96_212_fu_1598_p1;
wire   [17:0] xor_ln96_49_fu_1592_p2;
wire   [20:0] trunc_ln96_211_fu_1589_p1;
wire   [20:0] xor_ln96_48_fu_1583_p2;
wire   [23:0] trunc_ln96_210_fu_1580_p1;
wire   [23:0] xor_ln96_47_fu_1574_p2;
wire   [26:0] trunc_ln96_209_fu_1571_p1;
wire   [26:0] xor_ln96_46_fu_1565_p2;
wire   [29:0] trunc_ln96_208_fu_1562_p1;
wire   [29:0] xor_ln96_45_fu_1556_p2;
wire   [32:0] trunc_ln96_207_fu_1553_p1;
wire   [32:0] xor_ln96_44_fu_1547_p2;
wire   [35:0] trunc_ln96_206_fu_1544_p1;
wire   [35:0] xor_ln96_43_fu_1538_p2;
wire   [38:0] trunc_ln96_205_fu_1535_p1;
wire   [38:0] xor_ln96_42_fu_1529_p2;
wire   [41:0] trunc_ln96_204_fu_1526_p1;
wire   [41:0] xor_ln96_41_fu_1520_p2;
wire   [44:0] trunc_ln96_203_fu_1517_p1;
wire   [44:0] xor_ln96_40_fu_1511_p2;
wire   [47:0] trunc_ln96_202_fu_1508_p1;
wire   [47:0] xor_ln96_39_fu_1502_p2;
wire   [50:0] trunc_ln96_201_fu_1499_p1;
wire   [50:0] xor_ln96_38_fu_1493_p2;
wire   [50:0] trunc_ln96_233_fu_1742_p1;
wire   [50:0] and_ln96_43_fu_1736_p2;
wire   [47:0] trunc_ln96_232_fu_1733_p1;
wire   [47:0] and_ln96_42_fu_1727_p2;
wire   [44:0] trunc_ln96_231_fu_1724_p1;
wire   [44:0] and_ln96_41_fu_1718_p2;
wire   [41:0] trunc_ln96_230_fu_1715_p1;
wire   [41:0] and_ln96_40_fu_1709_p2;
wire   [38:0] trunc_ln96_229_fu_1706_p1;
wire   [38:0] and_ln96_39_fu_1700_p2;
wire   [35:0] trunc_ln96_228_fu_1697_p1;
wire   [35:0] and_ln96_38_fu_1691_p2;
wire   [32:0] trunc_ln96_227_fu_1688_p1;
wire   [32:0] and_ln96_37_fu_1682_p2;
wire   [29:0] trunc_ln96_226_fu_1679_p1;
wire   [29:0] and_ln96_36_fu_1673_p2;
wire   [26:0] trunc_ln96_225_fu_1670_p1;
wire   [26:0] and_ln96_35_fu_1664_p2;
wire   [23:0] trunc_ln96_224_fu_1661_p1;
wire   [23:0] and_ln96_34_fu_1655_p2;
wire   [20:0] trunc_ln96_223_fu_1652_p1;
wire   [20:0] and_ln96_33_fu_1646_p2;
wire   [17:0] trunc_ln96_222_fu_1643_p1;
wire   [17:0] and_ln96_32_fu_1637_p2;
wire   [14:0] trunc_ln96_221_fu_1634_p1;
wire   [14:0] and_ln96_31_fu_1628_p2;
wire   [11:0] trunc_ln96_220_fu_1625_p1;
wire   [11:0] and_ln96_30_fu_1619_p2;
wire   [11:0] or_ln99_48_fu_1823_p2;
wire   [14:0] or_ln99_47_fu_1817_p2;
wire   [17:0] or_ln99_46_fu_1811_p2;
wire   [20:0] or_ln99_45_fu_1805_p2;
wire   [23:0] or_ln99_44_fu_1799_p2;
wire   [26:0] or_ln99_43_fu_1793_p2;
wire   [29:0] or_ln99_42_fu_1787_p2;
wire   [32:0] or_ln99_41_fu_1781_p2;
wire   [35:0] or_ln99_40_fu_1775_p2;
wire   [38:0] or_ln99_39_fu_1769_p2;
wire   [41:0] or_ln99_38_fu_1763_p2;
wire   [44:0] or_ln99_37_fu_1757_p2;
wire   [47:0] or_ln99_36_fu_1751_p2;
wire   [50:0] or_ln99_35_fu_1745_p2;
wire   [2:0] trunc_ln100_39_fu_1959_p4;
wire   [2:0] trunc_ln100_38_fu_1949_p4;
wire   [2:0] trunc_ln100_37_fu_1939_p4;
wire   [2:0] trunc_ln100_36_fu_1929_p4;
wire   [2:0] trunc_ln100_35_fu_1919_p4;
wire   [2:0] trunc_ln100_34_fu_1909_p4;
wire   [2:0] trunc_ln100_33_fu_1899_p4;
wire   [2:0] trunc_ln100_32_fu_1889_p4;
wire   [2:0] trunc_ln100_31_fu_1879_p4;
wire   [2:0] trunc_ln100_30_fu_1869_p4;
wire   [2:0] trunc_ln100_29_fu_1859_p4;
wire   [2:0] trunc_ln100_28_fu_1849_p4;
wire   [2:0] trunc_ln100_27_fu_1839_p4;
wire   [2:0] trunc_ln100_26_fu_1829_p4;
wire   [2:0] or_ln100_fu_1969_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 cop_fu_316 = 3'd0;
//#0 ATTN11_1_fu_320 = 3'd0;
//#0 indvar_flatten19_fu_324 = 6'd0;
//#0 cot_fu_328 = 5'd0;
//#0 indvar_flatten34_fu_332 = 10'd0;
//#0 tp_ATTN11_fu_336 = 2'd0;
//#0 indvar_flatten59_fu_340 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cop_fu_316 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cop_fu_316 <= add_ln88_fu_682_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cot_fu_328 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cot_fu_328 <= select_ln86_3_fu_635_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_324 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln85_reg_2095 == 1'd0))) begin
            indvar_flatten19_fu_324 <= select_ln87_4_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_332 <= select_ln86_4_fu_484_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_332 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_340 <= add_ln85_2_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_340 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ATTN11_1_fu_320 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ATTN11_1_fu_320 <= select_ln87_3_fu_666_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tp_ATTN11_fu_336 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tp_ATTN11_fu_336 <= select_ln85_3_fu_736_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln93_reg_2158 <= add_ln93_fu_792_p2;
        add_ln96_reg_2163 <= add_ln96_fu_815_p2;
        add_ln96_reg_2163_pp0_iter4_reg <= add_ln96_reg_2163;
        and_ln96_2_reg_2242 <= and_ln96_2_fu_1099_p2;
        and_ln99_reg_2169 <= and_ln99_fu_826_p2;
        and_ln99_reg_2169_pp0_iter4_reg <= and_ln99_reg_2169;
        and_ln99_reg_2169_pp0_iter5_reg <= and_ln99_reg_2169_pp0_iter4_reg;
        and_ln99_reg_2169_pp0_iter6_reg <= and_ln99_reg_2169_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        buffer_load_reg_2178 <= buffer_r_q0;
        empty_1070_reg_2143 <= empty_1070_fu_674_p1;
        empty_1071_reg_2153 <= empty_1071_fu_778_p2;
        icmp_ln86_reg_2099_pp0_iter2_reg <= icmp_ln86_reg_2099_pp0_iter1_reg;
        select_ln87_3_reg_2136 <= select_ln87_3_fu_666_p3;
        select_ln87_reg_2130 <= select_ln87_fu_658_p3;
        shl_ln96_2_reg_2224 <= shl_ln96_2_fu_899_p2;
        shl_ln96_reg_2206 <= shl_ln96_fu_890_p2;
        sub_ln96_2_reg_2183 <= sub_ln96_2_fu_869_p2;
        trunc_ln100_40_reg_2262 <= {{or_ln99_34_fu_1289_p2[53:51]}};
        trunc_ln100_41_reg_2267 <= {{or_ln99_33_fu_1283_p2[56:54]}};
        trunc_ln100_42_reg_2272 <= {{or_ln99_32_fu_1277_p2[59:57]}};
        trunc_ln100_43_reg_2277 <= {{or_ln99_31_fu_1271_p2[62:60]}};
        trunc_ln100_44_reg_2282 <= {{or_ln99_30_fu_1265_p2[65:63]}};
        trunc_ln100_45_reg_2287 <= {{or_ln99_29_fu_1259_p2[68:66]}};
        trunc_ln100_46_reg_2292 <= {{or_ln99_28_fu_1253_p2[71:69]}};
        trunc_ln100_47_reg_2297 <= {{or_ln99_27_fu_1247_p2[74:72]}};
        trunc_ln100_48_reg_2302 <= {{or_ln99_26_fu_1241_p2[77:75]}};
        trunc_ln100_49_reg_2307 <= {{or_ln99_fu_1235_p2[80:78]}};
        trunc_ln100_50_reg_2312 <= {{or_ln96_fu_1229_p2[83:81]}};
        trunc_ln100_s_reg_2257 <= {{or_ln99_49_fu_1295_p2[8:6]}};
        trunc_ln4_reg_2252 <= {{or_ln99_50_fu_1301_p2[5:3]}};
        trunc_ln96_217_reg_2247 <= trunc_ln96_217_fu_1105_p1;
        trunc_ln96_reg_2148 <= trunc_ln96_fu_678_p1;
        vec_o_4_out_load_reg_2188 <= vec_o_4_out_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_2_reg_2119 <= and_ln85_2_fu_533_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln85_reg_2095 <= icmp_ln85_fu_466_p2;
        icmp_ln86_reg_2099 <= icmp_ln86_fu_472_p2;
        icmp_ln86_reg_2099_pp0_iter1_reg <= icmp_ln86_reg_2099;
        icmp_ln87_reg_2114 <= icmp_ln87_fu_527_p2;
        or_ln86_reg_2125 <= or_ln86_fu_539_p2;
        xor_ln85_reg_2109 <= xor_ln85_fu_522_p2;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_466_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln85_reg_2095 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_332;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_340;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o = or_ln96_fu_1229_p2;
    end else begin
        vec_o_4_out_o = vec_o_4_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o_ap_vld = 1'b1;
    end else begin
        vec_o_4_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        vq_sm_transpose_head1_blk_n = vq_sm_transpose_head1_full_n;
    end else begin
        vq_sm_transpose_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        vq_sm_transpose_head1_write = 1'b1;
    end else begin
        vq_sm_transpose_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_2_fu_460_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 10'd1);

assign add_ln85_fu_730_p2 = (tp_ATTN11_fu_336 + 2'd1);

assign add_ln86_2_fu_478_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 10'd1);

assign add_ln86_fu_606_p2 = (select_ln85_fu_588_p3 + 5'd1);

assign add_ln87_2_fu_544_p2 = (indvar_flatten19_fu_324 + 6'd1);

assign add_ln87_fu_642_p2 = (select_ln86_fu_612_p3 + 3'd1);

assign add_ln88_fu_682_p2 = (select_ln87_fu_658_p3 + 3'd1);

assign add_ln93_fu_792_p2 = (tmp_s_fu_765_p3 + zext_ln88_fu_789_p1);

assign add_ln96_fu_815_p2 = (sub_ln96_fu_809_p2 + zext_ln87_fu_772_p1);

assign and_ln85_2_fu_533_p2 = (xor_ln85_fu_522_p2 & icmp_ln87_fu_527_p2);

assign and_ln85_fu_601_p2 = (xor_ln85_reg_2109 & icmp_ln88_fu_595_p2);

assign and_ln86_fu_629_p2 = (or_ln86_2_fu_624_p2 & and_ln85_fu_601_p2);

assign and_ln96_28_fu_1109_p2 = (xor_ln96_53_fu_1083_p2 & trunc_ln96_216_fu_1089_p1);

assign and_ln96_29_fu_1119_p2 = (xor_ln96_52_fu_1073_p2 & trunc_ln96_215_fu_1079_p1);

assign and_ln96_2_fu_1099_p2 = (xor_ln96_2_fu_963_p2 & trunc_ln96_190_fu_969_p1);

assign and_ln96_30_fu_1619_p2 = (xor_ln96_51_fu_1610_p2 & trunc_ln96_214_fu_1616_p1);

assign and_ln96_31_fu_1628_p2 = (xor_ln96_50_fu_1601_p2 & trunc_ln96_213_fu_1607_p1);

assign and_ln96_32_fu_1637_p2 = (xor_ln96_49_fu_1592_p2 & trunc_ln96_212_fu_1598_p1);

assign and_ln96_33_fu_1646_p2 = (xor_ln96_48_fu_1583_p2 & trunc_ln96_211_fu_1589_p1);

assign and_ln96_34_fu_1655_p2 = (xor_ln96_47_fu_1574_p2 & trunc_ln96_210_fu_1580_p1);

assign and_ln96_35_fu_1664_p2 = (xor_ln96_46_fu_1565_p2 & trunc_ln96_209_fu_1571_p1);

assign and_ln96_36_fu_1673_p2 = (xor_ln96_45_fu_1556_p2 & trunc_ln96_208_fu_1562_p1);

assign and_ln96_37_fu_1682_p2 = (xor_ln96_44_fu_1547_p2 & trunc_ln96_207_fu_1553_p1);

assign and_ln96_38_fu_1691_p2 = (xor_ln96_43_fu_1538_p2 & trunc_ln96_206_fu_1544_p1);

assign and_ln96_39_fu_1700_p2 = (xor_ln96_42_fu_1529_p2 & trunc_ln96_205_fu_1535_p1);

assign and_ln96_40_fu_1709_p2 = (xor_ln96_41_fu_1520_p2 & trunc_ln96_204_fu_1526_p1);

assign and_ln96_41_fu_1718_p2 = (xor_ln96_40_fu_1511_p2 & trunc_ln96_203_fu_1517_p1);

assign and_ln96_42_fu_1727_p2 = (xor_ln96_39_fu_1502_p2 & trunc_ln96_202_fu_1508_p1);

assign and_ln96_43_fu_1736_p2 = (xor_ln96_38_fu_1493_p2 & trunc_ln96_201_fu_1499_p1);

assign and_ln96_44_fu_1129_p2 = (xor_ln96_37_fu_1063_p2 & trunc_ln96_200_fu_1069_p1);

assign and_ln96_45_fu_1139_p2 = (xor_ln96_36_fu_1053_p2 & trunc_ln96_199_fu_1059_p1);

assign and_ln96_46_fu_1149_p2 = (xor_ln96_35_fu_1043_p2 & trunc_ln96_198_fu_1049_p1);

assign and_ln96_47_fu_1159_p2 = (xor_ln96_34_fu_1033_p2 & trunc_ln96_197_fu_1039_p1);

assign and_ln96_48_fu_1169_p2 = (xor_ln96_33_fu_1023_p2 & trunc_ln96_196_fu_1029_p1);

assign and_ln96_49_fu_1179_p2 = (xor_ln96_32_fu_1013_p2 & trunc_ln96_195_fu_1019_p1);

assign and_ln96_50_fu_1189_p2 = (xor_ln96_31_fu_1003_p2 & trunc_ln96_194_fu_1009_p1);

assign and_ln96_51_fu_1199_p2 = (xor_ln96_30_fu_993_p2 & trunc_ln96_193_fu_999_p1);

assign and_ln96_52_fu_1209_p2 = (xor_ln96_29_fu_983_p2 & trunc_ln96_192_fu_989_p1);

assign and_ln96_53_fu_1219_p2 = (xor_ln96_28_fu_973_p2 & trunc_ln96_191_fu_979_p1);

assign and_ln96_fu_1093_p2 = (xor_ln96_fu_957_p2 & vec_o_4_out_i);

assign and_ln99_fu_826_p2 = (icmp_ln99_fu_821_p2 & cmp69_fu_784_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (vq_sm_transpose_head1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address0 = zext_ln93_fu_850_p1;

assign cmp69_fu_784_p2 = ((select_ln87_3_reg_2136 == 3'd6) ? 1'b1 : 1'b0);

assign empty_1069_fu_759_p2 = (p_shl_fu_751_p3 - zext_ln85_fu_743_p1);

assign empty_1070_fu_674_p1 = select_ln86_3_fu_635_p3[3:0];

assign empty_1071_fu_778_p2 = (empty_1069_fu_759_p2 + zext_ln87_2_fu_775_p1);

assign empty_fu_747_p1 = select_ln85_3_fu_736_p3[0:0];

assign icmp_ln85_fu_466_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_472_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_527_p2 = ((indvar_flatten19_fu_324 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_595_p2 = ((cop_fu_316 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_821_p2 = ((select_ln87_reg_2130 == 3'd3) ? 1'b1 : 1'b0);

assign or_ln100_fu_1969_p2 = (trunc_ln96_217_reg_2247 | and_ln96_2_reg_2242);

assign or_ln86_2_fu_624_p2 = (xor_ln86_fu_619_p2 | icmp_ln86_reg_2099_pp0_iter1_reg);

assign or_ln86_fu_539_p2 = (icmp_ln86_reg_2099 | and_ln85_2_fu_533_p2);

assign or_ln87_3_fu_653_p2 = (or_ln87_fu_648_p2 | icmp_ln86_reg_2099_pp0_iter1_reg);

assign or_ln87_fu_648_p2 = (and_ln86_fu_629_p2 | and_ln85_2_reg_2119);

assign or_ln96_fu_1229_p2 = (shl_ln96_2_fu_899_p2 | and_ln96_fu_1093_p2);

assign or_ln99_26_fu_1241_p2 = (trunc_ln96_242_fu_1215_p1 | and_ln96_52_fu_1209_p2);

assign or_ln99_27_fu_1247_p2 = (trunc_ln96_241_fu_1205_p1 | and_ln96_51_fu_1199_p2);

assign or_ln99_28_fu_1253_p2 = (trunc_ln96_240_fu_1195_p1 | and_ln96_50_fu_1189_p2);

assign or_ln99_29_fu_1259_p2 = (trunc_ln96_239_fu_1185_p1 | and_ln96_49_fu_1179_p2);

assign or_ln99_30_fu_1265_p2 = (trunc_ln96_238_fu_1175_p1 | and_ln96_48_fu_1169_p2);

assign or_ln99_31_fu_1271_p2 = (trunc_ln96_237_fu_1165_p1 | and_ln96_47_fu_1159_p2);

assign or_ln99_32_fu_1277_p2 = (trunc_ln96_236_fu_1155_p1 | and_ln96_46_fu_1149_p2);

assign or_ln99_33_fu_1283_p2 = (trunc_ln96_235_fu_1145_p1 | and_ln96_45_fu_1139_p2);

assign or_ln99_34_fu_1289_p2 = (trunc_ln96_234_fu_1135_p1 | and_ln96_44_fu_1129_p2);

assign or_ln99_35_fu_1745_p2 = (trunc_ln96_233_fu_1742_p1 | and_ln96_43_fu_1736_p2);

assign or_ln99_36_fu_1751_p2 = (trunc_ln96_232_fu_1733_p1 | and_ln96_42_fu_1727_p2);

assign or_ln99_37_fu_1757_p2 = (trunc_ln96_231_fu_1724_p1 | and_ln96_41_fu_1718_p2);

assign or_ln99_38_fu_1763_p2 = (trunc_ln96_230_fu_1715_p1 | and_ln96_40_fu_1709_p2);

assign or_ln99_39_fu_1769_p2 = (trunc_ln96_229_fu_1706_p1 | and_ln96_39_fu_1700_p2);

assign or_ln99_40_fu_1775_p2 = (trunc_ln96_228_fu_1697_p1 | and_ln96_38_fu_1691_p2);

assign or_ln99_41_fu_1781_p2 = (trunc_ln96_227_fu_1688_p1 | and_ln96_37_fu_1682_p2);

assign or_ln99_42_fu_1787_p2 = (trunc_ln96_226_fu_1679_p1 | and_ln96_36_fu_1673_p2);

assign or_ln99_43_fu_1793_p2 = (trunc_ln96_225_fu_1670_p1 | and_ln96_35_fu_1664_p2);

assign or_ln99_44_fu_1799_p2 = (trunc_ln96_224_fu_1661_p1 | and_ln96_34_fu_1655_p2);

assign or_ln99_45_fu_1805_p2 = (trunc_ln96_223_fu_1652_p1 | and_ln96_33_fu_1646_p2);

assign or_ln99_46_fu_1811_p2 = (trunc_ln96_222_fu_1643_p1 | and_ln96_32_fu_1637_p2);

assign or_ln99_47_fu_1817_p2 = (trunc_ln96_221_fu_1634_p1 | and_ln96_31_fu_1628_p2);

assign or_ln99_48_fu_1823_p2 = (trunc_ln96_220_fu_1625_p1 | and_ln96_30_fu_1619_p2);

assign or_ln99_49_fu_1295_p2 = (trunc_ln96_219_fu_1125_p1 | and_ln96_29_fu_1119_p2);

assign or_ln99_50_fu_1301_p2 = (trunc_ln96_218_fu_1115_p1 | and_ln96_28_fu_1109_p2);

assign or_ln99_fu_1235_p2 = (trunc_ln96_243_fu_1225_p1 | and_ln96_53_fu_1219_p2);

assign p_shl_fu_751_p3 = {{empty_fu_747_p1}, {3'd0}};

assign select_ln85_3_fu_736_p3 = ((icmp_ln86_reg_2099_pp0_iter2_reg[0:0] == 1'b1) ? add_ln85_fu_730_p2 : tp_ATTN11_fu_336);

assign select_ln85_fu_588_p3 = ((icmp_ln86_reg_2099_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : cot_fu_328);

assign select_ln86_3_fu_635_p3 = ((and_ln85_2_reg_2119[0:0] == 1'b1) ? add_ln86_fu_606_p2 : select_ln85_fu_588_p3);

assign select_ln86_4_fu_484_p3 = ((icmp_ln86_fu_472_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_2_fu_478_p2);

assign select_ln86_fu_612_p3 = ((or_ln86_reg_2125[0:0] == 1'b1) ? 3'd0 : ATTN11_1_fu_320);

assign select_ln87_3_fu_666_p3 = ((and_ln86_fu_629_p2[0:0] == 1'b1) ? add_ln87_fu_642_p2 : select_ln86_fu_612_p3);

assign select_ln87_4_fu_550_p3 = ((or_ln86_fu_539_p2[0:0] == 1'b1) ? 6'd1 : add_ln87_2_fu_544_p2);

assign select_ln87_fu_658_p3 = ((or_ln87_3_fu_653_p2[0:0] == 1'b1) ? 3'd0 : cop_fu_316);

assign sext_ln96_3_fu_883_p1 = $signed(sub_ln96_2_reg_2183);

assign sext_ln96_fu_859_p1 = add_ln96_reg_2163_pp0_iter4_reg;

assign shl_ln96_2_fu_899_p2 = zext_ln96_2_fu_896_p1 << zext_ln96_4_fu_886_p1;

assign shl_ln96_4_fu_798_p3 = {{trunc_ln96_reg_2148}, {3'd0}};

assign shl_ln96_5_fu_862_p3 = {{add_ln96_reg_2163_pp0_iter4_reg}, {2'd0}};

assign shl_ln96_fu_890_p2 = 84'd7 << zext_ln96_4_fu_886_p1;

assign sub_ln96_2_fu_869_p2 = ($signed(shl_ln96_5_fu_862_p3) - $signed(sext_ln96_fu_859_p1));

assign sub_ln96_fu_809_p2 = (zext_ln96_fu_805_p1 - zext_ln88_fu_789_p1);

assign tmp_2_fu_844_p3 = {{empty_1071_reg_2153}, {add_ln93_reg_2158}};

assign tmp_s_fu_765_p3 = {{empty_1070_reg_2143}, {2'd0}};

assign trunc_ln100_26_fu_1829_p4 = {{or_ln99_48_fu_1823_p2[11:9]}};

assign trunc_ln100_27_fu_1839_p4 = {{or_ln99_47_fu_1817_p2[14:12]}};

assign trunc_ln100_28_fu_1849_p4 = {{or_ln99_46_fu_1811_p2[17:15]}};

assign trunc_ln100_29_fu_1859_p4 = {{or_ln99_45_fu_1805_p2[20:18]}};

assign trunc_ln100_30_fu_1869_p4 = {{or_ln99_44_fu_1799_p2[23:21]}};

assign trunc_ln100_31_fu_1879_p4 = {{or_ln99_43_fu_1793_p2[26:24]}};

assign trunc_ln100_32_fu_1889_p4 = {{or_ln99_42_fu_1787_p2[29:27]}};

assign trunc_ln100_33_fu_1899_p4 = {{or_ln99_41_fu_1781_p2[32:30]}};

assign trunc_ln100_34_fu_1909_p4 = {{or_ln99_40_fu_1775_p2[35:33]}};

assign trunc_ln100_35_fu_1919_p4 = {{or_ln99_39_fu_1769_p2[38:36]}};

assign trunc_ln100_36_fu_1929_p4 = {{or_ln99_38_fu_1763_p2[41:39]}};

assign trunc_ln100_37_fu_1939_p4 = {{or_ln99_37_fu_1757_p2[44:42]}};

assign trunc_ln100_38_fu_1949_p4 = {{or_ln99_36_fu_1751_p2[47:45]}};

assign trunc_ln100_39_fu_1959_p4 = {{or_ln99_35_fu_1745_p2[50:48]}};

assign trunc_ln96_163_fu_905_p1 = shl_ln96_fu_890_p2[2:0];

assign trunc_ln96_164_fu_909_p1 = shl_ln96_fu_890_p2[5:0];

assign trunc_ln96_165_fu_913_p1 = shl_ln96_fu_890_p2[8:0];

assign trunc_ln96_166_fu_1451_p1 = shl_ln96_reg_2206[11:0];

assign trunc_ln96_167_fu_1454_p1 = shl_ln96_reg_2206[14:0];

assign trunc_ln96_168_fu_1457_p1 = shl_ln96_reg_2206[17:0];

assign trunc_ln96_169_fu_1460_p1 = shl_ln96_reg_2206[20:0];

assign trunc_ln96_170_fu_1463_p1 = shl_ln96_reg_2206[23:0];

assign trunc_ln96_171_fu_1466_p1 = shl_ln96_reg_2206[26:0];

assign trunc_ln96_172_fu_1469_p1 = shl_ln96_reg_2206[29:0];

assign trunc_ln96_173_fu_1472_p1 = shl_ln96_reg_2206[32:0];

assign trunc_ln96_174_fu_1475_p1 = shl_ln96_reg_2206[35:0];

assign trunc_ln96_175_fu_1478_p1 = shl_ln96_reg_2206[38:0];

assign trunc_ln96_176_fu_1481_p1 = shl_ln96_reg_2206[41:0];

assign trunc_ln96_177_fu_1484_p1 = shl_ln96_reg_2206[44:0];

assign trunc_ln96_178_fu_1487_p1 = shl_ln96_reg_2206[47:0];

assign trunc_ln96_179_fu_1490_p1 = shl_ln96_reg_2206[50:0];

assign trunc_ln96_180_fu_917_p1 = shl_ln96_fu_890_p2[53:0];

assign trunc_ln96_181_fu_921_p1 = shl_ln96_fu_890_p2[56:0];

assign trunc_ln96_182_fu_925_p1 = shl_ln96_fu_890_p2[59:0];

assign trunc_ln96_183_fu_929_p1 = shl_ln96_fu_890_p2[62:0];

assign trunc_ln96_184_fu_933_p1 = shl_ln96_fu_890_p2[65:0];

assign trunc_ln96_185_fu_937_p1 = shl_ln96_fu_890_p2[68:0];

assign trunc_ln96_186_fu_941_p1 = shl_ln96_fu_890_p2[71:0];

assign trunc_ln96_187_fu_945_p1 = shl_ln96_fu_890_p2[74:0];

assign trunc_ln96_188_fu_949_p1 = shl_ln96_fu_890_p2[77:0];

assign trunc_ln96_189_fu_953_p1 = shl_ln96_fu_890_p2[80:0];

assign trunc_ln96_190_fu_969_p1 = vec_o_4_out_i[2:0];

assign trunc_ln96_191_fu_979_p1 = vec_o_4_out_i[80:0];

assign trunc_ln96_192_fu_989_p1 = vec_o_4_out_i[77:0];

assign trunc_ln96_193_fu_999_p1 = vec_o_4_out_i[74:0];

assign trunc_ln96_194_fu_1009_p1 = vec_o_4_out_i[71:0];

assign trunc_ln96_195_fu_1019_p1 = vec_o_4_out_i[68:0];

assign trunc_ln96_196_fu_1029_p1 = vec_o_4_out_i[65:0];

assign trunc_ln96_197_fu_1039_p1 = vec_o_4_out_i[62:0];

assign trunc_ln96_198_fu_1049_p1 = vec_o_4_out_i[59:0];

assign trunc_ln96_199_fu_1059_p1 = vec_o_4_out_i[56:0];

assign trunc_ln96_200_fu_1069_p1 = vec_o_4_out_i[53:0];

assign trunc_ln96_201_fu_1499_p1 = vec_o_4_out_load_reg_2188[50:0];

assign trunc_ln96_202_fu_1508_p1 = vec_o_4_out_load_reg_2188[47:0];

assign trunc_ln96_203_fu_1517_p1 = vec_o_4_out_load_reg_2188[44:0];

assign trunc_ln96_204_fu_1526_p1 = vec_o_4_out_load_reg_2188[41:0];

assign trunc_ln96_205_fu_1535_p1 = vec_o_4_out_load_reg_2188[38:0];

assign trunc_ln96_206_fu_1544_p1 = vec_o_4_out_load_reg_2188[35:0];

assign trunc_ln96_207_fu_1553_p1 = vec_o_4_out_load_reg_2188[32:0];

assign trunc_ln96_208_fu_1562_p1 = vec_o_4_out_load_reg_2188[29:0];

assign trunc_ln96_209_fu_1571_p1 = vec_o_4_out_load_reg_2188[26:0];

assign trunc_ln96_210_fu_1580_p1 = vec_o_4_out_load_reg_2188[23:0];

assign trunc_ln96_211_fu_1589_p1 = vec_o_4_out_load_reg_2188[20:0];

assign trunc_ln96_212_fu_1598_p1 = vec_o_4_out_load_reg_2188[17:0];

assign trunc_ln96_213_fu_1607_p1 = vec_o_4_out_load_reg_2188[14:0];

assign trunc_ln96_214_fu_1616_p1 = vec_o_4_out_load_reg_2188[11:0];

assign trunc_ln96_215_fu_1079_p1 = vec_o_4_out_i[8:0];

assign trunc_ln96_216_fu_1089_p1 = vec_o_4_out_i[5:0];

assign trunc_ln96_217_fu_1105_p1 = shl_ln96_2_fu_899_p2[2:0];

assign trunc_ln96_218_fu_1115_p1 = shl_ln96_2_fu_899_p2[5:0];

assign trunc_ln96_219_fu_1125_p1 = shl_ln96_2_fu_899_p2[8:0];

assign trunc_ln96_220_fu_1625_p1 = shl_ln96_2_reg_2224[11:0];

assign trunc_ln96_221_fu_1634_p1 = shl_ln96_2_reg_2224[14:0];

assign trunc_ln96_222_fu_1643_p1 = shl_ln96_2_reg_2224[17:0];

assign trunc_ln96_223_fu_1652_p1 = shl_ln96_2_reg_2224[20:0];

assign trunc_ln96_224_fu_1661_p1 = shl_ln96_2_reg_2224[23:0];

assign trunc_ln96_225_fu_1670_p1 = shl_ln96_2_reg_2224[26:0];

assign trunc_ln96_226_fu_1679_p1 = shl_ln96_2_reg_2224[29:0];

assign trunc_ln96_227_fu_1688_p1 = shl_ln96_2_reg_2224[32:0];

assign trunc_ln96_228_fu_1697_p1 = shl_ln96_2_reg_2224[35:0];

assign trunc_ln96_229_fu_1706_p1 = shl_ln96_2_reg_2224[38:0];

assign trunc_ln96_230_fu_1715_p1 = shl_ln96_2_reg_2224[41:0];

assign trunc_ln96_231_fu_1724_p1 = shl_ln96_2_reg_2224[44:0];

assign trunc_ln96_232_fu_1733_p1 = shl_ln96_2_reg_2224[47:0];

assign trunc_ln96_233_fu_1742_p1 = shl_ln96_2_reg_2224[50:0];

assign trunc_ln96_234_fu_1135_p1 = shl_ln96_2_fu_899_p2[53:0];

assign trunc_ln96_235_fu_1145_p1 = shl_ln96_2_fu_899_p2[56:0];

assign trunc_ln96_236_fu_1155_p1 = shl_ln96_2_fu_899_p2[59:0];

assign trunc_ln96_237_fu_1165_p1 = shl_ln96_2_fu_899_p2[62:0];

assign trunc_ln96_238_fu_1175_p1 = shl_ln96_2_fu_899_p2[65:0];

assign trunc_ln96_239_fu_1185_p1 = shl_ln96_2_fu_899_p2[68:0];

assign trunc_ln96_240_fu_1195_p1 = shl_ln96_2_fu_899_p2[71:0];

assign trunc_ln96_241_fu_1205_p1 = shl_ln96_2_fu_899_p2[74:0];

assign trunc_ln96_242_fu_1215_p1 = shl_ln96_2_fu_899_p2[77:0];

assign trunc_ln96_243_fu_1225_p1 = shl_ln96_2_fu_899_p2[80:0];

assign trunc_ln96_fu_678_p1 = select_ln87_fu_658_p3[1:0];

assign vq_sm_transpose_head1_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln100_50_reg_2312}, {trunc_ln100_49_reg_2307}}, {trunc_ln100_48_reg_2302}}, {trunc_ln100_47_reg_2297}}, {trunc_ln100_46_reg_2292}}, {trunc_ln100_45_reg_2287}}, {trunc_ln100_44_reg_2282}}, {trunc_ln100_43_reg_2277}}, {trunc_ln100_42_reg_2272}}, {trunc_ln100_41_reg_2267}}, {trunc_ln100_40_reg_2262}}, {trunc_ln100_39_fu_1959_p4}}, {trunc_ln100_38_fu_1949_p4}}, {trunc_ln100_37_fu_1939_p4}}, {trunc_ln100_36_fu_1929_p4}}, {trunc_ln100_35_fu_1919_p4}}, {trunc_ln100_34_fu_1909_p4}}, {trunc_ln100_33_fu_1899_p4}}, {trunc_ln100_32_fu_1889_p4}}, {trunc_ln100_31_fu_1879_p4}}, {trunc_ln100_30_fu_1869_p4}}, {trunc_ln100_29_fu_1859_p4}}, {trunc_ln100_28_fu_1849_p4}}, {trunc_ln100_27_fu_1839_p4}}, {trunc_ln100_26_fu_1829_p4}}, {trunc_ln100_s_reg_2257}}, {trunc_ln4_reg_2252}}, {or_ln100_fu_1969_p2}};

assign xor_ln85_fu_522_p2 = (icmp_ln86_reg_2099 ^ 1'd1);

assign xor_ln86_fu_619_p2 = (icmp_ln87_reg_2114 ^ 1'd1);

assign xor_ln96_28_fu_973_p2 = (trunc_ln96_189_fu_953_p1 ^ 81'd2115620184325601055735808);

assign xor_ln96_29_fu_983_p2 = (trunc_ln96_188_fu_949_p1 ^ 78'd264452523040700131966976);

assign xor_ln96_2_fu_963_p2 = (trunc_ln96_163_fu_905_p1 ^ 3'd7);

assign xor_ln96_30_fu_993_p2 = (trunc_ln96_187_fu_945_p1 ^ 75'd33056565380087516495872);

assign xor_ln96_31_fu_1003_p2 = (trunc_ln96_186_fu_941_p1 ^ 72'd4132070672510939561984);

assign xor_ln96_32_fu_1013_p2 = (trunc_ln96_185_fu_937_p1 ^ 69'd516508834063867445248);

assign xor_ln96_33_fu_1023_p2 = (trunc_ln96_184_fu_933_p1 ^ 66'd64563604257983430656);

assign xor_ln96_34_fu_1033_p2 = (trunc_ln96_183_fu_929_p1 ^ 63'd8070450532247928832);

assign xor_ln96_35_fu_1043_p2 = (trunc_ln96_182_fu_925_p1 ^ 60'd1008806316530991104);

assign xor_ln96_36_fu_1053_p2 = (trunc_ln96_181_fu_921_p1 ^ 57'd126100789566373888);

assign xor_ln96_37_fu_1063_p2 = (trunc_ln96_180_fu_917_p1 ^ 54'd15762598695796736);

assign xor_ln96_38_fu_1493_p2 = (trunc_ln96_179_fu_1490_p1 ^ 51'd1970324836974592);

assign xor_ln96_39_fu_1502_p2 = (trunc_ln96_178_fu_1487_p1 ^ 48'd246290604621824);

assign xor_ln96_40_fu_1511_p2 = (trunc_ln96_177_fu_1484_p1 ^ 45'd30786325577728);

assign xor_ln96_41_fu_1520_p2 = (trunc_ln96_176_fu_1481_p1 ^ 42'd3848290697216);

assign xor_ln96_42_fu_1529_p2 = (trunc_ln96_175_fu_1478_p1 ^ 39'd481036337152);

assign xor_ln96_43_fu_1538_p2 = (trunc_ln96_174_fu_1475_p1 ^ 36'd60129542144);

assign xor_ln96_44_fu_1547_p2 = (trunc_ln96_173_fu_1472_p1 ^ 33'd7516192768);

assign xor_ln96_45_fu_1556_p2 = (trunc_ln96_172_fu_1469_p1 ^ 30'd939524096);

assign xor_ln96_46_fu_1565_p2 = (trunc_ln96_171_fu_1466_p1 ^ 27'd117440512);

assign xor_ln96_47_fu_1574_p2 = (trunc_ln96_170_fu_1463_p1 ^ 24'd14680064);

assign xor_ln96_48_fu_1583_p2 = (trunc_ln96_169_fu_1460_p1 ^ 21'd1835008);

assign xor_ln96_49_fu_1592_p2 = (trunc_ln96_168_fu_1457_p1 ^ 18'd229376);

assign xor_ln96_50_fu_1601_p2 = (trunc_ln96_167_fu_1454_p1 ^ 15'd28672);

assign xor_ln96_51_fu_1610_p2 = (trunc_ln96_166_fu_1451_p1 ^ 12'd3584);

assign xor_ln96_52_fu_1073_p2 = (trunc_ln96_165_fu_913_p1 ^ 9'd448);

assign xor_ln96_53_fu_1083_p2 = (trunc_ln96_164_fu_909_p1 ^ 6'd56);

assign xor_ln96_fu_957_p2 = (shl_ln96_fu_890_p2 ^ 84'd19342813113834066795298815);

assign zext_ln85_fu_743_p1 = select_ln85_3_fu_736_p3;

assign zext_ln87_2_fu_775_p1 = select_ln87_3_reg_2136;

assign zext_ln87_fu_772_p1 = select_ln87_3_reg_2136;

assign zext_ln88_fu_789_p1 = select_ln87_reg_2130;

assign zext_ln93_fu_850_p1 = tmp_2_fu_844_p3;

assign zext_ln96_2_fu_896_p1 = buffer_load_reg_2178;

assign zext_ln96_4_fu_886_p1 = $unsigned(sext_ln96_3_fu_883_p1);

assign zext_ln96_fu_805_p1 = shl_ln96_4_fu_798_p3;

endmodule //ATTN11_reorder_43_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_45 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        vq_sm_transpose_head2_din,
        vq_sm_transpose_head2_num_data_valid,
        vq_sm_transpose_head2_fifo_cap,
        vq_sm_transpose_head2_full_n,
        vq_sm_transpose_head2_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [83:0] vq_sm_transpose_head2_din;
input  [9:0] vq_sm_transpose_head2_num_data_valid;
input  [9:0] vq_sm_transpose_head2_fifo_cap;
input   vq_sm_transpose_head2_full_n;
output   vq_sm_transpose_head2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream_read;
reg vq_sm_transpose_head2_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buffer_ce0;
wire   [2:0] buffer_q0;
reg    buffer_ce1;
reg    buffer_we1;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
wire   [9:0] grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
wire   [2:0] grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready;
wire   [83:0] grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head2_din;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head2_write;
wire   [9:0] grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
wire   [83:0] grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
wire    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld;
reg    grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_97_p2;
wire    ap_CS_fsm_state3;
reg    grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [83:0] vec_o_0_fu_50;
reg   [3:0] tt_fu_46;
wire   [3:0] tt_2_fu_91_p2;
reg    ap_block_state1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg = 1'b0;
//#0 grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg = 1'b0;
//#0 tt_fu_46 = 4'd0;
end

ATTN11_reorder_37_buffer_RAM_2P_LUTRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .ce0(buffer_ce0),
    .q0(buffer_q0),
    .address1(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .ce1(buffer_ce1),
    .we1(buffer_we1),
    .d1(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start),
    .ap_done(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done),
    .ap_idle(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_idle),
    .ap_ready(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready),
    .unpacked_stream_dout(unpacked_stream_dout),
    .unpacked_stream_num_data_valid(3'd0),
    .unpacked_stream_fifo_cap(3'd0),
    .unpacked_stream_empty_n(unpacked_stream_empty_n),
    .unpacked_stream_read(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read),
    .buffer_r_address1(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_address1),
    .buffer_r_ce1(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1),
    .buffer_r_we1(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1),
    .buffer_r_d1(grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_d1)
);

ATTN11_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start),
    .ap_done(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done),
    .ap_idle(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_idle),
    .ap_ready(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready),
    .vq_sm_transpose_head2_din(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head2_din),
    .vq_sm_transpose_head2_num_data_valid(10'd0),
    .vq_sm_transpose_head2_fifo_cap(10'd0),
    .vq_sm_transpose_head2_full_n(vq_sm_transpose_head2_full_n),
    .vq_sm_transpose_head2_write(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head2_write),
    .buffer_r_address0(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_address0),
    .buffer_r_ce0(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0),
    .buffer_r_q0(buffer_q0),
    .vec_o_4_out_i(vec_o_0_fu_50),
    .vec_o_4_out_o(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o),
    .vec_o_4_out_o_ap_vld(grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_ready == 1'b1)) begin
            grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_ready == 1'b1)) begin
            grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        tt_fu_46 <= 4'd0;
    end else if (((icmp_ln69_fu_97_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tt_fu_46 <= tt_2_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        vec_o_0_fu_50 <= grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vec_o_4_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_ce0 = grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_ce1 = grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_we1 = grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_buffer_r_we1;
    end else begin
        buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        unpacked_stream_read = grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_unpacked_stream_read;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        vq_sm_transpose_head2_write = grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head2_write;
    end else begin
        vq_sm_transpose_head2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_97_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start = grp_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4_fu_58_ap_start_reg;

assign grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start = grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_ap_start_reg;

assign icmp_ln69_fu_97_p2 = ((tt_fu_46 == 4'd14) ? 1'b1 : 1'b0);

assign tt_2_fu_91_p2 = (tt_fu_46 + 4'd1);

assign vq_sm_transpose_head2_din = grp_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8_fu_65_vq_sm_transpose_head2_din;

endmodule //ATTN11_reorder_45
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [2:0] buffer_r_d1;

reg ap_idle;
reg unpacked_stream_read;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_201_p2;
reg   [0:0] icmp_ln73_reg_466;
wire   [6:0] select_ln72_fu_269_p3;
reg   [6:0] select_ln72_reg_474;
wire   [0:0] and_ln72_fu_287_p2;
reg   [0:0] and_ln72_reg_479;
wire   [2:0] select_ln72_1_fu_293_p3;
reg   [2:0] select_ln72_1_reg_484;
wire   [6:0] add_ln73_fu_300_p2;
reg   [6:0] add_ln73_reg_489;
wire   [1:0] select_ln73_fu_311_p3;
reg   [1:0] select_ln73_reg_494;
wire   [9:0] add_ln78_fu_364_p2;
reg   [9:0] add_ln78_reg_500;
reg   [2:0] unpacked_stream_read_reg_505;
wire   [63:0] zext_ln78_fu_401_p1;
reg   [1:0] tip_fu_74;
wire   [1:0] add_ln74_fu_372_p2;
reg   [1:0] ap_sig_allocacmp_tip_load;
wire    ap_loop_init;
reg   [6:0] cit_fu_78;
wire   [6:0] select_ln73_1_fu_331_p3;
reg   [6:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_82;
wire   [8:0] select_ln73_2_fu_213_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] tp_tip_fu_86;
reg   [9:0] indvar_flatten12_fu_90;
wire   [9:0] add_ln72_1_fu_183_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [8:0] add_ln73_1_fu_207_p2;
wire   [0:0] icmp_ln74_fu_281_p2;
wire   [0:0] xor_ln72_fu_276_p2;
wire   [2:0] add_ln72_fu_263_p2;
wire   [0:0] or_ln73_fu_306_p2;
wire   [3:0] tmp_fu_336_p3;
wire   [3:0] zext_ln74_fu_347_p1;
wire   [3:0] empty_fu_350_p2;
wire   [9:0] tmp_1_fu_356_p3;
wire   [9:0] zext_ln74_2_fu_343_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 tip_fu_74 = 2'd0;
//#0 cit_fu_78 = 7'd0;
//#0 indvar_flatten_fu_82 = 9'd0;
//#0 tp_tip_fu_86 = 3'd0;
//#0 indvar_flatten12_fu_90 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cit_fu_78 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cit_fu_78 <= select_ln73_1_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_90 <= add_ln72_1_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_90 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= select_ln73_2_fu_213_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tip_fu_74 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            tip_fu_74 <= add_ln74_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tp_tip_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tp_tip_fu_86 <= select_ln72_1_fu_293_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln73_reg_489 <= add_ln73_fu_300_p2;
        and_ln72_reg_479 <= and_ln72_fu_287_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln73_reg_466 <= icmp_ln73_fu_201_p2;
        select_ln72_1_reg_484 <= select_ln72_1_fu_293_p3;
        select_ln72_reg_474 <= select_ln72_fu_269_p3;
        select_ln73_reg_494 <= select_ln73_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln78_reg_500 <= add_ln78_fu_364_p2;
        unpacked_stream_read_reg_505 <= unpacked_stream_dout;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_cit_load = select_ln73_1_fu_331_p3;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_tip_load = add_ln74_fu_372_p2;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_blk_n = unpacked_stream_empty_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_read = 1'b1;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_1_fu_183_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln72_fu_263_p2 = (tp_tip_fu_86 + 3'd1);

assign add_ln73_1_fu_207_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln73_fu_300_p2 = (select_ln72_fu_269_p3 + 7'd1);

assign add_ln74_fu_372_p2 = (select_ln73_reg_494 + 2'd1);

assign add_ln78_fu_364_p2 = (tmp_1_fu_356_p3 + zext_ln74_2_fu_343_p1);

assign and_ln72_fu_287_p2 = (xor_ln72_fu_276_p2 & icmp_ln74_fu_281_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (unpacked_stream_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address1 = zext_ln78_fu_401_p1;

assign buffer_r_d1 = unpacked_stream_read_reg_505;

assign empty_fu_350_p2 = (tmp_fu_336_p3 + zext_ln74_fu_347_p1);

assign icmp_ln72_fu_189_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_201_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_281_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln73_fu_306_p2 = (icmp_ln73_reg_466 | and_ln72_fu_287_p2);

assign select_ln72_1_fu_293_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? add_ln72_fu_263_p2 : tp_tip_fu_86);

assign select_ln72_fu_269_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_cit_load);

assign select_ln73_1_fu_331_p3 = ((and_ln72_reg_479[0:0] == 1'b1) ? add_ln73_reg_489 : select_ln72_reg_474);

assign select_ln73_2_fu_213_p3 = ((icmp_ln73_fu_201_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_1_fu_207_p2);

assign select_ln73_fu_311_p3 = ((or_ln73_fu_306_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign tmp_1_fu_356_p3 = {{empty_fu_350_p2}, {6'd0}};

assign tmp_fu_336_p3 = {{select_ln72_1_reg_484}, {1'd0}};

assign xor_ln72_fu_276_p2 = (icmp_ln73_reg_466 ^ 1'd1);

assign zext_ln74_2_fu_343_p1 = select_ln73_1_fu_331_p3;

assign zext_ln74_fu_347_p1 = select_ln73_reg_494;

assign zext_ln78_fu_401_p1 = add_ln78_reg_500;

endmodule //ATTN11_reorder_45_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_sm_transpose_head2_din,
        vq_sm_transpose_head2_num_data_valid,
        vq_sm_transpose_head2_fifo_cap,
        vq_sm_transpose_head2_full_n,
        vq_sm_transpose_head2_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        vec_o_4_out_i,
        vec_o_4_out_o,
        vec_o_4_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] vq_sm_transpose_head2_din;
input  [9:0] vq_sm_transpose_head2_num_data_valid;
input  [9:0] vq_sm_transpose_head2_fifo_cap;
input   vq_sm_transpose_head2_full_n;
output   vq_sm_transpose_head2_write;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [2:0] buffer_r_q0;
input  [83:0] vec_o_4_out_i;
output  [83:0] vec_o_4_out_o;
output   vec_o_4_out_o_ap_vld;

reg ap_idle;
reg vq_sm_transpose_head2_write;
reg buffer_r_ce0;
reg[83:0] vec_o_4_out_o;
reg vec_o_4_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg   [0:0] and_ln99_reg_2169;
reg   [0:0] and_ln99_reg_2169_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_466_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_sm_transpose_head2_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_2095;
wire   [0:0] icmp_ln86_fu_472_p2;
reg   [0:0] icmp_ln86_reg_2099;
reg   [0:0] icmp_ln86_reg_2099_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_2099_pp0_iter2_reg;
wire   [0:0] xor_ln85_fu_522_p2;
reg   [0:0] xor_ln85_reg_2109;
wire   [0:0] icmp_ln87_fu_527_p2;
reg   [0:0] icmp_ln87_reg_2114;
wire   [0:0] and_ln85_1_fu_533_p2;
reg   [0:0] and_ln85_1_reg_2119;
wire   [0:0] or_ln86_fu_539_p2;
reg   [0:0] or_ln86_reg_2125;
wire   [2:0] select_ln87_fu_658_p3;
reg   [2:0] select_ln87_reg_2130;
wire   [2:0] select_ln87_1_fu_666_p3;
reg   [2:0] select_ln87_1_reg_2136;
wire   [3:0] empty_1065_fu_674_p1;
reg   [3:0] empty_1065_reg_2143;
wire   [1:0] trunc_ln96_fu_678_p1;
reg   [1:0] trunc_ln96_reg_2148;
wire   [3:0] empty_1066_fu_778_p2;
reg   [3:0] empty_1066_reg_2153;
wire   [5:0] add_ln93_fu_792_p2;
reg   [5:0] add_ln93_reg_2158;
wire  signed [5:0] add_ln96_fu_815_p2;
reg  signed [5:0] add_ln96_reg_2163;
reg  signed [5:0] add_ln96_reg_2163_pp0_iter4_reg;
wire   [0:0] and_ln99_fu_826_p2;
reg   [0:0] and_ln99_reg_2169_pp0_iter4_reg;
reg   [0:0] and_ln99_reg_2169_pp0_iter5_reg;
reg   [2:0] buffer_load_reg_2178;
wire   [7:0] sub_ln96_1_fu_869_p2;
reg   [7:0] sub_ln96_1_reg_2183;
reg   [83:0] vec_o_4_out_load_reg_2188;
wire   [83:0] shl_ln96_fu_890_p2;
reg   [83:0] shl_ln96_reg_2206;
wire   [83:0] shl_ln96_1_fu_899_p2;
reg   [83:0] shl_ln96_1_reg_2224;
wire   [2:0] and_ln96_1_fu_1099_p2;
reg   [2:0] and_ln96_1_reg_2242;
wire   [2:0] trunc_ln96_136_fu_1105_p1;
reg   [2:0] trunc_ln96_136_reg_2247;
reg   [2:0] trunc_ln3_reg_2252;
reg   [2:0] trunc_ln100_1_reg_2257;
reg   [2:0] trunc_ln100_15_reg_2262;
reg   [2:0] trunc_ln100_16_reg_2267;
reg   [2:0] trunc_ln100_17_reg_2272;
reg   [2:0] trunc_ln100_18_reg_2277;
reg   [2:0] trunc_ln100_19_reg_2282;
reg   [2:0] trunc_ln100_20_reg_2287;
reg   [2:0] trunc_ln100_21_reg_2292;
reg   [2:0] trunc_ln100_22_reg_2297;
reg   [2:0] trunc_ln100_23_reg_2302;
reg   [2:0] trunc_ln100_24_reg_2307;
reg   [2:0] trunc_ln100_25_reg_2312;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln93_fu_850_p1;
wire   [83:0] or_ln96_fu_1229_p2;
reg   [2:0] cop_fu_316;
wire   [2:0] add_ln88_fu_682_p2;
wire    ap_loop_init;
reg   [2:0] ATTN11_1_fu_320;
reg   [5:0] indvar_flatten19_fu_324;
wire   [5:0] select_ln87_2_fu_550_p3;
reg   [4:0] cot_fu_328;
wire   [4:0] select_ln86_1_fu_635_p3;
reg   [9:0] indvar_flatten34_fu_332;
wire   [9:0] select_ln86_2_fu_484_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [1:0] tp_ATTN11_fu_336;
wire   [1:0] select_ln85_2_fu_736_p3;
reg   [9:0] indvar_flatten59_fu_340;
wire   [9:0] add_ln85_1_fu_460_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln86_1_fu_478_p2;
wire   [5:0] add_ln87_1_fu_544_p2;
wire   [0:0] icmp_ln88_fu_595_p2;
wire   [4:0] select_ln85_fu_588_p3;
wire   [0:0] xor_ln86_fu_619_p2;
wire   [0:0] and_ln85_fu_601_p2;
wire   [0:0] or_ln86_1_fu_624_p2;
wire   [4:0] add_ln86_fu_606_p2;
wire   [2:0] select_ln86_fu_612_p3;
wire   [0:0] and_ln86_fu_629_p2;
wire   [0:0] or_ln87_fu_648_p2;
wire   [0:0] or_ln87_2_fu_653_p2;
wire   [2:0] add_ln87_fu_642_p2;
wire   [1:0] add_ln85_fu_730_p2;
wire   [0:0] empty_fu_747_p1;
wire   [3:0] p_shl_fu_751_p3;
wire   [3:0] zext_ln85_fu_743_p1;
wire   [3:0] empty_1064_fu_759_p2;
wire   [3:0] zext_ln87_1_fu_775_p1;
wire   [5:0] tmp_4_fu_765_p3;
wire   [5:0] zext_ln88_fu_789_p1;
wire   [4:0] shl_ln96_2_fu_798_p3;
wire   [5:0] zext_ln96_fu_805_p1;
wire   [5:0] sub_ln96_fu_809_p2;
wire   [5:0] zext_ln87_fu_772_p1;
wire   [0:0] cmp69_fu_784_p2;
wire   [0:0] icmp_ln99_fu_821_p2;
wire   [9:0] tmp_5_fu_844_p3;
wire   [7:0] shl_ln96_3_fu_862_p3;
wire  signed [7:0] sext_ln96_fu_859_p1;
wire  signed [63:0] sext_ln96_2_fu_883_p1;
wire   [83:0] zext_ln96_3_fu_886_p1;
wire   [83:0] zext_ln96_1_fu_896_p1;
wire   [2:0] trunc_ln96_82_fu_905_p1;
wire   [80:0] trunc_ln96_108_fu_953_p1;
wire   [77:0] trunc_ln96_107_fu_949_p1;
wire   [74:0] trunc_ln96_106_fu_945_p1;
wire   [71:0] trunc_ln96_105_fu_941_p1;
wire   [68:0] trunc_ln96_104_fu_937_p1;
wire   [65:0] trunc_ln96_103_fu_933_p1;
wire   [62:0] trunc_ln96_102_fu_929_p1;
wire   [59:0] trunc_ln96_101_fu_925_p1;
wire   [56:0] trunc_ln96_100_fu_921_p1;
wire   [53:0] trunc_ln96_99_fu_917_p1;
wire   [8:0] trunc_ln96_84_fu_913_p1;
wire   [5:0] trunc_ln96_83_fu_909_p1;
wire   [83:0] xor_ln96_fu_957_p2;
wire   [2:0] trunc_ln96_109_fu_969_p1;
wire   [2:0] xor_ln96_1_fu_963_p2;
wire   [5:0] trunc_ln96_135_fu_1089_p1;
wire   [5:0] xor_ln96_27_fu_1083_p2;
wire   [8:0] trunc_ln96_134_fu_1079_p1;
wire   [8:0] xor_ln96_26_fu_1073_p2;
wire   [53:0] trunc_ln96_119_fu_1069_p1;
wire   [53:0] xor_ln96_11_fu_1063_p2;
wire   [56:0] trunc_ln96_118_fu_1059_p1;
wire   [56:0] xor_ln96_10_fu_1053_p2;
wire   [59:0] trunc_ln96_117_fu_1049_p1;
wire   [59:0] xor_ln96_9_fu_1043_p2;
wire   [62:0] trunc_ln96_116_fu_1039_p1;
wire   [62:0] xor_ln96_8_fu_1033_p2;
wire   [65:0] trunc_ln96_115_fu_1029_p1;
wire   [65:0] xor_ln96_7_fu_1023_p2;
wire   [68:0] trunc_ln96_114_fu_1019_p1;
wire   [68:0] xor_ln96_6_fu_1013_p2;
wire   [71:0] trunc_ln96_113_fu_1009_p1;
wire   [71:0] xor_ln96_5_fu_1003_p2;
wire   [74:0] trunc_ln96_112_fu_999_p1;
wire   [74:0] xor_ln96_4_fu_993_p2;
wire   [77:0] trunc_ln96_111_fu_989_p1;
wire   [77:0] xor_ln96_3_fu_983_p2;
wire   [80:0] trunc_ln96_110_fu_979_p1;
wire   [80:0] xor_ln96_2_fu_973_p2;
wire   [83:0] and_ln96_fu_1093_p2;
wire   [80:0] trunc_ln96_162_fu_1225_p1;
wire   [80:0] and_ln96_27_fu_1219_p2;
wire   [77:0] trunc_ln96_161_fu_1215_p1;
wire   [77:0] and_ln96_26_fu_1209_p2;
wire   [74:0] trunc_ln96_160_fu_1205_p1;
wire   [74:0] and_ln96_25_fu_1199_p2;
wire   [71:0] trunc_ln96_159_fu_1195_p1;
wire   [71:0] and_ln96_24_fu_1189_p2;
wire   [68:0] trunc_ln96_158_fu_1185_p1;
wire   [68:0] and_ln96_23_fu_1179_p2;
wire   [65:0] trunc_ln96_157_fu_1175_p1;
wire   [65:0] and_ln96_22_fu_1169_p2;
wire   [62:0] trunc_ln96_156_fu_1165_p1;
wire   [62:0] and_ln96_21_fu_1159_p2;
wire   [59:0] trunc_ln96_155_fu_1155_p1;
wire   [59:0] and_ln96_20_fu_1149_p2;
wire   [56:0] trunc_ln96_154_fu_1145_p1;
wire   [56:0] and_ln96_19_fu_1139_p2;
wire   [53:0] trunc_ln96_153_fu_1135_p1;
wire   [53:0] and_ln96_18_fu_1129_p2;
wire   [8:0] trunc_ln96_138_fu_1125_p1;
wire   [8:0] and_ln96_3_fu_1119_p2;
wire   [5:0] trunc_ln96_137_fu_1115_p1;
wire   [5:0] and_ln96_2_fu_1109_p2;
wire   [5:0] or_ln99_25_fu_1301_p2;
wire   [8:0] or_ln99_24_fu_1295_p2;
wire   [53:0] or_ln99_9_fu_1289_p2;
wire   [56:0] or_ln99_8_fu_1283_p2;
wire   [59:0] or_ln99_7_fu_1277_p2;
wire   [62:0] or_ln99_6_fu_1271_p2;
wire   [65:0] or_ln99_5_fu_1265_p2;
wire   [68:0] or_ln99_4_fu_1259_p2;
wire   [71:0] or_ln99_3_fu_1253_p2;
wire   [74:0] or_ln99_2_fu_1247_p2;
wire   [77:0] or_ln99_1_fu_1241_p2;
wire   [80:0] or_ln99_fu_1235_p2;
wire   [50:0] trunc_ln96_98_fu_1490_p1;
wire   [47:0] trunc_ln96_97_fu_1487_p1;
wire   [44:0] trunc_ln96_96_fu_1484_p1;
wire   [41:0] trunc_ln96_95_fu_1481_p1;
wire   [38:0] trunc_ln96_94_fu_1478_p1;
wire   [35:0] trunc_ln96_93_fu_1475_p1;
wire   [32:0] trunc_ln96_92_fu_1472_p1;
wire   [29:0] trunc_ln96_91_fu_1469_p1;
wire   [26:0] trunc_ln96_90_fu_1466_p1;
wire   [23:0] trunc_ln96_89_fu_1463_p1;
wire   [20:0] trunc_ln96_88_fu_1460_p1;
wire   [17:0] trunc_ln96_87_fu_1457_p1;
wire   [14:0] trunc_ln96_86_fu_1454_p1;
wire   [11:0] trunc_ln96_85_fu_1451_p1;
wire   [11:0] trunc_ln96_133_fu_1616_p1;
wire   [11:0] xor_ln96_25_fu_1610_p2;
wire   [14:0] trunc_ln96_132_fu_1607_p1;
wire   [14:0] xor_ln96_24_fu_1601_p2;
wire   [17:0] trunc_ln96_131_fu_1598_p1;
wire   [17:0] xor_ln96_23_fu_1592_p2;
wire   [20:0] trunc_ln96_130_fu_1589_p1;
wire   [20:0] xor_ln96_22_fu_1583_p2;
wire   [23:0] trunc_ln96_129_fu_1580_p1;
wire   [23:0] xor_ln96_21_fu_1574_p2;
wire   [26:0] trunc_ln96_128_fu_1571_p1;
wire   [26:0] xor_ln96_20_fu_1565_p2;
wire   [29:0] trunc_ln96_127_fu_1562_p1;
wire   [29:0] xor_ln96_19_fu_1556_p2;
wire   [32:0] trunc_ln96_126_fu_1553_p1;
wire   [32:0] xor_ln96_18_fu_1547_p2;
wire   [35:0] trunc_ln96_125_fu_1544_p1;
wire   [35:0] xor_ln96_17_fu_1538_p2;
wire   [38:0] trunc_ln96_124_fu_1535_p1;
wire   [38:0] xor_ln96_16_fu_1529_p2;
wire   [41:0] trunc_ln96_123_fu_1526_p1;
wire   [41:0] xor_ln96_15_fu_1520_p2;
wire   [44:0] trunc_ln96_122_fu_1517_p1;
wire   [44:0] xor_ln96_14_fu_1511_p2;
wire   [47:0] trunc_ln96_121_fu_1508_p1;
wire   [47:0] xor_ln96_13_fu_1502_p2;
wire   [50:0] trunc_ln96_120_fu_1499_p1;
wire   [50:0] xor_ln96_12_fu_1493_p2;
wire   [50:0] trunc_ln96_152_fu_1742_p1;
wire   [50:0] and_ln96_17_fu_1736_p2;
wire   [47:0] trunc_ln96_151_fu_1733_p1;
wire   [47:0] and_ln96_16_fu_1727_p2;
wire   [44:0] trunc_ln96_150_fu_1724_p1;
wire   [44:0] and_ln96_15_fu_1718_p2;
wire   [41:0] trunc_ln96_149_fu_1715_p1;
wire   [41:0] and_ln96_14_fu_1709_p2;
wire   [38:0] trunc_ln96_148_fu_1706_p1;
wire   [38:0] and_ln96_13_fu_1700_p2;
wire   [35:0] trunc_ln96_147_fu_1697_p1;
wire   [35:0] and_ln96_12_fu_1691_p2;
wire   [32:0] trunc_ln96_146_fu_1688_p1;
wire   [32:0] and_ln96_11_fu_1682_p2;
wire   [29:0] trunc_ln96_145_fu_1679_p1;
wire   [29:0] and_ln96_10_fu_1673_p2;
wire   [26:0] trunc_ln96_144_fu_1670_p1;
wire   [26:0] and_ln96_9_fu_1664_p2;
wire   [23:0] trunc_ln96_143_fu_1661_p1;
wire   [23:0] and_ln96_8_fu_1655_p2;
wire   [20:0] trunc_ln96_142_fu_1652_p1;
wire   [20:0] and_ln96_7_fu_1646_p2;
wire   [17:0] trunc_ln96_141_fu_1643_p1;
wire   [17:0] and_ln96_6_fu_1637_p2;
wire   [14:0] trunc_ln96_140_fu_1634_p1;
wire   [14:0] and_ln96_5_fu_1628_p2;
wire   [11:0] trunc_ln96_139_fu_1625_p1;
wire   [11:0] and_ln96_4_fu_1619_p2;
wire   [11:0] or_ln99_23_fu_1823_p2;
wire   [14:0] or_ln99_22_fu_1817_p2;
wire   [17:0] or_ln99_21_fu_1811_p2;
wire   [20:0] or_ln99_20_fu_1805_p2;
wire   [23:0] or_ln99_19_fu_1799_p2;
wire   [26:0] or_ln99_18_fu_1793_p2;
wire   [29:0] or_ln99_17_fu_1787_p2;
wire   [32:0] or_ln99_16_fu_1781_p2;
wire   [35:0] or_ln99_15_fu_1775_p2;
wire   [38:0] or_ln99_14_fu_1769_p2;
wire   [41:0] or_ln99_13_fu_1763_p2;
wire   [44:0] or_ln99_12_fu_1757_p2;
wire   [47:0] or_ln99_11_fu_1751_p2;
wire   [50:0] or_ln99_10_fu_1745_p2;
wire   [2:0] trunc_ln100_14_fu_1959_p4;
wire   [2:0] trunc_ln100_13_fu_1949_p4;
wire   [2:0] trunc_ln100_12_fu_1939_p4;
wire   [2:0] trunc_ln100_11_fu_1929_p4;
wire   [2:0] trunc_ln100_10_fu_1919_p4;
wire   [2:0] trunc_ln100_s_fu_1909_p4;
wire   [2:0] trunc_ln100_9_fu_1899_p4;
wire   [2:0] trunc_ln100_8_fu_1889_p4;
wire   [2:0] trunc_ln100_7_fu_1879_p4;
wire   [2:0] trunc_ln100_6_fu_1869_p4;
wire   [2:0] trunc_ln100_5_fu_1859_p4;
wire   [2:0] trunc_ln100_4_fu_1849_p4;
wire   [2:0] trunc_ln100_3_fu_1839_p4;
wire   [2:0] trunc_ln100_2_fu_1829_p4;
wire   [2:0] or_ln100_fu_1969_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 cop_fu_316 = 3'd0;
//#0 ATTN11_1_fu_320 = 3'd0;
//#0 indvar_flatten19_fu_324 = 6'd0;
//#0 cot_fu_328 = 5'd0;
//#0 indvar_flatten34_fu_332 = 10'd0;
//#0 tp_ATTN11_fu_336 = 2'd0;
//#0 indvar_flatten59_fu_340 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cop_fu_316 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cop_fu_316 <= add_ln88_fu_682_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cot_fu_328 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cot_fu_328 <= select_ln86_1_fu_635_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_324 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln85_reg_2095 == 1'd0))) begin
            indvar_flatten19_fu_324 <= select_ln87_2_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_332 <= select_ln86_2_fu_484_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_332 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_340 <= add_ln85_1_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_340 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ATTN11_1_fu_320 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ATTN11_1_fu_320 <= select_ln87_1_fu_666_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tp_ATTN11_fu_336 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tp_ATTN11_fu_336 <= select_ln85_2_fu_736_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln93_reg_2158 <= add_ln93_fu_792_p2;
        add_ln96_reg_2163 <= add_ln96_fu_815_p2;
        add_ln96_reg_2163_pp0_iter4_reg <= add_ln96_reg_2163;
        and_ln96_1_reg_2242 <= and_ln96_1_fu_1099_p2;
        and_ln99_reg_2169 <= and_ln99_fu_826_p2;
        and_ln99_reg_2169_pp0_iter4_reg <= and_ln99_reg_2169;
        and_ln99_reg_2169_pp0_iter5_reg <= and_ln99_reg_2169_pp0_iter4_reg;
        and_ln99_reg_2169_pp0_iter6_reg <= and_ln99_reg_2169_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        buffer_load_reg_2178 <= buffer_r_q0;
        empty_1065_reg_2143 <= empty_1065_fu_674_p1;
        empty_1066_reg_2153 <= empty_1066_fu_778_p2;
        icmp_ln86_reg_2099_pp0_iter2_reg <= icmp_ln86_reg_2099_pp0_iter1_reg;
        select_ln87_1_reg_2136 <= select_ln87_1_fu_666_p3;
        select_ln87_reg_2130 <= select_ln87_fu_658_p3;
        shl_ln96_1_reg_2224 <= shl_ln96_1_fu_899_p2;
        shl_ln96_reg_2206 <= shl_ln96_fu_890_p2;
        sub_ln96_1_reg_2183 <= sub_ln96_1_fu_869_p2;
        trunc_ln100_15_reg_2262 <= {{or_ln99_9_fu_1289_p2[53:51]}};
        trunc_ln100_16_reg_2267 <= {{or_ln99_8_fu_1283_p2[56:54]}};
        trunc_ln100_17_reg_2272 <= {{or_ln99_7_fu_1277_p2[59:57]}};
        trunc_ln100_18_reg_2277 <= {{or_ln99_6_fu_1271_p2[62:60]}};
        trunc_ln100_19_reg_2282 <= {{or_ln99_5_fu_1265_p2[65:63]}};
        trunc_ln100_1_reg_2257 <= {{or_ln99_24_fu_1295_p2[8:6]}};
        trunc_ln100_20_reg_2287 <= {{or_ln99_4_fu_1259_p2[68:66]}};
        trunc_ln100_21_reg_2292 <= {{or_ln99_3_fu_1253_p2[71:69]}};
        trunc_ln100_22_reg_2297 <= {{or_ln99_2_fu_1247_p2[74:72]}};
        trunc_ln100_23_reg_2302 <= {{or_ln99_1_fu_1241_p2[77:75]}};
        trunc_ln100_24_reg_2307 <= {{or_ln99_fu_1235_p2[80:78]}};
        trunc_ln100_25_reg_2312 <= {{or_ln96_fu_1229_p2[83:81]}};
        trunc_ln3_reg_2252 <= {{or_ln99_25_fu_1301_p2[5:3]}};
        trunc_ln96_136_reg_2247 <= trunc_ln96_136_fu_1105_p1;
        trunc_ln96_reg_2148 <= trunc_ln96_fu_678_p1;
        vec_o_4_out_load_reg_2188 <= vec_o_4_out_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_1_reg_2119 <= and_ln85_1_fu_533_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln85_reg_2095 <= icmp_ln85_fu_466_p2;
        icmp_ln86_reg_2099 <= icmp_ln86_fu_472_p2;
        icmp_ln86_reg_2099_pp0_iter1_reg <= icmp_ln86_reg_2099;
        icmp_ln87_reg_2114 <= icmp_ln87_fu_527_p2;
        or_ln86_reg_2125 <= or_ln86_fu_539_p2;
        xor_ln85_reg_2109 <= xor_ln85_fu_522_p2;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_466_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln85_reg_2095 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_332;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_340;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o = or_ln96_fu_1229_p2;
    end else begin
        vec_o_4_out_o = vec_o_4_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o_ap_vld = 1'b1;
    end else begin
        vec_o_4_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        vq_sm_transpose_head2_blk_n = vq_sm_transpose_head2_full_n;
    end else begin
        vq_sm_transpose_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        vq_sm_transpose_head2_write = 1'b1;
    end else begin
        vq_sm_transpose_head2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_1_fu_460_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 10'd1);

assign add_ln85_fu_730_p2 = (tp_ATTN11_fu_336 + 2'd1);

assign add_ln86_1_fu_478_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 10'd1);

assign add_ln86_fu_606_p2 = (select_ln85_fu_588_p3 + 5'd1);

assign add_ln87_1_fu_544_p2 = (indvar_flatten19_fu_324 + 6'd1);

assign add_ln87_fu_642_p2 = (select_ln86_fu_612_p3 + 3'd1);

assign add_ln88_fu_682_p2 = (select_ln87_fu_658_p3 + 3'd1);

assign add_ln93_fu_792_p2 = (tmp_4_fu_765_p3 + zext_ln88_fu_789_p1);

assign add_ln96_fu_815_p2 = (sub_ln96_fu_809_p2 + zext_ln87_fu_772_p1);

assign and_ln85_1_fu_533_p2 = (xor_ln85_fu_522_p2 & icmp_ln87_fu_527_p2);

assign and_ln85_fu_601_p2 = (xor_ln85_reg_2109 & icmp_ln88_fu_595_p2);

assign and_ln86_fu_629_p2 = (or_ln86_1_fu_624_p2 & and_ln85_fu_601_p2);

assign and_ln96_10_fu_1673_p2 = (xor_ln96_19_fu_1556_p2 & trunc_ln96_127_fu_1562_p1);

assign and_ln96_11_fu_1682_p2 = (xor_ln96_18_fu_1547_p2 & trunc_ln96_126_fu_1553_p1);

assign and_ln96_12_fu_1691_p2 = (xor_ln96_17_fu_1538_p2 & trunc_ln96_125_fu_1544_p1);

assign and_ln96_13_fu_1700_p2 = (xor_ln96_16_fu_1529_p2 & trunc_ln96_124_fu_1535_p1);

assign and_ln96_14_fu_1709_p2 = (xor_ln96_15_fu_1520_p2 & trunc_ln96_123_fu_1526_p1);

assign and_ln96_15_fu_1718_p2 = (xor_ln96_14_fu_1511_p2 & trunc_ln96_122_fu_1517_p1);

assign and_ln96_16_fu_1727_p2 = (xor_ln96_13_fu_1502_p2 & trunc_ln96_121_fu_1508_p1);

assign and_ln96_17_fu_1736_p2 = (xor_ln96_12_fu_1493_p2 & trunc_ln96_120_fu_1499_p1);

assign and_ln96_18_fu_1129_p2 = (xor_ln96_11_fu_1063_p2 & trunc_ln96_119_fu_1069_p1);

assign and_ln96_19_fu_1139_p2 = (xor_ln96_10_fu_1053_p2 & trunc_ln96_118_fu_1059_p1);

assign and_ln96_1_fu_1099_p2 = (xor_ln96_1_fu_963_p2 & trunc_ln96_109_fu_969_p1);

assign and_ln96_20_fu_1149_p2 = (xor_ln96_9_fu_1043_p2 & trunc_ln96_117_fu_1049_p1);

assign and_ln96_21_fu_1159_p2 = (xor_ln96_8_fu_1033_p2 & trunc_ln96_116_fu_1039_p1);

assign and_ln96_22_fu_1169_p2 = (xor_ln96_7_fu_1023_p2 & trunc_ln96_115_fu_1029_p1);

assign and_ln96_23_fu_1179_p2 = (xor_ln96_6_fu_1013_p2 & trunc_ln96_114_fu_1019_p1);

assign and_ln96_24_fu_1189_p2 = (xor_ln96_5_fu_1003_p2 & trunc_ln96_113_fu_1009_p1);

assign and_ln96_25_fu_1199_p2 = (xor_ln96_4_fu_993_p2 & trunc_ln96_112_fu_999_p1);

assign and_ln96_26_fu_1209_p2 = (xor_ln96_3_fu_983_p2 & trunc_ln96_111_fu_989_p1);

assign and_ln96_27_fu_1219_p2 = (xor_ln96_2_fu_973_p2 & trunc_ln96_110_fu_979_p1);

assign and_ln96_2_fu_1109_p2 = (xor_ln96_27_fu_1083_p2 & trunc_ln96_135_fu_1089_p1);

assign and_ln96_3_fu_1119_p2 = (xor_ln96_26_fu_1073_p2 & trunc_ln96_134_fu_1079_p1);

assign and_ln96_4_fu_1619_p2 = (xor_ln96_25_fu_1610_p2 & trunc_ln96_133_fu_1616_p1);

assign and_ln96_5_fu_1628_p2 = (xor_ln96_24_fu_1601_p2 & trunc_ln96_132_fu_1607_p1);

assign and_ln96_6_fu_1637_p2 = (xor_ln96_23_fu_1592_p2 & trunc_ln96_131_fu_1598_p1);

assign and_ln96_7_fu_1646_p2 = (xor_ln96_22_fu_1583_p2 & trunc_ln96_130_fu_1589_p1);

assign and_ln96_8_fu_1655_p2 = (xor_ln96_21_fu_1574_p2 & trunc_ln96_129_fu_1580_p1);

assign and_ln96_9_fu_1664_p2 = (xor_ln96_20_fu_1565_p2 & trunc_ln96_128_fu_1571_p1);

assign and_ln96_fu_1093_p2 = (xor_ln96_fu_957_p2 & vec_o_4_out_i);

assign and_ln99_fu_826_p2 = (icmp_ln99_fu_821_p2 & cmp69_fu_784_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (vq_sm_transpose_head2_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address0 = zext_ln93_fu_850_p1;

assign cmp69_fu_784_p2 = ((select_ln87_1_reg_2136 == 3'd6) ? 1'b1 : 1'b0);

assign empty_1064_fu_759_p2 = (p_shl_fu_751_p3 - zext_ln85_fu_743_p1);

assign empty_1065_fu_674_p1 = select_ln86_1_fu_635_p3[3:0];

assign empty_1066_fu_778_p2 = (empty_1064_fu_759_p2 + zext_ln87_1_fu_775_p1);

assign empty_fu_747_p1 = select_ln85_2_fu_736_p3[0:0];

assign icmp_ln85_fu_466_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_472_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_527_p2 = ((indvar_flatten19_fu_324 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_595_p2 = ((cop_fu_316 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_821_p2 = ((select_ln87_reg_2130 == 3'd3) ? 1'b1 : 1'b0);

assign or_ln100_fu_1969_p2 = (trunc_ln96_136_reg_2247 | and_ln96_1_reg_2242);

assign or_ln86_1_fu_624_p2 = (xor_ln86_fu_619_p2 | icmp_ln86_reg_2099_pp0_iter1_reg);

assign or_ln86_fu_539_p2 = (icmp_ln86_reg_2099 | and_ln85_1_fu_533_p2);

assign or_ln87_2_fu_653_p2 = (or_ln87_fu_648_p2 | icmp_ln86_reg_2099_pp0_iter1_reg);

assign or_ln87_fu_648_p2 = (and_ln86_fu_629_p2 | and_ln85_1_reg_2119);

assign or_ln96_fu_1229_p2 = (shl_ln96_1_fu_899_p2 | and_ln96_fu_1093_p2);

assign or_ln99_10_fu_1745_p2 = (trunc_ln96_152_fu_1742_p1 | and_ln96_17_fu_1736_p2);

assign or_ln99_11_fu_1751_p2 = (trunc_ln96_151_fu_1733_p1 | and_ln96_16_fu_1727_p2);

assign or_ln99_12_fu_1757_p2 = (trunc_ln96_150_fu_1724_p1 | and_ln96_15_fu_1718_p2);

assign or_ln99_13_fu_1763_p2 = (trunc_ln96_149_fu_1715_p1 | and_ln96_14_fu_1709_p2);

assign or_ln99_14_fu_1769_p2 = (trunc_ln96_148_fu_1706_p1 | and_ln96_13_fu_1700_p2);

assign or_ln99_15_fu_1775_p2 = (trunc_ln96_147_fu_1697_p1 | and_ln96_12_fu_1691_p2);

assign or_ln99_16_fu_1781_p2 = (trunc_ln96_146_fu_1688_p1 | and_ln96_11_fu_1682_p2);

assign or_ln99_17_fu_1787_p2 = (trunc_ln96_145_fu_1679_p1 | and_ln96_10_fu_1673_p2);

assign or_ln99_18_fu_1793_p2 = (trunc_ln96_144_fu_1670_p1 | and_ln96_9_fu_1664_p2);

assign or_ln99_19_fu_1799_p2 = (trunc_ln96_143_fu_1661_p1 | and_ln96_8_fu_1655_p2);

assign or_ln99_1_fu_1241_p2 = (trunc_ln96_161_fu_1215_p1 | and_ln96_26_fu_1209_p2);

assign or_ln99_20_fu_1805_p2 = (trunc_ln96_142_fu_1652_p1 | and_ln96_7_fu_1646_p2);

assign or_ln99_21_fu_1811_p2 = (trunc_ln96_141_fu_1643_p1 | and_ln96_6_fu_1637_p2);

assign or_ln99_22_fu_1817_p2 = (trunc_ln96_140_fu_1634_p1 | and_ln96_5_fu_1628_p2);

assign or_ln99_23_fu_1823_p2 = (trunc_ln96_139_fu_1625_p1 | and_ln96_4_fu_1619_p2);

assign or_ln99_24_fu_1295_p2 = (trunc_ln96_138_fu_1125_p1 | and_ln96_3_fu_1119_p2);

assign or_ln99_25_fu_1301_p2 = (trunc_ln96_137_fu_1115_p1 | and_ln96_2_fu_1109_p2);

assign or_ln99_2_fu_1247_p2 = (trunc_ln96_160_fu_1205_p1 | and_ln96_25_fu_1199_p2);

assign or_ln99_3_fu_1253_p2 = (trunc_ln96_159_fu_1195_p1 | and_ln96_24_fu_1189_p2);

assign or_ln99_4_fu_1259_p2 = (trunc_ln96_158_fu_1185_p1 | and_ln96_23_fu_1179_p2);

assign or_ln99_5_fu_1265_p2 = (trunc_ln96_157_fu_1175_p1 | and_ln96_22_fu_1169_p2);

assign or_ln99_6_fu_1271_p2 = (trunc_ln96_156_fu_1165_p1 | and_ln96_21_fu_1159_p2);

assign or_ln99_7_fu_1277_p2 = (trunc_ln96_155_fu_1155_p1 | and_ln96_20_fu_1149_p2);

assign or_ln99_8_fu_1283_p2 = (trunc_ln96_154_fu_1145_p1 | and_ln96_19_fu_1139_p2);

assign or_ln99_9_fu_1289_p2 = (trunc_ln96_153_fu_1135_p1 | and_ln96_18_fu_1129_p2);

assign or_ln99_fu_1235_p2 = (trunc_ln96_162_fu_1225_p1 | and_ln96_27_fu_1219_p2);

assign p_shl_fu_751_p3 = {{empty_fu_747_p1}, {3'd0}};

assign select_ln85_2_fu_736_p3 = ((icmp_ln86_reg_2099_pp0_iter2_reg[0:0] == 1'b1) ? add_ln85_fu_730_p2 : tp_ATTN11_fu_336);

assign select_ln85_fu_588_p3 = ((icmp_ln86_reg_2099_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : cot_fu_328);

assign select_ln86_1_fu_635_p3 = ((and_ln85_1_reg_2119[0:0] == 1'b1) ? add_ln86_fu_606_p2 : select_ln85_fu_588_p3);

assign select_ln86_2_fu_484_p3 = ((icmp_ln86_fu_472_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_1_fu_478_p2);

assign select_ln86_fu_612_p3 = ((or_ln86_reg_2125[0:0] == 1'b1) ? 3'd0 : ATTN11_1_fu_320);

assign select_ln87_1_fu_666_p3 = ((and_ln86_fu_629_p2[0:0] == 1'b1) ? add_ln87_fu_642_p2 : select_ln86_fu_612_p3);

assign select_ln87_2_fu_550_p3 = ((or_ln86_fu_539_p2[0:0] == 1'b1) ? 6'd1 : add_ln87_1_fu_544_p2);

assign select_ln87_fu_658_p3 = ((or_ln87_2_fu_653_p2[0:0] == 1'b1) ? 3'd0 : cop_fu_316);

assign sext_ln96_2_fu_883_p1 = $signed(sub_ln96_1_reg_2183);

assign sext_ln96_fu_859_p1 = add_ln96_reg_2163_pp0_iter4_reg;

assign shl_ln96_1_fu_899_p2 = zext_ln96_1_fu_896_p1 << zext_ln96_3_fu_886_p1;

assign shl_ln96_2_fu_798_p3 = {{trunc_ln96_reg_2148}, {3'd0}};

assign shl_ln96_3_fu_862_p3 = {{add_ln96_reg_2163_pp0_iter4_reg}, {2'd0}};

assign shl_ln96_fu_890_p2 = 84'd7 << zext_ln96_3_fu_886_p1;

assign sub_ln96_1_fu_869_p2 = ($signed(shl_ln96_3_fu_862_p3) - $signed(sext_ln96_fu_859_p1));

assign sub_ln96_fu_809_p2 = (zext_ln96_fu_805_p1 - zext_ln88_fu_789_p1);

assign tmp_4_fu_765_p3 = {{empty_1065_reg_2143}, {2'd0}};

assign tmp_5_fu_844_p3 = {{empty_1066_reg_2153}, {add_ln93_reg_2158}};

assign trunc_ln100_10_fu_1919_p4 = {{or_ln99_14_fu_1769_p2[38:36]}};

assign trunc_ln100_11_fu_1929_p4 = {{or_ln99_13_fu_1763_p2[41:39]}};

assign trunc_ln100_12_fu_1939_p4 = {{or_ln99_12_fu_1757_p2[44:42]}};

assign trunc_ln100_13_fu_1949_p4 = {{or_ln99_11_fu_1751_p2[47:45]}};

assign trunc_ln100_14_fu_1959_p4 = {{or_ln99_10_fu_1745_p2[50:48]}};

assign trunc_ln100_2_fu_1829_p4 = {{or_ln99_23_fu_1823_p2[11:9]}};

assign trunc_ln100_3_fu_1839_p4 = {{or_ln99_22_fu_1817_p2[14:12]}};

assign trunc_ln100_4_fu_1849_p4 = {{or_ln99_21_fu_1811_p2[17:15]}};

assign trunc_ln100_5_fu_1859_p4 = {{or_ln99_20_fu_1805_p2[20:18]}};

assign trunc_ln100_6_fu_1869_p4 = {{or_ln99_19_fu_1799_p2[23:21]}};

assign trunc_ln100_7_fu_1879_p4 = {{or_ln99_18_fu_1793_p2[26:24]}};

assign trunc_ln100_8_fu_1889_p4 = {{or_ln99_17_fu_1787_p2[29:27]}};

assign trunc_ln100_9_fu_1899_p4 = {{or_ln99_16_fu_1781_p2[32:30]}};

assign trunc_ln100_s_fu_1909_p4 = {{or_ln99_15_fu_1775_p2[35:33]}};

assign trunc_ln96_100_fu_921_p1 = shl_ln96_fu_890_p2[56:0];

assign trunc_ln96_101_fu_925_p1 = shl_ln96_fu_890_p2[59:0];

assign trunc_ln96_102_fu_929_p1 = shl_ln96_fu_890_p2[62:0];

assign trunc_ln96_103_fu_933_p1 = shl_ln96_fu_890_p2[65:0];

assign trunc_ln96_104_fu_937_p1 = shl_ln96_fu_890_p2[68:0];

assign trunc_ln96_105_fu_941_p1 = shl_ln96_fu_890_p2[71:0];

assign trunc_ln96_106_fu_945_p1 = shl_ln96_fu_890_p2[74:0];

assign trunc_ln96_107_fu_949_p1 = shl_ln96_fu_890_p2[77:0];

assign trunc_ln96_108_fu_953_p1 = shl_ln96_fu_890_p2[80:0];

assign trunc_ln96_109_fu_969_p1 = vec_o_4_out_i[2:0];

assign trunc_ln96_110_fu_979_p1 = vec_o_4_out_i[80:0];

assign trunc_ln96_111_fu_989_p1 = vec_o_4_out_i[77:0];

assign trunc_ln96_112_fu_999_p1 = vec_o_4_out_i[74:0];

assign trunc_ln96_113_fu_1009_p1 = vec_o_4_out_i[71:0];

assign trunc_ln96_114_fu_1019_p1 = vec_o_4_out_i[68:0];

assign trunc_ln96_115_fu_1029_p1 = vec_o_4_out_i[65:0];

assign trunc_ln96_116_fu_1039_p1 = vec_o_4_out_i[62:0];

assign trunc_ln96_117_fu_1049_p1 = vec_o_4_out_i[59:0];

assign trunc_ln96_118_fu_1059_p1 = vec_o_4_out_i[56:0];

assign trunc_ln96_119_fu_1069_p1 = vec_o_4_out_i[53:0];

assign trunc_ln96_120_fu_1499_p1 = vec_o_4_out_load_reg_2188[50:0];

assign trunc_ln96_121_fu_1508_p1 = vec_o_4_out_load_reg_2188[47:0];

assign trunc_ln96_122_fu_1517_p1 = vec_o_4_out_load_reg_2188[44:0];

assign trunc_ln96_123_fu_1526_p1 = vec_o_4_out_load_reg_2188[41:0];

assign trunc_ln96_124_fu_1535_p1 = vec_o_4_out_load_reg_2188[38:0];

assign trunc_ln96_125_fu_1544_p1 = vec_o_4_out_load_reg_2188[35:0];

assign trunc_ln96_126_fu_1553_p1 = vec_o_4_out_load_reg_2188[32:0];

assign trunc_ln96_127_fu_1562_p1 = vec_o_4_out_load_reg_2188[29:0];

assign trunc_ln96_128_fu_1571_p1 = vec_o_4_out_load_reg_2188[26:0];

assign trunc_ln96_129_fu_1580_p1 = vec_o_4_out_load_reg_2188[23:0];

assign trunc_ln96_130_fu_1589_p1 = vec_o_4_out_load_reg_2188[20:0];

assign trunc_ln96_131_fu_1598_p1 = vec_o_4_out_load_reg_2188[17:0];

assign trunc_ln96_132_fu_1607_p1 = vec_o_4_out_load_reg_2188[14:0];

assign trunc_ln96_133_fu_1616_p1 = vec_o_4_out_load_reg_2188[11:0];

assign trunc_ln96_134_fu_1079_p1 = vec_o_4_out_i[8:0];

assign trunc_ln96_135_fu_1089_p1 = vec_o_4_out_i[5:0];

assign trunc_ln96_136_fu_1105_p1 = shl_ln96_1_fu_899_p2[2:0];

assign trunc_ln96_137_fu_1115_p1 = shl_ln96_1_fu_899_p2[5:0];

assign trunc_ln96_138_fu_1125_p1 = shl_ln96_1_fu_899_p2[8:0];

assign trunc_ln96_139_fu_1625_p1 = shl_ln96_1_reg_2224[11:0];

assign trunc_ln96_140_fu_1634_p1 = shl_ln96_1_reg_2224[14:0];

assign trunc_ln96_141_fu_1643_p1 = shl_ln96_1_reg_2224[17:0];

assign trunc_ln96_142_fu_1652_p1 = shl_ln96_1_reg_2224[20:0];

assign trunc_ln96_143_fu_1661_p1 = shl_ln96_1_reg_2224[23:0];

assign trunc_ln96_144_fu_1670_p1 = shl_ln96_1_reg_2224[26:0];

assign trunc_ln96_145_fu_1679_p1 = shl_ln96_1_reg_2224[29:0];

assign trunc_ln96_146_fu_1688_p1 = shl_ln96_1_reg_2224[32:0];

assign trunc_ln96_147_fu_1697_p1 = shl_ln96_1_reg_2224[35:0];

assign trunc_ln96_148_fu_1706_p1 = shl_ln96_1_reg_2224[38:0];

assign trunc_ln96_149_fu_1715_p1 = shl_ln96_1_reg_2224[41:0];

assign trunc_ln96_150_fu_1724_p1 = shl_ln96_1_reg_2224[44:0];

assign trunc_ln96_151_fu_1733_p1 = shl_ln96_1_reg_2224[47:0];

assign trunc_ln96_152_fu_1742_p1 = shl_ln96_1_reg_2224[50:0];

assign trunc_ln96_153_fu_1135_p1 = shl_ln96_1_fu_899_p2[53:0];

assign trunc_ln96_154_fu_1145_p1 = shl_ln96_1_fu_899_p2[56:0];

assign trunc_ln96_155_fu_1155_p1 = shl_ln96_1_fu_899_p2[59:0];

assign trunc_ln96_156_fu_1165_p1 = shl_ln96_1_fu_899_p2[62:0];

assign trunc_ln96_157_fu_1175_p1 = shl_ln96_1_fu_899_p2[65:0];

assign trunc_ln96_158_fu_1185_p1 = shl_ln96_1_fu_899_p2[68:0];

assign trunc_ln96_159_fu_1195_p1 = shl_ln96_1_fu_899_p2[71:0];

assign trunc_ln96_160_fu_1205_p1 = shl_ln96_1_fu_899_p2[74:0];

assign trunc_ln96_161_fu_1215_p1 = shl_ln96_1_fu_899_p2[77:0];

assign trunc_ln96_162_fu_1225_p1 = shl_ln96_1_fu_899_p2[80:0];

assign trunc_ln96_82_fu_905_p1 = shl_ln96_fu_890_p2[2:0];

assign trunc_ln96_83_fu_909_p1 = shl_ln96_fu_890_p2[5:0];

assign trunc_ln96_84_fu_913_p1 = shl_ln96_fu_890_p2[8:0];

assign trunc_ln96_85_fu_1451_p1 = shl_ln96_reg_2206[11:0];

assign trunc_ln96_86_fu_1454_p1 = shl_ln96_reg_2206[14:0];

assign trunc_ln96_87_fu_1457_p1 = shl_ln96_reg_2206[17:0];

assign trunc_ln96_88_fu_1460_p1 = shl_ln96_reg_2206[20:0];

assign trunc_ln96_89_fu_1463_p1 = shl_ln96_reg_2206[23:0];

assign trunc_ln96_90_fu_1466_p1 = shl_ln96_reg_2206[26:0];

assign trunc_ln96_91_fu_1469_p1 = shl_ln96_reg_2206[29:0];

assign trunc_ln96_92_fu_1472_p1 = shl_ln96_reg_2206[32:0];

assign trunc_ln96_93_fu_1475_p1 = shl_ln96_reg_2206[35:0];

assign trunc_ln96_94_fu_1478_p1 = shl_ln96_reg_2206[38:0];

assign trunc_ln96_95_fu_1481_p1 = shl_ln96_reg_2206[41:0];

assign trunc_ln96_96_fu_1484_p1 = shl_ln96_reg_2206[44:0];

assign trunc_ln96_97_fu_1487_p1 = shl_ln96_reg_2206[47:0];

assign trunc_ln96_98_fu_1490_p1 = shl_ln96_reg_2206[50:0];

assign trunc_ln96_99_fu_917_p1 = shl_ln96_fu_890_p2[53:0];

assign trunc_ln96_fu_678_p1 = select_ln87_fu_658_p3[1:0];

assign vq_sm_transpose_head2_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln100_25_reg_2312}, {trunc_ln100_24_reg_2307}}, {trunc_ln100_23_reg_2302}}, {trunc_ln100_22_reg_2297}}, {trunc_ln100_21_reg_2292}}, {trunc_ln100_20_reg_2287}}, {trunc_ln100_19_reg_2282}}, {trunc_ln100_18_reg_2277}}, {trunc_ln100_17_reg_2272}}, {trunc_ln100_16_reg_2267}}, {trunc_ln100_15_reg_2262}}, {trunc_ln100_14_fu_1959_p4}}, {trunc_ln100_13_fu_1949_p4}}, {trunc_ln100_12_fu_1939_p4}}, {trunc_ln100_11_fu_1929_p4}}, {trunc_ln100_10_fu_1919_p4}}, {trunc_ln100_s_fu_1909_p4}}, {trunc_ln100_9_fu_1899_p4}}, {trunc_ln100_8_fu_1889_p4}}, {trunc_ln100_7_fu_1879_p4}}, {trunc_ln100_6_fu_1869_p4}}, {trunc_ln100_5_fu_1859_p4}}, {trunc_ln100_4_fu_1849_p4}}, {trunc_ln100_3_fu_1839_p4}}, {trunc_ln100_2_fu_1829_p4}}, {trunc_ln100_1_reg_2257}}, {trunc_ln3_reg_2252}}, {or_ln100_fu_1969_p2}};

assign xor_ln85_fu_522_p2 = (icmp_ln86_reg_2099 ^ 1'd1);

assign xor_ln86_fu_619_p2 = (icmp_ln87_reg_2114 ^ 1'd1);

assign xor_ln96_10_fu_1053_p2 = (trunc_ln96_100_fu_921_p1 ^ 57'd126100789566373888);

assign xor_ln96_11_fu_1063_p2 = (trunc_ln96_99_fu_917_p1 ^ 54'd15762598695796736);

assign xor_ln96_12_fu_1493_p2 = (trunc_ln96_98_fu_1490_p1 ^ 51'd1970324836974592);

assign xor_ln96_13_fu_1502_p2 = (trunc_ln96_97_fu_1487_p1 ^ 48'd246290604621824);

assign xor_ln96_14_fu_1511_p2 = (trunc_ln96_96_fu_1484_p1 ^ 45'd30786325577728);

assign xor_ln96_15_fu_1520_p2 = (trunc_ln96_95_fu_1481_p1 ^ 42'd3848290697216);

assign xor_ln96_16_fu_1529_p2 = (trunc_ln96_94_fu_1478_p1 ^ 39'd481036337152);

assign xor_ln96_17_fu_1538_p2 = (trunc_ln96_93_fu_1475_p1 ^ 36'd60129542144);

assign xor_ln96_18_fu_1547_p2 = (trunc_ln96_92_fu_1472_p1 ^ 33'd7516192768);

assign xor_ln96_19_fu_1556_p2 = (trunc_ln96_91_fu_1469_p1 ^ 30'd939524096);

assign xor_ln96_1_fu_963_p2 = (trunc_ln96_82_fu_905_p1 ^ 3'd7);

assign xor_ln96_20_fu_1565_p2 = (trunc_ln96_90_fu_1466_p1 ^ 27'd117440512);

assign xor_ln96_21_fu_1574_p2 = (trunc_ln96_89_fu_1463_p1 ^ 24'd14680064);

assign xor_ln96_22_fu_1583_p2 = (trunc_ln96_88_fu_1460_p1 ^ 21'd1835008);

assign xor_ln96_23_fu_1592_p2 = (trunc_ln96_87_fu_1457_p1 ^ 18'd229376);

assign xor_ln96_24_fu_1601_p2 = (trunc_ln96_86_fu_1454_p1 ^ 15'd28672);

assign xor_ln96_25_fu_1610_p2 = (trunc_ln96_85_fu_1451_p1 ^ 12'd3584);

assign xor_ln96_26_fu_1073_p2 = (trunc_ln96_84_fu_913_p1 ^ 9'd448);

assign xor_ln96_27_fu_1083_p2 = (trunc_ln96_83_fu_909_p1 ^ 6'd56);

assign xor_ln96_2_fu_973_p2 = (trunc_ln96_108_fu_953_p1 ^ 81'd2115620184325601055735808);

assign xor_ln96_3_fu_983_p2 = (trunc_ln96_107_fu_949_p1 ^ 78'd264452523040700131966976);

assign xor_ln96_4_fu_993_p2 = (trunc_ln96_106_fu_945_p1 ^ 75'd33056565380087516495872);

assign xor_ln96_5_fu_1003_p2 = (trunc_ln96_105_fu_941_p1 ^ 72'd4132070672510939561984);

assign xor_ln96_6_fu_1013_p2 = (trunc_ln96_104_fu_937_p1 ^ 69'd516508834063867445248);

assign xor_ln96_7_fu_1023_p2 = (trunc_ln96_103_fu_933_p1 ^ 66'd64563604257983430656);

assign xor_ln96_8_fu_1033_p2 = (trunc_ln96_102_fu_929_p1 ^ 63'd8070450532247928832);

assign xor_ln96_9_fu_1043_p2 = (trunc_ln96_101_fu_925_p1 ^ 60'd1008806316530991104);

assign xor_ln96_fu_957_p2 = (shl_ln96_fu_890_p2 ^ 84'd19342813113834066795298815);

assign zext_ln85_fu_743_p1 = select_ln85_2_fu_736_p3;

assign zext_ln87_1_fu_775_p1 = select_ln87_1_reg_2136;

assign zext_ln87_fu_772_p1 = select_ln87_1_reg_2136;

assign zext_ln88_fu_789_p1 = select_ln87_reg_2130;

assign zext_ln93_fu_850_p1 = tmp_5_fu_844_p3;

assign zext_ln96_1_fu_896_p1 = buffer_load_reg_2178;

assign zext_ln96_3_fu_886_p1 = $unsigned(sext_ln96_2_fu_883_p1);

assign zext_ln96_fu_805_p1 = shl_ln96_2_fu_798_p3;

endmodule //ATTN11_reorder_45_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_8
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        unpacked_stream_dout,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_empty_n,
        unpacked_stream_read,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream_dout;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_empty_n;
output   unpacked_stream_read;
output  [9:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [2:0] buffer_r_d1;

reg ap_idle;
reg unpacked_stream_read;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_201_p2;
reg   [0:0] icmp_ln73_reg_466;
wire   [6:0] select_ln72_fu_269_p3;
reg   [6:0] select_ln72_reg_474;
wire   [0:0] and_ln72_fu_287_p2;
reg   [0:0] and_ln72_reg_479;
wire   [2:0] select_ln72_1_fu_293_p3;
reg   [2:0] select_ln72_1_reg_484;
wire   [6:0] add_ln73_fu_300_p2;
reg   [6:0] add_ln73_reg_489;
wire   [1:0] select_ln73_fu_311_p3;
reg   [1:0] select_ln73_reg_494;
wire   [9:0] add_ln78_fu_364_p2;
reg   [9:0] add_ln78_reg_500;
reg   [2:0] unpacked_stream_read_reg_505;
wire   [63:0] zext_ln78_fu_401_p1;
reg   [1:0] tip_fu_74;
wire   [1:0] add_ln74_fu_372_p2;
reg   [1:0] ap_sig_allocacmp_tip_load;
wire    ap_loop_init;
reg   [6:0] cit_fu_78;
wire   [6:0] select_ln73_1_fu_331_p3;
reg   [6:0] ap_sig_allocacmp_cit_load;
reg   [8:0] indvar_flatten_fu_82;
wire   [8:0] select_ln73_2_fu_213_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] tp_tip_fu_86;
reg   [9:0] indvar_flatten12_fu_90;
wire   [9:0] add_ln72_1_fu_183_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
wire   [8:0] add_ln73_1_fu_207_p2;
wire   [0:0] icmp_ln74_fu_281_p2;
wire   [0:0] xor_ln72_fu_276_p2;
wire   [2:0] add_ln72_fu_263_p2;
wire   [0:0] or_ln73_fu_306_p2;
wire   [3:0] tmp_fu_336_p3;
wire   [3:0] zext_ln74_fu_347_p1;
wire   [3:0] empty_fu_350_p2;
wire   [9:0] tmp_s_fu_356_p3;
wire   [9:0] zext_ln74_1_fu_343_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 tip_fu_74 = 2'd0;
//#0 cit_fu_78 = 7'd0;
//#0 indvar_flatten_fu_82 = 9'd0;
//#0 tp_tip_fu_86 = 3'd0;
//#0 indvar_flatten12_fu_90 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cit_fu_78 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cit_fu_78 <= select_ln73_1_fu_331_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_90 <= add_ln72_1_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_90 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= select_ln73_2_fu_213_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tip_fu_74 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            tip_fu_74 <= add_ln74_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tp_tip_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tp_tip_fu_86 <= select_ln72_1_fu_293_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln73_reg_489 <= add_ln73_fu_300_p2;
        and_ln72_reg_479 <= and_ln72_fu_287_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln73_reg_466 <= icmp_ln73_fu_201_p2;
        select_ln72_1_reg_484 <= select_ln72_1_fu_293_p3;
        select_ln72_reg_474 <= select_ln72_fu_269_p3;
        select_ln73_reg_494 <= select_ln73_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln78_reg_500 <= add_ln78_fu_364_p2;
        unpacked_stream_read_reg_505 <= unpacked_stream_dout;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_cit_load = select_ln73_1_fu_331_p3;
    end else begin
        ap_sig_allocacmp_cit_load = cit_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_tip_load = add_ln74_fu_372_p2;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_blk_n = unpacked_stream_empty_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        unpacked_stream_read = 1'b1;
    end else begin
        unpacked_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_1_fu_183_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln72_fu_263_p2 = (tp_tip_fu_86 + 3'd1);

assign add_ln73_1_fu_207_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln73_fu_300_p2 = (select_ln72_fu_269_p3 + 7'd1);

assign add_ln74_fu_372_p2 = (select_ln73_reg_494 + 2'd1);

assign add_ln78_fu_364_p2 = (tmp_s_fu_356_p3 + zext_ln74_1_fu_343_p1);

assign and_ln72_fu_287_p2 = (xor_ln72_fu_276_p2 & icmp_ln74_fu_281_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (unpacked_stream_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address1 = zext_ln78_fu_401_p1;

assign buffer_r_d1 = unpacked_stream_read_reg_505;

assign empty_fu_350_p2 = (tmp_fu_336_p3 + zext_ln74_fu_347_p1);

assign icmp_ln72_fu_189_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_201_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_281_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln73_fu_306_p2 = (icmp_ln73_reg_466 | and_ln72_fu_287_p2);

assign select_ln72_1_fu_293_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? add_ln72_fu_263_p2 : tp_tip_fu_86);

assign select_ln72_fu_269_p3 = ((icmp_ln73_reg_466[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_cit_load);

assign select_ln73_1_fu_331_p3 = ((and_ln72_reg_479[0:0] == 1'b1) ? add_ln73_reg_489 : select_ln72_reg_474);

assign select_ln73_2_fu_213_p3 = ((icmp_ln73_fu_201_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_1_fu_207_p2);

assign select_ln73_fu_311_p3 = ((or_ln73_fu_306_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign tmp_fu_336_p3 = {{select_ln72_1_reg_484}, {1'd0}};

assign tmp_s_fu_356_p3 = {{empty_fu_350_p2}, {6'd0}};

assign xor_ln72_fu_276_p2 = (icmp_ln73_reg_466 ^ 1'd1);

assign zext_ln74_1_fu_343_p1 = select_ln73_1_fu_331_p3;

assign zext_ln74_fu_347_p1 = select_ln73_reg_494;

assign zext_ln78_fu_401_p1 = add_ln78_reg_500;

endmodule //ATTN11_reorder_Pipeline_VITIS_LOOP_72_2_VITIS_LOOP_73_3_VITIS_LOOP_74_4
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vq_sm_transpose_head3_din,
        vq_sm_transpose_head3_num_data_valid,
        vq_sm_transpose_head3_fifo_cap,
        vq_sm_transpose_head3_full_n,
        vq_sm_transpose_head3_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        vec_o_4_out_i,
        vec_o_4_out_o,
        vec_o_4_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [83:0] vq_sm_transpose_head3_din;
input  [9:0] vq_sm_transpose_head3_num_data_valid;
input  [9:0] vq_sm_transpose_head3_fifo_cap;
input   vq_sm_transpose_head3_full_n;
output   vq_sm_transpose_head3_write;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [2:0] buffer_r_q0;
input  [83:0] vec_o_4_out_i;
output  [83:0] vec_o_4_out_o;
output   vec_o_4_out_o_ap_vld;

reg ap_idle;
reg vq_sm_transpose_head3_write;
reg buffer_r_ce0;
reg[83:0] vec_o_4_out_o;
reg vec_o_4_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg   [0:0] and_ln99_reg_2169;
reg   [0:0] and_ln99_reg_2169_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_466_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    vq_sm_transpose_head3_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_2095;
wire   [0:0] icmp_ln86_fu_472_p2;
reg   [0:0] icmp_ln86_reg_2099;
reg   [0:0] icmp_ln86_reg_2099_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_2099_pp0_iter2_reg;
wire   [0:0] xor_ln85_fu_522_p2;
reg   [0:0] xor_ln85_reg_2109;
wire   [0:0] icmp_ln87_fu_527_p2;
reg   [0:0] icmp_ln87_reg_2114;
wire   [0:0] and_ln85_1_fu_533_p2;
reg   [0:0] and_ln85_1_reg_2119;
wire   [0:0] or_ln86_fu_539_p2;
reg   [0:0] or_ln86_reg_2125;
wire   [2:0] select_ln87_fu_658_p3;
reg   [2:0] select_ln87_reg_2130;
wire   [2:0] select_ln87_1_fu_666_p3;
reg   [2:0] select_ln87_1_reg_2136;
wire   [3:0] empty_1062_fu_674_p1;
reg   [3:0] empty_1062_reg_2143;
wire   [1:0] trunc_ln96_fu_678_p1;
reg   [1:0] trunc_ln96_reg_2148;
wire   [3:0] empty_1063_fu_778_p2;
reg   [3:0] empty_1063_reg_2153;
wire   [5:0] add_ln93_fu_792_p2;
reg   [5:0] add_ln93_reg_2158;
wire  signed [5:0] add_ln96_fu_815_p2;
reg  signed [5:0] add_ln96_reg_2163;
reg  signed [5:0] add_ln96_reg_2163_pp0_iter4_reg;
wire   [0:0] and_ln99_fu_826_p2;
reg   [0:0] and_ln99_reg_2169_pp0_iter4_reg;
reg   [0:0] and_ln99_reg_2169_pp0_iter5_reg;
reg   [2:0] buffer_load_reg_2178;
wire   [7:0] sub_ln96_1_fu_869_p2;
reg   [7:0] sub_ln96_1_reg_2183;
reg   [83:0] vec_o_4_out_load_reg_2188;
wire   [83:0] shl_ln96_fu_890_p2;
reg   [83:0] shl_ln96_reg_2206;
wire   [83:0] shl_ln96_1_fu_899_p2;
reg   [83:0] shl_ln96_1_reg_2224;
wire   [2:0] and_ln96_1_fu_1099_p2;
reg   [2:0] and_ln96_1_reg_2242;
wire   [2:0] trunc_ln96_55_fu_1105_p1;
reg   [2:0] trunc_ln96_55_reg_2247;
reg   [2:0] trunc_ln8_reg_2252;
reg   [2:0] trunc_ln100_s_reg_2257;
reg   [2:0] trunc_ln100_15_reg_2262;
reg   [2:0] trunc_ln100_16_reg_2267;
reg   [2:0] trunc_ln100_17_reg_2272;
reg   [2:0] trunc_ln100_18_reg_2277;
reg   [2:0] trunc_ln100_19_reg_2282;
reg   [2:0] trunc_ln100_20_reg_2287;
reg   [2:0] trunc_ln100_21_reg_2292;
reg   [2:0] trunc_ln100_22_reg_2297;
reg   [2:0] trunc_ln100_23_reg_2302;
reg   [2:0] trunc_ln100_24_reg_2307;
reg   [2:0] trunc_ln100_25_reg_2312;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln93_fu_850_p1;
wire   [83:0] or_ln96_fu_1229_p2;
reg   [2:0] cop_fu_316;
wire   [2:0] add_ln88_fu_682_p2;
wire    ap_loop_init;
reg   [2:0] ATTN11_1_fu_320;
reg   [5:0] indvar_flatten19_fu_324;
wire   [5:0] select_ln87_2_fu_550_p3;
reg   [4:0] cot_fu_328;
wire   [4:0] select_ln86_1_fu_635_p3;
reg   [9:0] indvar_flatten34_fu_332;
wire   [9:0] select_ln86_2_fu_484_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten34_load;
reg   [1:0] tp_ATTN11_fu_336;
wire   [1:0] select_ln85_1_fu_736_p3;
reg   [9:0] indvar_flatten59_fu_340;
wire   [9:0] add_ln85_1_fu_460_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten59_load;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln86_1_fu_478_p2;
wire   [5:0] add_ln87_1_fu_544_p2;
wire   [0:0] icmp_ln88_fu_595_p2;
wire   [4:0] select_ln85_fu_588_p3;
wire   [0:0] xor_ln86_fu_619_p2;
wire   [0:0] and_ln85_fu_601_p2;
wire   [0:0] or_ln86_1_fu_624_p2;
wire   [4:0] add_ln86_fu_606_p2;
wire   [2:0] select_ln86_fu_612_p3;
wire   [0:0] and_ln86_fu_629_p2;
wire   [0:0] or_ln87_fu_648_p2;
wire   [0:0] or_ln87_1_fu_653_p2;
wire   [2:0] add_ln87_fu_642_p2;
wire   [1:0] add_ln85_fu_730_p2;
wire   [0:0] empty_fu_747_p1;
wire   [3:0] p_shl_fu_751_p3;
wire   [3:0] zext_ln85_fu_743_p1;
wire   [3:0] empty_1061_fu_759_p2;
wire   [3:0] zext_ln87_1_fu_775_p1;
wire   [5:0] tmp_s_fu_765_p3;
wire   [5:0] zext_ln88_fu_789_p1;
wire   [4:0] shl_ln96_6_fu_798_p3;
wire   [5:0] zext_ln96_fu_805_p1;
wire   [5:0] sub_ln96_fu_809_p2;
wire   [5:0] zext_ln87_fu_772_p1;
wire   [0:0] cmp69_fu_784_p2;
wire   [0:0] icmp_ln99_fu_821_p2;
wire   [9:0] tmp_1_fu_844_p3;
wire   [7:0] shl_ln96_7_fu_862_p3;
wire  signed [7:0] sext_ln96_fu_859_p1;
wire  signed [63:0] sext_ln96_1_fu_883_p1;
wire   [83:0] zext_ln96_1_fu_886_p1;
wire   [83:0] zext_ln96_2_fu_896_p1;
wire   [2:0] trunc_ln96_1_fu_905_p1;
wire   [80:0] trunc_ln96_27_fu_953_p1;
wire   [77:0] trunc_ln96_26_fu_949_p1;
wire   [74:0] trunc_ln96_25_fu_945_p1;
wire   [71:0] trunc_ln96_24_fu_941_p1;
wire   [68:0] trunc_ln96_23_fu_937_p1;
wire   [65:0] trunc_ln96_22_fu_933_p1;
wire   [62:0] trunc_ln96_21_fu_929_p1;
wire   [59:0] trunc_ln96_20_fu_925_p1;
wire   [56:0] trunc_ln96_19_fu_921_p1;
wire   [53:0] trunc_ln96_18_fu_917_p1;
wire   [8:0] trunc_ln96_3_fu_913_p1;
wire   [5:0] trunc_ln96_2_fu_909_p1;
wire   [83:0] xor_ln96_fu_957_p2;
wire   [2:0] trunc_ln96_28_fu_969_p1;
wire   [2:0] xor_ln96_1_fu_963_p2;
wire   [5:0] trunc_ln96_54_fu_1089_p1;
wire   [5:0] xor_ln96_27_fu_1083_p2;
wire   [8:0] trunc_ln96_53_fu_1079_p1;
wire   [8:0] xor_ln96_26_fu_1073_p2;
wire   [53:0] trunc_ln96_38_fu_1069_p1;
wire   [53:0] xor_ln96_11_fu_1063_p2;
wire   [56:0] trunc_ln96_37_fu_1059_p1;
wire   [56:0] xor_ln96_10_fu_1053_p2;
wire   [59:0] trunc_ln96_36_fu_1049_p1;
wire   [59:0] xor_ln96_9_fu_1043_p2;
wire   [62:0] trunc_ln96_35_fu_1039_p1;
wire   [62:0] xor_ln96_8_fu_1033_p2;
wire   [65:0] trunc_ln96_34_fu_1029_p1;
wire   [65:0] xor_ln96_7_fu_1023_p2;
wire   [68:0] trunc_ln96_33_fu_1019_p1;
wire   [68:0] xor_ln96_6_fu_1013_p2;
wire   [71:0] trunc_ln96_32_fu_1009_p1;
wire   [71:0] xor_ln96_5_fu_1003_p2;
wire   [74:0] trunc_ln96_31_fu_999_p1;
wire   [74:0] xor_ln96_4_fu_993_p2;
wire   [77:0] trunc_ln96_30_fu_989_p1;
wire   [77:0] xor_ln96_3_fu_983_p2;
wire   [80:0] trunc_ln96_29_fu_979_p1;
wire   [80:0] xor_ln96_2_fu_973_p2;
wire   [83:0] and_ln96_fu_1093_p2;
wire   [80:0] trunc_ln96_81_fu_1225_p1;
wire   [80:0] and_ln96_27_fu_1219_p2;
wire   [77:0] trunc_ln96_80_fu_1215_p1;
wire   [77:0] and_ln96_26_fu_1209_p2;
wire   [74:0] trunc_ln96_79_fu_1205_p1;
wire   [74:0] and_ln96_25_fu_1199_p2;
wire   [71:0] trunc_ln96_78_fu_1195_p1;
wire   [71:0] and_ln96_24_fu_1189_p2;
wire   [68:0] trunc_ln96_77_fu_1185_p1;
wire   [68:0] and_ln96_23_fu_1179_p2;
wire   [65:0] trunc_ln96_76_fu_1175_p1;
wire   [65:0] and_ln96_22_fu_1169_p2;
wire   [62:0] trunc_ln96_75_fu_1165_p1;
wire   [62:0] and_ln96_21_fu_1159_p2;
wire   [59:0] trunc_ln96_74_fu_1155_p1;
wire   [59:0] and_ln96_20_fu_1149_p2;
wire   [56:0] trunc_ln96_73_fu_1145_p1;
wire   [56:0] and_ln96_19_fu_1139_p2;
wire   [53:0] trunc_ln96_72_fu_1135_p1;
wire   [53:0] and_ln96_18_fu_1129_p2;
wire   [8:0] trunc_ln96_57_fu_1125_p1;
wire   [8:0] and_ln96_3_fu_1119_p2;
wire   [5:0] trunc_ln96_56_fu_1115_p1;
wire   [5:0] and_ln96_2_fu_1109_p2;
wire   [5:0] or_ln99_25_fu_1301_p2;
wire   [8:0] or_ln99_24_fu_1295_p2;
wire   [53:0] or_ln99_9_fu_1289_p2;
wire   [56:0] or_ln99_8_fu_1283_p2;
wire   [59:0] or_ln99_7_fu_1277_p2;
wire   [62:0] or_ln99_6_fu_1271_p2;
wire   [65:0] or_ln99_5_fu_1265_p2;
wire   [68:0] or_ln99_4_fu_1259_p2;
wire   [71:0] or_ln99_3_fu_1253_p2;
wire   [74:0] or_ln99_2_fu_1247_p2;
wire   [77:0] or_ln99_1_fu_1241_p2;
wire   [80:0] or_ln99_fu_1235_p2;
wire   [50:0] trunc_ln96_17_fu_1490_p1;
wire   [47:0] trunc_ln96_16_fu_1487_p1;
wire   [44:0] trunc_ln96_15_fu_1484_p1;
wire   [41:0] trunc_ln96_14_fu_1481_p1;
wire   [38:0] trunc_ln96_13_fu_1478_p1;
wire   [35:0] trunc_ln96_12_fu_1475_p1;
wire   [32:0] trunc_ln96_11_fu_1472_p1;
wire   [29:0] trunc_ln96_10_fu_1469_p1;
wire   [26:0] trunc_ln96_9_fu_1466_p1;
wire   [23:0] trunc_ln96_8_fu_1463_p1;
wire   [20:0] trunc_ln96_7_fu_1460_p1;
wire   [17:0] trunc_ln96_6_fu_1457_p1;
wire   [14:0] trunc_ln96_5_fu_1454_p1;
wire   [11:0] trunc_ln96_4_fu_1451_p1;
wire   [11:0] trunc_ln96_52_fu_1616_p1;
wire   [11:0] xor_ln96_25_fu_1610_p2;
wire   [14:0] trunc_ln96_51_fu_1607_p1;
wire   [14:0] xor_ln96_24_fu_1601_p2;
wire   [17:0] trunc_ln96_50_fu_1598_p1;
wire   [17:0] xor_ln96_23_fu_1592_p2;
wire   [20:0] trunc_ln96_49_fu_1589_p1;
wire   [20:0] xor_ln96_22_fu_1583_p2;
wire   [23:0] trunc_ln96_48_fu_1580_p1;
wire   [23:0] xor_ln96_21_fu_1574_p2;
wire   [26:0] trunc_ln96_47_fu_1571_p1;
wire   [26:0] xor_ln96_20_fu_1565_p2;
wire   [29:0] trunc_ln96_46_fu_1562_p1;
wire   [29:0] xor_ln96_19_fu_1556_p2;
wire   [32:0] trunc_ln96_45_fu_1553_p1;
wire   [32:0] xor_ln96_18_fu_1547_p2;
wire   [35:0] trunc_ln96_44_fu_1544_p1;
wire   [35:0] xor_ln96_17_fu_1538_p2;
wire   [38:0] trunc_ln96_43_fu_1535_p1;
wire   [38:0] xor_ln96_16_fu_1529_p2;
wire   [41:0] trunc_ln96_42_fu_1526_p1;
wire   [41:0] xor_ln96_15_fu_1520_p2;
wire   [44:0] trunc_ln96_41_fu_1517_p1;
wire   [44:0] xor_ln96_14_fu_1511_p2;
wire   [47:0] trunc_ln96_40_fu_1508_p1;
wire   [47:0] xor_ln96_13_fu_1502_p2;
wire   [50:0] trunc_ln96_39_fu_1499_p1;
wire   [50:0] xor_ln96_12_fu_1493_p2;
wire   [50:0] trunc_ln96_71_fu_1742_p1;
wire   [50:0] and_ln96_17_fu_1736_p2;
wire   [47:0] trunc_ln96_70_fu_1733_p1;
wire   [47:0] and_ln96_16_fu_1727_p2;
wire   [44:0] trunc_ln96_69_fu_1724_p1;
wire   [44:0] and_ln96_15_fu_1718_p2;
wire   [41:0] trunc_ln96_68_fu_1715_p1;
wire   [41:0] and_ln96_14_fu_1709_p2;
wire   [38:0] trunc_ln96_67_fu_1706_p1;
wire   [38:0] and_ln96_13_fu_1700_p2;
wire   [35:0] trunc_ln96_66_fu_1697_p1;
wire   [35:0] and_ln96_12_fu_1691_p2;
wire   [32:0] trunc_ln96_65_fu_1688_p1;
wire   [32:0] and_ln96_11_fu_1682_p2;
wire   [29:0] trunc_ln96_64_fu_1679_p1;
wire   [29:0] and_ln96_10_fu_1673_p2;
wire   [26:0] trunc_ln96_63_fu_1670_p1;
wire   [26:0] and_ln96_9_fu_1664_p2;
wire   [23:0] trunc_ln96_62_fu_1661_p1;
wire   [23:0] and_ln96_8_fu_1655_p2;
wire   [20:0] trunc_ln96_61_fu_1652_p1;
wire   [20:0] and_ln96_7_fu_1646_p2;
wire   [17:0] trunc_ln96_60_fu_1643_p1;
wire   [17:0] and_ln96_6_fu_1637_p2;
wire   [14:0] trunc_ln96_59_fu_1634_p1;
wire   [14:0] and_ln96_5_fu_1628_p2;
wire   [11:0] trunc_ln96_58_fu_1625_p1;
wire   [11:0] and_ln96_4_fu_1619_p2;
wire   [11:0] or_ln99_23_fu_1823_p2;
wire   [14:0] or_ln99_22_fu_1817_p2;
wire   [17:0] or_ln99_21_fu_1811_p2;
wire   [20:0] or_ln99_20_fu_1805_p2;
wire   [23:0] or_ln99_19_fu_1799_p2;
wire   [26:0] or_ln99_18_fu_1793_p2;
wire   [29:0] or_ln99_17_fu_1787_p2;
wire   [32:0] or_ln99_16_fu_1781_p2;
wire   [35:0] or_ln99_15_fu_1775_p2;
wire   [38:0] or_ln99_14_fu_1769_p2;
wire   [41:0] or_ln99_13_fu_1763_p2;
wire   [44:0] or_ln99_12_fu_1757_p2;
wire   [47:0] or_ln99_11_fu_1751_p2;
wire   [50:0] or_ln99_10_fu_1745_p2;
wire   [2:0] trunc_ln100_14_fu_1959_p4;
wire   [2:0] trunc_ln100_13_fu_1949_p4;
wire   [2:0] trunc_ln100_12_fu_1939_p4;
wire   [2:0] trunc_ln100_11_fu_1929_p4;
wire   [2:0] trunc_ln100_10_fu_1919_p4;
wire   [2:0] trunc_ln100_9_fu_1909_p4;
wire   [2:0] trunc_ln100_8_fu_1899_p4;
wire   [2:0] trunc_ln100_7_fu_1889_p4;
wire   [2:0] trunc_ln100_6_fu_1879_p4;
wire   [2:0] trunc_ln100_5_fu_1869_p4;
wire   [2:0] trunc_ln100_4_fu_1859_p4;
wire   [2:0] trunc_ln100_3_fu_1849_p4;
wire   [2:0] trunc_ln100_2_fu_1839_p4;
wire   [2:0] trunc_ln100_1_fu_1829_p4;
wire   [2:0] or_ln100_fu_1969_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 cop_fu_316 = 3'd0;
//#0 ATTN11_1_fu_320 = 3'd0;
//#0 indvar_flatten19_fu_324 = 6'd0;
//#0 cot_fu_328 = 5'd0;
//#0 indvar_flatten34_fu_332 = 10'd0;
//#0 tp_ATTN11_fu_336 = 2'd0;
//#0 indvar_flatten59_fu_340 = 10'd0;
//#0 ap_done_reg = 1'b0;
end

ATTN11_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cop_fu_316 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cop_fu_316 <= add_ln88_fu_682_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            cot_fu_328 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            cot_fu_328 <= select_ln86_1_fu_635_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_324 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln85_reg_2095 == 1'd0))) begin
            indvar_flatten19_fu_324 <= select_ln87_2_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_332 <= select_ln86_2_fu_484_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_332 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln85_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_340 <= add_ln85_1_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_340 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ATTN11_1_fu_320 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ATTN11_1_fu_320 <= select_ln87_1_fu_666_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tp_ATTN11_fu_336 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tp_ATTN11_fu_336 <= select_ln85_1_fu_736_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln93_reg_2158 <= add_ln93_fu_792_p2;
        add_ln96_reg_2163 <= add_ln96_fu_815_p2;
        add_ln96_reg_2163_pp0_iter4_reg <= add_ln96_reg_2163;
        and_ln96_1_reg_2242 <= and_ln96_1_fu_1099_p2;
        and_ln99_reg_2169 <= and_ln99_fu_826_p2;
        and_ln99_reg_2169_pp0_iter4_reg <= and_ln99_reg_2169;
        and_ln99_reg_2169_pp0_iter5_reg <= and_ln99_reg_2169_pp0_iter4_reg;
        and_ln99_reg_2169_pp0_iter6_reg <= and_ln99_reg_2169_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        buffer_load_reg_2178 <= buffer_r_q0;
        empty_1062_reg_2143 <= empty_1062_fu_674_p1;
        empty_1063_reg_2153 <= empty_1063_fu_778_p2;
        icmp_ln86_reg_2099_pp0_iter2_reg <= icmp_ln86_reg_2099_pp0_iter1_reg;
        select_ln87_1_reg_2136 <= select_ln87_1_fu_666_p3;
        select_ln87_reg_2130 <= select_ln87_fu_658_p3;
        shl_ln96_1_reg_2224 <= shl_ln96_1_fu_899_p2;
        shl_ln96_reg_2206 <= shl_ln96_fu_890_p2;
        sub_ln96_1_reg_2183 <= sub_ln96_1_fu_869_p2;
        trunc_ln100_15_reg_2262 <= {{or_ln99_9_fu_1289_p2[53:51]}};
        trunc_ln100_16_reg_2267 <= {{or_ln99_8_fu_1283_p2[56:54]}};
        trunc_ln100_17_reg_2272 <= {{or_ln99_7_fu_1277_p2[59:57]}};
        trunc_ln100_18_reg_2277 <= {{or_ln99_6_fu_1271_p2[62:60]}};
        trunc_ln100_19_reg_2282 <= {{or_ln99_5_fu_1265_p2[65:63]}};
        trunc_ln100_20_reg_2287 <= {{or_ln99_4_fu_1259_p2[68:66]}};
        trunc_ln100_21_reg_2292 <= {{or_ln99_3_fu_1253_p2[71:69]}};
        trunc_ln100_22_reg_2297 <= {{or_ln99_2_fu_1247_p2[74:72]}};
        trunc_ln100_23_reg_2302 <= {{or_ln99_1_fu_1241_p2[77:75]}};
        trunc_ln100_24_reg_2307 <= {{or_ln99_fu_1235_p2[80:78]}};
        trunc_ln100_25_reg_2312 <= {{or_ln96_fu_1229_p2[83:81]}};
        trunc_ln100_s_reg_2257 <= {{or_ln99_24_fu_1295_p2[8:6]}};
        trunc_ln8_reg_2252 <= {{or_ln99_25_fu_1301_p2[5:3]}};
        trunc_ln96_55_reg_2247 <= trunc_ln96_55_fu_1105_p1;
        trunc_ln96_reg_2148 <= trunc_ln96_fu_678_p1;
        vec_o_4_out_load_reg_2188 <= vec_o_4_out_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_1_reg_2119 <= and_ln85_1_fu_533_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln85_reg_2095 <= icmp_ln85_fu_466_p2;
        icmp_ln86_reg_2099 <= icmp_ln86_fu_472_p2;
        icmp_ln86_reg_2099_pp0_iter1_reg <= icmp_ln86_reg_2099;
        icmp_ln87_reg_2114 <= icmp_ln87_fu_527_p2;
        or_ln86_reg_2125 <= or_ln86_fu_539_p2;
        xor_ln85_reg_2109 <= xor_ln85_fu_522_p2;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_466_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln85_reg_2095 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_332;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_340;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o = or_ln96_fu_1229_p2;
    end else begin
        vec_o_4_out_o = vec_o_4_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        vec_o_4_out_o_ap_vld = 1'b1;
    end else begin
        vec_o_4_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        vq_sm_transpose_head3_blk_n = vq_sm_transpose_head3_full_n;
    end else begin
        vq_sm_transpose_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        vq_sm_transpose_head3_write = 1'b1;
    end else begin
        vq_sm_transpose_head3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_1_fu_460_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 10'd1);

assign add_ln85_fu_730_p2 = (tp_ATTN11_fu_336 + 2'd1);

assign add_ln86_1_fu_478_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 10'd1);

assign add_ln86_fu_606_p2 = (select_ln85_fu_588_p3 + 5'd1);

assign add_ln87_1_fu_544_p2 = (indvar_flatten19_fu_324 + 6'd1);

assign add_ln87_fu_642_p2 = (select_ln86_fu_612_p3 + 3'd1);

assign add_ln88_fu_682_p2 = (select_ln87_fu_658_p3 + 3'd1);

assign add_ln93_fu_792_p2 = (tmp_s_fu_765_p3 + zext_ln88_fu_789_p1);

assign add_ln96_fu_815_p2 = (sub_ln96_fu_809_p2 + zext_ln87_fu_772_p1);

assign and_ln85_1_fu_533_p2 = (xor_ln85_fu_522_p2 & icmp_ln87_fu_527_p2);

assign and_ln85_fu_601_p2 = (xor_ln85_reg_2109 & icmp_ln88_fu_595_p2);

assign and_ln86_fu_629_p2 = (or_ln86_1_fu_624_p2 & and_ln85_fu_601_p2);

assign and_ln96_10_fu_1673_p2 = (xor_ln96_19_fu_1556_p2 & trunc_ln96_46_fu_1562_p1);

assign and_ln96_11_fu_1682_p2 = (xor_ln96_18_fu_1547_p2 & trunc_ln96_45_fu_1553_p1);

assign and_ln96_12_fu_1691_p2 = (xor_ln96_17_fu_1538_p2 & trunc_ln96_44_fu_1544_p1);

assign and_ln96_13_fu_1700_p2 = (xor_ln96_16_fu_1529_p2 & trunc_ln96_43_fu_1535_p1);

assign and_ln96_14_fu_1709_p2 = (xor_ln96_15_fu_1520_p2 & trunc_ln96_42_fu_1526_p1);

assign and_ln96_15_fu_1718_p2 = (xor_ln96_14_fu_1511_p2 & trunc_ln96_41_fu_1517_p1);

assign and_ln96_16_fu_1727_p2 = (xor_ln96_13_fu_1502_p2 & trunc_ln96_40_fu_1508_p1);

assign and_ln96_17_fu_1736_p2 = (xor_ln96_12_fu_1493_p2 & trunc_ln96_39_fu_1499_p1);

assign and_ln96_18_fu_1129_p2 = (xor_ln96_11_fu_1063_p2 & trunc_ln96_38_fu_1069_p1);

assign and_ln96_19_fu_1139_p2 = (xor_ln96_10_fu_1053_p2 & trunc_ln96_37_fu_1059_p1);

assign and_ln96_1_fu_1099_p2 = (xor_ln96_1_fu_963_p2 & trunc_ln96_28_fu_969_p1);

assign and_ln96_20_fu_1149_p2 = (xor_ln96_9_fu_1043_p2 & trunc_ln96_36_fu_1049_p1);

assign and_ln96_21_fu_1159_p2 = (xor_ln96_8_fu_1033_p2 & trunc_ln96_35_fu_1039_p1);

assign and_ln96_22_fu_1169_p2 = (xor_ln96_7_fu_1023_p2 & trunc_ln96_34_fu_1029_p1);

assign and_ln96_23_fu_1179_p2 = (xor_ln96_6_fu_1013_p2 & trunc_ln96_33_fu_1019_p1);

assign and_ln96_24_fu_1189_p2 = (xor_ln96_5_fu_1003_p2 & trunc_ln96_32_fu_1009_p1);

assign and_ln96_25_fu_1199_p2 = (xor_ln96_4_fu_993_p2 & trunc_ln96_31_fu_999_p1);

assign and_ln96_26_fu_1209_p2 = (xor_ln96_3_fu_983_p2 & trunc_ln96_30_fu_989_p1);

assign and_ln96_27_fu_1219_p2 = (xor_ln96_2_fu_973_p2 & trunc_ln96_29_fu_979_p1);

assign and_ln96_2_fu_1109_p2 = (xor_ln96_27_fu_1083_p2 & trunc_ln96_54_fu_1089_p1);

assign and_ln96_3_fu_1119_p2 = (xor_ln96_26_fu_1073_p2 & trunc_ln96_53_fu_1079_p1);

assign and_ln96_4_fu_1619_p2 = (xor_ln96_25_fu_1610_p2 & trunc_ln96_52_fu_1616_p1);

assign and_ln96_5_fu_1628_p2 = (xor_ln96_24_fu_1601_p2 & trunc_ln96_51_fu_1607_p1);

assign and_ln96_6_fu_1637_p2 = (xor_ln96_23_fu_1592_p2 & trunc_ln96_50_fu_1598_p1);

assign and_ln96_7_fu_1646_p2 = (xor_ln96_22_fu_1583_p2 & trunc_ln96_49_fu_1589_p1);

assign and_ln96_8_fu_1655_p2 = (xor_ln96_21_fu_1574_p2 & trunc_ln96_48_fu_1580_p1);

assign and_ln96_9_fu_1664_p2 = (xor_ln96_20_fu_1565_p2 & trunc_ln96_47_fu_1571_p1);

assign and_ln96_fu_1093_p2 = (xor_ln96_fu_957_p2 & vec_o_4_out_i);

assign and_ln99_fu_826_p2 = (icmp_ln99_fu_821_p2 & cmp69_fu_784_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((1'd1 == and_ln99_reg_2169_pp0_iter6_reg) & (vq_sm_transpose_head3_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buffer_r_address0 = zext_ln93_fu_850_p1;

assign cmp69_fu_784_p2 = ((select_ln87_1_reg_2136 == 3'd6) ? 1'b1 : 1'b0);

assign empty_1061_fu_759_p2 = (p_shl_fu_751_p3 - zext_ln85_fu_743_p1);

assign empty_1062_fu_674_p1 = select_ln86_1_fu_635_p3[3:0];

assign empty_1063_fu_778_p2 = (empty_1061_fu_759_p2 + zext_ln87_1_fu_775_p1);

assign empty_fu_747_p1 = select_ln85_1_fu_736_p3[0:0];

assign icmp_ln85_fu_466_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_472_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_527_p2 = ((indvar_flatten19_fu_324 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_595_p2 = ((cop_fu_316 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_821_p2 = ((select_ln87_reg_2130 == 3'd3) ? 1'b1 : 1'b0);

assign or_ln100_fu_1969_p2 = (trunc_ln96_55_reg_2247 | and_ln96_1_reg_2242);

assign or_ln86_1_fu_624_p2 = (xor_ln86_fu_619_p2 | icmp_ln86_reg_2099_pp0_iter1_reg);

assign or_ln86_fu_539_p2 = (icmp_ln86_reg_2099 | and_ln85_1_fu_533_p2);

assign or_ln87_1_fu_653_p2 = (or_ln87_fu_648_p2 | icmp_ln86_reg_2099_pp0_iter1_reg);

assign or_ln87_fu_648_p2 = (and_ln86_fu_629_p2 | and_ln85_1_reg_2119);

assign or_ln96_fu_1229_p2 = (shl_ln96_1_fu_899_p2 | and_ln96_fu_1093_p2);

assign or_ln99_10_fu_1745_p2 = (trunc_ln96_71_fu_1742_p1 | and_ln96_17_fu_1736_p2);

assign or_ln99_11_fu_1751_p2 = (trunc_ln96_70_fu_1733_p1 | and_ln96_16_fu_1727_p2);

assign or_ln99_12_fu_1757_p2 = (trunc_ln96_69_fu_1724_p1 | and_ln96_15_fu_1718_p2);

assign or_ln99_13_fu_1763_p2 = (trunc_ln96_68_fu_1715_p1 | and_ln96_14_fu_1709_p2);

assign or_ln99_14_fu_1769_p2 = (trunc_ln96_67_fu_1706_p1 | and_ln96_13_fu_1700_p2);

assign or_ln99_15_fu_1775_p2 = (trunc_ln96_66_fu_1697_p1 | and_ln96_12_fu_1691_p2);

assign or_ln99_16_fu_1781_p2 = (trunc_ln96_65_fu_1688_p1 | and_ln96_11_fu_1682_p2);

assign or_ln99_17_fu_1787_p2 = (trunc_ln96_64_fu_1679_p1 | and_ln96_10_fu_1673_p2);

assign or_ln99_18_fu_1793_p2 = (trunc_ln96_63_fu_1670_p1 | and_ln96_9_fu_1664_p2);

assign or_ln99_19_fu_1799_p2 = (trunc_ln96_62_fu_1661_p1 | and_ln96_8_fu_1655_p2);

assign or_ln99_1_fu_1241_p2 = (trunc_ln96_80_fu_1215_p1 | and_ln96_26_fu_1209_p2);

assign or_ln99_20_fu_1805_p2 = (trunc_ln96_61_fu_1652_p1 | and_ln96_7_fu_1646_p2);

assign or_ln99_21_fu_1811_p2 = (trunc_ln96_60_fu_1643_p1 | and_ln96_6_fu_1637_p2);

assign or_ln99_22_fu_1817_p2 = (trunc_ln96_59_fu_1634_p1 | and_ln96_5_fu_1628_p2);

assign or_ln99_23_fu_1823_p2 = (trunc_ln96_58_fu_1625_p1 | and_ln96_4_fu_1619_p2);

assign or_ln99_24_fu_1295_p2 = (trunc_ln96_57_fu_1125_p1 | and_ln96_3_fu_1119_p2);

assign or_ln99_25_fu_1301_p2 = (trunc_ln96_56_fu_1115_p1 | and_ln96_2_fu_1109_p2);

assign or_ln99_2_fu_1247_p2 = (trunc_ln96_79_fu_1205_p1 | and_ln96_25_fu_1199_p2);

assign or_ln99_3_fu_1253_p2 = (trunc_ln96_78_fu_1195_p1 | and_ln96_24_fu_1189_p2);

assign or_ln99_4_fu_1259_p2 = (trunc_ln96_77_fu_1185_p1 | and_ln96_23_fu_1179_p2);

assign or_ln99_5_fu_1265_p2 = (trunc_ln96_76_fu_1175_p1 | and_ln96_22_fu_1169_p2);

assign or_ln99_6_fu_1271_p2 = (trunc_ln96_75_fu_1165_p1 | and_ln96_21_fu_1159_p2);

assign or_ln99_7_fu_1277_p2 = (trunc_ln96_74_fu_1155_p1 | and_ln96_20_fu_1149_p2);

assign or_ln99_8_fu_1283_p2 = (trunc_ln96_73_fu_1145_p1 | and_ln96_19_fu_1139_p2);

assign or_ln99_9_fu_1289_p2 = (trunc_ln96_72_fu_1135_p1 | and_ln96_18_fu_1129_p2);

assign or_ln99_fu_1235_p2 = (trunc_ln96_81_fu_1225_p1 | and_ln96_27_fu_1219_p2);

assign p_shl_fu_751_p3 = {{empty_fu_747_p1}, {3'd0}};

assign select_ln85_1_fu_736_p3 = ((icmp_ln86_reg_2099_pp0_iter2_reg[0:0] == 1'b1) ? add_ln85_fu_730_p2 : tp_ATTN11_fu_336);

assign select_ln85_fu_588_p3 = ((icmp_ln86_reg_2099_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : cot_fu_328);

assign select_ln86_1_fu_635_p3 = ((and_ln85_1_reg_2119[0:0] == 1'b1) ? add_ln86_fu_606_p2 : select_ln85_fu_588_p3);

assign select_ln86_2_fu_484_p3 = ((icmp_ln86_fu_472_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_1_fu_478_p2);

assign select_ln86_fu_612_p3 = ((or_ln86_reg_2125[0:0] == 1'b1) ? 3'd0 : ATTN11_1_fu_320);

assign select_ln87_1_fu_666_p3 = ((and_ln86_fu_629_p2[0:0] == 1'b1) ? add_ln87_fu_642_p2 : select_ln86_fu_612_p3);

assign select_ln87_2_fu_550_p3 = ((or_ln86_fu_539_p2[0:0] == 1'b1) ? 6'd1 : add_ln87_1_fu_544_p2);

assign select_ln87_fu_658_p3 = ((or_ln87_1_fu_653_p2[0:0] == 1'b1) ? 3'd0 : cop_fu_316);

assign sext_ln96_1_fu_883_p1 = $signed(sub_ln96_1_reg_2183);

assign sext_ln96_fu_859_p1 = add_ln96_reg_2163_pp0_iter4_reg;

assign shl_ln96_1_fu_899_p2 = zext_ln96_2_fu_896_p1 << zext_ln96_1_fu_886_p1;

assign shl_ln96_6_fu_798_p3 = {{trunc_ln96_reg_2148}, {3'd0}};

assign shl_ln96_7_fu_862_p3 = {{add_ln96_reg_2163_pp0_iter4_reg}, {2'd0}};

assign shl_ln96_fu_890_p2 = 84'd7 << zext_ln96_1_fu_886_p1;

assign sub_ln96_1_fu_869_p2 = ($signed(shl_ln96_7_fu_862_p3) - $signed(sext_ln96_fu_859_p1));

assign sub_ln96_fu_809_p2 = (zext_ln96_fu_805_p1 - zext_ln88_fu_789_p1);

assign tmp_1_fu_844_p3 = {{empty_1063_reg_2153}, {add_ln93_reg_2158}};

assign tmp_s_fu_765_p3 = {{empty_1062_reg_2143}, {2'd0}};

assign trunc_ln100_10_fu_1919_p4 = {{or_ln99_14_fu_1769_p2[38:36]}};

assign trunc_ln100_11_fu_1929_p4 = {{or_ln99_13_fu_1763_p2[41:39]}};

assign trunc_ln100_12_fu_1939_p4 = {{or_ln99_12_fu_1757_p2[44:42]}};

assign trunc_ln100_13_fu_1949_p4 = {{or_ln99_11_fu_1751_p2[47:45]}};

assign trunc_ln100_14_fu_1959_p4 = {{or_ln99_10_fu_1745_p2[50:48]}};

assign trunc_ln100_1_fu_1829_p4 = {{or_ln99_23_fu_1823_p2[11:9]}};

assign trunc_ln100_2_fu_1839_p4 = {{or_ln99_22_fu_1817_p2[14:12]}};

assign trunc_ln100_3_fu_1849_p4 = {{or_ln99_21_fu_1811_p2[17:15]}};

assign trunc_ln100_4_fu_1859_p4 = {{or_ln99_20_fu_1805_p2[20:18]}};

assign trunc_ln100_5_fu_1869_p4 = {{or_ln99_19_fu_1799_p2[23:21]}};

assign trunc_ln100_6_fu_1879_p4 = {{or_ln99_18_fu_1793_p2[26:24]}};

assign trunc_ln100_7_fu_1889_p4 = {{or_ln99_17_fu_1787_p2[29:27]}};

assign trunc_ln100_8_fu_1899_p4 = {{or_ln99_16_fu_1781_p2[32:30]}};

assign trunc_ln100_9_fu_1909_p4 = {{or_ln99_15_fu_1775_p2[35:33]}};

assign trunc_ln96_10_fu_1469_p1 = shl_ln96_reg_2206[29:0];

assign trunc_ln96_11_fu_1472_p1 = shl_ln96_reg_2206[32:0];

assign trunc_ln96_12_fu_1475_p1 = shl_ln96_reg_2206[35:0];

assign trunc_ln96_13_fu_1478_p1 = shl_ln96_reg_2206[38:0];

assign trunc_ln96_14_fu_1481_p1 = shl_ln96_reg_2206[41:0];

assign trunc_ln96_15_fu_1484_p1 = shl_ln96_reg_2206[44:0];

assign trunc_ln96_16_fu_1487_p1 = shl_ln96_reg_2206[47:0];

assign trunc_ln96_17_fu_1490_p1 = shl_ln96_reg_2206[50:0];

assign trunc_ln96_18_fu_917_p1 = shl_ln96_fu_890_p2[53:0];

assign trunc_ln96_19_fu_921_p1 = shl_ln96_fu_890_p2[56:0];

assign trunc_ln96_1_fu_905_p1 = shl_ln96_fu_890_p2[2:0];

assign trunc_ln96_20_fu_925_p1 = shl_ln96_fu_890_p2[59:0];

assign trunc_ln96_21_fu_929_p1 = shl_ln96_fu_890_p2[62:0];

assign trunc_ln96_22_fu_933_p1 = shl_ln96_fu_890_p2[65:0];

assign trunc_ln96_23_fu_937_p1 = shl_ln96_fu_890_p2[68:0];

assign trunc_ln96_24_fu_941_p1 = shl_ln96_fu_890_p2[71:0];

assign trunc_ln96_25_fu_945_p1 = shl_ln96_fu_890_p2[74:0];

assign trunc_ln96_26_fu_949_p1 = shl_ln96_fu_890_p2[77:0];

assign trunc_ln96_27_fu_953_p1 = shl_ln96_fu_890_p2[80:0];

assign trunc_ln96_28_fu_969_p1 = vec_o_4_out_i[2:0];

assign trunc_ln96_29_fu_979_p1 = vec_o_4_out_i[80:0];

assign trunc_ln96_2_fu_909_p1 = shl_ln96_fu_890_p2[5:0];

assign trunc_ln96_30_fu_989_p1 = vec_o_4_out_i[77:0];

assign trunc_ln96_31_fu_999_p1 = vec_o_4_out_i[74:0];

assign trunc_ln96_32_fu_1009_p1 = vec_o_4_out_i[71:0];

assign trunc_ln96_33_fu_1019_p1 = vec_o_4_out_i[68:0];

assign trunc_ln96_34_fu_1029_p1 = vec_o_4_out_i[65:0];

assign trunc_ln96_35_fu_1039_p1 = vec_o_4_out_i[62:0];

assign trunc_ln96_36_fu_1049_p1 = vec_o_4_out_i[59:0];

assign trunc_ln96_37_fu_1059_p1 = vec_o_4_out_i[56:0];

assign trunc_ln96_38_fu_1069_p1 = vec_o_4_out_i[53:0];

assign trunc_ln96_39_fu_1499_p1 = vec_o_4_out_load_reg_2188[50:0];

assign trunc_ln96_3_fu_913_p1 = shl_ln96_fu_890_p2[8:0];

assign trunc_ln96_40_fu_1508_p1 = vec_o_4_out_load_reg_2188[47:0];

assign trunc_ln96_41_fu_1517_p1 = vec_o_4_out_load_reg_2188[44:0];

assign trunc_ln96_42_fu_1526_p1 = vec_o_4_out_load_reg_2188[41:0];

assign trunc_ln96_43_fu_1535_p1 = vec_o_4_out_load_reg_2188[38:0];

assign trunc_ln96_44_fu_1544_p1 = vec_o_4_out_load_reg_2188[35:0];

assign trunc_ln96_45_fu_1553_p1 = vec_o_4_out_load_reg_2188[32:0];

assign trunc_ln96_46_fu_1562_p1 = vec_o_4_out_load_reg_2188[29:0];

assign trunc_ln96_47_fu_1571_p1 = vec_o_4_out_load_reg_2188[26:0];

assign trunc_ln96_48_fu_1580_p1 = vec_o_4_out_load_reg_2188[23:0];

assign trunc_ln96_49_fu_1589_p1 = vec_o_4_out_load_reg_2188[20:0];

assign trunc_ln96_4_fu_1451_p1 = shl_ln96_reg_2206[11:0];

assign trunc_ln96_50_fu_1598_p1 = vec_o_4_out_load_reg_2188[17:0];

assign trunc_ln96_51_fu_1607_p1 = vec_o_4_out_load_reg_2188[14:0];

assign trunc_ln96_52_fu_1616_p1 = vec_o_4_out_load_reg_2188[11:0];

assign trunc_ln96_53_fu_1079_p1 = vec_o_4_out_i[8:0];

assign trunc_ln96_54_fu_1089_p1 = vec_o_4_out_i[5:0];

assign trunc_ln96_55_fu_1105_p1 = shl_ln96_1_fu_899_p2[2:0];

assign trunc_ln96_56_fu_1115_p1 = shl_ln96_1_fu_899_p2[5:0];

assign trunc_ln96_57_fu_1125_p1 = shl_ln96_1_fu_899_p2[8:0];

assign trunc_ln96_58_fu_1625_p1 = shl_ln96_1_reg_2224[11:0];

assign trunc_ln96_59_fu_1634_p1 = shl_ln96_1_reg_2224[14:0];

assign trunc_ln96_5_fu_1454_p1 = shl_ln96_reg_2206[14:0];

assign trunc_ln96_60_fu_1643_p1 = shl_ln96_1_reg_2224[17:0];

assign trunc_ln96_61_fu_1652_p1 = shl_ln96_1_reg_2224[20:0];

assign trunc_ln96_62_fu_1661_p1 = shl_ln96_1_reg_2224[23:0];

assign trunc_ln96_63_fu_1670_p1 = shl_ln96_1_reg_2224[26:0];

assign trunc_ln96_64_fu_1679_p1 = shl_ln96_1_reg_2224[29:0];

assign trunc_ln96_65_fu_1688_p1 = shl_ln96_1_reg_2224[32:0];

assign trunc_ln96_66_fu_1697_p1 = shl_ln96_1_reg_2224[35:0];

assign trunc_ln96_67_fu_1706_p1 = shl_ln96_1_reg_2224[38:0];

assign trunc_ln96_68_fu_1715_p1 = shl_ln96_1_reg_2224[41:0];

assign trunc_ln96_69_fu_1724_p1 = shl_ln96_1_reg_2224[44:0];

assign trunc_ln96_6_fu_1457_p1 = shl_ln96_reg_2206[17:0];

assign trunc_ln96_70_fu_1733_p1 = shl_ln96_1_reg_2224[47:0];

assign trunc_ln96_71_fu_1742_p1 = shl_ln96_1_reg_2224[50:0];

assign trunc_ln96_72_fu_1135_p1 = shl_ln96_1_fu_899_p2[53:0];

assign trunc_ln96_73_fu_1145_p1 = shl_ln96_1_fu_899_p2[56:0];

assign trunc_ln96_74_fu_1155_p1 = shl_ln96_1_fu_899_p2[59:0];

assign trunc_ln96_75_fu_1165_p1 = shl_ln96_1_fu_899_p2[62:0];

assign trunc_ln96_76_fu_1175_p1 = shl_ln96_1_fu_899_p2[65:0];

assign trunc_ln96_77_fu_1185_p1 = shl_ln96_1_fu_899_p2[68:0];

assign trunc_ln96_78_fu_1195_p1 = shl_ln96_1_fu_899_p2[71:0];

assign trunc_ln96_79_fu_1205_p1 = shl_ln96_1_fu_899_p2[74:0];

assign trunc_ln96_7_fu_1460_p1 = shl_ln96_reg_2206[20:0];

assign trunc_ln96_80_fu_1215_p1 = shl_ln96_1_fu_899_p2[77:0];

assign trunc_ln96_81_fu_1225_p1 = shl_ln96_1_fu_899_p2[80:0];

assign trunc_ln96_8_fu_1463_p1 = shl_ln96_reg_2206[23:0];

assign trunc_ln96_9_fu_1466_p1 = shl_ln96_reg_2206[26:0];

assign trunc_ln96_fu_678_p1 = select_ln87_fu_658_p3[1:0];

assign vq_sm_transpose_head3_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln100_25_reg_2312}, {trunc_ln100_24_reg_2307}}, {trunc_ln100_23_reg_2302}}, {trunc_ln100_22_reg_2297}}, {trunc_ln100_21_reg_2292}}, {trunc_ln100_20_reg_2287}}, {trunc_ln100_19_reg_2282}}, {trunc_ln100_18_reg_2277}}, {trunc_ln100_17_reg_2272}}, {trunc_ln100_16_reg_2267}}, {trunc_ln100_15_reg_2262}}, {trunc_ln100_14_fu_1959_p4}}, {trunc_ln100_13_fu_1949_p4}}, {trunc_ln100_12_fu_1939_p4}}, {trunc_ln100_11_fu_1929_p4}}, {trunc_ln100_10_fu_1919_p4}}, {trunc_ln100_9_fu_1909_p4}}, {trunc_ln100_8_fu_1899_p4}}, {trunc_ln100_7_fu_1889_p4}}, {trunc_ln100_6_fu_1879_p4}}, {trunc_ln100_5_fu_1869_p4}}, {trunc_ln100_4_fu_1859_p4}}, {trunc_ln100_3_fu_1849_p4}}, {trunc_ln100_2_fu_1839_p4}}, {trunc_ln100_1_fu_1829_p4}}, {trunc_ln100_s_reg_2257}}, {trunc_ln8_reg_2252}}, {or_ln100_fu_1969_p2}};

assign xor_ln85_fu_522_p2 = (icmp_ln86_reg_2099 ^ 1'd1);

assign xor_ln86_fu_619_p2 = (icmp_ln87_reg_2114 ^ 1'd1);

assign xor_ln96_10_fu_1053_p2 = (trunc_ln96_19_fu_921_p1 ^ 57'd126100789566373888);

assign xor_ln96_11_fu_1063_p2 = (trunc_ln96_18_fu_917_p1 ^ 54'd15762598695796736);

assign xor_ln96_12_fu_1493_p2 = (trunc_ln96_17_fu_1490_p1 ^ 51'd1970324836974592);

assign xor_ln96_13_fu_1502_p2 = (trunc_ln96_16_fu_1487_p1 ^ 48'd246290604621824);

assign xor_ln96_14_fu_1511_p2 = (trunc_ln96_15_fu_1484_p1 ^ 45'd30786325577728);

assign xor_ln96_15_fu_1520_p2 = (trunc_ln96_14_fu_1481_p1 ^ 42'd3848290697216);

assign xor_ln96_16_fu_1529_p2 = (trunc_ln96_13_fu_1478_p1 ^ 39'd481036337152);

assign xor_ln96_17_fu_1538_p2 = (trunc_ln96_12_fu_1475_p1 ^ 36'd60129542144);

assign xor_ln96_18_fu_1547_p2 = (trunc_ln96_11_fu_1472_p1 ^ 33'd7516192768);

assign xor_ln96_19_fu_1556_p2 = (trunc_ln96_10_fu_1469_p1 ^ 30'd939524096);

assign xor_ln96_1_fu_963_p2 = (trunc_ln96_1_fu_905_p1 ^ 3'd7);

assign xor_ln96_20_fu_1565_p2 = (trunc_ln96_9_fu_1466_p1 ^ 27'd117440512);

assign xor_ln96_21_fu_1574_p2 = (trunc_ln96_8_fu_1463_p1 ^ 24'd14680064);

assign xor_ln96_22_fu_1583_p2 = (trunc_ln96_7_fu_1460_p1 ^ 21'd1835008);

assign xor_ln96_23_fu_1592_p2 = (trunc_ln96_6_fu_1457_p1 ^ 18'd229376);

assign xor_ln96_24_fu_1601_p2 = (trunc_ln96_5_fu_1454_p1 ^ 15'd28672);

assign xor_ln96_25_fu_1610_p2 = (trunc_ln96_4_fu_1451_p1 ^ 12'd3584);

assign xor_ln96_26_fu_1073_p2 = (trunc_ln96_3_fu_913_p1 ^ 9'd448);

assign xor_ln96_27_fu_1083_p2 = (trunc_ln96_2_fu_909_p1 ^ 6'd56);

assign xor_ln96_2_fu_973_p2 = (trunc_ln96_27_fu_953_p1 ^ 81'd2115620184325601055735808);

assign xor_ln96_3_fu_983_p2 = (trunc_ln96_26_fu_949_p1 ^ 78'd264452523040700131966976);

assign xor_ln96_4_fu_993_p2 = (trunc_ln96_25_fu_945_p1 ^ 75'd33056565380087516495872);

assign xor_ln96_5_fu_1003_p2 = (trunc_ln96_24_fu_941_p1 ^ 72'd4132070672510939561984);

assign xor_ln96_6_fu_1013_p2 = (trunc_ln96_23_fu_937_p1 ^ 69'd516508834063867445248);

assign xor_ln96_7_fu_1023_p2 = (trunc_ln96_22_fu_933_p1 ^ 66'd64563604257983430656);

assign xor_ln96_8_fu_1033_p2 = (trunc_ln96_21_fu_929_p1 ^ 63'd8070450532247928832);

assign xor_ln96_9_fu_1043_p2 = (trunc_ln96_20_fu_925_p1 ^ 60'd1008806316530991104);

assign xor_ln96_fu_957_p2 = (shl_ln96_fu_890_p2 ^ 84'd19342813113834066795298815);

assign zext_ln85_fu_743_p1 = select_ln85_1_fu_736_p3;

assign zext_ln87_1_fu_775_p1 = select_ln87_1_reg_2136;

assign zext_ln87_fu_772_p1 = select_ln87_1_reg_2136;

assign zext_ln88_fu_789_p1 = select_ln87_reg_2130;

assign zext_ln93_fu_850_p1 = tmp_1_fu_844_p3;

assign zext_ln96_1_fu_886_p1 = $unsigned(sext_ln96_1_fu_883_p1);

assign zext_ln96_2_fu_896_p1 = buffer_load_reg_2178;

assign zext_ln96_fu_805_p1 = shl_ln96_6_fu_798_p3;

endmodule //ATTN11_reorder_Pipeline_VITIS_LOOP_85_6_VITIS_LOOP_86_7_VITIS_LOOP_87_8_VITIS_LOOP_88_9
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_10_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_10_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_10_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_10_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_20_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_20_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_20_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_20_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_25_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_25_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_25_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_25_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_30_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_30_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_30_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_30_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_35_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_35_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_35_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_35_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_49_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_49_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_49_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_49_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_4_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_4_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_4_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_4_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_5_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_5_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_5_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_5_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_6_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_6_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_6_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_6_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_7_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_7_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_7_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_7_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_8_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_8_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_8_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_8_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_adapt_9_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_adapt_9_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_adapt_9_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_adapt_9_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_layernorm_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_layernorm_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_layernorm_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_layernorm_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_14_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 4)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_14_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_14_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_14_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 4)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_15_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 4)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_15_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_15_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_15_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 4)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_1_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_1_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_1_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_1_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_2_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_2_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_2_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_2_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_3_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_3_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_3_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_3_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_4_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_4_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_4_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_4_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_8_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_8_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_8_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_8_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_9_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_9_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_9_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_9_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_matmul_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 4)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_matmul_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_matmul_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_matmul_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 4)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_merge_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_merge_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_merge_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_merge_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_quant_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_quant_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_quant_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_quant_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_quant_2_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_quant_2_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_quant_2_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_quant_2_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_quant_2_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_quant_2_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_quant_2_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_quant_2_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_quant_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_quant_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_quant_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_quant_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_reshape_12_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_reshape_12_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_reshape_12_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_reshape_12_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_reshape_13_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_reshape_13_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_reshape_13_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_reshape_13_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_reshape_5_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_reshape_5_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_reshape_5_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_reshape_5_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_reshape_6_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_reshape_6_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_reshape_6_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_reshape_6_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_reshape_7_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_reshape_7_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_reshape_7_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_reshape_7_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_reshape_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_reshape_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_reshape_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_reshape_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_softmax_10_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_softmax_10_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_softmax_10_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_softmax_10_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_softmax_11_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_softmax_11_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_softmax_11_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_softmax_11_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_softmax_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_softmax_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_softmax_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_softmax_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_split_3_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_split_3_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_split_3_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_split_3_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_split_4_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_split_4_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_split_4_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_split_4_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_do_split_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_do_split_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_do_split_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_do_split_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_17_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_17_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_17_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_17_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_22_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_22_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_22_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_22_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_27_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_27_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_27_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_27_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_2_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_2_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_2_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_2_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_32_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_32_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_32_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_32_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_3_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_3_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_3_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_3_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_47_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_47_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_47_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_47_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_4_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_4_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_4_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_4_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step1_cache_window_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step1_cache_window_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step1_cache_window_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step1_cache_window_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_19_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_19_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_19_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_19_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_1_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_1_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_1_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_1_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_24_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_24_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_24_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_24_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_29_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_29_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_29_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_29_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_2_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_2_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_2_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_2_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_34_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_34_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_34_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_34_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_3_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_3_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_3_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_3_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_48_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_48_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_48_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_48_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_4_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_4_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_4_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_4_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_matmul_step2_mac_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 2,
    DEPTH        = 3)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_matmul_step2_mac_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_matmul_step2_mac_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_matmul_step2_mac_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 2,
    DEPTH       = 3)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_reorder_37_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_reorder_37_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_reorder_37_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_reorder_37_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_reorder_39_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_reorder_39_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_reorder_39_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_reorder_39_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_reorder_41_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_reorder_41_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_reorder_41_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_reorder_41_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_reorder_43_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_reorder_43_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_reorder_43_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_reorder_43_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_reorder_45_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_reorder_45_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_reorder_45_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_reorder_45_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_reorder_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_reorder_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_reorder_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_reorder_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_stream_copy3_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 1,
    DEPTH        = 2)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_stream_copy3_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_stream_copy3_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_stream_copy3_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 1,
    DEPTH       = 2)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

`timescale 1ns/1ps
//RAW latency 1 

module ATTN11_start_for_stream_merge_U0
#(parameter
    MEM_STYLE    = "shiftReg",
    DATA_WIDTH   = 1,
    ADDR_WIDTH   = 4,
    DEPTH        = 12)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,
    
    // read 

    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
    wire [ADDR_WIDTH-1:0] addr;
    wire                  push;
    wire                  pop;
    reg signed [ADDR_WIDTH:0] mOutPtr;
    reg                   empty_n = 1'b0;
    reg                   full_n = 1'b1; 
    // has num_data_valid?  no 
//------------------------Instantiation------------------
    ATTN11_start_for_stream_merge_U0_ShiftReg 
    #(  .DATA_WIDTH (DATA_WIDTH),
        .ADDR_WIDTH (ADDR_WIDTH),
        .DEPTH      (DEPTH))
    U_ATTN11_start_for_stream_merge_U0_ShiftReg (
        .clk        (clk),
        .we         (push),
        .addr       (addr),
        .din        (if_din),
        .dout       (if_dout)
    );
//------------------------Task and function--------------

//------------------------Body---------------------------
    // num_data_valid 

    // almost full/empty 

    // program full/empty 

    assign if_full_n  = full_n; 
    assign if_empty_n = empty_n;

    assign push       = full_n & if_write_ce & if_write;
    assign pop        = empty_n & if_read_ce & if_read;

    assign addr       = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0] : {ADDR_WIDTH{1'b0}};

    // mOutPtr
    always @(posedge clk) begin
        if (reset)
            mOutPtr <= {ADDR_WIDTH+1{1'b1}};
        else if (push & ~pop)
            mOutPtr <= mOutPtr + 1'b1;
        else if (~push & pop)
            mOutPtr <= mOutPtr - 1'b1;
    end

    // full_n
    always @(posedge clk) begin
        if (reset)
            full_n <= 1'b1;
        else if ((push & ~pop) && (mOutPtr == DEPTH - 2))
            full_n <= 1'b0;
        else if (~push & pop)
            full_n <= 1'b1;
    end

    // empty_n
    always @(posedge clk) begin
        if (reset)
            empty_n <= 1'b0;
        else if (push & ~pop)
            empty_n <= 1'b1;
        else if ((~push & pop) && (mOutPtr == 0))
            empty_n <= 1'b0;
    end

    // almost_full_n 

    // almost_empty_n 

    // prog_full_n 
 
    // prog_empty_n 

    // num_data_valid 

endmodule  


module ATTN11_start_for_stream_merge_U0_ShiftReg
#(parameter
    DATA_WIDTH  = 1,
    ADDR_WIDTH  = 4,
    DEPTH       = 12)
(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] addr,
    input  wire [DATA_WIDTH-1:0] din,
    output wire [DATA_WIDTH-1:0] dout
);

    reg [DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
    integer i;

    always @ (posedge clk) begin
        if (we) begin
            for (i=0; i<DEPTH-1; i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= din;
        end
    end

    assign dout = SRL_SIG[addr];

endmodule// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_stream_copy2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        i_stream_TVALID,
        main_sm_din,
        main_sm_num_data_valid,
        main_sm_fifo_cap,
        main_sm_full_n,
        main_sm_write,
        resi_i_sm_din,
        resi_i_sm_num_data_valid,
        resi_i_sm_fifo_cap,
        resi_i_sm_full_n,
        resi_i_sm_write,
        start_out,
        start_write,
        i_stream_TDATA,
        i_stream_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   i_stream_TVALID;
output  [25:0] main_sm_din;
input  [2:0] main_sm_num_data_valid;
input  [2:0] main_sm_fifo_cap;
input   main_sm_full_n;
output   main_sm_write;
output  [25:0] resi_i_sm_din;
input  [9:0] resi_i_sm_num_data_valid;
input  [9:0] resi_i_sm_fifo_cap;
input   resi_i_sm_full_n;
output   resi_i_sm_write;
output   start_out;
output   start_write;
input  [31:0] i_stream_TDATA;
output   i_stream_TREADY;

reg ap_idle;
reg main_sm_write;
reg resi_i_sm_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln308_fu_98_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    i_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    main_sm_blk_n;
reg    resi_i_sm_blk_n;
wire   [12:0] trunc_ln313_fu_106_p1;
reg   [12:0] trunc_ln313_reg_161;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] trunc_ln313_1_reg_166;
reg   [14:0] indvar_flatten_fu_50;
wire   [14:0] add_ln308_fu_92_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [25:0] tmp_s_fu_132_p3;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_i_stream_U_apdone_blk;
wire   [31:0] i_stream_TDATA_int_regslice;
wire    i_stream_TVALID_int_regslice;
reg    i_stream_TREADY_int_regslice;
wire    regslice_both_i_stream_U_ack_in;
reg    ap_condition_121;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_50 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

ATTN11_regslice_both #(
    .DataWidth( 32 ))
regslice_both_i_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(i_stream_TDATA),
    .vld_in(i_stream_TVALID),
    .ack_in(regslice_both_i_stream_U_ack_in),
    .data_out(i_stream_TDATA_int_regslice),
    .vld_out(i_stream_TVALID_int_regslice),
    .ack_out(i_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_i_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_121)) begin
        if ((icmp_ln308_fu_98_p2 == 1'd0)) begin
            indvar_flatten_fu_50 <= add_ln308_fu_92_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_50 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln313_1_reg_166 <= {{i_stream_TDATA_int_regslice[28:16]}};
        trunc_ln313_reg_161 <= trunc_ln313_fu_106_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln308_fu_98_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln308_fu_98_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_TDATA_blk_n = i_stream_TVALID_int_regslice;
    end else begin
        i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln308_fu_98_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_TREADY_int_regslice = 1'b1;
    end else begin
        i_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        main_sm_blk_n = main_sm_full_n;
    end else begin
        main_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        main_sm_write = 1'b1;
    end else begin
        main_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_blk_n = resi_i_sm_full_n;
    end else begin
        resi_i_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_write = 1'b1;
    end else begin
        resi_i_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln308_fu_92_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln308_fu_98_p2 == 1'd0) & (i_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((resi_i_sm_full_n == 1'b0) | (main_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_121 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_stream_TREADY = regslice_both_i_stream_U_ack_in;

assign icmp_ln308_fu_98_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18816) ? 1'b1 : 1'b0);

assign main_sm_din = tmp_s_fu_132_p3;

assign resi_i_sm_din = tmp_s_fu_132_p3;

assign start_out = real_start;

assign tmp_s_fu_132_p3 = {{trunc_ln313_1_reg_166}, {trunc_ln313_reg_161}};

assign trunc_ln313_fu_106_p1 = i_stream_TDATA_int_regslice[12:0];

endmodule //ATTN11_stream_copy2
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_stream_copy3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        lnq_sm_dout,
        lnq_sm_num_data_valid,
        lnq_sm_fifo_cap,
        lnq_sm_empty_n,
        lnq_sm_read,
        lnq_sm_cp1_din,
        lnq_sm_cp1_num_data_valid,
        lnq_sm_cp1_fifo_cap,
        lnq_sm_cp1_full_n,
        lnq_sm_cp1_write,
        lnq_sm_cp2_din,
        lnq_sm_cp2_num_data_valid,
        lnq_sm_cp2_fifo_cap,
        lnq_sm_cp2_full_n,
        lnq_sm_cp2_write,
        lnq_sm_cp3_din,
        lnq_sm_cp3_num_data_valid,
        lnq_sm_cp3_fifo_cap,
        lnq_sm_cp3_full_n,
        lnq_sm_cp3_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] lnq_sm_dout;
input  [2:0] lnq_sm_num_data_valid;
input  [2:0] lnq_sm_fifo_cap;
input   lnq_sm_empty_n;
output   lnq_sm_read;
output  [5:0] lnq_sm_cp1_din;
input  [2:0] lnq_sm_cp1_num_data_valid;
input  [2:0] lnq_sm_cp1_fifo_cap;
input   lnq_sm_cp1_full_n;
output   lnq_sm_cp1_write;
output  [5:0] lnq_sm_cp2_din;
input  [2:0] lnq_sm_cp2_num_data_valid;
input  [2:0] lnq_sm_cp2_fifo_cap;
input   lnq_sm_cp2_full_n;
output   lnq_sm_cp2_write;
output  [5:0] lnq_sm_cp3_din;
input  [2:0] lnq_sm_cp3_num_data_valid;
input  [2:0] lnq_sm_cp3_fifo_cap;
input   lnq_sm_cp3_full_n;
output   lnq_sm_cp3_write;
output   start_out;
output   start_write;

reg ap_idle;
reg lnq_sm_read;
reg lnq_sm_cp1_write;
reg lnq_sm_cp2_write;
reg lnq_sm_cp3_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln327_fu_98_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lnq_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    lnq_sm_cp1_blk_n;
reg    lnq_sm_cp2_blk_n;
reg    lnq_sm_cp3_blk_n;
reg   [14:0] indvar_flatten_fu_40;
wire   [14:0] add_ln327_fu_92_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_121;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_40 = 15'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_121)) begin
        if ((icmp_ln327_fu_98_p2 == 1'd0)) begin
            indvar_flatten_fu_40 <= add_ln327_fu_92_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_40 <= 15'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln327_fu_98_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_blk_n = lnq_sm_empty_n;
    end else begin
        lnq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_blk_n = lnq_sm_cp1_full_n;
    end else begin
        lnq_sm_cp1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_write = 1'b1;
    end else begin
        lnq_sm_cp1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp2_blk_n = lnq_sm_cp2_full_n;
    end else begin
        lnq_sm_cp2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp2_write = 1'b1;
    end else begin
        lnq_sm_cp2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp3_blk_n = lnq_sm_cp3_full_n;
    end else begin
        lnq_sm_cp3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp3_write = 1'b1;
    end else begin
        lnq_sm_cp3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_read = 1'b1;
    end else begin
        lnq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln327_fu_92_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((lnq_sm_cp3_full_n == 1'b0) | (lnq_sm_cp2_full_n == 1'b0) | (lnq_sm_cp1_full_n == 1'b0) | (lnq_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_121 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln327_fu_98_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18816) ? 1'b1 : 1'b0);

assign lnq_sm_cp1_din = lnq_sm_dout;

assign lnq_sm_cp2_din = lnq_sm_dout;

assign lnq_sm_cp3_din = lnq_sm_dout;

assign start_out = real_start;

endmodule //ATTN11_stream_copy3
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_stream_merge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        resi_o_sm_dout,
        resi_o_sm_num_data_valid,
        resi_o_sm_fifo_cap,
        resi_o_sm_empty_n,
        resi_o_sm_read,
        o_sm_dout,
        o_sm_num_data_valid,
        o_sm_fifo_cap,
        o_sm_empty_n,
        o_sm_read,
        o_stream_TREADY,
        o_stream_TDATA,
        o_stream_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [25:0] resi_o_sm_dout;
input  [9:0] resi_o_sm_num_data_valid;
input  [9:0] resi_o_sm_fifo_cap;
input   resi_o_sm_empty_n;
output   resi_o_sm_read;
input  [23:0] o_sm_dout;
input  [2:0] o_sm_num_data_valid;
input  [2:0] o_sm_fifo_cap;
input   o_sm_empty_n;
output   o_sm_read;
input   o_stream_TREADY;
output  [31:0] o_stream_TDATA;
output   o_stream_TVALID;

reg ap_idle;
reg resi_o_sm_read;
reg o_sm_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    regslice_both_o_stream_U_apdone_blk;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_state8_pp0_stage0_iter7;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln345_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    resi_o_sm_blk_n;
wire    ap_block_pp0_stage0;
reg    o_sm_blk_n;
reg    o_stream_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] trunc_ln349_fu_137_p1;
reg  signed [12:0] trunc_ln349_reg_274;
reg  signed [12:0] trunc_ln349_1_reg_279;
wire   [11:0] trunc_ln350_fu_153_p1;
reg   [11:0] trunc_ln350_reg_284;
reg   [11:0] trunc_ln350_reg_284_pp0_iter2_reg;
reg   [11:0] trunc_ln350_reg_284_pp0_iter3_reg;
reg   [11:0] trunc_ln350_reg_284_pp0_iter4_reg;
reg   [11:0] trunc_ln350_1_reg_289;
reg   [11:0] trunc_ln350_1_reg_289_pp0_iter2_reg;
reg   [11:0] trunc_ln350_1_reg_289_pp0_iter3_reg;
reg   [11:0] trunc_ln350_1_reg_289_pp0_iter4_reg;
wire   [12:0] add_ln357_1_fu_201_p2;
reg   [12:0] add_ln357_1_reg_304;
wire   [12:0] add_ln357_3_fu_219_p2;
reg   [12:0] add_ln357_3_reg_309;
reg   [14:0] indvar_flatten_fu_70;
wire   [14:0] add_ln345_fu_111_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] trunc_ln2_fu_189_p1;
wire   [31:0] grp_fu_242_p3;
wire   [12:0] trunc_ln2_fu_189_p4;
wire  signed [12:0] sext_ln357_1_fu_198_p1;
wire  signed [31:0] trunc_ln357_1_fu_207_p1;
wire   [31:0] grp_fu_251_p3;
wire   [12:0] trunc_ln357_1_fu_207_p4;
wire  signed [12:0] sext_ln357_3_fu_216_p1;
wire   [28:0] tmp_fu_225_p4;
wire   [19:0] grp_fu_242_p1;
wire   [18:0] grp_fu_242_p2;
wire   [19:0] grp_fu_251_p1;
wire   [18:0] grp_fu_251_p2;
reg    grp_fu_242_ce;
reg    grp_fu_251_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] o_stream_TDATA_int_regslice;
reg    o_stream_TVALID_int_regslice;
wire    o_stream_TREADY_int_regslice;
wire    regslice_both_o_stream_U_vld_out;
reg    ap_condition_168;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_CS_fsm = 1'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 indvar_flatten_fu_70 = 15'd0;
end

ATTN11_mac_muladd_13s_20ns_19ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mac_muladd_13s_20ns_19ns_32_4_1_U1298(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln349_reg_274),
    .din1(grp_fu_242_p1),
    .din2(grp_fu_242_p2),
    .ce(grp_fu_242_ce),
    .dout(grp_fu_242_p3)
);

ATTN11_mac_muladd_13s_20ns_19ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
mac_muladd_13s_20ns_19ns_32_4_1_U1299(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln349_1_reg_279),
    .din1(grp_fu_251_p1),
    .din2(grp_fu_251_p2),
    .ce(grp_fu_251_ce),
    .dout(grp_fu_251_p3)
);

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

ATTN11_regslice_both #(
    .DataWidth( 32 ))
regslice_both_o_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(o_stream_TDATA_int_regslice),
    .vld_in(o_stream_TVALID_int_regslice),
    .ack_in(o_stream_TREADY_int_regslice),
    .data_out(o_stream_TDATA),
    .vld_out(regslice_both_o_stream_U_vld_out),
    .ack_out(o_stream_TREADY),
    .apdone_blk(regslice_both_o_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_168)) begin
        if ((icmp_ln345_fu_117_p2 == 1'd0)) begin
            indvar_flatten_fu_70 <= add_ln345_fu_111_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln357_1_reg_304 <= add_ln357_1_fu_201_p2;
        add_ln357_3_reg_309 <= add_ln357_3_fu_219_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        trunc_ln350_1_reg_289_pp0_iter2_reg <= trunc_ln350_1_reg_289;
        trunc_ln350_1_reg_289_pp0_iter3_reg <= trunc_ln350_1_reg_289_pp0_iter2_reg;
        trunc_ln350_1_reg_289_pp0_iter4_reg <= trunc_ln350_1_reg_289_pp0_iter3_reg;
        trunc_ln350_reg_284_pp0_iter2_reg <= trunc_ln350_reg_284;
        trunc_ln350_reg_284_pp0_iter3_reg <= trunc_ln350_reg_284_pp0_iter2_reg;
        trunc_ln350_reg_284_pp0_iter4_reg <= trunc_ln350_reg_284_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        trunc_ln349_1_reg_279 <= {{resi_o_sm_dout[25:13]}};
        trunc_ln349_reg_274 <= trunc_ln349_fu_137_p1;
        trunc_ln350_1_reg_289 <= {{o_sm_dout[23:12]}};
        trunc_ln350_reg_284 <= trunc_ln350_fu_153_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln345_fu_117_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_242_ce = 1'b1;
    end else begin
        grp_fu_242_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_251_ce = 1'b1;
    end else begin
        grp_fu_251_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o_sm_blk_n = o_sm_empty_n;
    end else begin
        o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o_sm_read = 1'b1;
    end else begin
        o_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        o_stream_TDATA_blk_n = o_stream_TREADY_int_regslice;
    end else begin
        o_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        o_stream_TVALID_int_regslice = 1'b1;
    end else begin
        o_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_o_sm_blk_n = resi_o_sm_empty_n;
    end else begin
        resi_o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_o_sm_read = 1'b1;
    end else begin
        resi_o_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln345_fu_111_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln357_1_fu_201_p2 = ($signed(trunc_ln2_fu_189_p4) + $signed(sext_ln357_1_fu_198_p1));

assign add_ln357_3_fu_219_p2 = ($signed(trunc_ln357_1_fu_207_p4) + $signed(sext_ln357_3_fu_216_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (regslice_both_o_stream_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state7_pp0_stage0_iter6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (regslice_both_o_stream_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((o_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8_pp0_stage0_iter7))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((o_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7_pp0_stage0_iter6))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (regslice_both_o_stream_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((o_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8_pp0_stage0_iter7))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((o_stream_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7_pp0_stage0_iter6))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((o_sm_empty_n == 1'b0) | (resi_o_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = ((regslice_both_o_stream_U_apdone_blk == 1'b1) | (o_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = (o_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_condition_168 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_242_p1 = 32'd592356;

assign grp_fu_242_p2 = 32'd262144;

assign grp_fu_251_p1 = 32'd592356;

assign grp_fu_251_p2 = 32'd262144;

assign icmp_ln345_fu_117_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18816) ? 1'b1 : 1'b0);

assign o_stream_TDATA_int_regslice = tmp_fu_225_p4;

assign o_stream_TVALID = regslice_both_o_stream_U_vld_out;

assign sext_ln357_1_fu_198_p1 = $signed(trunc_ln350_reg_284_pp0_iter4_reg);

assign sext_ln357_3_fu_216_p1 = $signed(trunc_ln350_1_reg_289_pp0_iter4_reg);

assign tmp_fu_225_p4 = {{{add_ln357_3_reg_309}, {3'd0}}, {add_ln357_1_reg_304}};

assign trunc_ln2_fu_189_p1 = grp_fu_242_p3;

assign trunc_ln2_fu_189_p4 = {{trunc_ln2_fu_189_p1[31:19]}};

assign trunc_ln349_fu_137_p1 = resi_o_sm_dout[12:0];

assign trunc_ln350_fu_153_p1 = o_sm_dout[11:0];

assign trunc_ln357_1_fu_207_p1 = grp_fu_251_p3;

assign trunc_ln357_1_fu_207_p4 = {{trunc_ln357_1_fu_207_p1[31:19]}};

endmodule //ATTN11_stream_merge
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_unpack (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_din,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_full_n,
        unpacked_stream_write,
        vq_sm_head3_dout,
        vq_sm_head3_num_data_valid,
        vq_sm_head3_fifo_cap,
        vq_sm_head3_empty_n,
        vq_sm_head3_read,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] unpacked_stream_din;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_full_n;
output   unpacked_stream_write;
input  [5:0] vq_sm_head3_dout;
input  [6:0] vq_sm_head3_num_data_valid;
input  [6:0] vq_sm_head3_fifo_cap;
input   vq_sm_head3_empty_n;
output   vq_sm_head3_read;
output   start_out;
output   start_write;

reg ap_idle;
reg unpacked_stream_write;
reg vq_sm_head3_read;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln42_reg_360;
reg   [0:0] cmp14_reg_369;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    vq_sm_head3_blk_n;
wire    ap_block_pp0_stage1;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] indvar_flatten_load_reg_355;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_157_p2;
reg   [0:0] icmp_ln43_reg_364;
wire   [0:0] cmp14_fu_195_p2;
wire   [3:0] sub_ln52_fu_221_p2;
reg   [3:0] sub_ln52_reg_373;
wire   [1:0] add_ln44_fu_227_p2;
reg   [1:0] add_ln44_reg_378;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] tip_fu_62;
reg    ap_block_pp0_stage1_11001;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_tip_load;
reg   [8:0] indvar_flatten_fu_66;
wire   [8:0] select_ln43_6_fu_264_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [13:0] indvar_flatten12_fu_70;
wire   [13:0] add_ln42_fu_139_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [5:0] vec_i_2_fu_74;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln44_fu_169_p2;
wire   [0:0] xor_ln42_fu_163_p2;
wire   [0:0] and_ln42_fu_175_p2;
wire   [0:0] or_ln43_fu_181_p2;
wire   [1:0] select_ln43_fu_187_p3;
wire   [0:0] trunc_ln52_fu_201_p1;
wire   [2:0] shl_ln_fu_209_p3;
wire   [3:0] zext_ln52_6_fu_217_p1;
wire   [3:0] zext_ln52_fu_205_p1;
wire   [8:0] add_ln43_fu_259_p2;
wire  signed [5:0] sext_ln52_fu_299_p1;
wire   [5:0] lshr_ln52_fu_302_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
reg    ap_condition_292;
reg    ap_condition_295;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
//#0 tip_fu_62 = 2'd0;
//#0 indvar_flatten_fu_66 = 9'd0;
//#0 indvar_flatten12_fu_70 = 14'd0;
//#0 vec_i_2_fu_74 = 6'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln42_fu_145_p2 == 1'd0)) begin
            indvar_flatten12_fu_70 <= add_ln42_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_70 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            indvar_flatten_fu_66 <= 9'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            indvar_flatten_fu_66 <= select_ln43_6_fu_264_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            tip_fu_62 <= 2'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            tip_fu_62 <= add_ln44_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln44_reg_378 <= add_ln44_fu_227_p2;
        cmp14_reg_369 <= cmp14_fu_195_p2;
        icmp_ln42_reg_360 <= icmp_ln42_fu_145_p2;
        icmp_ln43_reg_364 <= icmp_ln43_fu_157_p2;
        indvar_flatten_load_reg_355 <= ap_sig_allocacmp_indvar_flatten_load;
        sub_ln52_reg_373 <= sub_ln52_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vec_i_2_fu_74 <= vq_sm_head3_dout;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tip_load = 2'd0;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_62;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_blk_n = unpacked_stream_full_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_write = 1'b1;
    end else begin
        unpacked_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vq_sm_head3_blk_n = vq_sm_head3_empty_n;
    end else begin
        vq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vq_sm_head3_read = 1'b1;
    end else begin
        vq_sm_head3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln43_fu_259_p2 = (indvar_flatten_load_reg_355 + 9'd1);

assign add_ln44_fu_227_p2 = (select_ln43_fu_187_p3 + 2'd1);

assign and_ln42_fu_175_p2 = (xor_ln42_fu_163_p2 & icmp_ln44_fu_169_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op53_read_state2 == 1'b1) & (vq_sm_head3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (unpacked_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_295 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp14_fu_195_p2 = ((select_ln43_fu_187_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_145_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_169_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln52_fu_302_p2 = vec_i_2_fu_74 >> sext_ln52_fu_299_p1;

assign or_ln43_fu_181_p2 = (icmp_ln43_fu_157_p2 | and_ln42_fu_175_p2);

assign select_ln43_6_fu_264_p3 = ((icmp_ln43_reg_364[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_259_p2);

assign select_ln43_fu_187_p3 = ((or_ln43_fu_181_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign sext_ln52_fu_299_p1 = $signed(sub_ln52_reg_373);

assign shl_ln_fu_209_p3 = {{trunc_ln52_fu_201_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln52_fu_221_p2 = (zext_ln52_6_fu_217_p1 - zext_ln52_fu_205_p1);

assign trunc_ln52_fu_201_p1 = select_ln43_fu_187_p3[0:0];

assign unpacked_stream_din = lshr_ln52_fu_302_p2[2:0];

assign xor_ln42_fu_163_p2 = (icmp_ln43_fu_157_p2 ^ 1'd1);

assign zext_ln52_6_fu_217_p1 = shl_ln_fu_209_p3;

assign zext_ln52_fu_205_p1 = trunc_ln52_fu_201_p1;

endmodule //ATTN11_unpack
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_unpack_36 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_din,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_full_n,
        unpacked_stream_write,
        kq_sm_head1_dout,
        kq_sm_head1_num_data_valid,
        kq_sm_head1_fifo_cap,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] unpacked_stream_din;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_full_n;
output   unpacked_stream_write;
input  [5:0] kq_sm_head1_dout;
input  [6:0] kq_sm_head1_num_data_valid;
input  [6:0] kq_sm_head1_fifo_cap;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output   start_out;
output   start_write;

reg ap_idle;
reg unpacked_stream_write;
reg kq_sm_head1_read;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln42_reg_360;
reg   [0:0] cmp14_reg_369;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    kq_sm_head1_blk_n;
wire    ap_block_pp0_stage1;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] indvar_flatten_load_reg_355;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_157_p2;
reg   [0:0] icmp_ln43_reg_364;
wire   [0:0] cmp14_fu_195_p2;
wire   [3:0] sub_ln52_fu_221_p2;
reg   [3:0] sub_ln52_reg_373;
wire   [1:0] add_ln44_fu_227_p2;
reg   [1:0] add_ln44_reg_378;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] tip_fu_62;
reg    ap_block_pp0_stage1_11001;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_tip_load;
reg   [8:0] indvar_flatten_fu_66;
wire   [8:0] select_ln43_5_fu_264_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [13:0] indvar_flatten12_fu_70;
wire   [13:0] add_ln42_fu_139_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [5:0] vec_i_2_fu_74;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln44_fu_169_p2;
wire   [0:0] xor_ln42_fu_163_p2;
wire   [0:0] and_ln42_fu_175_p2;
wire   [0:0] or_ln43_fu_181_p2;
wire   [1:0] select_ln43_fu_187_p3;
wire   [0:0] trunc_ln52_fu_201_p1;
wire   [2:0] shl_ln_fu_209_p3;
wire   [3:0] zext_ln52_5_fu_217_p1;
wire   [3:0] zext_ln52_fu_205_p1;
wire   [8:0] add_ln43_fu_259_p2;
wire  signed [5:0] sext_ln52_fu_299_p1;
wire   [5:0] lshr_ln52_fu_302_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
reg    ap_condition_292;
reg    ap_condition_295;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
//#0 tip_fu_62 = 2'd0;
//#0 indvar_flatten_fu_66 = 9'd0;
//#0 indvar_flatten12_fu_70 = 14'd0;
//#0 vec_i_2_fu_74 = 6'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln42_fu_145_p2 == 1'd0)) begin
            indvar_flatten12_fu_70 <= add_ln42_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_70 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            indvar_flatten_fu_66 <= 9'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            indvar_flatten_fu_66 <= select_ln43_5_fu_264_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            tip_fu_62 <= 2'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            tip_fu_62 <= add_ln44_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln44_reg_378 <= add_ln44_fu_227_p2;
        cmp14_reg_369 <= cmp14_fu_195_p2;
        icmp_ln42_reg_360 <= icmp_ln42_fu_145_p2;
        icmp_ln43_reg_364 <= icmp_ln43_fu_157_p2;
        indvar_flatten_load_reg_355 <= ap_sig_allocacmp_indvar_flatten_load;
        sub_ln52_reg_373 <= sub_ln52_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vec_i_2_fu_74 <= kq_sm_head1_dout;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tip_load = 2'd0;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_62;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kq_sm_head1_blk_n = kq_sm_head1_empty_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kq_sm_head1_read = 1'b1;
    end else begin
        kq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_blk_n = unpacked_stream_full_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_write = 1'b1;
    end else begin
        unpacked_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln43_fu_259_p2 = (indvar_flatten_load_reg_355 + 9'd1);

assign add_ln44_fu_227_p2 = (select_ln43_fu_187_p3 + 2'd1);

assign and_ln42_fu_175_p2 = (xor_ln42_fu_163_p2 & icmp_ln44_fu_169_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op53_read_state2 == 1'b1) & (kq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (unpacked_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_295 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp14_fu_195_p2 = ((select_ln43_fu_187_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_145_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_169_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln52_fu_302_p2 = vec_i_2_fu_74 >> sext_ln52_fu_299_p1;

assign or_ln43_fu_181_p2 = (icmp_ln43_fu_157_p2 | and_ln42_fu_175_p2);

assign select_ln43_5_fu_264_p3 = ((icmp_ln43_reg_364[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_259_p2);

assign select_ln43_fu_187_p3 = ((or_ln43_fu_181_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign sext_ln52_fu_299_p1 = $signed(sub_ln52_reg_373);

assign shl_ln_fu_209_p3 = {{trunc_ln52_fu_201_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln52_fu_221_p2 = (zext_ln52_5_fu_217_p1 - zext_ln52_fu_205_p1);

assign trunc_ln52_fu_201_p1 = select_ln43_fu_187_p3[0:0];

assign unpacked_stream_din = lshr_ln52_fu_302_p2[2:0];

assign xor_ln42_fu_163_p2 = (icmp_ln43_fu_157_p2 ^ 1'd1);

assign zext_ln52_5_fu_217_p1 = shl_ln_fu_209_p3;

assign zext_ln52_fu_205_p1 = trunc_ln52_fu_201_p1;

endmodule //ATTN11_unpack_36
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_unpack_38 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_din,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_full_n,
        unpacked_stream_write,
        kq_sm_head2_dout,
        kq_sm_head2_num_data_valid,
        kq_sm_head2_fifo_cap,
        kq_sm_head2_empty_n,
        kq_sm_head2_read,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] unpacked_stream_din;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_full_n;
output   unpacked_stream_write;
input  [5:0] kq_sm_head2_dout;
input  [6:0] kq_sm_head2_num_data_valid;
input  [6:0] kq_sm_head2_fifo_cap;
input   kq_sm_head2_empty_n;
output   kq_sm_head2_read;
output   start_out;
output   start_write;

reg ap_idle;
reg unpacked_stream_write;
reg kq_sm_head2_read;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln42_reg_360;
reg   [0:0] cmp14_reg_369;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    kq_sm_head2_blk_n;
wire    ap_block_pp0_stage1;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] indvar_flatten_load_reg_355;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_157_p2;
reg   [0:0] icmp_ln43_reg_364;
wire   [0:0] cmp14_fu_195_p2;
wire   [3:0] sub_ln52_fu_221_p2;
reg   [3:0] sub_ln52_reg_373;
wire   [1:0] add_ln44_fu_227_p2;
reg   [1:0] add_ln44_reg_378;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] tip_fu_62;
reg    ap_block_pp0_stage1_11001;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_tip_load;
reg   [8:0] indvar_flatten_fu_66;
wire   [8:0] select_ln43_4_fu_264_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [13:0] indvar_flatten12_fu_70;
wire   [13:0] add_ln42_fu_139_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [5:0] vec_i_2_fu_74;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln44_fu_169_p2;
wire   [0:0] xor_ln42_fu_163_p2;
wire   [0:0] and_ln42_fu_175_p2;
wire   [0:0] or_ln43_fu_181_p2;
wire   [1:0] select_ln43_fu_187_p3;
wire   [0:0] trunc_ln52_fu_201_p1;
wire   [2:0] shl_ln_fu_209_p3;
wire   [3:0] zext_ln52_4_fu_217_p1;
wire   [3:0] zext_ln52_fu_205_p1;
wire   [8:0] add_ln43_fu_259_p2;
wire  signed [5:0] sext_ln52_fu_299_p1;
wire   [5:0] lshr_ln52_fu_302_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
reg    ap_condition_292;
reg    ap_condition_295;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
//#0 tip_fu_62 = 2'd0;
//#0 indvar_flatten_fu_66 = 9'd0;
//#0 indvar_flatten12_fu_70 = 14'd0;
//#0 vec_i_2_fu_74 = 6'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln42_fu_145_p2 == 1'd0)) begin
            indvar_flatten12_fu_70 <= add_ln42_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_70 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            indvar_flatten_fu_66 <= 9'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            indvar_flatten_fu_66 <= select_ln43_4_fu_264_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            tip_fu_62 <= 2'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            tip_fu_62 <= add_ln44_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln44_reg_378 <= add_ln44_fu_227_p2;
        cmp14_reg_369 <= cmp14_fu_195_p2;
        icmp_ln42_reg_360 <= icmp_ln42_fu_145_p2;
        icmp_ln43_reg_364 <= icmp_ln43_fu_157_p2;
        indvar_flatten_load_reg_355 <= ap_sig_allocacmp_indvar_flatten_load;
        sub_ln52_reg_373 <= sub_ln52_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vec_i_2_fu_74 <= kq_sm_head2_dout;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tip_load = 2'd0;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_62;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kq_sm_head2_blk_n = kq_sm_head2_empty_n;
    end else begin
        kq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kq_sm_head2_read = 1'b1;
    end else begin
        kq_sm_head2_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_blk_n = unpacked_stream_full_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_write = 1'b1;
    end else begin
        unpacked_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln43_fu_259_p2 = (indvar_flatten_load_reg_355 + 9'd1);

assign add_ln44_fu_227_p2 = (select_ln43_fu_187_p3 + 2'd1);

assign and_ln42_fu_175_p2 = (xor_ln42_fu_163_p2 & icmp_ln44_fu_169_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op53_read_state2 == 1'b1) & (kq_sm_head2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (unpacked_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_295 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp14_fu_195_p2 = ((select_ln43_fu_187_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_145_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_169_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln52_fu_302_p2 = vec_i_2_fu_74 >> sext_ln52_fu_299_p1;

assign or_ln43_fu_181_p2 = (icmp_ln43_fu_157_p2 | and_ln42_fu_175_p2);

assign select_ln43_4_fu_264_p3 = ((icmp_ln43_reg_364[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_259_p2);

assign select_ln43_fu_187_p3 = ((or_ln43_fu_181_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign sext_ln52_fu_299_p1 = $signed(sub_ln52_reg_373);

assign shl_ln_fu_209_p3 = {{trunc_ln52_fu_201_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln52_fu_221_p2 = (zext_ln52_4_fu_217_p1 - zext_ln52_fu_205_p1);

assign trunc_ln52_fu_201_p1 = select_ln43_fu_187_p3[0:0];

assign unpacked_stream_din = lshr_ln52_fu_302_p2[2:0];

assign xor_ln42_fu_163_p2 = (icmp_ln43_fu_157_p2 ^ 1'd1);

assign zext_ln52_4_fu_217_p1 = shl_ln_fu_209_p3;

assign zext_ln52_fu_205_p1 = trunc_ln52_fu_201_p1;

endmodule //ATTN11_unpack_38
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_unpack_40 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_din,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_full_n,
        unpacked_stream_write,
        kq_sm_head3_dout,
        kq_sm_head3_num_data_valid,
        kq_sm_head3_fifo_cap,
        kq_sm_head3_empty_n,
        kq_sm_head3_read,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] unpacked_stream_din;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_full_n;
output   unpacked_stream_write;
input  [5:0] kq_sm_head3_dout;
input  [6:0] kq_sm_head3_num_data_valid;
input  [6:0] kq_sm_head3_fifo_cap;
input   kq_sm_head3_empty_n;
output   kq_sm_head3_read;
output   start_out;
output   start_write;

reg ap_idle;
reg unpacked_stream_write;
reg kq_sm_head3_read;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln42_reg_360;
reg   [0:0] cmp14_reg_369;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    kq_sm_head3_blk_n;
wire    ap_block_pp0_stage1;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] indvar_flatten_load_reg_355;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_157_p2;
reg   [0:0] icmp_ln43_reg_364;
wire   [0:0] cmp14_fu_195_p2;
wire   [3:0] sub_ln52_fu_221_p2;
reg   [3:0] sub_ln52_reg_373;
wire   [1:0] add_ln44_fu_227_p2;
reg   [1:0] add_ln44_reg_378;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] tip_fu_62;
reg    ap_block_pp0_stage1_11001;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_tip_load;
reg   [8:0] indvar_flatten_fu_66;
wire   [8:0] select_ln43_3_fu_264_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [13:0] indvar_flatten12_fu_70;
wire   [13:0] add_ln42_fu_139_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [5:0] vec_i_2_fu_74;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln44_fu_169_p2;
wire   [0:0] xor_ln42_fu_163_p2;
wire   [0:0] and_ln42_fu_175_p2;
wire   [0:0] or_ln43_fu_181_p2;
wire   [1:0] select_ln43_fu_187_p3;
wire   [0:0] trunc_ln52_fu_201_p1;
wire   [2:0] shl_ln_fu_209_p3;
wire   [3:0] zext_ln52_3_fu_217_p1;
wire   [3:0] zext_ln52_fu_205_p1;
wire   [8:0] add_ln43_fu_259_p2;
wire  signed [5:0] sext_ln52_fu_299_p1;
wire   [5:0] lshr_ln52_fu_302_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
reg    ap_condition_292;
reg    ap_condition_295;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
//#0 tip_fu_62 = 2'd0;
//#0 indvar_flatten_fu_66 = 9'd0;
//#0 indvar_flatten12_fu_70 = 14'd0;
//#0 vec_i_2_fu_74 = 6'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln42_fu_145_p2 == 1'd0)) begin
            indvar_flatten12_fu_70 <= add_ln42_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_70 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            indvar_flatten_fu_66 <= 9'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            indvar_flatten_fu_66 <= select_ln43_3_fu_264_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            tip_fu_62 <= 2'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            tip_fu_62 <= add_ln44_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln44_reg_378 <= add_ln44_fu_227_p2;
        cmp14_reg_369 <= cmp14_fu_195_p2;
        icmp_ln42_reg_360 <= icmp_ln42_fu_145_p2;
        icmp_ln43_reg_364 <= icmp_ln43_fu_157_p2;
        indvar_flatten_load_reg_355 <= ap_sig_allocacmp_indvar_flatten_load;
        sub_ln52_reg_373 <= sub_ln52_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vec_i_2_fu_74 <= kq_sm_head3_dout;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tip_load = 2'd0;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_62;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kq_sm_head3_blk_n = kq_sm_head3_empty_n;
    end else begin
        kq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kq_sm_head3_read = 1'b1;
    end else begin
        kq_sm_head3_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_blk_n = unpacked_stream_full_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_write = 1'b1;
    end else begin
        unpacked_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln43_fu_259_p2 = (indvar_flatten_load_reg_355 + 9'd1);

assign add_ln44_fu_227_p2 = (select_ln43_fu_187_p3 + 2'd1);

assign and_ln42_fu_175_p2 = (xor_ln42_fu_163_p2 & icmp_ln44_fu_169_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op53_read_state2 == 1'b1) & (kq_sm_head3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (unpacked_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_295 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp14_fu_195_p2 = ((select_ln43_fu_187_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_145_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_169_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln52_fu_302_p2 = vec_i_2_fu_74 >> sext_ln52_fu_299_p1;

assign or_ln43_fu_181_p2 = (icmp_ln43_fu_157_p2 | and_ln42_fu_175_p2);

assign select_ln43_3_fu_264_p3 = ((icmp_ln43_reg_364[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_259_p2);

assign select_ln43_fu_187_p3 = ((or_ln43_fu_181_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign sext_ln52_fu_299_p1 = $signed(sub_ln52_reg_373);

assign shl_ln_fu_209_p3 = {{trunc_ln52_fu_201_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln52_fu_221_p2 = (zext_ln52_3_fu_217_p1 - zext_ln52_fu_205_p1);

assign trunc_ln52_fu_201_p1 = select_ln43_fu_187_p3[0:0];

assign unpacked_stream_din = lshr_ln52_fu_302_p2[2:0];

assign xor_ln42_fu_163_p2 = (icmp_ln43_fu_157_p2 ^ 1'd1);

assign zext_ln52_3_fu_217_p1 = shl_ln_fu_209_p3;

assign zext_ln52_fu_205_p1 = trunc_ln52_fu_201_p1;

endmodule //ATTN11_unpack_40
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_unpack_42 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_din,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_full_n,
        unpacked_stream_write,
        vq_sm_head1_dout,
        vq_sm_head1_num_data_valid,
        vq_sm_head1_fifo_cap,
        vq_sm_head1_empty_n,
        vq_sm_head1_read,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] unpacked_stream_din;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_full_n;
output   unpacked_stream_write;
input  [5:0] vq_sm_head1_dout;
input  [6:0] vq_sm_head1_num_data_valid;
input  [6:0] vq_sm_head1_fifo_cap;
input   vq_sm_head1_empty_n;
output   vq_sm_head1_read;
output   start_out;
output   start_write;

reg ap_idle;
reg unpacked_stream_write;
reg vq_sm_head1_read;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln42_reg_360;
reg   [0:0] cmp14_reg_369;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    vq_sm_head1_blk_n;
wire    ap_block_pp0_stage1;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] indvar_flatten_load_reg_355;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_157_p2;
reg   [0:0] icmp_ln43_reg_364;
wire   [0:0] cmp14_fu_195_p2;
wire   [3:0] sub_ln52_fu_221_p2;
reg   [3:0] sub_ln52_reg_373;
wire   [1:0] add_ln44_fu_227_p2;
reg   [1:0] add_ln44_reg_378;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] tip_fu_62;
reg    ap_block_pp0_stage1_11001;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_tip_load;
reg   [8:0] indvar_flatten_fu_66;
wire   [8:0] select_ln43_2_fu_264_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [13:0] indvar_flatten12_fu_70;
wire   [13:0] add_ln42_fu_139_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [5:0] vec_i_2_fu_74;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln44_fu_169_p2;
wire   [0:0] xor_ln42_fu_163_p2;
wire   [0:0] and_ln42_fu_175_p2;
wire   [0:0] or_ln43_fu_181_p2;
wire   [1:0] select_ln43_fu_187_p3;
wire   [0:0] trunc_ln52_fu_201_p1;
wire   [2:0] shl_ln_fu_209_p3;
wire   [3:0] zext_ln52_2_fu_217_p1;
wire   [3:0] zext_ln52_fu_205_p1;
wire   [8:0] add_ln43_fu_259_p2;
wire  signed [5:0] sext_ln52_fu_299_p1;
wire   [5:0] lshr_ln52_fu_302_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
reg    ap_condition_292;
reg    ap_condition_295;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
//#0 tip_fu_62 = 2'd0;
//#0 indvar_flatten_fu_66 = 9'd0;
//#0 indvar_flatten12_fu_70 = 14'd0;
//#0 vec_i_2_fu_74 = 6'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln42_fu_145_p2 == 1'd0)) begin
            indvar_flatten12_fu_70 <= add_ln42_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_70 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            indvar_flatten_fu_66 <= 9'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            indvar_flatten_fu_66 <= select_ln43_2_fu_264_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            tip_fu_62 <= 2'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            tip_fu_62 <= add_ln44_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln44_reg_378 <= add_ln44_fu_227_p2;
        cmp14_reg_369 <= cmp14_fu_195_p2;
        icmp_ln42_reg_360 <= icmp_ln42_fu_145_p2;
        icmp_ln43_reg_364 <= icmp_ln43_fu_157_p2;
        indvar_flatten_load_reg_355 <= ap_sig_allocacmp_indvar_flatten_load;
        sub_ln52_reg_373 <= sub_ln52_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vec_i_2_fu_74 <= vq_sm_head1_dout;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tip_load = 2'd0;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_62;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_blk_n = unpacked_stream_full_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_write = 1'b1;
    end else begin
        unpacked_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vq_sm_head1_blk_n = vq_sm_head1_empty_n;
    end else begin
        vq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vq_sm_head1_read = 1'b1;
    end else begin
        vq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln43_fu_259_p2 = (indvar_flatten_load_reg_355 + 9'd1);

assign add_ln44_fu_227_p2 = (select_ln43_fu_187_p3 + 2'd1);

assign and_ln42_fu_175_p2 = (xor_ln42_fu_163_p2 & icmp_ln44_fu_169_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op53_read_state2 == 1'b1) & (vq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (unpacked_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_295 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp14_fu_195_p2 = ((select_ln43_fu_187_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_145_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_169_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln52_fu_302_p2 = vec_i_2_fu_74 >> sext_ln52_fu_299_p1;

assign or_ln43_fu_181_p2 = (icmp_ln43_fu_157_p2 | and_ln42_fu_175_p2);

assign select_ln43_2_fu_264_p3 = ((icmp_ln43_reg_364[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_259_p2);

assign select_ln43_fu_187_p3 = ((or_ln43_fu_181_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign sext_ln52_fu_299_p1 = $signed(sub_ln52_reg_373);

assign shl_ln_fu_209_p3 = {{trunc_ln52_fu_201_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln52_fu_221_p2 = (zext_ln52_2_fu_217_p1 - zext_ln52_fu_205_p1);

assign trunc_ln52_fu_201_p1 = select_ln43_fu_187_p3[0:0];

assign unpacked_stream_din = lshr_ln52_fu_302_p2[2:0];

assign xor_ln42_fu_163_p2 = (icmp_ln43_fu_157_p2 ^ 1'd1);

assign zext_ln52_2_fu_217_p1 = shl_ln_fu_209_p3;

assign zext_ln52_fu_205_p1 = trunc_ln52_fu_201_p1;

endmodule //ATTN11_unpack_42
// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ATTN11_unpack_44 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream_din,
        unpacked_stream_num_data_valid,
        unpacked_stream_fifo_cap,
        unpacked_stream_full_n,
        unpacked_stream_write,
        vq_sm_head2_dout,
        vq_sm_head2_num_data_valid,
        vq_sm_head2_fifo_cap,
        vq_sm_head2_empty_n,
        vq_sm_head2_read,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] unpacked_stream_din;
input  [2:0] unpacked_stream_num_data_valid;
input  [2:0] unpacked_stream_fifo_cap;
input   unpacked_stream_full_n;
output   unpacked_stream_write;
input  [5:0] vq_sm_head2_dout;
input  [6:0] vq_sm_head2_num_data_valid;
input  [6:0] vq_sm_head2_fifo_cap;
input   vq_sm_head2_empty_n;
output   vq_sm_head2_read;
output   start_out;
output   start_write;

reg ap_idle;
reg unpacked_stream_write;
reg vq_sm_head2_read;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln42_reg_360;
reg   [0:0] cmp14_reg_369;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    vq_sm_head2_blk_n;
wire    ap_block_pp0_stage1;
reg    unpacked_stream_blk_n;
wire    ap_block_pp0_stage0;
reg   [8:0] indvar_flatten_load_reg_355;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_157_p2;
reg   [0:0] icmp_ln43_reg_364;
wire   [0:0] cmp14_fu_195_p2;
wire   [3:0] sub_ln52_fu_221_p2;
reg   [3:0] sub_ln52_reg_373;
wire   [1:0] add_ln44_fu_227_p2;
reg   [1:0] add_ln44_reg_378;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] tip_fu_62;
reg    ap_block_pp0_stage1_11001;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_tip_load;
reg   [8:0] indvar_flatten_fu_66;
wire   [8:0] select_ln43_1_fu_264_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [13:0] indvar_flatten12_fu_70;
wire   [13:0] add_ln42_fu_139_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [5:0] vec_i_2_fu_74;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln44_fu_169_p2;
wire   [0:0] xor_ln42_fu_163_p2;
wire   [0:0] and_ln42_fu_175_p2;
wire   [0:0] or_ln43_fu_181_p2;
wire   [1:0] select_ln43_fu_187_p3;
wire   [0:0] trunc_ln52_fu_201_p1;
wire   [2:0] shl_ln_fu_209_p3;
wire   [3:0] zext_ln52_1_fu_217_p1;
wire   [3:0] zext_ln52_fu_205_p1;
wire   [8:0] add_ln43_fu_259_p2;
wire  signed [5:0] sext_ln52_fu_299_p1;
wire   [5:0] lshr_ln52_fu_302_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_149;
reg    ap_condition_292;
reg    ap_condition_295;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_CS_fsm = 2'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
//#0 tip_fu_62 = 2'd0;
//#0 indvar_flatten_fu_66 = 9'd0;
//#0 indvar_flatten12_fu_70 = 14'd0;
//#0 vec_i_2_fu_74 = 6'd0;
end

ATTN11_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_149)) begin
        if ((icmp_ln42_fu_145_p2 == 1'd0)) begin
            indvar_flatten12_fu_70 <= add_ln42_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_70 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            indvar_flatten_fu_66 <= 9'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            indvar_flatten_fu_66 <= select_ln43_1_fu_264_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_295)) begin
            tip_fu_62 <= 2'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            tip_fu_62 <= add_ln44_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln44_reg_378 <= add_ln44_fu_227_p2;
        cmp14_reg_369 <= cmp14_fu_195_p2;
        icmp_ln42_reg_360 <= icmp_ln42_fu_145_p2;
        icmp_ln43_reg_364 <= icmp_ln43_fu_157_p2;
        indvar_flatten_load_reg_355 <= ap_sig_allocacmp_indvar_flatten_load;
        sub_ln52_reg_373 <= sub_ln52_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vec_i_2_fu_74 <= vq_sm_head2_dout;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tip_load = 2'd0;
    end else begin
        ap_sig_allocacmp_tip_load = tip_fu_62;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_blk_n = unpacked_stream_full_n;
    end else begin
        unpacked_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream_write = 1'b1;
    end else begin
        unpacked_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vq_sm_head2_blk_n = vq_sm_head2_empty_n;
    end else begin
        vq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op53_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vq_sm_head2_read = 1'b1;
    end else begin
        vq_sm_head2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln43_fu_259_p2 = (indvar_flatten_load_reg_355 + 9'd1);

assign add_ln44_fu_227_p2 = (select_ln43_fu_187_p3 + 2'd1);

assign and_ln42_fu_175_p2 = (xor_ln42_fu_163_p2 & icmp_ln44_fu_169_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op53_read_state2 == 1'b1) & (vq_sm_head2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (unpacked_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_149 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((icmp_ln42_reg_360 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_295 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((cmp14_reg_369 == 1'd1) & (icmp_ln42_reg_360 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cmp14_fu_195_p2 = ((select_ln43_fu_187_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_145_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_157_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_169_p2 = ((ap_sig_allocacmp_tip_load == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln52_fu_302_p2 = vec_i_2_fu_74 >> sext_ln52_fu_299_p1;

assign or_ln43_fu_181_p2 = (icmp_ln43_fu_157_p2 | and_ln42_fu_175_p2);

assign select_ln43_1_fu_264_p3 = ((icmp_ln43_reg_364[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_259_p2);

assign select_ln43_fu_187_p3 = ((or_ln43_fu_181_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_tip_load);

assign sext_ln52_fu_299_p1 = $signed(sub_ln52_reg_373);

assign shl_ln_fu_209_p3 = {{trunc_ln52_fu_201_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln52_fu_221_p2 = (zext_ln52_1_fu_217_p1 - zext_ln52_fu_205_p1);

assign trunc_ln52_fu_201_p1 = select_ln43_fu_187_p3[0:0];

assign unpacked_stream_din = lshr_ln52_fu_302_p2[2:0];

assign xor_ln42_fu_163_p2 = (icmp_ln43_fu_157_p2 ^ 1'd1);

assign zext_ln52_1_fu_217_p1 = shl_ln_fu_209_p3;

assign zext_ln52_fu_205_p1 = trunc_ln52_fu_201_p1;

endmodule //ATTN11_unpack_44
